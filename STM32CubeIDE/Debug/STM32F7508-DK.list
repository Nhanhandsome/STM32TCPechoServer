
STM32F7508-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bootloader   000020a4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   000001c8  90000000  90000000  00020000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00029fe8  900001d0  900001d0  000201d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000072c0  9002a1b8  9002a1b8  0004a1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000001a8  90031478  90031478  00051478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  90031620  90031620  000f0c88  2**0
                  CONTENTS
  6 .ARM          00000008  90031620  90031620  00051620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  90031628  90031628  000f0c88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000018  90031628  90031628  00051628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  90031640  90031640  00051640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000130  20000000  90031648  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .RxDecripSection 00000080  20000130  90031778  00060130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .RxarraySection 000017d0  200001b0  900317f8  000601b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .TxDescripSection 00000080  20001980  90032fc8  00061980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .TxarraySection 000017d0  20001a00  90033048  00061a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .bss          000299c8  200031d0  90034818  000631d0  2**2
                  ALLOC
 16 ._user_heap_stack 00012000  2002cb98  90034818  0006cb98  2**0
                  ALLOC
 17 .ARM.attributes 00000030  00000000  00000000  000f0c88  2**0
                  CONTENTS, READONLY
 18 FontFlashSection 00001fa8  90100000  90100000  00070000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 TextFlashSection 00000094  90101fa8  90101fa8  00071fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 ExtFlashSection 0007ec4c  9010203c  9010203c  0007203c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 21 .debug_line   0007bee0  00000000  00000000  000f0cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_info   000f7c63  00000000  00000000  0016cb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_abbrev 0001b224  00000000  00000000  002647fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_aranges 00003838  00000000  00000000  0027fa20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    001436b2  00000000  00000000  00283258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_ranges 00006390  00000000  00000000  003c6910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_macro  00046ee1  00000000  00000000  003ccca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .comment      000000d2  00000000  00000000  00413b81  2**0
                  CONTENTS, READONLY
 29 .debug_frame  0000b2e8  00000000  00000000  00413c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_loc    0003ee16  00000000  00000000  0041ef3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900001d0 <__do_global_dtors_aux>:
900001d0:	b510      	push	{r4, lr}
900001d2:	4c05      	ldr	r4, [pc, #20]	; (900001e8 <__do_global_dtors_aux+0x18>)
900001d4:	7823      	ldrb	r3, [r4, #0]
900001d6:	b933      	cbnz	r3, 900001e6 <__do_global_dtors_aux+0x16>
900001d8:	4b04      	ldr	r3, [pc, #16]	; (900001ec <__do_global_dtors_aux+0x1c>)
900001da:	b113      	cbz	r3, 900001e2 <__do_global_dtors_aux+0x12>
900001dc:	4804      	ldr	r0, [pc, #16]	; (900001f0 <__do_global_dtors_aux+0x20>)
900001de:	f3af 8000 	nop.w
900001e2:	2301      	movs	r3, #1
900001e4:	7023      	strb	r3, [r4, #0]
900001e6:	bd10      	pop	{r4, pc}
900001e8:	200031d0 	.word	0x200031d0
900001ec:	00000000 	.word	0x00000000
900001f0:	9002a1a0 	.word	0x9002a1a0

900001f4 <frame_dummy>:
900001f4:	b508      	push	{r3, lr}
900001f6:	4b03      	ldr	r3, [pc, #12]	; (90000204 <frame_dummy+0x10>)
900001f8:	b11b      	cbz	r3, 90000202 <frame_dummy+0xe>
900001fa:	4903      	ldr	r1, [pc, #12]	; (90000208 <frame_dummy+0x14>)
900001fc:	4803      	ldr	r0, [pc, #12]	; (9000020c <frame_dummy+0x18>)
900001fe:	f3af 8000 	nop.w
90000202:	bd08      	pop	{r3, pc}
90000204:	00000000 	.word	0x00000000
90000208:	200031d4 	.word	0x200031d4
9000020c:	9002a1a0 	.word	0x9002a1a0

90000210 <strlen>:
90000210:	4603      	mov	r3, r0
90000212:	f813 2b01 	ldrb.w	r2, [r3], #1
90000216:	2a00      	cmp	r2, #0
90000218:	d1fb      	bne.n	90000212 <strlen+0x2>
9000021a:	1a18      	subs	r0, r3, r0
9000021c:	3801      	subs	r0, #1
9000021e:	4770      	bx	lr

90000220 <memchr>:
90000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
90000224:	2a10      	cmp	r2, #16
90000226:	db2b      	blt.n	90000280 <memchr+0x60>
90000228:	f010 0f07 	tst.w	r0, #7
9000022c:	d008      	beq.n	90000240 <memchr+0x20>
9000022e:	f810 3b01 	ldrb.w	r3, [r0], #1
90000232:	3a01      	subs	r2, #1
90000234:	428b      	cmp	r3, r1
90000236:	d02d      	beq.n	90000294 <memchr+0x74>
90000238:	f010 0f07 	tst.w	r0, #7
9000023c:	b342      	cbz	r2, 90000290 <memchr+0x70>
9000023e:	d1f6      	bne.n	9000022e <memchr+0xe>
90000240:	b4f0      	push	{r4, r5, r6, r7}
90000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000024a:	f022 0407 	bic.w	r4, r2, #7
9000024e:	f07f 0700 	mvns.w	r7, #0
90000252:	2300      	movs	r3, #0
90000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000258:	3c08      	subs	r4, #8
9000025a:	ea85 0501 	eor.w	r5, r5, r1
9000025e:	ea86 0601 	eor.w	r6, r6, r1
90000262:	fa85 f547 	uadd8	r5, r5, r7
90000266:	faa3 f587 	sel	r5, r3, r7
9000026a:	fa86 f647 	uadd8	r6, r6, r7
9000026e:	faa5 f687 	sel	r6, r5, r7
90000272:	b98e      	cbnz	r6, 90000298 <memchr+0x78>
90000274:	d1ee      	bne.n	90000254 <memchr+0x34>
90000276:	bcf0      	pop	{r4, r5, r6, r7}
90000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000027c:	f002 0207 	and.w	r2, r2, #7
90000280:	b132      	cbz	r2, 90000290 <memchr+0x70>
90000282:	f810 3b01 	ldrb.w	r3, [r0], #1
90000286:	3a01      	subs	r2, #1
90000288:	ea83 0301 	eor.w	r3, r3, r1
9000028c:	b113      	cbz	r3, 90000294 <memchr+0x74>
9000028e:	d1f8      	bne.n	90000282 <memchr+0x62>
90000290:	2000      	movs	r0, #0
90000292:	4770      	bx	lr
90000294:	3801      	subs	r0, #1
90000296:	4770      	bx	lr
90000298:	2d00      	cmp	r5, #0
9000029a:	bf06      	itte	eq
9000029c:	4635      	moveq	r5, r6
9000029e:	3803      	subeq	r0, #3
900002a0:	3807      	subne	r0, #7
900002a2:	f015 0f01 	tst.w	r5, #1
900002a6:	d107      	bne.n	900002b8 <memchr+0x98>
900002a8:	3001      	adds	r0, #1
900002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
900002ae:	bf02      	ittt	eq
900002b0:	3001      	addeq	r0, #1
900002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
900002b6:	3001      	addeq	r0, #1
900002b8:	bcf0      	pop	{r4, r5, r6, r7}
900002ba:	3801      	subs	r0, #1
900002bc:	4770      	bx	lr
900002be:	bf00      	nop

900002c0 <__aeabi_drsub>:
900002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
900002c4:	e002      	b.n	900002cc <__adddf3>
900002c6:	bf00      	nop

900002c8 <__aeabi_dsub>:
900002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

900002cc <__adddf3>:
900002cc:	b530      	push	{r4, r5, lr}
900002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
900002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
900002d6:	ea94 0f05 	teq	r4, r5
900002da:	bf08      	it	eq
900002dc:	ea90 0f02 	teqeq	r0, r2
900002e0:	bf1f      	itttt	ne
900002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
900002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
900002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
900002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
900002f2:	f000 80e2 	beq.w	900004ba <__adddf3+0x1ee>
900002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
900002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
900002fe:	bfb8      	it	lt
90000300:	426d      	neglt	r5, r5
90000302:	dd0c      	ble.n	9000031e <__adddf3+0x52>
90000304:	442c      	add	r4, r5
90000306:	ea80 0202 	eor.w	r2, r0, r2
9000030a:	ea81 0303 	eor.w	r3, r1, r3
9000030e:	ea82 0000 	eor.w	r0, r2, r0
90000312:	ea83 0101 	eor.w	r1, r3, r1
90000316:	ea80 0202 	eor.w	r2, r0, r2
9000031a:	ea81 0303 	eor.w	r3, r1, r3
9000031e:	2d36      	cmp	r5, #54	; 0x36
90000320:	bf88      	it	hi
90000322:	bd30      	pophi	{r4, r5, pc}
90000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
90000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
9000032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
90000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
90000334:	d002      	beq.n	9000033c <__adddf3+0x70>
90000336:	4240      	negs	r0, r0
90000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
9000033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
90000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
90000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
90000348:	d002      	beq.n	90000350 <__adddf3+0x84>
9000034a:	4252      	negs	r2, r2
9000034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
90000350:	ea94 0f05 	teq	r4, r5
90000354:	f000 80a7 	beq.w	900004a6 <__adddf3+0x1da>
90000358:	f1a4 0401 	sub.w	r4, r4, #1
9000035c:	f1d5 0e20 	rsbs	lr, r5, #32
90000360:	db0d      	blt.n	9000037e <__adddf3+0xb2>
90000362:	fa02 fc0e 	lsl.w	ip, r2, lr
90000366:	fa22 f205 	lsr.w	r2, r2, r5
9000036a:	1880      	adds	r0, r0, r2
9000036c:	f141 0100 	adc.w	r1, r1, #0
90000370:	fa03 f20e 	lsl.w	r2, r3, lr
90000374:	1880      	adds	r0, r0, r2
90000376:	fa43 f305 	asr.w	r3, r3, r5
9000037a:	4159      	adcs	r1, r3
9000037c:	e00e      	b.n	9000039c <__adddf3+0xd0>
9000037e:	f1a5 0520 	sub.w	r5, r5, #32
90000382:	f10e 0e20 	add.w	lr, lr, #32
90000386:	2a01      	cmp	r2, #1
90000388:	fa03 fc0e 	lsl.w	ip, r3, lr
9000038c:	bf28      	it	cs
9000038e:	f04c 0c02 	orrcs.w	ip, ip, #2
90000392:	fa43 f305 	asr.w	r3, r3, r5
90000396:	18c0      	adds	r0, r0, r3
90000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
9000039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
900003a0:	d507      	bpl.n	900003b2 <__adddf3+0xe6>
900003a2:	f04f 0e00 	mov.w	lr, #0
900003a6:	f1dc 0c00 	rsbs	ip, ip, #0
900003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
900003ae:	eb6e 0101 	sbc.w	r1, lr, r1
900003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
900003b6:	d31b      	bcc.n	900003f0 <__adddf3+0x124>
900003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
900003bc:	d30c      	bcc.n	900003d8 <__adddf3+0x10c>
900003be:	0849      	lsrs	r1, r1, #1
900003c0:	ea5f 0030 	movs.w	r0, r0, rrx
900003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
900003c8:	f104 0401 	add.w	r4, r4, #1
900003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
900003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
900003d4:	f080 809a 	bcs.w	9000050c <__adddf3+0x240>
900003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
900003dc:	bf08      	it	eq
900003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
900003e2:	f150 0000 	adcs.w	r0, r0, #0
900003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
900003ea:	ea41 0105 	orr.w	r1, r1, r5
900003ee:	bd30      	pop	{r4, r5, pc}
900003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
900003f4:	4140      	adcs	r0, r0
900003f6:	eb41 0101 	adc.w	r1, r1, r1
900003fa:	3c01      	subs	r4, #1
900003fc:	bf28      	it	cs
900003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
90000402:	d2e9      	bcs.n	900003d8 <__adddf3+0x10c>
90000404:	f091 0f00 	teq	r1, #0
90000408:	bf04      	itt	eq
9000040a:	4601      	moveq	r1, r0
9000040c:	2000      	moveq	r0, #0
9000040e:	fab1 f381 	clz	r3, r1
90000412:	bf08      	it	eq
90000414:	3320      	addeq	r3, #32
90000416:	f1a3 030b 	sub.w	r3, r3, #11
9000041a:	f1b3 0220 	subs.w	r2, r3, #32
9000041e:	da0c      	bge.n	9000043a <__adddf3+0x16e>
90000420:	320c      	adds	r2, #12
90000422:	dd08      	ble.n	90000436 <__adddf3+0x16a>
90000424:	f102 0c14 	add.w	ip, r2, #20
90000428:	f1c2 020c 	rsb	r2, r2, #12
9000042c:	fa01 f00c 	lsl.w	r0, r1, ip
90000430:	fa21 f102 	lsr.w	r1, r1, r2
90000434:	e00c      	b.n	90000450 <__adddf3+0x184>
90000436:	f102 0214 	add.w	r2, r2, #20
9000043a:	bfd8      	it	le
9000043c:	f1c2 0c20 	rsble	ip, r2, #32
90000440:	fa01 f102 	lsl.w	r1, r1, r2
90000444:	fa20 fc0c 	lsr.w	ip, r0, ip
90000448:	bfdc      	itt	le
9000044a:	ea41 010c 	orrle.w	r1, r1, ip
9000044e:	4090      	lslle	r0, r2
90000450:	1ae4      	subs	r4, r4, r3
90000452:	bfa2      	ittt	ge
90000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
90000458:	4329      	orrge	r1, r5
9000045a:	bd30      	popge	{r4, r5, pc}
9000045c:	ea6f 0404 	mvn.w	r4, r4
90000460:	3c1f      	subs	r4, #31
90000462:	da1c      	bge.n	9000049e <__adddf3+0x1d2>
90000464:	340c      	adds	r4, #12
90000466:	dc0e      	bgt.n	90000486 <__adddf3+0x1ba>
90000468:	f104 0414 	add.w	r4, r4, #20
9000046c:	f1c4 0220 	rsb	r2, r4, #32
90000470:	fa20 f004 	lsr.w	r0, r0, r4
90000474:	fa01 f302 	lsl.w	r3, r1, r2
90000478:	ea40 0003 	orr.w	r0, r0, r3
9000047c:	fa21 f304 	lsr.w	r3, r1, r4
90000480:	ea45 0103 	orr.w	r1, r5, r3
90000484:	bd30      	pop	{r4, r5, pc}
90000486:	f1c4 040c 	rsb	r4, r4, #12
9000048a:	f1c4 0220 	rsb	r2, r4, #32
9000048e:	fa20 f002 	lsr.w	r0, r0, r2
90000492:	fa01 f304 	lsl.w	r3, r1, r4
90000496:	ea40 0003 	orr.w	r0, r0, r3
9000049a:	4629      	mov	r1, r5
9000049c:	bd30      	pop	{r4, r5, pc}
9000049e:	fa21 f004 	lsr.w	r0, r1, r4
900004a2:	4629      	mov	r1, r5
900004a4:	bd30      	pop	{r4, r5, pc}
900004a6:	f094 0f00 	teq	r4, #0
900004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
900004ae:	bf06      	itte	eq
900004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
900004b4:	3401      	addeq	r4, #1
900004b6:	3d01      	subne	r5, #1
900004b8:	e74e      	b.n	90000358 <__adddf3+0x8c>
900004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
900004be:	bf18      	it	ne
900004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
900004c4:	d029      	beq.n	9000051a <__adddf3+0x24e>
900004c6:	ea94 0f05 	teq	r4, r5
900004ca:	bf08      	it	eq
900004cc:	ea90 0f02 	teqeq	r0, r2
900004d0:	d005      	beq.n	900004de <__adddf3+0x212>
900004d2:	ea54 0c00 	orrs.w	ip, r4, r0
900004d6:	bf04      	itt	eq
900004d8:	4619      	moveq	r1, r3
900004da:	4610      	moveq	r0, r2
900004dc:	bd30      	pop	{r4, r5, pc}
900004de:	ea91 0f03 	teq	r1, r3
900004e2:	bf1e      	ittt	ne
900004e4:	2100      	movne	r1, #0
900004e6:	2000      	movne	r0, #0
900004e8:	bd30      	popne	{r4, r5, pc}
900004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
900004ee:	d105      	bne.n	900004fc <__adddf3+0x230>
900004f0:	0040      	lsls	r0, r0, #1
900004f2:	4149      	adcs	r1, r1
900004f4:	bf28      	it	cs
900004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
900004fa:	bd30      	pop	{r4, r5, pc}
900004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
90000500:	bf3c      	itt	cc
90000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
90000506:	bd30      	popcc	{r4, r5, pc}
90000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
9000050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
90000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
90000514:	f04f 0000 	mov.w	r0, #0
90000518:	bd30      	pop	{r4, r5, pc}
9000051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
9000051e:	bf1a      	itte	ne
90000520:	4619      	movne	r1, r3
90000522:	4610      	movne	r0, r2
90000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
90000528:	bf1c      	itt	ne
9000052a:	460b      	movne	r3, r1
9000052c:	4602      	movne	r2, r0
9000052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
90000532:	bf06      	itte	eq
90000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
90000538:	ea91 0f03 	teqeq	r1, r3
9000053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
90000540:	bd30      	pop	{r4, r5, pc}
90000542:	bf00      	nop

90000544 <__aeabi_ui2d>:
90000544:	f090 0f00 	teq	r0, #0
90000548:	bf04      	itt	eq
9000054a:	2100      	moveq	r1, #0
9000054c:	4770      	bxeq	lr
9000054e:	b530      	push	{r4, r5, lr}
90000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
90000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
90000558:	f04f 0500 	mov.w	r5, #0
9000055c:	f04f 0100 	mov.w	r1, #0
90000560:	e750      	b.n	90000404 <__adddf3+0x138>
90000562:	bf00      	nop

90000564 <__aeabi_i2d>:
90000564:	f090 0f00 	teq	r0, #0
90000568:	bf04      	itt	eq
9000056a:	2100      	moveq	r1, #0
9000056c:	4770      	bxeq	lr
9000056e:	b530      	push	{r4, r5, lr}
90000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
90000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
90000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
9000057c:	bf48      	it	mi
9000057e:	4240      	negmi	r0, r0
90000580:	f04f 0100 	mov.w	r1, #0
90000584:	e73e      	b.n	90000404 <__adddf3+0x138>
90000586:	bf00      	nop

90000588 <__aeabi_f2d>:
90000588:	0042      	lsls	r2, r0, #1
9000058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
9000058e:	ea4f 0131 	mov.w	r1, r1, rrx
90000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
90000596:	bf1f      	itttt	ne
90000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
9000059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
900005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
900005a4:	4770      	bxne	lr
900005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
900005aa:	bf08      	it	eq
900005ac:	4770      	bxeq	lr
900005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
900005b2:	bf04      	itt	eq
900005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
900005b8:	4770      	bxeq	lr
900005ba:	b530      	push	{r4, r5, lr}
900005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
900005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
900005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
900005c8:	e71c      	b.n	90000404 <__adddf3+0x138>
900005ca:	bf00      	nop

900005cc <__aeabi_ul2d>:
900005cc:	ea50 0201 	orrs.w	r2, r0, r1
900005d0:	bf08      	it	eq
900005d2:	4770      	bxeq	lr
900005d4:	b530      	push	{r4, r5, lr}
900005d6:	f04f 0500 	mov.w	r5, #0
900005da:	e00a      	b.n	900005f2 <__aeabi_l2d+0x16>

900005dc <__aeabi_l2d>:
900005dc:	ea50 0201 	orrs.w	r2, r0, r1
900005e0:	bf08      	it	eq
900005e2:	4770      	bxeq	lr
900005e4:	b530      	push	{r4, r5, lr}
900005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
900005ea:	d502      	bpl.n	900005f2 <__aeabi_l2d+0x16>
900005ec:	4240      	negs	r0, r0
900005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
900005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
900005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
900005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
900005fe:	f43f aed8 	beq.w	900003b2 <__adddf3+0xe6>
90000602:	f04f 0203 	mov.w	r2, #3
90000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
9000060a:	bf18      	it	ne
9000060c:	3203      	addne	r2, #3
9000060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
90000612:	bf18      	it	ne
90000614:	3203      	addne	r2, #3
90000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
9000061a:	f1c2 0320 	rsb	r3, r2, #32
9000061e:	fa00 fc03 	lsl.w	ip, r0, r3
90000622:	fa20 f002 	lsr.w	r0, r0, r2
90000626:	fa01 fe03 	lsl.w	lr, r1, r3
9000062a:	ea40 000e 	orr.w	r0, r0, lr
9000062e:	fa21 f102 	lsr.w	r1, r1, r2
90000632:	4414      	add	r4, r2
90000634:	e6bd      	b.n	900003b2 <__adddf3+0xe6>
90000636:	bf00      	nop

90000638 <__aeabi_d2f>:
90000638:	ea4f 0241 	mov.w	r2, r1, lsl #1
9000063c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
90000640:	bf24      	itt	cs
90000642:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
90000646:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
9000064a:	d90d      	bls.n	90000668 <__aeabi_d2f+0x30>
9000064c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
90000650:	ea4f 02c0 	mov.w	r2, r0, lsl #3
90000654:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
90000658:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
9000065c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
90000660:	bf08      	it	eq
90000662:	f020 0001 	biceq.w	r0, r0, #1
90000666:	4770      	bx	lr
90000668:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
9000066c:	d121      	bne.n	900006b2 <__aeabi_d2f+0x7a>
9000066e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
90000672:	bfbc      	itt	lt
90000674:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
90000678:	4770      	bxlt	lr
9000067a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
9000067e:	ea4f 5252 	mov.w	r2, r2, lsr #21
90000682:	f1c2 0218 	rsb	r2, r2, #24
90000686:	f1c2 0c20 	rsb	ip, r2, #32
9000068a:	fa10 f30c 	lsls.w	r3, r0, ip
9000068e:	fa20 f002 	lsr.w	r0, r0, r2
90000692:	bf18      	it	ne
90000694:	f040 0001 	orrne.w	r0, r0, #1
90000698:	ea4f 23c1 	mov.w	r3, r1, lsl #11
9000069c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
900006a0:	fa03 fc0c 	lsl.w	ip, r3, ip
900006a4:	ea40 000c 	orr.w	r0, r0, ip
900006a8:	fa23 f302 	lsr.w	r3, r3, r2
900006ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
900006b0:	e7cc      	b.n	9000064c <__aeabi_d2f+0x14>
900006b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
900006b6:	d107      	bne.n	900006c8 <__aeabi_d2f+0x90>
900006b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
900006bc:	bf1e      	ittt	ne
900006be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
900006c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
900006c6:	4770      	bxne	lr
900006c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
900006cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
900006d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
900006d4:	4770      	bx	lr
900006d6:	bf00      	nop

900006d8 <__aeabi_uldivmod>:
900006d8:	b953      	cbnz	r3, 900006f0 <__aeabi_uldivmod+0x18>
900006da:	b94a      	cbnz	r2, 900006f0 <__aeabi_uldivmod+0x18>
900006dc:	2900      	cmp	r1, #0
900006de:	bf08      	it	eq
900006e0:	2800      	cmpeq	r0, #0
900006e2:	bf1c      	itt	ne
900006e4:	f04f 31ff 	movne.w	r1, #4294967295
900006e8:	f04f 30ff 	movne.w	r0, #4294967295
900006ec:	f000 b96e 	b.w	900009cc <__aeabi_idiv0>
900006f0:	f1ad 0c08 	sub.w	ip, sp, #8
900006f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900006f8:	f000 f806 	bl	90000708 <__udivmoddi4>
900006fc:	f8dd e004 	ldr.w	lr, [sp, #4]
90000700:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
90000704:	b004      	add	sp, #16
90000706:	4770      	bx	lr

90000708 <__udivmoddi4>:
90000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000070c:	9d08      	ldr	r5, [sp, #32]
9000070e:	4604      	mov	r4, r0
90000710:	468c      	mov	ip, r1
90000712:	2b00      	cmp	r3, #0
90000714:	f040 8083 	bne.w	9000081e <__udivmoddi4+0x116>
90000718:	428a      	cmp	r2, r1
9000071a:	4617      	mov	r7, r2
9000071c:	d947      	bls.n	900007ae <__udivmoddi4+0xa6>
9000071e:	fab2 f282 	clz	r2, r2
90000722:	b142      	cbz	r2, 90000736 <__udivmoddi4+0x2e>
90000724:	f1c2 0020 	rsb	r0, r2, #32
90000728:	fa24 f000 	lsr.w	r0, r4, r0
9000072c:	4091      	lsls	r1, r2
9000072e:	4097      	lsls	r7, r2
90000730:	ea40 0c01 	orr.w	ip, r0, r1
90000734:	4094      	lsls	r4, r2
90000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
9000073a:	0c23      	lsrs	r3, r4, #16
9000073c:	fbbc f6f8 	udiv	r6, ip, r8
90000740:	fa1f fe87 	uxth.w	lr, r7
90000744:	fb08 c116 	mls	r1, r8, r6, ip
90000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000074c:	fb06 f10e 	mul.w	r1, r6, lr
90000750:	4299      	cmp	r1, r3
90000752:	d909      	bls.n	90000768 <__udivmoddi4+0x60>
90000754:	18fb      	adds	r3, r7, r3
90000756:	f106 30ff 	add.w	r0, r6, #4294967295
9000075a:	f080 8119 	bcs.w	90000990 <__udivmoddi4+0x288>
9000075e:	4299      	cmp	r1, r3
90000760:	f240 8116 	bls.w	90000990 <__udivmoddi4+0x288>
90000764:	3e02      	subs	r6, #2
90000766:	443b      	add	r3, r7
90000768:	1a5b      	subs	r3, r3, r1
9000076a:	b2a4      	uxth	r4, r4
9000076c:	fbb3 f0f8 	udiv	r0, r3, r8
90000770:	fb08 3310 	mls	r3, r8, r0, r3
90000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
90000778:	fb00 fe0e 	mul.w	lr, r0, lr
9000077c:	45a6      	cmp	lr, r4
9000077e:	d909      	bls.n	90000794 <__udivmoddi4+0x8c>
90000780:	193c      	adds	r4, r7, r4
90000782:	f100 33ff 	add.w	r3, r0, #4294967295
90000786:	f080 8105 	bcs.w	90000994 <__udivmoddi4+0x28c>
9000078a:	45a6      	cmp	lr, r4
9000078c:	f240 8102 	bls.w	90000994 <__udivmoddi4+0x28c>
90000790:	3802      	subs	r0, #2
90000792:	443c      	add	r4, r7
90000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
90000798:	eba4 040e 	sub.w	r4, r4, lr
9000079c:	2600      	movs	r6, #0
9000079e:	b11d      	cbz	r5, 900007a8 <__udivmoddi4+0xa0>
900007a0:	40d4      	lsrs	r4, r2
900007a2:	2300      	movs	r3, #0
900007a4:	e9c5 4300 	strd	r4, r3, [r5]
900007a8:	4631      	mov	r1, r6
900007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900007ae:	b902      	cbnz	r2, 900007b2 <__udivmoddi4+0xaa>
900007b0:	deff      	udf	#255	; 0xff
900007b2:	fab2 f282 	clz	r2, r2
900007b6:	2a00      	cmp	r2, #0
900007b8:	d150      	bne.n	9000085c <__udivmoddi4+0x154>
900007ba:	1bcb      	subs	r3, r1, r7
900007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900007c0:	fa1f f887 	uxth.w	r8, r7
900007c4:	2601      	movs	r6, #1
900007c6:	fbb3 fcfe 	udiv	ip, r3, lr
900007ca:	0c21      	lsrs	r1, r4, #16
900007cc:	fb0e 331c 	mls	r3, lr, ip, r3
900007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
900007d4:	fb08 f30c 	mul.w	r3, r8, ip
900007d8:	428b      	cmp	r3, r1
900007da:	d907      	bls.n	900007ec <__udivmoddi4+0xe4>
900007dc:	1879      	adds	r1, r7, r1
900007de:	f10c 30ff 	add.w	r0, ip, #4294967295
900007e2:	d202      	bcs.n	900007ea <__udivmoddi4+0xe2>
900007e4:	428b      	cmp	r3, r1
900007e6:	f200 80e9 	bhi.w	900009bc <__udivmoddi4+0x2b4>
900007ea:	4684      	mov	ip, r0
900007ec:	1ac9      	subs	r1, r1, r3
900007ee:	b2a3      	uxth	r3, r4
900007f0:	fbb1 f0fe 	udiv	r0, r1, lr
900007f4:	fb0e 1110 	mls	r1, lr, r0, r1
900007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
900007fc:	fb08 f800 	mul.w	r8, r8, r0
90000800:	45a0      	cmp	r8, r4
90000802:	d907      	bls.n	90000814 <__udivmoddi4+0x10c>
90000804:	193c      	adds	r4, r7, r4
90000806:	f100 33ff 	add.w	r3, r0, #4294967295
9000080a:	d202      	bcs.n	90000812 <__udivmoddi4+0x10a>
9000080c:	45a0      	cmp	r8, r4
9000080e:	f200 80d9 	bhi.w	900009c4 <__udivmoddi4+0x2bc>
90000812:	4618      	mov	r0, r3
90000814:	eba4 0408 	sub.w	r4, r4, r8
90000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
9000081c:	e7bf      	b.n	9000079e <__udivmoddi4+0x96>
9000081e:	428b      	cmp	r3, r1
90000820:	d909      	bls.n	90000836 <__udivmoddi4+0x12e>
90000822:	2d00      	cmp	r5, #0
90000824:	f000 80b1 	beq.w	9000098a <__udivmoddi4+0x282>
90000828:	2600      	movs	r6, #0
9000082a:	e9c5 0100 	strd	r0, r1, [r5]
9000082e:	4630      	mov	r0, r6
90000830:	4631      	mov	r1, r6
90000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000836:	fab3 f683 	clz	r6, r3
9000083a:	2e00      	cmp	r6, #0
9000083c:	d14a      	bne.n	900008d4 <__udivmoddi4+0x1cc>
9000083e:	428b      	cmp	r3, r1
90000840:	d302      	bcc.n	90000848 <__udivmoddi4+0x140>
90000842:	4282      	cmp	r2, r0
90000844:	f200 80b8 	bhi.w	900009b8 <__udivmoddi4+0x2b0>
90000848:	1a84      	subs	r4, r0, r2
9000084a:	eb61 0103 	sbc.w	r1, r1, r3
9000084e:	2001      	movs	r0, #1
90000850:	468c      	mov	ip, r1
90000852:	2d00      	cmp	r5, #0
90000854:	d0a8      	beq.n	900007a8 <__udivmoddi4+0xa0>
90000856:	e9c5 4c00 	strd	r4, ip, [r5]
9000085a:	e7a5      	b.n	900007a8 <__udivmoddi4+0xa0>
9000085c:	f1c2 0320 	rsb	r3, r2, #32
90000860:	fa20 f603 	lsr.w	r6, r0, r3
90000864:	4097      	lsls	r7, r2
90000866:	fa01 f002 	lsl.w	r0, r1, r2
9000086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
9000086e:	40d9      	lsrs	r1, r3
90000870:	4330      	orrs	r0, r6
90000872:	0c03      	lsrs	r3, r0, #16
90000874:	fbb1 f6fe 	udiv	r6, r1, lr
90000878:	fa1f f887 	uxth.w	r8, r7
9000087c:	fb0e 1116 	mls	r1, lr, r6, r1
90000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
90000884:	fb06 f108 	mul.w	r1, r6, r8
90000888:	4299      	cmp	r1, r3
9000088a:	fa04 f402 	lsl.w	r4, r4, r2
9000088e:	d909      	bls.n	900008a4 <__udivmoddi4+0x19c>
90000890:	18fb      	adds	r3, r7, r3
90000892:	f106 3cff 	add.w	ip, r6, #4294967295
90000896:	f080 808d 	bcs.w	900009b4 <__udivmoddi4+0x2ac>
9000089a:	4299      	cmp	r1, r3
9000089c:	f240 808a 	bls.w	900009b4 <__udivmoddi4+0x2ac>
900008a0:	3e02      	subs	r6, #2
900008a2:	443b      	add	r3, r7
900008a4:	1a5b      	subs	r3, r3, r1
900008a6:	b281      	uxth	r1, r0
900008a8:	fbb3 f0fe 	udiv	r0, r3, lr
900008ac:	fb0e 3310 	mls	r3, lr, r0, r3
900008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
900008b4:	fb00 f308 	mul.w	r3, r0, r8
900008b8:	428b      	cmp	r3, r1
900008ba:	d907      	bls.n	900008cc <__udivmoddi4+0x1c4>
900008bc:	1879      	adds	r1, r7, r1
900008be:	f100 3cff 	add.w	ip, r0, #4294967295
900008c2:	d273      	bcs.n	900009ac <__udivmoddi4+0x2a4>
900008c4:	428b      	cmp	r3, r1
900008c6:	d971      	bls.n	900009ac <__udivmoddi4+0x2a4>
900008c8:	3802      	subs	r0, #2
900008ca:	4439      	add	r1, r7
900008cc:	1acb      	subs	r3, r1, r3
900008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
900008d2:	e778      	b.n	900007c6 <__udivmoddi4+0xbe>
900008d4:	f1c6 0c20 	rsb	ip, r6, #32
900008d8:	fa03 f406 	lsl.w	r4, r3, r6
900008dc:	fa22 f30c 	lsr.w	r3, r2, ip
900008e0:	431c      	orrs	r4, r3
900008e2:	fa20 f70c 	lsr.w	r7, r0, ip
900008e6:	fa01 f306 	lsl.w	r3, r1, r6
900008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
900008ee:	fa21 f10c 	lsr.w	r1, r1, ip
900008f2:	431f      	orrs	r7, r3
900008f4:	0c3b      	lsrs	r3, r7, #16
900008f6:	fbb1 f9fe 	udiv	r9, r1, lr
900008fa:	fa1f f884 	uxth.w	r8, r4
900008fe:	fb0e 1119 	mls	r1, lr, r9, r1
90000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
90000906:	fb09 fa08 	mul.w	sl, r9, r8
9000090a:	458a      	cmp	sl, r1
9000090c:	fa02 f206 	lsl.w	r2, r2, r6
90000910:	fa00 f306 	lsl.w	r3, r0, r6
90000914:	d908      	bls.n	90000928 <__udivmoddi4+0x220>
90000916:	1861      	adds	r1, r4, r1
90000918:	f109 30ff 	add.w	r0, r9, #4294967295
9000091c:	d248      	bcs.n	900009b0 <__udivmoddi4+0x2a8>
9000091e:	458a      	cmp	sl, r1
90000920:	d946      	bls.n	900009b0 <__udivmoddi4+0x2a8>
90000922:	f1a9 0902 	sub.w	r9, r9, #2
90000926:	4421      	add	r1, r4
90000928:	eba1 010a 	sub.w	r1, r1, sl
9000092c:	b2bf      	uxth	r7, r7
9000092e:	fbb1 f0fe 	udiv	r0, r1, lr
90000932:	fb0e 1110 	mls	r1, lr, r0, r1
90000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
9000093a:	fb00 f808 	mul.w	r8, r0, r8
9000093e:	45b8      	cmp	r8, r7
90000940:	d907      	bls.n	90000952 <__udivmoddi4+0x24a>
90000942:	19e7      	adds	r7, r4, r7
90000944:	f100 31ff 	add.w	r1, r0, #4294967295
90000948:	d22e      	bcs.n	900009a8 <__udivmoddi4+0x2a0>
9000094a:	45b8      	cmp	r8, r7
9000094c:	d92c      	bls.n	900009a8 <__udivmoddi4+0x2a0>
9000094e:	3802      	subs	r0, #2
90000950:	4427      	add	r7, r4
90000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
90000956:	eba7 0708 	sub.w	r7, r7, r8
9000095a:	fba0 8902 	umull	r8, r9, r0, r2
9000095e:	454f      	cmp	r7, r9
90000960:	46c6      	mov	lr, r8
90000962:	4649      	mov	r1, r9
90000964:	d31a      	bcc.n	9000099c <__udivmoddi4+0x294>
90000966:	d017      	beq.n	90000998 <__udivmoddi4+0x290>
90000968:	b15d      	cbz	r5, 90000982 <__udivmoddi4+0x27a>
9000096a:	ebb3 020e 	subs.w	r2, r3, lr
9000096e:	eb67 0701 	sbc.w	r7, r7, r1
90000972:	fa07 fc0c 	lsl.w	ip, r7, ip
90000976:	40f2      	lsrs	r2, r6
90000978:	ea4c 0202 	orr.w	r2, ip, r2
9000097c:	40f7      	lsrs	r7, r6
9000097e:	e9c5 2700 	strd	r2, r7, [r5]
90000982:	2600      	movs	r6, #0
90000984:	4631      	mov	r1, r6
90000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000098a:	462e      	mov	r6, r5
9000098c:	4628      	mov	r0, r5
9000098e:	e70b      	b.n	900007a8 <__udivmoddi4+0xa0>
90000990:	4606      	mov	r6, r0
90000992:	e6e9      	b.n	90000768 <__udivmoddi4+0x60>
90000994:	4618      	mov	r0, r3
90000996:	e6fd      	b.n	90000794 <__udivmoddi4+0x8c>
90000998:	4543      	cmp	r3, r8
9000099a:	d2e5      	bcs.n	90000968 <__udivmoddi4+0x260>
9000099c:	ebb8 0e02 	subs.w	lr, r8, r2
900009a0:	eb69 0104 	sbc.w	r1, r9, r4
900009a4:	3801      	subs	r0, #1
900009a6:	e7df      	b.n	90000968 <__udivmoddi4+0x260>
900009a8:	4608      	mov	r0, r1
900009aa:	e7d2      	b.n	90000952 <__udivmoddi4+0x24a>
900009ac:	4660      	mov	r0, ip
900009ae:	e78d      	b.n	900008cc <__udivmoddi4+0x1c4>
900009b0:	4681      	mov	r9, r0
900009b2:	e7b9      	b.n	90000928 <__udivmoddi4+0x220>
900009b4:	4666      	mov	r6, ip
900009b6:	e775      	b.n	900008a4 <__udivmoddi4+0x19c>
900009b8:	4630      	mov	r0, r6
900009ba:	e74a      	b.n	90000852 <__udivmoddi4+0x14a>
900009bc:	f1ac 0c02 	sub.w	ip, ip, #2
900009c0:	4439      	add	r1, r7
900009c2:	e713      	b.n	900007ec <__udivmoddi4+0xe4>
900009c4:	3802      	subs	r0, #2
900009c6:	443c      	add	r4, r7
900009c8:	e724      	b.n	90000814 <__udivmoddi4+0x10c>
900009ca:	bf00      	nop

900009cc <__aeabi_idiv0>:
900009cc:	4770      	bx	lr
900009ce:	bf00      	nop

900009d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
900009d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 90000a08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
900009d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
900009d6:	e003      	b.n	900009e0 <LoopCopyDataInit>

900009d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
900009d8:	4b0c      	ldr	r3, [pc, #48]	; (90000a0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
900009da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
900009dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
900009de:	3104      	adds	r1, #4

900009e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
900009e0:	480b      	ldr	r0, [pc, #44]	; (90000a10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
900009e2:	4b0c      	ldr	r3, [pc, #48]	; (90000a14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
900009e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
900009e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
900009e8:	d3f6      	bcc.n	900009d8 <CopyDataInit>
  ldr  r2, =_sbss
900009ea:	4a0b      	ldr	r2, [pc, #44]	; (90000a18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
900009ec:	e002      	b.n	900009f4 <LoopFillZerobss>

900009ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
900009ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
900009f0:	f842 3b04 	str.w	r3, [r2], #4

900009f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
900009f4:	4b09      	ldr	r3, [pc, #36]	; (90000a1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
900009f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
900009f8:	d3f9      	bcc.n	900009ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
900009fa:	f003 fb87 	bl	9000410c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
900009fe:	f028 f95d 	bl	90028cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
90000a02:	f001 f9c9 	bl	90001d98 <main>
  bx  lr    
90000a06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90000a08:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
90000a0c:	90031648 	.word	0x90031648
  ldr  r0, =_sdata
90000a10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
90000a14:	20000130 	.word	0x20000130
  ldr  r2, =_sbss
90000a18:	200031d0 	.word	0x200031d0
  ldr  r3, = _ebss
90000a1c:	2002cb98 	.word	0x2002cb98

90000a20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90000a20:	e7fe      	b.n	90000a20 <ADC_IRQHandler>
	...

90000a24 <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
90000a24:	2100      	movs	r1, #0
{
90000a26:	b530      	push	{r4, r5, lr}
  tcpip_init( NULL, NULL );
90000a28:	4608      	mov	r0, r1
{
90000a2a:	b085      	sub	sp, #20
  tcpip_init( NULL, NULL );
90000a2c:	f012 fde0 	bl	900135f0 <tcpip_init>
  ipaddr.addr = 0;
  netmask.addr = 0;
  gw.addr = 0;

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
90000a30:	4d21      	ldr	r5, [pc, #132]	; (90000ab8 <MX_LWIP_Init+0x94>)
  ipaddr.addr = 0;
90000a32:	2000      	movs	r0, #0
  gw.addr = 0;
90000a34:	4b21      	ldr	r3, [pc, #132]	; (90000abc <MX_LWIP_Init+0x98>)
  ipaddr.addr = 0;
90000a36:	4922      	ldr	r1, [pc, #136]	; (90000ac0 <MX_LWIP_Init+0x9c>)
  netmask.addr = 0;
90000a38:	4a22      	ldr	r2, [pc, #136]	; (90000ac4 <MX_LWIP_Init+0xa0>)
  gw.addr = 0;
90000a3a:	6018      	str	r0, [r3, #0]
  ipaddr.addr = 0;
90000a3c:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
90000a3e:	6010      	str	r0, [r2, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
90000a40:	4c21      	ldr	r4, [pc, #132]	; (90000ac8 <MX_LWIP_Init+0xa4>)
90000a42:	9502      	str	r5, [sp, #8]
90000a44:	4d21      	ldr	r5, [pc, #132]	; (90000acc <MX_LWIP_Init+0xa8>)
90000a46:	e9cd 0500 	strd	r0, r5, [sp]
90000a4a:	4620      	mov	r0, r4
90000a4c:	f00d fcea 	bl	9000e424 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
90000a50:	4620      	mov	r0, r4
90000a52:	f00d fd7f 	bl	9000e554 <netif_set_default>

  if (netif_is_link_up(&gnetif))
90000a56:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
90000a5a:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
90000a5c:	075d      	lsls	r5, r3, #29
90000a5e:	d528      	bpl.n	90000ab2 <MX_LWIP_Init+0x8e>
    netif_set_up(&gnetif);
90000a60:	f00d fd7e 	bl	9000e560 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
90000a64:	491a      	ldr	r1, [pc, #104]	; (90000ad0 <MX_LWIP_Init+0xac>)
90000a66:	4818      	ldr	r0, [pc, #96]	; (90000ac8 <MX_LWIP_Init+0xa4>)
90000a68:	f00d fdf2 	bl	9000e650 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
90000a6c:	2101      	movs	r1, #1
90000a6e:	2200      	movs	r2, #0

  link_arg.netif = &gnetif;
90000a70:	4d18      	ldr	r5, [pc, #96]	; (90000ad4 <MX_LWIP_Init+0xb0>)
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
90000a72:	4608      	mov	r0, r1
90000a74:	f006 fd86 	bl	90007584 <osSemaphoreNew>
90000a78:	4b17      	ldr	r3, [pc, #92]	; (90000ad8 <MX_LWIP_Init+0xb4>)
  link_arg.semaphore = Netif_LinkSemaphore;
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
90000a7a:	2220      	movs	r2, #32
90000a7c:	2100      	movs	r1, #0
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
90000a7e:	6018      	str	r0, [r3, #0]
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
90000a80:	4b16      	ldr	r3, [pc, #88]	; (90000adc <MX_LWIP_Init+0xb8>)
  link_arg.semaphore = Netif_LinkSemaphore;
90000a82:	e9c5 4000 	strd	r4, r0, [r5]
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
90000a86:	4618      	mov	r0, r3
90000a88:	f028 f982 	bl	90028d90 <memset>
  attributes.name = "LinkThr";
90000a8c:	4914      	ldr	r1, [pc, #80]	; (90000ae0 <MX_LWIP_Init+0xbc>)
90000a8e:	1f02      	subs	r2, r0, #4
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
  attributes.priority = osPriorityBelowNormal;
90000a90:	2310      	movs	r3, #16
  attributes.name = "LinkThr";
90000a92:	f840 1c04 	str.w	r1, [r0, #-4]
  attributes.priority = osPriorityBelowNormal;
90000a96:	f44f 6180 	mov.w	r1, #1024	; 0x400
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
90000a9a:	4812      	ldr	r0, [pc, #72]	; (90000ae4 <MX_LWIP_Init+0xc0>)
  attributes.priority = osPriorityBelowNormal;
90000a9c:	e9c2 1305 	strd	r1, r3, [r2, #20]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
90000aa0:	4629      	mov	r1, r5
90000aa2:	f006 fc5d 	bl	90007360 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
90000aa6:	4808      	ldr	r0, [pc, #32]	; (90000ac8 <MX_LWIP_Init+0xa4>)

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
90000aa8:	b005      	add	sp, #20
90000aaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  dhcp_start(&gnetif);
90000aae:	f00b bb31 	b.w	9000c114 <dhcp_start>
    netif_set_down(&gnetif);
90000ab2:	f00d fd6f 	bl	9000e594 <netif_set_down>
90000ab6:	e7d5      	b.n	90000a64 <MX_LWIP_Init+0x40>
90000ab8:	9001355d 	.word	0x9001355d
90000abc:	20026fe4 	.word	0x20026fe4
90000ac0:	20026fdc 	.word	0x20026fdc
90000ac4:	20026fe0 	.word	0x20026fe0
90000ac8:	20026fa4 	.word	0x20026fa4
90000acc:	90000d81 	.word	0x90000d81
90000ad0:	90000f29 	.word	0x90000f29
90000ad4:	20026f78 	.word	0x20026f78
90000ad8:	200031ec 	.word	0x200031ec
90000adc:	20026f84 	.word	0x20026f84
90000ae0:	9002a200 	.word	0x9002a200
90000ae4:	90000edd 	.word	0x90000edd

90000ae8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
90000ae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
90000aec:	4a24      	ldr	r2, [pc, #144]	; (90000b80 <low_level_output+0x98>)
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
90000aee:	f04f 0800 	mov.w	r8, #0
{
90000af2:	460c      	mov	r4, r1
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
90000af4:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
90000af8:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
90000afa:	4647      	mov	r7, r8
90000afc:	4691      	mov	r9, r2
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
90000afe:	68b3      	ldr	r3, [r6, #8]
  for(q = p; q != NULL; q = q->next)
90000b00:	b92c      	cbnz	r4, 90000b0e <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
90000b02:	4639      	mov	r1, r7
90000b04:	481e      	ldr	r0, [pc, #120]	; (90000b80 <low_level_output+0x98>)
90000b06:	f003 fef3 	bl	900048f0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
90000b0a:	4620      	mov	r0, r4
90000b0c:	e004      	b.n	90000b18 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
90000b0e:	6832      	ldr	r2, [r6, #0]
90000b10:	2a00      	cmp	r2, #0
90000b12:	da11      	bge.n	90000b38 <low_level_output+0x50>
        errval = ERR_USE;
90000b14:	f06f 0007 	mvn.w	r0, #7

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
90000b18:	f8d9 3000 	ldr.w	r3, [r9]
90000b1c:	f241 0214 	movw	r2, #4116	; 0x1014
90000b20:	5899      	ldr	r1, [r3, r2]
90000b22:	0689      	lsls	r1, r1, #26
90000b24:	d505      	bpl.n	90000b32 <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
90000b26:	2120      	movs	r1, #32
90000b28:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
90000b2a:	f241 0204 	movw	r2, #4100	; 0x1004
90000b2e:	2100      	movs	r1, #0
90000b30:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
90000b32:	b003      	add	sp, #12
90000b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
90000b38:	8962      	ldrh	r2, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
90000b3a:	4645      	mov	r5, r8
      payloadoffset = 0;
90000b3c:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
90000b40:	eb05 0802 	add.w	r8, r5, r2
90000b44:	6861      	ldr	r1, [r4, #4]
90000b46:	1958      	adds	r0, r3, r5
90000b48:	45d8      	cmp	r8, fp
90000b4a:	4451      	add	r1, sl
90000b4c:	d808      	bhi.n	90000b60 <low_level_output+0x78>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
90000b4e:	e9cd 2300 	strd	r2, r3, [sp]
90000b52:	f028 f8f5 	bl	90028d40 <memcpy>
      framelength = framelength + byteslefttocopy;
90000b56:	9a00      	ldr	r2, [sp, #0]
  for(q = p; q != NULL; q = q->next)
90000b58:	6824      	ldr	r4, [r4, #0]
      framelength = framelength + byteslefttocopy;
90000b5a:	4417      	add	r7, r2
  for(q = p; q != NULL; q = q->next)
90000b5c:	9b01      	ldr	r3, [sp, #4]
90000b5e:	e7cf      	b.n	90000b00 <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
90000b60:	ebab 0505 	sub.w	r5, fp, r5
90000b64:	462a      	mov	r2, r5
90000b66:	f028 f8eb 	bl	90028d40 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
90000b6a:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
90000b6c:	6833      	ldr	r3, [r6, #0]
90000b6e:	2b00      	cmp	r3, #0
90000b70:	dbd0      	blt.n	90000b14 <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
90000b72:	44aa      	add	sl, r5
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
90000b74:	442f      	add	r7, r5
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
90000b76:	68b3      	ldr	r3, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
90000b78:	f2a8 52f4 	subw	r2, r8, #1524	; 0x5f4
        bufferoffset = 0;
90000b7c:	2500      	movs	r5, #0
90000b7e:	e7df      	b.n	90000b40 <low_level_output+0x58>
90000b80:	20026fe8 	.word	0x20026fe8

90000b84 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
90000b84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90000b88:	4680      	mov	r8, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
90000b8a:	4c3a      	ldr	r4, [pc, #232]	; (90000c74 <ethernetif_input+0xf0>)
90000b8c:	f04f 31ff 	mov.w	r1, #4294967295
90000b90:	6820      	ldr	r0, [r4, #0]
90000b92:	f006 fd4d 	bl	90007630 <osSemaphoreAcquire>
90000b96:	2800      	cmp	r0, #0
90000b98:	d1f8      	bne.n	90000b8c <ethernetif_input+0x8>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
90000b9a:	4e37      	ldr	r6, [pc, #220]	; (90000c78 <ethernetif_input+0xf4>)
    {
      do
      {
        LOCK_TCPIP_CORE();
90000b9c:	4837      	ldr	r0, [pc, #220]	; (90000c7c <ethernetif_input+0xf8>)
90000b9e:	f00e ff46 	bl	9000fa2e <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
90000ba2:	4630      	mov	r0, r6
90000ba4:	f003 ff16 	bl	900049d4 <HAL_ETH_GetReceivedFrame_IT>
90000ba8:	4605      	mov	r5, r0
90000baa:	b130      	cbz	r0, 90000bba <ethernetif_input+0x36>
    return NULL;
90000bac:	2400      	movs	r4, #0
          if (netif->input( p, netif) != ERR_OK )
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
90000bae:	4833      	ldr	r0, [pc, #204]	; (90000c7c <ethernetif_input+0xf8>)
90000bb0:	f00e ff42 	bl	9000fa38 <sys_mutex_unlock>
      } while(p!=NULL);
90000bb4:	2c00      	cmp	r4, #0
90000bb6:	d1f0      	bne.n	90000b9a <ethernetif_input+0x16>
90000bb8:	e7e7      	b.n	90000b8a <ethernetif_input+0x6>
  len = heth.RxFrameInfos.length;
90000bba:	8fb1      	ldrh	r1, [r6, #60]	; 0x3c
  if (len > 0)
90000bbc:	bb01      	cbnz	r1, 90000c00 <ethernetif_input+0x7c>
  struct pbuf *p = NULL;
90000bbe:	2400      	movs	r4, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
90000bc0:	6b33      	ldr	r3, [r6, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
90000bc2:	2200      	movs	r2, #0
90000bc4:	6bb0      	ldr	r0, [r6, #56]	; 0x38
90000bc6:	4282      	cmp	r2, r0
90000bc8:	d14d      	bne.n	90000c66 <ethernetif_input+0xe2>
    heth.RxFrameInfos.SegCount =0;
90000bca:	2300      	movs	r3, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
90000bcc:	f241 0214 	movw	r2, #4116	; 0x1014
    heth.RxFrameInfos.SegCount =0;
90000bd0:	63b3      	str	r3, [r6, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
90000bd2:	6833      	ldr	r3, [r6, #0]
90000bd4:	5899      	ldr	r1, [r3, r2]
90000bd6:	0609      	lsls	r1, r1, #24
90000bd8:	d505      	bpl.n	90000be6 <ethernetif_input+0x62>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
90000bda:	2180      	movs	r1, #128	; 0x80
90000bdc:	5099      	str	r1, [r3, r2]
    heth.Instance->DMARPDR = 0;
90000bde:	f241 0208 	movw	r2, #4104	; 0x1008
90000be2:	2100      	movs	r1, #0
90000be4:	5099      	str	r1, [r3, r2]
        if   (p != NULL)
90000be6:	2c00      	cmp	r4, #0
90000be8:	d0e0      	beq.n	90000bac <ethernetif_input+0x28>
          if (netif->input( p, netif) != ERR_OK )
90000bea:	f8d8 3010 	ldr.w	r3, [r8, #16]
90000bee:	4641      	mov	r1, r8
90000bf0:	4620      	mov	r0, r4
90000bf2:	4798      	blx	r3
90000bf4:	2800      	cmp	r0, #0
90000bf6:	d0da      	beq.n	90000bae <ethernetif_input+0x2a>
            pbuf_free(p);
90000bf8:	4620      	mov	r0, r4
90000bfa:	f00d fe0b 	bl	9000e814 <pbuf_free>
90000bfe:	e7d6      	b.n	90000bae <ethernetif_input+0x2a>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
90000c00:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
90000c04:	6c37      	ldr	r7, [r6, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
90000c06:	f00d fe6d 	bl	9000e8e4 <pbuf_alloc>
  if (p != NULL)
90000c0a:	4604      	mov	r4, r0
90000c0c:	2800      	cmp	r0, #0
90000c0e:	d0d6      	beq.n	90000bbe <ethernetif_input+0x3a>
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
90000c10:	46b9      	mov	r9, r7
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
90000c12:	f8d6 a030 	ldr.w	sl, [r6, #48]	; 0x30
90000c16:	4607      	mov	r7, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
90000c18:	f240 5bf4 	movw	fp, #1524	; 0x5f4
      byteslefttocopy = q->len;
90000c1c:	f8b7 e00a 	ldrh.w	lr, [r7, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
90000c20:	46ac      	mov	ip, r5
      payloadoffset = 0;
90000c22:	2300      	movs	r3, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
90000c24:	eb0c 050e 	add.w	r5, ip, lr
90000c28:	6878      	ldr	r0, [r7, #4]
90000c2a:	eb09 010c 	add.w	r1, r9, ip
90000c2e:	455d      	cmp	r5, fp
90000c30:	4418      	add	r0, r3
90000c32:	d806      	bhi.n	90000c42 <ethernetif_input+0xbe>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
90000c34:	4672      	mov	r2, lr
90000c36:	f028 f883 	bl	90028d40 <memcpy>
    for(q = p; q != NULL; q = q->next)
90000c3a:	683f      	ldr	r7, [r7, #0]
90000c3c:	2f00      	cmp	r7, #0
90000c3e:	d1ed      	bne.n	90000c1c <ethernetif_input+0x98>
90000c40:	e7be      	b.n	90000bc0 <ethernetif_input+0x3c>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
90000c42:	ebab 020c 	sub.w	r2, fp, ip
90000c46:	9301      	str	r3, [sp, #4]
90000c48:	9200      	str	r2, [sp, #0]
90000c4a:	f028 f879 	bl	90028d40 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
90000c4e:	f8da a00c 	ldr.w	sl, [sl, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
90000c52:	f2a5 5ef4 	subw	lr, r5, #1524	; 0x5f4
        bufferoffset = 0;
90000c56:	f04f 0c00 	mov.w	ip, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
90000c5a:	f8da 9008 	ldr.w	r9, [sl, #8]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
90000c5e:	e9dd 2300 	ldrd	r2, r3, [sp]
90000c62:	4413      	add	r3, r2
        bufferoffset = 0;
90000c64:	e7de      	b.n	90000c24 <ethernetif_input+0xa0>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
90000c66:	6819      	ldr	r1, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
90000c68:	3201      	adds	r2, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
90000c6a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
90000c6e:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
90000c70:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
90000c72:	e7a8      	b.n	90000bc6 <ethernetif_input+0x42>
90000c74:	200031f0 	.word	0x200031f0
90000c78:	20026fe8 	.word	0x20026fe8
90000c7c:	2002cb84 	.word	0x2002cb84

90000c80 <HAL_ETH_MspInit>:
{
90000c80:	b5f0      	push	{r4, r5, r6, r7, lr}
90000c82:	b08d      	sub	sp, #52	; 0x34
90000c84:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000c86:	2214      	movs	r2, #20
90000c88:	2100      	movs	r1, #0
90000c8a:	a807      	add	r0, sp, #28
90000c8c:	f028 f880 	bl	90028d90 <memset>
  if(ethHandle->Instance==ETH)
90000c90:	6822      	ldr	r2, [r4, #0]
90000c92:	4b34      	ldr	r3, [pc, #208]	; (90000d64 <HAL_ETH_MspInit+0xe4>)
90000c94:	429a      	cmp	r2, r3
90000c96:	d162      	bne.n	90000d5e <HAL_ETH_MspInit+0xde>
    __HAL_RCC_ETH_CLK_ENABLE();
90000c98:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000c9c:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000c9e:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000ca0:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
90000ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
90000ca4:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90000ca6:	a907      	add	r1, sp, #28
90000ca8:	482f      	ldr	r0, [pc, #188]	; (90000d68 <HAL_ETH_MspInit+0xe8>)
    __HAL_RCC_ETH_CLK_ENABLE();
90000caa:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
90000cae:	631a      	str	r2, [r3, #48]	; 0x30
90000cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000cb2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
90000cb6:	9201      	str	r2, [sp, #4]
90000cb8:	9a01      	ldr	r2, [sp, #4]
90000cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000cbc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
90000cc0:	631a      	str	r2, [r3, #48]	; 0x30
90000cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000cc4:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
90000cc8:	9202      	str	r2, [sp, #8]
90000cca:	9a02      	ldr	r2, [sp, #8]
90000ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000cce:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
90000cd2:	631a      	str	r2, [r3, #48]	; 0x30
90000cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000cd6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
90000cda:	9203      	str	r2, [sp, #12]
90000cdc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
90000cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
90000ce4:	631a      	str	r2, [r3, #48]	; 0x30
90000ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000ce8:	f002 0240 	and.w	r2, r2, #64	; 0x40
90000cec:	9204      	str	r2, [sp, #16]
90000cee:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
90000cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000cf2:	f042 0204 	orr.w	r2, r2, #4
90000cf6:	631a      	str	r2, [r3, #48]	; 0x30
90000cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000cfa:	f002 0204 	and.w	r2, r2, #4
90000cfe:	9205      	str	r2, [sp, #20]
90000d00:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
90000d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90000d04:	f042 0201 	orr.w	r2, r2, #1
90000d08:	631a      	str	r2, [r3, #48]	; 0x30
90000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000d0c:	f003 0301 	and.w	r3, r3, #1
90000d10:	9306      	str	r3, [sp, #24]
90000d12:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000d14:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
90000d18:	e9cd 3707 	strd	r3, r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000d1c:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
90000d20:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90000d22:	f004 f949 	bl	90004fb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
90000d26:	2332      	movs	r3, #50	; 0x32
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90000d28:	a907      	add	r1, sp, #28
90000d2a:	4810      	ldr	r0, [pc, #64]	; (90000d6c <HAL_ETH_MspInit+0xec>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
90000d2c:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000d2e:	e9cd 3707 	strd	r3, r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000d32:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90000d36:	f004 f93f 	bl	90004fb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
90000d3a:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90000d3c:	a907      	add	r1, sp, #28
90000d3e:	480c      	ldr	r0, [pc, #48]	; (90000d70 <HAL_ETH_MspInit+0xf0>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
90000d40:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000d42:	e9cd 3707 	strd	r3, r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000d46:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90000d4a:	f004 f935 	bl	90004fb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
90000d4e:	203d      	movs	r0, #61	; 0x3d
90000d50:	4622      	mov	r2, r4
90000d52:	2105      	movs	r1, #5
90000d54:	f003 fa56 	bl	90004204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
90000d58:	203d      	movs	r0, #61	; 0x3d
90000d5a:	f003 fa85 	bl	90004268 <HAL_NVIC_EnableIRQ>
}
90000d5e:	b00d      	add	sp, #52	; 0x34
90000d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
90000d62:	bf00      	nop
90000d64:	40028000 	.word	0x40028000
90000d68:	40021800 	.word	0x40021800
90000d6c:	40020800 	.word	0x40020800
90000d70:	40020000 	.word	0x40020000

90000d74 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
90000d74:	4b01      	ldr	r3, [pc, #4]	; (90000d7c <HAL_ETH_RxCpltCallback+0x8>)
90000d76:	6818      	ldr	r0, [r3, #0]
90000d78:	f006 bc94 	b.w	900076a4 <osSemaphoreRelease>
90000d7c:	200031f0 	.word	0x200031f0

90000d80 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
90000d80:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
90000d82:	4604      	mov	r4, r0
{
90000d84:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
90000d86:	b930      	cbnz	r0, 90000d96 <ethernetif_init+0x16>
90000d88:	4b45      	ldr	r3, [pc, #276]	; (90000ea0 <ethernetif_init+0x120>)
90000d8a:	f240 2252 	movw	r2, #594	; 0x252
90000d8e:	4945      	ldr	r1, [pc, #276]	; (90000ea4 <ethernetif_init+0x124>)
90000d90:	4845      	ldr	r0, [pc, #276]	; (90000ea8 <ethernetif_init+0x128>)
90000d92:	f028 fb9d 	bl	900294d0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
90000d96:	f247 4373 	movw	r3, #29811	; 0x7473
  heth.Instance = ETH;
90000d9a:	4d44      	ldr	r5, [pc, #272]	; (90000eac <ethernetif_init+0x12c>)
90000d9c:	4a44      	ldr	r2, [pc, #272]	; (90000eb0 <ethernetif_init+0x130>)
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
90000d9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  netif->name[0] = IFNAME0;
90000da2:	8663      	strh	r3, [r4, #50]	; 0x32
  hal_eth_init_status = HAL_ETH_Init(&heth);
90000da4:	4628      	mov	r0, r5
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
90000da6:	4b43      	ldr	r3, [pc, #268]	; (90000eb4 <ethernetif_init+0x134>)
90000da8:	6163      	str	r3, [r4, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
90000daa:	4b43      	ldr	r3, [pc, #268]	; (90000eb8 <ethernetif_init+0x138>)
90000dac:	61a3      	str	r3, [r4, #24]
  uint32_t regvalue = 0;
90000dae:	2300      	movs	r3, #0
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_DISABLE;
90000db0:	e9c5 2300 	strd	r2, r3, [r5]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
90000db4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  uint32_t regvalue = 0;
90000db8:	9300      	str	r3, [sp, #0]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
90000dba:	822b      	strh	r3, [r5, #16]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
90000dbc:	61eb      	str	r3, [r5, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
90000dbe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
90000dc2:	e9c5 1202 	strd	r1, r2, [r5, #8]
  MACAddr[0] = 0x02;
90000dc6:	2202      	movs	r2, #2
  heth.Init.MACAddr = &MACAddr[0];
90000dc8:	a901      	add	r1, sp, #4
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
90000dca:	622b      	str	r3, [r5, #32]
  MACAddr[0] = 0x02;
90000dcc:	9201      	str	r2, [sp, #4]
  MACAddr[4] = 0x01;
90000dce:	2201      	movs	r2, #1
90000dd0:	f8ad 2008 	strh.w	r2, [sp, #8]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
90000dd4:	e9c5 1205 	strd	r1, r2, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
90000dd8:	f003 feee 	bl	90004bb8 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
90000ddc:	b928      	cbnz	r0, 90000dea <ethernetif_init+0x6a>
    netif->flags |= NETIF_FLAG_LINK_UP;
90000dde:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
90000de2:	f043 0304 	orr.w	r3, r3, #4
90000de6:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
90000dea:	2304      	movs	r3, #4
90000dec:	4a33      	ldr	r2, [pc, #204]	; (90000ebc <ethernetif_init+0x13c>)
90000dee:	4934      	ldr	r1, [pc, #208]	; (90000ec0 <ethernetif_init+0x140>)
90000df0:	482e      	ldr	r0, [pc, #184]	; (90000eac <ethernetif_init+0x12c>)
90000df2:	f003 fd07 	bl	90004804 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
90000df6:	2304      	movs	r3, #4
90000df8:	4a32      	ldr	r2, [pc, #200]	; (90000ec4 <ethernetif_init+0x144>)
90000dfa:	4933      	ldr	r1, [pc, #204]	; (90000ec8 <ethernetif_init+0x148>)
90000dfc:	482b      	ldr	r0, [pc, #172]	; (90000eac <ethernetif_init+0x12c>)
90000dfe:	f003 fd3d 	bl	9000487c <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
90000e02:	2306      	movs	r3, #6
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
90000e04:	2101      	movs	r1, #1
  netif->hwaddr_len = ETH_HWADDR_LEN;
90000e06:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
90000e0a:	696b      	ldr	r3, [r5, #20]
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
90000e0c:	4608      	mov	r0, r1
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
90000e0e:	781a      	ldrb	r2, [r3, #0]
90000e10:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
90000e14:	785a      	ldrb	r2, [r3, #1]
90000e16:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
90000e1a:	789a      	ldrb	r2, [r3, #2]
90000e1c:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
90000e20:	78da      	ldrb	r2, [r3, #3]
90000e22:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
90000e26:	791a      	ldrb	r2, [r3, #4]
90000e28:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
90000e2c:	2200      	movs	r2, #0
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
90000e2e:	795b      	ldrb	r3, [r3, #5]
90000e30:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  netif->mtu = 1500;
90000e34:	f240 53dc 	movw	r3, #1500	; 0x5dc
90000e38:	8523      	strh	r3, [r4, #40]	; 0x28
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
90000e3a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
90000e3e:	f043 030a 	orr.w	r3, r3, #10
90000e42:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
90000e46:	f006 fb9d 	bl	90007584 <osSemaphoreNew>
90000e4a:	4b20      	ldr	r3, [pc, #128]	; (90000ecc <ethernetif_init+0x14c>)
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
90000e4c:	2220      	movs	r2, #32
90000e4e:	2100      	movs	r1, #0
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
90000e50:	6018      	str	r0, [r3, #0]
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
90000e52:	a804      	add	r0, sp, #16
90000e54:	f027 ff9c 	bl	90028d90 <memset>
  attributes.name = "EthIf";
90000e58:	4b1d      	ldr	r3, [pc, #116]	; (90000ed0 <ethernetif_init+0x150>)
  attributes.priority = osPriorityRealtime;
90000e5a:	f44f 72af 	mov.w	r2, #350	; 0x15e
  osThreadNew(ethernetif_input, netif, &attributes);
90000e5e:	4621      	mov	r1, r4
  attributes.name = "EthIf";
90000e60:	9303      	str	r3, [sp, #12]
  attributes.priority = osPriorityRealtime;
90000e62:	2330      	movs	r3, #48	; 0x30
  osThreadNew(ethernetif_input, netif, &attributes);
90000e64:	481b      	ldr	r0, [pc, #108]	; (90000ed4 <ethernetif_init+0x154>)
  attributes.priority = osPriorityRealtime;
90000e66:	e9cd 2308 	strd	r2, r3, [sp, #32]
  osThreadNew(ethernetif_input, netif, &attributes);
90000e6a:	aa03      	add	r2, sp, #12
90000e6c:	f006 fa78 	bl	90007360 <osThreadNew>
  HAL_ETH_Start(&heth);
90000e70:	480e      	ldr	r0, [pc, #56]	; (90000eac <ethernetif_init+0x12c>)
90000e72:	f003 ff9b 	bl	90004dac <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
90000e76:	466a      	mov	r2, sp
90000e78:	211d      	movs	r1, #29
90000e7a:	480c      	ldr	r0, [pc, #48]	; (90000eac <ethernetif_init+0x12c>)
90000e7c:	f003 fe29 	bl	90004ad2 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
90000e80:	9a00      	ldr	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
90000e82:	211d      	movs	r1, #29
90000e84:	4809      	ldr	r0, [pc, #36]	; (90000eac <ethernetif_init+0x12c>)
  regvalue |= (PHY_ISFR_INT4);
90000e86:	f042 020b 	orr.w	r2, r2, #11
90000e8a:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
90000e8c:	f003 fe5c 	bl	90004b48 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
90000e90:	466a      	mov	r2, sp
90000e92:	211d      	movs	r1, #29
90000e94:	4805      	ldr	r0, [pc, #20]	; (90000eac <ethernetif_init+0x12c>)
90000e96:	f003 fe1c 	bl	90004ad2 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
90000e9a:	2000      	movs	r0, #0
90000e9c:	b00d      	add	sp, #52	; 0x34
90000e9e:	bd30      	pop	{r4, r5, pc}
90000ea0:	9002a208 	.word	0x9002a208
90000ea4:	9002bb7d 	.word	0x9002bb7d
90000ea8:	9002a254 	.word	0x9002a254
90000eac:	20026fe8 	.word	0x20026fe8
90000eb0:	40028000 	.word	0x40028000
90000eb4:	9000ccf9 	.word	0x9000ccf9
90000eb8:	90000ae9 	.word	0x90000ae9
90000ebc:	20001a00 	.word	0x20001a00
90000ec0:	20001980 	.word	0x20001980
90000ec4:	200001b0 	.word	0x200001b0
90000ec8:	20000130 	.word	0x20000130
90000ecc:	200031f0 	.word	0x200031f0
90000ed0:	9002a27c 	.word	0x9002a27c
90000ed4:	90000b85 	.word	0x90000b85

90000ed8 <sys_now>:
90000ed8:	f003 b96a 	b.w	900041b0 <HAL_GetTick>

90000edc <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
90000edc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t regvalue = 0;
90000ede:	2300      	movs	r3, #0
{
90000ee0:	4604      	mov	r4, r0
  struct link_str *link_arg = (struct link_str *)argument;

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
90000ee2:	4d0f      	ldr	r5, [pc, #60]	; (90000f20 <ethernetif_set_link+0x44>)
  uint32_t regvalue = 0;
90000ee4:	9301      	str	r3, [sp, #4]
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
90000ee6:	aa01      	add	r2, sp, #4
90000ee8:	2101      	movs	r1, #1
90000eea:	4628      	mov	r0, r5
90000eec:	f003 fdf1 	bl	90004ad2 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
90000ef0:	6820      	ldr	r0, [r4, #0]
    regvalue &= PHY_LINKED_STATUS;
90000ef2:	9b01      	ldr	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
90000ef4:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    regvalue &= PHY_LINKED_STATUS;
90000ef8:	f003 0304 	and.w	r3, r3, #4
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
90000efc:	0751      	lsls	r1, r2, #29
    regvalue &= PHY_LINKED_STATUS;
90000efe:	9301      	str	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
90000f00:	d408      	bmi.n	90000f14 <ethernetif_set_link+0x38>
90000f02:	b12b      	cbz	r3, 90000f10 <ethernetif_set_link+0x34>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
90000f04:	f00d fb62 	bl	9000e5cc <netif_set_link_up>
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
90000f08:	20c8      	movs	r0, #200	; 0xc8
90000f0a:	f006 fa85 	bl	90007418 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
90000f0e:	e7ea      	b.n	90000ee6 <ethernetif_set_link+0xa>
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
90000f10:	0752      	lsls	r2, r2, #29
90000f12:	d5f9      	bpl.n	90000f08 <ethernetif_set_link+0x2c>
90000f14:	2b00      	cmp	r3, #0
90000f16:	d1f7      	bne.n	90000f08 <ethernetif_set_link+0x2c>
      netif_set_link_down(link_arg->netif);
90000f18:	f00d fb80 	bl	9000e61c <netif_set_link_down>
90000f1c:	e7f4      	b.n	90000f08 <ethernetif_set_link+0x2c>
90000f1e:	bf00      	nop
90000f20:	20026fe8 	.word	0x20026fe8

90000f24 <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
90000f24:	4770      	bx	lr
	...

90000f28 <ethernetif_update_config>:
{
90000f28:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(netif_is_link_up(netif))
90000f2a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  __IO uint32_t tickstart = 0;
90000f2e:	2100      	movs	r1, #0
{
90000f30:	4605      	mov	r5, r0
  if(netif_is_link_up(netif))
90000f32:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
90000f34:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
90000f36:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
90000f38:	d544      	bpl.n	90000fc4 <ethernetif_update_config+0x9c>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
90000f3a:	4c24      	ldr	r4, [pc, #144]	; (90000fcc <ethernetif_update_config+0xa4>)
90000f3c:	6863      	ldr	r3, [r4, #4]
90000f3e:	2b00      	cmp	r3, #0
90000f40:	d035      	beq.n	90000fae <ethernetif_update_config+0x86>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
90000f42:	4626      	mov	r6, r4
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
90000f44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
90000f48:	4620      	mov	r0, r4
90000f4a:	f003 fdfd 	bl	90004b48 <HAL_ETH_WritePHYRegister>
      tickstart = HAL_GetTick();
90000f4e:	f003 f92f 	bl	900041b0 <HAL_GetTick>
90000f52:	9000      	str	r0, [sp, #0]
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
90000f54:	aa01      	add	r2, sp, #4
90000f56:	2101      	movs	r1, #1
90000f58:	4630      	mov	r0, r6
90000f5a:	f003 fdba 	bl	90004ad2 <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
90000f5e:	f003 f927 	bl	900041b0 <HAL_GetTick>
90000f62:	9b00      	ldr	r3, [sp, #0]
90000f64:	1ac0      	subs	r0, r0, r3
90000f66:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
90000f6a:	d820      	bhi.n	90000fae <ethernetif_update_config+0x86>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
90000f6c:	9b01      	ldr	r3, [sp, #4]
90000f6e:	069a      	lsls	r2, r3, #26
90000f70:	d5f0      	bpl.n	90000f54 <ethernetif_update_config+0x2c>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
90000f72:	aa01      	add	r2, sp, #4
90000f74:	211f      	movs	r1, #31
90000f76:	4815      	ldr	r0, [pc, #84]	; (90000fcc <ethernetif_update_config+0xa4>)
90000f78:	f003 fdab 	bl	90004ad2 <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
90000f7c:	9b01      	ldr	r3, [sp, #4]
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
90000f7e:	f013 0210 	ands.w	r2, r3, #16
90000f82:	bf18      	it	ne
90000f84:	f44f 6200 	movne.w	r2, #2048	; 0x800
      if(regvalue & PHY_SPEED_STATUS)
90000f88:	075b      	lsls	r3, r3, #29
        heth.Init.Speed = ETH_SPEED_10M;
90000f8a:	bf4c      	ite	mi
90000f8c:	2300      	movmi	r3, #0
        heth.Init.Speed = ETH_SPEED_100M;
90000f8e:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
90000f92:	60e2      	str	r2, [r4, #12]
90000f94:	60a3      	str	r3, [r4, #8]
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
90000f96:	2100      	movs	r1, #0
90000f98:	480c      	ldr	r0, [pc, #48]	; (90000fcc <ethernetif_update_config+0xa4>)
90000f9a:	f003 ff81 	bl	90004ea0 <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
90000f9e:	480b      	ldr	r0, [pc, #44]	; (90000fcc <ethernetif_update_config+0xa4>)
90000fa0:	f003 ff04 	bl	90004dac <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
90000fa4:	4628      	mov	r0, r5
90000fa6:	f7ff ffbd 	bl	90000f24 <ethernetif_notify_conn_changed>
}
90000faa:	b002      	add	sp, #8
90000fac:	bd70      	pop	{r4, r5, r6, pc}
                                                     (uint16_t)(heth.Init.Speed >> 1)));
90000fae:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
90000fb2:	2100      	movs	r1, #0
90000fb4:	4805      	ldr	r0, [pc, #20]	; (90000fcc <ethernetif_update_config+0xa4>)
                                                     (uint16_t)(heth.Init.Speed >> 1)));
90000fb6:	0852      	lsrs	r2, r2, #1
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
90000fb8:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
90000fbc:	b292      	uxth	r2, r2
90000fbe:	f003 fdc3 	bl	90004b48 <HAL_ETH_WritePHYRegister>
90000fc2:	e7e8      	b.n	90000f96 <ethernetif_update_config+0x6e>
    HAL_ETH_Stop(&heth);
90000fc4:	4801      	ldr	r0, [pc, #4]	; (90000fcc <ethernetif_update_config+0xa4>)
90000fc6:	f003 ff2e 	bl	90004e26 <HAL_ETH_Stop>
90000fca:	e7eb      	b.n	90000fa4 <ethernetif_update_config+0x7c>
90000fcc:	20026fe8 	.word	0x20026fe8

90000fd0 <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
90000fd0:	f000 bc34 	b.w	9000183c <touchgfx_init>

90000fd4 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
90000fd4:	f000 bca2 	b.w	9000191c <touchgfx_taskEntry>

90000fd8 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
90000fd8:	6840      	ldr	r0, [r0, #4]
    }
90000fda:	4770      	bx	lr

90000fdc <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
90000fdc:	6041      	str	r1, [r0, #4]
    }
90000fde:	4770      	bx	lr

90000fe0 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
90000fe0:	4a09      	ldr	r2, [pc, #36]	; (90001008 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
90000fe2:	6813      	ldr	r3, [r2, #0]
90000fe4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
90000fe8:	6013      	str	r3, [r2, #0]
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
90000fea:	f5a2 424e 	sub.w	r2, r2, #52736	; 0xce00
90000fee:	4b07      	ldr	r3, [pc, #28]	; (9000100c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
90000ff0:	f852 1c4c 	ldr.w	r1, [r2, #-76]
90000ff4:	3a4c      	subs	r2, #76	; 0x4c
90000ff6:	430b      	orrs	r3, r1
90000ff8:	6013      	str	r3, [r2, #0]
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
90000ffa:	f5a2 627b 	sub.w	r2, r2, #4016	; 0xfb0
90000ffe:	6813      	ldr	r3, [r2, #0]
90001000:	f043 0301 	orr.w	r3, r3, #1
90001004:	6013      	str	r3, [r2, #0]
}
90001006:	4770      	bx	lr
90001008:	e000edfc 	.word	0xe000edfc
9000100c:	c5acce55 	.word	0xc5acce55

90001010 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
90001010:	1a51      	subs	r1, r2, r1
90001012:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
90001016:	fbb1 f0f3 	udiv	r0, r1, r3
9000101a:	4770      	bx	lr

9000101c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
9000101c:	4b01      	ldr	r3, [pc, #4]	; (90001024 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
9000101e:	6818      	ldr	r0, [r3, #0]
}
90001020:	4770      	bx	lr
90001022:	bf00      	nop
90001024:	e0001004 	.word	0xe0001004

90001028 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
90001028:	4770      	bx	lr

9000102a <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
9000102a:	b510      	push	{r4, lr}
9000102c:	4604      	mov	r4, r0
9000102e:	210c      	movs	r1, #12
90001030:	f027 f824 	bl	9002807c <_ZdlPvj>
90001034:	4620      	mov	r0, r4
90001036:	bd10      	pop	{r4, pc}

90001038 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
90001038:	6803      	ldr	r3, [r0, #0]
{
9000103a:	b510      	push	{r4, lr}
9000103c:	691b      	ldr	r3, [r3, #16]
9000103e:	4604      	mov	r4, r0
    if (active) //idle task sched out
90001040:	b131      	cbz	r1, 90001050 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
90001042:	4798      	blx	r3
90001044:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
90001046:	6863      	ldr	r3, [r4, #4]
90001048:	1a9b      	subs	r3, r3, r2
9000104a:	4418      	add	r0, r3
9000104c:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
9000104e:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
90001050:	4798      	blx	r3
90001052:	60a0      	str	r0, [r4, #8]
}
90001054:	e7fb      	b.n	9000104e <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

90001056 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
90001056:	4770      	bx	lr

90001058 <_ZN20STM32TouchController11sampleTouchERlS0_>:
     */
    assert((BSP_TS_Init(480, 272) == TS_OK));
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
90001058:	b530      	push	{r4, r5, lr}
9000105a:	b08d      	sub	sp, #52	; 0x34
9000105c:	460d      	mov	r5, r1
9000105e:	4614      	mov	r4, r2
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_StateTypeDef state = { 0 };
90001060:	2100      	movs	r1, #0
90001062:	222c      	movs	r2, #44	; 0x2c
90001064:	a801      	add	r0, sp, #4
90001066:	f027 fe93 	bl	90028d90 <memset>
    BSP_TS_GetState(&state);
9000106a:	a801      	add	r0, sp, #4
9000106c:	f002 ff8e 	bl	90003f8c <BSP_TS_GetState>
    if (state.touchDetected)
90001070:	f89d 0004 	ldrb.w	r0, [sp, #4]
90001074:	b130      	cbz	r0, 90001084 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>
    {
        x = state.touchX[0];
90001076:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        y = state.touchY[0];

        return true;
9000107a:	2001      	movs	r0, #1
        x = state.touchX[0];
9000107c:	602b      	str	r3, [r5, #0]
        y = state.touchY[0];
9000107e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
90001082:	6023      	str	r3, [r4, #0]
    }
    return false;
}
90001084:	b00d      	add	sp, #52	; 0x34
90001086:	bd30      	pop	{r4, r5, pc}

90001088 <_ZN20STM32TouchControllerD0Ev>:
90001088:	b510      	push	{r4, lr}
9000108a:	4604      	mov	r4, r0
9000108c:	2104      	movs	r1, #4
9000108e:	f026 fff5 	bl	9002807c <_ZdlPvj>
90001092:	4620      	mov	r0, r4
90001094:	bd10      	pop	{r4, pc}
	...

90001098 <_ZN20STM32TouchController4initEv>:
{
90001098:	b508      	push	{r3, lr}
    assert((BSP_TS_Init(480, 272) == TS_OK));
9000109a:	f44f 7188 	mov.w	r1, #272	; 0x110
9000109e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
900010a2:	f002 ff1d 	bl	90003ee0 <BSP_TS_Init>
900010a6:	b128      	cbz	r0, 900010b4 <_ZN20STM32TouchController4initEv+0x1c>
900010a8:	4b03      	ldr	r3, [pc, #12]	; (900010b8 <_ZN20STM32TouchController4initEv+0x20>)
900010aa:	211d      	movs	r1, #29
900010ac:	4a03      	ldr	r2, [pc, #12]	; (900010bc <_ZN20STM32TouchController4initEv+0x24>)
900010ae:	4804      	ldr	r0, [pc, #16]	; (900010c0 <_ZN20STM32TouchController4initEv+0x28>)
900010b0:	f027 fdc0 	bl	90028c34 <__assert_func>
}
900010b4:	bd08      	pop	{r3, pc}
900010b6:	bf00      	nop
900010b8:	9002a2ac 	.word	0x9002a2ac
900010bc:	9002a2cd 	.word	0x9002a2cd
900010c0:	9002a2f7 	.word	0x9002a2f7

900010c4 <_ZN8touchgfx4GPIO4initEv>:
            {
                GPIO_InvertedLevels[id] = 1;
            }
        }
    }
}
900010c4:	4770      	bx	lr

900010c6 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
900010c6:	4770      	bx	lr

900010c8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
900010c8:	4770      	bx	lr

900010ca <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
900010ca:	4770      	bx	lr

900010cc <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
900010cc:	2301      	movs	r3, #1
        requestedOrientation = orientation;
900010ce:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
900010d2:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
900010d6:	4770      	bx	lr

900010d8 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
    {
        return false;
    }
900010d8:	2000      	movs	r0, #0
900010da:	4770      	bx	lr

900010dc <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
900010dc:	2000      	movs	r0, #0
900010de:	4770      	bx	lr

900010e0 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
900010e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
900010e2:	b10b      	cbz	r3, 900010e8 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
900010e4:	4608      	mov	r0, r1
900010e6:	4718      	bx	r3
        }
    }
900010e8:	4770      	bx	lr

900010ea <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
900010ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
900010ee:	4770      	bx	lr

900010f0 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
900010f0:	6840      	ldr	r0, [r0, #4]
900010f2:	6803      	ldr	r3, [r0, #0]
900010f4:	699b      	ldr	r3, [r3, #24]
900010f6:	4718      	bx	r3

900010f8 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
900010f8:	4770      	bx	lr
	...

900010fc <_ZN11TouchGFXHAL9taskEntryEv>:
    enableMCULoadCalculation(true);

}

void TouchGFXHAL::taskEntry()
{
900010fc:	b508      	push	{r3, lr}
    /* USER CODE BEGIN taskEntry step 1 */

    /* USER CODE END taskEntry step 1 */

    enableLCDControllerInterrupt();
900010fe:	6803      	ldr	r3, [r0, #0]
{
90001100:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
90001102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90001104:	4798      	blx	r3
    enableInterrupts();
90001106:	6823      	ldr	r3, [r4, #0]
90001108:	4620      	mov	r0, r4
9000110a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
9000110c:	4798      	blx	r3

    OSWrappers::waitForVSync();
9000110e:	f000 f929 	bl	90001364 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
90001112:	6823      	ldr	r3, [r4, #0]
90001114:	4620      	mov	r0, r4
90001116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90001118:	4798      	blx	r3

#if defined(LCD_DISP_GPIO_Port) && defined(LCD_DISP_Pin)
    /* Display Enable */
    HAL_GPIO_TogglePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin);
9000111a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
9000111e:	4807      	ldr	r0, [pc, #28]	; (9000113c <_ZN11TouchGFXHAL9taskEntryEv+0x40>)
90001120:	f004 f8d7 	bl	900052d2 <HAL_GPIO_TogglePin>
    /* Data Enable */
    HAL_GPIO_TogglePin(LCD_DE_GPIO_Port, LCD_DE_Pin);
#endif
#if defined(LCD_BL_CTRL_GPIO_Port) && defined(LCD_BL_CTRL_Pin)
    /* Backlight Enable */
    HAL_GPIO_TogglePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin);
90001124:	2108      	movs	r1, #8
90001126:	4806      	ldr	r0, [pc, #24]	; (90001140 <_ZN11TouchGFXHAL9taskEntryEv+0x44>)
90001128:	f004 f8d3 	bl	900052d2 <HAL_GPIO_TogglePin>

    /* USER CODE END taskEntry step 2 */

    for (;;)
    {
        OSWrappers::waitForVSync();
9000112c:	f000 f91a 	bl	90001364 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
90001130:	6823      	ldr	r3, [r4, #0]
90001132:	4620      	mov	r0, r4
90001134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90001136:	4798      	blx	r3
    for (;;)
90001138:	e7f8      	b.n	9000112c <_ZN11TouchGFXHAL9taskEntryEv+0x30>
9000113a:	bf00      	nop
9000113c:	40022000 	.word	0x40022000
90001140:	40022800 	.word	0x40022800

90001144 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
90001144:	b510      	push	{r4, lr}
90001146:	4604      	mov	r4, r0
        swapFrameBuffers();
90001148:	f014 fc36 	bl	900159b8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
9000114c:	6823      	ldr	r3, [r4, #0]
9000114e:	4620      	mov	r0, r4
90001150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    }
90001154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
90001158:	4718      	bx	r3

9000115a <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
9000115a:	f000 bc99 	b.w	90001a90 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

9000115e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
9000115e:	f000 bc9d 	b.w	90001a9c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
	...

90001164 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
90001164:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
90001166:	f000 fca3 	bl	90001ab0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
9000116a:	4a10      	ldr	r2, [pc, #64]	; (900011ac <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
9000116c:	2300      	movs	r3, #0
9000116e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90001172:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
90001176:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000117a:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
9000117e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90001182:	f3c3 334e 	ubfx	r3, r3, #13, #15
90001186:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90001188:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
9000118c:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000118e:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90001192:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90001194:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
90001198:	d2f9      	bcs.n	9000118e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
9000119a:	3b20      	subs	r3, #32
9000119c:	f113 0f20 	cmn.w	r3, #32
900011a0:	d1f2      	bne.n	90001188 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
900011a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900011a6:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
900011aa:	bd70      	pop	{r4, r5, r6, pc}
900011ac:	e000ed00 	.word	0xe000ed00

900011b0 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
900011b0:	f000 bc4a 	b.w	90001a48 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

900011b4 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
900011b4:	f000 bc86 	b.w	90001ac4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

900011b8 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
900011b8:	f000 bc8e 	b.w	90001ad8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

900011bc <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
900011bc:	f000 bc4e 	b.w	90001a5c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

900011c0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
900011c0:	b508      	push	{r3, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
900011c2:	b931      	cbnz	r1, 900011d2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x12>
900011c4:	4b0a      	ldr	r3, [pc, #40]	; (900011f0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
900011c6:	f240 216b 	movw	r1, #619	; 0x26b
900011ca:	4a0a      	ldr	r2, [pc, #40]	; (900011f4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
900011cc:	480a      	ldr	r0, [pc, #40]	; (900011f8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
900011ce:	f027 fd31 	bl	90028c34 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
900011d2:	e9c0 120f 	strd	r1, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900011d6:	3a00      	subs	r2, #0
900011d8:	4908      	ldr	r1, [pc, #32]	; (900011fc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
900011da:	6443      	str	r3, [r0, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900011dc:	bf18      	it	ne
900011de:	2201      	movne	r2, #1
        USE_ANIMATION_STORAGE = animationStorage != 0;
900011e0:	3b00      	subs	r3, #0
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900011e2:	700a      	strb	r2, [r1, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
900011e4:	bf18      	it	ne
900011e6:	2301      	movne	r3, #1
900011e8:	4a05      	ldr	r2, [pc, #20]	; (90001200 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
900011ea:	7013      	strb	r3, [r2, #0]
    }
900011ec:	bd08      	pop	{r3, pc}
900011ee:	bf00      	nop
900011f0:	9002a36c 	.word	0x9002a36c
900011f4:	9002a3a4 	.word	0x9002a3a4
900011f8:	9002a3f2 	.word	0x9002a3f2
900011fc:	20026cda 	.word	0x20026cda
90001200:	20026cdb 	.word	0x20026cdb

90001204 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
90001204:	f013 be61 	b.w	90014eca <_ZN8touchgfx3HAL16flushFrameBufferEv>

90001208 <_ZN11TouchGFXHALD0Ev>:
90001208:	b510      	push	{r4, lr}
9000120a:	4604      	mov	r4, r0
9000120c:	217c      	movs	r1, #124	; 0x7c
9000120e:	f026 ff35 	bl	9002807c <_ZdlPvj>
90001212:	4620      	mov	r0, r4
90001214:	bd10      	pop	{r4, pc}

90001216 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
90001216:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
9000121a:	b11b      	cbz	r3, 90001224 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
9000121c:	6840      	ldr	r0, [r0, #4]
9000121e:	6803      	ldr	r3, [r0, #0]
90001220:	681b      	ldr	r3, [r3, #0]
90001222:	4718      	bx	r3
    }
90001224:	4618      	mov	r0, r3
90001226:	4770      	bx	lr

90001228 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
90001228:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
9000122c:	4b11      	ldr	r3, [pc, #68]	; (90001274 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x4c>)
    virtual void performDisplayOrientationChange()
9000122e:	b530      	push	{r4, r5, lr}
        if (requestedOrientation != nativeDisplayOrientation)
90001230:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
90001234:	781a      	ldrb	r2, [r3, #0]
90001236:	428c      	cmp	r4, r1
90001238:	d00d      	beq.n	90001256 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2e>
        {
            if (DISPLAY_ROTATION == rotate0)
9000123a:	b95a      	cbnz	r2, 90001254 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2c>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
9000123c:	4a0e      	ldr	r2, [pc, #56]	; (90001278 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x50>)
9000123e:	490f      	ldr	r1, [pc, #60]	; (9000127c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x54>)
90001240:	8814      	ldrh	r4, [r2, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
90001242:	480f      	ldr	r0, [pc, #60]	; (90001280 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
90001244:	800c      	strh	r4, [r1, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
90001246:	8801      	ldrh	r1, [r0, #0]
90001248:	4d0e      	ldr	r5, [pc, #56]	; (90001284 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5c>)
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
9000124a:	8011      	strh	r1, [r2, #0]
                DISPLAY_ROTATION = rotate90;
9000124c:	2201      	movs	r2, #1
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
9000124e:	8029      	strh	r1, [r5, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
90001250:	8004      	strh	r4, [r0, #0]
        {
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
90001252:	701a      	strb	r2, [r3, #0]
        }
    }
90001254:	bd30      	pop	{r4, r5, pc}
        else if (DISPLAY_ROTATION != rotate0)
90001256:	2a00      	cmp	r2, #0
90001258:	d0fc      	beq.n	90001254 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2c>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
9000125a:	4809      	ldr	r0, [pc, #36]	; (90001280 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
9000125c:	4a07      	ldr	r2, [pc, #28]	; (9000127c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x54>)
9000125e:	8801      	ldrh	r1, [r0, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
90001260:	4d08      	ldr	r5, [pc, #32]	; (90001284 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5c>)
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
90001262:	8011      	strh	r1, [r2, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
90001264:	4a04      	ldr	r2, [pc, #16]	; (90001278 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x50>)
90001266:	8814      	ldrh	r4, [r2, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
90001268:	8011      	strh	r1, [r2, #0]
            DISPLAY_ROTATION = rotate0;
9000126a:	2200      	movs	r2, #0
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
9000126c:	802c      	strh	r4, [r5, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
9000126e:	8004      	strh	r4, [r0, #0]
            DISPLAY_ROTATION = rotate0;
90001270:	e7ef      	b.n	90001252 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2a>
90001272:	bf00      	nop
90001274:	20026cd4 	.word	0x20026cd4
90001278:	20026cd0 	.word	0x20026cd0
9000127c:	20026cd6 	.word	0x20026cd6
90001280:	20026cd2 	.word	0x20026cd2
90001284:	20026cd8 	.word	0x20026cd8

90001288 <_ZN11TouchGFXHAL10initializeEv>:
{
90001288:	b538      	push	{r3, r4, r5, lr}
9000128a:	4604      	mov	r4, r0
    GPIO::init();
9000128c:	f7ff ff1a 	bl	900010c4 <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
90001290:	4d07      	ldr	r5, [pc, #28]	; (900012b0 <_ZN11TouchGFXHAL10initializeEv+0x28>)
    TouchGFXGeneratedHAL::initialize();
90001292:	4620      	mov	r0, r4
90001294:	f000 fc34 	bl	90001b00 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
90001298:	2300      	movs	r3, #0
    instrumentation.init();
9000129a:	4628      	mov	r0, r5
9000129c:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
900012a0:	f7ff fe9e 	bl	90000fe0 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
900012a4:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
900012a6:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
900012a8:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
900012ac:	bd38      	pop	{r3, r4, r5, pc}
900012ae:	bf00      	nop
900012b0:	200031f4 	.word	0x200031f4

900012b4 <_GLOBAL__sub_I_instrumentation>:
          cc_in(0)
900012b4:	4b03      	ldr	r3, [pc, #12]	; (900012c4 <_GLOBAL__sub_I_instrumentation+0x10>)
900012b6:	2200      	movs	r2, #0
900012b8:	605a      	str	r2, [r3, #4]
900012ba:	609a      	str	r2, [r3, #8]
900012bc:	4a02      	ldr	r2, [pc, #8]	; (900012c8 <_GLOBAL__sub_I_instrumentation+0x14>)
900012be:	601a      	str	r2, [r3, #0]
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
        }
        return pdTRUE;
    }
}
900012c0:	4770      	bx	lr
900012c2:	bf00      	nop
900012c4:	200031f4 	.word	0x200031f4
900012c8:	9002a28c 	.word	0x9002a28c

900012cc <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
900012cc:	2101      	movs	r1, #1
900012ce:	2200      	movs	r2, #0
{
900012d0:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
900012d2:	4608      	mov	r0, r1
900012d4:	f006 f956 	bl	90007584 <osSemaphoreNew>
900012d8:	4b0a      	ldr	r3, [pc, #40]	; (90001304 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
900012da:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
900012dc:	b928      	cbnz	r0, 900012ea <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
900012de:	4b0a      	ldr	r3, [pc, #40]	; (90001308 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
900012e0:	2125      	movs	r1, #37	; 0x25
900012e2:	4a0a      	ldr	r2, [pc, #40]	; (9000130c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
900012e4:	480a      	ldr	r0, [pc, #40]	; (90001310 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
900012e6:	f027 fca5 	bl	90028c34 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
900012ea:	2200      	movs	r2, #0
900012ec:	2104      	movs	r1, #4
900012ee:	2001      	movs	r0, #1
900012f0:	f006 fa48 	bl	90007784 <osMessageQueueNew>
900012f4:	4b07      	ldr	r3, [pc, #28]	; (90001314 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
900012f6:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
900012f8:	b918      	cbnz	r0, 90001302 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
900012fa:	4b07      	ldr	r3, [pc, #28]	; (90001318 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
900012fc:	2129      	movs	r1, #41	; 0x29
900012fe:	4a03      	ldr	r2, [pc, #12]	; (9000130c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
90001300:	e7f0      	b.n	900012e4 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
90001302:	bd08      	pop	{r3, pc}
90001304:	20003204 	.word	0x20003204
90001308:	9002a4f4 	.word	0x9002a4f4
9000130c:	9002a53d 	.word	0x9002a53d
90001310:	9002a56c 	.word	0x9002a56c
90001314:	20003200 	.word	0x20003200
90001318:	9002a5c8 	.word	0x9002a5c8

9000131c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
9000131c:	4b02      	ldr	r3, [pc, #8]	; (90001328 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
9000131e:	f04f 31ff 	mov.w	r1, #4294967295
90001322:	6818      	ldr	r0, [r3, #0]
90001324:	f006 b984 	b.w	90007630 <osSemaphoreAcquire>
90001328:	20003204 	.word	0x20003204

9000132c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
9000132c:	4b01      	ldr	r3, [pc, #4]	; (90001334 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
9000132e:	6818      	ldr	r0, [r3, #0]
90001330:	f006 b9b8 	b.w	900076a4 <osSemaphoreRelease>
90001334:	20003204 	.word	0x20003204

90001338 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
90001338:	4b02      	ldr	r3, [pc, #8]	; (90001344 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
9000133a:	2100      	movs	r1, #0
9000133c:	6818      	ldr	r0, [r3, #0]
9000133e:	f006 b977 	b.w	90007630 <osSemaphoreAcquire>
90001342:	bf00      	nop
90001344:	20003204 	.word	0x20003204

90001348 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
90001348:	f7ff bff0 	b.w	9000132c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

9000134c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
9000134c:	2300      	movs	r3, #0
9000134e:	4803      	ldr	r0, [pc, #12]	; (9000135c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
90001350:	4903      	ldr	r1, [pc, #12]	; (90001360 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
90001352:	461a      	mov	r2, r3
90001354:	6800      	ldr	r0, [r0, #0]
90001356:	f006 ba5b 	b.w	90007810 <osMessageQueuePut>
9000135a:	bf00      	nop
9000135c:	20003200 	.word	0x20003200
90001360:	20000004 	.word	0x20000004

90001364 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
90001364:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
90001366:	2300      	movs	r3, #0
90001368:	4c07      	ldr	r4, [pc, #28]	; (90001388 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
9000136a:	a901      	add	r1, sp, #4
9000136c:	461a      	mov	r2, r3
9000136e:	6820      	ldr	r0, [r4, #0]
90001370:	f006 fa90 	bl	90007894 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
90001374:	f04f 33ff 	mov.w	r3, #4294967295
90001378:	2200      	movs	r2, #0
9000137a:	a901      	add	r1, sp, #4
9000137c:	6820      	ldr	r0, [r4, #0]
9000137e:	f006 fa89 	bl	90007894 <osMessageQueueGet>
}
90001382:	b002      	add	sp, #8
90001384:	bd10      	pop	{r4, pc}
90001386:	bf00      	nop
90001388:	20003200 	.word	0x20003200

9000138c <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
9000138c:	6803      	ldr	r3, [r0, #0]
9000138e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001390:	4718      	bx	r3

90001392 <_ZN10STM32F7DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
90001392:	2001      	movs	r0, #1
90001394:	4770      	bx	lr

90001396 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
90001396:	6803      	ldr	r3, [r0, #0]
90001398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000139a:	4718      	bx	r3

9000139c <_ZN10STM32F7DMA10initializeEv>:
}

void STM32F7DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
9000139c:	4b0d      	ldr	r3, [pc, #52]	; (900013d4 <_ZN10STM32F7DMA10initializeEv+0x38>)
{
9000139e:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
900013a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900013a2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
900013a6:	631a      	str	r2, [r3, #48]	; 0x30
900013a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900013aa:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
900013ae:	9201      	str	r2, [sp, #4]
900013b0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
900013b2:	691a      	ldr	r2, [r3, #16]
900013b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
900013b8:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
900013ba:	691a      	ldr	r2, [r3, #16]
900013bc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
900013c0:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
900013c2:	4b05      	ldr	r3, [pc, #20]	; (900013d8 <_ZN10STM32F7DMA10initializeEv+0x3c>)
900013c4:	4a05      	ldr	r2, [pc, #20]	; (900013dc <_ZN10STM32F7DMA10initializeEv+0x40>)
900013c6:	611a      	str	r2, [r3, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
900013c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
900013cc:	4b04      	ldr	r3, [pc, #16]	; (900013e0 <_ZN10STM32F7DMA10initializeEv+0x44>)
900013ce:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
900013d0:	b002      	add	sp, #8
900013d2:	4770      	bx	lr
900013d4:	40023800 	.word	0x40023800
900013d8:	200271e8 	.word	0x200271e8
900013dc:	900013ed 	.word	0x900013ed
900013e0:	e000e100 	.word	0xe000e100

900013e4 <_ZN10STM32F7DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
900013e4:	f240 10ef 	movw	r0, #495	; 0x1ef
900013e8:	4770      	bx	lr
	...

900013ec <DMA2D_XferCpltCallback>:
    HAL::getInstance()->signalDMAInterrupt();
900013ec:	4b02      	ldr	r3, [pc, #8]	; (900013f8 <DMA2D_XferCpltCallback+0xc>)
900013ee:	681b      	ldr	r3, [r3, #0]
900013f0:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
900013f2:	6803      	ldr	r3, [r0, #0]
900013f4:	695b      	ldr	r3, [r3, #20]
900013f6:	4718      	bx	r3
900013f8:	20026cdc 	.word	0x20026cdc

900013fc <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32F7DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
900013fc:	b508      	push	{r3, lr}
900013fe:	280b      	cmp	r0, #11
90001400:	d80b      	bhi.n	9000141a <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
90001402:	e8df f000 	tbb	[pc, r0]
90001406:	0612      	.short	0x0612
90001408:	0a0a0a10 	.word	0x0a0a0a10
9000140c:	0808080a 	.word	0x0808080a
90001410:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
90001412:	2001      	movs	r0, #1
}
90001414:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
90001416:	2005      	movs	r0, #5
        break;
90001418:	e7fc      	b.n	90001414 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
9000141a:	4b05      	ldr	r3, [pc, #20]	; (90001430 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
9000141c:	2165      	movs	r1, #101	; 0x65
9000141e:	4a05      	ldr	r2, [pc, #20]	; (90001434 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
90001420:	4805      	ldr	r0, [pc, #20]	; (90001438 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
90001422:	f027 fc07 	bl	90028c34 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001426:	2000      	movs	r0, #0
90001428:	e7f4      	b.n	90001414 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
9000142a:	2002      	movs	r0, #2
    return dma2dColorMode;
9000142c:	e7f2      	b.n	90001414 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
9000142e:	bf00      	nop
90001430:	9002a60a 	.word	0x9002a60a
90001434:	9002a625 	.word	0x9002a625
90001438:	9002a671 	.word	0x9002a671

9000143c <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32F7DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
9000143c:	b508      	push	{r3, lr}
9000143e:	280a      	cmp	r0, #10
90001440:	d809      	bhi.n	90001456 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
90001442:	e8df f000 	tbb	[pc, r0]
90001446:	0610      	.short	0x0610
90001448:	0808080e 	.word	0x0808080e
9000144c:	06060608 	.word	0x06060608
90001450:	06          	.byte	0x06
90001451:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001452:	2001      	movs	r0, #1
}
90001454:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
90001456:	4b05      	ldr	r3, [pc, #20]	; (9000146c <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
90001458:	2186      	movs	r1, #134	; 0x86
9000145a:	4a05      	ldr	r2, [pc, #20]	; (90001470 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
9000145c:	4805      	ldr	r0, [pc, #20]	; (90001474 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
9000145e:	f027 fbe9 	bl	90028c34 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001462:	2000      	movs	r0, #0
90001464:	e7f6      	b.n	90001454 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90001466:	2002      	movs	r0, #2
    return dma2dColorMode;
90001468:	e7f4      	b.n	90001454 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
9000146a:	bf00      	nop
9000146c:	9002a60a 	.word	0x9002a60a
90001470:	9002a6cb 	.word	0x9002a6cb
90001474:	9002a671 	.word	0x9002a671

90001478 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
90001478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
9000147c:	7f4f      	ldrb	r7, [r1, #29]
{
9000147e:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
90001480:	4638      	mov	r0, r7
90001482:	f7ff ffbb 	bl	900013fc <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
90001486:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
9000148a:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
9000148c:	4640      	mov	r0, r8
9000148e:	f7ff ffb5 	bl	900013fc <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
90001492:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
90001494:	4640      	mov	r0, r8
90001496:	f7ff ffd1 	bl	9000143c <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
9000149a:	8a21      	ldrh	r1, [r4, #16]
9000149c:	8ae2      	ldrh	r2, [r4, #22]
9000149e:	4b54      	ldr	r3, [pc, #336]	; (900015f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x178>)
900014a0:	1a52      	subs	r2, r2, r1
900014a2:	469e      	mov	lr, r3
900014a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
900014a6:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
900014a8:	8aa2      	ldrh	r2, [r4, #20]
900014aa:	1a52      	subs	r2, r2, r1
900014ac:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
900014ae:	8a62      	ldrh	r2, [r4, #18]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
900014b0:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
900014b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
900014b6:	68e0      	ldr	r0, [r4, #12]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
900014b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
900014ba:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
900014bc:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
900014be:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
900014c0:	f8d4 c000 	ldr.w	ip, [r4]
900014c4:	7f22      	ldrb	r2, [r4, #28]
900014c6:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
900014ca:	ea4f 6202 	mov.w	r2, r2, lsl #24
900014ce:	d032      	beq.n	90001536 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbe>
900014d0:	d829      	bhi.n	90001526 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
900014d2:	f1bc 0f20 	cmp.w	ip, #32
900014d6:	ea45 0102 	orr.w	r1, r5, r2
900014da:	d075      	beq.n	900015c8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>
900014dc:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
900014e0:	d072      	beq.n	900015c8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>
900014e2:	f1bc 0f04 	cmp.w	ip, #4
900014e6:	d03c      	beq.n	90001562 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xea>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
900014e8:	432a      	orrs	r2, r5
900014ea:	4b41      	ldr	r3, [pc, #260]	; (900015f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x178>)

        if (blitOp.srcFormat == Bitmap::L8)
900014ec:	2f0b      	cmp	r7, #11
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
900014ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
900014f2:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat == Bitmap::L8)
900014f4:	d179      	bne.n	900015ea <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x172>
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
900014f6:	68a2      	ldr	r2, [r4, #8]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
900014f8:	1d11      	adds	r1, r2, #4

            /* Write foreground CLUT size and CLUT color mode */
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
900014fa:	8852      	ldrh	r2, [r2, #2]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
900014fc:	62d9      	str	r1, [r3, #44]	; 0x2c
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
900014fe:	1e50      	subs	r0, r2, #1
90001500:	69d9      	ldr	r1, [r3, #28]
90001502:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
90001506:	f022 0210 	bic.w	r2, r2, #16
9000150a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
9000150e:	f042 0210 	orr.w	r2, r2, #16
90001512:	61da      	str	r2, [r3, #28]

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
90001514:	69da      	ldr	r2, [r3, #28]
90001516:	f042 0220 	orr.w	r2, r2, #32
9000151a:	61da      	str	r2, [r3, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
9000151c:	69da      	ldr	r2, [r3, #28]
9000151e:	0692      	lsls	r2, r2, #26
90001520:	d55f      	bpl.n	900015e2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x16a>
            {
                __NOP();
90001522:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
90001524:	e7fa      	b.n	9000151c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
    switch (blitOp.operation)
90001526:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
9000152a:	d1dd      	bne.n	900014e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x70>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
9000152c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
90001530:	f042 0209 	orr.w	r2, r2, #9
90001534:	e003      	b.n	9000153e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc6>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001536:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
9000153a:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
9000153e:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
90001540:	69a1      	ldr	r1, [r4, #24]
90001542:	020a      	lsls	r2, r1, #8
90001544:	014c      	lsls	r4, r1, #5
90001546:	f402 0278 	and.w	r2, r2, #16252928	; 0xf80000
9000154a:	00c9      	lsls	r1, r1, #3
9000154c:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
90001550:	b2c9      	uxtb	r1, r1
90001552:	4322      	orrs	r2, r4
90001554:	430a      	orrs	r2, r1
90001556:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001558:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
9000155a:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
9000155c:	4a25      	ldr	r2, [pc, #148]	; (900015f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x17c>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
        }
        else
        {
            /* Start DMA2D */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
9000155e:	601a      	str	r2, [r3, #0]
        }
        break;
    }
}
90001560:	e03d      	b.n	900015de <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x166>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001562:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
        if (blitOp.srcFormat == Bitmap::L8)
90001566:	2f0b      	cmp	r7, #11
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001568:	61d9      	str	r1, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
9000156a:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
9000156c:	6158      	str	r0, [r3, #20]
        if (blitOp.srcFormat == Bitmap::L8)
9000156e:	d129      	bne.n	900015c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
90001570:	68a1      	ldr	r1, [r4, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
90001572:	4821      	ldr	r0, [pc, #132]	; (900015f8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>)
90001574:	1d0a      	adds	r2, r1, #4
90001576:	62da      	str	r2, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
90001578:	780a      	ldrb	r2, [r1, #0]
9000157a:	b13a      	cbz	r2, 9000158c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x114>
9000157c:	2a01      	cmp	r2, #1
9000157e:	d016      	beq.n	900015ae <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
                assert(0 && "Unsupported format");
90001580:	4b1e      	ldr	r3, [pc, #120]	; (900015fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x184>)
90001582:	21fc      	movs	r1, #252	; 0xfc
90001584:	4a1e      	ldr	r2, [pc, #120]	; (90001600 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x188>)
90001586:	481f      	ldr	r0, [pc, #124]	; (90001604 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18c>)
90001588:	f027 fb54 	bl	90028c34 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
9000158c:	69da      	ldr	r2, [r3, #28]
9000158e:	8849      	ldrh	r1, [r1, #2]
90001590:	4002      	ands	r2, r0
90001592:	3901      	subs	r1, #1
90001594:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001598:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
9000159a:	4b15      	ldr	r3, [pc, #84]	; (900015f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x178>)
9000159c:	69da      	ldr	r2, [r3, #28]
9000159e:	f042 0220 	orr.w	r2, r2, #32
900015a2:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
900015a4:	69da      	ldr	r2, [r3, #28]
900015a6:	0691      	lsls	r1, r2, #26
900015a8:	d50a      	bpl.n	900015c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
                __NOP();
900015aa:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
900015ac:	e7fa      	b.n	900015a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12c>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
900015ae:	69da      	ldr	r2, [r3, #28]
900015b0:	8849      	ldrh	r1, [r1, #2]
900015b2:	4002      	ands	r2, r0
900015b4:	3901      	subs	r1, #1
900015b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
900015ba:	f042 0210 	orr.w	r2, r2, #16
900015be:	e7eb      	b.n	90001598 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x120>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
900015c0:	2210      	movs	r2, #16
900015c2:	609a      	str	r2, [r3, #8]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
900015c4:	4b0a      	ldr	r3, [pc, #40]	; (900015f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x178>)
900015c6:	e7c9      	b.n	9000155c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe4>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
900015c8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
900015cc:	4b09      	ldr	r3, [pc, #36]	; (900015f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x17c>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
900015ce:	f8ce 101c 	str.w	r1, [lr, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
900015d2:	f8ce 6024 	str.w	r6, [lr, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
900015d6:	f8ce 0014 	str.w	r0, [lr, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
900015da:	f8ce 3000 	str.w	r3, [lr]
}
900015de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
900015e2:	2210      	movs	r2, #16
900015e4:	609a      	str	r2, [r3, #8]
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
900015e6:	4a08      	ldr	r2, [pc, #32]	; (90001608 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>)
900015e8:	e7b9      	b.n	9000155e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
900015ea:	f240 2201 	movw	r2, #513	; 0x201
900015ee:	e7b6      	b.n	9000155e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
900015f0:	4002b000 	.word	0x4002b000
900015f4:	00020201 	.word	0x00020201
900015f8:	ffff00ef 	.word	0xffff00ef
900015fc:	9002a718 	.word	0x9002a718
90001600:	9002a732 	.word	0x9002a732
90001604:	9002a671 	.word	0x9002a671
90001608:	00010201 	.word	0x00010201

9000160c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F7DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
9000160c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
9000160e:	7f8e      	ldrb	r6, [r1, #30]
{
90001610:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
90001612:	4630      	mov	r0, r6
90001614:	f7ff ff12 	bl	9000143c <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001618:	8a27      	ldrh	r7, [r4, #16]
9000161a:	8a61      	ldrh	r1, [r4, #18]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
9000161c:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
9000161e:	4b1e      	ldr	r3, [pc, #120]	; (90001698 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x8c>)
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001620:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001624:	68e5      	ldr	r5, [r4, #12]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001626:	1bd2      	subs	r2, r2, r7
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001628:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
9000162a:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
9000162c:	63dd      	str	r5, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
9000162e:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
90001630:	6821      	ldr	r1, [r4, #0]
90001632:	2908      	cmp	r1, #8
90001634:	d118      	bne.n	90001668 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001636:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001638:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
9000163a:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
9000163c:	4a17      	ldr	r2, [pc, #92]	; (9000169c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x90>)
9000163e:	7f21      	ldrb	r1, [r4, #28]
90001640:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
90001644:	61da      	str	r2, [r3, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3)) & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
90001646:	69a1      	ldr	r1, [r4, #24]
90001648:	020a      	lsls	r2, r1, #8
9000164a:	0148      	lsls	r0, r1, #5
9000164c:	f402 0278 	and.w	r2, r2, #16252928	; 0xf80000
90001650:	00c9      	lsls	r1, r1, #3
90001652:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
90001656:	b2c9      	uxtb	r1, r1
90001658:	4302      	orrs	r2, r0
9000165a:	430a      	orrs	r2, r1
9000165c:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
9000165e:	4a10      	ldr	r2, [pc, #64]	; (900016a0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x94>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001660:	615d      	str	r5, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001662:	60dd      	str	r5, [r3, #12]
            // set color
            WRITE_REG(DMA2D->OCOLR, (blitOp.alpha << 24) | (blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
        }

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001664:	601a      	str	r2, [r3, #0]
    }
}
90001666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->FGOR, 0);
90001668:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
9000166a:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
9000166c:	611a      	str	r2, [r3, #16]
        if (blitOp.dstFormat == Bitmap::RGB565)
9000166e:	69a1      	ldr	r1, [r4, #24]
90001670:	b91e      	cbnz	r6, 9000167a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6e>
            WRITE_REG(DMA2D->OCOLR, blitOp.color);
90001672:	6399      	str	r1, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001674:	4b08      	ldr	r3, [pc, #32]	; (90001698 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x8c>)
90001676:	4a0b      	ldr	r2, [pc, #44]	; (900016a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x98>)
90001678:	e7f4      	b.n	90001664 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>
            WRITE_REG(DMA2D->OCOLR, (blitOp.alpha << 24) | (blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
9000167a:	020a      	lsls	r2, r1, #8
9000167c:	0148      	lsls	r0, r1, #5
9000167e:	f402 0278 	and.w	r2, r2, #16252928	; 0xf80000
90001682:	00c9      	lsls	r1, r1, #3
90001684:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
90001688:	b2c9      	uxtb	r1, r1
9000168a:	4302      	orrs	r2, r0
9000168c:	430a      	orrs	r2, r1
9000168e:	7f21      	ldrb	r1, [r4, #28]
90001690:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
90001694:	639a      	str	r2, [r3, #56]	; 0x38
90001696:	e7ed      	b.n	90001674 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>
90001698:	4002b000 	.word	0x4002b000
9000169c:	00010009 	.word	0x00010009
900016a0:	00020201 	.word	0x00020201
900016a4:	00030201 	.word	0x00030201

900016a8 <_ZN10STM32F7DMAD1Ev>:
STM32F7DMA::~STM32F7DMA()
900016a8:	4b05      	ldr	r3, [pc, #20]	; (900016c0 <_ZN10STM32F7DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
900016aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
900016ae:	6003      	str	r3, [r0, #0]
900016b0:	4b04      	ldr	r3, [pc, #16]	; (900016c4 <_ZN10STM32F7DMAD1Ev+0x1c>)
900016b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
900016b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900016ba:	f3bf 8f6f 	isb	sy
}
900016be:	4770      	bx	lr
900016c0:	9002a77c 	.word	0x9002a77c
900016c4:	e000e100 	.word	0xe000e100

900016c8 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
900016c8:	b510      	push	{r4, lr}
900016ca:	4604      	mov	r4, r0
}
900016cc:	f7ff ffec 	bl	900016a8 <_ZN10STM32F7DMAD1Ev>
900016d0:	f44f 6142 	mov.w	r1, #3104	; 0xc20
900016d4:	4620      	mov	r0, r4
900016d6:	f026 fcd1 	bl	9002807c <_ZdlPvj>
900016da:	4620      	mov	r0, r4
900016dc:	bd10      	pop	{r4, pc}
	...

900016e0 <_ZN10STM32F7DMAC1Ev>:
STM32F7DMA::STM32F7DMA()
900016e0:	b570      	push	{r4, r5, r6, lr}
900016e2:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
900016e4:	4b0a      	ldr	r3, [pc, #40]	; (90001710 <_ZN10STM32F7DMAC1Ev+0x30>)
900016e6:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
900016e8:	2600      	movs	r6, #0
900016ea:	4625      	mov	r5, r4
900016ec:	2260      	movs	r2, #96	; 0x60
900016ee:	6060      	str	r0, [r4, #4]
900016f0:	7226      	strb	r6, [r4, #8]
900016f2:	7266      	strb	r6, [r4, #9]
900016f4:	f845 3b20 	str.w	r3, [r5], #32
900016f8:	4629      	mov	r1, r5
900016fa:	f014 fac1 	bl	90015c80 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
900016fe:	f504 6342 	add.w	r3, r4, #3104	; 0xc20
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
90001702:	61ae      	str	r6, [r5, #24]
90001704:	3520      	adds	r5, #32
90001706:	42ab      	cmp	r3, r5
90001708:	d1fb      	bne.n	90001702 <_ZN10STM32F7DMAC1Ev+0x22>
}
9000170a:	4620      	mov	r0, r4
9000170c:	bd70      	pop	{r4, r5, r6, pc}
9000170e:	bf00      	nop
90001710:	9002a77c 	.word	0x9002a77c

90001714 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
90001714:	2001      	movs	r0, #1
90001716:	4770      	bx	lr

90001718 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
90001718:	200c      	movs	r0, #12
9000171a:	4770      	bx	lr

9000171c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
9000171c:	230c      	movs	r3, #12
9000171e:	fb03 0001 	mla	r0, r3, r1, r0
    }
90001722:	3008      	adds	r0, #8
90001724:	4770      	bx	lr

90001726 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
90001726:	230c      	movs	r3, #12
90001728:	fb03 0001 	mla	r0, r3, r1, r0
    }
9000172c:	3008      	adds	r0, #8
9000172e:	4770      	bx	lr

90001730 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90001730:	2001      	movs	r0, #1
90001732:	4770      	bx	lr

90001734 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90001734:	f240 509c 	movw	r0, #1436	; 0x59c
90001738:	4770      	bx	lr

9000173a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
9000173a:	f240 539c 	movw	r3, #1436	; 0x59c
9000173e:	fb03 0001 	mla	r0, r3, r1, r0
    }
90001742:	3008      	adds	r0, #8
90001744:	4770      	bx	lr

90001746 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001746:	f240 539c 	movw	r3, #1436	; 0x59c
9000174a:	fb03 0001 	mla	r0, r3, r1, r0
    }
9000174e:	3008      	adds	r0, #8
90001750:	4770      	bx	lr

90001752 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90001752:	2001      	movs	r0, #1
90001754:	4770      	bx	lr

90001756 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90001756:	2010      	movs	r0, #16
90001758:	4770      	bx	lr

9000175a <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
9000175a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
9000175e:	3008      	adds	r0, #8
90001760:	4770      	bx	lr

90001762 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001762:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90001766:	3008      	adds	r0, #8
90001768:	4770      	bx	lr

9000176a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
9000176a:	4608      	mov	r0, r1
9000176c:	f001 b88c 	b.w	90002888 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

90001770 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
90001770:	4b03      	ldr	r3, [pc, #12]	; (90001780 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90001772:	b510      	push	{r4, lr}
90001774:	4604      	mov	r4, r0
90001776:	6003      	str	r3, [r0, #0]
90001778:	f012 fc00 	bl	90013f7c <_ZN8touchgfx17AbstractPartitionD1Ev>
9000177c:	4620      	mov	r0, r4
9000177e:	bd10      	pop	{r4, pc}
90001780:	9002a834 	.word	0x9002a834

90001784 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
90001784:	b510      	push	{r4, lr}
90001786:	4604      	mov	r4, r0
90001788:	f7ff fff2 	bl	90001770 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
9000178c:	2114      	movs	r1, #20
9000178e:	4620      	mov	r0, r4
90001790:	f026 fc74 	bl	9002807c <_ZdlPvj>
90001794:	4620      	mov	r0, r4
90001796:	bd10      	pop	{r4, pc}

90001798 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
90001798:	4b03      	ldr	r3, [pc, #12]	; (900017a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
9000179a:	b510      	push	{r4, lr}
9000179c:	4604      	mov	r4, r0
9000179e:	6003      	str	r3, [r0, #0]
900017a0:	f012 fbec 	bl	90013f7c <_ZN8touchgfx17AbstractPartitionD1Ev>
900017a4:	4620      	mov	r0, r4
900017a6:	bd10      	pop	{r4, pc}
900017a8:	9002a800 	.word	0x9002a800

900017ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
900017ac:	b510      	push	{r4, lr}
900017ae:	4604      	mov	r4, r0
900017b0:	f7ff fff2 	bl	90001798 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
900017b4:	f240 51a4 	movw	r1, #1444	; 0x5a4
900017b8:	4620      	mov	r0, r4
900017ba:	f026 fc5f 	bl	9002807c <_ZdlPvj>
900017be:	4620      	mov	r0, r4
900017c0:	bd10      	pop	{r4, pc}
	...

900017c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
900017c4:	4b03      	ldr	r3, [pc, #12]	; (900017d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
900017c6:	b510      	push	{r4, lr}
900017c8:	4604      	mov	r4, r0
900017ca:	6003      	str	r3, [r0, #0]
900017cc:	f012 fbd6 	bl	90013f7c <_ZN8touchgfx17AbstractPartitionD1Ev>
900017d0:	4620      	mov	r0, r4
900017d2:	bd10      	pop	{r4, pc}
900017d4:	9002a7cc 	.word	0x9002a7cc

900017d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
900017d8:	b510      	push	{r4, lr}
900017da:	4604      	mov	r4, r0
900017dc:	f7ff fff2 	bl	900017c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
900017e0:	2118      	movs	r1, #24
900017e2:	4620      	mov	r0, r4
900017e4:	f026 fc4a 	bl	9002807c <_ZdlPvj>
900017e8:	4620      	mov	r0, r4
900017ea:	bd10      	pop	{r4, pc}

900017ec <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
900017ec:	4b08      	ldr	r3, [pc, #32]	; (90001810 <_ZN12FrontendHeapD1Ev+0x24>)
900017ee:	b510      	push	{r4, lr}
900017f0:	4604      	mov	r4, r0
900017f2:	6003      	str	r3, [r0, #0]
900017f4:	f500 60ba 	add.w	r0, r0, #1488	; 0x5d0
900017f8:	f7ff ffba 	bl	90001770 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
900017fc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
90001800:	f7ff ffca 	bl	90001798 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
90001804:	f104 0014 	add.w	r0, r4, #20
90001808:	f7ff ffdc 	bl	900017c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
9000180c:	4620      	mov	r0, r4
9000180e:	bd10      	pop	{r4, pc}
90001810:	9002a868 	.word	0x9002a868

90001814 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
90001814:	b508      	push	{r3, lr}
90001816:	4802      	ldr	r0, [pc, #8]	; (90001820 <__tcf_0+0xc>)
90001818:	f7ff ffe8 	bl	900017ec <_ZN12FrontendHeapD1Ev>
9000181c:	bd08      	pop	{r3, pc}
9000181e:	bf00      	nop
90001820:	2000320c 	.word	0x2000320c

90001824 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
90001824:	b510      	push	{r4, lr}
90001826:	4604      	mov	r4, r0
90001828:	f7ff ffe0 	bl	900017ec <_ZN12FrontendHeapD1Ev>
9000182c:	f44f 61e8 	mov.w	r1, #1856	; 0x740
90001830:	4620      	mov	r0, r4
90001832:	f026 fc23 	bl	9002807c <_ZdlPvj>
90001836:	4620      	mov	r0, r4
90001838:	bd10      	pop	{r4, pc}
	...

9000183c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
9000183c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
90001840:	f000 ff64 	bl	9000270c <_ZN14BitmapDatabase11getInstanceEv>
90001844:	2400      	movs	r4, #0
90001846:	4605      	mov	r5, r0
90001848:	f000 ff64 	bl	90002714 <_ZN14BitmapDatabase15getInstanceSizeEv>
9000184c:	4623      	mov	r3, r4
9000184e:	4601      	mov	r1, r0
90001850:	4622      	mov	r2, r4
90001852:	4628      	mov	r0, r5
90001854:	9400      	str	r4, [sp, #0]
90001856:	f01a fdd9 	bl	9001c40c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
9000185a:	4b25      	ldr	r3, [pc, #148]	; (900018f0 <touchgfx_init+0xb4>)
9000185c:	4a25      	ldr	r2, [pc, #148]	; (900018f4 <touchgfx_init+0xb8>)
  TypedText::registerTexts(&texts);
  Texts::setLanguage(0);
9000185e:	4620      	mov	r0, r4
        static FrontendHeap instance;
90001860:	4d25      	ldr	r5, [pc, #148]	; (900018f8 <touchgfx_init+0xbc>)
90001862:	601a      	str	r2, [r3, #0]
90001864:	f001 fe94 	bl	90003590 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
90001868:	4824      	ldr	r0, [pc, #144]	; (900018fc <touchgfx_init+0xc0>)
9000186a:	f01a fd11 	bl	9001c290 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
9000186e:	782b      	ldrb	r3, [r5, #0]
90001870:	f3bf 8f5b 	dmb	ish
90001874:	07db      	lsls	r3, r3, #31
90001876:	d435      	bmi.n	900018e4 <touchgfx_init+0xa8>
90001878:	4628      	mov	r0, r5
9000187a:	f026 fc01 	bl	90028080 <__cxa_guard_acquire>
9000187e:	b388      	cbz	r0, 900018e4 <touchgfx_init+0xa8>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
90001880:	4c1f      	ldr	r4, [pc, #124]	; (90001900 <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
90001882:	4b20      	ldr	r3, [pc, #128]	; (90001904 <touchgfx_init+0xc8>)
90001884:	f504 66bd 	add.w	r6, r4, #1512	; 0x5e8
90001888:	f104 0014 	add.w	r0, r4, #20
9000188c:	f104 082c 	add.w	r8, r4, #44	; 0x2c
90001890:	f504 67ba 	add.w	r7, r4, #1488	; 0x5d0
90001894:	6023      	str	r3, [r4, #0]
90001896:	6060      	str	r0, [r4, #4]
90001898:	f8c4 8008 	str.w	r8, [r4, #8]
9000189c:	60e7      	str	r7, [r4, #12]
9000189e:	6126      	str	r6, [r4, #16]
900018a0:	f012 fb6e 	bl	90013f80 <_ZN8touchgfx17AbstractPartitionC1Ev>
900018a4:	4b18      	ldr	r3, [pc, #96]	; (90001908 <touchgfx_init+0xcc>)
900018a6:	4640      	mov	r0, r8
900018a8:	6163      	str	r3, [r4, #20]
900018aa:	f012 fb69 	bl	90013f80 <_ZN8touchgfx17AbstractPartitionC1Ev>
900018ae:	4b17      	ldr	r3, [pc, #92]	; (9000190c <touchgfx_init+0xd0>)
900018b0:	4638      	mov	r0, r7
900018b2:	62e3      	str	r3, [r4, #44]	; 0x2c
900018b4:	f012 fb64 	bl	90013f80 <_ZN8touchgfx17AbstractPartitionC1Ev>
900018b8:	4b15      	ldr	r3, [pc, #84]	; (90001910 <touchgfx_init+0xd4>)
900018ba:	f204 50e4 	addw	r0, r4, #1508	; 0x5e4
900018be:	f8c4 35d0 	str.w	r3, [r4, #1488]	; 0x5d0
900018c2:	f001 fee1 	bl	90003688 <_ZN5ModelC1Ev>
900018c6:	4622      	mov	r2, r4
900018c8:	f204 51e4 	addw	r1, r4, #1508	; 0x5e4
900018cc:	4630      	mov	r0, r6
900018ce:	f001 fed1 	bl	90003674 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
900018d2:	4630      	mov	r0, r6
900018d4:	f000 ffd8 	bl	90002888 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
900018d8:	4628      	mov	r0, r5
900018da:	f026 fbdd 	bl	90028098 <__cxa_guard_release>
900018de:	480d      	ldr	r0, [pc, #52]	; (90001914 <touchgfx_init+0xd8>)
900018e0:	f027 f9c6 	bl	90028c70 <atexit>
  (void)heap;

  /*
   * Initialize TouchGFX
   */
  hal.initialize();
900018e4:	480c      	ldr	r0, [pc, #48]	; (90001918 <touchgfx_init+0xdc>)
}
900018e6:	b002      	add	sp, #8
900018e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  hal.initialize();
900018ec:	f7ff bccc 	b.w	90001288 <_ZN11TouchGFXHAL10initializeEv>
900018f0:	20026d38 	.word	0x20026d38
900018f4:	200045ec 	.word	0x200045ec
900018f8:	20003208 	.word	0x20003208
900018fc:	20000008 	.word	0x20000008
90001900:	2000320c 	.word	0x2000320c
90001904:	9002a868 	.word	0x9002a868
90001908:	9002a7cc 	.word	0x9002a7cc
9000190c:	9002a800 	.word	0x9002a800
90001910:	9002a834 	.word	0x9002a834
90001914:	90001815 	.word	0x90001815
90001918:	20004570 	.word	0x20004570

9000191c <touchgfx_taskEntry>:
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
9000191c:	4801      	ldr	r0, [pc, #4]	; (90001924 <touchgfx_taskEntry+0x8>)
9000191e:	f7ff bbed 	b.w	900010fc <_ZN11TouchGFXHAL9taskEntryEv>
90001922:	bf00      	nop
90001924:	20004570 	.word	0x20004570

90001928 <_GLOBAL__sub_I_touchgfx_init>:
}
90001928:	b570      	push	{r4, r5, r6, lr}
{
public:

    STM32TouchController() {}
9000192a:	4b25      	ldr	r3, [pc, #148]	; (900019c0 <_GLOBAL__sub_I_touchgfx_init+0x98>)
9000192c:	4c25      	ldr	r4, [pc, #148]	; (900019c4 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
static STM32F7DMA dma;
9000192e:	4e26      	ldr	r6, [pc, #152]	; (900019c8 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
static LCD16bpp display;
90001930:	4d26      	ldr	r5, [pc, #152]	; (900019cc <_GLOBAL__sub_I_touchgfx_init+0xa4>)
90001932:	6023      	str	r3, [r4, #0]
static STM32F7DMA dma;
90001934:	4630      	mov	r0, r6
90001936:	f7ff fed3 	bl	900016e0 <_ZN10STM32F7DMAC1Ev>
static LCD16bpp display;
9000193a:	4628      	mov	r0, r5
9000193c:	f01d fdf4 	bl	9001f528 <_ZN8touchgfx8LCD16bppC1Ev>
          lastRenderVariant(HARDWARE)
90001940:	4b23      	ldr	r3, [pc, #140]	; (900019d0 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
90001942:	f44f 7180 	mov.w	r1, #256	; 0x100
90001946:	2200      	movs	r2, #0
90001948:	4822      	ldr	r0, [pc, #136]	; (900019d4 <_GLOBAL__sub_I_touchgfx_init+0xac>)
9000194a:	f8a3 1048 	strh.w	r1, [r3, #72]	; 0x48
9000194e:	f8a3 1076 	strh.w	r1, [r3, #118]	; 0x76
90001952:	2101      	movs	r1, #1
90001954:	60dc      	str	r4, [r3, #12]
90001956:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
9000195a:	491f      	ldr	r1, [pc, #124]	; (900019d8 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
        DISPLAY_HEIGHT = height;
9000195c:	4c1f      	ldr	r4, [pc, #124]	; (900019dc <_GLOBAL__sub_I_touchgfx_init+0xb4>)
        instance = this;
9000195e:	600b      	str	r3, [r1, #0]
        DISPLAY_WIDTH = width;
90001960:	491f      	ldr	r1, [pc, #124]	; (900019e0 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
90001962:	851a      	strh	r2, [r3, #40]	; 0x28
90001964:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : listener(0), dragThresholdValue(0)
90001968:	62da      	str	r2, [r3, #44]	; 0x2c
9000196a:	861a      	strh	r2, [r3, #48]	; 0x30
          lastRenderVariant(HARDWARE)
9000196c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
    {
        x = 0;
        y = 0;
        width = 0;
90001970:	655a      	str	r2, [r3, #84]	; 0x54
90001972:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
90001976:	671a      	str	r2, [r3, #112]	; 0x70
90001978:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
9000197c:	e9c3 0219 	strd	r0, r2, [r3, #100]	; 0x64
        DISPLAY_WIDTH = width;
90001980:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
90001984:	8008      	strh	r0, [r1, #0]
        DISPLAY_HEIGHT = height;
90001986:	f44f 7188 	mov.w	r1, #272	; 0x110
9000198a:	8021      	strh	r1, [r4, #0]
        DISPLAY_ROTATION = rotate0;
9000198c:	4c15      	ldr	r4, [pc, #84]	; (900019e4 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
          lastRenderVariant(HARDWARE)
9000198e:	e9c3 2204 	strd	r2, r2, [r3, #16]
              inProgress(false)
90001992:	e9c3 2206 	strd	r2, r2, [r3, #24]
90001996:	e9c3 2208 	strd	r2, r2, [r3, #32]
9000199a:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
9000199e:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
        x = 0;
900019a2:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
900019a6:	e9c3 6501 	strd	r6, r5, [r3, #4]
        DISPLAY_ROTATION = rotate0;
900019aa:	7022      	strb	r2, [r4, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
900019ac:	4c0e      	ldr	r4, [pc, #56]	; (900019e8 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
900019ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
900019b2:	8020      	strh	r0, [r4, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
900019b4:	4a0d      	ldr	r2, [pc, #52]	; (900019ec <_GLOBAL__sub_I_touchgfx_init+0xc4>)
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
900019b6:	480e      	ldr	r0, [pc, #56]	; (900019f0 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
900019b8:	601a      	str	r2, [r3, #0]
900019ba:	8001      	strh	r1, [r0, #0]
}
900019bc:	bd70      	pop	{r4, r5, r6, pc}
900019be:	bf00      	nop
900019c0:	9002a35c 	.word	0x9002a35c
900019c4:	2000394c 	.word	0x2000394c
900019c8:	20003950 	.word	0x20003950
900019cc:	200045f0 	.word	0x200045f0
900019d0:	20004570 	.word	0x20004570
900019d4:	01000001 	.word	0x01000001
900019d8:	20026cdc 	.word	0x20026cdc
900019dc:	20026cd2 	.word	0x20026cd2
900019e0:	20026cd0 	.word	0x20026cd0
900019e4:	20026cd4 	.word	0x20026cd4
900019e8:	20026cd6 	.word	0x20026cd6
900019ec:	9002a440 	.word	0x9002a440
900019f0:	20026cd8 	.word	0x20026cd8

900019f4 <_GLOBAL__sub_D_touchgfx_init>:
static STM32F7DMA dma;
900019f4:	4801      	ldr	r0, [pc, #4]	; (900019fc <_GLOBAL__sub_D_touchgfx_init+0x8>)
900019f6:	f7ff be57 	b.w	900016a8 <_ZN10STM32F7DMAD1Ev>
900019fa:	bf00      	nop
900019fc:	20003950 	.word	0x20003950

90001a00 <SCB_CleanInvalidateDCache>:
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
90001a00:	4a10      	ldr	r2, [pc, #64]	; (90001a44 <SCB_CleanInvalidateDCache+0x44>)
90001a02:	2300      	movs	r3, #0
{
90001a04:	b570      	push	{r4, r5, r6, lr}
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
90001a06:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90001a0a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
90001a0e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90001a12:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90001a16:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90001a1a:	f3c3 334e 	ubfx	r3, r3, #13, #15
90001a1e:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90001a20:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90001a24:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90001a26:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
90001a2a:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90001a2c:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
90001a30:	d2f9      	bcs.n	90001a26 <SCB_CleanInvalidateDCache+0x26>
    } while(sets-- != 0U);
90001a32:	3b20      	subs	r3, #32
90001a34:	f113 0f20 	cmn.w	r3, #32
90001a38:	d1f2      	bne.n	90001a20 <SCB_CleanInvalidateDCache+0x20>
90001a3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001a3e:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
90001a42:	bd70      	pop	{r4, r5, r6, pc}
90001a44:	e000ed00 	.word	0xe000ed00

90001a48 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90001a48:	4b03      	ldr	r3, [pc, #12]	; (90001a58 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
90001a4a:	2290      	movs	r2, #144	; 0x90
90001a4c:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
90001a50:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
90001a54:	4770      	bx	lr
90001a56:	bf00      	nop
90001a58:	e000e100 	.word	0xe000e100

90001a5c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
90001a5c:	4a09      	ldr	r2, [pc, #36]	; (90001a84 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
90001a5e:	490a      	ldr	r1, [pc, #40]	; (90001a88 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
90001a60:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
90001a62:	480a      	ldr	r0, [pc, #40]	; (90001a8c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
90001a64:	f3c3 030a 	ubfx	r3, r3, #0, #11
90001a68:	3b01      	subs	r3, #1
90001a6a:	b29b      	uxth	r3, r3
90001a6c:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
90001a6e:	6911      	ldr	r1, [r2, #16]
90001a70:	f3c1 010a 	ubfx	r1, r1, #0, #11
90001a74:	3901      	subs	r1, #1
90001a76:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
90001a78:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
90001a7a:	6b53      	ldr	r3, [r2, #52]	; 0x34
90001a7c:	f043 0301 	orr.w	r3, r3, #1
90001a80:	6353      	str	r3, [r2, #52]	; 0x34
}
90001a82:	4770      	bx	lr
90001a84:	40016800 	.word	0x40016800
90001a88:	2000466a 	.word	0x2000466a
90001a8c:	20004668 	.word	0x20004668

90001a90 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
90001a90:	4b01      	ldr	r3, [pc, #4]	; (90001a98 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
90001a92:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
90001a94:	4770      	bx	lr
90001a96:	bf00      	nop
90001a98:	40016884 	.word	0x40016884

90001a9c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
90001a9c:	4b02      	ldr	r3, [pc, #8]	; (90001aa8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
90001a9e:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
90001aa0:	6299      	str	r1, [r3, #40]	; 0x28
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
90001aa2:	f843 2c60 	str.w	r2, [r3, #-96]
}
90001aa6:	4770      	bx	lr
90001aa8:	40016884 	.word	0x40016884

90001aac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
void TouchGFXGeneratedHAL::InvalidateCache()
{
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
90001aac:	f7ff bfa8 	b.w	90001a00 <SCB_CleanInvalidateDCache>

90001ab0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
90001ab0:	b508      	push	{r3, lr}
  HAL::flushFrameBuffer(rect);
90001ab2:	f013 fa10 	bl	90014ed6 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
90001ab6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
SCB_CleanInvalidateDCache();
90001aba:	f7ff bfa1 	b.w	90001a00 <SCB_CleanInvalidateDCache>

90001abe <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
  return HAL::blockCopy(dest, src, numBytes);
90001abe:	f013 bb30 	b.w	90015122 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
	...

90001ac4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001ac4:	4b03      	ldr	r3, [pc, #12]	; (90001ad4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
90001ac6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001aca:	609a      	str	r2, [r3, #8]
90001acc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90001ad0:	609a      	str	r2, [r3, #8]
}
90001ad2:	4770      	bx	lr
90001ad4:	e000e100 	.word	0xe000e100

90001ad8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001ad8:	4b08      	ldr	r3, [pc, #32]	; (90001afc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
90001ada:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001ade:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001ae2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001ae6:	f3bf 8f6f 	isb	sy
90001aea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90001aee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001af2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001af6:	f3bf 8f6f 	isb	sy
}
90001afa:	4770      	bx	lr
90001afc:	e000e100 	.word	0xe000e100

90001b00 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
90001b00:	b570      	push	{r4, r5, r6, lr}
90001b02:	4604      	mov	r4, r0
    HAL::initialize();
90001b04:	f013 fcd0 	bl	900154a8 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
90001b08:	6823      	ldr	r3, [r4, #0]
90001b0a:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
90001b0c:	f017 fa4c 	bl	90018fa8 <_ZN8touchgfx11Application11getInstanceEv>
90001b10:	4601      	mov	r1, r0
90001b12:	4620      	mov	r0, r4
90001b14:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0xC003FC00, (void*)0);
90001b16:	6823      	ldr	r3, [r4, #0]
90001b18:	4620      	mov	r0, r4
90001b1a:	4a04      	ldr	r2, [pc, #16]	; (90001b2c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x2c>)
90001b1c:	6f1d      	ldr	r5, [r3, #112]	; 0x70
90001b1e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
90001b22:	2300      	movs	r3, #0
90001b24:	46ac      	mov	ip, r5
}
90001b26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0xC003FC00, (void*)0);
90001b2a:	4760      	bx	ip
90001b2c:	c003fc00 	.word	0xc003fc00

90001b30 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
        if (LTDC->LIPCR == lcd_int_active_line)
90001b30:	4b13      	ldr	r3, [pc, #76]	; (90001b80 <HAL_LTDC_LineEventCallback+0x50>)
90001b32:	4a14      	ldr	r2, [pc, #80]	; (90001b84 <HAL_LTDC_LineEventCallback+0x54>)
90001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90001b36:	8811      	ldrh	r1, [r2, #0]
90001b38:	428b      	cmp	r3, r1
    {
90001b3a:	b510      	push	{r4, lr}
90001b3c:	4c12      	ldr	r4, [pc, #72]	; (90001b88 <HAL_LTDC_LineEventCallback+0x58>)
        if (LTDC->LIPCR == lcd_int_active_line)
90001b3e:	d113      	bne.n	90001b68 <HAL_LTDC_LineEventCallback+0x38>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
90001b40:	4b12      	ldr	r3, [pc, #72]	; (90001b8c <HAL_LTDC_LineEventCallback+0x5c>)
90001b42:	8819      	ldrh	r1, [r3, #0]
90001b44:	f004 f870 	bl	90005c28 <HAL_LTDC_ProgramLineEvent>
        return instance;
90001b48:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
90001b4a:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
90001b4e:	3301      	adds	r3, #1
90001b50:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
90001b54:	f7ff fbfa 	bl	9000134c <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
90001b58:	6820      	ldr	r0, [r4, #0]
90001b5a:	f013 ff2d 	bl	900159b8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
90001b5e:	2000      	movs	r0, #0
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
90001b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
90001b64:	f7ff baaf 	b.w	900010c6 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
90001b68:	f004 f85e 	bl	90005c28 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
90001b6c:	2000      	movs	r0, #0
90001b6e:	f7ff faab 	bl	900010c8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        return instance;
90001b72:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
90001b74:	6803      	ldr	r3, [r0, #0]
    }
90001b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90001b7a:	699b      	ldr	r3, [r3, #24]
90001b7c:	4718      	bx	r3
90001b7e:	bf00      	nop
90001b80:	40016800 	.word	0x40016800
90001b84:	2000466a 	.word	0x2000466a
90001b88:	20026cdc 	.word	0x20026cdc
90001b8c:	20004668 	.word	0x20004668

90001b90 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
90001b90:	4770      	bx	lr
	...

90001b94 <tcp_server_thread>:
	sock_port.port = 80;

	sys_thread_new("HTTP", tcp_server_thread, (void*) &sock_port,
	DEFAULT_THREAD_STACKSIZE * 4, osPriorityBelowNormal);
}
static void tcp_server_thread(void *arg) {
90001b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	socklen_t size;
	struct sockaddr_in address, remotehost;
	socket_port *sport;
	sport = (socket_port*) arg;
	/* create a TCP socket */
	if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
90001b98:	2200      	movs	r2, #0
static void tcp_server_thread(void *arg) {
90001b9a:	b08c      	sub	sp, #48	; 0x30
90001b9c:	4605      	mov	r5, r0
	if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
90001b9e:	2101      	movs	r1, #1
90001ba0:	2002      	movs	r0, #2
90001ba2:	f00d fe63 	bl	9000f86c <lwip_socket>
90001ba6:	1e04      	subs	r4, r0, #0
90001ba8:	db35      	blt.n	90001c16 <tcp_server_thread+0x82>
		return;
	}

	/* bind to port 80 at any interface */
	address.sin_family = AF_INET;
90001baa:	2302      	movs	r3, #2
	address.sin_port = htons(sport->port);
90001bac:	8828      	ldrh	r0, [r5, #0]
	address.sin_family = AF_INET;
90001bae:	f88d 3011 	strb.w	r3, [sp, #17]
	address.sin_port = htons(sport->port);
90001bb2:	f009 faa7 	bl	9000b104 <lwip_htons>
	address.sin_addr.s_addr = INADDR_ANY;

	if (bind(sock, (struct sockaddr *)&address, sizeof (address)) < 0) {
90001bb6:	2210      	movs	r2, #16
	address.sin_addr.s_addr = INADDR_ANY;
90001bb8:	2300      	movs	r3, #0
	address.sin_port = htons(sport->port);
90001bba:	f8ad 0012 	strh.w	r0, [sp, #18]
	if (bind(sock, (struct sockaddr *)&address, sizeof (address)) < 0) {
90001bbe:	4620      	mov	r0, r4
90001bc0:	eb0d 0102 	add.w	r1, sp, r2
	address.sin_addr.s_addr = INADDR_ANY;
90001bc4:	9305      	str	r3, [sp, #20]
	if (bind(sock, (struct sockaddr *)&address, sizeof (address)) < 0) {
90001bc6:	f00d fcb7 	bl	9000f538 <lwip_bind>
90001bca:	2800      	cmp	r0, #0
90001bcc:	db23      	blt.n	90001c16 <tcp_server_thread+0x82>

	while (1) {
		newconn = accept(sock, (struct sockaddr* )&remotehost,
				(socklen_t* )&size);
		if (newconn >= 0) {
			socketClient.conn = newconn;
90001bce:	4f13      	ldr	r7, [pc, #76]	; (90001c1c <tcp_server_thread+0x88>)
	listen(sock, 10);
90001bd0:	210a      	movs	r1, #10
			socketClient.size = size;
			socketClient.remotehost = remotehost;
			sys_thread_new("tcp_client_thread", tcp_client_thread,
90001bd2:	f8df 8050 	ldr.w	r8, [pc, #80]	; 90001c24 <tcp_server_thread+0x90>
	listen(sock, 10);
90001bd6:	4620      	mov	r0, r4
			socketClient.remotehost = remotehost;
90001bd8:	1d3e      	adds	r6, r7, #4
	listen(sock, 10);
90001bda:	f00d fd1b 	bl	9000f614 <lwip_listen>
		newconn = accept(sock, (struct sockaddr* )&remotehost,
90001bde:	ad08      	add	r5, sp, #32
90001be0:	aa03      	add	r2, sp, #12
90001be2:	4620      	mov	r0, r4
90001be4:	4629      	mov	r1, r5
90001be6:	f00d fc01 	bl	9000f3ec <lwip_accept>
		if (newconn >= 0) {
90001bea:	2800      	cmp	r0, #0
90001bec:	db0f      	blt.n	90001c0e <tcp_server_thread+0x7a>
			socketClient.size = size;
90001bee:	9b03      	ldr	r3, [sp, #12]
			socketClient.conn = newconn;
90001bf0:	6038      	str	r0, [r7, #0]
			socketClient.size = size;
90001bf2:	617b      	str	r3, [r7, #20]
			socketClient.remotehost = remotehost;
90001bf4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
90001bf8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
			sys_thread_new("tcp_client_thread", tcp_client_thread,
90001bfc:	2318      	movs	r3, #24
90001bfe:	4a07      	ldr	r2, [pc, #28]	; (90001c1c <tcp_server_thread+0x88>)
90001c00:	4641      	mov	r1, r8
90001c02:	4807      	ldr	r0, [pc, #28]	; (90001c20 <tcp_server_thread+0x8c>)
90001c04:	9300      	str	r3, [sp, #0]
90001c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
90001c0a:	f00d ff18 	bl	9000fa3e <sys_thread_new>
					(void*) &socketClient, DEFAULT_THREAD_STACKSIZE * 4,
					osPriorityNormal);
			//tcp_server_init();
			// http_server_serve(socketClient);
		}
		osDelay(1);
90001c0e:	2001      	movs	r0, #1
90001c10:	f005 fc02 	bl	90007418 <osDelay>
		newconn = accept(sock, (struct sockaddr* )&remotehost,
90001c14:	e7e3      	b.n	90001bde <tcp_server_thread+0x4a>
	}
}
90001c16:	b00c      	add	sp, #48	; 0x30
90001c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90001c1c:	200271d0 	.word	0x200271d0
90001c20:	9002a874 	.word	0x9002a874
90001c24:	90001c29 	.word	0x90001c29

90001c28 <tcp_client_thread>:
static void tcp_client_thread(void *arg) {
90001c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	size = socket->size;
90001c2c:	6943      	ldr	r3, [r0, #20]
static void tcp_client_thread(void *arg) {
90001c2e:	b0af      	sub	sp, #188	; 0xbc
	conn = socket->conn;
90001c30:	6805      	ldr	r5, [r0, #0]
	remotehost = socket->remotehost;
90001c32:	3004      	adds	r0, #4
90001c34:	ac04      	add	r4, sp, #16
	timeout = tick;
90001c36:	4f17      	ldr	r7, [pc, #92]	; (90001c94 <tcp_client_thread+0x6c>)
	size = socket->size;
90001c38:	9303      	str	r3, [sp, #12]
		ret = recvfrom(conn, (char* ) recv_buffer, buflen, 0,
90001c3a:	f10d 090c 	add.w	r9, sp, #12
	timeout = tick;
90001c3e:	4e16      	ldr	r6, [pc, #88]	; (90001c98 <tcp_client_thread+0x70>)
		if (strstr((char*) recv_buffer, "-c") != NULL) {
90001c40:	f8df 8058 	ldr.w	r8, [pc, #88]	; 90001c9c <tcp_client_thread+0x74>
	remotehost = socket->remotehost;
90001c44:	c80f      	ldmia	r0, {r0, r1, r2, r3}
90001c46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	timeout = tick;
90001c4a:	683b      	ldr	r3, [r7, #0]
90001c4c:	6033      	str	r3, [r6, #0]
		ret = recvfrom(conn, (char* ) recv_buffer, buflen, 0,
90001c4e:	2296      	movs	r2, #150	; 0x96
90001c50:	2300      	movs	r3, #0
90001c52:	a908      	add	r1, sp, #32
90001c54:	4628      	mov	r0, r5
90001c56:	e9cd 4900 	strd	r4, r9, [sp]
90001c5a:	f00d fcff 	bl	9000f65c <lwip_recvfrom>
		if (ret > 0) {
90001c5e:	1e02      	subs	r2, r0, #0
90001c60:	dd13      	ble.n	90001c8a <tcp_client_thread+0x62>
			timeout = tick;
90001c62:	683b      	ldr	r3, [r7, #0]
		sendto(conn, (char* )recv_buffer, ret, 0,
90001c64:	a908      	add	r1, sp, #32
90001c66:	4628      	mov	r0, r5
			timeout = tick;
90001c68:	6033      	str	r3, [r6, #0]
		sendto(conn, (char* )recv_buffer, ret, 0,
90001c6a:	9b03      	ldr	r3, [sp, #12]
90001c6c:	e9cd 4300 	strd	r4, r3, [sp]
90001c70:	2300      	movs	r3, #0
90001c72:	f00d fd4f 	bl	9000f714 <lwip_sendto>
		if (strstr((char*) recv_buffer, "-c") != NULL) {
90001c76:	4641      	mov	r1, r8
90001c78:	a808      	add	r0, sp, #32
90001c7a:	f027 fcf5 	bl	90029668 <strstr>
90001c7e:	b920      	cbnz	r0, 90001c8a <tcp_client_thread+0x62>
		if (tick - timeout > 20) {
90001c80:	683b      	ldr	r3, [r7, #0]
90001c82:	6832      	ldr	r2, [r6, #0]
90001c84:	1a9b      	subs	r3, r3, r2
90001c86:	2b14      	cmp	r3, #20
90001c88:	d9e1      	bls.n	90001c4e <tcp_client_thread+0x26>
			close(conn);
90001c8a:	4628      	mov	r0, r5
90001c8c:	f00d fc8a 	bl	9000f5a4 <lwip_close>
			osThreadExit();
90001c90:	f005 fbbc 	bl	9000740c <osThreadExit>
90001c94:	2000466c 	.word	0x2000466c
90001c98:	20004670 	.word	0x20004670
90001c9c:	9002a886 	.word	0x9002a886

90001ca0 <tcp_server_init>:
void tcp_server_init(void) {
90001ca0:	b507      	push	{r0, r1, r2, lr}
	sock_port.port = 80;
90001ca2:	2350      	movs	r3, #80	; 0x50
90001ca4:	4a06      	ldr	r2, [pc, #24]	; (90001cc0 <tcp_server_init+0x20>)
	sys_thread_new("HTTP", tcp_server_thread, (void*) &sock_port,
90001ca6:	4907      	ldr	r1, [pc, #28]	; (90001cc4 <tcp_server_init+0x24>)
	sock_port.port = 80;
90001ca8:	6013      	str	r3, [r2, #0]
	sys_thread_new("HTTP", tcp_server_thread, (void*) &sock_port,
90001caa:	2310      	movs	r3, #16
90001cac:	4806      	ldr	r0, [pc, #24]	; (90001cc8 <tcp_server_init+0x28>)
90001cae:	9300      	str	r3, [sp, #0]
90001cb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
90001cb4:	f00d fec3 	bl	9000fa3e <sys_thread_new>
}
90001cb8:	b003      	add	sp, #12
90001cba:	f85d fb04 	ldr.w	pc, [sp], #4
90001cbe:	bf00      	nop
90001cc0:	2002725c 	.word	0x2002725c
90001cc4:	90001b95 	.word	0x90001b95
90001cc8:	9002a889 	.word	0x9002a889

90001ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
90001ccc:	b530      	push	{r4, r5, lr}
90001cce:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
90001cd0:	2210      	movs	r2, #16
90001cd2:	2100      	movs	r1, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
90001cd4:	2501      	movs	r5, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
90001cd6:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90001cd8:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
90001cda:	f027 f859 	bl	90028d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
90001cde:	2214      	movs	r2, #20
90001ce0:	2100      	movs	r1, #0
90001ce2:	a802      	add	r0, sp, #8
90001ce4:	f027 f854 	bl	90028d90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90001ce8:	2284      	movs	r2, #132	; 0x84
90001cea:	2100      	movs	r1, #0
90001cec:	a813      	add	r0, sp, #76	; 0x4c
90001cee:	f027 f84f 	bl	90028d90 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
90001cf2:	4b27      	ldr	r3, [pc, #156]	; (90001d90 <SystemClock_Config+0xc4>)
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 432;
90001cf4:	f04f 0c19 	mov.w	ip, #25
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
90001cf8:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
90001cfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90001cfc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
90001d00:	641a      	str	r2, [r3, #64]	; 0x40
90001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90001d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90001d08:	9300      	str	r3, [sp, #0]
90001d0a:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90001d0c:	4b21      	ldr	r3, [pc, #132]	; (90001d94 <SystemClock_Config+0xc8>)
90001d0e:	681a      	ldr	r2, [r3, #0]
90001d10:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
90001d14:	601a      	str	r2, [r3, #0]
90001d16:	681b      	ldr	r3, [r3, #0]
90001d18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
90001d1c:	9301      	str	r3, [sp, #4]
90001d1e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
90001d20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
90001d24:	e9cd 5307 	strd	r5, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90001d28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
90001d2c:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 432;
90001d30:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
  RCC_OscInitStruct.PLL.PLLQ = 2;
90001d34:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 432;
90001d38:	e9cd c30f 	strd	ip, r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
90001d3c:	f003 ffca 	bl	90005cd4 <HAL_RCC_OscConfig>
90001d40:	b100      	cbz	r0, 90001d44 <SystemClock_Config+0x78>
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1)
90001d42:	e7fe      	b.n	90001d42 <SystemClock_Config+0x76>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
90001d44:	f003 ff8e 	bl	90005c64 <HAL_PWREx_EnableOverDrive>
90001d48:	b100      	cbz	r0, 90001d4c <SystemClock_Config+0x80>
	while (1)
90001d4a:	e7fe      	b.n	90001d4a <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
90001d4c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
90001d4e:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
90001d50:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
90001d54:	2107      	movs	r1, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90001d56:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
90001d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90001d5e:	e9cd 0305 	strd	r0, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
90001d62:	a802      	add	r0, sp, #8
90001d64:	f004 f9a2 	bl	900060ac <HAL_RCC_ClockConfig>
90001d68:	b100      	cbz	r0, 90001d6c <SystemClock_Config+0xa0>
	while (1)
90001d6a:	e7fe      	b.n	90001d6a <SystemClock_Config+0x9e>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1;
90001d6c:	2348      	movs	r3, #72	; 0x48
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
90001d6e:	901b      	str	r0, [sp, #108]	; 0x6c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
90001d70:	9024      	str	r0, [sp, #144]	; 0x90
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1;
90001d72:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
90001d74:	2364      	movs	r3, #100	; 0x64
90001d76:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
90001d78:	2305      	movs	r3, #5
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
90001d7a:	e9cd 501d 	strd	r5, r0, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90001d7e:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
90001d80:	e9cd 4319 	strd	r4, r3, [sp, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90001d84:	f004 fa76 	bl	90006274 <HAL_RCCEx_PeriphCLKConfig>
90001d88:	b100      	cbz	r0, 90001d8c <SystemClock_Config+0xc0>
	while (1)
90001d8a:	e7fe      	b.n	90001d8a <SystemClock_Config+0xbe>
}
90001d8c:	b035      	add	sp, #212	; 0xd4
90001d8e:	bd30      	pop	{r4, r5, pc}
90001d90:	40023800 	.word	0x40023800
90001d94:	40007000 	.word	0x40007000

90001d98 <main>:
{
90001d98:	b500      	push	{lr}
90001d9a:	b09d      	sub	sp, #116	; 0x74
  __ASM volatile ("dsb 0xF":::"memory");
90001d9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001da0:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90001da4:	4bb1      	ldr	r3, [pc, #708]	; (9000206c <main+0x2d4>)
90001da6:	2100      	movs	r1, #0
90001da8:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90001dac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001db0:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90001db4:	695a      	ldr	r2, [r3, #20]
90001db6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
90001dba:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90001dbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001dc0:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
90001dc4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90001dc8:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
90001dcc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90001dd0:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90001dd4:	f3c2 00c9 	ubfx	r0, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90001dd8:	f3c2 324e 	ubfx	r2, r2, #13, #15
90001ddc:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90001dde:	ea02 0604 	and.w	r6, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90001de2:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90001de4:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
90001de8:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90001dea:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
      } while (ways-- != 0U);
90001dee:	d2f9      	bcs.n	90001de4 <main+0x4c>
    } while(sets-- != 0U);
90001df0:	3a20      	subs	r2, #32
90001df2:	f112 0f20 	cmn.w	r2, #32
90001df6:	d1f2      	bne.n	90001dde <main+0x46>
90001df8:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90001dfc:	695a      	ldr	r2, [r3, #20]
90001dfe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
90001e02:	615a      	str	r2, [r3, #20]
90001e04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001e08:	f3bf 8f6f 	isb	sy
  HAL_Init();
90001e0c:	f002 f9ae 	bl	9000416c <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90001e10:	2400      	movs	r4, #0
  SystemClock_Config();
90001e12:	f7ff ff5b 	bl	90001ccc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90001e16:	2214      	movs	r2, #20
90001e18:	2100      	movs	r1, #0
90001e1a:	a80f      	add	r0, sp, #60	; 0x3c
90001e1c:	f026 ffb8 	bl	90028d90 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
90001e20:	4b93      	ldr	r3, [pc, #588]	; (90002070 <main+0x2d8>)
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
90001e22:	2108      	movs	r1, #8
90001e24:	4893      	ldr	r0, [pc, #588]	; (90002074 <main+0x2dc>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
90001e26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90001e28:	2501      	movs	r5, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
90001e2a:	f042 0210 	orr.w	r2, r2, #16
90001e2e:	631a      	str	r2, [r3, #48]	; 0x30
90001e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e32:	f002 0210 	and.w	r2, r2, #16
90001e36:	9201      	str	r2, [sp, #4]
90001e38:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90001e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
90001e40:	631a      	str	r2, [r3, #48]	; 0x30
90001e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e44:	f002 0240 	and.w	r2, r2, #64	; 0x40
90001e48:	9202      	str	r2, [sp, #8]
90001e4a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
90001e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e4e:	f042 0202 	orr.w	r2, r2, #2
90001e52:	631a      	str	r2, [r3, #48]	; 0x30
90001e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e56:	f002 0202 	and.w	r2, r2, #2
90001e5a:	9203      	str	r2, [sp, #12]
90001e5c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
90001e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
90001e64:	631a      	str	r2, [r3, #48]	; 0x30
90001e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e68:	f402 7200 	and.w	r2, r2, #512	; 0x200
90001e6c:	9204      	str	r2, [sp, #16]
90001e6e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90001e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e72:	f042 0208 	orr.w	r2, r2, #8
90001e76:	631a      	str	r2, [r3, #48]	; 0x30
90001e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e7a:	f002 0208 	and.w	r2, r2, #8
90001e7e:	9205      	str	r2, [sp, #20]
90001e80:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
90001e82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
90001e88:	631a      	str	r2, [r3, #48]	; 0x30
90001e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e8c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
90001e90:	9206      	str	r2, [sp, #24]
90001e92:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90001e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e96:	f042 0220 	orr.w	r2, r2, #32
90001e9a:	631a      	str	r2, [r3, #48]	; 0x30
90001e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001e9e:	f002 0220 	and.w	r2, r2, #32
90001ea2:	9207      	str	r2, [sp, #28]
90001ea4:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
90001ea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
90001eac:	631a      	str	r2, [r3, #48]	; 0x30
90001eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001eb0:	f402 7280 	and.w	r2, r2, #256	; 0x100
90001eb4:	9208      	str	r2, [sp, #32]
90001eb6:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
90001eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001eba:	f042 0201 	orr.w	r2, r2, #1
90001ebe:	631a      	str	r2, [r3, #48]	; 0x30
90001ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001ec2:	f002 0201 	and.w	r2, r2, #1
90001ec6:	9209      	str	r2, [sp, #36]	; 0x24
90001ec8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
90001eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001ecc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
90001ed0:	631a      	str	r2, [r3, #48]	; 0x30
90001ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001ed4:	f002 0280 	and.w	r2, r2, #128	; 0x80
90001ed8:	920a      	str	r2, [sp, #40]	; 0x28
90001eda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
90001edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90001ede:	f042 0204 	orr.w	r2, r2, #4
90001ee2:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
90001ee4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
90001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001ee8:	f003 0304 	and.w	r3, r3, #4
90001eec:	930b      	str	r3, [sp, #44]	; 0x2c
90001eee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
90001ef0:	f003 f9ea 	bl	900052c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);
90001ef4:	2200      	movs	r2, #0
90001ef6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
90001efa:	485f      	ldr	r0, [pc, #380]	; (90002078 <main+0x2e0>)
90001efc:	f003 f9e4 	bl	900052c8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90001f00:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
90001f02:	a90f      	add	r1, sp, #60	; 0x3c
90001f04:	485b      	ldr	r0, [pc, #364]	; (90002074 <main+0x2dc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90001f06:	e9cd 350f 	strd	r3, r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001f0a:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
90001f0e:	f003 f853 	bl	90004fb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
90001f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
90001f16:	4858      	ldr	r0, [pc, #352]	; (90002078 <main+0x2e0>)
90001f18:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90001f1a:	e9cd 350f 	strd	r3, r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001f1e:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
90001f22:	f003 f849 	bl	90004fb8 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
90001f26:	4855      	ldr	r0, [pc, #340]	; (9000207c <main+0x2e4>)
90001f28:	4b55      	ldr	r3, [pc, #340]	; (90002080 <main+0x2e8>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
90001f2a:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
90001f2c:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
90001f2e:	6205      	str	r5, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
90001f30:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
90001f34:	f002 f9ba 	bl	900042ac <HAL_CRC_Init>
90001f38:	b100      	cbz	r0, 90001f3c <main+0x1a4>
	while (1)
90001f3a:	e7fe      	b.n	90001f3a <main+0x1a2>
  hdma2d.Instance = DMA2D;
90001f3c:	4c51      	ldr	r4, [pc, #324]	; (90002084 <main+0x2ec>)
90001f3e:	4b52      	ldr	r3, [pc, #328]	; (90002088 <main+0x2f0>)
  hdma2d.Init.OutputOffset = 0;
90001f40:	e9c4 0002 	strd	r0, r0, [r4, #8]
  hdma2d.Init.Mode = DMA2D_M2M;
90001f44:	e9c4 3000 	strd	r3, r0, [r4]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
90001f48:	e9c4 000a 	strd	r0, r0, [r4, #40]	; 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
90001f4c:	e9c4 000c 	strd	r0, r0, [r4, #48]	; 0x30
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
90001f50:	4620      	mov	r0, r4
90001f52:	f002 fac7 	bl	900044e4 <HAL_DMA2D_Init>
90001f56:	b100      	cbz	r0, 90001f5a <main+0x1c2>
	while (1)
90001f58:	e7fe      	b.n	90001f58 <main+0x1c0>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
90001f5a:	4629      	mov	r1, r5
90001f5c:	4620      	mov	r0, r4
90001f5e:	f002 fb79 	bl	90004654 <HAL_DMA2D_ConfigLayer>
90001f62:	4603      	mov	r3, r0
90001f64:	b100      	cbz	r0, 90001f68 <main+0x1d0>
	while (1)
90001f66:	e7fe      	b.n	90001f66 <main+0x1ce>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
90001f68:	4848      	ldr	r0, [pc, #288]	; (9000208c <main+0x2f4>)
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
90001f6a:	2104      	movs	r1, #4
  hsdram1.Instance = FMC_SDRAM_DEVICE;
90001f6c:	4a48      	ldr	r2, [pc, #288]	; (90002090 <main+0x2f8>)
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
90001f6e:	2440      	movs	r4, #64	; 0x40
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
90001f70:	6083      	str	r3, [r0, #8]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
90001f72:	e9c0 2300 	strd	r2, r3, [r0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
90001f76:	2210      	movs	r2, #16
90001f78:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
90001f7c:	2180      	movs	r1, #128	; 0x80
  SdramTiming.RCDDelay = 16;
90001f7e:	9215      	str	r2, [sp, #84]	; 0x54
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
90001f80:	e9c0 4105 	strd	r4, r1, [r0, #20]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
90001f84:	a90f      	add	r1, sp, #60	; 0x3c
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
90001f86:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
90001f8a:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  SdramTiming.ExitSelfRefreshDelay = 16;
90001f8e:	e9cd 220f 	strd	r2, r2, [sp, #60]	; 0x3c
  SdramTiming.RowCycleDelay = 16;
90001f92:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
  SdramTiming.RPDelay = 16;
90001f96:	e9cd 2213 	strd	r2, r2, [sp, #76]	; 0x4c
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
90001f9a:	f004 fbf3 	bl	90006784 <HAL_SDRAM_Init>
90001f9e:	b100      	cbz	r0, 90001fa2 <main+0x20a>
	while (1)
90001fa0:	e7fe      	b.n	90001fa0 <main+0x208>
	BSP_SDRAM_DeInit();
90001fa2:	f001 ff83 	bl	90003eac <BSP_SDRAM_DeInit>
	if (BSP_SDRAM_Init() != SDRAM_OK) {
90001fa6:	f001 ff35 	bl	90003e14 <BSP_SDRAM_Init>
90001faa:	4605      	mov	r5, r0
90001fac:	b100      	cbz	r0, 90001fb0 <main+0x218>
	while (1)
90001fae:	e7fe      	b.n	90001fae <main+0x216>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
90001fb0:	2234      	movs	r2, #52	; 0x34
90001fb2:	4601      	mov	r1, r0
90001fb4:	a80f      	add	r0, sp, #60	; 0x3c
  hltdc.Instance = LTDC;
90001fb6:	4c37      	ldr	r4, [pc, #220]	; (90002094 <main+0x2fc>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
90001fb8:	f026 feea 	bl	90028d90 <memset>
  hltdc.Instance = LTDC;
90001fbc:	4b36      	ldr	r3, [pc, #216]	; (90002098 <main+0x300>)
  hltdc.Init.VerticalSync = 9;
90001fbe:	2628      	movs	r6, #40	; 0x28
  hltdc.Init.AccumulatedVBP = 11;
90001fc0:	f04f 0c35 	mov.w	ip, #53	; 0x35
  hltdc.Init.AccumulatedActiveH = 283;
90001fc4:	f240 2e15 	movw	lr, #533	; 0x215
  hltdc.Init.TotalHeigh = 285;
90001fc8:	f240 2235 	movw	r2, #565	; 0x235
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
90001fcc:	4620      	mov	r0, r4
  hltdc.Init.Backcolor.Blue = 0;
90001fce:	86a5      	strh	r5, [r4, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90001fd0:	6125      	str	r5, [r4, #16]
  hltdc.Init.Backcolor.Red = 0;
90001fd2:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
90001fd6:	e9c4 3500 	strd	r3, r5, [r4]
  hltdc.Init.VerticalSync = 9;
90001fda:	2309      	movs	r3, #9
90001fdc:	e9c4 6305 	strd	r6, r3, [r4, #20]
  hltdc.Init.AccumulatedVBP = 11;
90001fe0:	230b      	movs	r3, #11
90001fe2:	e9c4 c307 	strd	ip, r3, [r4, #28]
  hltdc.Init.AccumulatedActiveH = 283;
90001fe6:	f240 131b 	movw	r3, #283	; 0x11b
90001fea:	e9c4 e309 	strd	lr, r3, [r4, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
90001fee:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
90001ff2:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hltdc.Init.TotalHeigh = 285;
90001ff6:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
90001ffa:	f003 fd1d 	bl	90005a38 <HAL_LTDC_Init>
90001ffe:	b100      	cbz	r0, 90002002 <main+0x26a>
	while (1)
90002000:	e7fe      	b.n	90002000 <main+0x268>
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
90002002:	f44f 7388 	mov.w	r3, #272	; 0x110
90002006:	2102      	movs	r1, #2
  pLayerCfg.WindowX1 = 480;
90002008:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
9000200c:	f44f 6580 	mov.w	r5, #1024	; 0x400
  pLayerCfg.WindowX0 = 0;
90002010:	900f      	str	r0, [sp, #60]	; 0x3c
  pLayerCfg.Backcolor.Blue = 0;
90002012:	f8ad 006c 	strh.w	r0, [sp, #108]	; 0x6c
  pLayerCfg.Backcolor.Red = 0;
90002016:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
  pLayerCfg.ImageHeight = 272;
9000201a:	931a      	str	r3, [sp, #104]	; 0x68
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
9000201c:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
  pLayerCfg.Alpha = 255;
90002020:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.Alpha0 = 0;
90002022:	e9cd 1014 	strd	r1, r0, [sp, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
90002026:	2105      	movs	r1, #5
  pLayerCfg.WindowY0 = 0;
90002028:	e9cd 2010 	strd	r2, r0, [sp, #64]	; 0x40
  pLayerCfg.ImageWidth = 480;
9000202c:	e9cd 0218 	strd	r0, r2, [sp, #96]	; 0x60
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
90002030:	e9cd 5116 	strd	r5, r1, [sp, #88]	; 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
90002034:	4602      	mov	r2, r0
90002036:	a90f      	add	r1, sp, #60	; 0x3c
90002038:	4620      	mov	r0, r4
9000203a:	f003 fdc8 	bl	90005bce <HAL_LTDC_ConfigLayer>
9000203e:	4603      	mov	r3, r0
90002040:	b100      	cbz	r0, 90002044 <main+0x2ac>
	while (1)
90002042:	e7fe      	b.n	90002042 <main+0x2aa>
  huart1.Instance = USART1;
90002044:	4815      	ldr	r0, [pc, #84]	; (9000209c <main+0x304>)
  huart1.Init.BaudRate = 115200;
90002046:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
9000204a:	4c15      	ldr	r4, [pc, #84]	; (900020a0 <main+0x308>)
  huart1.Init.Parity = UART_PARITY_NONE;
9000204c:	6103      	str	r3, [r0, #16]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
9000204e:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.Init.BaudRate = 115200;
90002050:	e9c0 4200 	strd	r4, r2, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
90002054:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
90002056:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
9000205a:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
9000205e:	e9c0 3307 	strd	r3, r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
90002062:	f005 f860 	bl	90007126 <HAL_UART_Init>
90002066:	b1e8      	cbz	r0, 900020a4 <main+0x30c>
	while (1)
90002068:	e7fe      	b.n	90002068 <main+0x2d0>
9000206a:	bf00      	nop
9000206c:	e000ed00 	.word	0xe000ed00
90002070:	40023800 	.word	0x40023800
90002074:	40022800 	.word	0x40022800
90002078:	40022000 	.word	0x40022000
9000207c:	20027030 	.word	0x20027030
90002080:	40023000 	.word	0x40023000
90002084:	200271e8 	.word	0x200271e8
90002088:	4002b000 	.word	0x4002b000
9000208c:	20027228 	.word	0x20027228
90002090:	a0000140 	.word	0xa0000140
90002094:	20027054 	.word	0x20027054
90002098:	40016800 	.word	0x40016800
9000209c:	20027100 	.word	0x20027100
900020a0:	40011000 	.word	0x40011000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
900020a4:	2210      	movs	r2, #16
900020a6:	2100      	movs	r1, #0
900020a8:	a80f      	add	r0, sp, #60	; 0x3c
  htim1.Instance = TIM1;
900020aa:	4c1f      	ldr	r4, [pc, #124]	; (90002128 <main+0x390>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
900020ac:	f026 fe70 	bl	90028d90 <memset>
  htim1.Init.Prescaler = 215;
900020b0:	22d7      	movs	r2, #215	; 0xd7
900020b2:	491e      	ldr	r1, [pc, #120]	; (9000212c <main+0x394>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
900020b4:	2300      	movs	r3, #0
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
900020b6:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
900020b8:	930e      	str	r3, [sp, #56]	; 0x38
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
900020ba:	60a3      	str	r3, [r4, #8]
  htim1.Init.Prescaler = 215;
900020bc:	e9c4 1200 	strd	r1, r2, [r4]
  htim1.Init.Period = 65535;
900020c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
900020c4:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
900020c8:	e9c4 2303 	strd	r2, r3, [r4, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
900020cc:	e9c4 3305 	strd	r3, r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
900020d0:	f004 fd08 	bl	90006ae4 <HAL_TIM_Base_Init>
900020d4:	b100      	cbz	r0, 900020d8 <main+0x340>
	while (1)
900020d6:	e7fe      	b.n	900020d6 <main+0x33e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
900020d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
900020dc:	a90f      	add	r1, sp, #60	; 0x3c
900020de:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
900020e0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
900020e2:	f004 fd39 	bl	90006b58 <HAL_TIM_ConfigClockSource>
900020e6:	b100      	cbz	r0, 900020ea <main+0x352>
	while (1)
900020e8:	e7fe      	b.n	900020e8 <main+0x350>
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
900020ea:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
900020ee:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
900020f0:	a90c      	add	r1, sp, #48	; 0x30
900020f2:	4620      	mov	r0, r4
900020f4:	f004 fdc4 	bl	90006c80 <HAL_TIMEx_MasterConfigSynchronization>
900020f8:	4605      	mov	r5, r0
900020fa:	b100      	cbz	r0, 900020fe <main+0x366>
	while (1)
900020fc:	e7fe      	b.n	900020fc <main+0x364>
  MX_TouchGFX_Init();
900020fe:	f7fe ff67 	bl	90000fd0 <MX_TouchGFX_Init>
	HAL_TIM_Base_Start_IT(&htim1);
90002102:	4620      	mov	r0, r4
90002104:	f004 fb96 	bl	90006834 <HAL_TIM_Base_Start_IT>
  osKernelInitialize();
90002108:	f005 f8dc 	bl	900072c4 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
9000210c:	4a08      	ldr	r2, [pc, #32]	; (90002130 <main+0x398>)
9000210e:	4629      	mov	r1, r5
90002110:	4808      	ldr	r0, [pc, #32]	; (90002134 <main+0x39c>)
90002112:	f005 f925 	bl	90007360 <osThreadNew>
90002116:	4b08      	ldr	r3, [pc, #32]	; (90002138 <main+0x3a0>)
90002118:	6018      	str	r0, [r3, #0]
	MX_LWIP_Init();
9000211a:	f7fe fc83 	bl	90000a24 <MX_LWIP_Init>
	tcp_server_init();
9000211e:	f7ff fdbf 	bl	90001ca0 <tcp_server_init>
  osKernelStart();
90002122:	f005 f8e9 	bl	900072f8 <osKernelStart>
	while (1) {
90002126:	e7fe      	b.n	90002126 <main+0x38e>
90002128:	20027184 	.word	0x20027184
9000212c:	40010000 	.word	0x40010000
90002130:	9002a89c 	.word	0x9002a89c
90002134:	90000fd5 	.word	0x90000fd5
90002138:	200270fc 	.word	0x200270fc

9000213c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
9000213c:	6802      	ldr	r2, [r0, #0]
9000213e:	4b03      	ldr	r3, [pc, #12]	; (9000214c <HAL_TIM_PeriodElapsedCallback+0x10>)
90002140:	429a      	cmp	r2, r3
90002142:	d101      	bne.n	90002148 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
90002144:	f002 b828 	b.w	90004198 <HAL_IncTick>
}
90002148:	4770      	bx	lr
9000214a:	bf00      	nop
9000214c:	40001000 	.word	0x40001000

90002150 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
90002150:	4b0d      	ldr	r3, [pc, #52]	; (90002188 <HAL_MspInit+0x38>)
{
90002152:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
90002154:	210f      	movs	r1, #15
90002156:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
9000215a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
9000215c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
90002160:	641a      	str	r2, [r3, #64]	; 0x40
90002162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90002164:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
90002168:	9200      	str	r2, [sp, #0]
9000216a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
9000216c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
9000216e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
90002172:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
90002174:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90002176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90002178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
9000217c:	9301      	str	r3, [sp, #4]
9000217e:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
90002180:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
90002182:	f002 b83f 	b.w	90004204 <HAL_NVIC_SetPriority>
90002186:	bf00      	nop
90002188:	40023800 	.word	0x40023800

9000218c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
9000218c:	6802      	ldr	r2, [r0, #0]
{
9000218e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
90002190:	4b08      	ldr	r3, [pc, #32]	; (900021b4 <HAL_CRC_MspInit+0x28>)
90002192:	429a      	cmp	r2, r3
90002194:	d10b      	bne.n	900021ae <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
90002196:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
9000219a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
9000219e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
900021a2:	631a      	str	r2, [r3, #48]	; 0x30
900021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900021a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
900021aa:	9301      	str	r3, [sp, #4]
900021ac:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
900021ae:	b002      	add	sp, #8
900021b0:	4770      	bx	lr
900021b2:	bf00      	nop
900021b4:	40023000 	.word	0x40023000

900021b8 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
900021b8:	4b0e      	ldr	r3, [pc, #56]	; (900021f4 <HAL_DMA2D_MspInit+0x3c>)
{
900021ba:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
900021bc:	6802      	ldr	r2, [r0, #0]
900021be:	429a      	cmp	r2, r3
900021c0:	d115      	bne.n	900021ee <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
900021c2:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
900021c6:	2105      	movs	r1, #5
900021c8:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
900021ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900021cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
900021d0:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
900021d2:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
900021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900021d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
900021da:	9301      	str	r3, [sp, #4]
900021dc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
900021de:	f002 f811 	bl	90004204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
900021e2:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
900021e4:	b003      	add	sp, #12
900021e6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
900021ea:	f002 b83d 	b.w	90004268 <HAL_NVIC_EnableIRQ>
}
900021ee:	b003      	add	sp, #12
900021f0:	f85d fb04 	ldr.w	pc, [sp], #4
900021f4:	4002b000 	.word	0x4002b000

900021f8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
900021f8:	b570      	push	{r4, r5, r6, lr}
900021fa:	b08c      	sub	sp, #48	; 0x30
900021fc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900021fe:	2214      	movs	r2, #20
90002200:	2100      	movs	r1, #0
90002202:	a807      	add	r0, sp, #28
90002204:	f026 fdc4 	bl	90028d90 <memset>
  if(hltdc->Instance==LTDC)
90002208:	6822      	ldr	r2, [r4, #0]
9000220a:	4b3f      	ldr	r3, [pc, #252]	; (90002308 <HAL_LTDC_MspInit+0x110>)
9000220c:	429a      	cmp	r2, r3
9000220e:	d178      	bne.n	90002302 <HAL_LTDC_MspInit+0x10a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
90002210:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90002214:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90002216:	2500      	movs	r5, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90002218:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
9000221a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
9000221c:	a907      	add	r1, sp, #28
9000221e:	483b      	ldr	r0, [pc, #236]	; (9000230c <HAL_LTDC_MspInit+0x114>)
    __HAL_RCC_LTDC_CLK_ENABLE();
90002220:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
90002224:	645a      	str	r2, [r3, #68]	; 0x44
90002226:	6c5a      	ldr	r2, [r3, #68]	; 0x44
90002228:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
9000222c:	9201      	str	r2, [sp, #4]
9000222e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
90002230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002232:	f042 0210 	orr.w	r2, r2, #16
90002236:	631a      	str	r2, [r3, #48]	; 0x30
90002238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000223a:	f002 0210 	and.w	r2, r2, #16
9000223e:	9202      	str	r2, [sp, #8]
90002240:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
90002242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
90002248:	631a      	str	r2, [r3, #48]	; 0x30
9000224a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000224c:	f402 7200 	and.w	r2, r2, #512	; 0x200
90002250:	9203      	str	r2, [sp, #12]
90002252:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90002254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002256:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
9000225a:	631a      	str	r2, [r3, #48]	; 0x30
9000225c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000225e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
90002262:	9204      	str	r2, [sp, #16]
90002264:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
90002266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002268:	f042 0240 	orr.w	r2, r2, #64	; 0x40
9000226c:	631a      	str	r2, [r3, #48]	; 0x30
9000226e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90002270:	f002 0240 	and.w	r2, r2, #64	; 0x40
90002274:	9205      	str	r2, [sp, #20]
90002276:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
90002278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000227a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
9000227e:	631a      	str	r2, [r3, #48]	; 0x30
90002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90002282:	f403 7380 	and.w	r3, r3, #256	; 0x100
90002286:	9306      	str	r3, [sp, #24]
90002288:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000228a:	2310      	movs	r3, #16
9000228c:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
90002290:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90002294:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90002296:	f002 fe8f 	bl	90004fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
9000229a:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
9000229e:	a907      	add	r1, sp, #28
900022a0:	481b      	ldr	r0, [pc, #108]	; (90002310 <HAL_LTDC_MspInit+0x118>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
900022a2:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900022a4:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
900022a8:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
900022ac:	f002 fe84 	bl	90004fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
900022b0:	23f7      	movs	r3, #247	; 0xf7
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
900022b2:	a907      	add	r1, sp, #28
900022b4:	4817      	ldr	r0, [pc, #92]	; (90002314 <HAL_LTDC_MspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
900022b6:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900022b8:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
900022bc:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
900022c0:	f002 fe7a 	bl	90004fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
900022c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
900022c8:	a907      	add	r1, sp, #28
900022ca:	4813      	ldr	r0, [pc, #76]	; (90002318 <HAL_LTDC_MspInit+0x120>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900022cc:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
900022d0:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
900022d2:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
900022d6:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
900022d8:	f002 fe6e 	bl	90004fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
900022dc:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
900022e0:	a907      	add	r1, sp, #28
900022e2:	480e      	ldr	r0, [pc, #56]	; (9000231c <HAL_LTDC_MspInit+0x124>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
900022e4:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900022e6:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
900022ea:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
900022ee:	f002 fe63 	bl	90004fb8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
900022f2:	2058      	movs	r0, #88	; 0x58
900022f4:	462a      	mov	r2, r5
900022f6:	2105      	movs	r1, #5
900022f8:	f001 ff84 	bl	90004204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
900022fc:	2058      	movs	r0, #88	; 0x58
900022fe:	f001 ffb3 	bl	90004268 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
90002302:	b00c      	add	sp, #48	; 0x30
90002304:	bd70      	pop	{r4, r5, r6, pc}
90002306:	bf00      	nop
90002308:	40016800 	.word	0x40016800
9000230c:	40021000 	.word	0x40021000
90002310:	40022400 	.word	0x40022400
90002314:	40022800 	.word	0x40022800
90002318:	40021800 	.word	0x40021800
9000231c:	40022000 	.word	0x40022000

90002320 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
90002320:	4b1a      	ldr	r3, [pc, #104]	; (9000238c <HAL_TIM_Base_MspInit+0x6c>)
{
90002322:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM1)
90002324:	6802      	ldr	r2, [r0, #0]
90002326:	429a      	cmp	r2, r3
90002328:	d12d      	bne.n	90002386 <HAL_TIM_Base_MspInit+0x66>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
9000232a:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
9000232e:	2105      	movs	r1, #5
90002330:	2018      	movs	r0, #24
    __HAL_RCC_TIM1_CLK_ENABLE();
90002332:	6c5a      	ldr	r2, [r3, #68]	; 0x44
90002334:	f042 0201 	orr.w	r2, r2, #1
90002338:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
9000233a:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
9000233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000233e:	f003 0301 	and.w	r3, r3, #1
90002342:	9301      	str	r3, [sp, #4]
90002344:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
90002346:	f001 ff5d 	bl	90004204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
9000234a:	2018      	movs	r0, #24
9000234c:	f001 ff8c 	bl	90004268 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
90002350:	2200      	movs	r2, #0
90002352:	2105      	movs	r1, #5
90002354:	2019      	movs	r0, #25
90002356:	f001 ff55 	bl	90004204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
9000235a:	2019      	movs	r0, #25
9000235c:	f001 ff84 	bl	90004268 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
90002360:	2200      	movs	r2, #0
90002362:	2105      	movs	r1, #5
90002364:	201a      	movs	r0, #26
90002366:	f001 ff4d 	bl	90004204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
9000236a:	201a      	movs	r0, #26
9000236c:	f001 ff7c 	bl	90004268 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
90002370:	2200      	movs	r2, #0
90002372:	2105      	movs	r1, #5
90002374:	201b      	movs	r0, #27
90002376:	f001 ff45 	bl	90004204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
9000237a:	201b      	movs	r0, #27
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
9000237c:	b003      	add	sp, #12
9000237e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
90002382:	f001 bf71 	b.w	90004268 <HAL_NVIC_EnableIRQ>
}
90002386:	b003      	add	sp, #12
90002388:	f85d fb04 	ldr.w	pc, [sp], #4
9000238c:	40010000 	.word	0x40010000

90002390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
90002390:	b5f0      	push	{r4, r5, r6, r7, lr}
90002392:	b089      	sub	sp, #36	; 0x24
90002394:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90002396:	2214      	movs	r2, #20
90002398:	2100      	movs	r1, #0
9000239a:	a803      	add	r0, sp, #12
9000239c:	f026 fcf8 	bl	90028d90 <memset>
  if(huart->Instance==USART1)
900023a0:	6822      	ldr	r2, [r4, #0]
900023a2:	4b1d      	ldr	r3, [pc, #116]	; (90002418 <HAL_UART_MspInit+0x88>)
900023a4:	429a      	cmp	r2, r3
900023a6:	d135      	bne.n	90002414 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
900023a8:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900023ac:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900023ae:	2600      	movs	r6, #0
900023b0:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
900023b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
900023b4:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
900023b6:	a903      	add	r1, sp, #12
900023b8:	4818      	ldr	r0, [pc, #96]	; (9000241c <HAL_UART_MspInit+0x8c>)
    __HAL_RCC_USART1_CLK_ENABLE();
900023ba:	f042 0210 	orr.w	r2, r2, #16
900023be:	645a      	str	r2, [r3, #68]	; 0x44
900023c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
900023c2:	f002 0210 	and.w	r2, r2, #16
900023c6:	9200      	str	r2, [sp, #0]
900023c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
900023ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900023cc:	f042 0202 	orr.w	r2, r2, #2
900023d0:	631a      	str	r2, [r3, #48]	; 0x30
900023d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900023d4:	f002 0202 	and.w	r2, r2, #2
900023d8:	9201      	str	r2, [sp, #4]
900023da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
900023dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900023de:	f042 0201 	orr.w	r2, r2, #1
900023e2:	631a      	str	r2, [r3, #48]	; 0x30
900023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
900023e6:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
900023e8:	f003 0301 	and.w	r3, r3, #1
900023ec:	9302      	str	r3, [sp, #8]
900023ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900023f0:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900023f2:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900023f6:	e9cd 3703 	strd	r3, r7, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
900023fa:	f002 fddd 	bl	90004fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
900023fe:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90002402:	a903      	add	r1, sp, #12
90002404:	4806      	ldr	r0, [pc, #24]	; (90002420 <HAL_UART_MspInit+0x90>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
90002406:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90002408:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000240c:	e9cd 6505 	strd	r6, r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90002410:	f002 fdd2 	bl	90004fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
90002414:	b009      	add	sp, #36	; 0x24
90002416:	bdf0      	pop	{r4, r5, r6, r7, pc}
90002418:	40011000 	.word	0x40011000
9000241c:	40020400 	.word	0x40020400
90002420:	40020000 	.word	0x40020000

90002424 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
90002424:	4b2b      	ldr	r3, [pc, #172]	; (900024d4 <HAL_SDRAM_MspInit+0xb0>)
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
90002426:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FMC_Initialized) {
90002428:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
9000242a:	b087      	sub	sp, #28
  if (FMC_Initialized) {
9000242c:	2c00      	cmp	r4, #0
9000242e:	d14f      	bne.n	900024d0 <HAL_SDRAM_MspInit+0xac>
  FMC_Initialized = 1;
90002430:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90002432:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90002434:	2603      	movs	r6, #3
90002436:	250c      	movs	r5, #12
  FMC_Initialized = 1;
90002438:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
9000243a:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
9000243c:	4b26      	ldr	r3, [pc, #152]	; (900024d8 <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
9000243e:	4827      	ldr	r0, [pc, #156]	; (900024dc <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
90002440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90002442:	f042 0201 	orr.w	r2, r2, #1
90002446:	639a      	str	r2, [r3, #56]	; 0x38
90002448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000244a:	9403      	str	r4, [sp, #12]
  __HAL_RCC_FMC_CLK_ENABLE();
9000244c:	f003 0301 	and.w	r3, r3, #1
90002450:	9300      	str	r3, [sp, #0]
90002452:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90002454:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90002458:	e9cd 6504 	strd	r6, r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000245c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90002460:	f002 fdaa 	bl	90004fb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
90002464:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90002468:	a901      	add	r1, sp, #4
9000246a:	481d      	ldr	r0, [pc, #116]	; (900024e0 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
9000246c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000246e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90002472:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90002476:	f002 fd9f 	bl	90004fb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
9000247a:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
9000247e:	a901      	add	r1, sp, #4
90002480:	4818      	ldr	r0, [pc, #96]	; (900024e4 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90002482:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90002484:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90002488:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
9000248c:	f002 fd94 	bl	90004fb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
90002490:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90002494:	a901      	add	r1, sp, #4
90002496:	4814      	ldr	r0, [pc, #80]	; (900024e8 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90002498:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000249a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000249e:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
900024a2:	f002 fd89 	bl	90004fb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_2;
900024a6:	2324      	movs	r3, #36	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
900024a8:	a901      	add	r1, sp, #4
900024aa:	4810      	ldr	r0, [pc, #64]	; (900024ec <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
900024ac:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900024ae:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900024b2:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
900024b6:	f002 fd7f 	bl	90004fb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
900024ba:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
900024bc:	480c      	ldr	r0, [pc, #48]	; (900024f0 <HAL_SDRAM_MspInit+0xcc>)
900024be:	eb0d 0103 	add.w	r1, sp, r3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
900024c2:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900024c4:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900024c8:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
900024cc:	f002 fd74 	bl	90004fb8 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
900024d0:	b007      	add	sp, #28
900024d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
900024d4:	20004678 	.word	0x20004678
900024d8:	40023800 	.word	0x40023800
900024dc:	40021000 	.word	0x40021000
900024e0:	40021800 	.word	0x40021800
900024e4:	40020c00 	.word	0x40020c00
900024e8:	40021400 	.word	0x40021400
900024ec:	40021c00 	.word	0x40021c00
900024f0:	40020800 	.word	0x40020800

900024f4 <HAL_SDRAM_MspDeInit>:
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
900024f4:	b508      	push	{r3, lr}
  if (FMC_DeInitialized) {
900024f6:	4b14      	ldr	r3, [pc, #80]	; (90002548 <HAL_SDRAM_MspDeInit+0x54>)
900024f8:	681a      	ldr	r2, [r3, #0]
900024fa:	bb22      	cbnz	r2, 90002546 <HAL_SDRAM_MspDeInit+0x52>
  FMC_DeInitialized = 1;
900024fc:	2201      	movs	r2, #1
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
900024fe:	f64f 7183 	movw	r1, #65411	; 0xff83
90002502:	4812      	ldr	r0, [pc, #72]	; (9000254c <HAL_SDRAM_MspDeInit+0x58>)
  FMC_DeInitialized = 1;
90002504:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
90002506:	4a12      	ldr	r2, [pc, #72]	; (90002550 <HAL_SDRAM_MspDeInit+0x5c>)
90002508:	6b93      	ldr	r3, [r2, #56]	; 0x38
9000250a:	f023 0301 	bic.w	r3, r3, #1
9000250e:	6393      	str	r3, [r2, #56]	; 0x38
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
90002510:	f002 fe38 	bl	90005184 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
90002514:	f248 1133 	movw	r1, #33075	; 0x8133
90002518:	480e      	ldr	r0, [pc, #56]	; (90002554 <HAL_SDRAM_MspDeInit+0x60>)
9000251a:	f002 fe33 	bl	90005184 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
9000251e:	f24c 7103 	movw	r1, #50947	; 0xc703
90002522:	480d      	ldr	r0, [pc, #52]	; (90002558 <HAL_SDRAM_MspDeInit+0x64>)
90002524:	f002 fe2e 	bl	90005184 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
90002528:	f64f 013f 	movw	r1, #63551	; 0xf83f
9000252c:	480b      	ldr	r0, [pc, #44]	; (9000255c <HAL_SDRAM_MspDeInit+0x68>)
9000252e:	f002 fe29 	bl	90005184 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_2);
90002532:	2124      	movs	r1, #36	; 0x24
90002534:	480a      	ldr	r0, [pc, #40]	; (90002560 <HAL_SDRAM_MspDeInit+0x6c>)
90002536:	f002 fe25 	bl	90005184 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2);
9000253a:	2104      	movs	r1, #4
9000253c:	4809      	ldr	r0, [pc, #36]	; (90002564 <HAL_SDRAM_MspDeInit+0x70>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
9000253e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2);
90002542:	f002 be1f 	b.w	90005184 <HAL_GPIO_DeInit>
}
90002546:	bd08      	pop	{r3, pc}
90002548:	20004674 	.word	0x20004674
9000254c:	40021000 	.word	0x40021000
90002550:	40023800 	.word	0x40023800
90002554:	40021800 	.word	0x40021800
90002558:	40020c00 	.word	0x40020c00
9000255c:	40021400 	.word	0x40021400
90002560:	40021c00 	.word	0x40021c00
90002564:	40020800 	.word	0x40020800

90002568 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90002568:	b510      	push	{r4, lr}
9000256a:	4601      	mov	r1, r0
9000256c:	b088      	sub	sp, #32
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
9000256e:	2200      	movs	r2, #0
90002570:	2036      	movs	r0, #54	; 0x36
90002572:	f001 fe47 	bl	90004204 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
90002576:	2036      	movs	r0, #54	; 0x36
90002578:	f001 fe76 	bl	90004268 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
9000257c:	4b14      	ldr	r3, [pc, #80]	; (900025d0 <HAL_InitTick+0x68>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
9000257e:	a901      	add	r1, sp, #4
90002580:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
90002582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
90002584:	4c13      	ldr	r4, [pc, #76]	; (900025d4 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
90002586:	f042 0210 	orr.w	r2, r2, #16
9000258a:	641a      	str	r2, [r3, #64]	; 0x40
9000258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000258e:	f003 0310 	and.w	r3, r3, #16
90002592:	9302      	str	r3, [sp, #8]
90002594:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90002596:	f003 fe4f 	bl	90006238 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
9000259a:	f003 fe2d 	bl	900061f8 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
9000259e:	4b0e      	ldr	r3, [pc, #56]	; (900025d8 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
900025a0:	0040      	lsls	r0, r0, #1
  htim6.Instance = TIM6;
900025a2:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
900025a4:	f240 33e7 	movw	r3, #999	; 0x3e7
900025a8:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
900025aa:	4b0c      	ldr	r3, [pc, #48]	; (900025dc <HAL_InitTick+0x74>)
900025ac:	fbb0 f0f3 	udiv	r0, r0, r3
900025b0:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
900025b2:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
900025b4:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
900025b6:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
900025b8:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
900025ba:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
900025bc:	f004 fa92 	bl	90006ae4 <HAL_TIM_Base_Init>
900025c0:	b920      	cbnz	r0, 900025cc <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
900025c2:	4620      	mov	r0, r4
900025c4:	f004 f936 	bl	90006834 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
900025c8:	b008      	add	sp, #32
900025ca:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
900025cc:	2001      	movs	r0, #1
900025ce:	e7fb      	b.n	900025c8 <HAL_InitTick+0x60>
900025d0:	40023800 	.word	0x40023800
900025d4:	20027260 	.word	0x20027260
900025d8:	40001000 	.word	0x40001000
900025dc:	000f4240 	.word	0x000f4240

900025e0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
900025e0:	4770      	bx	lr

900025e2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
900025e2:	e7fe      	b.n	900025e2 <HardFault_Handler>

900025e4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
900025e4:	e7fe      	b.n	900025e4 <MemManage_Handler>

900025e6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
900025e6:	e7fe      	b.n	900025e6 <BusFault_Handler>

900025e8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
900025e8:	e7fe      	b.n	900025e8 <UsageFault_Handler>

900025ea <DebugMon_Handler>:
900025ea:	4770      	bx	lr

900025ec <TIM1_BRK_TIM9_IRQHandler>:
void TIM1_BRK_TIM9_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
900025ec:	4801      	ldr	r0, [pc, #4]	; (900025f4 <TIM1_BRK_TIM9_IRQHandler+0x8>)
900025ee:	f004 b963 	b.w	900068b8 <HAL_TIM_IRQHandler>
900025f2:	bf00      	nop
900025f4:	20027184 	.word	0x20027184

900025f8 <TIM1_UP_TIM10_IRQHandler>:
900025f8:	f7ff bff8 	b.w	900025ec <TIM1_BRK_TIM9_IRQHandler>

900025fc <TIM1_TRG_COM_TIM11_IRQHandler>:
900025fc:	f7ff bff6 	b.w	900025ec <TIM1_BRK_TIM9_IRQHandler>

90002600 <TIM1_CC_IRQHandler>:
90002600:	f7ff bff4 	b.w	900025ec <TIM1_BRK_TIM9_IRQHandler>

90002604 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
90002604:	4801      	ldr	r0, [pc, #4]	; (9000260c <TIM6_DAC_IRQHandler+0x8>)
90002606:	f004 b957 	b.w	900068b8 <HAL_TIM_IRQHandler>
9000260a:	bf00      	nop
9000260c:	20027260 	.word	0x20027260

90002610 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
90002610:	4801      	ldr	r0, [pc, #4]	; (90002618 <ETH_IRQHandler+0x8>)
90002612:	f002 ba26 	b.w	90004a62 <HAL_ETH_IRQHandler>
90002616:	bf00      	nop
90002618:	20026fe8 	.word	0x20026fe8

9000261c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
9000261c:	4801      	ldr	r0, [pc, #4]	; (90002624 <LTDC_IRQHandler+0x8>)
9000261e:	f003 ba79 	b.w	90005b14 <HAL_LTDC_IRQHandler>
90002622:	bf00      	nop
90002624:	20027054 	.word	0x20027054

90002628 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
90002628:	4801      	ldr	r0, [pc, #4]	; (90002630 <DMA2D_IRQHandler+0x8>)
9000262a:	f001 bf89 	b.w	90004540 <HAL_DMA2D_IRQHandler>
9000262e:	bf00      	nop
90002630:	200271e8 	.word	0x200271e8

90002634 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
90002634:	2001      	movs	r0, #1
90002636:	4770      	bx	lr

90002638 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
90002638:	4b02      	ldr	r3, [pc, #8]	; (90002644 <_kill+0xc>)
9000263a:	2216      	movs	r2, #22
	return -1;
}
9000263c:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
90002640:	601a      	str	r2, [r3, #0]
}
90002642:	4770      	bx	lr
90002644:	2002cb60 	.word	0x2002cb60

90002648 <_exit>:
	errno = EINVAL;
90002648:	4b01      	ldr	r3, [pc, #4]	; (90002650 <_exit+0x8>)
9000264a:	2216      	movs	r2, #22
9000264c:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
9000264e:	e7fe      	b.n	9000264e <_exit+0x6>
90002650:	2002cb60 	.word	0x2002cb60

90002654 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90002654:	b570      	push	{r4, r5, r6, lr}
90002656:	460e      	mov	r6, r1
90002658:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
9000265a:	2500      	movs	r5, #0
9000265c:	42a5      	cmp	r5, r4
9000265e:	db01      	blt.n	90002664 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
90002660:	4620      	mov	r0, r4
90002662:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
90002664:	f3af 8000 	nop.w
90002668:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
9000266a:	3501      	adds	r5, #1
9000266c:	e7f6      	b.n	9000265c <_read+0x8>

9000266e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
9000266e:	b570      	push	{r4, r5, r6, lr}
90002670:	460e      	mov	r6, r1
90002672:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90002674:	2500      	movs	r5, #0
90002676:	42a5      	cmp	r5, r4
90002678:	db01      	blt.n	9000267e <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
9000267a:	4620      	mov	r0, r4
9000267c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
9000267e:	5d70      	ldrb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90002680:	3501      	adds	r5, #1
		__io_putchar(*ptr++);
90002682:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90002686:	e7f6      	b.n	90002676 <_write+0x8>

90002688 <_close>:

int _close(int file)
{
	return -1;
}
90002688:	f04f 30ff 	mov.w	r0, #4294967295
9000268c:	4770      	bx	lr

9000268e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
9000268e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
90002692:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
90002694:	604b      	str	r3, [r1, #4]
}
90002696:	4770      	bx	lr

90002698 <_isatty>:

int _isatty(int file)
{
	return 1;
}
90002698:	2001      	movs	r0, #1
9000269a:	4770      	bx	lr

9000269c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
9000269c:	2000      	movs	r0, #0
9000269e:	4770      	bx	lr

900026a0 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
900026a0:	4b09      	ldr	r3, [pc, #36]	; (900026c8 <_sbrk+0x28>)
{
900026a2:	4602      	mov	r2, r0
	if (heap_end == 0)
900026a4:	6819      	ldr	r1, [r3, #0]
900026a6:	b909      	cbnz	r1, 900026ac <_sbrk+0xc>
		heap_end = &end;
900026a8:	4908      	ldr	r1, [pc, #32]	; (900026cc <_sbrk+0x2c>)
900026aa:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
900026ac:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
900026ae:	4669      	mov	r1, sp
900026b0:	4402      	add	r2, r0
900026b2:	428a      	cmp	r2, r1
	{
		errno = ENOMEM;
900026b4:	bf83      	ittte	hi
900026b6:	4b06      	ldrhi	r3, [pc, #24]	; (900026d0 <_sbrk+0x30>)
900026b8:	220c      	movhi	r2, #12
		return (caddr_t) -1;
900026ba:	f04f 30ff 	movhi.w	r0, #4294967295
	}

	heap_end += incr;
900026be:	601a      	strls	r2, [r3, #0]
		errno = ENOMEM;
900026c0:	bf88      	it	hi
900026c2:	601a      	strhi	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
900026c4:	4770      	bx	lr
900026c6:	bf00      	nop
900026c8:	2000467c 	.word	0x2000467c
900026cc:	2002cb98 	.word	0x2002cb98
900026d0:	2002cb60 	.word	0x2002cb60

900026d4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
900026d4:	4770      	bx	lr

900026d6 <_ZN23ApplicationFontProviderD0Ev>:
900026d6:	b510      	push	{r4, lr}
900026d8:	4604      	mov	r4, r0
900026da:	2104      	movs	r1, #4
900026dc:	f025 fcce 	bl	9002807c <_ZdlPvj>
900026e0:	4620      	mov	r0, r4
900026e2:	bd10      	pop	{r4, pc}

900026e4 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
900026e4:	2901      	cmp	r1, #1
{
900026e6:	b508      	push	{r3, lr}
    switch (typography)
900026e8:	d006      	beq.n	900026f8 <_ZN23ApplicationFontProvider7getFontEt+0x14>
900026ea:	2902      	cmp	r1, #2
900026ec:	d008      	beq.n	90002700 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
900026ee:	b959      	cbnz	r1, 90002708 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
900026f0:	f000 ff9a 	bl	90003628 <_ZN17TypedTextDatabase8getFontsEv>
900026f4:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
900026f6:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
900026f8:	f000 ff96 	bl	90003628 <_ZN17TypedTextDatabase8getFontsEv>
900026fc:	6840      	ldr	r0, [r0, #4]
900026fe:	e7fa      	b.n	900026f6 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
90002700:	f000 ff92 	bl	90003628 <_ZN17TypedTextDatabase8getFontsEv>
90002704:	6880      	ldr	r0, [r0, #8]
90002706:	e7f6      	b.n	900026f6 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
90002708:	2000      	movs	r0, #0
9000270a:	e7f4      	b.n	900026f6 <_ZN23ApplicationFontProvider7getFontEt+0x12>

9000270c <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
9000270c:	4800      	ldr	r0, [pc, #0]	; (90002710 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
9000270e:	4770      	bx	lr
90002710:	9002a8d4 	.word	0x9002a8d4

90002714 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
90002714:	2006      	movs	r0, #6
90002716:	4770      	bx	lr

90002718 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
90002718:	b513      	push	{r0, r1, r4, lr}
9000271a:	2400      	movs	r4, #0
    {
        if (unicode == 0)
9000271c:	b151      	cbz	r1, 90002734 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
9000271e:	6803      	ldr	r3, [r0, #0]
90002720:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
90002722:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
90002724:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90002728:	689c      	ldr	r4, [r3, #8]
9000272a:	f10d 0303 	add.w	r3, sp, #3
9000272e:	47a0      	blx	r4
        return glyph;
    }
90002730:	b002      	add	sp, #8
90002732:	bd10      	pop	{r4, pc}
            return 0;
90002734:	4608      	mov	r0, r1
90002736:	e7fb      	b.n	90002730 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

90002738 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
90002738:	8940      	ldrh	r0, [r0, #10]
9000273a:	4770      	bx	lr

9000273c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
9000273c:	8980      	ldrh	r0, [r0, #12]
9000273e:	4770      	bx	lr

90002740 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
90002740:	8880      	ldrh	r0, [r0, #4]
90002742:	4770      	bx	lr

90002744 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
90002744:	7983      	ldrb	r3, [r0, #6]
90002746:	8880      	ldrh	r0, [r0, #4]
90002748:	4418      	add	r0, r3
    }
9000274a:	b280      	uxth	r0, r0
9000274c:	4770      	bx	lr

9000274e <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
9000274e:	79c0      	ldrb	r0, [r0, #7]
    }
90002750:	f000 007f 	and.w	r0, r0, #127	; 0x7f
90002754:	4770      	bx	lr

90002756 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
90002756:	79c0      	ldrb	r0, [r0, #7]
    }
90002758:	09c0      	lsrs	r0, r0, #7
9000275a:	4770      	bx	lr

9000275c <_ZN8touchgfx9TypedTextD1Ev>:
    }
9000275c:	4770      	bx	lr

9000275e <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
9000275e:	b510      	push	{r4, lr}
90002760:	4604      	mov	r4, r0
    }
90002762:	2108      	movs	r1, #8
90002764:	f025 fc8a 	bl	9002807c <_ZdlPvj>
90002768:	4620      	mov	r0, r4
9000276a:	bd10      	pop	{r4, pc}

9000276c <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
    }
9000276c:	4770      	bx	lr

9000276e <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
9000276e:	f500 7396 	add.w	r3, r0, #300	; 0x12c
90002772:	6808      	ldr	r0, [r1, #0]
90002774:	6849      	ldr	r1, [r1, #4]
90002776:	c303      	stmia	r3!, {r0, r1}
    };
90002778:	4770      	bx	lr

9000277a <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
9000277a:	4770      	bx	lr

9000277c <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
9000277c:	4770      	bx	lr

9000277e <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
9000277e:	6041      	str	r1, [r0, #4]
    }
90002780:	4770      	bx	lr

90002782 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
90002782:	4770      	bx	lr

90002784 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
90002784:	2301      	movs	r3, #1
90002786:	7203      	strb	r3, [r0, #8]
    }
90002788:	4770      	bx	lr

9000278a <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
9000278a:	4770      	bx	lr

9000278c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
9000278c:	4770      	bx	lr

9000278e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
9000278e:	b410      	push	{r4}
    {
        (pobject->*pmemfun_0)();
90002790:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
90002792:	4603      	mov	r3, r0
        (pobject->*pmemfun_0)();
90002794:	68c2      	ldr	r2, [r0, #12]
90002796:	689b      	ldr	r3, [r3, #8]
90002798:	1054      	asrs	r4, r2, #1
9000279a:	eb01 0062 	add.w	r0, r1, r2, asr #1
9000279e:	07d2      	lsls	r2, r2, #31
900027a0:	bf48      	it	mi
900027a2:	590a      	ldrmi	r2, [r1, r4]
    }
900027a4:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun_0)();
900027a8:	bf48      	it	mi
900027aa:	58d3      	ldrmi	r3, [r2, r3]
900027ac:	4718      	bx	r3

900027ae <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun_0 != 0);
900027ae:	6843      	ldr	r3, [r0, #4]
900027b0:	b12b      	cbz	r3, 900027be <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
900027b2:	6883      	ldr	r3, [r0, #8]
900027b4:	b92b      	cbnz	r3, 900027c2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
900027b6:	68c0      	ldr	r0, [r0, #12]
900027b8:	f000 0001 	and.w	r0, r0, #1
900027bc:	4770      	bx	lr
900027be:	4618      	mov	r0, r3
900027c0:	4770      	bx	lr
900027c2:	2001      	movs	r0, #1
    }
900027c4:	4770      	bx	lr

900027c6 <_ZN8touchgfx12NoTransitionD0Ev>:
900027c6:	b510      	push	{r4, lr}
900027c8:	4604      	mov	r4, r0
900027ca:	210c      	movs	r1, #12
900027cc:	f025 fc56 	bl	9002807c <_ZdlPvj>
900027d0:	4620      	mov	r0, r4
900027d2:	bd10      	pop	{r4, pc}

900027d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
900027d4:	b510      	push	{r4, lr}
900027d6:	4604      	mov	r4, r0
900027d8:	2110      	movs	r1, #16
900027da:	f025 fc4f 	bl	9002807c <_ZdlPvj>
900027de:	4620      	mov	r0, r4
900027e0:	bd10      	pop	{r4, pc}

900027e2 <_ZN23FrontendApplicationBaseD0Ev>:
900027e2:	b510      	push	{r4, lr}
900027e4:	4604      	mov	r4, r0
900027e6:	f44f 71ac 	mov.w	r1, #344	; 0x158
900027ea:	f025 fc47 	bl	9002807c <_ZdlPvj>
900027ee:	4620      	mov	r0, r4
900027f0:	bd10      	pop	{r4, pc}

900027f2 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
900027f2:	b510      	push	{r4, lr}
        Application::getInstance()->draw();
900027f4:	f016 fbd8 	bl	90018fa8 <_ZN8touchgfx11Application11getInstanceEv>
900027f8:	6803      	ldr	r3, [r0, #0]
    }
900027fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->draw();
900027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90002800:	4718      	bx	r3

90002802 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
90002802:	b510      	push	{r4, lr}
90002804:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
90002806:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
9000280a:	b158      	cbz	r0, 90002824 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
9000280c:	6803      	ldr	r3, [r0, #0]
9000280e:	68db      	ldr	r3, [r3, #12]
90002810:	4798      	blx	r3
90002812:	b138      	cbz	r0, 90002824 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
90002814:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
90002818:	6803      	ldr	r3, [r0, #0]
9000281a:	689b      	ldr	r3, [r3, #8]
9000281c:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
9000281e:	2300      	movs	r3, #0
90002820:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
90002824:	bd10      	pop	{r4, pc}
	...

90002828 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
90002828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000282a:	4604      	mov	r4, r0
9000282c:	4617      	mov	r7, r2
9000282e:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
90002830:	f016 fc24 	bl	9001907c <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
90002834:	4b10      	ldr	r3, [pc, #64]	; (90002878 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
90002836:	2500      	movs	r5, #0
        instance = this;
90002838:	601c      	str	r4, [r3, #0]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
9000283a:	4629      	mov	r1, r5
      model(m)
9000283c:	4b0f      	ldr	r3, [pc, #60]	; (9000287c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
9000283e:	e9c4 7654 	strd	r7, r6, [r4, #336]	; 0x150
        return instance;
90002842:	4e0f      	ldr	r6, [pc, #60]	; (90002880 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
90002844:	6023      	str	r3, [r4, #0]
90002846:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun_0(0)
90002848:	4b0e      	ldr	r3, [pc, #56]	; (90002884 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
9000284a:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
9000284e:	e9c4 3550 	strd	r3, r5, [r4, #320]	; 0x140
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
90002852:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
90002854:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
90002858:	689b      	ldr	r3, [r3, #8]
9000285a:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
9000285c:	4628      	mov	r0, r5
9000285e:	f000 fe97 	bl	90003590 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
90002862:	6833      	ldr	r3, [r6, #0]
90002864:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90002868:	b10a      	cbz	r2, 9000286e <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
9000286a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
9000286c:	b900      	cbnz	r0, 90002870 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
            return instance->lcdRef;
9000286e:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
90002870:	f01e fabd 	bl	90020dee <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
90002874:	4620      	mov	r0, r4
90002876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90002878:	20026d28 	.word	0x20026d28
9000287c:	9002ac9c 	.word	0x9002ac9c
90002880:	20026cdc 	.word	0x20026cdc
90002884:	9002ac84 	.word	0x9002ac84

90002888 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90002888:	4b06      	ldr	r3, [pc, #24]	; (900028a4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
9000288a:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
9000288e:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
90002892:	2300      	movs	r3, #0
90002894:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
90002898:	f500 73a0 	add.w	r3, r0, #320	; 0x140
9000289c:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
900028a0:	4770      	bx	lr
900028a2:	bf00      	nop
900028a4:	900029e9 	.word	0x900029e9

900028a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
900028a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
900028ac:	4607      	mov	r7, r0
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
900028ae:	6890      	ldr	r0, [r2, #8]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
900028b0:	4699      	mov	r9, r3
900028b2:	4688      	mov	r8, r1
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
900028b4:	6803      	ldr	r3, [r0, #0]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
900028b6:	4614      	mov	r4, r2
900028b8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
900028bc:	6a1b      	ldr	r3, [r3, #32]
900028be:	4798      	blx	r3
900028c0:	f240 539b 	movw	r3, #1435	; 0x59b
900028c4:	4298      	cmp	r0, r3
900028c6:	d805      	bhi.n	900028d4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x2c>
900028c8:	4b41      	ldr	r3, [pc, #260]	; (900029d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>)
900028ca:	21a7      	movs	r1, #167	; 0xa7
900028cc:	4a41      	ldr	r2, [pc, #260]	; (900029d4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
900028ce:	4842      	ldr	r0, [pc, #264]	; (900029d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>)
900028d0:	f026 f9b0 	bl	90028c34 <__assert_func>
900028d4:	6860      	ldr	r0, [r4, #4]
900028d6:	6803      	ldr	r3, [r0, #0]
900028d8:	6a1b      	ldr	r3, [r3, #32]
900028da:	4798      	blx	r3
900028dc:	280f      	cmp	r0, #15
900028de:	d803      	bhi.n	900028e8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x40>
900028e0:	4b3e      	ldr	r3, [pc, #248]	; (900029dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
900028e2:	21a8      	movs	r1, #168	; 0xa8
900028e4:	4a3b      	ldr	r2, [pc, #236]	; (900029d4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
900028e6:	e7f2      	b.n	900028ce <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x26>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
900028e8:	68e0      	ldr	r0, [r4, #12]
900028ea:	6803      	ldr	r3, [r0, #0]
900028ec:	6a1b      	ldr	r3, [r3, #32]
900028ee:	4798      	blx	r3
900028f0:	280b      	cmp	r0, #11
900028f2:	d803      	bhi.n	900028fc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x54>
900028f4:	4b3a      	ldr	r3, [pc, #232]	; (900029e0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
900028f6:	21a9      	movs	r1, #169	; 0xa9
900028f8:	4a36      	ldr	r2, [pc, #216]	; (900029d4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
900028fa:	e7e8      	b.n	900028ce <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x26>
    Application::getInstance()->clearAllTimerWidgets();
900028fc:	f016 fb54 	bl	90018fa8 <_ZN8touchgfx11Application11getInstanceEv>
90002900:	f016 fba0 	bl	90019044 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
90002904:	f8d9 0000 	ldr.w	r0, [r9]
90002908:	b110      	cbz	r0, 90002910 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x68>
        (*currentTrans)->tearDown();
9000290a:	6803      	ldr	r3, [r0, #0]
9000290c:	68db      	ldr	r3, [r3, #12]
9000290e:	4798      	blx	r3
    if (*currentTrans)
90002910:	f8d9 0000 	ldr.w	r0, [r9]
90002914:	b110      	cbz	r0, 9000291c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x74>
        (*currentTrans)->~Transition();
90002916:	6803      	ldr	r3, [r0, #0]
90002918:	681b      	ldr	r3, [r3, #0]
9000291a:	4798      	blx	r3
    if (*currentScreen)
9000291c:	6838      	ldr	r0, [r7, #0]
9000291e:	b110      	cbz	r0, 90002926 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
        (*currentScreen)->tearDownScreen();
90002920:	6803      	ldr	r3, [r0, #0]
90002922:	695b      	ldr	r3, [r3, #20]
90002924:	4798      	blx	r3
    if (*currentPresenter)
90002926:	f8d8 0000 	ldr.w	r0, [r8]
9000292a:	b110      	cbz	r0, 90002932 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x8a>
        (*currentPresenter)->deactivate();
9000292c:	6803      	ldr	r3, [r0, #0]
9000292e:	685b      	ldr	r3, [r3, #4]
90002930:	4798      	blx	r3
    if (*currentScreen)
90002932:	6838      	ldr	r0, [r7, #0]
90002934:	b110      	cbz	r0, 9000293c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x94>
        (*currentScreen)->~Screen();
90002936:	6803      	ldr	r3, [r0, #0]
90002938:	681b      	ldr	r3, [r3, #0]
9000293a:	4798      	blx	r3
    if (*currentPresenter)
9000293c:	f8d8 0000 	ldr.w	r0, [r8]
90002940:	b110      	cbz	r0, 90002948 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xa0>
        (*currentPresenter)->~Presenter();
90002942:	6803      	ldr	r3, [r0, #0]
90002944:	689b      	ldr	r3, [r3, #8]
90002946:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
90002948:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
9000294a:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
9000294c:	f04f 0b00 	mov.w	fp, #0
90002950:	6803      	ldr	r3, [r0, #0]
90002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002954:	4798      	blx	r3
90002956:	4b23      	ldr	r3, [pc, #140]	; (900029e4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
90002958:	4605      	mov	r5, r0
9000295a:	f8c0 b004 	str.w	fp, [r0, #4]
9000295e:	6003      	str	r3, [r0, #0]
90002960:	4659      	mov	r1, fp
90002962:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
90002966:	68a0      	ldr	r0, [r4, #8]
90002968:	6803      	ldr	r3, [r0, #0]
9000296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000296c:	4798      	blx	r3
9000296e:	4606      	mov	r6, r0
90002970:	f000 fefa 	bl	90003768 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
90002974:	6860      	ldr	r0, [r4, #4]
90002976:	4659      	mov	r1, fp
90002978:	6803      	ldr	r3, [r0, #0]
9000297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000297c:	4798      	blx	r3
9000297e:	4604      	mov	r4, r0
90002980:	4631      	mov	r1, r6
90002982:	f000 fe93 	bl	900036ac <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
90002986:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
9000298a:	f8c8 4000 	str.w	r4, [r8]
    *currentScreen = newScreen;
9000298e:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
90002990:	b1e4      	cbz	r4, 900029cc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x124>
90002992:	1d23      	adds	r3, r4, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
90002994:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
90002998:	4630      	mov	r0, r6
9000299a:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
9000299c:	f8c4 a008 	str.w	sl, [r4, #8]
900029a0:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
    {
        this->presenter = &presenter;
900029a2:	63f4      	str	r4, [r6, #60]	; 0x3c
900029a4:	4798      	blx	r3
    newPresenter->activate();
900029a6:	6823      	ldr	r3, [r4, #0]
900029a8:	4620      	mov	r0, r4
900029aa:	681b      	ldr	r3, [r3, #0]
900029ac:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
900029ae:	4629      	mov	r1, r5
900029b0:	4630      	mov	r0, r6
900029b2:	f017 ff86 	bl	9001a8c2 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
900029b6:	682b      	ldr	r3, [r5, #0]
900029b8:	4628      	mov	r0, r5
900029ba:	691b      	ldr	r3, [r3, #16]
900029bc:	4798      	blx	r3
    newTransition->invalidate();
900029be:	682b      	ldr	r3, [r5, #0]
900029c0:	4628      	mov	r0, r5
900029c2:	695b      	ldr	r3, [r3, #20]
900029c4:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
900029c6:	4620      	mov	r0, r4
900029c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    model->bind(newPresenter);
900029cc:	4623      	mov	r3, r4
900029ce:	e7e1      	b.n	90002994 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xec>
900029d0:	9002a95c 	.word	0x9002a95c
900029d4:	9002a9ea 	.word	0x9002a9ea
900029d8:	9002aaee 	.word	0x9002aaee
900029dc:	9002ab35 	.word	0x9002ab35
900029e0:	9002abd8 	.word	0x9002abd8
900029e4:	9002ace0 	.word	0x9002ace0

900029e8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
900029e8:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
{
900029ec:	b507      	push	{r0, r1, r2, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
900029ee:	f500 719c 	add.w	r1, r0, #312	; 0x138
900029f2:	9300      	str	r3, [sp, #0]
900029f4:	4b04      	ldr	r3, [pc, #16]	; (90002a08 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>)
900029f6:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
900029fa:	4804      	ldr	r0, [pc, #16]	; (90002a0c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>)
900029fc:	f7ff ff54 	bl	900028a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
90002a00:	b003      	add	sp, #12
90002a02:	f85d fb04 	ldr.w	pc, [sp], #4
90002a06:	bf00      	nop
90002a08:	20026d1c 	.word	0x20026d1c
90002a0c:	20026d18 	.word	0x20026d18

90002a10 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
90002a10:	6a00      	ldr	r0, [r0, #32]
90002a12:	4770      	bx	lr

90002a14 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
90002a14:	4770      	bx	lr

90002a16 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
90002a16:	888b      	ldrh	r3, [r1, #4]
90002a18:	6980      	ldr	r0, [r0, #24]
90002a1a:	0adb      	lsrs	r3, r3, #11
90002a1c:	680a      	ldr	r2, [r1, #0]
90002a1e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
90002a22:	4410      	add	r0, r2
90002a24:	4770      	bx	lr

90002a26 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
90002a26:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
90002a28:	b1c2      	cbz	r2, 90002a5c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
90002a2a:	7b13      	ldrb	r3, [r2, #12]
90002a2c:	b1b3      	cbz	r3, 90002a5c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
90002a2e:	7b54      	ldrb	r4, [r2, #13]
90002a30:	7ad2      	ldrb	r2, [r2, #11]
90002a32:	0224      	lsls	r4, r4, #8
90002a34:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
90002a38:	4314      	orrs	r4, r2
90002a3a:	69c2      	ldr	r2, [r0, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
90002a3c:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
90002a3e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
90002a42:	8813      	ldrh	r3, [r2, #0]
90002a44:	428b      	cmp	r3, r1
90002a46:	d102      	bne.n	90002a4e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
90002a48:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
90002a4c:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
90002a4e:	d805      	bhi.n	90002a5c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
90002a50:	3801      	subs	r0, #1
90002a52:	3204      	adds	r2, #4
90002a54:	b280      	uxth	r0, r0
90002a56:	2800      	cmp	r0, #0
90002a58:	d1f3      	bne.n	90002a42 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
90002a5a:	e7f7      	b.n	90002a4c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
90002a5c:	2000      	movs	r0, #0
90002a5e:	e7f5      	b.n	90002a4c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

90002a60 <_ZN8touchgfx13GeneratedFontD0Ev>:
90002a60:	b510      	push	{r4, lr}
90002a62:	4604      	mov	r4, r0
90002a64:	2124      	movs	r1, #36	; 0x24
90002a66:	f025 fb09 	bl	9002807c <_ZdlPvj>
90002a6a:	4620      	mov	r0, r4
90002a6c:	bd10      	pop	{r4, pc}
	...

90002a70 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
90002a70:	b530      	push	{r4, r5, lr}
90002a72:	b089      	sub	sp, #36	; 0x24
90002a74:	4604      	mov	r4, r0
    gsubTable(gsubData)
90002a76:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
90002a7a:	9506      	str	r5, [sp, #24]
90002a7c:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
90002a80:	9505      	str	r5, [sp, #20]
90002a82:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
90002a86:	9504      	str	r5, [sp, #16]
90002a88:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
90002a8c:	9503      	str	r5, [sp, #12]
90002a8e:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
90002a92:	9502      	str	r5, [sp, #8]
90002a94:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
90002a98:	9501      	str	r5, [sp, #4]
90002a9a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
90002a9e:	9500      	str	r5, [sp, #0]
90002aa0:	f017 fae8 	bl	9001a074 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
90002aa4:	4b05      	ldr	r3, [pc, #20]	; (90002abc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x4c>)
}
90002aa6:	4620      	mov	r0, r4
    gsubTable(gsubData)
90002aa8:	6023      	str	r3, [r4, #0]
90002aaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
90002aac:	61a3      	str	r3, [r4, #24]
90002aae:	9b12      	ldr	r3, [sp, #72]	; 0x48
90002ab0:	61e3      	str	r3, [r4, #28]
90002ab2:	9b15      	ldr	r3, [sp, #84]	; 0x54
90002ab4:	6223      	str	r3, [r4, #32]
}
90002ab6:	b009      	add	sp, #36	; 0x24
90002ab8:	bd30      	pop	{r4, r5, pc}
90002aba:	bf00      	nop
90002abc:	9002ad04 	.word	0x9002ad04

90002ac0 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
90002ac0:	2000      	movs	r0, #0
90002ac2:	4770      	bx	lr

90002ac4 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
90002ac4:	8081      	strh	r1, [r0, #4]
    }
90002ac6:	4770      	bx	lr

90002ac8 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
90002ac8:	80c1      	strh	r1, [r0, #6]
    }
90002aca:	4770      	bx	lr

90002acc <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
90002acc:	8101      	strh	r1, [r0, #8]
    }
90002ace:	4770      	bx	lr

90002ad0 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
90002ad0:	8141      	strh	r1, [r0, #10]
    }
90002ad2:	4770      	bx	lr

90002ad4 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
90002ad4:	4770      	bx	lr

90002ad6 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
    {
    }
90002ad6:	4770      	bx	lr

90002ad8 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
    {
    }
90002ad8:	4770      	bx	lr

90002ada <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
    {
    }
90002ada:	4770      	bx	lr

90002adc <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
90002adc:	4770      	bx	lr

90002ade <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
90002ade:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
90002ae0:	88c4      	ldrh	r4, [r0, #6]
90002ae2:	6803      	ldr	r3, [r0, #0]
90002ae4:	1b12      	subs	r2, r2, r4
90002ae6:	8884      	ldrh	r4, [r0, #4]
90002ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90002aea:	1b09      	subs	r1, r1, r4
90002aec:	b212      	sxth	r2, r2
    }
90002aee:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
90002af2:	b209      	sxth	r1, r1
90002af4:	4718      	bx	r3

90002af6 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
90002af6:	f64f 73ff 	movw	r3, #65535	; 0xffff
90002afa:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
90002afc:	f04f 33ff 	mov.w	r3, #4294967295
90002b00:	6203      	str	r3, [r0, #32]
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
90002b02:	6813      	ldr	r3, [r2, #0]
90002b04:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
90002b06:	6010      	str	r0, [r2, #0]
    }
90002b08:	4770      	bx	lr

90002b0a <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
90002b0a:	4770      	bx	lr

90002b0c <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
90002b0c:	4770      	bx	lr

90002b0e <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
90002b0e:	4770      	bx	lr

90002b10 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
90002b10:	4770      	bx	lr

90002b12 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
    }
90002b12:	4770      	bx	lr

90002b14 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
90002b14:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90002b18:	b11a      	cbz	r2, 90002b22 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
90002b1a:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
90002b1e:	b102      	cbz	r2, 90002b22 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
90002b20:	6018      	str	r0, [r3, #0]
        }
    }
90002b22:	4770      	bx	lr

90002b24 <_ZN15Screen1ViewBase11setupScreenEv>:
}

void Screen1ViewBase::setupScreen()
{

}
90002b24:	4770      	bx	lr

90002b26 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
90002b26:	4770      	bx	lr

90002b28 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
90002b28:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
90002b2a:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
90002b2c:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
90002b2e:	68c2      	ldr	r2, [r0, #12]
90002b30:	689b      	ldr	r3, [r3, #8]
90002b32:	1055      	asrs	r5, r2, #1
90002b34:	eb04 0062 	add.w	r0, r4, r2, asr #1
90002b38:	07d2      	lsls	r2, r2, #31
90002b3a:	bf48      	it	mi
90002b3c:	5962      	ldrmi	r2, [r4, r5]
    }
90002b3e:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
90002b40:	bf48      	it	mi
90002b42:	58d3      	ldrmi	r3, [r2, r3]
90002b44:	4718      	bx	r3

90002b46 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
90002b46:	6843      	ldr	r3, [r0, #4]
90002b48:	b12b      	cbz	r3, 90002b56 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
90002b4a:	6883      	ldr	r3, [r0, #8]
90002b4c:	b92b      	cbnz	r3, 90002b5a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
90002b4e:	68c0      	ldr	r0, [r0, #12]
90002b50:	f000 0001 	and.w	r0, r0, #1
90002b54:	4770      	bx	lr
90002b56:	4618      	mov	r0, r3
90002b58:	4770      	bx	lr
90002b5a:	2001      	movs	r0, #1
    }
90002b5c:	4770      	bx	lr

90002b5e <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
90002b5e:	b510      	push	{r4, lr}
90002b60:	4604      	mov	r4, r0
90002b62:	2110      	movs	r1, #16
90002b64:	f025 fa8a 	bl	9002807c <_ZdlPvj>
90002b68:	4620      	mov	r0, r4
90002b6a:	bd10      	pop	{r4, pc}

90002b6c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonOpen)
90002b6c:	f500 7378 	add.w	r3, r0, #992	; 0x3e0
90002b70:	4299      	cmp	r1, r3
90002b72:	d106      	bne.n	90002b82 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
        visible = vis;
90002b74:	2301      	movs	r3, #1
90002b76:	f880 344d 	strb.w	r3, [r0, #1101]	; 0x44d
    {
        //Interaction2
        //When buttonClose clicked hide informationWindow
        //Hide informationWindow
        informationWindow.setVisible(false);
        informationWindow.invalidate();
90002b7a:	f500 6085 	add.w	r0, r0, #1064	; 0x428
90002b7e:	f017 b9b9 	b.w	90019ef4 <_ZNK8touchgfx8Drawable10invalidateEv>
    else if (&src == &buttonClose)
90002b82:	f500 639b 	add.w	r3, r0, #1240	; 0x4d8
90002b86:	4299      	cmp	r1, r3
90002b88:	d101      	bne.n	90002b8e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
90002b8a:	2300      	movs	r3, #0
90002b8c:	e7f3      	b.n	90002b76 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa>
    }
}
90002b8e:	4770      	bx	lr

90002b90 <_ZN8touchgfx8DrawableC1Ev>:
          visible(true)
90002b90:	4a06      	ldr	r2, [pc, #24]	; (90002bac <_ZN8touchgfx8DrawableC1Ev+0x1c>)
90002b92:	6002      	str	r2, [r0, #0]
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
    {
        this->x = x;
90002b94:	2200      	movs	r2, #0
        this->y = y;
        this->width = width;
90002b96:	e9c0 2201 	strd	r2, r2, [r0, #4]
        width = 0;
90002b9a:	e9c0 2203 	strd	r2, r2, [r0, #12]
90002b9e:	e9c0 2205 	strd	r2, r2, [r0, #20]
90002ba2:	61c2      	str	r2, [r0, #28]
90002ba4:	f44f 7280 	mov.w	r2, #256	; 0x100
90002ba8:	8482      	strh	r2, [r0, #36]	; 0x24
    }
90002baa:	4770      	bx	lr
90002bac:	9002faf4 	.word	0x9002faf4

90002bb0 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
90002bb0:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
90002bb2:	b570      	push	{r4, r5, r6, lr}
90002bb4:	4604      	mov	r4, r0
        setX(x);
90002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    void setXY(int16_t x, int16_t y)
90002bb8:	4615      	mov	r5, r2
        setX(x);
90002bba:	4798      	blx	r3
        setY(y);
90002bbc:	6823      	ldr	r3, [r4, #0]
90002bbe:	4620      	mov	r0, r4
90002bc0:	4629      	mov	r1, r5
90002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    }
90002bc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
90002bc8:	4718      	bx	r3

90002bca <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
90002bca:	b570      	push	{r4, r5, r6, lr}
90002bcc:	4604      	mov	r4, r0
90002bce:	461d      	mov	r5, r3
90002bd0:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
90002bd4:	f7ff ffec 	bl	90002bb0 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
90002bd8:	6823      	ldr	r3, [r4, #0]
90002bda:	4629      	mov	r1, r5
90002bdc:	4620      	mov	r0, r4
90002bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90002be0:	4798      	blx	r3
        setHeight(height);
90002be2:	6823      	ldr	r3, [r4, #0]
90002be4:	4631      	mov	r1, r6
90002be6:	4620      	mov	r0, r4
90002be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    }
90002bea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
90002bee:	4718      	bx	r3

90002bf0 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
90002bf0:	b510      	push	{r4, lr}
90002bf2:	4604      	mov	r4, r0
        : Widget(), alpha(255), color(0)
90002bf4:	2226      	movs	r2, #38	; 0x26
90002bf6:	2100      	movs	r1, #0
90002bf8:	f026 f8ca 	bl	90028d90 <memset>
class Widget : public Drawable
90002bfc:	4620      	mov	r0, r4
90002bfe:	f7ff ffc7 	bl	90002b90 <_ZN8touchgfx8DrawableC1Ev>
90002c02:	4b04      	ldr	r3, [pc, #16]	; (90002c14 <_ZN8touchgfx3BoxC1Ev+0x24>)
    {
    }
90002c04:	4620      	mov	r0, r4
        : Widget(), alpha(255), color(0)
90002c06:	6023      	str	r3, [r4, #0]
90002c08:	23ff      	movs	r3, #255	; 0xff
90002c0a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        color = col;
90002c0e:	2300      	movs	r3, #0
90002c10:	62a3      	str	r3, [r4, #40]	; 0x28
    }
90002c12:	bd10      	pop	{r4, pc}
90002c14:	9002f5e0 	.word	0x9002f5e0

90002c18 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
90002c18:	b510      	push	{r4, lr}
90002c1a:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
90002c1c:	2226      	movs	r2, #38	; 0x26
90002c1e:	2100      	movs	r1, #0
90002c20:	f026 f8b6 	bl	90028d90 <memset>
90002c24:	4620      	mov	r0, r4
90002c26:	f7ff ffb3 	bl	90002b90 <_ZN8touchgfx8DrawableC1Ev>
90002c2a:	4b07      	ldr	r3, [pc, #28]	; (90002c48 <_ZN8touchgfx8TextAreaC1Ev+0x30>)
90002c2c:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    {
    }
90002c30:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
90002c32:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
90002c34:	4b05      	ldr	r3, [pc, #20]	; (90002c4c <_ZN8touchgfx8TextAreaC1Ev+0x34>)
90002c36:	62a3      	str	r3, [r4, #40]	; 0x28
90002c38:	f64f 73ff 	movw	r3, #65535	; 0xffff
90002c3c:	85a3      	strh	r3, [r4, #44]	; 0x2c
90002c3e:	2300      	movs	r3, #0
90002c40:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
90002c44:	8723      	strh	r3, [r4, #56]	; 0x38
    }
90002c46:	bd10      	pop	{r4, pc}
90002c48:	9002f538 	.word	0x9002f538
90002c4c:	9002a954 	.word	0x9002a954

90002c50 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
90002c50:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
        if (typedText.hasValidId())
90002c52:	f64f 73ff 	movw	r3, #65535	; 0xffff
        return typedTextId != TYPED_TEXT_INVALID;
90002c56:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    void updateTextPosition()
90002c58:	4606      	mov	r6, r0
        if (typedText.hasValidId())
90002c5a:	4299      	cmp	r1, r3
90002c5c:	d033      	beq.n	90002cc6 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x76>
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90002c5e:	4b1c      	ldr	r3, [pc, #112]	; (90002cd0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
90002c60:	681b      	ldr	r3, [r3, #0]
90002c62:	b92b      	cbnz	r3, 90002c70 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
90002c64:	4b1b      	ldr	r3, [pc, #108]	; (90002cd4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x84>)
90002c66:	21b1      	movs	r1, #177	; 0xb1
90002c68:	4a1b      	ldr	r2, [pc, #108]	; (90002cd8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x88>)
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
90002c6a:	481c      	ldr	r0, [pc, #112]	; (90002cdc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x8c>)
90002c6c:	f025 ffe2 	bl	90028c34 <__assert_func>
90002c70:	4a1b      	ldr	r2, [pc, #108]	; (90002ce0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x90>)
90002c72:	8812      	ldrh	r2, [r2, #0]
90002c74:	428a      	cmp	r2, r1
90002c76:	d803      	bhi.n	90002c80 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x30>
90002c78:	4b1a      	ldr	r3, [pc, #104]	; (90002ce4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x94>)
90002c7a:	21b2      	movs	r1, #178	; 0xb2
90002c7c:	4a16      	ldr	r2, [pc, #88]	; (90002cd8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x88>)
90002c7e:	e7f4      	b.n	90002c6a <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x1a>
        return fonts[typedTexts[typedTextId].fontIdx];
90002c80:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
90002c84:	4b18      	ldr	r3, [pc, #96]	; (90002ce8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x98>)
90002c86:	681b      	ldr	r3, [r3, #0]
90002c88:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
90002c8c:	4b17      	ldr	r3, [pc, #92]	; (90002cec <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x9c>)
90002c8e:	6818      	ldr	r0, [r3, #0]
90002c90:	f000 fcba 	bl	90003608 <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
90002c94:	682b      	ldr	r3, [r5, #0]
90002c96:	4601      	mov	r1, r0
90002c98:	9001      	str	r0, [sp, #4]
90002c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90002c9c:	4628      	mov	r0, r5
90002c9e:	4798      	blx	r3
90002ca0:	682b      	ldr	r3, [r5, #0]
90002ca2:	4604      	mov	r4, r0
90002ca4:	9901      	ldr	r1, [sp, #4]
90002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90002ca8:	4628      	mov	r0, r5
90002caa:	4798      	blx	r3
90002cac:	fb14 f400 	smulbb	r4, r4, r0
90002cb0:	682b      	ldr	r3, [r5, #0]
90002cb2:	4628      	mov	r0, r5
90002cb4:	b2e4      	uxtb	r4, r4
90002cb6:	9901      	ldr	r1, [sp, #4]
90002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002cba:	4798      	blx	r3
90002cbc:	4404      	add	r4, r0
90002cbe:	f886 4045 	strb.w	r4, [r6, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
90002cc2:	b002      	add	sp, #8
90002cc4:	bd70      	pop	{r4, r5, r6, pc}
            textHeightIncludingSpacing = 0;
90002cc6:	2300      	movs	r3, #0
90002cc8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    }
90002ccc:	e7f9      	b.n	90002cc2 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x72>
90002cce:	bf00      	nop
90002cd0:	20026d2c 	.word	0x20026d2c
90002cd4:	9002ad50 	.word	0x9002ad50
90002cd8:	9002ad92 	.word	0x9002ad92
90002cdc:	9002adc0 	.word	0x9002adc0
90002ce0:	20026d30 	.word	0x20026d30
90002ce4:	9002ae07 	.word	0x9002ae07
90002ce8:	20026d34 	.word	0x20026d34
90002cec:	20026d38 	.word	0x20026d38

90002cf0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
90002cf0:	4613      	mov	r3, r2
        return instance;
90002cf2:	4a0c      	ldr	r2, [pc, #48]	; (90002d24 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x34>)
90002cf4:	b570      	push	{r4, r5, r6, lr}
90002cf6:	6815      	ldr	r5, [r2, #0]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
90002cf8:	b92d      	cbnz	r5, 90002d06 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x16>
90002cfa:	4b0b      	ldr	r3, [pc, #44]	; (90002d28 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x38>)
90002cfc:	2135      	movs	r1, #53	; 0x35
90002cfe:	4a0b      	ldr	r2, [pc, #44]	; (90002d2c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x3c>)
90002d00:	480b      	ldr	r0, [pc, #44]	; (90002d30 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x40>)
90002d02:	f025 ff97 	bl	90028c34 <__assert_func>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
90002d06:	f895 2076 	ldrb.w	r2, [r5, #118]	; 0x76
90002d0a:	b10a      	cbz	r2, 90002d10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x20>
90002d0c:	6cec      	ldr	r4, [r5, #76]	; 0x4c
90002d0e:	b904      	cbnz	r4, 90002d12 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x22>
            return instance->lcdRef;
90002d10:	68ac      	ldr	r4, [r5, #8]
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
90002d12:	6822      	ldr	r2, [r4, #0]
90002d14:	6a95      	ldr	r5, [r2, #40]	; 0x28
90002d16:	460a      	mov	r2, r1
90002d18:	4601      	mov	r1, r0
90002d1a:	4620      	mov	r0, r4
90002d1c:	46ac      	mov	ip, r5
    }
90002d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
90002d22:	4760      	bx	ip
90002d24:	20026cdc 	.word	0x20026cdc
90002d28:	9002ae59 	.word	0x9002ae59
90002d2c:	9002ae9c 	.word	0x9002ae9c
90002d30:	9002aef8 	.word	0x9002aef8

90002d34 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
90002d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90002d38:	4604      	mov	r4, r0
        : presenter(0)
90002d3a:	2500      	movs	r5, #0
class Container : public Drawable
{
public:
    Container()
        : Drawable(),
          firstChild(0)
90002d3c:	f8df a3fc 	ldr.w	sl, [pc, #1020]	; 9000313c <_ZN15Screen1ViewBaseC1Ev+0x408>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
90002d40:	f104 066c 	add.w	r6, r4, #108	; 0x6c
90002d44:	f504 79b2 	add.w	r9, r4, #356	; 0x164
90002d48:	f504 7bc8 	add.w	fp, r4, #400	; 0x190
90002d4c:	f504 77de 	add.w	r7, r4, #444	; 0x1bc
90002d50:	f504 7813 	add.w	r8, r4, #588	; 0x24c
Screen1ViewBase::Screen1ViewBase() :
90002d54:	ed2d 8b0e 	vpush	{d8-d14}
90002d58:	b089      	sub	sp, #36	; 0x24
     *
     * @see getCameraDistance
     */
    virtual void setCameraDistance(float d)
    {
        cameraDistance = MAX(d, MINIMAL_CAMERA_DISTANCE);
90002d5a:	ed9f 9ae4 	vldr	s18, [pc, #912]	; 900030ec <_ZN15Screen1ViewBaseC1Ev+0x3b8>
90002d5e:	f017 fc35 	bl	9001a5cc <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
90002d62:	4be3      	ldr	r3, [pc, #908]	; (900030f0 <_ZN15Screen1ViewBaseC1Ev+0x3bc>)
90002d64:	4622      	mov	r2, r4
90002d66:	63e5      	str	r5, [r4, #60]	; 0x3c
        xOrigo = x;
90002d68:	eddf 8ae2 	vldr	s17, [pc, #904]	; 900030f4 <_ZN15Screen1ViewBaseC1Ev+0x3c0>
90002d6c:	f842 3b40 	str.w	r3, [r2], #64
90002d70:	4610      	mov	r0, r2
90002d72:	ee09 2a90 	vmov	s19, r2
90002d76:	f7ff ff3b 	bl	90002bf0 <_ZN8touchgfx3BoxC1Ev>
90002d7a:	4630      	mov	r0, r6
        yOrigo = y;
90002d7c:	ed9f 8ade 	vldr	s16, [pc, #888]	; 900030f8 <_ZN15Screen1ViewBaseC1Ev+0x3c4>
90002d80:	f011 fd30 	bl	900147e4 <_ZN8touchgfx14SwipeContainerC1Ev>
90002d84:	4648      	mov	r0, r9
90002d86:	f7ff ff03 	bl	90002b90 <_ZN8touchgfx8DrawableC1Ev>
90002d8a:	4658      	mov	r0, fp
90002d8c:	f8c4 a164 	str.w	sl, [r4, #356]	; 0x164
90002d90:	f8c4 518c 	str.w	r5, [r4, #396]	; 0x18c
90002d94:	f7ff ff2c 	bl	90002bf0 <_ZN8touchgfx3BoxC1Ev>
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
90002d98:	f64f 72ff 	movw	r2, #65535	; 0xffff
90002d9c:	a906      	add	r1, sp, #24
90002d9e:	4638      	mov	r0, r7
90002da0:	f8ad 2018 	strh.w	r2, [sp, #24]
90002da4:	f012 fffe 	bl	90015da4 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>
90002da8:	4640      	mov	r0, r8
90002daa:	f7ff fef1 	bl	90002b90 <_ZN8touchgfx8DrawableC1Ev>
90002dae:	f504 731e 	add.w	r3, r4, #632	; 0x278
90002db2:	f8c4 a24c 	str.w	sl, [r4, #588]	; 0x24c
90002db6:	4618      	mov	r0, r3
90002db8:	f8c4 5274 	str.w	r5, [r4, #628]	; 0x274
90002dbc:	ee0d 3a10 	vmov	s26, r3
90002dc0:	f7ff ff16 	bl	90002bf0 <_ZN8touchgfx3BoxC1Ev>
90002dc4:	f504 7329 	add.w	r3, r4, #676	; 0x2a4
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
        : Box(), borderColor(0), borderSize(0)
90002dc8:	4618      	mov	r0, r3
90002dca:	ee0d 3a90 	vmov	s27, r3
90002dce:	f7ff ff0f 	bl	90002bf0 <_ZN8touchgfx3BoxC1Ev>
90002dd2:	f504 7336 	add.w	r3, r4, #728	; 0x2d8
90002dd6:	4ac9      	ldr	r2, [pc, #804]	; (900030fc <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
90002dd8:	4618      	mov	r0, r3
90002dda:	f8c4 52d0 	str.w	r5, [r4, #720]	; 0x2d0
90002dde:	f8c4 22a4 	str.w	r2, [r4, #676]	; 0x2a4
90002de2:	ee0e 3a10 	vmov	s28, r3
90002de6:	f8a4 52d4 	strh.w	r5, [r4, #724]	; 0x2d4
90002dea:	f7ff ff01 	bl	90002bf0 <_ZN8touchgfx3BoxC1Ev>
90002dee:	4ac3      	ldr	r2, [pc, #780]	; (900030fc <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
90002df0:	f504 7343 	add.w	r3, r4, #780	; 0x30c
90002df4:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
90002df8:	f8c4 22d8 	str.w	r2, [r4, #728]	; 0x2d8
90002dfc:	4618      	mov	r0, r3
90002dfe:	f8a4 5308 	strh.w	r5, [r4, #776]	; 0x308
90002e02:	ee0b 3a10 	vmov	s22, r3
90002e06:	f7ff ff07 	bl	90002c18 <_ZN8touchgfx8TextAreaC1Ev>
90002e0a:	f504 7352 	add.w	r3, r4, #840	; 0x348
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
        : TextArea(), wildcard(0)
90002e0e:	4618      	mov	r0, r3
90002e10:	ee0b 3a90 	vmov	s23, r3
90002e14:	f7ff ff00 	bl	90002c18 <_ZN8touchgfx8TextAreaC1Ev>
90002e18:	4ab9      	ldr	r2, [pc, #740]	; (90003100 <_ZN15Screen1ViewBaseC1Ev+0x3cc>)
90002e1a:	f504 7362 	add.w	r3, r4, #904	; 0x388
90002e1e:	f8c4 5384 	str.w	r5, [r4, #900]	; 0x384
90002e22:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
90002e26:	4618      	mov	r0, r3
90002e28:	ee0c 3a10 	vmov	s24, r3
90002e2c:	f7ff feb0 	bl	90002b90 <_ZN8touchgfx8DrawableC1Ev>
90002e30:	f504 736d 	add.w	r3, r4, #948	; 0x3b4
90002e34:	f8c4 a388 	str.w	sl, [r4, #904]	; 0x388
90002e38:	f504 6a85 	add.w	sl, r4, #1064	; 0x428
90002e3c:	4618      	mov	r0, r3
90002e3e:	f8c4 53b0 	str.w	r5, [r4, #944]	; 0x3b0
90002e42:	ee0e 3a90 	vmov	s29, r3
90002e46:	f7ff fed3 	bl	90002bf0 <_ZN8touchgfx3BoxC1Ev>
90002e4a:	f504 7378 	add.w	r3, r4, #992	; 0x3e0
90002e4e:	4618      	mov	r0, r3
90002e50:	ee0a 3a10 	vmov	s20, r3
90002e54:	f014 fc52 	bl	900176fc <_ZN8touchgfx15ButtonWithLabelC1Ev>
90002e58:	4650      	mov	r0, sl
90002e5a:	f011 f917 	bl	9001408c <_ZN8touchgfx11ModalWindowC1Ev>
90002e5e:	f504 639b 	add.w	r3, r4, #1240	; 0x4d8
90002e62:	4618      	mov	r0, r3
90002e64:	ee0a 3a90 	vmov	s21, r3
90002e68:	f014 fc48 	bl	900176fc <_ZN8touchgfx15ButtonWithLabelC1Ev>
90002e6c:	f504 63a4 	add.w	r3, r4, #1312	; 0x520
90002e70:	4618      	mov	r0, r3
90002e72:	ee0c 3a90 	vmov	s25, r3
90002e76:	f7ff fecf 	bl	90002c18 <_ZN8touchgfx8TextAreaC1Ev>
    {
90002e7a:	4ba2      	ldr	r3, [pc, #648]	; (90003104 <_ZN15Screen1ViewBaseC1Ev+0x3d0>)
    __background.setPosition(0, 0, 480, 272);
90002e7c:	462a      	mov	r2, r5
90002e7e:	4629      	mov	r1, r5
90002e80:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
90002e84:	ee19 0a90 	vmov	r0, s19
        this->pmemfun_1 = pmemfun_1;
90002e88:	4b9f      	ldr	r3, [pc, #636]	; (90003108 <_ZN15Screen1ViewBaseC1Ev+0x3d4>)
        this->pobject = pobject;
90002e8a:	f8c4 4588 	str.w	r4, [r4, #1416]	; 0x588
        this->pmemfun_1 = pmemfun_1;
90002e8e:	f8c4 358c 	str.w	r3, [r4, #1420]	; 0x58c
90002e92:	f44f 7388 	mov.w	r3, #272	; 0x110
90002e96:	f8c4 5590 	str.w	r5, [r4, #1424]	; 0x590
90002e9a:	9300      	str	r3, [sp, #0]
90002e9c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
90002ea0:	f7ff fe93 	bl	90002bca <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
90002ea4:	462a      	mov	r2, r5
90002ea6:	4629      	mov	r1, r5
90002ea8:	4628      	mov	r0, r5
90002eaa:	f7ff ff21 	bl	90002cf0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    swipeContainer1.setXY(0, 0);
90002eae:	462a      	mov	r2, r5
90002eb0:	4629      	mov	r1, r5
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
    {
        this->color = color;
90002eb2:	66a0      	str	r0, [r4, #104]	; 0x68
90002eb4:	4630      	mov	r0, r6
90002eb6:	f7ff fe7b 	bl	90002bb0 <_ZN8touchgfx8Drawable5setXYEss>
90002eba:	f04f 0303 	mov.w	r3, #3
    swipeContainer1.setPageIndicatorBitmaps(touchgfx::Bitmap(BITMAP_BLUE_PAGEINDICATOR_DOT_INDICATOR_SMALL_NORMAL_ID), touchgfx::Bitmap(BITMAP_BLUE_PAGEINDICATOR_DOT_INDICATOR_SMALL_HIGHLIGHT_ID));
90002ebe:	aa06      	add	r2, sp, #24
90002ec0:	a905      	add	r1, sp, #20
90002ec2:	f8ad 3014 	strh.w	r3, [sp, #20]
90002ec6:	f04f 0302 	mov.w	r3, #2
90002eca:	4630      	mov	r0, r6
90002ecc:	f8ad 3018 	strh.w	r3, [sp, #24]
90002ed0:	f011 fd7f 	bl	900149d2 <_ZN8touchgfx14SwipeContainer23setPageIndicatorBitmapsERKNS_6BitmapES3_>
    swipeContainer1.setPageIndicatorXY(217, 255);
90002ed4:	22ff      	movs	r2, #255	; 0xff
90002ed6:	21d9      	movs	r1, #217	; 0xd9
90002ed8:	4630      	mov	r0, r6
90002eda:	f011 fbcf 	bl	9001467c <_ZN8touchgfx14SwipeContainer18setPageIndicatorXYEss>
    swipeContainer1.setSwipeCutoff(50);
90002ede:	2132      	movs	r1, #50	; 0x32
90002ee0:	4630      	mov	r0, r6
90002ee2:	f011 fb40 	bl	90014566 <_ZN8touchgfx14SwipeContainer14setSwipeCutoffEt>
    swipeContainer1.setEndSwipeElasticWidth(50);
90002ee6:	2132      	movs	r1, #50	; 0x32
90002ee8:	4630      	mov	r0, r6
90002eea:	f011 fbc5 	bl	90014678 <_ZN8touchgfx14SwipeContainer23setEndSwipeElasticWidthEt>
        rect.width = width;
90002eee:	4b87      	ldr	r3, [pc, #540]	; (9000310c <_ZN15Screen1ViewBaseC1Ev+0x3d8>)
    box1.setPosition(0, 0, 480, 272);
90002ef0:	f44f 7288 	mov.w	r2, #272	; 0x110
90002ef4:	4658      	mov	r0, fp
90002ef6:	4629      	mov	r1, r5
90002ef8:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
90002efc:	9200      	str	r2, [sp, #0]
90002efe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
90002f02:	462a      	mov	r2, r5
90002f04:	f7ff fe61 	bl	90002bca <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(203, 41, 224));
90002f08:	22e0      	movs	r2, #224	; 0xe0
90002f0a:	2129      	movs	r1, #41	; 0x29
90002f0c:	20cb      	movs	r0, #203	; 0xcb
90002f0e:	f7ff feef 	bl	90002cf0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    MainLayout.add(box1);
90002f12:	4659      	mov	r1, fp
90002f14:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
90002f18:	4648      	mov	r0, r9
90002f1a:	f011 f9ef 	bl	900142fc <_ZN8touchgfx9Container3addERNS_8DrawableE>
90002f1e:	f04f 0b05 	mov.w	fp, #5
    textureMapper1.setXY(0, 0);
90002f22:	462a      	mov	r2, r5
90002f24:	4638      	mov	r0, r7
90002f26:	4629      	mov	r1, r5
90002f28:	f7ff fe42 	bl	90002bb0 <_ZN8touchgfx8Drawable5setXYEss>
    textureMapper1.setBitmap(touchgfx::Bitmap(BITMAP_LOGOHAVICOM_ID));
90002f2c:	a906      	add	r1, sp, #24
90002f2e:	4638      	mov	r0, r7
90002f30:	f8ad b018 	strh.w	fp, [sp, #24]
90002f34:	f013 f8d6 	bl	900160e4 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>
90002f38:	4b74      	ldr	r3, [pc, #464]	; (9000310c <_ZN15Screen1ViewBaseC1Ev+0x3d8>)
     */
    virtual void setBitmapPosition(float x, float y)
    {
        xBitmapPosition = x;
        yBitmapPosition = y;
        applyTransformation();
90002f3a:	4638      	mov	r0, r7
90002f3c:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
        xBitmapPosition = x;
90002f40:	4b73      	ldr	r3, [pc, #460]	; (90003110 <_ZN15Screen1ViewBaseC1Ev+0x3dc>)
90002f42:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
        yBitmapPosition = y;
90002f46:	4b73      	ldr	r3, [pc, #460]	; (90003114 <_ZN15Screen1ViewBaseC1Ev+0x3e0>)
90002f48:	f8c4 31ec 	str.w	r3, [r4, #492]	; 0x1ec
        applyTransformation();
90002f4c:	f012 ff74 	bl	90015e38 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
    textureMapper1.setScale(1.000f);
90002f50:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
90002f54:	4638      	mov	r0, r7
90002f56:	f013 f8ce 	bl	900160f6 <_ZN8touchgfx13TextureMapper8setScaleEf>
        applyTransformation();
90002f5a:	4638      	mov	r0, r7
        cameraDistance = MAX(d, MINIMAL_CAMERA_DISTANCE);
90002f5c:	ed84 9a85 	vstr	s18, [r4, #532]	; 0x214
        applyTransformation();
90002f60:	f012 ff6a 	bl	90015e38 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
        applyTransformation();
90002f64:	4638      	mov	r0, r7
        xOrigo = x;
90002f66:	edc4 8a80 	vstr	s17, [r4, #512]	; 0x200
        yOrigo = y;
90002f6a:	ed84 8a81 	vstr	s16, [r4, #516]	; 0x204
        zOrigo = z;
90002f6e:	ed84 9a82 	vstr	s18, [r4, #520]	; 0x208
        applyTransformation();
90002f72:	f012 ff61 	bl	90015e38 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
        applyTransformation();
90002f76:	4638      	mov	r0, r7
        xCamera = x;
90002f78:	edc4 8a83 	vstr	s17, [r4, #524]	; 0x20c
        yCamera = y;
90002f7c:	ed84 8a84 	vstr	s16, [r4, #528]	; 0x210
        applyTransformation();
90002f80:	f012 ff5a 	bl	90015e38 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
    textureMapper1.updateAngles(0.000f, 364.400f, 0.000f);
90002f84:	ed9f 1a64 	vldr	s2, [pc, #400]	; 90003118 <_ZN15Screen1ViewBaseC1Ev+0x3e4>
90002f88:	eddf 0a64 	vldr	s1, [pc, #400]	; 9000311c <_ZN15Screen1ViewBaseC1Ev+0x3e8>
90002f8c:	4638      	mov	r0, r7
90002f8e:	eeb0 0a41 	vmov.f32	s0, s2
90002f92:	f013 f985 	bl	900162a0 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
    MainLayout.add(textureMapper1);
90002f96:	4639      	mov	r1, r7
90002f98:	4648      	mov	r0, r9
        currentRenderingAlgorithm = algorithm;
90002f9a:	f884 51e5 	strb.w	r5, [r4, #485]	; 0x1e5
90002f9e:	f011 f9ad 	bl	900142fc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    swipeContainer1.add(MainLayout);
90002fa2:	4649      	mov	r1, r9
90002fa4:	4630      	mov	r0, r6
    boxWithBorder2.setPosition(118, 147, 245, 50);
90002fa6:	f04f 0932 	mov.w	r9, #50	; 0x32
    swipeContainer1.add(MainLayout);
90002faa:	f011 fcc3 	bl	90014934 <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>
90002fae:	4b57      	ldr	r3, [pc, #348]	; (9000310c <_ZN15Screen1ViewBaseC1Ev+0x3d8>)
    box2.setPosition(0, 0, 480, 272);
90002fb0:	462a      	mov	r2, r5
90002fb2:	4629      	mov	r1, r5
90002fb4:	f8c4 3254 	str.w	r3, [r4, #596]	; 0x254
90002fb8:	f44f 7388 	mov.w	r3, #272	; 0x110
90002fbc:	ee1d 0a10 	vmov	r0, s26
    Unicode::snprintf(textArea2Buffer, TEXTAREA2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID3).getText());
90002fc0:	f204 575c 	addw	r7, r4, #1372	; 0x55c
    box2.setPosition(0, 0, 480, 272);
90002fc4:	9300      	str	r3, [sp, #0]
90002fc6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
90002fca:	f7ff fdfe 	bl	90002bca <_ZN8touchgfx8Drawable11setPositionEssss>
    box2.setColor(touchgfx::Color::getColorFrom24BitRGB(203, 41, 224));
90002fce:	22e0      	movs	r2, #224	; 0xe0
90002fd0:	2129      	movs	r1, #41	; 0x29
90002fd2:	20cb      	movs	r0, #203	; 0xcb
90002fd4:	f7ff fe8c 	bl	90002cf0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    IPLayout.add(box2);
90002fd8:	ee1d 1a10 	vmov	r1, s26
90002fdc:	f8c4 02a0 	str.w	r0, [r4, #672]	; 0x2a0
90002fe0:	4640      	mov	r0, r8
90002fe2:	f011 f98b 	bl	900142fc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    boxWithBorder1.setPosition(143, 58, 195, 55);
90002fe6:	2337      	movs	r3, #55	; 0x37
90002fe8:	223a      	movs	r2, #58	; 0x3a
90002fea:	218f      	movs	r1, #143	; 0x8f
90002fec:	ee1d 0a90 	vmov	r0, s27
90002ff0:	9300      	str	r3, [sp, #0]
90002ff2:	23c3      	movs	r3, #195	; 0xc3
90002ff4:	f7ff fde9 	bl	90002bca <_ZN8touchgfx8Drawable11setPositionEssss>
    boxWithBorder1.setColor(touchgfx::Color::getColorFrom24BitRGB(93, 5, 125));
90002ff8:	227d      	movs	r2, #125	; 0x7d
90002ffa:	4659      	mov	r1, fp
90002ffc:	205d      	movs	r0, #93	; 0x5d
90002ffe:	f7ff fe77 	bl	90002cf0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    boxWithBorder1.setBorderColor(touchgfx::Color::getColorFrom24BitRGB(169, 26, 189));
90003002:	22bd      	movs	r2, #189	; 0xbd
90003004:	211a      	movs	r1, #26
90003006:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
9000300a:	20a9      	movs	r0, #169	; 0xa9
9000300c:	f7ff fe70 	bl	90002cf0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
90003010:	2389      	movs	r3, #137	; 0x89
    IPLayout.add(boxWithBorder1);
90003012:	ee1d 1a90 	vmov	r1, s27
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
    {
        borderColor = color;
90003016:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
9000301a:	f884 32ca 	strb.w	r3, [r4, #714]	; 0x2ca
9000301e:	4640      	mov	r0, r8
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
90003020:	f8a4 b2d4 	strh.w	fp, [r4, #724]	; 0x2d4
90003024:	f011 f96a 	bl	900142fc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    boxWithBorder2.setPosition(118, 147, 245, 50);
90003028:	23f5      	movs	r3, #245	; 0xf5
9000302a:	2293      	movs	r2, #147	; 0x93
9000302c:	2176      	movs	r1, #118	; 0x76
9000302e:	ee1e 0a10 	vmov	r0, s28
90003032:	f8cd 9000 	str.w	r9, [sp]
90003036:	f7ff fdc8 	bl	90002bca <_ZN8touchgfx8Drawable11setPositionEssss>
    boxWithBorder2.setColor(touchgfx::Color::getColorFrom24BitRGB(171, 10, 133));
9000303a:	2285      	movs	r2, #133	; 0x85
9000303c:	210a      	movs	r1, #10
9000303e:	20ab      	movs	r0, #171	; 0xab
90003040:	f7ff fe56 	bl	90002cf0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    boxWithBorder2.setBorderColor(touchgfx::Color::getColorFrom24BitRGB(148, 21, 21));
90003044:	2215      	movs	r2, #21
        this->color = color;
90003046:	f8c4 0300 	str.w	r0, [r4, #768]	; 0x300
9000304a:	2094      	movs	r0, #148	; 0x94
9000304c:	4611      	mov	r1, r2
9000304e:	f7ff fe4f 	bl	90002cf0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
        alpha = newAlpha;
90003052:	2390      	movs	r3, #144	; 0x90
    IPLayout.add(boxWithBorder2);
90003054:	ee1e 1a10 	vmov	r1, s28
        borderColor = color;
90003058:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
9000305c:	f884 32fe 	strb.w	r3, [r4, #766]	; 0x2fe
90003060:	4640      	mov	r0, r8
        borderSize = size;
90003062:	f8a4 b308 	strh.w	fp, [r4, #776]	; 0x308
90003066:	f011 f949 	bl	900142fc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(177, 73);
9000306a:	2249      	movs	r2, #73	; 0x49
9000306c:	21b1      	movs	r1, #177	; 0xb1
9000306e:	ee1b 0a10 	vmov	r0, s22
90003072:	f7ff fd9d 	bl	90002bb0 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
90003076:	22ff      	movs	r2, #255	; 0xff
90003078:	4611      	mov	r1, r2
9000307a:	4610      	mov	r0, r2
9000307c:	f7ff fe38 	bl	90002cf0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
        : typedTextId(id)
90003080:	4b27      	ldr	r3, [pc, #156]	; (90003120 <_ZN15Screen1ViewBaseC1Ev+0x3ec>)
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
90003082:	a906      	add	r1, sp, #24
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
90003084:	f8c4 033c 	str.w	r0, [r4, #828]	; 0x33c
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
90003088:	f8a4 5340 	strh.w	r5, [r4, #832]	; 0x340
9000308c:	ee1b 0a10 	vmov	r0, s22
90003090:	9306      	str	r3, [sp, #24]
90003092:	f8ad 501c 	strh.w	r5, [sp, #28]
90003096:	f013 fd6e 	bl	90016b76 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    IPLayout.add(textArea1);
9000309a:	ee1b 1a10 	vmov	r1, s22
9000309e:	4640      	mov	r0, r8
900030a0:	f011 f92c 	bl	900142fc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2.setPosition(118, 158, 245, 39);
900030a4:	2327      	movs	r3, #39	; 0x27
900030a6:	229e      	movs	r2, #158	; 0x9e
900030a8:	2176      	movs	r1, #118	; 0x76
900030aa:	ee1b 0a90 	vmov	r0, s23
900030ae:	9300      	str	r3, [sp, #0]
900030b0:	23f5      	movs	r3, #245	; 0xf5
900030b2:	f7ff fd8a 	bl	90002bca <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
900030b6:	22ff      	movs	r2, #255	; 0xff
900030b8:	4611      	mov	r1, r2
900030ba:	4610      	mov	r0, r2
900030bc:	f7ff fe18 	bl	90002cf0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900030c0:	4b18      	ldr	r3, [pc, #96]	; (90003124 <_ZN15Screen1ViewBaseC1Ev+0x3f0>)
        this->color = color;
900030c2:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
900030c6:	681b      	ldr	r3, [r3, #0]
        linespace = space;
900030c8:	f8a4 537c 	strh.w	r5, [r4, #892]	; 0x37c
900030cc:	b92b      	cbnz	r3, 900030da <_ZN15Screen1ViewBaseC1Ev+0x3a6>
900030ce:	4b16      	ldr	r3, [pc, #88]	; (90003128 <_ZN15Screen1ViewBaseC1Ev+0x3f4>)
900030d0:	21b1      	movs	r1, #177	; 0xb1
900030d2:	4a16      	ldr	r2, [pc, #88]	; (9000312c <_ZN15Screen1ViewBaseC1Ev+0x3f8>)
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
900030d4:	4816      	ldr	r0, [pc, #88]	; (90003130 <_ZN15Screen1ViewBaseC1Ev+0x3fc>)
900030d6:	f025 fdad 	bl	90028c34 <__assert_func>
900030da:	4b16      	ldr	r3, [pc, #88]	; (90003134 <_ZN15Screen1ViewBaseC1Ev+0x400>)
900030dc:	881b      	ldrh	r3, [r3, #0]
900030de:	2b02      	cmp	r3, #2
900030e0:	d82e      	bhi.n	90003140 <_ZN15Screen1ViewBaseC1Ev+0x40c>
900030e2:	4b15      	ldr	r3, [pc, #84]	; (90003138 <_ZN15Screen1ViewBaseC1Ev+0x404>)
900030e4:	21b2      	movs	r1, #178	; 0xb2
900030e6:	4a11      	ldr	r2, [pc, #68]	; (9000312c <_ZN15Screen1ViewBaseC1Ev+0x3f8>)
900030e8:	e7f4      	b.n	900030d4 <_ZN15Screen1ViewBaseC1Ev+0x3a0>
900030ea:	bf00      	nop
900030ec:	447a0000 	.word	0x447a0000
900030f0:	9002af60 	.word	0x9002af60
900030f4:	43700000 	.word	0x43700000
900030f8:	43080000 	.word	0x43080000
900030fc:	9002f7a0 	.word	0x9002f7a0
90003100:	9002f6f8 	.word	0x9002f6f8
90003104:	9002af48 	.word	0x9002af48
90003108:	90002b6d 	.word	0x90002b6d
9000310c:	011001e0 	.word	0x011001e0
90003110:	430c0000 	.word	0x430c0000
90003114:	41f00000 	.word	0x41f00000
90003118:	00000000 	.word	0x00000000
9000311c:	43b63333 	.word	0x43b63333
90003120:	9002a954 	.word	0x9002a954
90003124:	20026d2c 	.word	0x20026d2c
90003128:	9002ad50 	.word	0x9002ad50
9000312c:	9002ad92 	.word	0x9002ad92
90003130:	9002adc0 	.word	0x9002adc0
90003134:	20026d30 	.word	0x20026d30
90003138:	9002ae07 	.word	0x9002ae07
9000313c:	9002e960 	.word	0x9002e960
        return texts->getText(typedTextId);
90003140:	4b75      	ldr	r3, [pc, #468]	; (90003318 <_ZN15Screen1ViewBaseC1Ev+0x5e4>)
90003142:	2102      	movs	r1, #2
90003144:	6818      	ldr	r0, [r3, #0]
90003146:	f000 fa5f 	bl	90003608 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(textArea2Buffer, TEXTAREA2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID3).getText());
9000314a:	4a74      	ldr	r2, [pc, #464]	; (9000331c <_ZN15Screen1ViewBaseC1Ev+0x5e8>)
9000314c:	4603      	mov	r3, r0
9000314e:	2114      	movs	r1, #20
90003150:	4638      	mov	r0, r7
90003152:	f019 f88f 	bl	9001c274 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
90003156:	4b72      	ldr	r3, [pc, #456]	; (90003320 <_ZN15Screen1ViewBaseC1Ev+0x5ec>)
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
    {
        wildcard = value;
90003158:	f8c4 7384 	str.w	r7, [r4, #900]	; 0x384
9000315c:	2701      	movs	r7, #1
    textArea2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));
9000315e:	a906      	add	r1, sp, #24
90003160:	ee1b 0a90 	vmov	r0, s23
90003164:	9306      	str	r3, [sp, #24]
90003166:	f8ad 701c 	strh.w	r7, [sp, #28]
9000316a:	f013 fd04 	bl	90016b76 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    IPLayout.add(textArea2);
9000316e:	ee1b 1a90 	vmov	r1, s23
90003172:	4640      	mov	r0, r8
90003174:	f011 f8c2 	bl	900142fc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    swipeContainer1.add(IPLayout);
90003178:	4641      	mov	r1, r8
9000317a:	4630      	mov	r0, r6
    buttonOpen.setAction(buttonCallback);
9000317c:	f204 5884 	addw	r8, r4, #1412	; 0x584
    swipeContainer1.add(IPLayout);
90003180:	f011 fbd8 	bl	90014934 <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>
90003184:	4a67      	ldr	r2, [pc, #412]	; (90003324 <_ZN15Screen1ViewBaseC1Ev+0x5f0>)
    box3.setPosition(0, 0, 480, 272);
90003186:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
9000318a:	4629      	mov	r1, r5
9000318c:	f8c4 2390 	str.w	r2, [r4, #912]	; 0x390
90003190:	f44f 7288 	mov.w	r2, #272	; 0x110
90003194:	ee1e 0a90 	vmov	r0, s29
90003198:	9200      	str	r2, [sp, #0]
9000319a:	462a      	mov	r2, r5
9000319c:	f7ff fd15 	bl	90002bca <_ZN8touchgfx8Drawable11setPositionEssss>
    box3.setColor(touchgfx::Color::getColorFrom24BitRGB(203, 41, 224));
900031a0:	22e0      	movs	r2, #224	; 0xe0
900031a2:	2129      	movs	r1, #41	; 0x29
900031a4:	20cb      	movs	r0, #203	; 0xcb
900031a6:	f7ff fda3 	bl	90002cf0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    GaugeLayout.add(box3);
900031aa:	ee1e 1a90 	vmov	r1, s29
        this->color = color;
900031ae:	f8c4 03dc 	str.w	r0, [r4, #988]	; 0x3dc
900031b2:	ee1c 0a10 	vmov	r0, s24
900031b6:	f011 f8a1 	bl	900142fc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    buttonOpen.setXY(155, 158);
900031ba:	ee1a 0a10 	vmov	r0, s20
900031be:	229e      	movs	r2, #158	; 0x9e
900031c0:	219b      	movs	r1, #155	; 0x9b
900031c2:	f7ff fcf5 	bl	90002bb0 <_ZN8touchgfx8Drawable5setXYEss>
    buttonOpen.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
900031c6:	aa06      	add	r2, sp, #24
900031c8:	a905      	add	r1, sp, #20
900031ca:	ee1a 0a10 	vmov	r0, s20
900031ce:	f8ad 5014 	strh.w	r5, [sp, #20]
900031d2:	f8ad 7018 	strh.w	r7, [sp, #24]
900031d6:	f013 fee4 	bl	90016fa2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
900031da:	2304      	movs	r3, #4
        updateTextPosition();
900031dc:	ee1a 0a10 	vmov	r0, s20
900031e0:	f8a4 3418 	strh.w	r3, [r4, #1048]	; 0x418
900031e4:	f7ff fd34 	bl	90002c50 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    buttonOpen.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
900031e8:	22ff      	movs	r2, #255	; 0xff
900031ea:	4611      	mov	r1, r2
900031ec:	4610      	mov	r0, r2
900031ee:	f7ff fd7f 	bl	90002cf0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    buttonOpen.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
900031f2:	22ff      	movs	r2, #255	; 0xff
        color = col;
900031f4:	f8c4 041c 	str.w	r0, [r4, #1052]	; 0x41c
900031f8:	4611      	mov	r1, r2
900031fa:	4610      	mov	r0, r2
900031fc:	f7ff fd78 	bl	90002cf0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    GaugeLayout.add(buttonOpen);
90003200:	ee1a 1a10 	vmov	r1, s20
        colorPressed = col;
90003204:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
90003208:	ee1c 0a10 	vmov	r0, s24
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
9000320c:	f8c4 8408 	str.w	r8, [r4, #1032]	; 0x408
90003210:	f011 f874 	bl	900142fc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    swipeContainer1.add(GaugeLayout);
90003214:	ee1c 1a10 	vmov	r1, s24
90003218:	4630      	mov	r0, r6
9000321a:	f011 fb8b 	bl	90014934 <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>
    swipeContainer1.setSelectedPage(0);
9000321e:	4629      	mov	r1, r5
90003220:	4630      	mov	r0, r6
90003222:	f011 fb37 	bl	90014894 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
    informationWindow.setBackground(touchgfx::BitmapId(BITMAP_DARK_BACKGROUNDS_MAIN_BG_PORTRAIT_TEXTURE_272X480PX_ID), 104, -104);
90003226:	2304      	movs	r3, #4
90003228:	a906      	add	r1, sp, #24
9000322a:	4650      	mov	r0, sl
9000322c:	f8ad 3018 	strh.w	r3, [sp, #24]
90003230:	2268      	movs	r2, #104	; 0x68
90003232:	f06f 0367 	mvn.w	r3, #103	; 0x67
90003236:	f010 fedb 	bl	90013ff0 <_ZN8touchgfx11ModalWindow13setBackgroundERKtss>
    informationWindow.setShadeColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
9000323a:	22ff      	movs	r2, #255	; 0xff
9000323c:	4611      	mov	r1, r2
9000323e:	4610      	mov	r0, r2
90003240:	f7ff fd56 	bl	90002cf0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
90003244:	4601      	mov	r1, r0
90003246:	4650      	mov	r0, sl
90003248:	f010 febf 	bl	90013fca <_ZN8touchgfx11ModalWindow13setShadeColorENS_9colortypeE>
    informationWindow.setShadeAlpha(0);
9000324c:	4629      	mov	r1, r5
9000324e:	4650      	mov	r0, sl
90003250:	f010 febf 	bl	90013fd2 <_ZN8touchgfx11ModalWindow13setShadeAlphaEh>
    informationWindow.hide();
90003254:	4650      	mov	r0, sl
90003256:	f010 feae 	bl	90013fb6 <_ZN8touchgfx11ModalWindow4hideEv>
    buttonClose.setXY(50, 271);
9000325a:	4649      	mov	r1, r9
9000325c:	ee1a 0a90 	vmov	r0, s21
90003260:	f240 120f 	movw	r2, #271	; 0x10f
90003264:	f7ff fca4 	bl	90002bb0 <_ZN8touchgfx8Drawable5setXYEss>
    buttonClose.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
90003268:	a905      	add	r1, sp, #20
9000326a:	aa06      	add	r2, sp, #24
9000326c:	ee1a 0a90 	vmov	r0, s21
90003270:	f8ad 5014 	strh.w	r5, [sp, #20]
90003274:	f8ad 7018 	strh.w	r7, [sp, #24]
90003278:	f013 fe93 	bl	90016fa2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
9000327c:	f04f 0203 	mov.w	r2, #3
        updateTextPosition();
90003280:	ee1a 0a90 	vmov	r0, s21
90003284:	f8a4 2510 	strh.w	r2, [r4, #1296]	; 0x510
90003288:	f7ff fce2 	bl	90002c50 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    buttonClose.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
9000328c:	22ff      	movs	r2, #255	; 0xff
9000328e:	4611      	mov	r1, r2
90003290:	4610      	mov	r0, r2
90003292:	f7ff fd2d 	bl	90002cf0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    buttonClose.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
90003296:	22ff      	movs	r2, #255	; 0xff
        color = col;
90003298:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
9000329c:	4611      	mov	r1, r2
9000329e:	4610      	mov	r0, r2
900032a0:	f7ff fd26 	bl	90002cf0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
    informationWindow.add(buttonClose);
900032a4:	ee1a 1a90 	vmov	r1, s21
        colorPressed = col;
900032a8:	f8c4 0518 	str.w	r0, [r4, #1304]	; 0x518
900032ac:	4650      	mov	r0, sl
900032ae:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
900032b2:	f010 fe87 	bl	90013fc4 <_ZN8touchgfx11ModalWindow3addERNS_8DrawableE>
    textArea3.setXY(29, 177);
900032b6:	ee1c 0a90 	vmov	r0, s25
900032ba:	22b1      	movs	r2, #177	; 0xb1
900032bc:	211d      	movs	r1, #29
900032be:	f7ff fc77 	bl	90002bb0 <_ZN8touchgfx8Drawable5setXYEss>
    textArea3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
900032c2:	22ff      	movs	r2, #255	; 0xff
900032c4:	4611      	mov	r1, r2
900032c6:	4610      	mov	r0, r2
900032c8:	f7ff fd12 	bl	90002cf0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
        : typedTextId(id)
900032cc:	4b14      	ldr	r3, [pc, #80]	; (90003320 <_ZN15Screen1ViewBaseC1Ev+0x5ec>)
    textArea3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID6));
900032ce:	a906      	add	r1, sp, #24
        this->color = color;
900032d0:	f8c4 0550 	str.w	r0, [r4, #1360]	; 0x550
        linespace = space;
900032d4:	f8a4 5554 	strh.w	r5, [r4, #1364]	; 0x554
900032d8:	ee1c 0a90 	vmov	r0, s25
900032dc:	9306      	str	r3, [sp, #24]
900032de:	f8ad b01c 	strh.w	fp, [sp, #28]
900032e2:	f013 fc48 	bl	90016b76 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    informationWindow.add(textArea3);
900032e6:	ee1c 1a90 	vmov	r1, s25
900032ea:	4650      	mov	r0, sl
900032ec:	f010 fe6a 	bl	90013fc4 <_ZN8touchgfx11ModalWindow3addERNS_8DrawableE>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
900032f0:	1d20      	adds	r0, r4, #4
900032f2:	ee19 1a90 	vmov	r1, s19
900032f6:	9003      	str	r0, [sp, #12]
900032f8:	f011 f800 	bl	900142fc <_ZN8touchgfx9Container3addERNS_8DrawableE>
900032fc:	4631      	mov	r1, r6
900032fe:	9803      	ldr	r0, [sp, #12]
90003300:	f010 fffc 	bl	900142fc <_ZN8touchgfx9Container3addERNS_8DrawableE>
90003304:	9803      	ldr	r0, [sp, #12]
90003306:	4651      	mov	r1, sl
90003308:	f010 fff8 	bl	900142fc <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
9000330c:	4620      	mov	r0, r4
9000330e:	b009      	add	sp, #36	; 0x24
90003310:	ecbd 8b0e 	vpop	{d8-d14}
90003314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90003318:	20026d38 	.word	0x20026d38
9000331c:	9002af3b 	.word	0x9002af3b
90003320:	9002a954 	.word	0x9002a954
90003324:	011001e0 	.word	0x011001e0

90003328 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
90003328:	4b04      	ldr	r3, [pc, #16]	; (9000333c <_ZN15Screen1ViewBaseD1Ev+0x14>)
9000332a:	b510      	push	{r4, lr}
9000332c:	4604      	mov	r4, r0
9000332e:	f840 3b6c 	str.w	r3, [r0], #108
90003332:	f011 f923 	bl	9001457c <_ZN8touchgfx14SwipeContainerD1Ev>
90003336:	4620      	mov	r0, r4
90003338:	bd10      	pop	{r4, pc}
9000333a:	bf00      	nop
9000333c:	9002af60 	.word	0x9002af60

90003340 <_ZN15Screen1ViewBaseD0Ev>:
90003340:	b510      	push	{r4, lr}
90003342:	4604      	mov	r4, r0
90003344:	f7ff fff0 	bl	90003328 <_ZN15Screen1ViewBaseD1Ev>
90003348:	f240 5194 	movw	r1, #1428	; 0x594
9000334c:	4620      	mov	r0, r4
9000334e:	f024 fe95 	bl	9002807c <_ZdlPvj>
90003352:	4620      	mov	r0, r4
90003354:	bd10      	pop	{r4, pc}

90003356 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
90003356:	4770      	bx	lr

90003358 <_Z23getFont_verdana_10_4bppv>:
{
90003358:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
9000335a:	4d14      	ldr	r5, [pc, #80]	; (900033ac <_Z23getFont_verdana_10_4bppv+0x54>)
{
9000335c:	b08b      	sub	sp, #44	; 0x2c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
9000335e:	782c      	ldrb	r4, [r5, #0]
90003360:	f3bf 8f5b 	dmb	ish
90003364:	f014 0401 	ands.w	r4, r4, #1
90003368:	d11d      	bne.n	900033a6 <_Z23getFont_verdana_10_4bppv+0x4e>
9000336a:	4628      	mov	r0, r5
9000336c:	f024 fe88 	bl	90028080 <__cxa_guard_acquire>
90003370:	b1c8      	cbz	r0, 900033a6 <_Z23getFont_verdana_10_4bppv+0x4e>
90003372:	233f      	movs	r3, #63	; 0x3f
90003374:	2201      	movs	r2, #1
90003376:	490e      	ldr	r1, [pc, #56]	; (900033b0 <_Z23getFont_verdana_10_4bppv+0x58>)
90003378:	9307      	str	r3, [sp, #28]
9000337a:	4b0e      	ldr	r3, [pc, #56]	; (900033b4 <_Z23getFont_verdana_10_4bppv+0x5c>)
9000337c:	480e      	ldr	r0, [pc, #56]	; (900033b8 <_Z23getFont_verdana_10_4bppv+0x60>)
9000337e:	9306      	str	r3, [sp, #24]
90003380:	4b0e      	ldr	r3, [pc, #56]	; (900033bc <_Z23getFont_verdana_10_4bppv+0x64>)
90003382:	9403      	str	r4, [sp, #12]
90003384:	9400      	str	r4, [sp, #0]
90003386:	e9cd 4304 	strd	r4, r3, [sp, #16]
9000338a:	2304      	movs	r3, #4
9000338c:	e9cd 4408 	strd	r4, r4, [sp, #32]
90003390:	e9cd 3201 	strd	r3, r2, [sp, #4]
90003394:	230a      	movs	r3, #10
90003396:	f7ff fb6b 	bl	90002a70 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
9000339a:	4628      	mov	r0, r5
9000339c:	f024 fe7c 	bl	90028098 <__cxa_guard_release>
900033a0:	4807      	ldr	r0, [pc, #28]	; (900033c0 <_Z23getFont_verdana_10_4bppv+0x68>)
900033a2:	f025 fc65 	bl	90028c70 <atexit>
    return verdana_10_4bpp;
}
900033a6:	4804      	ldr	r0, [pc, #16]	; (900033b8 <_Z23getFont_verdana_10_4bppv+0x60>)
900033a8:	b00b      	add	sp, #44	; 0x2c
900033aa:	bd30      	pop	{r4, r5, pc}
900033ac:	20004680 	.word	0x20004680
900033b0:	90101ab8 	.word	0x90101ab8
900033b4:	90031478 	.word	0x90031478
900033b8:	20004684 	.word	0x20004684
900033bc:	9002af8c 	.word	0x9002af8c
900033c0:	90003357 	.word	0x90003357

900033c4 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 88, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
900033c4:	4770      	bx	lr
	...

900033c8 <_Z23getFont_verdana_20_4bppv>:
{
900033c8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 88, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
900033ca:	4d15      	ldr	r5, [pc, #84]	; (90003420 <_Z23getFont_verdana_20_4bppv+0x58>)
{
900033cc:	b08b      	sub	sp, #44	; 0x2c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 88, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
900033ce:	782c      	ldrb	r4, [r5, #0]
900033d0:	f3bf 8f5b 	dmb	ish
900033d4:	f014 0401 	ands.w	r4, r4, #1
900033d8:	d11e      	bne.n	90003418 <_Z23getFont_verdana_20_4bppv+0x50>
900033da:	4628      	mov	r0, r5
900033dc:	f024 fe50 	bl	90028080 <__cxa_guard_acquire>
900033e0:	b1d0      	cbz	r0, 90003418 <_Z23getFont_verdana_20_4bppv+0x50>
900033e2:	233f      	movs	r3, #63	; 0x3f
900033e4:	2258      	movs	r2, #88	; 0x58
900033e6:	490f      	ldr	r1, [pc, #60]	; (90003424 <_Z23getFont_verdana_20_4bppv+0x5c>)
900033e8:	9307      	str	r3, [sp, #28]
900033ea:	4b0f      	ldr	r3, [pc, #60]	; (90003428 <_Z23getFont_verdana_20_4bppv+0x60>)
900033ec:	480f      	ldr	r0, [pc, #60]	; (9000342c <_Z23getFont_verdana_20_4bppv+0x64>)
900033ee:	9306      	str	r3, [sp, #24]
900033f0:	4b0f      	ldr	r3, [pc, #60]	; (90003430 <_Z23getFont_verdana_20_4bppv+0x68>)
900033f2:	9305      	str	r3, [sp, #20]
900033f4:	2301      	movs	r3, #1
900033f6:	e9cd 3303 	strd	r3, r3, [sp, #12]
900033fa:	9302      	str	r3, [sp, #8]
900033fc:	2304      	movs	r3, #4
900033fe:	e9cd 4408 	strd	r4, r4, [sp, #32]
90003402:	e9cd 3300 	strd	r3, r3, [sp]
90003406:	2314      	movs	r3, #20
90003408:	f7ff fb32 	bl	90002a70 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
9000340c:	4628      	mov	r0, r5
9000340e:	f024 fe43 	bl	90028098 <__cxa_guard_release>
90003412:	4808      	ldr	r0, [pc, #32]	; (90003434 <_Z23getFont_verdana_20_4bppv+0x6c>)
90003414:	f025 fc2c 	bl	90028c70 <atexit>
    return verdana_20_4bpp;
}
90003418:	4804      	ldr	r0, [pc, #16]	; (9000342c <_Z23getFont_verdana_20_4bppv+0x64>)
9000341a:	b00b      	add	sp, #44	; 0x2c
9000341c:	bd30      	pop	{r4, r5, pc}
9000341e:	bf00      	nop
90003420:	200046a8 	.word	0x200046a8
90003424:	90101ac8 	.word	0x90101ac8
90003428:	9003147c 	.word	0x9003147c
9000342c:	200046ac 	.word	0x200046ac
90003430:	9002af90 	.word	0x9002af90
90003434:	900033c5 	.word	0x900033c5

90003438 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
90003438:	4770      	bx	lr
	...

9000343c <_Z23getFont_verdana_40_4bppv>:
{
9000343c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
9000343e:	4d14      	ldr	r5, [pc, #80]	; (90003490 <_Z23getFont_verdana_40_4bppv+0x54>)
{
90003440:	b08b      	sub	sp, #44	; 0x2c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
90003442:	782c      	ldrb	r4, [r5, #0]
90003444:	f3bf 8f5b 	dmb	ish
90003448:	f014 0401 	ands.w	r4, r4, #1
9000344c:	d11d      	bne.n	9000348a <_Z23getFont_verdana_40_4bppv+0x4e>
9000344e:	4628      	mov	r0, r5
90003450:	f024 fe16 	bl	90028080 <__cxa_guard_acquire>
90003454:	b1c8      	cbz	r0, 9000348a <_Z23getFont_verdana_40_4bppv+0x4e>
90003456:	233f      	movs	r3, #63	; 0x3f
90003458:	2201      	movs	r2, #1
9000345a:	490e      	ldr	r1, [pc, #56]	; (90003494 <_Z23getFont_verdana_40_4bppv+0x58>)
9000345c:	9307      	str	r3, [sp, #28]
9000345e:	4b0e      	ldr	r3, [pc, #56]	; (90003498 <_Z23getFont_verdana_40_4bppv+0x5c>)
90003460:	480e      	ldr	r0, [pc, #56]	; (9000349c <_Z23getFont_verdana_40_4bppv+0x60>)
90003462:	9306      	str	r3, [sp, #24]
90003464:	4b0e      	ldr	r3, [pc, #56]	; (900034a0 <_Z23getFont_verdana_40_4bppv+0x64>)
90003466:	9403      	str	r4, [sp, #12]
90003468:	9400      	str	r4, [sp, #0]
9000346a:	e9cd 4304 	strd	r4, r3, [sp, #16]
9000346e:	2304      	movs	r3, #4
90003470:	e9cd 4408 	strd	r4, r4, [sp, #32]
90003474:	e9cd 3201 	strd	r3, r2, [sp, #4]
90003478:	2328      	movs	r3, #40	; 0x28
9000347a:	f7ff faf9 	bl	90002a70 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
9000347e:	4628      	mov	r0, r5
90003480:	f024 fe0a 	bl	90028098 <__cxa_guard_release>
90003484:	4807      	ldr	r0, [pc, #28]	; (900034a4 <_Z23getFont_verdana_40_4bppv+0x68>)
90003486:	f025 fbf3 	bl	90028c70 <atexit>
    return verdana_40_4bpp;
}
9000348a:	4804      	ldr	r0, [pc, #16]	; (9000349c <_Z23getFont_verdana_40_4bppv+0x60>)
9000348c:	b00b      	add	sp, #44	; 0x2c
9000348e:	bd30      	pop	{r4, r5, pc}
90003490:	200046d0 	.word	0x200046d0
90003494:	90101f98 	.word	0x90101f98
90003498:	9003161c 	.word	0x9003161c
9000349c:	200046d4 	.word	0x200046d4
900034a0:	9002af94 	.word	0x9002af94
900034a4:	90003439 	.word	0x90003439

900034a8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
900034a8:	2000      	movs	r0, #0
900034aa:	4770      	bx	lr

900034ac <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
900034ac:	b40e      	push	{r1, r2, r3}
900034ae:	b503      	push	{r0, r1, lr}
900034b0:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
900034b2:	2100      	movs	r1, #0
{
900034b4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
900034b8:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
900034ba:	f016 fc11 	bl	90019ce0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
900034be:	b002      	add	sp, #8
900034c0:	f85d eb04 	ldr.w	lr, [sp], #4
900034c4:	b003      	add	sp, #12
900034c6:	4770      	bx	lr

900034c8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
900034c8:	b40c      	push	{r2, r3}
900034ca:	b507      	push	{r0, r1, r2, lr}
900034cc:	ab04      	add	r3, sp, #16
900034ce:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
900034d2:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
900034d4:	f016 fc04 	bl	90019ce0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
900034d8:	b003      	add	sp, #12
900034da:	f85d eb04 	ldr.w	lr, [sp], #4
900034de:	b002      	add	sp, #8
900034e0:	4770      	bx	lr
	...

900034e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
900034e4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
900034e6:	b510      	push	{r4, lr}
900034e8:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
900034ea:	b373      	cbz	r3, 9000354a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
900034ec:	8e03      	ldrh	r3, [r0, #48]	; 0x30
900034ee:	b92b      	cbnz	r3, 900034fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
900034f0:	4b18      	ldr	r3, [pc, #96]	; (90003554 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
900034f2:	21c0      	movs	r1, #192	; 0xc0
900034f4:	4a18      	ldr	r2, [pc, #96]	; (90003558 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
900034f6:	4819      	ldr	r0, [pc, #100]	; (9000355c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
900034f8:	f025 fb9c 	bl	90028c34 <__assert_func>
            return buffer[pos];
900034fc:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
900034fe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
90003502:	8b5b      	ldrh	r3, [r3, #26]
90003504:	b30b      	cbz	r3, 9000354a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
90003506:	f017 ffab 	bl	9001b460 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
9000350a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
9000350c:	2b01      	cmp	r3, #1
9000350e:	d803      	bhi.n	90003518 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
90003510:	4b13      	ldr	r3, [pc, #76]	; (90003560 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
90003512:	21c5      	movs	r1, #197	; 0xc5
90003514:	4a13      	ldr	r2, [pc, #76]	; (90003564 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
90003516:	e7ee      	b.n	900034f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
90003518:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
9000351a:	f640 103f 	movw	r0, #2367	; 0x93f
9000351e:	1c53      	adds	r3, r2, #1
90003520:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
90003522:	2b09      	cmp	r3, #9
90003524:	4619      	mov	r1, r3
90003526:	bf88      	it	hi
90003528:	f1a3 010a 	subhi.w	r1, r3, #10
9000352c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
90003530:	8b49      	ldrh	r1, [r1, #26]
90003532:	4281      	cmp	r1, r0
90003534:	d109      	bne.n	9000354a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
90003536:	2b0a      	cmp	r3, #10
90003538:	eb04 0242 	add.w	r2, r4, r2, lsl #1
9000353c:	bf28      	it	cs
9000353e:	2300      	movcs	r3, #0
            return buffer[pos];
90003540:	8b50      	ldrh	r0, [r2, #26]
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
90003542:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90003546:	8358      	strh	r0, [r3, #26]
            buffer[pos] = newChar;
90003548:	8351      	strh	r1, [r2, #26]
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
9000354a:	4620      	mov	r0, r4
}
9000354c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
90003550:	f017 be6a 	b.w	9001b228 <_ZN8touchgfx12TextProvider11getNextCharEv>
90003554:	9002af98 	.word	0x9002af98
90003558:	9002afa1 	.word	0x9002afa1
9000355c:	9002b04c 	.word	0x9002b04c
90003560:	9002b096 	.word	0x9002b096
90003564:	9002b0a4 	.word	0x9002b0a4

90003568 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
90003568:	f017 be18 	b.w	9001b19c <_ZN8touchgfx12TextProvider15fillInputBufferEv>

9000356c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
9000356c:	b510      	push	{r4, lr}
9000356e:	b086      	sub	sp, #24
90003570:	ac02      	add	r4, sp, #8
90003572:	e884 0006 	stmia.w	r4, {r1, r2}
90003576:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
90003578:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
9000357a:	4621      	mov	r1, r4
    va_start(pArg, format);
9000357c:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
9000357e:	9301      	str	r3, [sp, #4]
90003580:	9b09      	ldr	r3, [sp, #36]	; 0x24
90003582:	9300      	str	r3, [sp, #0]
90003584:	9b08      	ldr	r3, [sp, #32]
90003586:	f015 f883 	bl	90018690 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
9000358a:	b006      	add	sp, #24
9000358c:	bd10      	pop	{r4, pc}
	...

90003590 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
90003590:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
90003592:	bb18      	cbnz	r0, 900035dc <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
90003594:	4b12      	ldr	r3, [pc, #72]	; (900035e0 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
90003596:	4813      	ldr	r0, [pc, #76]	; (900035e4 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
90003598:	681b      	ldr	r3, [r3, #0]
9000359a:	4913      	ldr	r1, [pc, #76]	; (900035e8 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
9000359c:	b1b3      	cbz	r3, 900035cc <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
9000359e:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
900035a0:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
900035a2:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
900035a4:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
900035a6:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
900035a8:	685a      	ldr	r2, [r3, #4]
900035aa:	441a      	add	r2, r3
900035ac:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
900035ae:	4b0f      	ldr	r3, [pc, #60]	; (900035ec <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
900035b0:	2200      	movs	r2, #0
900035b2:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
900035b4:	f000 f838 	bl	90003628 <_ZN17TypedTextDatabase8getFontsEv>
900035b8:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
900035ba:	f000 f833 	bl	90003624 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
900035be:	4b0c      	ldr	r3, [pc, #48]	; (900035f0 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
900035c0:	601c      	str	r4, [r3, #0]
        fonts = f;
900035c2:	4b0c      	ldr	r3, [pc, #48]	; (900035f4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
900035c4:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
900035c6:	4b0c      	ldr	r3, [pc, #48]	; (900035f8 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
900035c8:	8018      	strh	r0, [r3, #0]
    }
}
900035ca:	e007      	b.n	900035dc <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
900035cc:	4b0b      	ldr	r3, [pc, #44]	; (900035fc <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
900035ce:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
900035d0:	4b0b      	ldr	r3, [pc, #44]	; (90003600 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
900035d2:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
900035d4:	4b0b      	ldr	r3, [pc, #44]	; (90003604 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
900035d6:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
900035d8:	2c00      	cmp	r4, #0
900035da:	d1e8      	bne.n	900035ae <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
900035dc:	bd38      	pop	{r3, r4, r5, pc}
900035de:	bf00      	nop
900035e0:	200046f8 	.word	0x200046f8
900035e4:	200046fc 	.word	0x200046fc
900035e8:	20004700 	.word	0x20004700
900035ec:	20004704 	.word	0x20004704
900035f0:	20026d2c 	.word	0x20026d2c
900035f4:	20026d34 	.word	0x20026d34
900035f8:	20026d30 	.word	0x20026d30
900035fc:	90101fc0 	.word	0x90101fc0
90003600:	90101fa8 	.word	0x90101fa8
90003604:	90102038 	.word	0x90102038

90003608 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
90003608:	4b04      	ldr	r3, [pc, #16]	; (9000361c <_ZNK8touchgfx5Texts7getTextEt+0x14>)
9000360a:	681b      	ldr	r3, [r3, #0]
9000360c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
90003610:	4b03      	ldr	r3, [pc, #12]	; (90003620 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
90003612:	681b      	ldr	r3, [r3, #0]
}
90003614:	eb03 0040 	add.w	r0, r3, r0, lsl #1
90003618:	4770      	bx	lr
9000361a:	bf00      	nop
9000361c:	20004700 	.word	0x20004700
90003620:	200046fc 	.word	0x200046fc

90003624 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
90003624:	2006      	movs	r0, #6
90003626:	4770      	bx	lr

90003628 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
90003628:	4800      	ldr	r0, [pc, #0]	; (9000362c <_ZN17TypedTextDatabase8getFontsEv+0x4>)
9000362a:	4770      	bx	lr
9000362c:	20004708 	.word	0x20004708

90003630 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
90003630:	b510      	push	{r4, lr}
};
90003632:	4c05      	ldr	r4, [pc, #20]	; (90003648 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
90003634:	f7ff fec8 	bl	900033c8 <_Z23getFont_verdana_20_4bppv>
};
90003638:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
9000363a:	f7ff feff 	bl	9000343c <_Z23getFont_verdana_40_4bppv>
};
9000363e:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
90003640:	f7ff fe8a 	bl	90003358 <_Z23getFont_verdana_10_4bppv>
};
90003644:	60a0      	str	r0, [r4, #8]
}  // namespace TypedTextDatabase
90003646:	bd10      	pop	{r4, pc}
90003648:	20004708 	.word	0x20004708

9000364c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
9000364c:	4770      	bx	lr

9000364e <_ZN19FrontendApplicationD0Ev>:
9000364e:	b510      	push	{r4, lr}
90003650:	4604      	mov	r4, r0
90003652:	f44f 71ac 	mov.w	r1, #344	; 0x158
90003656:	f024 fd11 	bl	9002807c <_ZdlPvj>
9000365a:	4620      	mov	r0, r4
9000365c:	bd10      	pop	{r4, pc}

9000365e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
9000365e:	b510      	push	{r4, lr}
90003660:	4604      	mov	r4, r0
    {
        model.tick();
90003662:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
90003666:	f000 f812 	bl	9000368e <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
9000366a:	4620      	mov	r0, r4
    }
9000366c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
90003670:	f015 bb72 	b.w	90018d58 <_ZN8touchgfx11Application15handleTickEventEv>

90003674 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
90003674:	b510      	push	{r4, lr}
90003676:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
90003678:	f7ff f8d6 	bl	90002828 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
9000367c:	4b01      	ldr	r3, [pc, #4]	; (90003684 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
9000367e:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
90003680:	6023      	str	r3, [r4, #0]
}
90003682:	bd10      	pop	{r4, pc}
90003684:	9002b180 	.word	0x9002b180

90003688 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
90003688:	2200      	movs	r2, #0
9000368a:	6002      	str	r2, [r0, #0]
{

}
9000368c:	4770      	bx	lr

9000368e <_ZN5Model4tickEv>:

void Model::tick()
{

}
9000368e:	4770      	bx	lr

90003690 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
90003690:	4770      	bx	lr

90003692 <_ZThn4_N16Screen1PresenterD1Ev>:
90003692:	3804      	subs	r0, #4
90003694:	4770      	bx	lr

90003696 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
90003696:	4770      	bx	lr

90003698 <_ZN16Screen1PresenterD0Ev>:
90003698:	b510      	push	{r4, lr}
9000369a:	4604      	mov	r4, r0
9000369c:	2110      	movs	r1, #16
9000369e:	f024 fced 	bl	9002807c <_ZdlPvj>
900036a2:	4620      	mov	r0, r4
900036a4:	bd10      	pop	{r4, pc}

900036a6 <_ZThn4_N16Screen1PresenterD0Ev>:
900036a6:	f1a0 0004 	sub.w	r0, r0, #4
900036aa:	e7f5      	b.n	90003698 <_ZN16Screen1PresenterD0Ev>

900036ac <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
900036ac:	2200      	movs	r2, #0
    : view(v)
900036ae:	60c1      	str	r1, [r0, #12]
900036b0:	6082      	str	r2, [r0, #8]
900036b2:	4a04      	ldr	r2, [pc, #16]	; (900036c4 <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
900036b4:	b510      	push	{r4, lr}
    : view(v)
900036b6:	f102 0408 	add.w	r4, r2, #8
900036ba:	3220      	adds	r2, #32
900036bc:	6004      	str	r4, [r0, #0]
900036be:	6042      	str	r2, [r0, #4]
}
900036c0:	bd10      	pop	{r4, pc}
900036c2:	bf00      	nop
900036c4:	9002b1bc 	.word	0x9002b1bc

900036c8 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
900036c8:	4770      	bx	lr

900036ca <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
900036ca:	f7ff ba2b 	b.w	90002b24 <_ZN15Screen1ViewBase11setupScreenEv>
	...

900036d0 <_ZN11Screen1View15handleTickEventEv>:
void Screen1View::handleTickEvent(){
	tim_tick++;
900036d0:	f8b0 3594 	ldrh.w	r3, [r0, #1428]	; 0x594
900036d4:	2205      	movs	r2, #5
900036d6:	3301      	adds	r3, #1
900036d8:	b29b      	uxth	r3, r3
900036da:	fbb3 f2f2 	udiv	r2, r3, r2
900036de:	eb02 0282 	add.w	r2, r2, r2, lsl #2
void Screen1View::handleTickEvent(){
900036e2:	b530      	push	{r4, r5, lr}
	tim_tick++;
900036e4:	f8a0 3594 	strh.w	r3, [r0, #1428]	; 0x594
900036e8:	1a9b      	subs	r3, r3, r2
void Screen1View::handleTickEvent(){
900036ea:	b08b      	sub	sp, #44	; 0x2c
900036ec:	4604      	mov	r4, r0
	if(tim_tick % 5 == 0){
900036ee:	b29b      	uxth	r3, r3
900036f0:	b9b3      	cbnz	r3, 90003720 <_ZN11Screen1View15handleTickEventEv+0x50>
		y_angel += 0.1;
900036f2:	f500 65b3 	add.w	r5, r0, #1432	; 0x598
900036f6:	6828      	ldr	r0, [r5, #0]
900036f8:	f7fc ff46 	bl	90000588 <__aeabi_f2d>
900036fc:	a318      	add	r3, pc, #96	; (adr r3, 90003760 <_ZN11Screen1View15handleTickEventEv+0x90>)
900036fe:	e9d3 2300 	ldrd	r2, r3, [r3]
90003702:	f7fc fde3 	bl	900002cc <__adddf3>
90003706:	f7fc ff97 	bl	90000638 <__aeabi_d2f>
        updateAngles(xAngle, newYAngle, zAngle);
9000370a:	ed94 1a7e 	vldr	s2, [r4, #504]	; 0x1f8
9000370e:	ee00 0a90 	vmov	s1, r0
90003712:	6028      	str	r0, [r5, #0]
90003714:	ed94 0a7c 	vldr	s0, [r4, #496]	; 0x1f0
90003718:	f504 70de 	add.w	r0, r4, #444	; 0x1bc
9000371c:	f012 fdc0 	bl	900162a0 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
		textureMapper1.updateYAngle(y_angel);
	}

	char buff[30];
	uint32_t local_IP = gnetif.ip_addr.addr;
90003720:	4b0d      	ldr	r3, [pc, #52]	; (90003758 <_ZN11Screen1View15handleTickEventEv+0x88>)
90003722:	685a      	ldr	r2, [r3, #4]
	if(local_IP>0){
90003724:	b1aa      	cbz	r2, 90003752 <_ZN11Screen1View15handleTickEventEv+0x82>
	sprintf(buff,"%d.%d.%d.%d",(local_IP & 0xff), ((local_IP >> 8) & 0xff), ((local_IP >> 16) & 0xff), (local_IP >> 24));
90003726:	0e13      	lsrs	r3, r2, #24
90003728:	490c      	ldr	r1, [pc, #48]	; (9000375c <_ZN11Screen1View15handleTickEventEv+0x8c>)
9000372a:	a802      	add	r0, sp, #8
9000372c:	9301      	str	r3, [sp, #4]
9000372e:	f3c2 4307 	ubfx	r3, r2, #16, #8
90003732:	9300      	str	r3, [sp, #0]
90003734:	f3c2 2307 	ubfx	r3, r2, #8, #8
90003738:	b2d2      	uxtb	r2, r2
9000373a:	f025 ff75 	bl	90029628 <siprintf>
	Unicode::strncpy(textArea2Buffer,(char*)buff,TEXTAREA2_SIZE-1);
9000373e:	2213      	movs	r2, #19
90003740:	a902      	add	r1, sp, #8
90003742:	f204 505c 	addw	r0, r4, #1372	; 0x55c
90003746:	f018 fa30 	bl	9001bbaa <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	textArea2.invalidate();}
9000374a:	f504 7052 	add.w	r0, r4, #840	; 0x348
9000374e:	f016 fbd1 	bl	90019ef4 <_ZNK8touchgfx8Drawable10invalidateEv>
}
90003752:	b00b      	add	sp, #44	; 0x2c
90003754:	bd30      	pop	{r4, r5, pc}
90003756:	bf00      	nop
90003758:	20026fa4 	.word	0x20026fa4
9000375c:	9002b1e4 	.word	0x9002b1e4
90003760:	9999999a 	.word	0x9999999a
90003764:	3fb99999 	.word	0x3fb99999

90003768 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
90003768:	b510      	push	{r4, lr}
9000376a:	4604      	mov	r4, r0
9000376c:	f7ff fae2 	bl	90002d34 <_ZN15Screen1ViewBaseC1Ev>
90003770:	4b05      	ldr	r3, [pc, #20]	; (90003788 <_ZN11Screen1ViewC1Ev+0x20>)
	y_angel = 0;
90003772:	2200      	movs	r2, #0
}
90003774:	4620      	mov	r0, r4
Screen1View::Screen1View()
90003776:	6023      	str	r3, [r4, #0]
	tim_tick = 0;
90003778:	2300      	movs	r3, #0
9000377a:	f8a4 3594 	strh.w	r3, [r4, #1428]	; 0x594
	y_angel = 0;
9000377e:	f504 63b3 	add.w	r3, r4, #1432	; 0x598
90003782:	601a      	str	r2, [r3, #0]
}
90003784:	bd10      	pop	{r4, pc}
90003786:	bf00      	nop
90003788:	9002b1f8 	.word	0x9002b1f8

9000378c <_ZN11Screen1ViewD1Ev>:
9000378c:	4b04      	ldr	r3, [pc, #16]	; (900037a0 <_ZN11Screen1ViewD1Ev+0x14>)

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
9000378e:	b510      	push	{r4, lr}
90003790:	4604      	mov	r4, r0
90003792:	f840 3b6c 	str.w	r3, [r0], #108
90003796:	f010 fef1 	bl	9001457c <_ZN8touchgfx14SwipeContainerD1Ev>
9000379a:	4620      	mov	r0, r4
9000379c:	bd10      	pop	{r4, pc}
9000379e:	bf00      	nop
900037a0:	9002af60 	.word	0x9002af60

900037a4 <_ZN11Screen1ViewD0Ev>:
900037a4:	b510      	push	{r4, lr}
900037a6:	4604      	mov	r4, r0
900037a8:	f7ff fff0 	bl	9000378c <_ZN11Screen1ViewD1Ev>
900037ac:	f240 519c 	movw	r1, #1436	; 0x59c
900037b0:	4620      	mov	r0, r4
900037b2:	f024 fc63 	bl	9002807c <_ZdlPvj>
900037b6:	4620      	mov	r0, r4
900037b8:	bd10      	pop	{r4, pc}

900037ba <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
900037ba:	4770      	bx	lr

900037bc <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
900037bc:	2000      	movs	r0, #0
900037be:	4770      	bx	lr

900037c0 <ft5336_ReadID>:
{
900037c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
900037c2:	2300      	movs	r3, #0
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
900037c4:	4c0f      	ldr	r4, [pc, #60]	; (90003804 <ft5336_ReadID+0x44>)
{
900037c6:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
900037c8:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
900037cc:	7823      	ldrb	r3, [r4, #0]
900037ce:	b91b      	cbnz	r3, 900037d8 <ft5336_ReadID+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
900037d0:	f000 f9ee 	bl	90003bb0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
900037d4:	2301      	movs	r3, #1
900037d6:	7023      	strb	r3, [r4, #0]
{
900037d8:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
900037da:	b2ed      	uxtb	r5, r5
900037dc:	3c01      	subs	r4, #1
900037de:	21a8      	movs	r1, #168	; 0xa8
900037e0:	4628      	mov	r0, r5
900037e2:	f000 f9f9 	bl	90003bd8 <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
900037e6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
900037ea:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
900037ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
900037f2:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
900037f4:	d103      	bne.n	900037fe <ft5336_ReadID+0x3e>
  return (ucReadId);
900037f6:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
900037fa:	b003      	add	sp, #12
900037fc:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
900037fe:	2b51      	cmp	r3, #81	; 0x51
90003800:	d1ec      	bne.n	900037dc <ft5336_ReadID+0x1c>
90003802:	e7f8      	b.n	900037f6 <ft5336_ReadID+0x36>
90003804:	20004716 	.word	0x20004716

90003808 <ft5336_TS_DetectTouch>:
{
90003808:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
9000380a:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
9000380c:	2102      	movs	r1, #2
9000380e:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
90003810:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
90003814:	f000 f9e0 	bl	90003bd8 <TS_IO_Read>
90003818:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
9000381c:	f89d 3007 	ldrb.w	r3, [sp, #7]
90003820:	f003 030f 	and.w	r3, r3, #15
90003824:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
90003828:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000382c:	2b05      	cmp	r3, #5
9000382e:	d901      	bls.n	90003834 <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
90003830:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
90003834:	f89d 2007 	ldrb.w	r2, [sp, #7]
90003838:	4b03      	ldr	r3, [pc, #12]	; (90003848 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
9000383a:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
9000383e:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
90003840:	2200      	movs	r2, #0
90003842:	709a      	strb	r2, [r3, #2]
}
90003844:	b002      	add	sp, #8
90003846:	bd10      	pop	{r4, pc}
90003848:	20004716 	.word	0x20004716

9000384c <ft5336_TS_GetXY>:
{
9000384c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
90003850:	4d2f      	ldr	r5, [pc, #188]	; (90003910 <ft5336_TS_GetXY+0xc4>)
{
90003852:	4616      	mov	r6, r2
  volatile uint8_t ucReadData = 0;
90003854:	2300      	movs	r3, #0
{
90003856:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
90003858:	78ac      	ldrb	r4, [r5, #2]
9000385a:	786a      	ldrb	r2, [r5, #1]
  volatile uint8_t ucReadData = 0;
9000385c:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
90003860:	42a2      	cmp	r2, r4
90003862:	d94d      	bls.n	90003900 <ft5336_TS_GetXY+0xb4>
    switch(ft5336_handle.currActiveTouchIdx)
90003864:	2c09      	cmp	r4, #9
90003866:	d84e      	bhi.n	90003906 <ft5336_TS_GetXY+0xba>
90003868:	eb04 0344 	add.w	r3, r4, r4, lsl #1
9000386c:	005b      	lsls	r3, r3, #1
9000386e:	b2db      	uxtb	r3, r3
90003870:	1d19      	adds	r1, r3, #4
90003872:	f103 0b03 	add.w	fp, r3, #3
90003876:	f103 0a06 	add.w	sl, r3, #6
9000387a:	3305      	adds	r3, #5
9000387c:	b2c9      	uxtb	r1, r1
9000387e:	fa5f fb8b 	uxtb.w	fp, fp
90003882:	fa5f fa8a 	uxtb.w	sl, sl
90003886:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
9000388a:	b2c4      	uxtb	r4, r0
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
9000388c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 90003914 <ft5336_TS_GetXY+0xc8>
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
90003890:	4620      	mov	r0, r4
90003892:	f000 f9a1 	bl	90003bd8 <TS_IO_Read>
90003896:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
9000389a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
9000389e:	4659      	mov	r1, fp
900038a0:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
900038a2:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
900038a6:	f000 f997 	bl	90003bd8 <TS_IO_Read>
900038aa:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
900038ae:	4651      	mov	r1, sl
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
900038b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
900038b4:	4620      	mov	r0, r4
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
900038b6:	f8b9 2000 	ldrh.w	r2, [r9]
900038ba:	021b      	lsls	r3, r3, #8
900038bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
900038c0:	4313      	orrs	r3, r2
    *X = coord;
900038c2:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
900038c4:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
900038c8:	f000 f986 	bl	90003bd8 <TS_IO_Read>
900038cc:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
900038d0:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
900038d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
900038d6:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
900038d8:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
900038dc:	f000 f97c 	bl	90003bd8 <TS_IO_Read>
900038e0:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
900038e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
900038e8:	f8b9 2000 	ldrh.w	r2, [r9]
900038ec:	021b      	lsls	r3, r3, #8
900038ee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
900038f2:	4313      	orrs	r3, r2
900038f4:	f8a9 3000 	strh.w	r3, [r9]
    *Y = coord;
900038f8:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
900038fa:	78ab      	ldrb	r3, [r5, #2]
900038fc:	3301      	adds	r3, #1
900038fe:	70ab      	strb	r3, [r5, #2]
}
90003900:	b003      	add	sp, #12
90003902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
90003906:	4698      	mov	r8, r3
90003908:	469a      	mov	sl, r3
9000390a:	469b      	mov	fp, r3
9000390c:	4619      	mov	r1, r3
9000390e:	e7bc      	b.n	9000388a <ft5336_TS_GetXY+0x3e>
90003910:	20004716 	.word	0x20004716
90003914:	20004714 	.word	0x20004714

90003918 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
90003918:	2201      	movs	r2, #1
9000391a:	21a4      	movs	r1, #164	; 0xa4
9000391c:	b2c0      	uxtb	r0, r0
9000391e:	f000 b949 	b.w	90003bb4 <TS_IO_Write>

90003922 <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
90003922:	2200      	movs	r2, #0
90003924:	21a4      	movs	r1, #164	; 0xa4
90003926:	b2c0      	uxtb	r0, r0
90003928:	f000 b944 	b.w	90003bb4 <TS_IO_Write>

9000392c <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
9000392c:	f7ff bff9 	b.w	90003922 <ft5336_TS_DisableIT>

90003930 <ft5336_TS_ClearIT>:
90003930:	4770      	bx	lr
	...

90003934 <ft5336_Init>:
{
90003934:	b510      	push	{r4, lr}
  return(ft5336_handle.i2cInitialized);
90003936:	4c05      	ldr	r4, [pc, #20]	; (9000394c <ft5336_Init+0x18>)
  TS_IO_Delay(200);
90003938:	20c8      	movs	r0, #200	; 0xc8
9000393a:	f000 f963 	bl	90003c04 <TS_IO_Delay>
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
9000393e:	7823      	ldrb	r3, [r4, #0]
90003940:	b91b      	cbnz	r3, 9000394a <ft5336_Init+0x16>
    TS_IO_Init();
90003942:	f000 f935 	bl	90003bb0 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
90003946:	2301      	movs	r3, #1
90003948:	7023      	strb	r3, [r4, #0]
}
9000394a:	bd10      	pop	{r4, pc}
9000394c:	20004716 	.word	0x20004716

90003950 <ft5336_TS_GetGestureID>:
  volatile uint8_t ucReadData = 0;
90003950:	2300      	movs	r3, #0
{
90003952:	b513      	push	{r0, r1, r4, lr}
90003954:	460c      	mov	r4, r1
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
90003956:	b2c0      	uxtb	r0, r0
90003958:	2101      	movs	r1, #1
  volatile uint8_t ucReadData = 0;
9000395a:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
9000395e:	f000 f93b 	bl	90003bd8 <TS_IO_Read>
90003962:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
90003966:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000396a:	6023      	str	r3, [r4, #0]
}
9000396c:	b002      	add	sp, #8
9000396e:	bd10      	pop	{r4, pc}

90003970 <ft5336_TS_GetTouchInfo>:
{
90003970:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90003974:	461d      	mov	r5, r3
  if(touchIdx < ft5336_handle.currActiveTouchNb)
90003976:	4b1d      	ldr	r3, [pc, #116]	; (900039ec <ft5336_TS_GetTouchInfo+0x7c>)
  volatile uint8_t ucReadData = 0;
90003978:	2400      	movs	r4, #0
{
9000397a:	4616      	mov	r6, r2
  if(touchIdx < ft5336_handle.currActiveTouchNb)
9000397c:	785b      	ldrb	r3, [r3, #1]
  volatile uint8_t ucReadData = 0;
9000397e:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
90003982:	428b      	cmp	r3, r1
90003984:	d92c      	bls.n	900039e0 <ft5336_TS_GetTouchInfo+0x70>
    switch(touchIdx)
90003986:	2909      	cmp	r1, #9
90003988:	d82d      	bhi.n	900039e6 <ft5336_TS_GetTouchInfo+0x76>
9000398a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9000398e:	004c      	lsls	r4, r1, #1
90003990:	b2e4      	uxtb	r4, r4
90003992:	1ce1      	adds	r1, r4, #3
90003994:	1de7      	adds	r7, r4, #7
90003996:	3408      	adds	r4, #8
90003998:	b2c9      	uxtb	r1, r1
9000399a:	b2ff      	uxtb	r7, r7
9000399c:	b2e4      	uxtb	r4, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
9000399e:	fa5f f880 	uxtb.w	r8, r0
900039a2:	4640      	mov	r0, r8
900039a4:	f000 f918 	bl	90003bd8 <TS_IO_Read>
900039a8:	f88d 0007 	strb.w	r0, [sp, #7]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
900039ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
900039b0:	4639      	mov	r1, r7
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
900039b2:	9a08      	ldr	r2, [sp, #32]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
900039b4:	4640      	mov	r0, r8
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
900039b6:	099b      	lsrs	r3, r3, #6
900039b8:	6013      	str	r3, [r2, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
900039ba:	f000 f90d 	bl	90003bd8 <TS_IO_Read>
900039be:	f88d 0007 	strb.w	r0, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
900039c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
900039c6:	4621      	mov	r1, r4
900039c8:	4640      	mov	r0, r8
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
900039ca:	6033      	str	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
900039cc:	f000 f904 	bl	90003bd8 <TS_IO_Read>
900039d0:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
900039d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
900039d8:	0912      	lsrs	r2, r2, #4
900039da:	f002 0204 	and.w	r2, r2, #4
900039de:	602a      	str	r2, [r5, #0]
}
900039e0:	b002      	add	sp, #8
900039e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(touchIdx < ft5336_handle.currActiveTouchNb)
900039e6:	4627      	mov	r7, r4
900039e8:	4621      	mov	r1, r4
900039ea:	e7d8      	b.n	9000399e <ft5336_TS_GetTouchInfo+0x2e>
900039ec:	20004716 	.word	0x20004716

900039f0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
900039f0:	b570      	push	{r4, r5, r6, lr}
900039f2:	b08a      	sub	sp, #40	; 0x28
900039f4:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
900039f6:	f001 ff95 	bl	90005924 <HAL_I2C_GetState>
900039fa:	2800      	cmp	r0, #0
900039fc:	d155      	bne.n	90003aaa <I2Cx_Init+0xba>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
900039fe:	4b4a      	ldr	r3, [pc, #296]	; (90003b28 <I2Cx_Init+0x138>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
90003a00:	2600      	movs	r6, #0
90003a02:	4c4a      	ldr	r4, [pc, #296]	; (90003b2c <I2Cx_Init+0x13c>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
90003a04:	429d      	cmp	r5, r3
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
90003a06:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
90003a08:	bf0c      	ite	eq
90003a0a:	4a49      	ldreq	r2, [pc, #292]	; (90003b30 <I2Cx_Init+0x140>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
90003a0c:	4a49      	ldrne	r2, [pc, #292]	; (90003b34 <I2Cx_Init+0x144>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
90003a0e:	429d      	cmp	r5, r3
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
90003a10:	602a      	str	r2, [r5, #0]
    i2c_handler->Init.OwnAddress1      = 0;
90003a12:	4a49      	ldr	r2, [pc, #292]	; (90003b38 <I2Cx_Init+0x148>)
90003a14:	e9c5 2601 	strd	r2, r6, [r5, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
90003a18:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90003a1c:	e9c5 6607 	strd	r6, r6, [r5, #28]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
90003a20:	e9c5 2603 	strd	r2, r6, [r5, #12]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
90003a24:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
90003a26:	d142      	bne.n	90003aae <I2Cx_Init+0xbe>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
90003a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
90003a2c:	2080      	movs	r0, #128	; 0x80
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
90003a2e:	f04f 0c02 	mov.w	ip, #2
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90003a32:	a905      	add	r1, sp, #20
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
90003a34:	6323      	str	r3, [r4, #48]	; 0x30
90003a36:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
90003a38:	9607      	str	r6, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
90003a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
90003a3e:	9301      	str	r3, [sp, #4]
90003a40:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
90003a42:	2312      	movs	r3, #18
90003a44:	e9cd 0305 	strd	r0, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
90003a48:	2304      	movs	r3, #4
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90003a4a:	483c      	ldr	r0, [pc, #240]	; (90003b3c <I2Cx_Init+0x14c>)
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
90003a4c:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90003a50:	f001 fab2 	bl	90004fb8 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
90003a54:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90003a58:	a905      	add	r1, sp, #20
90003a5a:	4838      	ldr	r0, [pc, #224]	; (90003b3c <I2Cx_Init+0x14c>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
90003a5c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90003a5e:	f001 faab 	bl	90004fb8 <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
90003a62:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
90003a64:	4632      	mov	r2, r6
90003a66:	210f      	movs	r1, #15
90003a68:	2048      	movs	r0, #72	; 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
90003a6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
90003a6e:	6423      	str	r3, [r4, #64]	; 0x40
90003a70:	6c23      	ldr	r3, [r4, #64]	; 0x40
90003a72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
90003a76:	9302      	str	r3, [sp, #8]
90003a78:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
90003a7a:	6a23      	ldr	r3, [r4, #32]
90003a7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
90003a80:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
90003a82:	6a23      	ldr	r3, [r4, #32]
90003a84:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
90003a88:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
90003a8a:	f000 fbbb 	bl	90004204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
90003a8e:	2048      	movs	r0, #72	; 0x48
90003a90:	f000 fbea 	bl	90004268 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
90003a94:	2049      	movs	r0, #73	; 0x49
90003a96:	4632      	mov	r2, r6
90003a98:	210f      	movs	r1, #15
90003a9a:	f000 fbb3 	bl	90004204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
90003a9e:	2049      	movs	r0, #73	; 0x49
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
90003aa0:	f000 fbe2 	bl	90004268 <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
90003aa4:	4628      	mov	r0, r5
90003aa6:	f001 fd60 	bl	9000556a <HAL_I2C_Init>
  }
}
90003aaa:	b00a      	add	sp, #40	; 0x28
90003aac:	bd70      	pop	{r4, r5, r6, pc}
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
90003aae:	f043 0302 	orr.w	r3, r3, #2
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
90003ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
90003ab6:	2102      	movs	r1, #2
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90003ab8:	4821      	ldr	r0, [pc, #132]	; (90003b40 <I2Cx_Init+0x150>)
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
90003aba:	6323      	str	r3, [r4, #48]	; 0x30
90003abc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
90003abe:	9607      	str	r6, [sp, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
90003ac0:	f003 0302 	and.w	r3, r3, #2
90003ac4:	9303      	str	r3, [sp, #12]
90003ac6:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
90003ac8:	2312      	movs	r3, #18
90003aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
90003ace:	2304      	movs	r3, #4
90003ad0:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90003ad4:	a905      	add	r1, sp, #20
90003ad6:	f001 fa6f 	bl	90004fb8 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
90003ada:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90003ade:	a905      	add	r1, sp, #20
90003ae0:	4817      	ldr	r0, [pc, #92]	; (90003b40 <I2Cx_Init+0x150>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
90003ae2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
90003ae4:	f001 fa68 	bl	90004fb8 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
90003ae8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
90003aea:	4632      	mov	r2, r6
90003aec:	210f      	movs	r1, #15
90003aee:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
90003af0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
90003af4:	6423      	str	r3, [r4, #64]	; 0x40
90003af6:	6c23      	ldr	r3, [r4, #64]	; 0x40
90003af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90003afc:	9304      	str	r3, [sp, #16]
90003afe:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
90003b00:	6a23      	ldr	r3, [r4, #32]
90003b02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
90003b06:	6223      	str	r3, [r4, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
90003b08:	6a23      	ldr	r3, [r4, #32]
90003b0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
90003b0e:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
90003b10:	f000 fb78 	bl	90004204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
90003b14:	201f      	movs	r0, #31
90003b16:	f000 fba7 	bl	90004268 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
90003b1a:	2020      	movs	r0, #32
90003b1c:	4632      	mov	r2, r6
90003b1e:	210f      	movs	r1, #15
90003b20:	f000 fb70 	bl	90004204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
90003b24:	2020      	movs	r0, #32
90003b26:	e7bb      	b.n	90003aa0 <I2Cx_Init+0xb0>
90003b28:	2000471c 	.word	0x2000471c
90003b2c:	40023800 	.word	0x40023800
90003b30:	40005c00 	.word	0x40005c00
90003b34:	40005400 	.word	0x40005400
90003b38:	40912732 	.word	0x40912732
90003b3c:	40021c00 	.word	0x40021c00
90003b40:	40020400 	.word	0x40020400

90003b44 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
90003b44:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
90003b46:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
90003b4a:	b085      	sub	sp, #20
90003b4c:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
90003b4e:	9402      	str	r4, [sp, #8]
90003b50:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
90003b54:	9401      	str	r4, [sp, #4]
90003b56:	9c08      	ldr	r4, [sp, #32]
90003b58:	9400      	str	r4, [sp, #0]
90003b5a:	f001 fd71 	bl	90005640 <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
90003b5e:	4604      	mov	r4, r0
90003b60:	b128      	cbz	r0, 90003b6e <I2Cx_WriteMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
90003b62:	4628      	mov	r0, r5
90003b64:	f001 fd53 	bl	9000560e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
90003b68:	4628      	mov	r0, r5
90003b6a:	f7ff ff41 	bl	900039f0 <I2Cx_Init>
}
90003b6e:	4620      	mov	r0, r4
90003b70:	b005      	add	sp, #20
90003b72:	bd30      	pop	{r4, r5, pc}

90003b74 <I2Cx_ReadMultiple>:
{
90003b74:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
90003b76:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
90003b7a:	b085      	sub	sp, #20
90003b7c:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
90003b7e:	9402      	str	r4, [sp, #8]
90003b80:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
90003b84:	9401      	str	r4, [sp, #4]
90003b86:	9c08      	ldr	r4, [sp, #32]
90003b88:	9400      	str	r4, [sp, #0]
90003b8a:	f001 fe0f 	bl	900057ac <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
90003b8e:	4604      	mov	r4, r0
90003b90:	b128      	cbz	r0, 90003b9e <I2Cx_ReadMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
90003b92:	4628      	mov	r0, r5
90003b94:	f001 fd3b 	bl	9000560e <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
90003b98:	4628      	mov	r0, r5
90003b9a:	f7ff ff29 	bl	900039f0 <I2Cx_Init>
}
90003b9e:	4620      	mov	r0, r4
90003ba0:	b005      	add	sp, #20
90003ba2:	bd30      	pop	{r4, r5, pc}

90003ba4 <AUDIO_IO_Init>:
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
  I2Cx_Init(&hI2cAudioHandler);
90003ba4:	4801      	ldr	r0, [pc, #4]	; (90003bac <AUDIO_IO_Init+0x8>)
90003ba6:	f7ff bf23 	b.w	900039f0 <I2Cx_Init>
90003baa:	bf00      	nop
90003bac:	2000471c 	.word	0x2000471c

90003bb0 <TS_IO_Init>:
90003bb0:	f7ff bff8 	b.w	90003ba4 <AUDIO_IO_Init>

90003bb4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
90003bb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
90003bb6:	f88d 200f 	strb.w	r2, [sp, #15]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
90003bba:	f10d 020f 	add.w	r2, sp, #15
90003bbe:	2301      	movs	r3, #1
90003bc0:	9200      	str	r2, [sp, #0]
90003bc2:	460a      	mov	r2, r1
90003bc4:	4601      	mov	r1, r0
90003bc6:	9301      	str	r3, [sp, #4]
90003bc8:	4802      	ldr	r0, [pc, #8]	; (90003bd4 <TS_IO_Write+0x20>)
90003bca:	f7ff ffbb 	bl	90003b44 <I2Cx_WriteMultiple>
}
90003bce:	b005      	add	sp, #20
90003bd0:	f85d fb04 	ldr.w	pc, [sp], #4
90003bd4:	2000471c 	.word	0x2000471c

90003bd8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
90003bd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t read_value = 0;
90003bda:	2300      	movs	r3, #0
{
90003bdc:	460a      	mov	r2, r1

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
90003bde:	f10d 010f 	add.w	r1, sp, #15
  uint8_t read_value = 0;
90003be2:	f88d 300f 	strb.w	r3, [sp, #15]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
90003be6:	2301      	movs	r3, #1
90003be8:	9100      	str	r1, [sp, #0]
90003bea:	4601      	mov	r1, r0
90003bec:	9301      	str	r3, [sp, #4]
90003bee:	4804      	ldr	r0, [pc, #16]	; (90003c00 <TS_IO_Read+0x28>)
90003bf0:	f7ff ffc0 	bl	90003b74 <I2Cx_ReadMultiple>

  return read_value;
}
90003bf4:	f89d 000f 	ldrb.w	r0, [sp, #15]
90003bf8:	b005      	add	sp, #20
90003bfa:	f85d fb04 	ldr.w	pc, [sp], #4
90003bfe:	bf00      	nop
90003c00:	2000471c 	.word	0x2000471c

90003c04 <TS_IO_Delay>:
90003c04:	f000 bada 	b.w	900041bc <HAL_Delay>

90003c08 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
90003c08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
90003c0c:	4c21      	ldr	r4, [pc, #132]	; (90003c94 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90003c0e:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90003c10:	4d21      	ldr	r5, [pc, #132]	; (90003c98 <BSP_SDRAM_Initialization_sequence+0x90>)
  __IO uint32_t tmpmrd = 0;
90003c12:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90003c16:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90003c18:	4621      	mov	r1, r4
{
90003c1a:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90003c1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
90003c20:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
90003c22:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90003c26:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
90003c2a:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90003c2e:	f002 fdd7 	bl	900067e0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
90003c32:	4630      	mov	r0, r6
90003c34:	f000 fac2 	bl	900041bc <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
90003c38:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
90003c3a:	4621      	mov	r1, r4
90003c3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
90003c40:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90003c42:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
90003c46:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
90003c4a:	f002 fdc9 	bl	900067e0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
90003c4e:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90003c50:	4621      	mov	r1, r4
90003c52:	f64f 72ff 	movw	r2, #65535	; 0xffff
90003c56:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90003c58:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
90003c5c:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
90003c5e:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90003c62:	f002 fdbd 	bl	900067e0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
90003c66:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90003c6a:	4621      	mov	r1, r4
90003c6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
90003c70:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
90003c72:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90003c74:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
90003c76:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
90003c78:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
90003c7c:	9b01      	ldr	r3, [sp, #4]
90003c7e:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
90003c80:	f002 fdae 	bl	900067e0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
90003c84:	4649      	mov	r1, r9
90003c86:	4628      	mov	r0, r5
}
90003c88:	b003      	add	sp, #12
90003c8a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
90003c8e:	f002 bdbe 	b.w	9000680e <HAL_SDRAM_ProgramRefreshRate>
90003c92:	bf00      	nop
90003c94:	20004768 	.word	0x20004768
90003c98:	200272ac 	.word	0x200272ac

90003c9c <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
90003c9c:	4b54      	ldr	r3, [pc, #336]	; (90003df0 <BSP_SDRAM_MspInit+0x154>)
90003c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90003ca0:	f042 0201 	orr.w	r2, r2, #1
{  
90003ca4:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
90003ca6:	639a      	str	r2, [r3, #56]	; 0x38
{  
90003ca8:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
90003caa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
90003cac:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
90003cae:	a909      	add	r1, sp, #36	; 0x24
90003cb0:	4850      	ldr	r0, [pc, #320]	; (90003df4 <BSP_SDRAM_MspInit+0x158>)
  __HAL_RCC_FMC_CLK_ENABLE();
90003cb2:	f002 0201 	and.w	r2, r2, #1
  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
90003cb6:	4c50      	ldr	r4, [pc, #320]	; (90003df8 <BSP_SDRAM_MspInit+0x15c>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
90003cb8:	2500      	movs	r5, #0
  __HAL_RCC_FMC_CLK_ENABLE();
90003cba:	9201      	str	r2, [sp, #4]
90003cbc:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
90003cbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90003cc0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
90003cc4:	631a      	str	r2, [r3, #48]	; 0x30
90003cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90003cc8:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
90003ccc:	9202      	str	r2, [sp, #8]
90003cce:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
90003cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90003cd2:	f042 0204 	orr.w	r2, r2, #4
90003cd6:	631a      	str	r2, [r3, #48]	; 0x30
90003cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90003cda:	f002 0204 	and.w	r2, r2, #4
90003cde:	9203      	str	r2, [sp, #12]
90003ce0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90003ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90003ce4:	f042 0208 	orr.w	r2, r2, #8
90003ce8:	631a      	str	r2, [r3, #48]	; 0x30
90003cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90003cec:	f002 0208 	and.w	r2, r2, #8
90003cf0:	9204      	str	r2, [sp, #16]
90003cf2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90003cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90003cf6:	f042 0210 	orr.w	r2, r2, #16
90003cfa:	631a      	str	r2, [r3, #48]	; 0x30
90003cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90003cfe:	f002 0210 	and.w	r2, r2, #16
90003d02:	9205      	str	r2, [sp, #20]
90003d04:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90003d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90003d08:	f042 0220 	orr.w	r2, r2, #32
90003d0c:	631a      	str	r2, [r3, #48]	; 0x30
90003d0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90003d10:	f002 0220 	and.w	r2, r2, #32
90003d14:	9206      	str	r2, [sp, #24]
90003d16:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90003d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90003d1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
90003d1e:	631a      	str	r2, [r3, #48]	; 0x30
90003d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90003d22:	f002 0240 	and.w	r2, r2, #64	; 0x40
90003d26:	9207      	str	r2, [sp, #28]
90003d28:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90003d2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90003d2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
90003d30:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
90003d32:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
90003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90003d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
90003d3a:	9308      	str	r3, [sp, #32]
90003d3c:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
90003d3e:	2302      	movs	r3, #2
90003d40:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
90003d44:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90003d46:	230c      	movs	r3, #12
90003d48:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
90003d4a:	2308      	movs	r3, #8
90003d4c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
90003d4e:	f001 f933 	bl	90004fb8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
90003d52:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90003d56:	a909      	add	r1, sp, #36	; 0x24
90003d58:	4828      	ldr	r0, [pc, #160]	; (90003dfc <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
90003d5a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90003d5c:	f001 f92c 	bl	90004fb8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90003d60:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90003d64:	a909      	add	r1, sp, #36	; 0x24
90003d66:	4826      	ldr	r0, [pc, #152]	; (90003e00 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90003d68:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90003d6a:	f001 f925 	bl	90004fb8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90003d6e:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90003d72:	a909      	add	r1, sp, #36	; 0x24
90003d74:	4823      	ldr	r0, [pc, #140]	; (90003e04 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90003d76:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90003d78:	f001 f91e 	bl	90004fb8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
90003d7c:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90003d80:	a909      	add	r1, sp, #36	; 0x24
90003d82:	4821      	ldr	r0, [pc, #132]	; (90003e08 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
90003d84:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90003d86:	f001 f917 	bl	90004fb8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
90003d8a:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
90003d8c:	a909      	add	r1, sp, #36	; 0x24
90003d8e:	481f      	ldr	r0, [pc, #124]	; (90003e0c <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
90003d90:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
90003d92:	f001 f911 	bl	90004fb8 <HAL_GPIO_Init>
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
90003d96:	2380      	movs	r3, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
90003d98:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
90003d9c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
90003da0:	6325      	str	r5, [r4, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
90003da2:	6334      	str	r4, [r6, #48]	; 0x30
  dma_handle.Init.Mode                = DMA_NORMAL;
90003da4:	61e5      	str	r5, [r4, #28]
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
90003da6:	63a6      	str	r6, [r4, #56]	; 0x38
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
90003da8:	e9c4 5301 	strd	r5, r3, [r4, #4]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
90003dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
90003db0:	e9c4 1303 	strd	r1, r3, [r4, #12]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
90003db4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
90003db8:	e9c4 0305 	strd	r0, r3, [r4, #20]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
90003dbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
90003dc0:	4620      	mov	r0, r4
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
90003dc2:	e9c4 3508 	strd	r3, r5, [r4, #32]
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
90003dc6:	2303      	movs	r3, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
90003dc8:	e9c4 350a 	strd	r3, r5, [r4, #40]	; 0x28
  dma_handle.Instance = SDRAM_DMAx_STREAM;
90003dcc:	4b10      	ldr	r3, [pc, #64]	; (90003e10 <BSP_SDRAM_MspInit+0x174>)
90003dce:	6023      	str	r3, [r4, #0]
  HAL_DMA_DeInit(&dma_handle);
90003dd0:	f000 fb5e 	bl	90004490 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
90003dd4:	4620      	mov	r0, r4
90003dd6:	f000 fadb 	bl	90004390 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
90003dda:	462a      	mov	r2, r5
90003ddc:	210f      	movs	r1, #15
90003dde:	2038      	movs	r0, #56	; 0x38
90003de0:	f000 fa10 	bl	90004204 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
90003de4:	2038      	movs	r0, #56	; 0x38
90003de6:	f000 fa3f 	bl	90004268 <HAL_NVIC_EnableIRQ>
}
90003dea:	b00e      	add	sp, #56	; 0x38
90003dec:	bd70      	pop	{r4, r5, r6, pc}
90003dee:	bf00      	nop
90003df0:	40023800 	.word	0x40023800
90003df4:	40020800 	.word	0x40020800
90003df8:	20004794 	.word	0x20004794
90003dfc:	40020c00 	.word	0x40020c00
90003e00:	40021000 	.word	0x40021000
90003e04:	40021400 	.word	0x40021400
90003e08:	40021800 	.word	0x40021800
90003e0c:	40021c00 	.word	0x40021c00
90003e10:	40026410 	.word	0x40026410

90003e14 <BSP_SDRAM_Init>:
{ 
90003e14:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
90003e16:	4c19      	ldr	r4, [pc, #100]	; (90003e7c <BSP_SDRAM_Init+0x68>)
  Timing.ExitSelfRefreshDelay = 7;
90003e18:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
90003e1a:	4b19      	ldr	r3, [pc, #100]	; (90003e80 <BSP_SDRAM_Init+0x6c>)
  Timing.SelfRefreshTime      = 4;
90003e1c:	2204      	movs	r2, #4
  Timing.LoadToActiveDelay    = 2;
90003e1e:	4d19      	ldr	r5, [pc, #100]	; (90003e84 <BSP_SDRAM_Init+0x70>)
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90003e20:	f44f 6000 	mov.w	r0, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
90003e24:	6023      	str	r3, [r4, #0]
  Timing.ExitSelfRefreshDelay = 7;
90003e26:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
90003e28:	60e2      	str	r2, [r4, #12]
  Timing.RCDDelay             = 2;
90003e2a:	61ab      	str	r3, [r5, #24]
  Timing.ExitSelfRefreshDelay = 7;
90003e2c:	e9c5 3100 	strd	r3, r1, [r5]
  Timing.RowCycleDelay        = 7;
90003e30:	e9c5 2102 	strd	r2, r1, [r5, #8]
  Timing.RPDelay              = 2;
90003e34:	e9c5 3304 	strd	r3, r3, [r5, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90003e38:	2210      	movs	r2, #16
90003e3a:	2340      	movs	r3, #64	; 0x40
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
90003e3c:	2100      	movs	r1, #0
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90003e3e:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
90003e42:	f44f 7380 	mov.w	r3, #256	; 0x100
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90003e46:	62a1      	str	r1, [r4, #40]	; 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90003e48:	e9c4 3106 	strd	r3, r1, [r4, #24]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90003e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90003e50:	e9c4 0308 	strd	r0, r3, [r4, #32]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
90003e54:	4620      	mov	r0, r4
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90003e56:	e9c4 1101 	strd	r1, r1, [r4, #4]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
90003e5a:	f7ff ff1f 	bl	90003c9c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
90003e5e:	4629      	mov	r1, r5
90003e60:	4620      	mov	r0, r4
90003e62:	4c09      	ldr	r4, [pc, #36]	; (90003e88 <BSP_SDRAM_Init+0x74>)
90003e64:	f002 fc8e 	bl	90006784 <HAL_SDRAM_Init>
90003e68:	3800      	subs	r0, #0
90003e6a:	bf18      	it	ne
90003e6c:	2001      	movne	r0, #1
90003e6e:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
90003e70:	f240 6003 	movw	r0, #1539	; 0x603
90003e74:	f7ff fec8 	bl	90003c08 <BSP_SDRAM_Initialization_sequence>
}
90003e78:	7820      	ldrb	r0, [r4, #0]
90003e7a:	bd38      	pop	{r3, r4, r5, pc}
90003e7c:	200272ac 	.word	0x200272ac
90003e80:	a0000140 	.word	0xa0000140
90003e84:	20004778 	.word	0x20004778
90003e88:	20000034 	.word	0x20000034

90003e8c <BSP_SDRAM_MspDeInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspDeInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
90003e8c:	b508      	push	{r3, lr}
    static DMA_HandleTypeDef dma_handle;
  
    /* Disable NVIC configuration for DMA interrupt */
    HAL_NVIC_DisableIRQ(SDRAM_DMAx_IRQn);
90003e8e:	2038      	movs	r0, #56	; 0x38
90003e90:	f000 f9f8 	bl	90004284 <HAL_NVIC_DisableIRQ>

    /* Deinitialize the stream for new transfer */
    dma_handle.Instance = SDRAM_DMAx_STREAM;
90003e94:	4b03      	ldr	r3, [pc, #12]	; (90003ea4 <BSP_SDRAM_MspDeInit+0x18>)
90003e96:	4804      	ldr	r0, [pc, #16]	; (90003ea8 <BSP_SDRAM_MspDeInit+0x1c>)
90003e98:	6003      	str	r3, [r0, #0]
    HAL_DMA_DeInit(&dma_handle);

    /* GPIO pins clock, FMC clock and DMA clock can be shut down in the applications
       by surcharging this __weak function */ 
}
90003e9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_DMA_DeInit(&dma_handle);
90003e9e:	f000 baf7 	b.w	90004490 <HAL_DMA_DeInit>
90003ea2:	bf00      	nop
90003ea4:	40026410 	.word	0x40026410
90003ea8:	200047f4 	.word	0x200047f4

90003eac <BSP_SDRAM_DeInit>:
{ 
90003eac:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
90003eae:	4c09      	ldr	r4, [pc, #36]	; (90003ed4 <BSP_SDRAM_DeInit+0x28>)
90003eb0:	4b09      	ldr	r3, [pc, #36]	; (90003ed8 <BSP_SDRAM_DeInit+0x2c>)
  if(HAL_SDRAM_DeInit(&sdramHandle) != HAL_OK)
90003eb2:	4620      	mov	r0, r4
90003eb4:	4d09      	ldr	r5, [pc, #36]	; (90003edc <BSP_SDRAM_DeInit+0x30>)
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
90003eb6:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_DeInit(&sdramHandle) != HAL_OK)
90003eb8:	f002 fc84 	bl	900067c4 <HAL_SDRAM_DeInit>
90003ebc:	3800      	subs	r0, #0
  BSP_SDRAM_MspDeInit(&sdramHandle, NULL);
90003ebe:	f04f 0100 	mov.w	r1, #0
  if(HAL_SDRAM_DeInit(&sdramHandle) != HAL_OK)
90003ec2:	bf18      	it	ne
90003ec4:	2001      	movne	r0, #1
90003ec6:	7028      	strb	r0, [r5, #0]
  BSP_SDRAM_MspDeInit(&sdramHandle, NULL);
90003ec8:	4620      	mov	r0, r4
90003eca:	f7ff ffdf 	bl	90003e8c <BSP_SDRAM_MspDeInit>
}
90003ece:	7828      	ldrb	r0, [r5, #0]
90003ed0:	bd38      	pop	{r3, r4, r5, pc}
90003ed2:	bf00      	nop
90003ed4:	200272ac 	.word	0x200272ac
90003ed8:	a0000140 	.word	0xa0000140
90003edc:	20000035 	.word	0x20000035

90003ee0 <BSP_TS_Init>:
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
90003ee0:	4b0d      	ldr	r3, [pc, #52]	; (90003f18 <BSP_TS_Init+0x38>)
{
90003ee2:	b510      	push	{r4, lr}
  tsXBoundary = ts_SizeX;
90003ee4:	8018      	strh	r0, [r3, #0]
  tsYBoundary = ts_SizeY;
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
90003ee6:	2070      	movs	r0, #112	; 0x70
  tsYBoundary = ts_SizeY;
90003ee8:	4b0c      	ldr	r3, [pc, #48]	; (90003f1c <BSP_TS_Init+0x3c>)
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
90003eea:	4c0d      	ldr	r4, [pc, #52]	; (90003f20 <BSP_TS_Init+0x40>)
  tsYBoundary = ts_SizeY;
90003eec:	8019      	strh	r1, [r3, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
90003eee:	6823      	ldr	r3, [r4, #0]
90003ef0:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
90003ef2:	6863      	ldr	r3, [r4, #4]
90003ef4:	2070      	movs	r0, #112	; 0x70
90003ef6:	4798      	blx	r3
90003ef8:	2851      	cmp	r0, #81	; 0x51
90003efa:	d10b      	bne.n	90003f14 <BSP_TS_Init+0x34>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
90003efc:	4b09      	ldr	r3, [pc, #36]	; (90003f24 <BSP_TS_Init+0x44>)
    I2cAddress = TS_I2C_ADDRESS;
90003efe:	2070      	movs	r0, #112	; 0x70
    tsOrientation = TS_SWAP_XY;
90003f00:	2208      	movs	r2, #8
    tsDriver = &ft5336_ts_drv;
90003f02:	601c      	str	r4, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
90003f04:	4b08      	ldr	r3, [pc, #32]	; (90003f28 <BSP_TS_Init+0x48>)
90003f06:	7018      	strb	r0, [r3, #0]
    tsOrientation = TS_SWAP_XY;
90003f08:	4b08      	ldr	r3, [pc, #32]	; (90003f2c <BSP_TS_Init+0x4c>)
90003f0a:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
90003f0c:	68e3      	ldr	r3, [r4, #12]
90003f0e:	4798      	blx	r3
  uint8_t status = TS_OK;
90003f10:	2000      	movs	r0, #0
  {
    status = TS_DEVICE_NOT_FOUND;
  }

  return status;
}
90003f12:	bd10      	pop	{r4, pc}
    status = TS_DEVICE_NOT_FOUND;
90003f14:	2003      	movs	r0, #3
90003f16:	e7fc      	b.n	90003f12 <BSP_TS_Init+0x32>
90003f18:	20004886 	.word	0x20004886
90003f1c:	20004888 	.word	0x20004888
90003f20:	2000000c 	.word	0x2000000c
90003f24:	20004880 	.word	0x20004880
90003f28:	20004854 	.word	0x20004854
90003f2c:	20004884 	.word	0x20004884

90003f30 <BSP_TS_Get_GestureId>:
{
  uint32_t gestureId = 0;
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
90003f30:	4b15      	ldr	r3, [pc, #84]	; (90003f88 <BSP_TS_Get_GestureId+0x58>)
{
90003f32:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t gestureId = 0;
90003f34:	2400      	movs	r4, #0
{
90003f36:	4605      	mov	r5, r0
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
90003f38:	a901      	add	r1, sp, #4
90003f3a:	7818      	ldrb	r0, [r3, #0]
  uint32_t gestureId = 0;
90003f3c:	9401      	str	r4, [sp, #4]
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
90003f3e:	f7ff fd07 	bl	90003950 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
90003f42:	9801      	ldr	r0, [sp, #4]
90003f44:	2818      	cmp	r0, #24
90003f46:	d019      	beq.n	90003f7c <BSP_TS_Get_GestureId+0x4c>
90003f48:	d808      	bhi.n	90003f5c <BSP_TS_Get_GestureId+0x2c>
90003f4a:	2810      	cmp	r0, #16
90003f4c:	d011      	beq.n	90003f72 <BSP_TS_Get_GestureId+0x42>
90003f4e:	2814      	cmp	r0, #20
90003f50:	d012      	beq.n	90003f78 <BSP_TS_Get_GestureId+0x48>
90003f52:	b158      	cbz	r0, 90003f6c <BSP_TS_Get_GestureId+0x3c>
90003f54:	2401      	movs	r4, #1
      ts_status = TS_ERROR;
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
90003f56:	4620      	mov	r0, r4
90003f58:	b003      	add	sp, #12
90003f5a:	bd30      	pop	{r4, r5, pc}
  switch(gestureId)
90003f5c:	2840      	cmp	r0, #64	; 0x40
90003f5e:	d00f      	beq.n	90003f80 <BSP_TS_Get_GestureId+0x50>
90003f60:	2849      	cmp	r0, #73	; 0x49
90003f62:	d00f      	beq.n	90003f84 <BSP_TS_Get_GestureId+0x54>
90003f64:	281c      	cmp	r0, #28
90003f66:	d1f5      	bne.n	90003f54 <BSP_TS_Get_GestureId+0x24>
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
90003f68:	2304      	movs	r3, #4
90003f6a:	e003      	b.n	90003f74 <BSP_TS_Get_GestureId+0x44>
  uint8_t  ts_status = TS_OK;
90003f6c:	4604      	mov	r4, r0
      TS_State->gestureId = GEST_ID_NO_GESTURE;
90003f6e:	62a8      	str	r0, [r5, #40]	; 0x28
      break;
90003f70:	e7f1      	b.n	90003f56 <BSP_TS_Get_GestureId+0x26>
      TS_State->gestureId = GEST_ID_MOVE_UP;
90003f72:	2301      	movs	r3, #1
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
90003f74:	62ab      	str	r3, [r5, #40]	; 0x28
      break;
90003f76:	e7ee      	b.n	90003f56 <BSP_TS_Get_GestureId+0x26>
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
90003f78:	2302      	movs	r3, #2
90003f7a:	e7fb      	b.n	90003f74 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
90003f7c:	2303      	movs	r3, #3
90003f7e:	e7f9      	b.n	90003f74 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_ZOOM_IN;
90003f80:	2305      	movs	r3, #5
90003f82:	e7f7      	b.n	90003f74 <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
90003f84:	2306      	movs	r3, #6
90003f86:	e7f5      	b.n	90003f74 <BSP_TS_Get_GestureId+0x44>
90003f88:	20004854 	.word	0x20004854

90003f8c <BSP_TS_GetState>:
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
90003f8c:	4b58      	ldr	r3, [pc, #352]	; (900040f0 <BSP_TS_GetState+0x164>)
{
90003f8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
90003f92:	681a      	ldr	r2, [r3, #0]
{
90003f94:	b097      	sub	sp, #92	; 0x5c
  uint32_t weight = 0;
90003f96:	2400      	movs	r4, #0
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
90003f98:	4e56      	ldr	r6, [pc, #344]	; (900040f4 <BSP_TS_GetState+0x168>)
{
90003f9a:	4605      	mov	r5, r0
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
90003f9c:	6912      	ldr	r2, [r2, #16]
90003f9e:	7830      	ldrb	r0, [r6, #0]
  uint32_t event = 0;
90003fa0:	9409      	str	r4, [sp, #36]	; 0x24
  uint32_t area = 0;
90003fa2:	e9cd 4407 	strd	r4, r4, [sp, #28]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
90003fa6:	4790      	blx	r2
90003fa8:	9604      	str	r6, [sp, #16]
90003faa:	7028      	strb	r0, [r5, #0]
  if(TS_State->touchDetected)
90003fac:	b1a0      	cbz	r0, 90003fd8 <BSP_TS_GetState+0x4c>
90003fae:	ab0d      	add	r3, sp, #52	; 0x34
90003fb0:	f105 0616 	add.w	r6, r5, #22
90003fb4:	f105 0902 	add.w	r9, r5, #2
90003fb8:	f8df a148 	ldr.w	sl, [pc, #328]	; 90004104 <BSP_TS_GetState+0x178>
90003fbc:	9303      	str	r3, [sp, #12]
90003fbe:	f10d 0840 	add.w	r8, sp, #64	; 0x40
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
90003fc2:	4b4b      	ldr	r3, [pc, #300]	; (900040f0 <BSP_TS_GetState+0x164>)
90003fc4:	af13      	add	r7, sp, #76	; 0x4c
90003fc6:	f8df b140 	ldr.w	fp, [pc, #320]	; 90004108 <BSP_TS_GetState+0x17c>
90003fca:	9305      	str	r3, [sp, #20]
    for(index=0; index < TS_State->touchDetected; index++)
90003fcc:	782b      	ldrb	r3, [r5, #0]
90003fce:	42a3      	cmp	r3, r4
90003fd0:	d805      	bhi.n	90003fde <BSP_TS_GetState+0x52>
    ts_status = BSP_TS_Get_GestureId(TS_State);
90003fd2:	4628      	mov	r0, r5
90003fd4:	f7ff ffac 	bl	90003f30 <BSP_TS_Get_GestureId>
}
90003fd8:	b017      	add	sp, #92	; 0x5c
90003fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
90003fde:	9b05      	ldr	r3, [sp, #20]
90003fe0:	463a      	mov	r2, r7
90003fe2:	9804      	ldr	r0, [sp, #16]
90003fe4:	4641      	mov	r1, r8
90003fe6:	681b      	ldr	r3, [r3, #0]
90003fe8:	7800      	ldrb	r0, [r0, #0]
90003fea:	695b      	ldr	r3, [r3, #20]
90003fec:	4798      	blx	r3
      if(tsOrientation == TS_SWAP_NONE)
90003fee:	4b42      	ldr	r3, [pc, #264]	; (900040f8 <BSP_TS_GetState+0x16c>)
90003ff0:	781a      	ldrb	r2, [r3, #0]
90003ff2:	ab0a      	add	r3, sp, #40	; 0x28
90003ff4:	2a01      	cmp	r2, #1
90003ff6:	d149      	bne.n	9000408c <BSP_TS_GetState+0x100>
        x[index] = brute_x[index];
90003ff8:	f8b8 1000 	ldrh.w	r1, [r8]
90003ffc:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
        y[index] = brute_y[index];
90004000:	8839      	ldrh	r1, [r7, #0]
        y[index] = 4096 - brute_y[index];
90004002:	9803      	ldr	r0, [sp, #12]
90004004:	8001      	strh	r1, [r0, #0]
      if(tsOrientation & TS_SWAP_XY)
90004006:	0712      	lsls	r2, r2, #28
90004008:	d506      	bpl.n	90004018 <BSP_TS_GetState+0x8c>
        y[index] = brute_x[index];
9000400a:	f8b8 2000 	ldrh.w	r2, [r8]
9000400e:	9903      	ldr	r1, [sp, #12]
90004010:	800a      	strh	r2, [r1, #0]
        x[index] = brute_y[index];
90004012:	883a      	ldrh	r2, [r7, #0]
90004014:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
90004018:	f833 c014 	ldrh.w	ip, [r3, r4, lsl #1]
9000401c:	f8da 2000 	ldr.w	r2, [sl]
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
90004020:	f8db 0000 	ldr.w	r0, [fp]
90004024:	b293      	uxth	r3, r2
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
90004026:	4594      	cmp	ip, r2
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
90004028:	9a03      	ldr	r2, [sp, #12]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
9000402a:	bf8c      	ite	hi
9000402c:	ebac 0303 	subhi.w	r3, ip, r3
90004030:	eba3 030c 	subls.w	r3, r3, ip
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
90004034:	f832 1b02 	ldrh.w	r1, [r2], #2
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
90004038:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
9000403a:	4281      	cmp	r1, r0
9000403c:	9203      	str	r2, [sp, #12]
9000403e:	b282      	uxth	r2, r0
90004040:	bf8c      	ite	hi
90004042:	1a8a      	subhi	r2, r1, r2
90004044:	1a52      	subls	r2, r2, r1
90004046:	b292      	uxth	r2, r2
      if ((x_diff + y_diff) > 5)
90004048:	4413      	add	r3, r2
9000404a:	2b05      	cmp	r3, #5
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
9000404c:	9b04      	ldr	r3, [sp, #16]
9000404e:	7818      	ldrb	r0, [r3, #0]
        _x[index] = x[index];
90004050:	bfc4      	itt	gt
90004052:	f8ca c000 	strgt.w	ip, [sl]
        _y[index] = y[index];
90004056:	f8cb 1000 	strgt.w	r1, [fp]
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
9000405a:	2870      	cmp	r0, #112	; 0x70
9000405c:	d124      	bne.n	900040a8 <BSP_TS_GetState+0x11c>
        TS_State->touchX[index] = x[index];
9000405e:	f8a9 c000 	strh.w	ip, [r9]
        TS_State->touchY[index] = y[index];
90004062:	f8a9 100a 	strh.w	r1, [r9, #10]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
90004066:	ab09      	add	r3, sp, #36	; 0x24
90004068:	aa07      	add	r2, sp, #28
9000406a:	4621      	mov	r1, r4
9000406c:	9300      	str	r3, [sp, #0]
9000406e:	ab08      	add	r3, sp, #32
90004070:	f7ff fc7e 	bl	90003970 <ft5336_TS_GetTouchInfo>
      TS_State->touchWeight[index] = weight;
90004074:	9b07      	ldr	r3, [sp, #28]
90004076:	f806 3b01 	strb.w	r3, [r6], #1
      TS_State->touchArea[index]   = area;
9000407a:	9b08      	ldr	r3, [sp, #32]
9000407c:	7273      	strb	r3, [r6, #9]
      switch(event)
9000407e:	9b09      	ldr	r3, [sp, #36]	; 0x24
90004080:	2b03      	cmp	r3, #3
90004082:	d824      	bhi.n	900040ce <BSP_TS_GetState+0x142>
90004084:	e8df f003 	tbb	[pc, r3]
90004088:	32302e21 	.word	0x32302e21
      if(tsOrientation & TS_SWAP_X)
9000408c:	0790      	lsls	r0, r2, #30
        x[index] = 4096 - brute_x[index];
9000408e:	bf42      	ittt	mi
90004090:	f8b8 1000 	ldrhmi.w	r1, [r8]
90004094:	f5c1 5180 	rsbmi	r1, r1, #4096	; 0x1000
90004098:	f823 1014 	strhmi.w	r1, [r3, r4, lsl #1]
      if(tsOrientation & TS_SWAP_Y)
9000409c:	0751      	lsls	r1, r2, #29
9000409e:	d5b2      	bpl.n	90004006 <BSP_TS_GetState+0x7a>
        y[index] = 4096 - brute_y[index];
900040a0:	8839      	ldrh	r1, [r7, #0]
900040a2:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
900040a6:	e7ac      	b.n	90004002 <BSP_TS_GetState+0x76>
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
900040a8:	4b14      	ldr	r3, [pc, #80]	; (900040fc <BSP_TS_GetState+0x170>)
900040aa:	881a      	ldrh	r2, [r3, #0]
900040ac:	f8da 3000 	ldr.w	r3, [sl]
900040b0:	4353      	muls	r3, r2
900040b2:	0b1b      	lsrs	r3, r3, #12
900040b4:	f8a9 3000 	strh.w	r3, [r9]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
900040b8:	4b11      	ldr	r3, [pc, #68]	; (90004100 <BSP_TS_GetState+0x174>)
900040ba:	881a      	ldrh	r2, [r3, #0]
900040bc:	f8db 3000 	ldr.w	r3, [fp]
900040c0:	4353      	muls	r3, r2
900040c2:	0b1b      	lsrs	r3, r3, #12
900040c4:	f8a9 300a 	strh.w	r3, [r9, #10]
900040c8:	e7cd      	b.n	90004066 <BSP_TS_GetState+0xda>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
900040ca:	2301      	movs	r3, #1
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
900040cc:	7133      	strb	r3, [r6, #4]
    for(index=0; index < TS_State->touchDetected; index++)
900040ce:	3401      	adds	r4, #1
900040d0:	f109 0902 	add.w	r9, r9, #2
900040d4:	f10a 0a04 	add.w	sl, sl, #4
900040d8:	f10b 0b04 	add.w	fp, fp, #4
900040dc:	f108 0802 	add.w	r8, r8, #2
900040e0:	3702      	adds	r7, #2
900040e2:	e773      	b.n	90003fcc <BSP_TS_GetState+0x40>
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
900040e4:	2302      	movs	r3, #2
900040e6:	e7f1      	b.n	900040cc <BSP_TS_GetState+0x140>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
900040e8:	2303      	movs	r3, #3
900040ea:	e7ef      	b.n	900040cc <BSP_TS_GetState+0x140>
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
900040ec:	2300      	movs	r3, #0
900040ee:	e7ed      	b.n	900040cc <BSP_TS_GetState+0x140>
900040f0:	20004880 	.word	0x20004880
900040f4:	20004854 	.word	0x20004854
900040f8:	20004884 	.word	0x20004884
900040fc:	20004886 	.word	0x20004886
90004100:	20004888 	.word	0x20004888
90004104:	20004858 	.word	0x20004858
90004108:	2000486c 	.word	0x2000486c

9000410c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
9000410c:	4914      	ldr	r1, [pc, #80]	; (90004160 <SystemInit+0x54>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
9000410e:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
90004110:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
90004114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90004118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
9000411c:	4b11      	ldr	r3, [pc, #68]	; (90004164 <SystemInit+0x58>)
9000411e:	681a      	ldr	r2, [r3, #0]
90004120:	f042 0201 	orr.w	r2, r2, #1
90004124:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
90004126:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
90004128:	681a      	ldr	r2, [r3, #0]
9000412a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
9000412e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
90004132:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
90004134:	4a0c      	ldr	r2, [pc, #48]	; (90004168 <SystemInit+0x5c>)
90004136:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
90004138:	681a      	ldr	r2, [r3, #0]
9000413a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
9000413e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
90004140:	60d8      	str	r0, [r3, #12]

  /*Enable FMC clock */
  RCC->AHB3ENR |= 0x00000001;
90004142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90004144:	f042 0201 	orr.w	r2, r2, #1
90004148:	639a      	str	r2, [r3, #56]	; 0x38
  /*Disable FMC Bank1 to disable unwanted Speculation  */
  FMC_Bank1->BTCR[0] &= ~1 ;
9000414a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
9000414e:	6813      	ldr	r3, [r2, #0]
90004150:	f023 0301 	bic.w	r3, r3, #1
90004154:	6013      	str	r3, [r2, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = QSPI_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation to QSPI_BASE in preprocessor defines */
90004156:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
9000415a:	608b      	str	r3, [r1, #8]
#endif
}
9000415c:	4770      	bx	lr
9000415e:	bf00      	nop
90004160:	e000ed00 	.word	0xe000ed00
90004164:	40023800 	.word	0x40023800
90004168:	24003010 	.word	0x24003010

9000416c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
9000416c:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
9000416e:	4b09      	ldr	r3, [pc, #36]	; (90004194 <HAL_Init+0x28>)
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90004170:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
90004172:	681a      	ldr	r2, [r3, #0]
90004174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
90004178:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
9000417a:	681a      	ldr	r2, [r3, #0]
9000417c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
90004180:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90004182:	f000 f82d 	bl	900041e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
90004186:	2000      	movs	r0, #0
90004188:	f7fe f9ee 	bl	90002568 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
9000418c:	f7fd ffe0 	bl	90002150 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
90004190:	2000      	movs	r0, #0
90004192:	bd08      	pop	{r3, pc}
90004194:	40023c00 	.word	0x40023c00

90004198 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
90004198:	4a03      	ldr	r2, [pc, #12]	; (900041a8 <HAL_IncTick+0x10>)
9000419a:	4b04      	ldr	r3, [pc, #16]	; (900041ac <HAL_IncTick+0x14>)
9000419c:	6811      	ldr	r1, [r2, #0]
9000419e:	781b      	ldrb	r3, [r3, #0]
900041a0:	440b      	add	r3, r1
900041a2:	6013      	str	r3, [r2, #0]
}
900041a4:	4770      	bx	lr
900041a6:	bf00      	nop
900041a8:	200272e0 	.word	0x200272e0
900041ac:	2000003c 	.word	0x2000003c

900041b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
900041b0:	4b01      	ldr	r3, [pc, #4]	; (900041b8 <HAL_GetTick+0x8>)
900041b2:	6818      	ldr	r0, [r3, #0]
}
900041b4:	4770      	bx	lr
900041b6:	bf00      	nop
900041b8:	200272e0 	.word	0x200272e0

900041bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
900041bc:	b538      	push	{r3, r4, r5, lr}
900041be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
900041c0:	f7ff fff6 	bl	900041b0 <HAL_GetTick>
900041c4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
900041c6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
900041c8:	bf1e      	ittt	ne
900041ca:	4b04      	ldrne	r3, [pc, #16]	; (900041dc <HAL_Delay+0x20>)
900041cc:	781b      	ldrbne	r3, [r3, #0]
900041ce:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
900041d0:	f7ff ffee 	bl	900041b0 <HAL_GetTick>
900041d4:	1b43      	subs	r3, r0, r5
900041d6:	42a3      	cmp	r3, r4
900041d8:	d3fa      	bcc.n	900041d0 <HAL_Delay+0x14>
  {
  }
}
900041da:	bd38      	pop	{r3, r4, r5, pc}
900041dc:	2000003c 	.word	0x2000003c

900041e0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
900041e0:	4907      	ldr	r1, [pc, #28]	; (90004200 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
900041e2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
900041e4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
900041e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
900041ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
900041ee:	0412      	lsls	r2, r2, #16
900041f0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
900041f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
900041f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
900041f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
900041fc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
900041fe:	4770      	bx	lr
90004200:	e000ed00 	.word	0xe000ed00

90004204 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90004204:	4b16      	ldr	r3, [pc, #88]	; (90004260 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
90004206:	b530      	push	{r4, r5, lr}
90004208:	68dc      	ldr	r4, [r3, #12]
9000420a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
9000420e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90004212:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90004214:	2d04      	cmp	r5, #4
90004216:	bf28      	it	cs
90004218:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
9000421a:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
9000421c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90004220:	bf8c      	ite	hi
90004222:	3c03      	subhi	r4, #3
90004224:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90004226:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
9000422a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
9000422c:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90004230:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90004234:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90004238:	fa01 f104 	lsl.w	r1, r1, r4
9000423c:	ea41 0302 	orr.w	r3, r1, r2
90004240:	ea4f 1303 	mov.w	r3, r3, lsl #4
90004244:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
90004246:	db06      	blt.n	90004256 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90004248:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
9000424c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
90004250:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
90004254:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90004256:	f000 000f 	and.w	r0, r0, #15
9000425a:	4a02      	ldr	r2, [pc, #8]	; (90004264 <HAL_NVIC_SetPriority+0x60>)
9000425c:	5413      	strb	r3, [r2, r0]
9000425e:	e7f9      	b.n	90004254 <HAL_NVIC_SetPriority+0x50>
90004260:	e000ed00 	.word	0xe000ed00
90004264:	e000ed14 	.word	0xe000ed14

90004268 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
90004268:	2800      	cmp	r0, #0
9000426a:	db08      	blt.n	9000427e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000426c:	0942      	lsrs	r2, r0, #5
9000426e:	2301      	movs	r3, #1
90004270:	f000 001f 	and.w	r0, r0, #31
90004274:	fa03 f000 	lsl.w	r0, r3, r0
90004278:	4b01      	ldr	r3, [pc, #4]	; (90004280 <HAL_NVIC_EnableIRQ+0x18>)
9000427a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
9000427e:	4770      	bx	lr
90004280:	e000e100 	.word	0xe000e100

90004284 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
90004284:	2800      	cmp	r0, #0
90004286:	db0d      	blt.n	900042a4 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90004288:	0943      	lsrs	r3, r0, #5
9000428a:	2201      	movs	r2, #1
9000428c:	f000 001f 	and.w	r0, r0, #31
90004290:	3320      	adds	r3, #32
90004292:	fa02 f000 	lsl.w	r0, r2, r0
90004296:	4a04      	ldr	r2, [pc, #16]	; (900042a8 <HAL_NVIC_DisableIRQ+0x24>)
90004298:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
9000429c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900042a0:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
900042a4:	4770      	bx	lr
900042a6:	bf00      	nop
900042a8:	e000e100 	.word	0xe000e100

900042ac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
900042ac:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
900042ae:	4604      	mov	r4, r0
900042b0:	b908      	cbnz	r0, 900042b6 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
900042b2:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
900042b4:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
900042b6:	7f43      	ldrb	r3, [r0, #29]
900042b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
900042bc:	b913      	cbnz	r3, 900042c4 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
900042be:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
900042c0:	f7fd ff64 	bl	9000218c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
900042c4:	2302      	movs	r3, #2
900042c6:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
900042c8:	7923      	ldrb	r3, [r4, #4]
900042ca:	b9e3      	cbnz	r3, 90004306 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
900042cc:	6823      	ldr	r3, [r4, #0]
900042ce:	4a13      	ldr	r2, [pc, #76]	; (9000431c <HAL_CRC_Init+0x70>)
900042d0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
900042d2:	689a      	ldr	r2, [r3, #8]
900042d4:	f022 0218 	bic.w	r2, r2, #24
900042d8:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
900042da:	7962      	ldrb	r2, [r4, #5]
900042dc:	6823      	ldr	r3, [r4, #0]
900042de:	b9d2      	cbnz	r2, 90004316 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
900042e0:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
900042e4:	611a      	str	r2, [r3, #16]
  return HAL_OK;
900042e6:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
900042e8:	689a      	ldr	r2, [r3, #8]
900042ea:	6961      	ldr	r1, [r4, #20]
900042ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
900042f0:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
900042f2:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
900042f4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
900042f6:	689a      	ldr	r2, [r3, #8]
900042f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
900042fc:	430a      	orrs	r2, r1
900042fe:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
90004300:	2301      	movs	r3, #1
90004302:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
90004304:	e7d6      	b.n	900042b4 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
90004306:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
9000430a:	4620      	mov	r0, r4
9000430c:	f000 f808 	bl	90004320 <HAL_CRCEx_Polynomial_Set>
90004310:	2800      	cmp	r0, #0
90004312:	d0e2      	beq.n	900042da <HAL_CRC_Init+0x2e>
90004314:	e7cd      	b.n	900042b2 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
90004316:	6922      	ldr	r2, [r4, #16]
90004318:	e7e4      	b.n	900042e4 <HAL_CRC_Init+0x38>
9000431a:	bf00      	nop
9000431c:	04c11db7 	.word	0x04c11db7

90004320 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
90004320:	231f      	movs	r3, #31
{
90004322:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
90004324:	3b01      	subs	r3, #1
90004326:	d306      	bcc.n	90004336 <HAL_CRCEx_Polynomial_Set+0x16>
90004328:	fa21 f403 	lsr.w	r4, r1, r3
9000432c:	07e4      	lsls	r4, r4, #31
9000432e:	d5f9      	bpl.n	90004324 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
90004330:	2a08      	cmp	r2, #8
90004332:	d014      	beq.n	9000435e <HAL_CRCEx_Polynomial_Set+0x3e>
90004334:	d802      	bhi.n	9000433c <HAL_CRCEx_Polynomial_Set+0x1c>
90004336:	b13a      	cbz	r2, 90004348 <HAL_CRCEx_Polynomial_Set+0x28>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
90004338:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
9000433a:	e00d      	b.n	90004358 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
9000433c:	2a10      	cmp	r2, #16
9000433e:	d00c      	beq.n	9000435a <HAL_CRCEx_Polynomial_Set+0x3a>
90004340:	2a18      	cmp	r2, #24
90004342:	d1f9      	bne.n	90004338 <HAL_CRCEx_Polynomial_Set+0x18>
      if (msb >= HAL_CRC_LENGTH_7B)
90004344:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
90004346:	d8f7      	bhi.n	90004338 <HAL_CRCEx_Polynomial_Set+0x18>
    WRITE_REG(hcrc->Instance->POL, Pol);
90004348:	6800      	ldr	r0, [r0, #0]
9000434a:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
9000434c:	6883      	ldr	r3, [r0, #8]
9000434e:	f023 0318 	bic.w	r3, r3, #24
90004352:	431a      	orrs	r2, r3
90004354:	6082      	str	r2, [r0, #8]
90004356:	2000      	movs	r0, #0
}
90004358:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
9000435a:	2b07      	cmp	r3, #7
9000435c:	e7f3      	b.n	90004346 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
9000435e:	2b0f      	cmp	r3, #15
90004360:	e7f1      	b.n	90004346 <HAL_CRCEx_Polynomial_Set+0x26>
	...

90004364 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
90004364:	6803      	ldr	r3, [r0, #0]
{
90004366:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
90004368:	2018      	movs	r0, #24
9000436a:	b2d9      	uxtb	r1, r3
9000436c:	3910      	subs	r1, #16
9000436e:	fbb1 f0f0 	udiv	r0, r1, r0
{
90004372:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
90004374:	4c05      	ldr	r4, [pc, #20]	; (9000438c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
90004376:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
90004378:	5c20      	ldrb	r0, [r4, r0]
9000437a:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
9000437c:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
90004380:	f020 0003 	bic.w	r0, r0, #3
90004384:	bf88      	it	hi
90004386:	3004      	addhi	r0, #4
90004388:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
9000438a:	bd10      	pop	{r4, pc}
9000438c:	9002b23c 	.word	0x9002b23c

90004390 <HAL_DMA_Init>:
{
90004390:	b570      	push	{r4, r5, r6, lr}
90004392:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
90004394:	f7ff ff0c 	bl	900041b0 <HAL_GetTick>
90004398:	4605      	mov	r5, r0
  if(hdma == NULL)
9000439a:	2c00      	cmp	r4, #0
9000439c:	d073      	beq.n	90004486 <HAL_DMA_Init+0xf6>
  __HAL_UNLOCK(hdma);
9000439e:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
900043a0:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
900043a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
900043a6:	2302      	movs	r3, #2
900043a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
900043ac:	6813      	ldr	r3, [r2, #0]
900043ae:	f023 0301 	bic.w	r3, r3, #1
900043b2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
900043b4:	6821      	ldr	r1, [r4, #0]
900043b6:	680b      	ldr	r3, [r1, #0]
900043b8:	07d8      	lsls	r0, r3, #31
900043ba:	d42f      	bmi.n	9000441c <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
900043bc:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
900043be:	4d33      	ldr	r5, [pc, #204]	; (9000448c <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
900043c0:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
900043c2:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
900043c4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
900043c8:	4313      	orrs	r3, r2
900043ca:	68e2      	ldr	r2, [r4, #12]
900043cc:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
900043ce:	6922      	ldr	r2, [r4, #16]
900043d0:	4313      	orrs	r3, r2
900043d2:	6962      	ldr	r2, [r4, #20]
900043d4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
900043d6:	69e2      	ldr	r2, [r4, #28]
900043d8:	4303      	orrs	r3, r0
900043da:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
900043dc:	6a22      	ldr	r2, [r4, #32]
900043de:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
900043e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
900043e2:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
900043e4:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
900043e8:	bf02      	ittt	eq
900043ea:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
900043ee:	4335      	orreq	r5, r6
900043f0:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
900043f2:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
900043f4:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
900043f6:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
900043f8:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
900043fc:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
90004400:	d133      	bne.n	9000446a <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
90004402:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
90004404:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
90004406:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
90004408:	b37d      	cbz	r5, 9000446a <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
9000440a:	b990      	cbnz	r0, 90004432 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
9000440c:	2a01      	cmp	r2, #1
9000440e:	d021      	beq.n	90004454 <HAL_DMA_Init+0xc4>
90004410:	f032 0202 	bics.w	r2, r2, #2
90004414:	d129      	bne.n	9000446a <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
90004416:	01ea      	lsls	r2, r5, #7
90004418:	d527      	bpl.n	9000446a <HAL_DMA_Init+0xda>
9000441a:	e01e      	b.n	9000445a <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
9000441c:	f7ff fec8 	bl	900041b0 <HAL_GetTick>
90004420:	1b40      	subs	r0, r0, r5
90004422:	2805      	cmp	r0, #5
90004424:	d9c6      	bls.n	900043b4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
90004426:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
90004428:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
9000442a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
9000442c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
90004430:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
90004432:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
90004436:	d114      	bne.n	90004462 <HAL_DMA_Init+0xd2>
    switch (tmp)
90004438:	2a03      	cmp	r2, #3
9000443a:	d816      	bhi.n	9000446a <HAL_DMA_Init+0xda>
9000443c:	a001      	add	r0, pc, #4	; (adr r0, 90004444 <HAL_DMA_Init+0xb4>)
9000443e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
90004442:	bf00      	nop
90004444:	9000445b 	.word	0x9000445b
90004448:	90004417 	.word	0x90004417
9000444c:	9000445b 	.word	0x9000445b
90004450:	90004455 	.word	0x90004455
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
90004454:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
90004458:	d107      	bne.n	9000446a <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
9000445a:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
9000445c:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
9000445e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
90004460:	e7e4      	b.n	9000442c <HAL_DMA_Init+0x9c>
    switch (tmp)
90004462:	2a02      	cmp	r2, #2
90004464:	d9f9      	bls.n	9000445a <HAL_DMA_Init+0xca>
90004466:	2a03      	cmp	r2, #3
90004468:	d0d5      	beq.n	90004416 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
9000446a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
9000446c:	4620      	mov	r0, r4
9000446e:	f7ff ff79 	bl	90004364 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
90004472:	6de2      	ldr	r2, [r4, #92]	; 0x5c
90004474:	233f      	movs	r3, #63	; 0x3f
90004476:	4093      	lsls	r3, r2
90004478:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
9000447a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
9000447c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
9000447e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
90004480:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
90004484:	e7d4      	b.n	90004430 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
90004486:	2001      	movs	r0, #1
90004488:	e7d2      	b.n	90004430 <HAL_DMA_Init+0xa0>
9000448a:	bf00      	nop
9000448c:	f010803f 	.word	0xf010803f

90004490 <HAL_DMA_DeInit>:
{
90004490:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
90004492:	4605      	mov	r5, r0
90004494:	b320      	cbz	r0, 900044e0 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
90004496:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
9000449a:	2b02      	cmp	r3, #2
9000449c:	b2dc      	uxtb	r4, r3
9000449e:	d01d      	beq.n	900044dc <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
900044a0:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
900044a2:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
900044a4:	681a      	ldr	r2, [r3, #0]
900044a6:	f022 0201 	bic.w	r2, r2, #1
900044aa:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
900044ac:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
900044ae:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
900044b0:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
900044b2:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
900044b4:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
900044b6:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
900044b8:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
900044ba:	f7ff ff53 	bl	90004364 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
900044be:	6dea      	ldr	r2, [r5, #92]	; 0x5c
900044c0:	233f      	movs	r3, #63	; 0x3f
900044c2:	4093      	lsls	r3, r2
900044c4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
900044c6:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
900044c8:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
900044cc:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
900044d0:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
900044d4:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
900044d8:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
900044dc:	4620      	mov	r0, r4
900044de:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
900044e0:	2401      	movs	r4, #1
900044e2:	e7fb      	b.n	900044dc <HAL_DMA_DeInit+0x4c>

900044e4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
900044e4:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
900044e6:	4604      	mov	r4, r0
900044e8:	b330      	cbz	r0, 90004538 <HAL_DMA2D_Init+0x54>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
900044ea:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
900044ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
900044f2:	b91b      	cbnz	r3, 900044fc <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
900044f4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
900044f8:	f7fd fe5e 	bl	900021b8 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
900044fc:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900044fe:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
90004500:	6861      	ldr	r1, [r4, #4]
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90004502:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90004504:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
90004508:	6813      	ldr	r3, [r2, #0]
9000450a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
9000450e:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
90004510:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
90004512:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
90004514:	6b53      	ldr	r3, [r2, #52]	; 0x34
90004516:	f023 0307 	bic.w	r3, r3, #7
9000451a:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
9000451c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
9000451e:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90004520:	6c13      	ldr	r3, [r2, #64]	; 0x40
90004522:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
90004526:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
9000452a:	430b      	orrs	r3, r1
9000452c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
9000452e:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90004530:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90004532:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
90004536:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
90004538:	2001      	movs	r0, #1
9000453a:	e7fc      	b.n	90004536 <HAL_DMA2D_Init+0x52>

9000453c <HAL_DMA2D_LineEventCallback>:
9000453c:	4770      	bx	lr

9000453e <HAL_DMA2D_CLUTLoadingCpltCallback>:
9000453e:	4770      	bx	lr

90004540 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
90004540:	6803      	ldr	r3, [r0, #0]
{
90004542:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
90004544:	685e      	ldr	r6, [r3, #4]
{
90004546:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
90004548:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
9000454a:	07f2      	lsls	r2, r6, #31
9000454c:	d514      	bpl.n	90004578 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
9000454e:	05e9      	lsls	r1, r5, #23
90004550:	d512      	bpl.n	90004578 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
90004552:	681a      	ldr	r2, [r3, #0]
90004554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
90004558:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
9000455a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
9000455c:	f042 0201 	orr.w	r2, r2, #1
90004560:	63c2      	str	r2, [r0, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
90004562:	2201      	movs	r2, #1
90004564:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90004566:	2304      	movs	r3, #4
90004568:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
9000456c:	2300      	movs	r3, #0
9000456e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
90004572:	6943      	ldr	r3, [r0, #20]
90004574:	b103      	cbz	r3, 90004578 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
90004576:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
90004578:	06b2      	lsls	r2, r6, #26
9000457a:	d516      	bpl.n	900045aa <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
9000457c:	04ab      	lsls	r3, r5, #18
9000457e:	d514      	bpl.n	900045aa <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
90004580:	6823      	ldr	r3, [r4, #0]
90004582:	681a      	ldr	r2, [r3, #0]
90004584:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
90004588:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
9000458a:	2220      	movs	r2, #32
9000458c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
9000458e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90004590:	f043 0302 	orr.w	r3, r3, #2
90004594:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90004596:	2304      	movs	r3, #4
90004598:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
9000459c:	2300      	movs	r3, #0
9000459e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
900045a2:	6963      	ldr	r3, [r4, #20]
900045a4:	b10b      	cbz	r3, 900045aa <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
900045a6:	4620      	mov	r0, r4
900045a8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
900045aa:	0730      	lsls	r0, r6, #28
900045ac:	d516      	bpl.n	900045dc <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
900045ae:	0529      	lsls	r1, r5, #20
900045b0:	d514      	bpl.n	900045dc <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
900045b2:	6823      	ldr	r3, [r4, #0]
900045b4:	681a      	ldr	r2, [r3, #0]
900045b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
900045ba:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
900045bc:	2208      	movs	r2, #8
900045be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
900045c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
900045c2:	f043 0304 	orr.w	r3, r3, #4
900045c6:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
900045c8:	2304      	movs	r3, #4
900045ca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
900045ce:	2300      	movs	r3, #0
900045d0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
900045d4:	6963      	ldr	r3, [r4, #20]
900045d6:	b10b      	cbz	r3, 900045dc <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
900045d8:	4620      	mov	r0, r4
900045da:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
900045dc:	0772      	lsls	r2, r6, #29
900045de:	d50b      	bpl.n	900045f8 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
900045e0:	056b      	lsls	r3, r5, #21
900045e2:	d509      	bpl.n	900045f8 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
900045e4:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
900045e6:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
900045e8:	681a      	ldr	r2, [r3, #0]
900045ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
900045ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
900045f0:	2204      	movs	r2, #4
900045f2:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
900045f4:	f7ff ffa2 	bl	9000453c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
900045f8:	07b0      	lsls	r0, r6, #30
900045fa:	d514      	bpl.n	90004626 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
900045fc:	05a9      	lsls	r1, r5, #22
900045fe:	d512      	bpl.n	90004626 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
90004600:	6823      	ldr	r3, [r4, #0]
90004602:	681a      	ldr	r2, [r3, #0]
90004604:	f422 7200 	bic.w	r2, r2, #512	; 0x200
90004608:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
9000460a:	2202      	movs	r2, #2
9000460c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
9000460e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90004610:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
90004612:	2301      	movs	r3, #1
90004614:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
90004618:	2300      	movs	r3, #0
9000461a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
9000461e:	6923      	ldr	r3, [r4, #16]
90004620:	b10b      	cbz	r3, 90004626 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
90004622:	4620      	mov	r0, r4
90004624:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
90004626:	06f2      	lsls	r2, r6, #27
90004628:	d513      	bpl.n	90004652 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
9000462a:	04eb      	lsls	r3, r5, #19
9000462c:	d511      	bpl.n	90004652 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
9000462e:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
90004630:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
90004632:	681a      	ldr	r2, [r3, #0]
90004634:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
90004638:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
9000463a:	2210      	movs	r2, #16
9000463c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
9000463e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90004640:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
90004642:	2301      	movs	r3, #1
90004644:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
90004648:	2300      	movs	r3, #0
9000464a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
9000464e:	f7ff ff76 	bl	9000453e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
90004652:	bd70      	pop	{r4, r5, r6, pc}

90004654 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
90004654:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
90004656:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
9000465a:	2b01      	cmp	r3, #1
9000465c:	f04f 0302 	mov.w	r3, #2
90004660:	d02b      	beq.n	900046ba <HAL_DMA2D_ConfigLayer+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90004662:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
90004666:	2201      	movs	r2, #1
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
90004668:	eb00 1301 	add.w	r3, r0, r1, lsl #4
9000466c:	4f1c      	ldr	r7, [pc, #112]	; (900046e0 <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
9000466e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
90004672:	010e      	lsls	r6, r1, #4
90004674:	6a5d      	ldr	r5, [r3, #36]	; 0x24
90004676:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
9000467a:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
9000467e:	3c09      	subs	r4, #9
90004680:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90004682:	bf96      	itet	ls
90004684:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90004688:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
9000468c:	431a      	orrls	r2, r3
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
9000468e:	6803      	ldr	r3, [r0, #0]
90004690:	b9a9      	cbnz	r1, 900046be <HAL_DMA2D_ConfigLayer+0x6a>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90004692:	6a59      	ldr	r1, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90004694:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90004696:	ea01 0107 	and.w	r1, r1, r7
9000469a:	ea42 0201 	orr.w	r2, r2, r1
9000469e:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
900046a0:	6982      	ldr	r2, [r0, #24]
900046a2:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900046a4:	d803      	bhi.n	900046ae <HAL_DMA2D_ConfigLayer+0x5a>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
900046a6:	6a42      	ldr	r2, [r0, #36]	; 0x24
900046a8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
900046ac:	629a      	str	r2, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
900046ae:	2301      	movs	r3, #1
900046b0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
900046b4:	2300      	movs	r3, #0
900046b6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
900046ba:	4618      	mov	r0, r3

  return HAL_OK;
}
900046bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
900046be:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900046c0:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
900046c2:	ea01 0107 	and.w	r1, r1, r7
900046c6:	ea42 0201 	orr.w	r2, r2, r1
900046ca:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
900046cc:	eb00 0206 	add.w	r2, r0, r6
900046d0:	6992      	ldr	r2, [r2, #24]
900046d2:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900046d4:	d8eb      	bhi.n	900046ae <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
900046d6:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
900046da:	621d      	str	r5, [r3, #32]
900046dc:	e7e7      	b.n	900046ae <HAL_DMA2D_ConfigLayer+0x5a>
900046de:	bf00      	nop
900046e0:	00fcfff0 	.word	0x00fcfff0

900046e4 <ETH_FlushTransmitFIFO>:
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
900046e4:	2300      	movs	r3, #0
{
900046e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
900046e8:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
900046ec:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
900046ee:	6803      	ldr	r3, [r0, #0]
{
900046f0:	4605      	mov	r5, r0
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
900046f2:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
900046f4:	591a      	ldr	r2, [r3, r4]
900046f6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
900046fa:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
900046fc:	591b      	ldr	r3, [r3, r4]
900046fe:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
90004700:	f7ff fd5c 	bl	900041bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
90004704:	682b      	ldr	r3, [r5, #0]
90004706:	9a01      	ldr	r2, [sp, #4]
90004708:	511a      	str	r2, [r3, r4]
}
9000470a:	b003      	add	sp, #12
9000470c:	bd30      	pop	{r4, r5, pc}
	...

90004710 <ETH_MACDMAConfig>:
{
90004710:	b570      	push	{r4, r5, r6, lr}
90004712:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
90004714:	b129      	cbz	r1, 90004722 <ETH_MACDMAConfig+0x12>
    (heth->Init).Speed = ETH_SPEED_100M;
90004716:	f44f 4380 	mov.w	r3, #16384	; 0x4000
9000471a:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000471e:	e9c0 3202 	strd	r3, r2, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
90004722:	69e3      	ldr	r3, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
90004724:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
90004726:	2b00      	cmp	r3, #0
  tmpreg = (heth->Instance)->MACCR;
90004728:	6810      	ldr	r0, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
9000472a:	bf0c      	ite	eq
9000472c:	f44f 6180 	moveq.w	r1, #1024	; 0x400
90004730:	2100      	movne	r1, #0
                       macinit.LoopbackMode |
90004732:	e9d4 3502 	ldrd	r3, r5, [r4, #8]
90004736:	432b      	orrs	r3, r5
                       (heth->Init).DuplexMode | 
90004738:	430b      	orrs	r3, r1
  tmpreg &= ETH_MACCR_CLEAR_MASK;
9000473a:	492d      	ldr	r1, [pc, #180]	; (900047f0 <ETH_MACDMAConfig+0xe0>)
9000473c:	4001      	ands	r1, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
9000473e:	2001      	movs	r0, #1
90004740:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
90004742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
90004746:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
90004748:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
9000474a:	f7ff fd37 	bl	900041bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
9000474e:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
90004750:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
90004752:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
90004754:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
90004756:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
90004758:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
9000475a:	f7ff fd2f 	bl	900041bc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
9000475e:	6823      	ldr	r3, [r4, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
90004760:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
90004762:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
90004764:	2500      	movs	r5, #0
90004766:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
90004768:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
9000476a:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
9000476c:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
90004770:	0412      	lsls	r2, r2, #16
90004772:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
90004774:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
90004778:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
9000477a:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
9000477c:	f7ff fd1e 	bl	900041bc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
90004780:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
90004782:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
90004784:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
90004786:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
90004788:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
9000478a:	f7ff fd17 	bl	900041bc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
9000478e:	6822      	ldr	r2, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
90004790:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
90004792:	4b18      	ldr	r3, [pc, #96]	; (900047f4 <ETH_MACDMAConfig+0xe4>)
    (heth->Instance)->MACVLANTR = tmpreg;
90004794:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
90004796:	f241 0518 	movw	r5, #4120	; 0x1018
9000479a:	5951      	ldr	r1, [r2, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
9000479c:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
9000479e:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
900047a2:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
900047a6:	5153      	str	r3, [r2, r5]
    tmpreg = (heth->Instance)->DMAOMR;
900047a8:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
900047aa:	f7ff fd07 	bl	900041bc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
900047ae:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
900047b0:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
900047b2:	4a11      	ldr	r2, [pc, #68]	; (900047f8 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->DMAOMR = tmpreg;
900047b4:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
900047b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900047ba:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
900047bc:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
900047be:	f7ff fcfd 	bl	900041bc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
900047c2:	6822      	ldr	r2, [r4, #0]
900047c4:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
900047c8:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
900047ca:	69a3      	ldr	r3, [r4, #24]
900047cc:	2b01      	cmp	r3, #1
900047ce:	d107      	bne.n	900047e0 <ETH_MACDMAConfig+0xd0>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
900047d0:	f241 011c 	movw	r1, #4124	; 0x101c
900047d4:	5853      	ldr	r3, [r2, r1]
900047d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900047da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900047de:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
900047e0:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
900047e2:	4a06      	ldr	r2, [pc, #24]	; (900047fc <ETH_MACDMAConfig+0xec>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
900047e4:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
900047e6:	6011      	str	r1, [r2, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
900047e8:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
900047ea:	4b05      	ldr	r3, [pc, #20]	; (90004800 <ETH_MACDMAConfig+0xf0>)
900047ec:	601a      	str	r2, [r3, #0]
}
900047ee:	bd70      	pop	{r4, r5, r6, pc}
900047f0:	ff20810f 	.word	0xff20810f
900047f4:	f8de3f23 	.word	0xf8de3f23
900047f8:	02c12080 	.word	0x02c12080
900047fc:	40028040 	.word	0x40028040
90004800:	40028044 	.word	0x40028044

90004804 <HAL_ETH_DMATxDescListInit>:
{
90004804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
90004808:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
9000480c:	2c01      	cmp	r4, #1
9000480e:	f04f 0402 	mov.w	r4, #2
90004812:	d031      	beq.n	90004878 <HAL_ETH_DMATxDescListInit+0x74>
90004814:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
90004816:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
9000481a:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
  for(i=0; i < TxBuffCount; i++)
9000481e:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
90004820:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
90004824:	f240 5cf4 	movw	ip, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
90004828:	2500      	movs	r5, #0
    if(i < (TxBuffCount-1))
9000482a:	f103 3eff 	add.w	lr, r3, #4294967295
  heth->TxDesc = DMATxDescTab;
9000482e:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
90004830:	429d      	cmp	r5, r3
90004832:	d10c      	bne.n	9000484e <HAL_ETH_DMATxDescListInit+0x4a>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
90004834:	6802      	ldr	r2, [r0, #0]
90004836:	f241 0310 	movw	r3, #4112	; 0x1010
9000483a:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
9000483c:	2301      	movs	r3, #1
9000483e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
90004842:	2300      	movs	r3, #0
90004844:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
90004848:	4618      	mov	r0, r3
}
9000484a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
9000484e:	fb0c 2605 	mla	r6, ip, r5, r2
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
90004852:	6027      	str	r7, [r4, #0]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
90004854:	60a6      	str	r6, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
90004856:	69c6      	ldr	r6, [r0, #28]
90004858:	b91e      	cbnz	r6, 90004862 <HAL_ETH_DMATxDescListInit+0x5e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
9000485a:	6826      	ldr	r6, [r4, #0]
9000485c:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
90004860:	6026      	str	r6, [r4, #0]
    if(i < (TxBuffCount-1))
90004862:	f104 0620 	add.w	r6, r4, #32
90004866:	45ae      	cmp	lr, r5
90004868:	bf94      	ite	ls
9000486a:	4688      	movls	r8, r1
9000486c:	46b0      	movhi	r8, r6
9000486e:	3501      	adds	r5, #1
90004870:	f8c4 800c 	str.w	r8, [r4, #12]
  for(i=0; i < TxBuffCount; i++)
90004874:	4634      	mov	r4, r6
90004876:	e7db      	b.n	90004830 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
90004878:	4620      	mov	r0, r4
9000487a:	e7e6      	b.n	9000484a <HAL_ETH_DMATxDescListInit+0x46>

9000487c <HAL_ETH_DMARxDescListInit>:
{
9000487c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(heth);
90004880:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
90004884:	2c01      	cmp	r4, #1
90004886:	f04f 0402 	mov.w	r4, #2
9000488a:	d02f      	beq.n	900048ec <HAL_ETH_DMARxDescListInit+0x70>
9000488c:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
9000488e:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
90004892:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
  for(i=0; i < RxBuffCount; i++)
90004896:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
90004898:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
9000489c:	f244 5cf4 	movw	ip, #17908	; 0x45f4
  for(i=0; i < RxBuffCount; i++)
900048a0:	2500      	movs	r5, #0
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
900048a2:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
900048a6:	f103 38ff 	add.w	r8, r3, #4294967295
  heth->RxDesc = DMARxDescTab; 
900048aa:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
900048ac:	42ab      	cmp	r3, r5
900048ae:	d10c      	bne.n	900048ca <HAL_ETH_DMARxDescListInit+0x4e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
900048b0:	6802      	ldr	r2, [r0, #0]
900048b2:	f241 030c 	movw	r3, #4108	; 0x100c
900048b6:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
900048b8:	2301      	movs	r3, #1
900048ba:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
900048be:	2300      	movs	r3, #0
900048c0:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
900048c4:	4618      	mov	r0, r3
}
900048c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
900048ca:	fb0e 2605 	mla	r6, lr, r5, r2
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
900048ce:	6027      	str	r7, [r4, #0]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
900048d0:	60a6      	str	r6, [r4, #8]
900048d2:	f104 0620 	add.w	r6, r4, #32
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
900048d6:	f8c4 c004 	str.w	ip, [r4, #4]
    if(i < (RxBuffCount-1))
900048da:	45a8      	cmp	r8, r5
900048dc:	bf94      	ite	ls
900048de:	4689      	movls	r9, r1
900048e0:	46b1      	movhi	r9, r6
900048e2:	3501      	adds	r5, #1
900048e4:	f8c4 900c 	str.w	r9, [r4, #12]
  for(i=0; i < RxBuffCount; i++)
900048e8:	4634      	mov	r4, r6
900048ea:	e7df      	b.n	900048ac <HAL_ETH_DMARxDescListInit+0x30>
  __HAL_LOCK(heth);
900048ec:	4620      	mov	r0, r4
900048ee:	e7ea      	b.n	900048c6 <HAL_ETH_DMARxDescListInit+0x4a>

900048f0 <HAL_ETH_TransmitFrame>:
{
900048f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
900048f2:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
900048f6:	2b01      	cmp	r3, #1
900048f8:	f04f 0302 	mov.w	r3, #2
900048fc:	d066      	beq.n	900049cc <HAL_ETH_TransmitFrame+0xdc>
900048fe:	2201      	movs	r2, #1
  heth->State = HAL_ETH_STATE_BUSY;
90004900:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
90004904:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  if (FrameLength == 0) 
90004908:	b929      	cbnz	r1, 90004916 <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
9000490a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
9000490e:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
90004912:	4610      	mov	r0, r2
}
90004914:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
90004916:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
90004918:	681c      	ldr	r4, [r3, #0]
9000491a:	2c00      	cmp	r4, #0
9000491c:	da06      	bge.n	9000492c <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
9000491e:	2312      	movs	r3, #18
90004920:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
90004924:	2300      	movs	r3, #0
90004926:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
9000492a:	e7f2      	b.n	90004912 <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
9000492c:	f240 54f4 	movw	r4, #1524	; 0x5f4
90004930:	42a1      	cmp	r1, r4
90004932:	d92c      	bls.n	9000498e <HAL_ETH_TransmitFrame+0x9e>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
90004934:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
90004938:	fb04 1412 	mls	r4, r4, r2, r1
9000493c:	b32c      	cbz	r4, 9000498a <HAL_ETH_TransmitFrame+0x9a>
      bufcount++;
9000493e:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
90004940:	4c23      	ldr	r4, [pc, #140]	; (900049d0 <HAL_ETH_TransmitFrame+0xe0>)
90004942:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
90004946:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1))
9000494a:	1e57      	subs	r7, r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
9000494c:	fb04 1102 	mla	r1, r4, r2, r1
    for (i=0; i< bufcount; i++)
90004950:	2400      	movs	r4, #0
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
90004952:	f3c1 010c 	ubfx	r1, r1, #0, #13
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
90004956:	681d      	ldr	r5, [r3, #0]
90004958:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
9000495c:	601d      	str	r5, [r3, #0]
      if (i == 0) 
9000495e:	b91c      	cbnz	r4, 90004968 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
90004960:	681d      	ldr	r5, [r3, #0]
90004962:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
90004966:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1))
90004968:	42a7      	cmp	r7, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
9000496a:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
9000496c:	d104      	bne.n	90004978 <HAL_ETH_TransmitFrame+0x88>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
9000496e:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
90004970:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
90004972:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
90004976:	601d      	str	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
90004978:	681d      	ldr	r5, [r3, #0]
    for (i=0; i< bufcount; i++)
9000497a:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
9000497c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
90004980:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
90004982:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
90004984:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
90004986:	d1e6      	bne.n	90004956 <HAL_ETH_TransmitFrame+0x66>
90004988:	e00d      	b.n	900049a6 <HAL_ETH_TransmitFrame+0xb6>
  if (bufcount == 1)
9000498a:	2a01      	cmp	r2, #1
9000498c:	d1d8      	bne.n	90004940 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
9000498e:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
90004990:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
90004994:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
90004998:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
9000499a:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
9000499c:	681a      	ldr	r2, [r3, #0]
9000499e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
900049a2:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
900049a4:	68db      	ldr	r3, [r3, #12]
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
900049a6:	f241 0214 	movw	r2, #4116	; 0x1014
900049aa:	62c3      	str	r3, [r0, #44]	; 0x2c
900049ac:	6803      	ldr	r3, [r0, #0]
900049ae:	5899      	ldr	r1, [r3, r2]
900049b0:	0749      	lsls	r1, r1, #29
900049b2:	d505      	bpl.n	900049c0 <HAL_ETH_TransmitFrame+0xd0>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
900049b4:	2104      	movs	r1, #4
900049b6:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0;
900049b8:	f241 0204 	movw	r2, #4100	; 0x1004
900049bc:	2100      	movs	r1, #0
900049be:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
900049c0:	2301      	movs	r3, #1
900049c2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
900049c6:	2300      	movs	r3, #0
900049c8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
900049cc:	4618      	mov	r0, r3
900049ce:	e7a1      	b.n	90004914 <HAL_ETH_TransmitFrame+0x24>
900049d0:	fffffa0c 	.word	0xfffffa0c

900049d4 <HAL_ETH_GetReceivedFrame_IT>:
{
900049d4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(heth);
900049d6:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
900049da:	2b01      	cmp	r3, #1
900049dc:	f04f 0302 	mov.w	r3, #2
900049e0:	d03b      	beq.n	90004a5a <HAL_ETH_GetReceivedFrame_IT+0x86>
900049e2:	2201      	movs	r2, #1
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
900049e4:	2405      	movs	r4, #5
  heth->State = HAL_ETH_STATE_BUSY;
900049e6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      heth->RxFrameInfos.SegCount = 1;   
900049ea:	4611      	mov	r1, r2
  __HAL_LOCK(heth);
900049ec:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
900049f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
900049f2:	681a      	ldr	r2, [r3, #0]
900049f4:	2a00      	cmp	r2, #0
900049f6:	db01      	blt.n	900049fc <HAL_ETH_GetReceivedFrame_IT+0x28>
900049f8:	3c01      	subs	r4, #1
900049fa:	d106      	bne.n	90004a0a <HAL_ETH_GetReceivedFrame_IT+0x36>
  heth->State = HAL_ETH_STATE_READY;
900049fc:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
900049fe:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
90004a00:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
90004a04:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
90004a08:	e027      	b.n	90004a5a <HAL_ETH_GetReceivedFrame_IT+0x86>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
90004a0a:	681a      	ldr	r2, [r3, #0]
90004a0c:	68dd      	ldr	r5, [r3, #12]
90004a0e:	f402 7240 	and.w	r2, r2, #768	; 0x300
90004a12:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
90004a16:	d103      	bne.n	90004a20 <HAL_ETH_GetReceivedFrame_IT+0x4c>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
90004a18:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
90004a1a:	6381      	str	r1, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
90004a1c:	6285      	str	r5, [r0, #40]	; 0x28
90004a1e:	e7e7      	b.n	900049f0 <HAL_ETH_GetReceivedFrame_IT+0x1c>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
90004a20:	681e      	ldr	r6, [r3, #0]
90004a22:	6b82      	ldr	r2, [r0, #56]	; 0x38
90004a24:	f416 7f40 	tst.w	r6, #768	; 0x300
90004a28:	f102 0201 	add.w	r2, r2, #1
90004a2c:	d101      	bne.n	90004a32 <HAL_ETH_GetReceivedFrame_IT+0x5e>
      (heth->RxFrameInfos.SegCount)++;
90004a2e:	6382      	str	r2, [r0, #56]	; 0x38
90004a30:	e7f4      	b.n	90004a1c <HAL_ETH_GetReceivedFrame_IT+0x48>
      if ((heth->RxFrameInfos.SegCount) == 1)
90004a32:	2a01      	cmp	r2, #1
      (heth->RxFrameInfos.SegCount)++;
90004a34:	e9c0 320d 	strd	r3, r2, [r0, #52]	; 0x34
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
90004a38:	bf08      	it	eq
90004a3a:	6303      	streq	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
90004a3c:	681b      	ldr	r3, [r3, #0]
90004a3e:	f3c3 430d 	ubfx	r3, r3, #16, #14
90004a42:	3b04      	subs	r3, #4
90004a44:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
90004a46:	6b03      	ldr	r3, [r0, #48]	; 0x30
90004a48:	689b      	ldr	r3, [r3, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
90004a4a:	6285      	str	r5, [r0, #40]	; 0x28
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
90004a4c:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
90004a4e:	2301      	movs	r3, #1
90004a50:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
90004a54:	2300      	movs	r3, #0
90004a56:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
90004a5a:	4618      	mov	r0, r3
90004a5c:	bd70      	pop	{r4, r5, r6, pc}

90004a5e <HAL_ETH_TxCpltCallback>:
90004a5e:	4770      	bx	lr

90004a60 <HAL_ETH_ErrorCallback>:
90004a60:	4770      	bx	lr

90004a62 <HAL_ETH_IRQHandler>:
{
90004a62:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
90004a64:	6802      	ldr	r2, [r0, #0]
90004a66:	f241 0614 	movw	r6, #4116	; 0x1014
{
90004a6a:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
90004a6c:	5995      	ldr	r5, [r2, r6]
90004a6e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
90004a72:	d021      	beq.n	90004ab8 <HAL_ETH_IRQHandler+0x56>
    HAL_ETH_RxCpltCallback(heth);
90004a74:	f7fc f97e 	bl	90000d74 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
90004a78:	6823      	ldr	r3, [r4, #0]
90004a7a:	2240      	movs	r2, #64	; 0x40
90004a7c:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
90004a7e:	2301      	movs	r3, #1
90004a80:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
90004a84:	2300      	movs	r3, #0
90004a86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
90004a8a:	6823      	ldr	r3, [r4, #0]
90004a8c:	f241 0514 	movw	r5, #4116	; 0x1014
90004a90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
90004a94:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
90004a96:	595b      	ldr	r3, [r3, r5]
90004a98:	041b      	lsls	r3, r3, #16
90004a9a:	d50c      	bpl.n	90004ab6 <HAL_ETH_IRQHandler+0x54>
    HAL_ETH_ErrorCallback(heth);
90004a9c:	4620      	mov	r0, r4
90004a9e:	f7ff ffdf 	bl	90004a60 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
90004aa2:	6823      	ldr	r3, [r4, #0]
90004aa4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
90004aa8:	515a      	str	r2, [r3, r5]
    heth->State = HAL_ETH_STATE_READY;
90004aaa:	2301      	movs	r3, #1
90004aac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
90004ab0:	2300      	movs	r3, #0
90004ab2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
90004ab6:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
90004ab8:	5993      	ldr	r3, [r2, r6]
90004aba:	07da      	lsls	r2, r3, #31
90004abc:	d5e5      	bpl.n	90004a8a <HAL_ETH_IRQHandler+0x28>
    HAL_ETH_TxCpltCallback(heth);
90004abe:	f7ff ffce 	bl	90004a5e <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
90004ac2:	2301      	movs	r3, #1
90004ac4:	6822      	ldr	r2, [r4, #0]
90004ac6:	5193      	str	r3, [r2, r6]
    heth->State = HAL_ETH_STATE_READY;
90004ac8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
90004acc:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
90004ad0:	e7db      	b.n	90004a8a <HAL_ETH_IRQHandler+0x28>

90004ad2 <HAL_ETH_ReadPHYRegister>:
{
90004ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
90004ad4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
90004ad8:	4606      	mov	r6, r0
90004ada:	4615      	mov	r5, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
90004adc:	2b82      	cmp	r3, #130	; 0x82
90004ade:	d031      	beq.n	90004b44 <HAL_ETH_ReadPHYRegister+0x72>
  heth->State = HAL_ETH_STATE_BUSY_RD;
90004ae0:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
90004ae2:	0189      	lsls	r1, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
90004ae4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
90004ae8:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
90004aec:	8a34      	ldrh	r4, [r6, #16]
  tmpreg = heth->Instance->MACMIIAR;
90004aee:	6803      	ldr	r3, [r0, #0]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
90004af0:	02e4      	lsls	r4, r4, #11
  tmpreg = heth->Instance->MACMIIAR;
90004af2:	6918      	ldr	r0, [r3, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
90004af4:	b2a4      	uxth	r4, r4
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
90004af6:	f000 001c 	and.w	r0, r0, #28
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
90004afa:	430c      	orrs	r4, r1
90004afc:	4304      	orrs	r4, r0
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
90004afe:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
90004b02:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
90004b04:	f7ff fb54 	bl	900041b0 <HAL_GetTick>
90004b08:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
90004b0a:	f014 0401 	ands.w	r4, r4, #1
90004b0e:	d108      	bne.n	90004b22 <HAL_ETH_ReadPHYRegister+0x50>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
90004b10:	6833      	ldr	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
90004b12:	4620      	mov	r0, r4
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
90004b14:	695b      	ldr	r3, [r3, #20]
90004b16:	b29b      	uxth	r3, r3
90004b18:	602b      	str	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
90004b1a:	2301      	movs	r3, #1
90004b1c:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
  return HAL_OK;
90004b20:	e00c      	b.n	90004b3c <HAL_ETH_ReadPHYRegister+0x6a>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
90004b22:	f7ff fb45 	bl	900041b0 <HAL_GetTick>
90004b26:	1bc0      	subs	r0, r0, r7
90004b28:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
90004b2c:	d307      	bcc.n	90004b3e <HAL_ETH_ReadPHYRegister+0x6c>
      heth->State= HAL_ETH_STATE_READY;
90004b2e:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
90004b30:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
90004b32:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
      __HAL_UNLOCK(heth);
90004b36:	2300      	movs	r3, #0
90004b38:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
}
90004b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
90004b3e:	6833      	ldr	r3, [r6, #0]
90004b40:	691c      	ldr	r4, [r3, #16]
90004b42:	e7e2      	b.n	90004b0a <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
90004b44:	2002      	movs	r0, #2
90004b46:	e7f9      	b.n	90004b3c <HAL_ETH_ReadPHYRegister+0x6a>

90004b48 <HAL_ETH_WritePHYRegister>:
{
90004b48:	b570      	push	{r4, r5, r6, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
90004b4a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
90004b4e:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
90004b50:	2b42      	cmp	r3, #66	; 0x42
90004b52:	d02f      	beq.n	90004bb4 <HAL_ETH_WritePHYRegister+0x6c>
  heth->State = HAL_ETH_STATE_BUSY_WR;
90004b54:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
90004b56:	0189      	lsls	r1, r1, #6
90004b58:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
90004b5a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
90004b5e:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
90004b62:	8a2c      	ldrh	r4, [r5, #16]
  tmpreg = heth->Instance->MACMIIAR;
90004b64:	6803      	ldr	r3, [r0, #0]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
90004b66:	02e4      	lsls	r4, r4, #11
  tmpreg = heth->Instance->MACMIIAR;
90004b68:	6918      	ldr	r0, [r3, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
90004b6a:	b2a4      	uxth	r4, r4
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
90004b6c:	615a      	str	r2, [r3, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
90004b6e:	f000 001c 	and.w	r0, r0, #28
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
90004b72:	430c      	orrs	r4, r1
90004b74:	4304      	orrs	r4, r0
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
90004b76:	f044 0403 	orr.w	r4, r4, #3
  heth->Instance->MACMIIAR = tmpreg;
90004b7a:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
90004b7c:	f7ff fb18 	bl	900041b0 <HAL_GetTick>
90004b80:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
90004b82:	f014 0401 	ands.w	r4, r4, #1
90004b86:	d104      	bne.n	90004b92 <HAL_ETH_WritePHYRegister+0x4a>
  heth->State = HAL_ETH_STATE_READY;
90004b88:	2301      	movs	r3, #1
  return HAL_OK; 
90004b8a:	4620      	mov	r0, r4
  heth->State = HAL_ETH_STATE_READY;
90004b8c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
90004b90:	e00c      	b.n	90004bac <HAL_ETH_WritePHYRegister+0x64>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
90004b92:	f7ff fb0d 	bl	900041b0 <HAL_GetTick>
90004b96:	1b80      	subs	r0, r0, r6
90004b98:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
90004b9c:	d307      	bcc.n	90004bae <HAL_ETH_WritePHYRegister+0x66>
      heth->State= HAL_ETH_STATE_READY;
90004b9e:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
90004ba0:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
90004ba2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
90004ba6:	2300      	movs	r3, #0
90004ba8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
90004bac:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
90004bae:	682b      	ldr	r3, [r5, #0]
90004bb0:	691c      	ldr	r4, [r3, #16]
90004bb2:	e7e6      	b.n	90004b82 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
90004bb4:	2002      	movs	r0, #2
90004bb6:	e7f9      	b.n	90004bac <HAL_ETH_WritePHYRegister+0x64>

90004bb8 <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
90004bb8:	2300      	movs	r3, #0
{
90004bba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
90004bbc:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
90004bbe:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
90004bc0:	2800      	cmp	r0, #0
90004bc2:	f000 80dd 	beq.w	90004d80 <HAL_ETH_Init+0x1c8>
  if(heth->State == HAL_ETH_STATE_RESET)
90004bc6:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
90004bca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90004bce:	b91b      	cbnz	r3, 90004bd8 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
90004bd0:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
90004bd4:	f7fc f854 	bl	90000c80 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90004bd8:	4b6a      	ldr	r3, [pc, #424]	; (90004d84 <HAL_ETH_Init+0x1cc>)
90004bda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
90004bdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
90004be0:	645a      	str	r2, [r3, #68]	; 0x44
90004be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90004be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90004be8:	9301      	str	r3, [sp, #4]
90004bea:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
90004bec:	4b66      	ldr	r3, [pc, #408]	; (90004d88 <HAL_ETH_Init+0x1d0>)
90004bee:	685a      	ldr	r2, [r3, #4]
90004bf0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
90004bf4:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
90004bf6:	685a      	ldr	r2, [r3, #4]
90004bf8:	6a21      	ldr	r1, [r4, #32]
90004bfa:	430a      	orrs	r2, r1
90004bfc:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
90004bfe:	6823      	ldr	r3, [r4, #0]
90004c00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90004c04:	681a      	ldr	r2, [r3, #0]
90004c06:	f042 0201 	orr.w	r2, r2, #1
90004c0a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
90004c0c:	f7ff fad0 	bl	900041b0 <HAL_GetTick>
90004c10:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
90004c12:	6823      	ldr	r3, [r4, #0]
90004c14:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
90004c18:	6812      	ldr	r2, [r2, #0]
90004c1a:	07d0      	lsls	r0, r2, #31
90004c1c:	d41d      	bmi.n	90004c5a <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
90004c1e:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
90004c20:	f001 fae4 	bl	900061ec <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
90004c24:	4b59      	ldr	r3, [pc, #356]	; (90004d8c <HAL_ETH_Init+0x1d4>)
90004c26:	4a5a      	ldr	r2, [pc, #360]	; (90004d90 <HAL_ETH_Init+0x1d8>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
90004c28:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
90004c2c:	4403      	add	r3, r0
90004c2e:	4293      	cmp	r3, r2
90004c30:	d222      	bcs.n	90004c78 <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
90004c32:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
90004c36:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
90004c38:	f44f 4200 	mov.w	r2, #32768	; 0x8000
90004c3c:	2100      	movs	r1, #0
90004c3e:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
90004c40:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
90004c42:	f7ff ff81 	bl	90004b48 <HAL_ETH_WritePHYRegister>
90004c46:	4605      	mov	r5, r0
90004c48:	b368      	cbz	r0, 90004ca6 <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
90004c4a:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
90004c4c:	2101      	movs	r1, #1
90004c4e:	4620      	mov	r0, r4
90004c50:	f7ff fd5e 	bl	90004710 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
90004c54:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
90004c58:	e00b      	b.n	90004c72 <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
90004c5a:	f7ff faa9 	bl	900041b0 <HAL_GetTick>
90004c5e:	1b40      	subs	r0, r0, r5
90004c60:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
90004c64:	d9d5      	bls.n	90004c12 <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
90004c66:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
90004c68:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
90004c6a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
90004c6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
90004c72:	4628      	mov	r0, r5
90004c74:	b003      	add	sp, #12
90004c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
90004c78:	4b46      	ldr	r3, [pc, #280]	; (90004d94 <HAL_ETH_Init+0x1dc>)
90004c7a:	4a47      	ldr	r2, [pc, #284]	; (90004d98 <HAL_ETH_Init+0x1e0>)
90004c7c:	4403      	add	r3, r0
90004c7e:	4293      	cmp	r3, r2
90004c80:	d802      	bhi.n	90004c88 <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
90004c82:	f045 050c 	orr.w	r5, r5, #12
90004c86:	e7d6      	b.n	90004c36 <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
90004c88:	4b44      	ldr	r3, [pc, #272]	; (90004d9c <HAL_ETH_Init+0x1e4>)
90004c8a:	4a45      	ldr	r2, [pc, #276]	; (90004da0 <HAL_ETH_Init+0x1e8>)
90004c8c:	4403      	add	r3, r0
90004c8e:	4293      	cmp	r3, r2
90004c90:	d3d1      	bcc.n	90004c36 <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
90004c92:	4b44      	ldr	r3, [pc, #272]	; (90004da4 <HAL_ETH_Init+0x1ec>)
90004c94:	4a44      	ldr	r2, [pc, #272]	; (90004da8 <HAL_ETH_Init+0x1f0>)
90004c96:	4403      	add	r3, r0
90004c98:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
90004c9a:	bf94      	ite	ls
90004c9c:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
90004ca0:	f045 0510 	orrhi.w	r5, r5, #16
90004ca4:	e7c7      	b.n	90004c36 <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
90004ca6:	20ff      	movs	r0, #255	; 0xff
90004ca8:	f7ff fa88 	bl	900041bc <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
90004cac:	6863      	ldr	r3, [r4, #4]
90004cae:	2b00      	cmp	r3, #0
90004cb0:	d054      	beq.n	90004d5c <HAL_ETH_Init+0x1a4>
    tickstart = HAL_GetTick();
90004cb2:	f7ff fa7d 	bl	900041b0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
90004cb6:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
90004cba:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
90004cbc:	466a      	mov	r2, sp
90004cbe:	2101      	movs	r1, #1
90004cc0:	4620      	mov	r0, r4
90004cc2:	f7ff ff06 	bl	90004ad2 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
90004cc6:	f7ff fa73 	bl	900041b0 <HAL_GetTick>
90004cca:	1b80      	subs	r0, r0, r6
90004ccc:	42b8      	cmp	r0, r7
90004cce:	d90b      	bls.n	90004ce8 <HAL_ETH_Init+0x130>
        ETH_MACDMAConfig(heth, err);
90004cd0:	2101      	movs	r1, #1
90004cd2:	4620      	mov	r0, r4
90004cd4:	f7ff fd1c 	bl	90004710 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
90004cd8:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
90004cda:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
90004cdc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
90004ce0:	2300      	movs	r3, #0
90004ce2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
90004ce6:	e7c4      	b.n	90004c72 <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
90004ce8:	9b00      	ldr	r3, [sp, #0]
90004cea:	0759      	lsls	r1, r3, #29
90004cec:	d5e6      	bpl.n	90004cbc <HAL_ETH_Init+0x104>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
90004cee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
90004cf2:	2100      	movs	r1, #0
90004cf4:	4620      	mov	r0, r4
90004cf6:	f7ff ff27 	bl	90004b48 <HAL_ETH_WritePHYRegister>
90004cfa:	2800      	cmp	r0, #0
90004cfc:	d1a5      	bne.n	90004c4a <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
90004cfe:	f7ff fa57 	bl	900041b0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
90004d02:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
90004d06:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
90004d08:	466a      	mov	r2, sp
90004d0a:	2101      	movs	r1, #1
90004d0c:	4620      	mov	r0, r4
90004d0e:	f7ff fee0 	bl	90004ad2 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
90004d12:	f7ff fa4d 	bl	900041b0 <HAL_GetTick>
90004d16:	1b80      	subs	r0, r0, r6
90004d18:	42b8      	cmp	r0, r7
90004d1a:	d8d9      	bhi.n	90004cd0 <HAL_ETH_Init+0x118>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
90004d1c:	9b00      	ldr	r3, [sp, #0]
90004d1e:	069a      	lsls	r2, r3, #26
90004d20:	d5f2      	bpl.n	90004d08 <HAL_ETH_Init+0x150>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
90004d22:	466a      	mov	r2, sp
90004d24:	211f      	movs	r1, #31
90004d26:	4620      	mov	r0, r4
90004d28:	f7ff fed3 	bl	90004ad2 <HAL_ETH_ReadPHYRegister>
90004d2c:	2800      	cmp	r0, #0
90004d2e:	d18c      	bne.n	90004c4a <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
90004d30:	9b00      	ldr	r3, [sp, #0]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
90004d32:	f013 0210 	ands.w	r2, r3, #16
90004d36:	bf18      	it	ne
90004d38:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
90004d3c:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_100M;
90004d3e:	bf58      	it	pl
90004d40:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
90004d44:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_10M; 
90004d46:	bf4c      	ite	mi
90004d48:	60a0      	strmi	r0, [r4, #8]
      (heth->Init).Speed = ETH_SPEED_100M;
90004d4a:	60a3      	strpl	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
90004d4c:	2100      	movs	r1, #0
90004d4e:	4620      	mov	r0, r4
90004d50:	f7ff fcde 	bl	90004710 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
90004d54:	2301      	movs	r3, #1
90004d56:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
90004d5a:	e78a      	b.n	90004c72 <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
90004d5c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
90004d60:	4629      	mov	r1, r5
90004d62:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
90004d64:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
90004d66:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
90004d6a:	b292      	uxth	r2, r2
90004d6c:	f7ff feec 	bl	90004b48 <HAL_ETH_WritePHYRegister>
90004d70:	2800      	cmp	r0, #0
90004d72:	f47f af6a 	bne.w	90004c4a <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
90004d76:	f640 70ff 	movw	r0, #4095	; 0xfff
90004d7a:	f7ff fa1f 	bl	900041bc <HAL_Delay>
90004d7e:	e7e5      	b.n	90004d4c <HAL_ETH_Init+0x194>
    return HAL_ERROR;
90004d80:	2501      	movs	r5, #1
90004d82:	e776      	b.n	90004c72 <HAL_ETH_Init+0xba>
90004d84:	40023800 	.word	0x40023800
90004d88:	40013800 	.word	0x40013800
90004d8c:	feced300 	.word	0xfeced300
90004d90:	00e4e1c0 	.word	0x00e4e1c0
90004d94:	fde9f140 	.word	0xfde9f140
90004d98:	017d783f 	.word	0x017d783f
90004d9c:	fc6c7900 	.word	0xfc6c7900
90004da0:	02625a00 	.word	0x02625a00
90004da4:	fa0a1f00 	.word	0xfa0a1f00
90004da8:	02faf07f 	.word	0x02faf07f

90004dac <HAL_ETH_Start>:
{  
90004dac:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(heth);
90004dae:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{  
90004db2:	4604      	mov	r4, r0
90004db4:	2002      	movs	r0, #2
  __HAL_LOCK(heth);
90004db6:	2b01      	cmp	r3, #1
90004db8:	d033      	beq.n	90004e22 <HAL_ETH_Start+0x76>
90004dba:	2601      	movs	r6, #1
  __IO uint32_t tmpreg = 0;
90004dbc:	2500      	movs	r5, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
90004dbe:	6823      	ldr	r3, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY;
90004dc0:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
  HAL_Delay(ETH_REG_WRITE_DELAY);
90004dc4:	4630      	mov	r0, r6
  __IO uint32_t tmpreg = 0;
90004dc6:	9501      	str	r5, [sp, #4]
  __HAL_LOCK(heth);
90004dc8:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
90004dcc:	681a      	ldr	r2, [r3, #0]
90004dce:	f042 0208 	orr.w	r2, r2, #8
90004dd2:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
90004dd4:	681b      	ldr	r3, [r3, #0]
90004dd6:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
90004dd8:	f7ff f9f0 	bl	900041bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
90004ddc:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
90004dde:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
90004de0:	6823      	ldr	r3, [r4, #0]
90004de2:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
90004de4:	9500      	str	r5, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
90004de6:	681a      	ldr	r2, [r3, #0]
90004de8:	f042 0204 	orr.w	r2, r2, #4
90004dec:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
90004dee:	681b      	ldr	r3, [r3, #0]
90004df0:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
90004df2:	f7ff f9e3 	bl	900041bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
90004df6:	6823      	ldr	r3, [r4, #0]
  ETH_FlushTransmitFIFO(heth);
90004df8:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg;
90004dfa:	9a00      	ldr	r2, [sp, #0]
90004dfc:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
90004dfe:	f7ff fc71 	bl	900046e4 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
90004e02:	6822      	ldr	r2, [r4, #0]
90004e04:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
90004e08:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
90004e0a:	58d1      	ldr	r1, [r2, r3]
90004e0c:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
90004e10:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
90004e12:	58d1      	ldr	r1, [r2, r3]
90004e14:	f041 0102 	orr.w	r1, r1, #2
90004e18:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
90004e1a:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
90004e1e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
90004e22:	b002      	add	sp, #8
90004e24:	bd70      	pop	{r4, r5, r6, pc}

90004e26 <HAL_ETH_Stop>:
{  
90004e26:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(heth);
90004e28:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{  
90004e2c:	4604      	mov	r4, r0
90004e2e:	2002      	movs	r0, #2
  __HAL_LOCK(heth);
90004e30:	2b01      	cmp	r3, #1
90004e32:	d033      	beq.n	90004e9c <HAL_ETH_Stop+0x76>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
90004e34:	6823      	ldr	r3, [r4, #0]
90004e36:	f241 0218 	movw	r2, #4120	; 0x1018
  __HAL_LOCK(heth);
90004e3a:	2601      	movs	r6, #1
  heth->State = HAL_ETH_STATE_BUSY;
90004e3c:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
  __IO uint32_t tmpreg = 0;
90004e40:	2500      	movs	r5, #0
  __HAL_LOCK(heth);
90004e42:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  HAL_Delay(ETH_REG_WRITE_DELAY);
90004e46:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
90004e48:	5899      	ldr	r1, [r3, r2]
90004e4a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
90004e4e:	5099      	str	r1, [r3, r2]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
90004e50:	5899      	ldr	r1, [r3, r2]
90004e52:	f021 0102 	bic.w	r1, r1, #2
90004e56:	5099      	str	r1, [r3, r2]
  __IO uint32_t tmpreg = 0;
90004e58:	9501      	str	r5, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
90004e5a:	681a      	ldr	r2, [r3, #0]
90004e5c:	f022 0204 	bic.w	r2, r2, #4
90004e60:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
90004e62:	681b      	ldr	r3, [r3, #0]
90004e64:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
90004e66:	f7ff f9a9 	bl	900041bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
90004e6a:	6823      	ldr	r3, [r4, #0]
  ETH_FlushTransmitFIFO(heth);
90004e6c:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg;
90004e6e:	9a01      	ldr	r2, [sp, #4]
90004e70:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
90004e72:	f7ff fc37 	bl	900046e4 <ETH_FlushTransmitFIFO>
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
90004e76:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t tmpreg = 0;
90004e78:	9500      	str	r5, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
90004e7a:	4630      	mov	r0, r6
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
90004e7c:	681a      	ldr	r2, [r3, #0]
90004e7e:	f022 0208 	bic.w	r2, r2, #8
90004e82:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
90004e84:	681b      	ldr	r3, [r3, #0]
90004e86:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
90004e88:	f7ff f998 	bl	900041bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
90004e8c:	9a00      	ldr	r2, [sp, #0]
  return HAL_OK;
90004e8e:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
90004e90:	6823      	ldr	r3, [r4, #0]
90004e92:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
90004e94:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
90004e98:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
90004e9c:	b002      	add	sp, #8
90004e9e:	bd70      	pop	{r4, r5, r6, pc}

90004ea0 <HAL_ETH_ConfigMAC>:
{
90004ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
90004ea2:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{
90004ea6:	4605      	mov	r5, r0
90004ea8:	460c      	mov	r4, r1
90004eaa:	2002      	movs	r0, #2
  __HAL_LOCK(heth);
90004eac:	2b01      	cmp	r3, #1
90004eae:	d071      	beq.n	90004f94 <HAL_ETH_ConfigMAC+0xf4>
90004eb0:	2601      	movs	r6, #1
  heth->State= HAL_ETH_STATE_BUSY;
90004eb2:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
90004eb6:	682a      	ldr	r2, [r5, #0]
  __HAL_LOCK(heth);
90004eb8:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  if (macconf != NULL)
90004ebc:	e9d5 7002 	ldrd	r7, r0, [r5, #8]
90004ec0:	2900      	cmp	r1, #0
90004ec2:	d068      	beq.n	90004f96 <HAL_ETH_ConfigMAC+0xf6>
    tmpreg = (heth->Instance)->MACCR;
90004ec4:	6813      	ldr	r3, [r2, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
90004ec6:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 90004fb4 <HAL_ETH_ConfigMAC+0x114>
90004eca:	ea0c 0c03 	and.w	ip, ip, r3
                         macconf->BackOffLimit | 
90004ece:	e9d1 3100 	ldrd	r3, r1, [r1]
90004ed2:	430b      	orrs	r3, r1
90004ed4:	68a1      	ldr	r1, [r4, #8]
90004ed6:	430b      	orrs	r3, r1
90004ed8:	68e1      	ldr	r1, [r4, #12]
90004eda:	430b      	orrs	r3, r1
90004edc:	6921      	ldr	r1, [r4, #16]
90004ede:	430b      	orrs	r3, r1
90004ee0:	6961      	ldr	r1, [r4, #20]
90004ee2:	430b      	orrs	r3, r1
90004ee4:	69a1      	ldr	r1, [r4, #24]
90004ee6:	430b      	orrs	r3, r1
90004ee8:	69e1      	ldr	r1, [r4, #28]
90004eea:	430b      	orrs	r3, r1
90004eec:	6a21      	ldr	r1, [r4, #32]
90004eee:	430b      	orrs	r3, r1
90004ef0:	6a61      	ldr	r1, [r4, #36]	; 0x24
90004ef2:	430b      	orrs	r3, r1
90004ef4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
90004ef6:	430b      	orrs	r3, r1
90004ef8:	433b      	orrs	r3, r7
90004efa:	4303      	orrs	r3, r0
    HAL_Delay(ETH_REG_WRITE_DELAY);
90004efc:	4630      	mov	r0, r6
    tmpreg |= (uint32_t)(macconf->Watchdog | 
90004efe:	ea43 030c 	orr.w	r3, r3, ip
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
90004f02:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
90004f04:	6817      	ldr	r7, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
90004f06:	f7ff f959 	bl	900041bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
90004f0a:	682a      	ldr	r2, [r5, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
90004f0c:	4630      	mov	r0, r6
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
90004f0e:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
    (heth->Instance)->MACCR = tmpreg; 
90004f12:	6017      	str	r7, [r2, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
90004f14:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
90004f16:	6b61      	ldr	r1, [r4, #52]	; 0x34
90004f18:	430b      	orrs	r3, r1
                                          macconf->PassControlFrames |
90004f1a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
90004f1c:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
90004f1e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
90004f20:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
90004f22:	6c21      	ldr	r1, [r4, #64]	; 0x40
90004f24:	430b      	orrs	r3, r1
                                          macconf->PromiscuousMode |
90004f26:	6c61      	ldr	r1, [r4, #68]	; 0x44
90004f28:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
90004f2a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
90004f2c:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
90004f2e:	6053      	str	r3, [r2, #4]
     tmpreg = (heth->Instance)->MACFFR;
90004f30:	6857      	ldr	r7, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
90004f32:	f7ff f943 	bl	900041bc <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
90004f36:	682a      	ldr	r2, [r5, #0]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
90004f38:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     (heth->Instance)->MACFFR = tmpreg;
90004f3a:	6057      	str	r7, [r2, #4]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
90004f3c:	6093      	str	r3, [r2, #8]
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
90004f3e:	6d23      	ldr	r3, [r4, #80]	; 0x50
90004f40:	60d3      	str	r3, [r2, #12]
     tmpreg = (heth->Instance)->MACFCR;
90004f42:	6991      	ldr	r1, [r2, #24]
                          macconf->ReceiveFlowControl |
90004f44:	e9d4 3016 	ldrd	r3, r0, [r4, #88]	; 0x58
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
90004f48:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
                          macconf->ReceiveFlowControl |
90004f4c:	4303      	orrs	r3, r0
90004f4e:	6e20      	ldr	r0, [r4, #96]	; 0x60
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
90004f50:	0409      	lsls	r1, r1, #16
                          macconf->ReceiveFlowControl |
90004f52:	4303      	orrs	r3, r0
90004f54:	6e60      	ldr	r0, [r4, #100]	; 0x64
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
90004f56:	0c09      	lsrs	r1, r1, #16
                          macconf->ReceiveFlowControl |
90004f58:	4303      	orrs	r3, r0
90004f5a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
90004f5c:	4303      	orrs	r3, r0
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
90004f5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
                          macconf->ReceiveFlowControl |
90004f60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     HAL_Delay(ETH_REG_WRITE_DELAY);
90004f64:	4630      	mov	r0, r6
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
90004f66:	430b      	orrs	r3, r1
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
90004f68:	6193      	str	r3, [r2, #24]
     tmpreg = (heth->Instance)->MACFCR;
90004f6a:	6997      	ldr	r7, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
90004f6c:	f7ff f926 	bl	900041bc <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
90004f70:	682b      	ldr	r3, [r5, #0]
      HAL_Delay(ETH_REG_WRITE_DELAY);
90004f72:	4630      	mov	r0, r6
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
90004f74:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
     (heth->Instance)->MACFCR = tmpreg;
90004f78:	619f      	str	r7, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
90004f7a:	430a      	orrs	r2, r1
90004f7c:	61da      	str	r2, [r3, #28]
      tmpreg = (heth->Instance)->MACVLANTR;
90004f7e:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
90004f80:	f7ff f91c 	bl	900041bc <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
90004f84:	682b      	ldr	r3, [r5, #0]
90004f86:	61dc      	str	r4, [r3, #28]
  heth->State= HAL_ETH_STATE_READY;
90004f88:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
90004f8a:	2000      	movs	r0, #0
  heth->State= HAL_ETH_STATE_READY;
90004f8c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
90004f90:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
}
90004f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = (heth->Instance)->MACCR;
90004f96:	6811      	ldr	r1, [r2, #0]
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
90004f98:	ea47 0300 	orr.w	r3, r7, r0
    HAL_Delay(ETH_REG_WRITE_DELAY);
90004f9c:	4630      	mov	r0, r6
    tmpreg &= ~((uint32_t)0x00004800);
90004f9e:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
90004fa2:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
90004fa4:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
90004fa6:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
90004fa8:	f7ff f908 	bl	900041bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
90004fac:	682b      	ldr	r3, [r5, #0]
90004fae:	601c      	str	r4, [r3, #0]
90004fb0:	e7ea      	b.n	90004f88 <HAL_ETH_ConfigMAC+0xe8>
90004fb2:	bf00      	nop
90004fb4:	ff20810f 	.word	0xff20810f

90004fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90004fb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
90004fbc:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90004fbe:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 9000517c <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
90004fc2:	4a6c      	ldr	r2, [pc, #432]	; (90005174 <HAL_GPIO_Init+0x1bc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
90004fc4:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 90005180 <HAL_GPIO_Init+0x1c8>
    ioposition = ((uint32_t)0x01) << position;
90004fc8:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
90004fca:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
90004fcc:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
90004fce:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
90004fd2:	43ac      	bics	r4, r5
90004fd4:	f040 80b4 	bne.w	90005140 <HAL_GPIO_Init+0x188>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
90004fd8:	684c      	ldr	r4, [r1, #4]
90004fda:	ea4f 0e43 	mov.w	lr, r3, lsl #1
90004fde:	2503      	movs	r5, #3
90004fe0:	f024 0c10 	bic.w	ip, r4, #16
90004fe4:	fa05 f50e 	lsl.w	r5, r5, lr
90004fe8:	f10c 37ff 	add.w	r7, ip, #4294967295
90004fec:	43ed      	mvns	r5, r5
90004fee:	2f01      	cmp	r7, #1
90004ff0:	d811      	bhi.n	90005016 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->OSPEEDR; 
90004ff2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
90004ff4:	ea07 0a05 	and.w	sl, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
90004ff8:	68cf      	ldr	r7, [r1, #12]
90004ffa:	fa07 f70e 	lsl.w	r7, r7, lr
90004ffe:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
90005002:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
90005004:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
90005006:	ea27 0a06 	bic.w	sl, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
9000500a:	f3c4 1700 	ubfx	r7, r4, #4, #1
9000500e:	409f      	lsls	r7, r3
90005010:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
90005014:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
90005016:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
90005018:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
9000501c:	ea07 0a05 	and.w	sl, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
90005020:	688f      	ldr	r7, [r1, #8]
90005022:	fa07 f70e 	lsl.w	r7, r7, lr
90005026:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
9000502a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
9000502c:	d116      	bne.n	9000505c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
9000502e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
90005032:	f003 0b07 	and.w	fp, r3, #7
90005036:	f04f 0c0f 	mov.w	ip, #15
9000503a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
9000503e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
90005042:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
90005046:	fa0c fc0b 	lsl.w	ip, ip, fp
9000504a:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
9000504e:	690f      	ldr	r7, [r1, #16]
90005050:	fa07 f70b 	lsl.w	r7, r7, fp
90005054:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
90005058:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
9000505c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
9000505e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
90005060:	f004 0703 	and.w	r7, r4, #3
90005064:	fa07 fe0e 	lsl.w	lr, r7, lr
90005068:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
9000506c:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
9000506e:	00e5      	lsls	r5, r4, #3
90005070:	d566      	bpl.n	90005140 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90005072:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
90005076:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
9000507a:	f003 0c03 	and.w	ip, r3, #3
9000507e:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90005082:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
90005086:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
9000508a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
9000508e:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
90005092:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
90005096:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
9000509a:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
9000509e:	9501      	str	r5, [sp, #4]
900050a0:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
900050a2:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
900050a6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
900050aa:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
900050ae:	4d32      	ldr	r5, [pc, #200]	; (90005178 <HAL_GPIO_Init+0x1c0>)
900050b0:	42a8      	cmp	r0, r5
900050b2:	d04c      	beq.n	9000514e <HAL_GPIO_Init+0x196>
900050b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
900050b8:	42a8      	cmp	r0, r5
900050ba:	d04a      	beq.n	90005152 <HAL_GPIO_Init+0x19a>
900050bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
900050c0:	42a8      	cmp	r0, r5
900050c2:	d048      	beq.n	90005156 <HAL_GPIO_Init+0x19e>
900050c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
900050c8:	42a8      	cmp	r0, r5
900050ca:	d046      	beq.n	9000515a <HAL_GPIO_Init+0x1a2>
900050cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
900050d0:	42a8      	cmp	r0, r5
900050d2:	d044      	beq.n	9000515e <HAL_GPIO_Init+0x1a6>
900050d4:	4548      	cmp	r0, r9
900050d6:	d044      	beq.n	90005162 <HAL_GPIO_Init+0x1aa>
900050d8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
900050dc:	42a8      	cmp	r0, r5
900050de:	d042      	beq.n	90005166 <HAL_GPIO_Init+0x1ae>
900050e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
900050e4:	42a8      	cmp	r0, r5
900050e6:	d040      	beq.n	9000516a <HAL_GPIO_Init+0x1b2>
900050e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
900050ec:	42a8      	cmp	r0, r5
900050ee:	d03e      	beq.n	9000516e <HAL_GPIO_Init+0x1b6>
900050f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
900050f4:	42a8      	cmp	r0, r5
900050f6:	bf0c      	ite	eq
900050f8:	2509      	moveq	r5, #9
900050fa:	250a      	movne	r5, #10
900050fc:	fa05 f50c 	lsl.w	r5, r5, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
90005100:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
90005104:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
90005108:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
9000510a:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
9000510e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
90005110:	bf0c      	ite	eq
90005112:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
90005114:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
90005116:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
9000511a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
9000511c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
9000511e:	bf0c      	ite	eq
90005120:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
90005122:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
90005124:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
90005128:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
9000512a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
9000512c:	bf0c      	ite	eq
9000512e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
90005130:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
90005132:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
90005134:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
90005136:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
90005138:	bf54      	ite	pl
9000513a:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
9000513c:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
9000513e:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
90005140:	3301      	adds	r3, #1
90005142:	2b10      	cmp	r3, #16
90005144:	f47f af40 	bne.w	90004fc8 <HAL_GPIO_Init+0x10>
      }
    }
  }
}
90005148:	b003      	add	sp, #12
9000514a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
9000514e:	2500      	movs	r5, #0
90005150:	e7d4      	b.n	900050fc <HAL_GPIO_Init+0x144>
90005152:	2501      	movs	r5, #1
90005154:	e7d2      	b.n	900050fc <HAL_GPIO_Init+0x144>
90005156:	2502      	movs	r5, #2
90005158:	e7d0      	b.n	900050fc <HAL_GPIO_Init+0x144>
9000515a:	2503      	movs	r5, #3
9000515c:	e7ce      	b.n	900050fc <HAL_GPIO_Init+0x144>
9000515e:	2504      	movs	r5, #4
90005160:	e7cc      	b.n	900050fc <HAL_GPIO_Init+0x144>
90005162:	2505      	movs	r5, #5
90005164:	e7ca      	b.n	900050fc <HAL_GPIO_Init+0x144>
90005166:	2506      	movs	r5, #6
90005168:	e7c8      	b.n	900050fc <HAL_GPIO_Init+0x144>
9000516a:	2507      	movs	r5, #7
9000516c:	e7c6      	b.n	900050fc <HAL_GPIO_Init+0x144>
9000516e:	2508      	movs	r5, #8
90005170:	e7c4      	b.n	900050fc <HAL_GPIO_Init+0x144>
90005172:	bf00      	nop
90005174:	40013c00 	.word	0x40013c00
90005178:	40020000 	.word	0x40020000
9000517c:	40023800 	.word	0x40023800
90005180:	40021400 	.word	0x40021400

90005184 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
90005184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
90005188:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
9000518a:	4c4a      	ldr	r4, [pc, #296]	; (900052b4 <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
9000518c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 900052bc <HAL_GPIO_DeInit+0x138>
90005190:	f8df a12c 	ldr.w	sl, [pc, #300]	; 900052c0 <HAL_GPIO_DeInit+0x13c>
90005194:	f8df b12c 	ldr.w	fp, [pc, #300]	; 900052c4 <HAL_GPIO_DeInit+0x140>
    ioposition = ((uint32_t)0x01) << position;
90005198:	2301      	movs	r3, #1
9000519a:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
9000519e:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
900051a2:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
900051a6:	d16e      	bne.n	90005286 <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2];
900051a8:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
900051ac:	f002 0c03 	and.w	ip, r2, #3
900051b0:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
900051b2:	4b41      	ldr	r3, [pc, #260]	; (900052b8 <HAL_GPIO_DeInit+0x134>)
900051b4:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
900051b8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
900051bc:	4298      	cmp	r0, r3
900051be:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
900051c2:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
900051c6:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
900051ca:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
900051ce:	d05f      	beq.n	90005290 <HAL_GPIO_DeInit+0x10c>
900051d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
900051d4:	4298      	cmp	r0, r3
900051d6:	d05d      	beq.n	90005294 <HAL_GPIO_DeInit+0x110>
900051d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
900051dc:	4298      	cmp	r0, r3
900051de:	d05b      	beq.n	90005298 <HAL_GPIO_DeInit+0x114>
900051e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
900051e4:	4298      	cmp	r0, r3
900051e6:	d059      	beq.n	9000529c <HAL_GPIO_DeInit+0x118>
900051e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
900051ec:	4298      	cmp	r0, r3
900051ee:	d057      	beq.n	900052a0 <HAL_GPIO_DeInit+0x11c>
900051f0:	4548      	cmp	r0, r9
900051f2:	d057      	beq.n	900052a4 <HAL_GPIO_DeInit+0x120>
900051f4:	4550      	cmp	r0, sl
900051f6:	d057      	beq.n	900052a8 <HAL_GPIO_DeInit+0x124>
900051f8:	4558      	cmp	r0, fp
900051fa:	d057      	beq.n	900052ac <HAL_GPIO_DeInit+0x128>
900051fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90005200:	4298      	cmp	r0, r3
90005202:	d055      	beq.n	900052b0 <HAL_GPIO_DeInit+0x12c>
90005204:	f503 6380 	add.w	r3, r3, #1024	; 0x400
90005208:	4298      	cmp	r0, r3
9000520a:	bf0c      	ite	eq
9000520c:	2309      	moveq	r3, #9
9000520e:	230a      	movne	r3, #10
90005210:	fa03 f30c 	lsl.w	r3, r3, ip
90005214:	4543      	cmp	r3, r8
90005216:	d113      	bne.n	90005240 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
90005218:	6823      	ldr	r3, [r4, #0]
9000521a:	ea23 0307 	bic.w	r3, r3, r7
9000521e:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
90005220:	6863      	ldr	r3, [r4, #4]
90005222:	ea23 0307 	bic.w	r3, r3, r7
90005226:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
90005228:	68a3      	ldr	r3, [r4, #8]
9000522a:	ea23 0307 	bic.w	r3, r3, r7
9000522e:	60a3      	str	r3, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
90005230:	68e3      	ldr	r3, [r4, #12]
90005232:	ea23 0707 	bic.w	r7, r3, r7
90005236:	60e7      	str	r7, [r4, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
90005238:	68ab      	ldr	r3, [r5, #8]
9000523a:	ea23 0606 	bic.w	r6, r3, r6
9000523e:	60ae      	str	r6, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
90005240:	2603      	movs	r6, #3
90005242:	0053      	lsls	r3, r2, #1
90005244:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
90005246:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
9000524a:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
9000524e:	270f      	movs	r7, #15
90005250:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
90005254:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
90005258:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
9000525c:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
9000525e:	fa22 f506 	lsr.w	r5, r2, r6
90005262:	eb00 0585 	add.w	r5, r0, r5, lsl #2
90005266:	6a2e      	ldr	r6, [r5, #32]
90005268:	ea26 0707 	bic.w	r7, r6, r7
9000526c:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
9000526e:	68c5      	ldr	r5, [r0, #12]
90005270:	ea25 0503 	bic.w	r5, r5, r3
90005274:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
90005276:	6845      	ldr	r5, [r0, #4]
90005278:	ea25 050e 	bic.w	r5, r5, lr
9000527c:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
9000527e:	6885      	ldr	r5, [r0, #8]
90005280:	ea25 0303 	bic.w	r3, r5, r3
90005284:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
90005286:	3201      	adds	r2, #1
90005288:	2a10      	cmp	r2, #16
9000528a:	d185      	bne.n	90005198 <HAL_GPIO_DeInit+0x14>
    }
  }
}
9000528c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
90005290:	2300      	movs	r3, #0
90005292:	e7bd      	b.n	90005210 <HAL_GPIO_DeInit+0x8c>
90005294:	2301      	movs	r3, #1
90005296:	e7bb      	b.n	90005210 <HAL_GPIO_DeInit+0x8c>
90005298:	2302      	movs	r3, #2
9000529a:	e7b9      	b.n	90005210 <HAL_GPIO_DeInit+0x8c>
9000529c:	2303      	movs	r3, #3
9000529e:	e7b7      	b.n	90005210 <HAL_GPIO_DeInit+0x8c>
900052a0:	2304      	movs	r3, #4
900052a2:	e7b5      	b.n	90005210 <HAL_GPIO_DeInit+0x8c>
900052a4:	2305      	movs	r3, #5
900052a6:	e7b3      	b.n	90005210 <HAL_GPIO_DeInit+0x8c>
900052a8:	2306      	movs	r3, #6
900052aa:	e7b1      	b.n	90005210 <HAL_GPIO_DeInit+0x8c>
900052ac:	2307      	movs	r3, #7
900052ae:	e7af      	b.n	90005210 <HAL_GPIO_DeInit+0x8c>
900052b0:	2308      	movs	r3, #8
900052b2:	e7ad      	b.n	90005210 <HAL_GPIO_DeInit+0x8c>
900052b4:	40013c00 	.word	0x40013c00
900052b8:	40020000 	.word	0x40020000
900052bc:	40021400 	.word	0x40021400
900052c0:	40021800 	.word	0x40021800
900052c4:	40021c00 	.word	0x40021c00

900052c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
900052c8:	b10a      	cbz	r2, 900052ce <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
900052ca:	6181      	str	r1, [r0, #24]
  }
}
900052cc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
900052ce:	0409      	lsls	r1, r1, #16
900052d0:	e7fb      	b.n	900052ca <HAL_GPIO_WritePin+0x2>

900052d2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
900052d2:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
900052d4:	ea01 0203 	and.w	r2, r1, r3
900052d8:	ea21 0103 	bic.w	r1, r1, r3
900052dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
900052e0:	6181      	str	r1, [r0, #24]
}
900052e2:	4770      	bx	lr

900052e4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
900052e4:	6803      	ldr	r3, [r0, #0]
900052e6:	699a      	ldr	r2, [r3, #24]
900052e8:	0791      	lsls	r1, r2, #30
900052ea:	d501      	bpl.n	900052f0 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
900052ec:	2200      	movs	r2, #0
900052ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
900052f0:	699a      	ldr	r2, [r3, #24]
900052f2:	07d2      	lsls	r2, r2, #31
900052f4:	d403      	bmi.n	900052fe <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
900052f6:	699a      	ldr	r2, [r3, #24]
900052f8:	f042 0201 	orr.w	r2, r2, #1
900052fc:	619a      	str	r2, [r3, #24]
  }
}
900052fe:	4770      	bx	lr

90005300 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
90005300:	b530      	push	{r4, r5, lr}
90005302:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
90005304:	f3c1 0109 	ubfx	r1, r1, #0, #10
90005308:	6804      	ldr	r4, [r0, #0]
9000530a:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
9000530e:	6860      	ldr	r0, [r4, #4]
90005310:	431a      	orrs	r2, r3
90005312:	4b04      	ldr	r3, [pc, #16]	; (90005324 <I2C_TransferConfig+0x24>)
90005314:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
90005318:	430a      	orrs	r2, r1
9000531a:	ea20 0003 	bic.w	r0, r0, r3
9000531e:	4302      	orrs	r2, r0
90005320:	6062      	str	r2, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
90005322:	bd30      	pop	{r4, r5, pc}
90005324:	03ff63ff 	.word	0x03ff63ff

90005328 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
90005328:	6803      	ldr	r3, [r0, #0]
{
9000532a:	b570      	push	{r4, r5, r6, lr}
9000532c:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
9000532e:	6998      	ldr	r0, [r3, #24]
{
90005330:	460d      	mov	r5, r1
90005332:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
90005334:	f010 0010 	ands.w	r0, r0, #16
90005338:	d116      	bne.n	90005368 <I2C_IsAcknowledgeFailed+0x40>
}
9000533a:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
9000533c:	1c69      	adds	r1, r5, #1
9000533e:	d014      	beq.n	9000536a <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90005340:	f7fe ff36 	bl	900041b0 <HAL_GetTick>
90005344:	1b80      	subs	r0, r0, r6
90005346:	42a8      	cmp	r0, r5
90005348:	d800      	bhi.n	9000534c <I2C_IsAcknowledgeFailed+0x24>
9000534a:	b96d      	cbnz	r5, 90005368 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000534c:	6c63      	ldr	r3, [r4, #68]	; 0x44
9000534e:	f043 0320 	orr.w	r3, r3, #32
90005352:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90005354:	2320      	movs	r3, #32
90005356:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000535a:	2300      	movs	r3, #0
    return HAL_ERROR;
9000535c:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000535e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
90005362:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
90005366:	e7e8      	b.n	9000533a <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90005368:	6823      	ldr	r3, [r4, #0]
9000536a:	699a      	ldr	r2, [r3, #24]
9000536c:	0692      	lsls	r2, r2, #26
9000536e:	d5e5      	bpl.n	9000533c <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90005370:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90005372:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
90005374:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90005376:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90005378:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
9000537a:	f7ff ffb3 	bl	900052e4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
9000537e:	6822      	ldr	r2, [r4, #0]
90005380:	6853      	ldr	r3, [r2, #4]
90005382:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
90005386:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
9000538a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
9000538e:	f023 0301 	bic.w	r3, r3, #1
90005392:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
90005394:	6c63      	ldr	r3, [r4, #68]	; 0x44
90005396:	f043 0304 	orr.w	r3, r3, #4
9000539a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
9000539c:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
900053a0:	e7db      	b.n	9000535a <I2C_IsAcknowledgeFailed+0x32>

900053a2 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
900053a2:	b570      	push	{r4, r5, r6, lr}
900053a4:	4604      	mov	r4, r0
900053a6:	460d      	mov	r5, r1
900053a8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900053aa:	6823      	ldr	r3, [r4, #0]
900053ac:	699b      	ldr	r3, [r3, #24]
900053ae:	069b      	lsls	r3, r3, #26
900053b0:	d501      	bpl.n	900053b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
900053b2:	2000      	movs	r0, #0
}
900053b4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
900053b6:	4632      	mov	r2, r6
900053b8:	4629      	mov	r1, r5
900053ba:	4620      	mov	r0, r4
900053bc:	f7ff ffb4 	bl	90005328 <I2C_IsAcknowledgeFailed>
900053c0:	b990      	cbnz	r0, 900053e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900053c2:	f7fe fef5 	bl	900041b0 <HAL_GetTick>
900053c6:	1b80      	subs	r0, r0, r6
900053c8:	42a8      	cmp	r0, r5
900053ca:	d801      	bhi.n	900053d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
900053cc:	2d00      	cmp	r5, #0
900053ce:	d1ec      	bne.n	900053aa <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900053d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
900053d2:	f043 0320 	orr.w	r3, r3, #32
900053d6:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900053d8:	2320      	movs	r3, #32
900053da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
900053de:	2300      	movs	r3, #0
900053e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
900053e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
900053e8:	2001      	movs	r0, #1
900053ea:	e7e3      	b.n	900053b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

900053ec <I2C_WaitOnFlagUntilTimeout>:
{
900053ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900053f0:	9f06      	ldr	r7, [sp, #24]
900053f2:	4604      	mov	r4, r0
900053f4:	4688      	mov	r8, r1
900053f6:	4616      	mov	r6, r2
900053f8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900053fa:	6822      	ldr	r2, [r4, #0]
900053fc:	6993      	ldr	r3, [r2, #24]
900053fe:	ea38 0303 	bics.w	r3, r8, r3
90005402:	bf0c      	ite	eq
90005404:	2301      	moveq	r3, #1
90005406:	2300      	movne	r3, #0
90005408:	42b3      	cmp	r3, r6
9000540a:	d001      	beq.n	90005410 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
9000540c:	2000      	movs	r0, #0
9000540e:	e015      	b.n	9000543c <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
90005410:	1c6b      	adds	r3, r5, #1
90005412:	d0f3      	beq.n	900053fc <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90005414:	f7fe fecc 	bl	900041b0 <HAL_GetTick>
90005418:	1bc0      	subs	r0, r0, r7
9000541a:	42a8      	cmp	r0, r5
9000541c:	d801      	bhi.n	90005422 <I2C_WaitOnFlagUntilTimeout+0x36>
9000541e:	2d00      	cmp	r5, #0
90005420:	d1eb      	bne.n	900053fa <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90005422:	6c63      	ldr	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
90005424:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90005426:	f043 0320 	orr.w	r3, r3, #32
9000542a:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000542c:	2320      	movs	r3, #32
9000542e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90005432:	2300      	movs	r3, #0
90005434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
90005438:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
9000543c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90005440 <I2C_WaitOnTXISFlagUntilTimeout>:
{
90005440:	b570      	push	{r4, r5, r6, lr}
90005442:	4604      	mov	r4, r0
90005444:	460d      	mov	r5, r1
90005446:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90005448:	6823      	ldr	r3, [r4, #0]
9000544a:	699b      	ldr	r3, [r3, #24]
9000544c:	079b      	lsls	r3, r3, #30
9000544e:	d501      	bpl.n	90005454 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
90005450:	2000      	movs	r0, #0
}
90005452:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
90005454:	4632      	mov	r2, r6
90005456:	4629      	mov	r1, r5
90005458:	4620      	mov	r0, r4
9000545a:	f7ff ff65 	bl	90005328 <I2C_IsAcknowledgeFailed>
9000545e:	b9a0      	cbnz	r0, 9000548a <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
90005460:	1c6a      	adds	r2, r5, #1
90005462:	d0f1      	beq.n	90005448 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90005464:	f7fe fea4 	bl	900041b0 <HAL_GetTick>
90005468:	1b80      	subs	r0, r0, r6
9000546a:	42a8      	cmp	r0, r5
9000546c:	d801      	bhi.n	90005472 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
9000546e:	2d00      	cmp	r5, #0
90005470:	d1ea      	bne.n	90005448 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90005472:	6c63      	ldr	r3, [r4, #68]	; 0x44
90005474:	f043 0320 	orr.w	r3, r3, #32
90005478:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000547a:	2320      	movs	r3, #32
9000547c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90005480:	2300      	movs	r3, #0
90005482:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
90005486:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
9000548a:	2001      	movs	r0, #1
9000548c:	e7e1      	b.n	90005452 <I2C_WaitOnTXISFlagUntilTimeout+0x12>
	...

90005490 <I2C_RequestMemoryWrite>:
{
90005490:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90005494:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
90005496:	4b18      	ldr	r3, [pc, #96]	; (900054f8 <I2C_RequestMemoryWrite+0x68>)
{
90005498:	4605      	mov	r5, r0
9000549a:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
9000549c:	9300      	str	r3, [sp, #0]
9000549e:	b2f2      	uxtb	r2, r6
900054a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
900054a4:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
900054a8:	f7ff ff2a 	bl	90005300 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
900054ac:	4628      	mov	r0, r5
900054ae:	4642      	mov	r2, r8
900054b0:	4639      	mov	r1, r7
900054b2:	f7ff ffc5 	bl	90005440 <I2C_WaitOnTXISFlagUntilTimeout>
900054b6:	b118      	cbz	r0, 900054c0 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
900054b8:	2001      	movs	r0, #1
}
900054ba:	b002      	add	sp, #8
900054bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
900054c0:	2e01      	cmp	r6, #1
900054c2:	682b      	ldr	r3, [r5, #0]
900054c4:	d10d      	bne.n	900054e2 <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
900054c6:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
900054c8:	2200      	movs	r2, #0
900054ca:	2180      	movs	r1, #128	; 0x80
900054cc:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
900054ce:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
900054d0:	463b      	mov	r3, r7
900054d2:	f8cd 8000 	str.w	r8, [sp]
900054d6:	f7ff ff89 	bl	900053ec <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
900054da:	3800      	subs	r0, #0
900054dc:	bf18      	it	ne
900054de:	2001      	movne	r0, #1
900054e0:	e7eb      	b.n	900054ba <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
900054e2:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
900054e4:	4639      	mov	r1, r7
900054e6:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
900054e8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
900054ea:	4642      	mov	r2, r8
900054ec:	f7ff ffa8 	bl	90005440 <I2C_WaitOnTXISFlagUntilTimeout>
900054f0:	2800      	cmp	r0, #0
900054f2:	d1e1      	bne.n	900054b8 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
900054f4:	682b      	ldr	r3, [r5, #0]
900054f6:	e7e6      	b.n	900054c6 <I2C_RequestMemoryWrite+0x36>
900054f8:	80002000 	.word	0x80002000

900054fc <I2C_RequestMemoryRead>:
{
900054fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90005500:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90005502:	4b18      	ldr	r3, [pc, #96]	; (90005564 <I2C_RequestMemoryRead+0x68>)
{
90005504:	4605      	mov	r5, r0
90005506:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90005508:	9300      	str	r3, [sp, #0]
9000550a:	b2f2      	uxtb	r2, r6
9000550c:	2300      	movs	r3, #0
{
9000550e:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
90005512:	f7ff fef5 	bl	90005300 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005516:	4628      	mov	r0, r5
90005518:	4642      	mov	r2, r8
9000551a:	4639      	mov	r1, r7
9000551c:	f7ff ff90 	bl	90005440 <I2C_WaitOnTXISFlagUntilTimeout>
90005520:	b118      	cbz	r0, 9000552a <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
90005522:	2001      	movs	r0, #1
}
90005524:	b002      	add	sp, #8
90005526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
9000552a:	2e01      	cmp	r6, #1
9000552c:	682b      	ldr	r3, [r5, #0]
9000552e:	d10d      	bne.n	9000554c <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005530:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
90005532:	2200      	movs	r2, #0
90005534:	2140      	movs	r1, #64	; 0x40
90005536:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90005538:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
9000553a:	463b      	mov	r3, r7
9000553c:	f8cd 8000 	str.w	r8, [sp]
90005540:	f7ff ff54 	bl	900053ec <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
90005544:	3800      	subs	r0, #0
90005546:	bf18      	it	ne
90005548:	2001      	movne	r0, #1
9000554a:	e7eb      	b.n	90005524 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000554c:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000554e:	4639      	mov	r1, r7
90005550:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90005552:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90005554:	4642      	mov	r2, r8
90005556:	f7ff ff73 	bl	90005440 <I2C_WaitOnTXISFlagUntilTimeout>
9000555a:	2800      	cmp	r0, #0
9000555c:	d1e1      	bne.n	90005522 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
9000555e:	682b      	ldr	r3, [r5, #0]
90005560:	e7e6      	b.n	90005530 <I2C_RequestMemoryRead+0x34>
90005562:	bf00      	nop
90005564:	80002000 	.word	0x80002000

90005568 <HAL_I2C_MspInit>:
}
90005568:	4770      	bx	lr

9000556a <HAL_I2C_Init>:
{
9000556a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
9000556c:	4604      	mov	r4, r0
9000556e:	2800      	cmp	r0, #0
90005570:	d04a      	beq.n	90005608 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
90005572:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
90005576:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000557a:	b91b      	cbnz	r3, 90005584 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
9000557c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
90005580:	f7ff fff2 	bl	90005568 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
90005584:	2324      	movs	r3, #36	; 0x24
90005586:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
9000558a:	6823      	ldr	r3, [r4, #0]
9000558c:	681a      	ldr	r2, [r3, #0]
9000558e:	f022 0201 	bic.w	r2, r2, #1
90005592:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90005594:	6862      	ldr	r2, [r4, #4]
90005596:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
9000559a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
9000559c:	689a      	ldr	r2, [r3, #8]
9000559e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
900055a2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
900055a4:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
900055a8:	2901      	cmp	r1, #1
900055aa:	d124      	bne.n	900055f6 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
900055ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
900055b0:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
900055b2:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900055b4:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
900055b6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
900055ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
900055be:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
900055c0:	68da      	ldr	r2, [r3, #12]
900055c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
900055c6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
900055c8:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
900055cc:	430a      	orrs	r2, r1
900055ce:	69a1      	ldr	r1, [r4, #24]
900055d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
900055d4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
900055d6:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
900055da:	430a      	orrs	r2, r1
900055dc:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
900055de:	681a      	ldr	r2, [r3, #0]
900055e0:	f042 0201 	orr.w	r2, r2, #1
900055e4:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
900055e6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900055e8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
900055ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
900055ee:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
900055f0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
900055f4:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
900055f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
900055fa:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
900055fc:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
900055fe:	d1d8      	bne.n	900055b2 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
90005600:	f44f 6200 	mov.w	r2, #2048	; 0x800
90005604:	605a      	str	r2, [r3, #4]
90005606:	e7d4      	b.n	900055b2 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
90005608:	2001      	movs	r0, #1
9000560a:	e7f3      	b.n	900055f4 <HAL_I2C_Init+0x8a>

9000560c <HAL_I2C_MspDeInit>:
9000560c:	4770      	bx	lr

9000560e <HAL_I2C_DeInit>:
{
9000560e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
90005610:	4604      	mov	r4, r0
90005612:	b198      	cbz	r0, 9000563c <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
90005614:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
90005616:	2324      	movs	r3, #36	; 0x24
90005618:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
9000561c:	6813      	ldr	r3, [r2, #0]
9000561e:	f023 0301 	bic.w	r3, r3, #1
90005622:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
90005624:	f7ff fff2 	bl	9000560c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005628:	2000      	movs	r0, #0
9000562a:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
9000562c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
90005630:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90005634:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90005636:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
9000563a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
9000563c:	2001      	movs	r0, #1
9000563e:	e7fc      	b.n	9000563a <HAL_I2C_DeInit+0x2c>

90005640 <HAL_I2C_Mem_Write>:
{
90005640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90005644:	b085      	sub	sp, #20
90005646:	469b      	mov	fp, r3
90005648:	4604      	mov	r4, r0
9000564a:	460f      	mov	r7, r1
9000564c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
90005650:	4692      	mov	sl, r2
90005652:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
90005656:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
90005658:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
9000565c:	2b20      	cmp	r3, #32
9000565e:	f040 80a3 	bne.w	900057a8 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
90005662:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90005664:	b10b      	cbz	r3, 9000566a <HAL_I2C_Mem_Write+0x2a>
90005666:	9b03      	ldr	r3, [sp, #12]
90005668:	b933      	cbnz	r3, 90005678 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000566a:	f44f 7300 	mov.w	r3, #512	; 0x200
9000566e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
90005670:	2001      	movs	r0, #1
}
90005672:	b005      	add	sp, #20
90005674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
90005678:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
9000567c:	2b01      	cmp	r3, #1
9000567e:	f000 8093 	beq.w	900057a8 <HAL_I2C_Mem_Write+0x168>
90005682:	2501      	movs	r5, #1
90005684:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
90005688:	f7fe fd92 	bl	900041b0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
9000568c:	2319      	movs	r3, #25
9000568e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
90005690:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
90005692:	462a      	mov	r2, r5
90005694:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90005698:	4620      	mov	r0, r4
9000569a:	f7ff fea7 	bl	900053ec <I2C_WaitOnFlagUntilTimeout>
9000569e:	4680      	mov	r8, r0
900056a0:	2800      	cmp	r0, #0
900056a2:	d1e5      	bne.n	90005670 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
900056a4:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
900056a6:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
900056a8:	4652      	mov	r2, sl
900056aa:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
900056ac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
900056b0:	2340      	movs	r3, #64	; 0x40
900056b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
900056b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900056b8:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
900056ba:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
900056bc:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
900056be:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
900056c0:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
900056c4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
900056c6:	465b      	mov	r3, fp
900056c8:	f7ff fee2 	bl	90005490 <I2C_RequestMemoryWrite>
900056cc:	b110      	cbz	r0, 900056d4 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
900056ce:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
900056d2:	e7cd      	b.n	90005670 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
900056d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
900056d6:	b29b      	uxth	r3, r3
900056d8:	2bff      	cmp	r3, #255	; 0xff
900056da:	d955      	bls.n	90005788 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
900056dc:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
900056de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
900056e2:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
900056e4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
900056e6:	4639      	mov	r1, r7
900056e8:	4620      	mov	r0, r4
900056ea:	f7ff fe09 	bl	90005300 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
900056ee:	4632      	mov	r2, r6
900056f0:	4649      	mov	r1, r9
900056f2:	4620      	mov	r0, r4
900056f4:	f7ff fea4 	bl	90005440 <I2C_WaitOnTXISFlagUntilTimeout>
900056f8:	2800      	cmp	r0, #0
900056fa:	d1b9      	bne.n	90005670 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
900056fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
900056fe:	6822      	ldr	r2, [r4, #0]
90005700:	f813 1b01 	ldrb.w	r1, [r3], #1
90005704:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
90005706:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
90005708:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
9000570a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
9000570c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
9000570e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
90005710:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
90005712:	b292      	uxth	r2, r2
      hi2c->XferCount--;
90005714:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90005716:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
90005718:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000571a:	b29b      	uxth	r3, r3
9000571c:	b1ab      	cbz	r3, 9000574a <HAL_I2C_Mem_Write+0x10a>
9000571e:	b9a2      	cbnz	r2, 9000574a <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90005720:	464b      	mov	r3, r9
90005722:	2180      	movs	r1, #128	; 0x80
90005724:	4620      	mov	r0, r4
90005726:	9600      	str	r6, [sp, #0]
90005728:	f7ff fe60 	bl	900053ec <I2C_WaitOnFlagUntilTimeout>
9000572c:	2800      	cmp	r0, #0
9000572e:	d19f      	bne.n	90005670 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005730:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90005732:	b29b      	uxth	r3, r3
90005734:	2bff      	cmp	r3, #255	; 0xff
90005736:	d92f      	bls.n	90005798 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
90005738:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
9000573a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
9000573e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
90005740:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90005742:	4639      	mov	r1, r7
90005744:	4620      	mov	r0, r4
90005746:	f7ff fddb 	bl	90005300 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
9000574a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000574c:	b29b      	uxth	r3, r3
9000574e:	2b00      	cmp	r3, #0
90005750:	d1cd      	bne.n	900056ee <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90005752:	4632      	mov	r2, r6
90005754:	4649      	mov	r1, r9
90005756:	4620      	mov	r0, r4
90005758:	f7ff fe23 	bl	900053a2 <I2C_WaitOnSTOPFlagUntilTimeout>
9000575c:	2800      	cmp	r0, #0
9000575e:	d187      	bne.n	90005670 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90005760:	6823      	ldr	r3, [r4, #0]
90005762:	2120      	movs	r1, #32
90005764:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
90005766:	685a      	ldr	r2, [r3, #4]
90005768:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
9000576c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
90005770:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
90005774:	f022 0201 	bic.w	r2, r2, #1
90005778:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
9000577a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
9000577e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90005782:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
90005786:	e774      	b.n	90005672 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
90005788:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
9000578a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
9000578e:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
90005790:	b292      	uxth	r2, r2
90005792:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90005794:	b2d2      	uxtb	r2, r2
90005796:	e7a6      	b.n	900056e6 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
90005798:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
9000579a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
9000579e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
900057a0:	b292      	uxth	r2, r2
900057a2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
900057a4:	b2d2      	uxtb	r2, r2
900057a6:	e7cc      	b.n	90005742 <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
900057a8:	2002      	movs	r0, #2
900057aa:	e762      	b.n	90005672 <HAL_I2C_Mem_Write+0x32>

900057ac <HAL_I2C_Mem_Read>:
{
900057ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900057b0:	b085      	sub	sp, #20
900057b2:	469b      	mov	fp, r3
900057b4:	4604      	mov	r4, r0
900057b6:	460f      	mov	r7, r1
900057b8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
900057bc:	4692      	mov	sl, r2
900057be:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
900057c2:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
900057c4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
900057c8:	2b20      	cmp	r3, #32
900057ca:	f040 80a7 	bne.w	9000591c <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
900057ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900057d0:	b10b      	cbz	r3, 900057d6 <HAL_I2C_Mem_Read+0x2a>
900057d2:	9b03      	ldr	r3, [sp, #12]
900057d4:	b933      	cbnz	r3, 900057e4 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
900057d6:	f44f 7300 	mov.w	r3, #512	; 0x200
900057da:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
900057dc:	2001      	movs	r0, #1
}
900057de:	b005      	add	sp, #20
900057e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
900057e4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
900057e8:	2b01      	cmp	r3, #1
900057ea:	f000 8097 	beq.w	9000591c <HAL_I2C_Mem_Read+0x170>
900057ee:	2501      	movs	r5, #1
900057f0:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
900057f4:	f7fe fcdc 	bl	900041b0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
900057f8:	2319      	movs	r3, #25
900057fa:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
900057fc:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
900057fe:	462a      	mov	r2, r5
90005800:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90005804:	4620      	mov	r0, r4
90005806:	f7ff fdf1 	bl	900053ec <I2C_WaitOnFlagUntilTimeout>
9000580a:	4680      	mov	r8, r0
9000580c:	2800      	cmp	r0, #0
9000580e:	d1e5      	bne.n	900057dc <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90005810:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
90005812:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90005814:	4652      	mov	r2, sl
90005816:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90005818:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000581c:	2340      	movs	r3, #64	; 0x40
9000581e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
90005822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90005824:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90005826:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
90005828:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
9000582a:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
9000582c:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
90005830:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
90005832:	465b      	mov	r3, fp
90005834:	f7ff fe62 	bl	900054fc <I2C_RequestMemoryRead>
90005838:	b110      	cbz	r0, 90005840 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
9000583a:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
9000583e:	e7cd      	b.n	900057dc <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90005840:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90005842:	b29b      	uxth	r3, r3
90005844:	2bff      	cmp	r3, #255	; 0xff
90005846:	4b36      	ldr	r3, [pc, #216]	; (90005920 <HAL_I2C_Mem_Read+0x174>)
90005848:	d958      	bls.n	900058fc <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
9000584a:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
9000584c:	9300      	str	r3, [sp, #0]
9000584e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
90005852:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
90005854:	4639      	mov	r1, r7
90005856:	4620      	mov	r0, r4
90005858:	f7ff fd52 	bl	90005300 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
9000585c:	464b      	mov	r3, r9
9000585e:	2200      	movs	r2, #0
90005860:	2104      	movs	r1, #4
90005862:	4620      	mov	r0, r4
90005864:	9600      	str	r6, [sp, #0]
90005866:	f7ff fdc1 	bl	900053ec <I2C_WaitOnFlagUntilTimeout>
9000586a:	2800      	cmp	r0, #0
9000586c:	d1b6      	bne.n	900057dc <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
9000586e:	6823      	ldr	r3, [r4, #0]
90005870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90005872:	6a63      	ldr	r3, [r4, #36]	; 0x24
90005874:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
90005876:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
90005878:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
9000587a:	3301      	adds	r3, #1
      hi2c->XferSize--;
9000587c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
9000587e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
90005880:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
90005882:	b292      	uxth	r2, r2
      hi2c->XferCount--;
90005884:	3b01      	subs	r3, #1
      hi2c->XferSize--;
90005886:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
90005888:	b29b      	uxth	r3, r3
9000588a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000588c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000588e:	b29b      	uxth	r3, r3
90005890:	b1ab      	cbz	r3, 900058be <HAL_I2C_Mem_Read+0x112>
90005892:	b9a2      	cbnz	r2, 900058be <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
90005894:	464b      	mov	r3, r9
90005896:	2180      	movs	r1, #128	; 0x80
90005898:	4620      	mov	r0, r4
9000589a:	9600      	str	r6, [sp, #0]
9000589c:	f7ff fda6 	bl	900053ec <I2C_WaitOnFlagUntilTimeout>
900058a0:	2800      	cmp	r0, #0
900058a2:	d19b      	bne.n	900057dc <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
900058a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
900058a6:	b29b      	uxth	r3, r3
900058a8:	2bff      	cmp	r3, #255	; 0xff
900058aa:	d92f      	bls.n	9000590c <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
900058ac:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
900058ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
900058b2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
900058b4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
900058b6:	4639      	mov	r1, r7
900058b8:	4620      	mov	r0, r4
900058ba:	f7ff fd21 	bl	90005300 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
900058be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
900058c0:	b29b      	uxth	r3, r3
900058c2:	2b00      	cmp	r3, #0
900058c4:	d1ca      	bne.n	9000585c <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
900058c6:	4632      	mov	r2, r6
900058c8:	4649      	mov	r1, r9
900058ca:	4620      	mov	r0, r4
900058cc:	f7ff fd69 	bl	900053a2 <I2C_WaitOnSTOPFlagUntilTimeout>
900058d0:	2800      	cmp	r0, #0
900058d2:	d183      	bne.n	900057dc <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900058d4:	6823      	ldr	r3, [r4, #0]
900058d6:	2120      	movs	r1, #32
900058d8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
900058da:	685a      	ldr	r2, [r3, #4]
900058dc:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
900058e0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
900058e4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
900058e8:	f022 0201 	bic.w	r2, r2, #1
900058ec:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
900058ee:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
900058f2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
900058f6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
900058fa:	e770      	b.n	900057de <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
900058fc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
900058fe:	9300      	str	r3, [sp, #0]
90005900:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
90005904:	b292      	uxth	r2, r2
90005906:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
90005908:	b2d2      	uxtb	r2, r2
9000590a:	e7a3      	b.n	90005854 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
9000590c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
9000590e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
90005912:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
90005914:	b292      	uxth	r2, r2
90005916:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
90005918:	b2d2      	uxtb	r2, r2
9000591a:	e7cc      	b.n	900058b6 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
9000591c:	2002      	movs	r0, #2
9000591e:	e75e      	b.n	900057de <HAL_I2C_Mem_Read+0x32>
90005920:	80002400 	.word	0x80002400

90005924 <HAL_I2C_GetState>:
  return hi2c->State;
90005924:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
90005928:	4770      	bx	lr

9000592a <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000592a:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000592c:	f8d1 c000 	ldr.w	ip, [r1]
{
90005930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90005934:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90005936:	6804      	ldr	r4, [r0, #0]
90005938:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000593a:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000593e:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90005940:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
90005942:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
90005946:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000594a:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000594c:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90005950:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90005954:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90005956:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90005958:	68e0      	ldr	r0, [r4, #12]
9000595a:	f3c0 400b 	ubfx	r0, r0, #16, #12
9000595e:	4430      	add	r0, r6
90005960:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90005964:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90005966:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90005968:	68e0      	ldr	r0, [r4, #12]
9000596a:	f3c0 000a 	ubfx	r0, r0, #0, #11
9000596e:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90005970:	6898      	ldr	r0, [r3, #8]
90005972:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
90005976:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90005978:	6888      	ldr	r0, [r1, #8]
9000597a:	68e6      	ldr	r6, [r4, #12]
9000597c:	3001      	adds	r0, #1
9000597e:	f3c6 060a 	ubfx	r6, r6, #0, #11
90005982:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90005984:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90005986:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
9000598a:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
9000598c:	6918      	ldr	r0, [r3, #16]
9000598e:	f020 0007 	bic.w	r0, r0, #7
90005992:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90005994:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
90005996:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
90005998:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
9000599c:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
900059a0:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
900059a4:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
900059a8:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
900059ac:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
900059b0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
900059b4:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
900059b6:	6958      	ldr	r0, [r3, #20]
900059b8:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
900059bc:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
900059be:	6948      	ldr	r0, [r1, #20]
900059c0:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
900059c2:	69d8      	ldr	r0, [r3, #28]
900059c4:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
900059c8:	f020 0007 	bic.w	r0, r0, #7
900059cc:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
900059ce:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
900059d2:	4305      	orrs	r5, r0
900059d4:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
900059d6:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
900059d8:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
900059da:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
900059de:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
900059e0:	b31e      	cbz	r6, 90005a2a <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
900059e2:	2e01      	cmp	r6, #1
900059e4:	d023      	beq.n	90005a2e <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
900059e6:	1eb0      	subs	r0, r6, #2
900059e8:	2802      	cmp	r0, #2
900059ea:	d922      	bls.n	90005a32 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
900059ec:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
900059ee:	bf0c      	ite	eq
900059f0:	2002      	moveq	r0, #2
900059f2:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
900059f4:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
900059f6:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
900059fa:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
900059fe:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
90005a00:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90005a02:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
90005a04:	4345      	muls	r5, r0
90005a06:	4378      	muls	r0, r7
90005a08:	3003      	adds	r0, #3
90005a0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
90005a0e:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
90005a10:	6b18      	ldr	r0, [r3, #48]	; 0x30
90005a12:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
90005a16:	f020 0007 	bic.w	r0, r0, #7
90005a1a:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90005a1c:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
90005a1e:	58a3      	ldr	r3, [r4, r2]
90005a20:	f043 0301 	orr.w	r3, r3, #1
90005a24:	50a3      	str	r3, [r4, r2]
}
90005a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
90005a2a:	2004      	movs	r0, #4
90005a2c:	e7e2      	b.n	900059f4 <LTDC_SetConfig+0xca>
    tmp = 3U;
90005a2e:	2003      	movs	r0, #3
90005a30:	e7e0      	b.n	900059f4 <LTDC_SetConfig+0xca>
    tmp = 2U;
90005a32:	2002      	movs	r0, #2
90005a34:	e7de      	b.n	900059f4 <LTDC_SetConfig+0xca>
	...

90005a38 <HAL_LTDC_Init>:
{
90005a38:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
90005a3a:	4604      	mov	r4, r0
90005a3c:	2800      	cmp	r0, #0
90005a3e:	d063      	beq.n	90005b08 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
90005a40:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
90005a44:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90005a48:	b91b      	cbnz	r3, 90005a52 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
90005a4a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
90005a4e:	f7fc fbd3 	bl	900021f8 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
90005a52:	2302      	movs	r3, #2
90005a54:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90005a58:	6823      	ldr	r3, [r4, #0]
90005a5a:	699a      	ldr	r2, [r3, #24]
90005a5c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
90005a60:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90005a62:	6999      	ldr	r1, [r3, #24]
90005a64:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
90005a68:	4302      	orrs	r2, r0
90005a6a:	68e0      	ldr	r0, [r4, #12]
90005a6c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90005a6e:	6920      	ldr	r0, [r4, #16]
90005a70:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
90005a72:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90005a74:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
90005a76:	4925      	ldr	r1, [pc, #148]	; (90005b0c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90005a78:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
90005a7a:	689a      	ldr	r2, [r3, #8]
90005a7c:	400a      	ands	r2, r1
90005a7e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
90005a80:	689a      	ldr	r2, [r3, #8]
90005a82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
90005a86:	69a0      	ldr	r0, [r4, #24]
90005a88:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
90005a8a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
90005a8c:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
90005a8e:	68da      	ldr	r2, [r3, #12]
90005a90:	400a      	ands	r2, r1
90005a92:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
90005a94:	68da      	ldr	r2, [r3, #12]
90005a96:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
90005a9a:	6a20      	ldr	r0, [r4, #32]
90005a9c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
90005a9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
90005aa0:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
90005aa2:	691a      	ldr	r2, [r3, #16]
90005aa4:	400a      	ands	r2, r1
90005aa6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
90005aa8:	691a      	ldr	r2, [r3, #16]
90005aaa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
90005aae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
90005ab0:	4302      	orrs	r2, r0
90005ab2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
90005ab4:	695a      	ldr	r2, [r3, #20]
90005ab6:	4011      	ands	r1, r2
90005ab8:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
90005aba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
90005abc:	695a      	ldr	r2, [r3, #20]
90005abe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
90005ac2:	6b21      	ldr	r1, [r4, #48]	; 0x30
90005ac4:	430a      	orrs	r2, r1
90005ac6:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90005ac8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
90005aca:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90005ace:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
90005ad2:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90005ad6:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
90005ad8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
90005ada:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
90005ade:	430a      	orrs	r2, r1
90005ae0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
90005ae4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90005ae8:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
90005aea:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
90005aec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90005aee:	f042 0206 	orr.w	r2, r2, #6
90005af2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
90005af4:	699a      	ldr	r2, [r3, #24]
90005af6:	f042 0201 	orr.w	r2, r2, #1
90005afa:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
90005afc:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90005afe:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
90005b02:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
90005b06:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
90005b08:	2001      	movs	r0, #1
90005b0a:	e7fc      	b.n	90005b06 <HAL_LTDC_Init+0xce>
90005b0c:	f000f800 	.word	0xf000f800

90005b10 <HAL_LTDC_ErrorCallback>:
90005b10:	4770      	bx	lr

90005b12 <HAL_LTDC_ReloadEventCallback>:
90005b12:	4770      	bx	lr

90005b14 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
90005b14:	6803      	ldr	r3, [r0, #0]
{
90005b16:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
90005b18:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
90005b1a:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
90005b1c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
90005b1e:	0772      	lsls	r2, r6, #29
90005b20:	d514      	bpl.n	90005b4c <HAL_LTDC_IRQHandler+0x38>
90005b22:	0769      	lsls	r1, r5, #29
90005b24:	d512      	bpl.n	90005b4c <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
90005b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90005b28:	f022 0204 	bic.w	r2, r2, #4
90005b2c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
90005b2e:	2204      	movs	r2, #4
90005b30:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
90005b32:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
90005b36:	f043 0301 	orr.w	r3, r3, #1
90005b3a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
90005b3e:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
90005b40:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
90005b44:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
90005b48:	f7ff ffe2 	bl	90005b10 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
90005b4c:	07b2      	lsls	r2, r6, #30
90005b4e:	d516      	bpl.n	90005b7e <HAL_LTDC_IRQHandler+0x6a>
90005b50:	07ab      	lsls	r3, r5, #30
90005b52:	d514      	bpl.n	90005b7e <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
90005b54:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
90005b56:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
90005b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90005b5a:	f022 0202 	bic.w	r2, r2, #2
90005b5e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
90005b60:	2202      	movs	r2, #2
90005b62:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
90005b64:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
90005b68:	4313      	orrs	r3, r2
90005b6a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
90005b6e:	2304      	movs	r3, #4
90005b70:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
90005b74:	2300      	movs	r3, #0
90005b76:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
90005b7a:	f7ff ffc9 	bl	90005b10 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
90005b7e:	07f0      	lsls	r0, r6, #31
90005b80:	d510      	bpl.n	90005ba4 <HAL_LTDC_IRQHandler+0x90>
90005b82:	07e9      	lsls	r1, r5, #31
90005b84:	d50e      	bpl.n	90005ba4 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
90005b86:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
90005b88:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
90005b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90005b8c:	f022 0201 	bic.w	r2, r2, #1
90005b90:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
90005b92:	2201      	movs	r2, #1
90005b94:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
90005b96:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
90005b98:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
90005b9c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
90005ba0:	f7fb ffc6 	bl	90001b30 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
90005ba4:	0732      	lsls	r2, r6, #28
90005ba6:	d511      	bpl.n	90005bcc <HAL_LTDC_IRQHandler+0xb8>
90005ba8:	072b      	lsls	r3, r5, #28
90005baa:	d50f      	bpl.n	90005bcc <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
90005bac:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
90005bae:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
90005bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90005bb2:	f022 0208 	bic.w	r2, r2, #8
90005bb6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
90005bb8:	2208      	movs	r2, #8
90005bba:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
90005bbc:	2301      	movs	r3, #1
90005bbe:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
90005bc2:	2300      	movs	r3, #0
90005bc4:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
90005bc8:	f7ff ffa3 	bl	90005b12 <HAL_LTDC_ReloadEventCallback>
}
90005bcc:	bd70      	pop	{r4, r5, r6, pc}

90005bce <HAL_LTDC_ConfigLayer>:
{
90005bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
90005bd2:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
90005bd6:	4606      	mov	r6, r0
90005bd8:	460f      	mov	r7, r1
90005bda:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
90005bdc:	2b01      	cmp	r3, #1
90005bde:	f04f 0002 	mov.w	r0, #2
90005be2:	d01f      	beq.n	90005c24 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90005be4:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
90005be6:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90005bea:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
90005bec:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90005bf0:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
90005bf4:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90005bf8:	3438      	adds	r4, #56	; 0x38
90005bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90005bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90005bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90005c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90005c02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90005c04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90005c06:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90005c08:	4630      	mov	r0, r6
90005c0a:	4662      	mov	r2, ip
90005c0c:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90005c0e:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
90005c10:	f7ff fe8b 	bl	9000592a <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90005c14:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
90005c16:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90005c18:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
90005c1c:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
90005c20:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
90005c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90005c28 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
90005c28:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
90005c2c:	2b01      	cmp	r3, #1
90005c2e:	f04f 0302 	mov.w	r3, #2
90005c32:	d012      	beq.n	90005c5a <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
90005c34:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
90005c38:	6803      	ldr	r3, [r0, #0]
90005c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90005c3c:	f022 0201 	bic.w	r2, r2, #1
90005c40:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
90005c42:	4a07      	ldr	r2, [pc, #28]	; (90005c60 <HAL_LTDC_ProgramLineEvent+0x38>)
90005c44:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
90005c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90005c48:	f042 0201 	orr.w	r2, r2, #1
90005c4c:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
90005c4e:	2301      	movs	r3, #1
90005c50:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
90005c54:	2300      	movs	r3, #0
90005c56:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
90005c5a:	4618      	mov	r0, r3
}
90005c5c:	4770      	bx	lr
90005c5e:	bf00      	nop
90005c60:	40016800 	.word	0x40016800

90005c64 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
90005c64:	4b19      	ldr	r3, [pc, #100]	; (90005ccc <HAL_PWREx_EnableOverDrive+0x68>)
{
90005c66:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
90005c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
90005c6a:	4c19      	ldr	r4, [pc, #100]	; (90005cd0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
90005c6c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
90005c70:	641a      	str	r2, [r3, #64]	; 0x40
90005c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90005c78:	9301      	str	r3, [sp, #4]
90005c7a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
90005c7c:	6823      	ldr	r3, [r4, #0]
90005c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90005c82:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
90005c84:	f7fe fa94 	bl	900041b0 <HAL_GetTick>
90005c88:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
90005c8a:	6863      	ldr	r3, [r4, #4]
90005c8c:	03da      	lsls	r2, r3, #15
90005c8e:	d50c      	bpl.n	90005caa <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
90005c90:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
90005c92:	4d0f      	ldr	r5, [pc, #60]	; (90005cd0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
90005c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90005c98:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
90005c9a:	f7fe fa89 	bl	900041b0 <HAL_GetTick>
90005c9e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
90005ca0:	686b      	ldr	r3, [r5, #4]
90005ca2:	039b      	lsls	r3, r3, #14
90005ca4:	d50a      	bpl.n	90005cbc <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
90005ca6:	2000      	movs	r0, #0
90005ca8:	e006      	b.n	90005cb8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
90005caa:	f7fe fa81 	bl	900041b0 <HAL_GetTick>
90005cae:	1b40      	subs	r0, r0, r5
90005cb0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
90005cb4:	d9e9      	bls.n	90005c8a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
90005cb6:	2003      	movs	r0, #3
}
90005cb8:	b003      	add	sp, #12
90005cba:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
90005cbc:	f7fe fa78 	bl	900041b0 <HAL_GetTick>
90005cc0:	1b00      	subs	r0, r0, r4
90005cc2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
90005cc6:	d9eb      	bls.n	90005ca0 <HAL_PWREx_EnableOverDrive+0x3c>
90005cc8:	e7f5      	b.n	90005cb6 <HAL_PWREx_EnableOverDrive+0x52>
90005cca:	bf00      	nop
90005ccc:	40023800 	.word	0x40023800
90005cd0:	40007000 	.word	0x40007000

90005cd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90005cd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
90005cd8:	4604      	mov	r4, r0
90005cda:	b340      	cbz	r0, 90005d2e <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
90005cdc:	6803      	ldr	r3, [r0, #0]
90005cde:	07d8      	lsls	r0, r3, #31
90005ce0:	d410      	bmi.n	90005d04 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
90005ce2:	6823      	ldr	r3, [r4, #0]
90005ce4:	0799      	lsls	r1, r3, #30
90005ce6:	d464      	bmi.n	90005db2 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90005ce8:	6823      	ldr	r3, [r4, #0]
90005cea:	0719      	lsls	r1, r3, #28
90005cec:	f100 80aa 	bmi.w	90005e44 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
90005cf0:	6823      	ldr	r3, [r4, #0]
90005cf2:	075a      	lsls	r2, r3, #29
90005cf4:	f100 80cb 	bmi.w	90005e8e <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
90005cf8:	69a2      	ldr	r2, [r4, #24]
90005cfa:	2a00      	cmp	r2, #0
90005cfc:	f040 8134 	bne.w	90005f68 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
90005d00:	2000      	movs	r0, #0
90005d02:	e02b      	b.n	90005d5c <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
90005d04:	4b96      	ldr	r3, [pc, #600]	; (90005f60 <HAL_RCC_OscConfig+0x28c>)
90005d06:	689a      	ldr	r2, [r3, #8]
90005d08:	f002 020c 	and.w	r2, r2, #12
90005d0c:	2a04      	cmp	r2, #4
90005d0e:	d007      	beq.n	90005d20 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
90005d10:	689a      	ldr	r2, [r3, #8]
90005d12:	f002 020c 	and.w	r2, r2, #12
90005d16:	2a08      	cmp	r2, #8
90005d18:	d10b      	bne.n	90005d32 <HAL_RCC_OscConfig+0x5e>
90005d1a:	685a      	ldr	r2, [r3, #4]
90005d1c:	0252      	lsls	r2, r2, #9
90005d1e:	d508      	bpl.n	90005d32 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90005d20:	4b8f      	ldr	r3, [pc, #572]	; (90005f60 <HAL_RCC_OscConfig+0x28c>)
90005d22:	681b      	ldr	r3, [r3, #0]
90005d24:	039b      	lsls	r3, r3, #14
90005d26:	d5dc      	bpl.n	90005ce2 <HAL_RCC_OscConfig+0xe>
90005d28:	6863      	ldr	r3, [r4, #4]
90005d2a:	2b00      	cmp	r3, #0
90005d2c:	d1d9      	bne.n	90005ce2 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
90005d2e:	2001      	movs	r0, #1
90005d30:	e014      	b.n	90005d5c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90005d32:	6862      	ldr	r2, [r4, #4]
90005d34:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
90005d38:	d113      	bne.n	90005d62 <HAL_RCC_OscConfig+0x8e>
90005d3a:	681a      	ldr	r2, [r3, #0]
90005d3c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
90005d40:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
90005d42:	f7fe fa35 	bl	900041b0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90005d46:	4e86      	ldr	r6, [pc, #536]	; (90005f60 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
90005d48:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90005d4a:	6833      	ldr	r3, [r6, #0]
90005d4c:	039f      	lsls	r7, r3, #14
90005d4e:	d4c8      	bmi.n	90005ce2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90005d50:	f7fe fa2e 	bl	900041b0 <HAL_GetTick>
90005d54:	1b40      	subs	r0, r0, r5
90005d56:	2864      	cmp	r0, #100	; 0x64
90005d58:	d9f7      	bls.n	90005d4a <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
90005d5a:	2003      	movs	r0, #3
}
90005d5c:	b002      	add	sp, #8
90005d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90005d62:	4d7f      	ldr	r5, [pc, #508]	; (90005f60 <HAL_RCC_OscConfig+0x28c>)
90005d64:	682b      	ldr	r3, [r5, #0]
90005d66:	b992      	cbnz	r2, 90005d8e <HAL_RCC_OscConfig+0xba>
90005d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90005d6c:	602b      	str	r3, [r5, #0]
90005d6e:	682b      	ldr	r3, [r5, #0]
90005d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90005d74:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
90005d76:	f7fe fa1b 	bl	900041b0 <HAL_GetTick>
90005d7a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
90005d7c:	682b      	ldr	r3, [r5, #0]
90005d7e:	0398      	lsls	r0, r3, #14
90005d80:	d5af      	bpl.n	90005ce2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90005d82:	f7fe fa15 	bl	900041b0 <HAL_GetTick>
90005d86:	1b80      	subs	r0, r0, r6
90005d88:	2864      	cmp	r0, #100	; 0x64
90005d8a:	d9f7      	bls.n	90005d7c <HAL_RCC_OscConfig+0xa8>
90005d8c:	e7e5      	b.n	90005d5a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90005d8e:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
90005d92:	d107      	bne.n	90005da4 <HAL_RCC_OscConfig+0xd0>
90005d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
90005d98:	602b      	str	r3, [r5, #0]
90005d9a:	682b      	ldr	r3, [r5, #0]
90005d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90005da0:	602b      	str	r3, [r5, #0]
90005da2:	e7ce      	b.n	90005d42 <HAL_RCC_OscConfig+0x6e>
90005da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90005da8:	602b      	str	r3, [r5, #0]
90005daa:	682b      	ldr	r3, [r5, #0]
90005dac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90005db0:	e7f6      	b.n	90005da0 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
90005db2:	4b6b      	ldr	r3, [pc, #428]	; (90005f60 <HAL_RCC_OscConfig+0x28c>)
90005db4:	689a      	ldr	r2, [r3, #8]
90005db6:	f012 0f0c 	tst.w	r2, #12
90005dba:	d007      	beq.n	90005dcc <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
90005dbc:	689a      	ldr	r2, [r3, #8]
90005dbe:	f002 020c 	and.w	r2, r2, #12
90005dc2:	2a08      	cmp	r2, #8
90005dc4:	d111      	bne.n	90005dea <HAL_RCC_OscConfig+0x116>
90005dc6:	685a      	ldr	r2, [r3, #4]
90005dc8:	0251      	lsls	r1, r2, #9
90005dca:	d40e      	bmi.n	90005dea <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
90005dcc:	4b64      	ldr	r3, [pc, #400]	; (90005f60 <HAL_RCC_OscConfig+0x28c>)
90005dce:	681a      	ldr	r2, [r3, #0]
90005dd0:	0792      	lsls	r2, r2, #30
90005dd2:	d502      	bpl.n	90005dda <HAL_RCC_OscConfig+0x106>
90005dd4:	68e2      	ldr	r2, [r4, #12]
90005dd6:	2a01      	cmp	r2, #1
90005dd8:	d1a9      	bne.n	90005d2e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90005dda:	681a      	ldr	r2, [r3, #0]
90005ddc:	6921      	ldr	r1, [r4, #16]
90005dde:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
90005de2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
90005de6:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
90005de8:	e77e      	b.n	90005ce8 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90005dea:	68e2      	ldr	r2, [r4, #12]
90005dec:	b1c2      	cbz	r2, 90005e20 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
90005dee:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90005df0:	4d5b      	ldr	r5, [pc, #364]	; (90005f60 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
90005df2:	f042 0201 	orr.w	r2, r2, #1
90005df6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
90005df8:	f7fe f9da 	bl	900041b0 <HAL_GetTick>
90005dfc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90005dfe:	682b      	ldr	r3, [r5, #0]
90005e00:	079f      	lsls	r7, r3, #30
90005e02:	d507      	bpl.n	90005e14 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90005e04:	682b      	ldr	r3, [r5, #0]
90005e06:	6922      	ldr	r2, [r4, #16]
90005e08:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
90005e0c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
90005e10:	602b      	str	r3, [r5, #0]
90005e12:	e769      	b.n	90005ce8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90005e14:	f7fe f9cc 	bl	900041b0 <HAL_GetTick>
90005e18:	1b80      	subs	r0, r0, r6
90005e1a:	2802      	cmp	r0, #2
90005e1c:	d9ef      	bls.n	90005dfe <HAL_RCC_OscConfig+0x12a>
90005e1e:	e79c      	b.n	90005d5a <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
90005e20:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
90005e22:	4e4f      	ldr	r6, [pc, #316]	; (90005f60 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
90005e24:	f022 0201 	bic.w	r2, r2, #1
90005e28:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
90005e2a:	f7fe f9c1 	bl	900041b0 <HAL_GetTick>
90005e2e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
90005e30:	6833      	ldr	r3, [r6, #0]
90005e32:	0798      	lsls	r0, r3, #30
90005e34:	f57f af58 	bpl.w	90005ce8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90005e38:	f7fe f9ba 	bl	900041b0 <HAL_GetTick>
90005e3c:	1b40      	subs	r0, r0, r5
90005e3e:	2802      	cmp	r0, #2
90005e40:	d9f6      	bls.n	90005e30 <HAL_RCC_OscConfig+0x15c>
90005e42:	e78a      	b.n	90005d5a <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90005e44:	6963      	ldr	r3, [r4, #20]
90005e46:	4d46      	ldr	r5, [pc, #280]	; (90005f60 <HAL_RCC_OscConfig+0x28c>)
90005e48:	b183      	cbz	r3, 90005e6c <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
90005e4a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90005e4c:	f043 0301 	orr.w	r3, r3, #1
90005e50:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
90005e52:	f7fe f9ad 	bl	900041b0 <HAL_GetTick>
90005e56:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
90005e58:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90005e5a:	079b      	lsls	r3, r3, #30
90005e5c:	f53f af48 	bmi.w	90005cf0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90005e60:	f7fe f9a6 	bl	900041b0 <HAL_GetTick>
90005e64:	1b80      	subs	r0, r0, r6
90005e66:	2802      	cmp	r0, #2
90005e68:	d9f6      	bls.n	90005e58 <HAL_RCC_OscConfig+0x184>
90005e6a:	e776      	b.n	90005d5a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
90005e6c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90005e6e:	f023 0301 	bic.w	r3, r3, #1
90005e72:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
90005e74:	f7fe f99c 	bl	900041b0 <HAL_GetTick>
90005e78:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
90005e7a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
90005e7c:	079f      	lsls	r7, r3, #30
90005e7e:	f57f af37 	bpl.w	90005cf0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90005e82:	f7fe f995 	bl	900041b0 <HAL_GetTick>
90005e86:	1b80      	subs	r0, r0, r6
90005e88:	2802      	cmp	r0, #2
90005e8a:	d9f6      	bls.n	90005e7a <HAL_RCC_OscConfig+0x1a6>
90005e8c:	e765      	b.n	90005d5a <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
90005e8e:	4b34      	ldr	r3, [pc, #208]	; (90005f60 <HAL_RCC_OscConfig+0x28c>)
90005e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90005e92:	00d0      	lsls	r0, r2, #3
90005e94:	d427      	bmi.n	90005ee6 <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
90005e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
90005e98:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
90005e9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
90005e9e:	641a      	str	r2, [r3, #64]	; 0x40
90005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90005ea6:	9301      	str	r3, [sp, #4]
90005ea8:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90005eaa:	4d2e      	ldr	r5, [pc, #184]	; (90005f64 <HAL_RCC_OscConfig+0x290>)
90005eac:	682b      	ldr	r3, [r5, #0]
90005eae:	05d9      	lsls	r1, r3, #23
90005eb0:	d51b      	bpl.n	90005eea <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90005eb2:	68a3      	ldr	r3, [r4, #8]
90005eb4:	4d2a      	ldr	r5, [pc, #168]	; (90005f60 <HAL_RCC_OscConfig+0x28c>)
90005eb6:	2b01      	cmp	r3, #1
90005eb8:	d127      	bne.n	90005f0a <HAL_RCC_OscConfig+0x236>
90005eba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
90005ebc:	f043 0301 	orr.w	r3, r3, #1
90005ec0:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90005ec2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
90005ec6:	f7fe f973 	bl	900041b0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90005eca:	4e25      	ldr	r6, [pc, #148]	; (90005f60 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
90005ecc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90005ece:	6f33      	ldr	r3, [r6, #112]	; 0x70
90005ed0:	079b      	lsls	r3, r3, #30
90005ed2:	d53f      	bpl.n	90005f54 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
90005ed4:	2f00      	cmp	r7, #0
90005ed6:	f43f af0f 	beq.w	90005cf8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
90005eda:	4a21      	ldr	r2, [pc, #132]	; (90005f60 <HAL_RCC_OscConfig+0x28c>)
90005edc:	6c13      	ldr	r3, [r2, #64]	; 0x40
90005ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
90005ee2:	6413      	str	r3, [r2, #64]	; 0x40
90005ee4:	e708      	b.n	90005cf8 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
90005ee6:	2700      	movs	r7, #0
90005ee8:	e7df      	b.n	90005eaa <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
90005eea:	682b      	ldr	r3, [r5, #0]
90005eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90005ef0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
90005ef2:	f7fe f95d 	bl	900041b0 <HAL_GetTick>
90005ef6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90005ef8:	682b      	ldr	r3, [r5, #0]
90005efa:	05da      	lsls	r2, r3, #23
90005efc:	d4d9      	bmi.n	90005eb2 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90005efe:	f7fe f957 	bl	900041b0 <HAL_GetTick>
90005f02:	1b80      	subs	r0, r0, r6
90005f04:	2864      	cmp	r0, #100	; 0x64
90005f06:	d9f7      	bls.n	90005ef8 <HAL_RCC_OscConfig+0x224>
90005f08:	e727      	b.n	90005d5a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90005f0a:	b9ab      	cbnz	r3, 90005f38 <HAL_RCC_OscConfig+0x264>
90005f0c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90005f0e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90005f12:	f023 0301 	bic.w	r3, r3, #1
90005f16:	672b      	str	r3, [r5, #112]	; 0x70
90005f18:	6f2b      	ldr	r3, [r5, #112]	; 0x70
90005f1a:	f023 0304 	bic.w	r3, r3, #4
90005f1e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
90005f20:	f7fe f946 	bl	900041b0 <HAL_GetTick>
90005f24:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
90005f26:	6f2b      	ldr	r3, [r5, #112]	; 0x70
90005f28:	0798      	lsls	r0, r3, #30
90005f2a:	d5d3      	bpl.n	90005ed4 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90005f2c:	f7fe f940 	bl	900041b0 <HAL_GetTick>
90005f30:	1b80      	subs	r0, r0, r6
90005f32:	4540      	cmp	r0, r8
90005f34:	d9f7      	bls.n	90005f26 <HAL_RCC_OscConfig+0x252>
90005f36:	e710      	b.n	90005d5a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90005f38:	2b05      	cmp	r3, #5
90005f3a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
90005f3c:	d103      	bne.n	90005f46 <HAL_RCC_OscConfig+0x272>
90005f3e:	f043 0304 	orr.w	r3, r3, #4
90005f42:	672b      	str	r3, [r5, #112]	; 0x70
90005f44:	e7b9      	b.n	90005eba <HAL_RCC_OscConfig+0x1e6>
90005f46:	f023 0301 	bic.w	r3, r3, #1
90005f4a:	672b      	str	r3, [r5, #112]	; 0x70
90005f4c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
90005f4e:	f023 0304 	bic.w	r3, r3, #4
90005f52:	e7b5      	b.n	90005ec0 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90005f54:	f7fe f92c 	bl	900041b0 <HAL_GetTick>
90005f58:	1b40      	subs	r0, r0, r5
90005f5a:	4540      	cmp	r0, r8
90005f5c:	d9b7      	bls.n	90005ece <HAL_RCC_OscConfig+0x1fa>
90005f5e:	e6fc      	b.n	90005d5a <HAL_RCC_OscConfig+0x86>
90005f60:	40023800 	.word	0x40023800
90005f64:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
90005f68:	4d38      	ldr	r5, [pc, #224]	; (9000604c <HAL_RCC_OscConfig+0x378>)
90005f6a:	68ab      	ldr	r3, [r5, #8]
90005f6c:	f003 030c 	and.w	r3, r3, #12
90005f70:	2b08      	cmp	r3, #8
90005f72:	d041      	beq.n	90005ff8 <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
90005f74:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90005f76:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
90005f78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90005f7c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90005f7e:	d12e      	bne.n	90005fde <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
90005f80:	f7fe f916 	bl	900041b0 <HAL_GetTick>
90005f84:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90005f86:	682b      	ldr	r3, [r5, #0]
90005f88:	0199      	lsls	r1, r3, #6
90005f8a:	d422      	bmi.n	90005fd2 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
90005f8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90005f8e:	085b      	lsrs	r3, r3, #1
90005f90:	1e5a      	subs	r2, r3, #1
90005f92:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
90005f96:	430b      	orrs	r3, r1
90005f98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90005f9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
90005f9e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
90005fa2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90005fa4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
90005fa8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
90005fac:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
90005fae:	682b      	ldr	r3, [r5, #0]
90005fb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
90005fb4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
90005fb6:	f7fe f8fb 	bl	900041b0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90005fba:	4d24      	ldr	r5, [pc, #144]	; (9000604c <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
90005fbc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90005fbe:	682b      	ldr	r3, [r5, #0]
90005fc0:	019a      	lsls	r2, r3, #6
90005fc2:	f53f ae9d 	bmi.w	90005d00 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90005fc6:	f7fe f8f3 	bl	900041b0 <HAL_GetTick>
90005fca:	1b00      	subs	r0, r0, r4
90005fcc:	2802      	cmp	r0, #2
90005fce:	d9f6      	bls.n	90005fbe <HAL_RCC_OscConfig+0x2ea>
90005fd0:	e6c3      	b.n	90005d5a <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90005fd2:	f7fe f8ed 	bl	900041b0 <HAL_GetTick>
90005fd6:	1b80      	subs	r0, r0, r6
90005fd8:	2802      	cmp	r0, #2
90005fda:	d9d4      	bls.n	90005f86 <HAL_RCC_OscConfig+0x2b2>
90005fdc:	e6bd      	b.n	90005d5a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
90005fde:	f7fe f8e7 	bl	900041b0 <HAL_GetTick>
90005fe2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90005fe4:	682b      	ldr	r3, [r5, #0]
90005fe6:	019b      	lsls	r3, r3, #6
90005fe8:	f57f ae8a 	bpl.w	90005d00 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90005fec:	f7fe f8e0 	bl	900041b0 <HAL_GetTick>
90005ff0:	1b00      	subs	r0, r0, r4
90005ff2:	2802      	cmp	r0, #2
90005ff4:	d9f6      	bls.n	90005fe4 <HAL_RCC_OscConfig+0x310>
90005ff6:	e6b0      	b.n	90005d5a <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90005ff8:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
90005ffa:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90005ffc:	f43f ae97 	beq.w	90005d2e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90006000:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90006004:	69e1      	ldr	r1, [r4, #28]
90006006:	428a      	cmp	r2, r1
90006008:	f47f ae91 	bne.w	90005d2e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
9000600c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90006010:	6a21      	ldr	r1, [r4, #32]
90006012:	428a      	cmp	r2, r1
90006014:	f47f ae8b 	bne.w	90005d2e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90006018:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
9000601c:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
9000601e:	401a      	ands	r2, r3
90006020:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
90006024:	f47f ae83 	bne.w	90005d2e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
90006028:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000602a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
9000602e:	0852      	lsrs	r2, r2, #1
90006030:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
90006032:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
90006036:	f47f ae7a 	bne.w	90005d2e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
9000603a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
9000603e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
90006040:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
90006044:	f43f ae5c 	beq.w	90005d00 <HAL_RCC_OscConfig+0x2c>
90006048:	e671      	b.n	90005d2e <HAL_RCC_OscConfig+0x5a>
9000604a:	bf00      	nop
9000604c:	40023800 	.word	0x40023800

90006050 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
90006050:	4913      	ldr	r1, [pc, #76]	; (900060a0 <HAL_RCC_GetSysClockFreq+0x50>)
{
90006052:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
90006054:	688b      	ldr	r3, [r1, #8]
90006056:	f003 030c 	and.w	r3, r3, #12
9000605a:	2b04      	cmp	r3, #4
9000605c:	d01b      	beq.n	90006096 <HAL_RCC_GetSysClockFreq+0x46>
9000605e:	2b08      	cmp	r3, #8
90006060:	d11b      	bne.n	9000609a <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
90006062:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
90006064:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90006066:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
90006068:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
9000606c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90006070:	f3c1 1188 	ubfx	r1, r1, #6, #9
90006074:	bf1a      	itte	ne
90006076:	480b      	ldrne	r0, [pc, #44]	; (900060a4 <HAL_RCC_GetSysClockFreq+0x54>)
90006078:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
9000607a:	480b      	ldreq	r0, [pc, #44]	; (900060a8 <HAL_RCC_GetSysClockFreq+0x58>)
9000607c:	fba1 0100 	umull	r0, r1, r1, r0
90006080:	f7fa fb2a 	bl	900006d8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
90006084:	4b06      	ldr	r3, [pc, #24]	; (900060a0 <HAL_RCC_GetSysClockFreq+0x50>)
90006086:	685b      	ldr	r3, [r3, #4]
90006088:	f3c3 4301 	ubfx	r3, r3, #16, #2
9000608c:	3301      	adds	r3, #1
9000608e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
90006090:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
90006094:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
90006096:	4803      	ldr	r0, [pc, #12]	; (900060a4 <HAL_RCC_GetSysClockFreq+0x54>)
90006098:	e7fc      	b.n	90006094 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
9000609a:	4803      	ldr	r0, [pc, #12]	; (900060a8 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
9000609c:	e7fa      	b.n	90006094 <HAL_RCC_GetSysClockFreq+0x44>
9000609e:	bf00      	nop
900060a0:	40023800 	.word	0x40023800
900060a4:	017d7840 	.word	0x017d7840
900060a8:	00f42400 	.word	0x00f42400

900060ac <HAL_RCC_ClockConfig>:
{
900060ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900060b0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
900060b2:	4604      	mov	r4, r0
900060b4:	b910      	cbnz	r0, 900060bc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
900060b6:	2001      	movs	r0, #1
}
900060b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
900060bc:	4a46      	ldr	r2, [pc, #280]	; (900061d8 <HAL_RCC_ClockConfig+0x12c>)
900060be:	6813      	ldr	r3, [r2, #0]
900060c0:	f003 030f 	and.w	r3, r3, #15
900060c4:	428b      	cmp	r3, r1
900060c6:	d328      	bcc.n	9000611a <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
900060c8:	6822      	ldr	r2, [r4, #0]
900060ca:	0797      	lsls	r7, r2, #30
900060cc:	d430      	bmi.n	90006130 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
900060ce:	07d0      	lsls	r0, r2, #31
900060d0:	d444      	bmi.n	9000615c <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
900060d2:	4a41      	ldr	r2, [pc, #260]	; (900061d8 <HAL_RCC_ClockConfig+0x12c>)
900060d4:	6813      	ldr	r3, [r2, #0]
900060d6:	f003 030f 	and.w	r3, r3, #15
900060da:	42ab      	cmp	r3, r5
900060dc:	d867      	bhi.n	900061ae <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
900060de:	6822      	ldr	r2, [r4, #0]
900060e0:	0751      	lsls	r1, r2, #29
900060e2:	d470      	bmi.n	900061c6 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
900060e4:	0713      	lsls	r3, r2, #28
900060e6:	d507      	bpl.n	900060f8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
900060e8:	4a3c      	ldr	r2, [pc, #240]	; (900061dc <HAL_RCC_ClockConfig+0x130>)
900060ea:	6921      	ldr	r1, [r4, #16]
900060ec:	6893      	ldr	r3, [r2, #8]
900060ee:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
900060f2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
900060f6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
900060f8:	f7ff ffaa 	bl	90006050 <HAL_RCC_GetSysClockFreq>
900060fc:	4b37      	ldr	r3, [pc, #220]	; (900061dc <HAL_RCC_ClockConfig+0x130>)
900060fe:	4a38      	ldr	r2, [pc, #224]	; (900061e0 <HAL_RCC_ClockConfig+0x134>)
90006100:	689b      	ldr	r3, [r3, #8]
90006102:	f3c3 1303 	ubfx	r3, r3, #4, #4
90006106:	5cd3      	ldrb	r3, [r2, r3]
90006108:	40d8      	lsrs	r0, r3
9000610a:	4b36      	ldr	r3, [pc, #216]	; (900061e4 <HAL_RCC_ClockConfig+0x138>)
9000610c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
9000610e:	4b36      	ldr	r3, [pc, #216]	; (900061e8 <HAL_RCC_ClockConfig+0x13c>)
90006110:	6818      	ldr	r0, [r3, #0]
90006112:	f7fc fa29 	bl	90002568 <HAL_InitTick>
  return HAL_OK;
90006116:	2000      	movs	r0, #0
90006118:	e7ce      	b.n	900060b8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000611a:	6813      	ldr	r3, [r2, #0]
9000611c:	f023 030f 	bic.w	r3, r3, #15
90006120:	430b      	orrs	r3, r1
90006122:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90006124:	6813      	ldr	r3, [r2, #0]
90006126:	f003 030f 	and.w	r3, r3, #15
9000612a:	428b      	cmp	r3, r1
9000612c:	d1c3      	bne.n	900060b6 <HAL_RCC_ClockConfig+0xa>
9000612e:	e7cb      	b.n	900060c8 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90006130:	f012 0f04 	tst.w	r2, #4
90006134:	4b29      	ldr	r3, [pc, #164]	; (900061dc <HAL_RCC_ClockConfig+0x130>)
90006136:	d003      	beq.n	90006140 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
90006138:	6899      	ldr	r1, [r3, #8]
9000613a:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
9000613e:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90006140:	0716      	lsls	r6, r2, #28
90006142:	d503      	bpl.n	9000614c <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
90006144:	6899      	ldr	r1, [r3, #8]
90006146:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
9000614a:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000614c:	4923      	ldr	r1, [pc, #140]	; (900061dc <HAL_RCC_ClockConfig+0x130>)
9000614e:	68a0      	ldr	r0, [r4, #8]
90006150:	688b      	ldr	r3, [r1, #8]
90006152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
90006156:	4303      	orrs	r3, r0
90006158:	608b      	str	r3, [r1, #8]
9000615a:	e7b8      	b.n	900060ce <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000615c:	6861      	ldr	r1, [r4, #4]
9000615e:	4b1f      	ldr	r3, [pc, #124]	; (900061dc <HAL_RCC_ClockConfig+0x130>)
90006160:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90006162:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90006164:	d11b      	bne.n	9000619e <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90006166:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
9000616a:	d0a4      	beq.n	900060b6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
9000616c:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000616e:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90006172:	4f1a      	ldr	r7, [pc, #104]	; (900061dc <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
90006174:	f022 0203 	bic.w	r2, r2, #3
90006178:	430a      	orrs	r2, r1
9000617a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
9000617c:	f7fe f818 	bl	900041b0 <HAL_GetTick>
90006180:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90006182:	68bb      	ldr	r3, [r7, #8]
90006184:	6862      	ldr	r2, [r4, #4]
90006186:	f003 030c 	and.w	r3, r3, #12
9000618a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
9000618e:	d0a0      	beq.n	900060d2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90006190:	f7fe f80e 	bl	900041b0 <HAL_GetTick>
90006194:	1b80      	subs	r0, r0, r6
90006196:	4540      	cmp	r0, r8
90006198:	d9f3      	bls.n	90006182 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
9000619a:	2003      	movs	r0, #3
9000619c:	e78c      	b.n	900060b8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
9000619e:	2902      	cmp	r1, #2
900061a0:	d102      	bne.n	900061a8 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
900061a2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
900061a6:	e7e0      	b.n	9000616a <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
900061a8:	f012 0f02 	tst.w	r2, #2
900061ac:	e7dd      	b.n	9000616a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
900061ae:	6813      	ldr	r3, [r2, #0]
900061b0:	f023 030f 	bic.w	r3, r3, #15
900061b4:	432b      	orrs	r3, r5
900061b6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
900061b8:	6813      	ldr	r3, [r2, #0]
900061ba:	f003 030f 	and.w	r3, r3, #15
900061be:	42ab      	cmp	r3, r5
900061c0:	f47f af79 	bne.w	900060b6 <HAL_RCC_ClockConfig+0xa>
900061c4:	e78b      	b.n	900060de <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
900061c6:	4905      	ldr	r1, [pc, #20]	; (900061dc <HAL_RCC_ClockConfig+0x130>)
900061c8:	68e0      	ldr	r0, [r4, #12]
900061ca:	688b      	ldr	r3, [r1, #8]
900061cc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
900061d0:	4303      	orrs	r3, r0
900061d2:	608b      	str	r3, [r1, #8]
900061d4:	e786      	b.n	900060e4 <HAL_RCC_ClockConfig+0x38>
900061d6:	bf00      	nop
900061d8:	40023c00 	.word	0x40023c00
900061dc:	40023800 	.word	0x40023800
900061e0:	9002b224 	.word	0x9002b224
900061e4:	20000038 	.word	0x20000038
900061e8:	20000040 	.word	0x20000040

900061ec <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
900061ec:	4b01      	ldr	r3, [pc, #4]	; (900061f4 <HAL_RCC_GetHCLKFreq+0x8>)
900061ee:	6818      	ldr	r0, [r3, #0]
900061f0:	4770      	bx	lr
900061f2:	bf00      	nop
900061f4:	20000038 	.word	0x20000038

900061f8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
900061f8:	4b04      	ldr	r3, [pc, #16]	; (9000620c <HAL_RCC_GetPCLK1Freq+0x14>)
900061fa:	4a05      	ldr	r2, [pc, #20]	; (90006210 <HAL_RCC_GetPCLK1Freq+0x18>)
900061fc:	689b      	ldr	r3, [r3, #8]
900061fe:	f3c3 2382 	ubfx	r3, r3, #10, #3
90006202:	5cd3      	ldrb	r3, [r2, r3]
90006204:	4a03      	ldr	r2, [pc, #12]	; (90006214 <HAL_RCC_GetPCLK1Freq+0x1c>)
90006206:	6810      	ldr	r0, [r2, #0]
}
90006208:	40d8      	lsrs	r0, r3
9000620a:	4770      	bx	lr
9000620c:	40023800 	.word	0x40023800
90006210:	9002b234 	.word	0x9002b234
90006214:	20000038 	.word	0x20000038

90006218 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
90006218:	4b04      	ldr	r3, [pc, #16]	; (9000622c <HAL_RCC_GetPCLK2Freq+0x14>)
9000621a:	4a05      	ldr	r2, [pc, #20]	; (90006230 <HAL_RCC_GetPCLK2Freq+0x18>)
9000621c:	689b      	ldr	r3, [r3, #8]
9000621e:	f3c3 3342 	ubfx	r3, r3, #13, #3
90006222:	5cd3      	ldrb	r3, [r2, r3]
90006224:	4a03      	ldr	r2, [pc, #12]	; (90006234 <HAL_RCC_GetPCLK2Freq+0x1c>)
90006226:	6810      	ldr	r0, [r2, #0]
}
90006228:	40d8      	lsrs	r0, r3
9000622a:	4770      	bx	lr
9000622c:	40023800 	.word	0x40023800
90006230:	9002b234 	.word	0x9002b234
90006234:	20000038 	.word	0x20000038

90006238 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
90006238:	230f      	movs	r3, #15
9000623a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000623c:	4b0b      	ldr	r3, [pc, #44]	; (9000626c <HAL_RCC_GetClockConfig+0x34>)
9000623e:	689a      	ldr	r2, [r3, #8]
90006240:	f002 0203 	and.w	r2, r2, #3
90006244:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
90006246:	689a      	ldr	r2, [r3, #8]
90006248:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
9000624c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
9000624e:	689a      	ldr	r2, [r3, #8]
90006250:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
90006254:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
90006256:	689b      	ldr	r3, [r3, #8]
90006258:	08db      	lsrs	r3, r3, #3
9000625a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
9000625e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
90006260:	4b03      	ldr	r3, [pc, #12]	; (90006270 <HAL_RCC_GetClockConfig+0x38>)
90006262:	681b      	ldr	r3, [r3, #0]
90006264:	f003 030f 	and.w	r3, r3, #15
90006268:	600b      	str	r3, [r1, #0]
}
9000626a:	4770      	bx	lr
9000626c:	40023800 	.word	0x40023800
90006270:	40023c00 	.word	0x40023c00

90006274 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
90006274:	6803      	ldr	r3, [r0, #0]
{
90006276:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
9000627a:	f013 0601 	ands.w	r6, r3, #1
{
9000627e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
90006280:	d00b      	beq.n	9000629a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
90006282:	4aaa      	ldr	r2, [pc, #680]	; (9000652c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
90006284:	6891      	ldr	r1, [r2, #8]
90006286:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
9000628a:	6091      	str	r1, [r2, #8]
9000628c:	6b46      	ldr	r6, [r0, #52]	; 0x34
9000628e:	6891      	ldr	r1, [r2, #8]
90006290:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
90006292:	fab6 f686 	clz	r6, r6
90006296:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
90006298:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
9000629a:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
9000629e:	d012      	beq.n	900062c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
900062a0:	49a2      	ldr	r1, [pc, #648]	; (9000652c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
900062a2:	6be5      	ldr	r5, [r4, #60]	; 0x3c
900062a4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
900062a8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
900062ac:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
900062b0:	bf08      	it	eq
900062b2:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
900062b4:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
900062b8:	bf16      	itet	ne
900062ba:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
900062be:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
900062c0:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
900062c2:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
900062c6:	02df      	lsls	r7, r3, #11
900062c8:	d510      	bpl.n	900062ec <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
900062ca:	4898      	ldr	r0, [pc, #608]	; (9000652c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
900062cc:	6c21      	ldr	r1, [r4, #64]	; 0x40
900062ce:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
900062d2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
900062d6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
900062da:	ea42 0201 	orr.w	r2, r2, r1
900062de:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
900062e2:	f000 8184 	beq.w	900065ee <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
900062e6:	2900      	cmp	r1, #0
900062e8:	bf08      	it	eq
900062ea:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
900062ec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
900062f0:	bf18      	it	ne
900062f2:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
900062f4:	0698      	lsls	r0, r3, #26
900062f6:	d531      	bpl.n	9000635c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
900062f8:	4b8c      	ldr	r3, [pc, #560]	; (9000652c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
900062fa:	4f8d      	ldr	r7, [pc, #564]	; (90006530 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
900062fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
900062fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
90006302:	641a      	str	r2, [r3, #64]	; 0x40
90006304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
9000630a:	9301      	str	r3, [sp, #4]
9000630c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
9000630e:	683b      	ldr	r3, [r7, #0]
90006310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90006314:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90006316:	f7fd ff4b 	bl	900041b0 <HAL_GetTick>
9000631a:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
9000631c:	683b      	ldr	r3, [r7, #0]
9000631e:	05d9      	lsls	r1, r3, #23
90006320:	f140 8167 	bpl.w	900065f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
90006324:	4f81      	ldr	r7, [pc, #516]	; (9000652c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
90006326:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
90006328:	f413 7340 	ands.w	r3, r3, #768	; 0x300
9000632c:	f040 816c 	bne.w	90006608 <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90006330:	6b23      	ldr	r3, [r4, #48]	; 0x30
90006332:	f403 7240 	and.w	r2, r3, #768	; 0x300
90006336:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
9000633a:	4a7c      	ldr	r2, [pc, #496]	; (9000652c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
9000633c:	f040 818a 	bne.w	90006654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
90006340:	6891      	ldr	r1, [r2, #8]
90006342:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
90006346:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
9000634a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
9000634e:	4301      	orrs	r1, r0
90006350:	6091      	str	r1, [r2, #8]
90006352:	f3c3 030b 	ubfx	r3, r3, #0, #12
90006356:	6f11      	ldr	r1, [r2, #112]	; 0x70
90006358:	430b      	orrs	r3, r1
9000635a:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
9000635c:	6823      	ldr	r3, [r4, #0]
9000635e:	06d8      	lsls	r0, r3, #27
90006360:	d50c      	bpl.n	9000637c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90006362:	4a72      	ldr	r2, [pc, #456]	; (9000652c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
90006364:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
90006368:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
9000636c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
90006370:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
90006374:	6ba0      	ldr	r0, [r4, #56]	; 0x38
90006376:	4301      	orrs	r1, r0
90006378:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
9000637c:	0459      	lsls	r1, r3, #17
9000637e:	d508      	bpl.n	90006392 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
90006380:	496a      	ldr	r1, [pc, #424]	; (9000652c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
90006382:	6e60      	ldr	r0, [r4, #100]	; 0x64
90006384:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90006388:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
9000638c:	4302      	orrs	r2, r0
9000638e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
90006392:	041a      	lsls	r2, r3, #16
90006394:	d508      	bpl.n	900063a8 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
90006396:	4965      	ldr	r1, [pc, #404]	; (9000652c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
90006398:	6ea0      	ldr	r0, [r4, #104]	; 0x68
9000639a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
9000639e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
900063a2:	4302      	orrs	r2, r0
900063a4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
900063a8:	03df      	lsls	r7, r3, #15
900063aa:	d508      	bpl.n	900063be <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
900063ac:	495f      	ldr	r1, [pc, #380]	; (9000652c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
900063ae:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
900063b0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
900063b4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
900063b8:	4302      	orrs	r2, r0
900063ba:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
900063be:	0398      	lsls	r0, r3, #14
900063c0:	d508      	bpl.n	900063d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
900063c2:	495a      	ldr	r1, [pc, #360]	; (9000652c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
900063c4:	6f20      	ldr	r0, [r4, #112]	; 0x70
900063c6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
900063ca:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
900063ce:	4302      	orrs	r2, r0
900063d0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
900063d4:	0659      	lsls	r1, r3, #25
900063d6:	d508      	bpl.n	900063ea <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
900063d8:	4954      	ldr	r1, [pc, #336]	; (9000652c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
900063da:	6c60      	ldr	r0, [r4, #68]	; 0x44
900063dc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
900063e0:	f022 0203 	bic.w	r2, r2, #3
900063e4:	4302      	orrs	r2, r0
900063e6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
900063ea:	061a      	lsls	r2, r3, #24
900063ec:	d508      	bpl.n	90006400 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
900063ee:	494f      	ldr	r1, [pc, #316]	; (9000652c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
900063f0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
900063f2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
900063f6:	f022 020c 	bic.w	r2, r2, #12
900063fa:	4302      	orrs	r2, r0
900063fc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
90006400:	05df      	lsls	r7, r3, #23
90006402:	d508      	bpl.n	90006416 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
90006404:	4949      	ldr	r1, [pc, #292]	; (9000652c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
90006406:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
90006408:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
9000640c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
90006410:	4302      	orrs	r2, r0
90006412:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
90006416:	0598      	lsls	r0, r3, #22
90006418:	d508      	bpl.n	9000642c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
9000641a:	4944      	ldr	r1, [pc, #272]	; (9000652c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
9000641c:	6d20      	ldr	r0, [r4, #80]	; 0x50
9000641e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90006422:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
90006426:	4302      	orrs	r2, r0
90006428:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
9000642c:	0559      	lsls	r1, r3, #21
9000642e:	d508      	bpl.n	90006442 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
90006430:	493e      	ldr	r1, [pc, #248]	; (9000652c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
90006432:	6d60      	ldr	r0, [r4, #84]	; 0x54
90006434:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90006438:	f422 7240 	bic.w	r2, r2, #768	; 0x300
9000643c:	4302      	orrs	r2, r0
9000643e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
90006442:	051a      	lsls	r2, r3, #20
90006444:	d508      	bpl.n	90006458 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
90006446:	4939      	ldr	r1, [pc, #228]	; (9000652c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
90006448:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000644a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
9000644e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
90006452:	4302      	orrs	r2, r0
90006454:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
90006458:	04df      	lsls	r7, r3, #19
9000645a:	d508      	bpl.n	9000646e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
9000645c:	4933      	ldr	r1, [pc, #204]	; (9000652c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
9000645e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
90006460:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90006464:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
90006468:	4302      	orrs	r2, r0
9000646a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
9000646e:	0498      	lsls	r0, r3, #18
90006470:	d508      	bpl.n	90006484 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
90006472:	492e      	ldr	r1, [pc, #184]	; (9000652c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
90006474:	6e20      	ldr	r0, [r4, #96]	; 0x60
90006476:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
9000647a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
9000647e:	4302      	orrs	r2, r0
90006480:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
90006484:	0259      	lsls	r1, r3, #9
90006486:	d508      	bpl.n	9000649a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
90006488:	4928      	ldr	r1, [pc, #160]	; (9000652c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
9000648a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
9000648c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
90006490:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
90006494:	4302      	orrs	r2, r0
90006496:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
9000649a:	029a      	lsls	r2, r3, #10
9000649c:	d50c      	bpl.n	900064b8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
9000649e:	4823      	ldr	r0, [pc, #140]	; (9000652c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
900064a0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
900064a2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
900064a6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
900064aa:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
900064ae:	bf08      	it	eq
900064b0:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
900064b2:	430a      	orrs	r2, r1
900064b4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
900064b8:	f013 0f08 	tst.w	r3, #8
900064bc:	bf18      	it	ne
900064be:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
900064c0:	035f      	lsls	r7, r3, #13
900064c2:	d508      	bpl.n	900064d6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
900064c4:	4919      	ldr	r1, [pc, #100]	; (9000652c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
900064c6:	6f60      	ldr	r0, [r4, #116]	; 0x74
900064c8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
900064cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
900064d0:	4302      	orrs	r2, r0
900064d2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
900064d6:	0218      	lsls	r0, r3, #8
900064d8:	d509      	bpl.n	900064ee <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
900064da:	4914      	ldr	r1, [pc, #80]	; (9000652c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
900064dc:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
900064e0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
900064e4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
900064e8:	4302      	orrs	r2, r0
900064ea:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
900064ee:	2e01      	cmp	r6, #1
900064f0:	f000 80b4 	beq.w	9000665c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
900064f4:	0199      	lsls	r1, r3, #6
900064f6:	f100 80b1 	bmi.w	9000665c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
900064fa:	2d01      	cmp	r5, #1
900064fc:	d175      	bne.n	900065ea <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
900064fe:	4d0b      	ldr	r5, [pc, #44]	; (9000652c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
90006500:	682b      	ldr	r3, [r5, #0]
90006502:	462e      	mov	r6, r5
90006504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
90006508:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000650a:	f7fd fe51 	bl	900041b0 <HAL_GetTick>
9000650e:	4607      	mov	r7, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
90006510:	682b      	ldr	r3, [r5, #0]
90006512:	009b      	lsls	r3, r3, #2
90006514:	f100 8126 	bmi.w	90006764 <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
90006518:	6822      	ldr	r2, [r4, #0]
9000651a:	0315      	lsls	r5, r2, #12
9000651c:	d501      	bpl.n	90006522 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
9000651e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90006520:	b143      	cbz	r3, 90006534 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
90006522:	02d0      	lsls	r0, r2, #11
90006524:	d521      	bpl.n	9000656a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
90006526:	6c23      	ldr	r3, [r4, #64]	; 0x40
90006528:	b9fb      	cbnz	r3, 9000656a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
9000652a:	e003      	b.n	90006534 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
9000652c:	40023800 	.word	0x40023800
90006530:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
90006534:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
90006538:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
9000653c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90006540:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
90006544:	430b      	orrs	r3, r1
90006546:	6961      	ldr	r1, [r4, #20]
90006548:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
9000654c:	69a1      	ldr	r1, [r4, #24]
9000654e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
90006552:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
90006556:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
9000655a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
9000655c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
90006560:	3901      	subs	r1, #1
90006562:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
90006566:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
9000656a:	0291      	lsls	r1, r2, #10
9000656c:	d515      	bpl.n	9000659a <HAL_RCCEx_PeriphCLKConfig+0x326>
9000656e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
90006570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
90006574:	d111      	bne.n	9000659a <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
90006576:	4982      	ldr	r1, [pc, #520]	; (90006780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
90006578:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
9000657c:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
90006580:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
90006584:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
90006588:	4303      	orrs	r3, r0
9000658a:	6960      	ldr	r0, [r4, #20]
9000658c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
90006590:	6a20      	ldr	r0, [r4, #32]
90006592:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
90006596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
9000659a:	0712      	lsls	r2, r2, #28
9000659c:	d519      	bpl.n	900065d2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
9000659e:	4a78      	ldr	r2, [pc, #480]	; (90006780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
900065a0:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
900065a4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
900065a8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
900065ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
900065b0:	430b      	orrs	r3, r1
900065b2:	6961      	ldr	r1, [r4, #20]
900065b4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
900065b8:	69e1      	ldr	r1, [r4, #28]
900065ba:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
900065be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
900065c2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
900065c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
900065c8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
900065cc:	430b      	orrs	r3, r1
900065ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
900065d2:	4c6b      	ldr	r4, [pc, #428]	; (90006780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
900065d4:	6823      	ldr	r3, [r4, #0]
900065d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
900065da:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
900065dc:	f7fd fde8 	bl	900041b0 <HAL_GetTick>
900065e0:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
900065e2:	6823      	ldr	r3, [r4, #0]
900065e4:	009b      	lsls	r3, r3, #2
900065e6:	f140 80c4 	bpl.w	90006772 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
900065ea:	2000      	movs	r0, #0
900065ec:	e009      	b.n	90006602 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
900065ee:	2601      	movs	r6, #1
900065f0:	e67c      	b.n	900062ec <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
900065f2:	f7fd fddd 	bl	900041b0 <HAL_GetTick>
900065f6:	eba0 0008 	sub.w	r0, r0, r8
900065fa:	2864      	cmp	r0, #100	; 0x64
900065fc:	f67f ae8e 	bls.w	9000631c <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
90006600:	2003      	movs	r0, #3
}
90006602:	b003      	add	sp, #12
90006604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
90006608:	6b22      	ldr	r2, [r4, #48]	; 0x30
9000660a:	f402 7240 	and.w	r2, r2, #768	; 0x300
9000660e:	4293      	cmp	r3, r2
90006610:	f43f ae8e 	beq.w	90006330 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90006614:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
90006616:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90006618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
9000661c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
90006620:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
90006622:	6f3a      	ldr	r2, [r7, #112]	; 0x70
90006624:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
90006628:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
9000662a:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
9000662c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
9000662e:	07da      	lsls	r2, r3, #31
90006630:	f57f ae7e 	bpl.w	90006330 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
90006634:	f7fd fdbc 	bl	900041b0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90006638:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
9000663c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
9000663e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
90006640:	079b      	lsls	r3, r3, #30
90006642:	f53f ae75 	bmi.w	90006330 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90006646:	f7fd fdb3 	bl	900041b0 <HAL_GetTick>
9000664a:	eba0 0008 	sub.w	r0, r0, r8
9000664e:	4548      	cmp	r0, r9
90006650:	d9f5      	bls.n	9000663e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
90006652:	e7d5      	b.n	90006600 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90006654:	6891      	ldr	r1, [r2, #8]
90006656:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
9000665a:	e679      	b.n	90006350 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
9000665c:	4e48      	ldr	r6, [pc, #288]	; (90006780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
9000665e:	6833      	ldr	r3, [r6, #0]
90006660:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
90006664:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
90006666:	f7fd fda3 	bl	900041b0 <HAL_GetTick>
9000666a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
9000666c:	6833      	ldr	r3, [r6, #0]
9000666e:	011a      	lsls	r2, r3, #4
90006670:	d472      	bmi.n	90006758 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
90006672:	6822      	ldr	r2, [r4, #0]
90006674:	07d3      	lsls	r3, r2, #31
90006676:	d512      	bpl.n	9000669e <HAL_RCCEx_PeriphCLKConfig+0x42a>
90006678:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000667a:	b983      	cbnz	r3, 9000669e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
9000667c:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
90006680:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
90006684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
90006688:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
9000668c:	430b      	orrs	r3, r1
9000668e:	6861      	ldr	r1, [r4, #4]
90006690:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
90006694:	68a1      	ldr	r1, [r4, #8]
90006696:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
9000669a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
9000669e:	0317      	lsls	r7, r2, #12
900066a0:	d503      	bpl.n	900066aa <HAL_RCCEx_PeriphCLKConfig+0x436>
900066a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
900066a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
900066a8:	d005      	beq.n	900066b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
900066aa:	02d6      	lsls	r6, r2, #11
900066ac:	d51e      	bpl.n	900066ec <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
900066ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
900066b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
900066b4:	d11a      	bne.n	900066ec <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
900066b6:	4932      	ldr	r1, [pc, #200]	; (90006780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
900066b8:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
900066bc:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
900066c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
900066c4:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
900066c8:	4303      	orrs	r3, r0
900066ca:	6860      	ldr	r0, [r4, #4]
900066cc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
900066d0:	68e0      	ldr	r0, [r4, #12]
900066d2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
900066d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
900066da:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
900066de:	6a63      	ldr	r3, [r4, #36]	; 0x24
900066e0:	f020 001f 	bic.w	r0, r0, #31
900066e4:	3b01      	subs	r3, #1
900066e6:	4303      	orrs	r3, r0
900066e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
900066ec:	01d0      	lsls	r0, r2, #7
900066ee:	d511      	bpl.n	90006714 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
900066f0:	4923      	ldr	r1, [pc, #140]	; (90006780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
900066f2:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
900066f6:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
900066fa:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
900066fe:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
90006702:	4303      	orrs	r3, r0
90006704:	6860      	ldr	r0, [r4, #4]
90006706:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
9000670a:	6920      	ldr	r0, [r4, #16]
9000670c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
90006710:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
90006714:	0191      	lsls	r1, r2, #6
90006716:	d50d      	bpl.n	90006734 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
90006718:	6923      	ldr	r3, [r4, #16]
9000671a:	6862      	ldr	r2, [r4, #4]
9000671c:	041b      	lsls	r3, r3, #16
9000671e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
90006722:	68e2      	ldr	r2, [r4, #12]
90006724:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
90006728:	68a2      	ldr	r2, [r4, #8]
9000672a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
9000672e:	4a14      	ldr	r2, [pc, #80]	; (90006780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
90006730:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
90006734:	4e12      	ldr	r6, [pc, #72]	; (90006780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
90006736:	6833      	ldr	r3, [r6, #0]
90006738:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
9000673c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
9000673e:	f7fd fd37 	bl	900041b0 <HAL_GetTick>
90006742:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
90006744:	6833      	ldr	r3, [r6, #0]
90006746:	011a      	lsls	r2, r3, #4
90006748:	f53f aed7 	bmi.w	900064fa <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
9000674c:	f7fd fd30 	bl	900041b0 <HAL_GetTick>
90006750:	1bc0      	subs	r0, r0, r7
90006752:	2864      	cmp	r0, #100	; 0x64
90006754:	d9f6      	bls.n	90006744 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
90006756:	e753      	b.n	90006600 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
90006758:	f7fd fd2a 	bl	900041b0 <HAL_GetTick>
9000675c:	1bc0      	subs	r0, r0, r7
9000675e:	2864      	cmp	r0, #100	; 0x64
90006760:	d984      	bls.n	9000666c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
90006762:	e74d      	b.n	90006600 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
90006764:	f7fd fd24 	bl	900041b0 <HAL_GetTick>
90006768:	1bc0      	subs	r0, r0, r7
9000676a:	2864      	cmp	r0, #100	; 0x64
9000676c:	f67f aed0 	bls.w	90006510 <HAL_RCCEx_PeriphCLKConfig+0x29c>
90006770:	e746      	b.n	90006600 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
90006772:	f7fd fd1d 	bl	900041b0 <HAL_GetTick>
90006776:	1b40      	subs	r0, r0, r5
90006778:	2864      	cmp	r0, #100	; 0x64
9000677a:	f67f af32 	bls.w	900065e2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
9000677e:	e73f      	b.n	90006600 <HAL_RCCEx_PeriphCLKConfig+0x38c>
90006780:	40023800 	.word	0x40023800

90006784 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
90006784:	b538      	push	{r3, r4, r5, lr}
90006786:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
90006788:	4604      	mov	r4, r0
9000678a:	b1c8      	cbz	r0, 900067c0 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
9000678c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90006790:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90006794:	b91b      	cbnz	r3, 9000679e <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
90006796:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
9000679a:	f7fb fe43 	bl	90002424 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000679e:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
900067a0:	1d21      	adds	r1, r4, #4
900067a2:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900067a4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
900067a8:	f000 fcec 	bl	90007184 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
900067ac:	6862      	ldr	r2, [r4, #4]
900067ae:	4629      	mov	r1, r5
900067b0:	6820      	ldr	r0, [r4, #0]
900067b2:	f000 fd1d 	bl	900071f0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
900067b6:	2301      	movs	r3, #1
  
  return HAL_OK;
900067b8:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
900067ba:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
900067be:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
900067c0:	2001      	movs	r0, #1
900067c2:	e7fc      	b.n	900067be <HAL_SDRAM_Init+0x3a>

900067c4 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
900067c4:	b510      	push	{r4, lr}
900067c6:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
900067c8:	f7fb fe94 	bl	900024f4 <HAL_SDRAM_MspDeInit>
#endif

  /* Configure the SDRAM registers with their reset values */
  FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
900067cc:	e9d4 0100 	ldrd	r0, r1, [r4]
900067d0:	f000 fd51 	bl	90007276 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
900067d4:	2000      	movs	r0, #0
900067d6:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
900067da:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

  return HAL_OK;
}
900067de:	bd10      	pop	{r4, pc}

900067e0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
900067e0:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
900067e2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
900067e6:	4604      	mov	r4, r0
900067e8:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
900067ea:	2b02      	cmp	r3, #2
900067ec:	b2d8      	uxtb	r0, r3
900067ee:	d00d      	beq.n	9000680c <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900067f0:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
900067f2:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
900067f4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
900067f8:	f000 fd4c 	bl	90007294 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
900067fc:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
900067fe:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
90006800:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
90006802:	bf0c      	ite	eq
90006804:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
90006806:	2301      	movne	r3, #1
90006808:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
9000680c:	bd38      	pop	{r3, r4, r5, pc}

9000680e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000680e:	b510      	push	{r4, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90006810:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
90006814:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
90006816:	2b02      	cmp	r3, #2
90006818:	b2d8      	uxtb	r0, r3
9000681a:	d009      	beq.n	90006830 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000681c:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
9000681e:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
90006820:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
90006824:	f000 fd48 	bl	900072b8 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
90006828:	2301      	movs	r3, #1
  
  return HAL_OK;   
9000682a:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
9000682c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
90006830:	bd10      	pop	{r4, pc}
	...

90006834 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
90006834:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
90006838:	2b01      	cmp	r3, #1
9000683a:	d133      	bne.n	900068a4 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
9000683c:	2302      	movs	r3, #2
9000683e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
90006842:	6803      	ldr	r3, [r0, #0]
90006844:	68da      	ldr	r2, [r3, #12]
90006846:	f042 0201 	orr.w	r2, r2, #1
9000684a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000684c:	4a16      	ldr	r2, [pc, #88]	; (900068a8 <HAL_TIM_Base_Start_IT+0x74>)
9000684e:	4293      	cmp	r3, r2
90006850:	d01a      	beq.n	90006888 <HAL_TIM_Base_Start_IT+0x54>
90006852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90006856:	d017      	beq.n	90006888 <HAL_TIM_Base_Start_IT+0x54>
90006858:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
9000685c:	4293      	cmp	r3, r2
9000685e:	d013      	beq.n	90006888 <HAL_TIM_Base_Start_IT+0x54>
90006860:	f502 6280 	add.w	r2, r2, #1024	; 0x400
90006864:	4293      	cmp	r3, r2
90006866:	d00f      	beq.n	90006888 <HAL_TIM_Base_Start_IT+0x54>
90006868:	f502 6280 	add.w	r2, r2, #1024	; 0x400
9000686c:	4293      	cmp	r3, r2
9000686e:	d00b      	beq.n	90006888 <HAL_TIM_Base_Start_IT+0x54>
90006870:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
90006874:	4293      	cmp	r3, r2
90006876:	d007      	beq.n	90006888 <HAL_TIM_Base_Start_IT+0x54>
90006878:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
9000687c:	4293      	cmp	r3, r2
9000687e:	d003      	beq.n	90006888 <HAL_TIM_Base_Start_IT+0x54>
90006880:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
90006884:	4293      	cmp	r3, r2
90006886:	d107      	bne.n	90006898 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
90006888:	6899      	ldr	r1, [r3, #8]
9000688a:	4a08      	ldr	r2, [pc, #32]	; (900068ac <HAL_TIM_Base_Start_IT+0x78>)
9000688c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
9000688e:	2a06      	cmp	r2, #6
90006890:	d006      	beq.n	900068a0 <HAL_TIM_Base_Start_IT+0x6c>
90006892:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
90006896:	d003      	beq.n	900068a0 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
90006898:	681a      	ldr	r2, [r3, #0]
9000689a:	f042 0201 	orr.w	r2, r2, #1
9000689e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
900068a0:	2000      	movs	r0, #0
}
900068a2:	4770      	bx	lr
    return HAL_ERROR;
900068a4:	2001      	movs	r0, #1
900068a6:	4770      	bx	lr
900068a8:	40010000 	.word	0x40010000
900068ac:	00010007 	.word	0x00010007

900068b0 <HAL_TIM_OC_DelayElapsedCallback>:
900068b0:	4770      	bx	lr

900068b2 <HAL_TIM_IC_CaptureCallback>:
900068b2:	4770      	bx	lr

900068b4 <HAL_TIM_PWM_PulseFinishedCallback>:
900068b4:	4770      	bx	lr

900068b6 <HAL_TIM_TriggerCallback>:
900068b6:	4770      	bx	lr

900068b8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
900068b8:	6803      	ldr	r3, [r0, #0]
900068ba:	691a      	ldr	r2, [r3, #16]
900068bc:	0791      	lsls	r1, r2, #30
{
900068be:	b510      	push	{r4, lr}
900068c0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
900068c2:	d50f      	bpl.n	900068e4 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
900068c4:	68da      	ldr	r2, [r3, #12]
900068c6:	0792      	lsls	r2, r2, #30
900068c8:	d50c      	bpl.n	900068e4 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
900068ca:	f06f 0202 	mvn.w	r2, #2
900068ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
900068d0:	2201      	movs	r2, #1
900068d2:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
900068d4:	699b      	ldr	r3, [r3, #24]
900068d6:	0799      	lsls	r1, r3, #30
900068d8:	f000 8085 	beq.w	900069e6 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
900068dc:	f7ff ffe9 	bl	900068b2 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
900068e0:	2300      	movs	r3, #0
900068e2:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
900068e4:	6823      	ldr	r3, [r4, #0]
900068e6:	691a      	ldr	r2, [r3, #16]
900068e8:	0752      	lsls	r2, r2, #29
900068ea:	d510      	bpl.n	9000690e <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
900068ec:	68da      	ldr	r2, [r3, #12]
900068ee:	0750      	lsls	r0, r2, #29
900068f0:	d50d      	bpl.n	9000690e <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
900068f2:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
900068f6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
900068f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
900068fa:	2202      	movs	r2, #2
900068fc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
900068fe:	699b      	ldr	r3, [r3, #24]
90006900:	f413 7f40 	tst.w	r3, #768	; 0x300
90006904:	d075      	beq.n	900069f2 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
90006906:	f7ff ffd4 	bl	900068b2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000690a:	2300      	movs	r3, #0
9000690c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000690e:	6823      	ldr	r3, [r4, #0]
90006910:	691a      	ldr	r2, [r3, #16]
90006912:	0711      	lsls	r1, r2, #28
90006914:	d50f      	bpl.n	90006936 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
90006916:	68da      	ldr	r2, [r3, #12]
90006918:	0712      	lsls	r2, r2, #28
9000691a:	d50c      	bpl.n	90006936 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000691c:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
90006920:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
90006922:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
90006924:	2204      	movs	r2, #4
90006926:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
90006928:	69db      	ldr	r3, [r3, #28]
9000692a:	079b      	lsls	r3, r3, #30
9000692c:	d067      	beq.n	900069fe <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
9000692e:	f7ff ffc0 	bl	900068b2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
90006932:	2300      	movs	r3, #0
90006934:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
90006936:	6823      	ldr	r3, [r4, #0]
90006938:	691a      	ldr	r2, [r3, #16]
9000693a:	06d0      	lsls	r0, r2, #27
9000693c:	d510      	bpl.n	90006960 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
9000693e:	68da      	ldr	r2, [r3, #12]
90006940:	06d1      	lsls	r1, r2, #27
90006942:	d50d      	bpl.n	90006960 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
90006944:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
90006948:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000694a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000694c:	2208      	movs	r2, #8
9000694e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
90006950:	69db      	ldr	r3, [r3, #28]
90006952:	f413 7f40 	tst.w	r3, #768	; 0x300
90006956:	d058      	beq.n	90006a0a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
90006958:	f7ff ffab 	bl	900068b2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000695c:	2300      	movs	r3, #0
9000695e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
90006960:	6823      	ldr	r3, [r4, #0]
90006962:	691a      	ldr	r2, [r3, #16]
90006964:	07d2      	lsls	r2, r2, #31
90006966:	d508      	bpl.n	9000697a <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
90006968:	68da      	ldr	r2, [r3, #12]
9000696a:	07d0      	lsls	r0, r2, #31
9000696c:	d505      	bpl.n	9000697a <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000696e:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
90006972:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
90006974:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
90006976:	f7fb fbe1 	bl	9000213c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000697a:	6823      	ldr	r3, [r4, #0]
9000697c:	691a      	ldr	r2, [r3, #16]
9000697e:	0611      	lsls	r1, r2, #24
90006980:	d508      	bpl.n	90006994 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
90006982:	68da      	ldr	r2, [r3, #12]
90006984:	0612      	lsls	r2, r2, #24
90006986:	d505      	bpl.n	90006994 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
90006988:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
9000698c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000698e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
90006990:	f000 f9c1 	bl	90006d16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
90006994:	6823      	ldr	r3, [r4, #0]
90006996:	691a      	ldr	r2, [r3, #16]
90006998:	05d0      	lsls	r0, r2, #23
9000699a:	d508      	bpl.n	900069ae <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000699c:	68da      	ldr	r2, [r3, #12]
9000699e:	0611      	lsls	r1, r2, #24
900069a0:	d505      	bpl.n	900069ae <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
900069a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
900069a6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
900069a8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
900069aa:	f000 f9b5 	bl	90006d18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
900069ae:	6823      	ldr	r3, [r4, #0]
900069b0:	691a      	ldr	r2, [r3, #16]
900069b2:	0652      	lsls	r2, r2, #25
900069b4:	d508      	bpl.n	900069c8 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
900069b6:	68da      	ldr	r2, [r3, #12]
900069b8:	0650      	lsls	r0, r2, #25
900069ba:	d505      	bpl.n	900069c8 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
900069bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
900069c0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
900069c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
900069c4:	f7ff ff77 	bl	900068b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
900069c8:	6823      	ldr	r3, [r4, #0]
900069ca:	691a      	ldr	r2, [r3, #16]
900069cc:	0691      	lsls	r1, r2, #26
900069ce:	d522      	bpl.n	90006a16 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
900069d0:	68da      	ldr	r2, [r3, #12]
900069d2:	0692      	lsls	r2, r2, #26
900069d4:	d51f      	bpl.n	90006a16 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
900069d6:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
900069da:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
900069dc:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
900069de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
900069e2:	f000 b997 	b.w	90006d14 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
900069e6:	f7ff ff63 	bl	900068b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
900069ea:	4620      	mov	r0, r4
900069ec:	f7ff ff62 	bl	900068b4 <HAL_TIM_PWM_PulseFinishedCallback>
900069f0:	e776      	b.n	900068e0 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
900069f2:	f7ff ff5d 	bl	900068b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
900069f6:	4620      	mov	r0, r4
900069f8:	f7ff ff5c 	bl	900068b4 <HAL_TIM_PWM_PulseFinishedCallback>
900069fc:	e785      	b.n	9000690a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
900069fe:	f7ff ff57 	bl	900068b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
90006a02:	4620      	mov	r0, r4
90006a04:	f7ff ff56 	bl	900068b4 <HAL_TIM_PWM_PulseFinishedCallback>
90006a08:	e793      	b.n	90006932 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
90006a0a:	f7ff ff51 	bl	900068b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
90006a0e:	4620      	mov	r0, r4
90006a10:	f7ff ff50 	bl	900068b4 <HAL_TIM_PWM_PulseFinishedCallback>
90006a14:	e7a2      	b.n	9000695c <HAL_TIM_IRQHandler+0xa4>
}
90006a16:	bd10      	pop	{r4, pc}

90006a18 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
90006a18:	4a30      	ldr	r2, [pc, #192]	; (90006adc <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
90006a1a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
90006a1c:	4290      	cmp	r0, r2
90006a1e:	d012      	beq.n	90006a46 <TIM_Base_SetConfig+0x2e>
90006a20:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
90006a24:	d00f      	beq.n	90006a46 <TIM_Base_SetConfig+0x2e>
90006a26:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
90006a2a:	4290      	cmp	r0, r2
90006a2c:	d00b      	beq.n	90006a46 <TIM_Base_SetConfig+0x2e>
90006a2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
90006a32:	4290      	cmp	r0, r2
90006a34:	d007      	beq.n	90006a46 <TIM_Base_SetConfig+0x2e>
90006a36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
90006a3a:	4290      	cmp	r0, r2
90006a3c:	d003      	beq.n	90006a46 <TIM_Base_SetConfig+0x2e>
90006a3e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
90006a42:	4290      	cmp	r0, r2
90006a44:	d119      	bne.n	90006a7a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
90006a46:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
90006a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
90006a4c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
90006a4e:	4a23      	ldr	r2, [pc, #140]	; (90006adc <TIM_Base_SetConfig+0xc4>)
90006a50:	4290      	cmp	r0, r2
90006a52:	d029      	beq.n	90006aa8 <TIM_Base_SetConfig+0x90>
90006a54:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
90006a58:	d026      	beq.n	90006aa8 <TIM_Base_SetConfig+0x90>
90006a5a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
90006a5e:	4290      	cmp	r0, r2
90006a60:	d022      	beq.n	90006aa8 <TIM_Base_SetConfig+0x90>
90006a62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
90006a66:	4290      	cmp	r0, r2
90006a68:	d01e      	beq.n	90006aa8 <TIM_Base_SetConfig+0x90>
90006a6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
90006a6e:	4290      	cmp	r0, r2
90006a70:	d01a      	beq.n	90006aa8 <TIM_Base_SetConfig+0x90>
90006a72:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
90006a76:	4290      	cmp	r0, r2
90006a78:	d016      	beq.n	90006aa8 <TIM_Base_SetConfig+0x90>
90006a7a:	4a19      	ldr	r2, [pc, #100]	; (90006ae0 <TIM_Base_SetConfig+0xc8>)
90006a7c:	4290      	cmp	r0, r2
90006a7e:	d013      	beq.n	90006aa8 <TIM_Base_SetConfig+0x90>
90006a80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
90006a84:	4290      	cmp	r0, r2
90006a86:	d00f      	beq.n	90006aa8 <TIM_Base_SetConfig+0x90>
90006a88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
90006a8c:	4290      	cmp	r0, r2
90006a8e:	d00b      	beq.n	90006aa8 <TIM_Base_SetConfig+0x90>
90006a90:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
90006a94:	4290      	cmp	r0, r2
90006a96:	d007      	beq.n	90006aa8 <TIM_Base_SetConfig+0x90>
90006a98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
90006a9c:	4290      	cmp	r0, r2
90006a9e:	d003      	beq.n	90006aa8 <TIM_Base_SetConfig+0x90>
90006aa0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
90006aa4:	4290      	cmp	r0, r2
90006aa6:	d103      	bne.n	90006ab0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
90006aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
90006aac:	68ca      	ldr	r2, [r1, #12]
90006aae:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
90006ab0:	694a      	ldr	r2, [r1, #20]
90006ab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90006ab6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
90006ab8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
90006aba:	688b      	ldr	r3, [r1, #8]
90006abc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
90006abe:	680b      	ldr	r3, [r1, #0]
90006ac0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
90006ac2:	4b06      	ldr	r3, [pc, #24]	; (90006adc <TIM_Base_SetConfig+0xc4>)
90006ac4:	4298      	cmp	r0, r3
90006ac6:	d003      	beq.n	90006ad0 <TIM_Base_SetConfig+0xb8>
90006ac8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
90006acc:	4298      	cmp	r0, r3
90006ace:	d101      	bne.n	90006ad4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
90006ad0:	690b      	ldr	r3, [r1, #16]
90006ad2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
90006ad4:	2301      	movs	r3, #1
90006ad6:	6143      	str	r3, [r0, #20]
}
90006ad8:	4770      	bx	lr
90006ada:	bf00      	nop
90006adc:	40010000 	.word	0x40010000
90006ae0:	40014000 	.word	0x40014000

90006ae4 <HAL_TIM_Base_Init>:
{
90006ae4:	b510      	push	{r4, lr}
  if (htim == NULL)
90006ae6:	4604      	mov	r4, r0
90006ae8:	b350      	cbz	r0, 90006b40 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
90006aea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
90006aee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90006af2:	b91b      	cbnz	r3, 90006afc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
90006af4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
90006af8:	f7fb fc12 	bl	90002320 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
90006afc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
90006afe:	6820      	ldr	r0, [r4, #0]
90006b00:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
90006b02:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
90006b06:	f7ff ff87 	bl	90006a18 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
90006b0a:	2301      	movs	r3, #1
  return HAL_OK;
90006b0c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
90006b0e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90006b12:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
90006b16:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
90006b1a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90006b1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
90006b22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
90006b26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90006b2a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
90006b2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
90006b32:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
90006b36:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
90006b3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
90006b3e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
90006b40:	2001      	movs	r0, #1
90006b42:	e7fc      	b.n	90006b3e <HAL_TIM_Base_Init+0x5a>

90006b44 <TIM_ETR_SetConfig>:

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
90006b44:	4311      	orrs	r1, r2
{
90006b46:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
90006b48:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
90006b4a:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
90006b4e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
90006b52:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
90006b54:	6083      	str	r3, [r0, #8]
}
90006b56:	bd10      	pop	{r4, pc}

90006b58 <HAL_TIM_ConfigClockSource>:
{
90006b58:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
90006b5a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
90006b5e:	4604      	mov	r4, r0
90006b60:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
90006b62:	2b01      	cmp	r3, #1
90006b64:	d025      	beq.n	90006bb2 <HAL_TIM_ConfigClockSource+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
90006b66:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
90006b6a:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
90006b6c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
90006b6e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
90006b72:	4b42      	ldr	r3, [pc, #264]	; (90006c7c <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = htim->Instance->SMCR;
90006b74:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
90006b76:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
90006b78:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
90006b7a:	680b      	ldr	r3, [r1, #0]
90006b7c:	2b60      	cmp	r3, #96	; 0x60
90006b7e:	d04d      	beq.n	90006c1c <HAL_TIM_ConfigClockSource+0xc4>
90006b80:	d832      	bhi.n	90006be8 <HAL_TIM_ConfigClockSource+0x90>
90006b82:	2b40      	cmp	r3, #64	; 0x40
90006b84:	d062      	beq.n	90006c4c <HAL_TIM_ConfigClockSource+0xf4>
90006b86:	d815      	bhi.n	90006bb4 <HAL_TIM_ConfigClockSource+0x5c>
90006b88:	2b20      	cmp	r3, #32
90006b8a:	d003      	beq.n	90006b94 <HAL_TIM_ConfigClockSource+0x3c>
90006b8c:	d809      	bhi.n	90006ba2 <HAL_TIM_ConfigClockSource+0x4a>
90006b8e:	f033 0210 	bics.w	r2, r3, #16
90006b92:	d108      	bne.n	90006ba6 <HAL_TIM_ConfigClockSource+0x4e>
  tmpsmcr = TIMx->SMCR;
90006b94:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
90006b96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
90006b9a:	4313      	orrs	r3, r2
90006b9c:	f043 0307 	orr.w	r3, r3, #7
90006ba0:	e020      	b.n	90006be4 <HAL_TIM_ConfigClockSource+0x8c>
  switch (sClockSourceConfig->ClockSource)
90006ba2:	2b30      	cmp	r3, #48	; 0x30
90006ba4:	d0f6      	beq.n	90006b94 <HAL_TIM_ConfigClockSource+0x3c>
  htim->State = HAL_TIM_STATE_READY;
90006ba6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
90006ba8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
90006baa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
90006bae:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
90006bb2:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
90006bb4:	2b50      	cmp	r3, #80	; 0x50
90006bb6:	d1f6      	bne.n	90006ba6 <HAL_TIM_ConfigClockSource+0x4e>
      TIM_TI1_ConfigInputStage(htim->Instance,
90006bb8:	684a      	ldr	r2, [r1, #4]
90006bba:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
90006bbc:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
90006bbe:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
90006bc0:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
90006bc4:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
90006bc8:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
90006bca:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
90006bcc:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
90006bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
90006bd2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
90006bd6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
90006bd8:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
90006bda:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
90006bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
90006be0:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
90006be4:	6083      	str	r3, [r0, #8]
}
90006be6:	e7de      	b.n	90006ba6 <HAL_TIM_ConfigClockSource+0x4e>
  switch (sClockSourceConfig->ClockSource)
90006be8:	2b70      	cmp	r3, #112	; 0x70
90006bea:	d00c      	beq.n	90006c06 <HAL_TIM_ConfigClockSource+0xae>
90006bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90006bf0:	d1d9      	bne.n	90006ba6 <HAL_TIM_ConfigClockSource+0x4e>
      TIM_ETR_SetConfig(htim->Instance,
90006bf2:	68cb      	ldr	r3, [r1, #12]
90006bf4:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
90006bf8:	f7ff ffa4 	bl	90006b44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
90006bfc:	6822      	ldr	r2, [r4, #0]
90006bfe:	6893      	ldr	r3, [r2, #8]
90006c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
90006c04:	e008      	b.n	90006c18 <HAL_TIM_ConfigClockSource+0xc0>
      TIM_ETR_SetConfig(htim->Instance,
90006c06:	68cb      	ldr	r3, [r1, #12]
90006c08:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
90006c0c:	f7ff ff9a 	bl	90006b44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
90006c10:	6822      	ldr	r2, [r4, #0]
90006c12:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
90006c14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
90006c18:	6093      	str	r3, [r2, #8]
      break;
90006c1a:	e7c4      	b.n	90006ba6 <HAL_TIM_ConfigClockSource+0x4e>
      TIM_TI2_ConfigInputStage(htim->Instance,
90006c1c:	684d      	ldr	r5, [r1, #4]
90006c1e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
90006c20:	6a01      	ldr	r1, [r0, #32]
90006c22:	f021 0110 	bic.w	r1, r1, #16
90006c26:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
90006c28:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
90006c2a:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
90006c2c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
90006c30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
90006c34:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
90006c38:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
90006c3c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
90006c3e:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
90006c40:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
90006c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
90006c46:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
90006c4a:	e7cb      	b.n	90006be4 <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI1_ConfigInputStage(htim->Instance,
90006c4c:	684a      	ldr	r2, [r1, #4]
90006c4e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
90006c50:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
90006c52:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
90006c54:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
90006c58:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
90006c5c:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
90006c5e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
90006c60:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
90006c62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
90006c66:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
90006c6a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
90006c6c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
90006c6e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
90006c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
90006c74:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
90006c78:	e7b4      	b.n	90006be4 <HAL_TIM_ConfigClockSource+0x8c>
90006c7a:	bf00      	nop
90006c7c:	fffe0088 	.word	0xfffe0088

90006c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
90006c80:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
90006c82:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
90006c86:	2b01      	cmp	r3, #1
90006c88:	f04f 0302 	mov.w	r3, #2
90006c8c:	d03d      	beq.n	90006d0a <HAL_TIMEx_MasterConfigSynchronization+0x8a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
90006c8e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
90006c92:	4d1f      	ldr	r5, [pc, #124]	; (90006d10 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
  tmpcr2 = htim->Instance->CR2;
90006c94:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
90006c96:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
90006c98:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
90006c9a:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
90006c9c:	d003      	beq.n	90006ca6 <HAL_TIMEx_MasterConfigSynchronization+0x26>
90006c9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
90006ca2:	42ab      	cmp	r3, r5
90006ca4:	d103      	bne.n	90006cae <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
90006ca6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
90006caa:	684d      	ldr	r5, [r1, #4]
90006cac:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
90006cae:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
90006cb0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
90006cb4:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
90006cb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
90006cb8:	4a15      	ldr	r2, [pc, #84]	; (90006d10 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
90006cba:	4293      	cmp	r3, r2
90006cbc:	d01a      	beq.n	90006cf4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
90006cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90006cc2:	d017      	beq.n	90006cf4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
90006cc4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
90006cc8:	4293      	cmp	r3, r2
90006cca:	d013      	beq.n	90006cf4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
90006ccc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
90006cd0:	4293      	cmp	r3, r2
90006cd2:	d00f      	beq.n	90006cf4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
90006cd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
90006cd8:	4293      	cmp	r3, r2
90006cda:	d00b      	beq.n	90006cf4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
90006cdc:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
90006ce0:	4293      	cmp	r3, r2
90006ce2:	d007      	beq.n	90006cf4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
90006ce4:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
90006ce8:	4293      	cmp	r3, r2
90006cea:	d003      	beq.n	90006cf4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
90006cec:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
90006cf0:	4293      	cmp	r3, r2
90006cf2:	d104      	bne.n	90006cfe <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
90006cf4:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
90006cf6:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
90006cfa:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
90006cfc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
90006cfe:	2301      	movs	r3, #1
90006d00:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
90006d04:	2300      	movs	r3, #0
90006d06:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
90006d0a:	4618      	mov	r0, r3

  return HAL_OK;
}
90006d0c:	bd30      	pop	{r4, r5, pc}
90006d0e:	bf00      	nop
90006d10:	40010000 	.word	0x40010000

90006d14 <HAL_TIMEx_CommutCallback>:
90006d14:	4770      	bx	lr

90006d16 <HAL_TIMEx_BreakCallback>:
90006d16:	4770      	bx	lr

90006d18 <HAL_TIMEx_Break2Callback>:
90006d18:	4770      	bx	lr
	...

90006d1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
90006d1c:	b538      	push	{r3, r4, r5, lr}
90006d1e:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
90006d20:	69c0      	ldr	r0, [r0, #28]
90006d22:	6921      	ldr	r1, [r4, #16]
90006d24:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
90006d26:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
90006d28:	430a      	orrs	r2, r1
90006d2a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
90006d2c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
90006d2e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
90006d30:	4991      	ldr	r1, [pc, #580]	; (90006f78 <UART_SetConfig+0x25c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
90006d32:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
90006d34:	4029      	ands	r1, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
90006d36:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
90006d38:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
90006d3a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
90006d3c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
90006d3e:	685a      	ldr	r2, [r3, #4]
90006d40:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
90006d44:	430a      	orrs	r2, r1
90006d46:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
90006d48:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
90006d4a:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
90006d4c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
90006d4e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
90006d52:	430a      	orrs	r2, r1
90006d54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
90006d56:	4a89      	ldr	r2, [pc, #548]	; (90006f7c <UART_SetConfig+0x260>)
90006d58:	4293      	cmp	r3, r2
90006d5a:	d11b      	bne.n	90006d94 <UART_SetConfig+0x78>
90006d5c:	4b88      	ldr	r3, [pc, #544]	; (90006f80 <UART_SetConfig+0x264>)
90006d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90006d62:	f003 0303 	and.w	r3, r3, #3
90006d66:	3b01      	subs	r3, #1
90006d68:	2b02      	cmp	r3, #2
90006d6a:	f200 80f3 	bhi.w	90006f54 <UART_SetConfig+0x238>
90006d6e:	4a85      	ldr	r2, [pc, #532]	; (90006f84 <UART_SetConfig+0x268>)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
90006d70:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
90006d74:	5cd3      	ldrb	r3, [r2, r3]
90006d76:	f040 80b0 	bne.w	90006eda <UART_SetConfig+0x1be>
  {
    switch (clocksource)
90006d7a:	2b08      	cmp	r3, #8
90006d7c:	d826      	bhi.n	90006dcc <UART_SetConfig+0xb0>
90006d7e:	e8df f013 	tbh	[pc, r3, lsl #1]
90006d82:	00f2      	.short	0x00f2
90006d84:	009500ec 	.word	0x009500ec
90006d88:	00e60025 	.word	0x00e60025
90006d8c:	00250025 	.word	0x00250025
90006d90:	00960025 	.word	0x00960025
  UART_GETCLOCKSOURCE(huart, clocksource);
90006d94:	4a7c      	ldr	r2, [pc, #496]	; (90006f88 <UART_SetConfig+0x26c>)
90006d96:	4293      	cmp	r3, r2
90006d98:	d106      	bne.n	90006da8 <UART_SetConfig+0x8c>
90006d9a:	4b79      	ldr	r3, [pc, #484]	; (90006f80 <UART_SetConfig+0x264>)
90006d9c:	4a7b      	ldr	r2, [pc, #492]	; (90006f8c <UART_SetConfig+0x270>)
90006d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90006da2:	f003 030c 	and.w	r3, r3, #12
90006da6:	e7e3      	b.n	90006d70 <UART_SetConfig+0x54>
90006da8:	4a79      	ldr	r2, [pc, #484]	; (90006f90 <UART_SetConfig+0x274>)
90006daa:	4293      	cmp	r3, r2
90006dac:	d118      	bne.n	90006de0 <UART_SetConfig+0xc4>
90006dae:	4b74      	ldr	r3, [pc, #464]	; (90006f80 <UART_SetConfig+0x264>)
90006db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90006db4:	f003 0330 	and.w	r3, r3, #48	; 0x30
90006db8:	2b20      	cmp	r3, #32
90006dba:	f000 80c0 	beq.w	90006f3e <UART_SetConfig+0x222>
90006dbe:	d807      	bhi.n	90006dd0 <UART_SetConfig+0xb4>
90006dc0:	2b00      	cmp	r3, #0
90006dc2:	f000 80cd 	beq.w	90006f60 <UART_SetConfig+0x244>
90006dc6:	2b10      	cmp	r3, #16
90006dc8:	f000 80be 	beq.w	90006f48 <UART_SetConfig+0x22c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
90006dcc:	2001      	movs	r0, #1
90006dce:	e0cf      	b.n	90006f70 <UART_SetConfig+0x254>
  UART_GETCLOCKSOURCE(huart, clocksource);
90006dd0:	2b30      	cmp	r3, #48	; 0x30
90006dd2:	d1fb      	bne.n	90006dcc <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
90006dd4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
90006dd8:	d069      	beq.n	90006eae <UART_SetConfig+0x192>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
90006dda:	f44f 4000 	mov.w	r0, #32768	; 0x8000
90006dde:	e098      	b.n	90006f12 <UART_SetConfig+0x1f6>
  UART_GETCLOCKSOURCE(huart, clocksource);
90006de0:	4a6c      	ldr	r2, [pc, #432]	; (90006f94 <UART_SetConfig+0x278>)
90006de2:	4293      	cmp	r3, r2
90006de4:	d10f      	bne.n	90006e06 <UART_SetConfig+0xea>
90006de6:	4b66      	ldr	r3, [pc, #408]	; (90006f80 <UART_SetConfig+0x264>)
90006de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90006dec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
90006df0:	2b80      	cmp	r3, #128	; 0x80
90006df2:	f000 80a4 	beq.w	90006f3e <UART_SetConfig+0x222>
90006df6:	d804      	bhi.n	90006e02 <UART_SetConfig+0xe6>
90006df8:	2b00      	cmp	r3, #0
90006dfa:	f000 80b1 	beq.w	90006f60 <UART_SetConfig+0x244>
90006dfe:	2b40      	cmp	r3, #64	; 0x40
90006e00:	e7e2      	b.n	90006dc8 <UART_SetConfig+0xac>
90006e02:	2bc0      	cmp	r3, #192	; 0xc0
90006e04:	e7e5      	b.n	90006dd2 <UART_SetConfig+0xb6>
90006e06:	4a64      	ldr	r2, [pc, #400]	; (90006f98 <UART_SetConfig+0x27c>)
90006e08:	4293      	cmp	r3, r2
90006e0a:	d112      	bne.n	90006e32 <UART_SetConfig+0x116>
90006e0c:	4b5c      	ldr	r3, [pc, #368]	; (90006f80 <UART_SetConfig+0x264>)
90006e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90006e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
90006e16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90006e1a:	f000 8090 	beq.w	90006f3e <UART_SetConfig+0x222>
90006e1e:	d805      	bhi.n	90006e2c <UART_SetConfig+0x110>
90006e20:	2b00      	cmp	r3, #0
90006e22:	f000 809d 	beq.w	90006f60 <UART_SetConfig+0x244>
90006e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90006e2a:	e7cd      	b.n	90006dc8 <UART_SetConfig+0xac>
90006e2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90006e30:	e7cf      	b.n	90006dd2 <UART_SetConfig+0xb6>
90006e32:	4a5a      	ldr	r2, [pc, #360]	; (90006f9c <UART_SetConfig+0x280>)
90006e34:	4293      	cmp	r3, r2
90006e36:	d111      	bne.n	90006e5c <UART_SetConfig+0x140>
90006e38:	4b51      	ldr	r3, [pc, #324]	; (90006f80 <UART_SetConfig+0x264>)
90006e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90006e3e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
90006e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90006e46:	d07a      	beq.n	90006f3e <UART_SetConfig+0x222>
90006e48:	d805      	bhi.n	90006e56 <UART_SetConfig+0x13a>
90006e4a:	2b00      	cmp	r3, #0
90006e4c:	f000 8082 	beq.w	90006f54 <UART_SetConfig+0x238>
90006e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90006e54:	e7b8      	b.n	90006dc8 <UART_SetConfig+0xac>
90006e56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
90006e5a:	e7ba      	b.n	90006dd2 <UART_SetConfig+0xb6>
90006e5c:	4a50      	ldr	r2, [pc, #320]	; (90006fa0 <UART_SetConfig+0x284>)
90006e5e:	4293      	cmp	r3, r2
90006e60:	d110      	bne.n	90006e84 <UART_SetConfig+0x168>
90006e62:	4b47      	ldr	r3, [pc, #284]	; (90006f80 <UART_SetConfig+0x264>)
90006e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90006e68:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
90006e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90006e70:	d065      	beq.n	90006f3e <UART_SetConfig+0x222>
90006e72:	d804      	bhi.n	90006e7e <UART_SetConfig+0x162>
90006e74:	2b00      	cmp	r3, #0
90006e76:	d073      	beq.n	90006f60 <UART_SetConfig+0x244>
90006e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90006e7c:	e7a4      	b.n	90006dc8 <UART_SetConfig+0xac>
90006e7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
90006e82:	e7a6      	b.n	90006dd2 <UART_SetConfig+0xb6>
90006e84:	4a47      	ldr	r2, [pc, #284]	; (90006fa4 <UART_SetConfig+0x288>)
90006e86:	4293      	cmp	r3, r2
90006e88:	d1a0      	bne.n	90006dcc <UART_SetConfig+0xb0>
90006e8a:	4b3d      	ldr	r3, [pc, #244]	; (90006f80 <UART_SetConfig+0x264>)
90006e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90006e90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
90006e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90006e98:	d051      	beq.n	90006f3e <UART_SetConfig+0x222>
90006e9a:	d804      	bhi.n	90006ea6 <UART_SetConfig+0x18a>
90006e9c:	2b00      	cmp	r3, #0
90006e9e:	d05f      	beq.n	90006f60 <UART_SetConfig+0x244>
90006ea0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90006ea4:	e790      	b.n	90006dc8 <UART_SetConfig+0xac>
90006ea6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
90006eaa:	e792      	b.n	90006dd2 <UART_SetConfig+0xb6>
        pclk = (uint32_t) HSI_VALUE;
90006eac:	483e      	ldr	r0, [pc, #248]	; (90006fa8 <UART_SetConfig+0x28c>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
90006eae:	6862      	ldr	r2, [r4, #4]
90006eb0:	0853      	lsrs	r3, r2, #1
90006eb2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
90006eb6:	fbb0 f0f2 	udiv	r0, r0, r2
90006eba:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
90006ebc:	f64f 72ef 	movw	r2, #65519	; 0xffef
90006ec0:	f1a3 0110 	sub.w	r1, r3, #16
90006ec4:	4291      	cmp	r1, r2
90006ec6:	d881      	bhi.n	90006dcc <UART_SetConfig+0xb0>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
90006ec8:	f020 000f 	bic.w	r0, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
90006ecc:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
90006ed0:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
90006ed2:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
90006ed4:	4318      	orrs	r0, r3
90006ed6:	60d0      	str	r0, [r2, #12]
90006ed8:	e049      	b.n	90006f6e <UART_SetConfig+0x252>
    switch (clocksource)
90006eda:	2b08      	cmp	r3, #8
90006edc:	f63f af76 	bhi.w	90006dcc <UART_SetConfig+0xb0>
90006ee0:	a201      	add	r2, pc, #4	; (adr r2, 90006ee8 <UART_SetConfig+0x1cc>)
90006ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90006ee6:	bf00      	nop
90006ee8:	90006f0d 	.word	0x90006f0d
90006eec:	90006f33 	.word	0x90006f33
90006ef0:	90006f45 	.word	0x90006f45
90006ef4:	90006dcd 	.word	0x90006dcd
90006ef8:	90006f39 	.word	0x90006f39
90006efc:	90006dcd 	.word	0x90006dcd
90006f00:	90006dcd 	.word	0x90006dcd
90006f04:	90006dcd 	.word	0x90006dcd
90006f08:	90006ddb 	.word	0x90006ddb
        pclk = HAL_RCC_GetPCLK1Freq();
90006f0c:	f7ff f974 	bl	900061f8 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
90006f10:	b368      	cbz	r0, 90006f6e <UART_SetConfig+0x252>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
90006f12:	6862      	ldr	r2, [r4, #4]
90006f14:	eb00 0352 	add.w	r3, r0, r2, lsr #1
90006f18:	fbb3 f3f2 	udiv	r3, r3, r2
90006f1c:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
90006f1e:	f64f 72ef 	movw	r2, #65519	; 0xffef
90006f22:	f1a3 0110 	sub.w	r1, r3, #16
90006f26:	4291      	cmp	r1, r2
90006f28:	f63f af50 	bhi.w	90006dcc <UART_SetConfig+0xb0>
      {
        huart->Instance->BRR = usartdiv;
90006f2c:	6822      	ldr	r2, [r4, #0]
90006f2e:	60d3      	str	r3, [r2, #12]
90006f30:	e01d      	b.n	90006f6e <UART_SetConfig+0x252>
        pclk = HAL_RCC_GetPCLK2Freq();
90006f32:	f7ff f971 	bl	90006218 <HAL_RCC_GetPCLK2Freq>
        break;
90006f36:	e7eb      	b.n	90006f10 <UART_SetConfig+0x1f4>
        pclk = HAL_RCC_GetSysClockFreq();
90006f38:	f7ff f88a 	bl	90006050 <HAL_RCC_GetSysClockFreq>
        break;
90006f3c:	e7e8      	b.n	90006f10 <UART_SetConfig+0x1f4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
90006f3e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
90006f42:	d0b3      	beq.n	90006eac <UART_SetConfig+0x190>
        pclk = (uint32_t) HSI_VALUE;
90006f44:	4818      	ldr	r0, [pc, #96]	; (90006fa8 <UART_SetConfig+0x28c>)
90006f46:	e7e4      	b.n	90006f12 <UART_SetConfig+0x1f6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
90006f48:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
90006f4c:	d1f4      	bne.n	90006f38 <UART_SetConfig+0x21c>
        pclk = HAL_RCC_GetSysClockFreq();
90006f4e:	f7ff f87f 	bl	90006050 <HAL_RCC_GetSysClockFreq>
        break;
90006f52:	e00a      	b.n	90006f6a <UART_SetConfig+0x24e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
90006f54:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
90006f58:	d1eb      	bne.n	90006f32 <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetPCLK2Freq();
90006f5a:	f7ff f95d 	bl	90006218 <HAL_RCC_GetPCLK2Freq>
        break;
90006f5e:	e004      	b.n	90006f6a <UART_SetConfig+0x24e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
90006f60:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
90006f64:	d1d2      	bne.n	90006f0c <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetPCLK1Freq();
90006f66:	f7ff f947 	bl	900061f8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
90006f6a:	2800      	cmp	r0, #0
90006f6c:	d19f      	bne.n	90006eae <UART_SetConfig+0x192>
90006f6e:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
90006f70:	2300      	movs	r3, #0
  huart->TxISR = NULL;
90006f72:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
90006f76:	bd38      	pop	{r3, r4, r5, pc}
90006f78:	efff69f3 	.word	0xefff69f3
90006f7c:	40011000 	.word	0x40011000
90006f80:	40023800 	.word	0x40023800
90006f84:	9002b244 	.word	0x9002b244
90006f88:	40004400 	.word	0x40004400
90006f8c:	9002b247 	.word	0x9002b247
90006f90:	40004800 	.word	0x40004800
90006f94:	40004c00 	.word	0x40004c00
90006f98:	40005000 	.word	0x40005000
90006f9c:	40011400 	.word	0x40011400
90006fa0:	40007800 	.word	0x40007800
90006fa4:	40007c00 	.word	0x40007c00
90006fa8:	00f42400 	.word	0x00f42400

90006fac <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
90006fac:	6a43      	ldr	r3, [r0, #36]	; 0x24
90006fae:	07da      	lsls	r2, r3, #31
{
90006fb0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
90006fb2:	d506      	bpl.n	90006fc2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
90006fb4:	6801      	ldr	r1, [r0, #0]
90006fb6:	6a84      	ldr	r4, [r0, #40]	; 0x28
90006fb8:	684a      	ldr	r2, [r1, #4]
90006fba:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
90006fbe:	4322      	orrs	r2, r4
90006fc0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
90006fc2:	079c      	lsls	r4, r3, #30
90006fc4:	d506      	bpl.n	90006fd4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
90006fc6:	6801      	ldr	r1, [r0, #0]
90006fc8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
90006fca:	684a      	ldr	r2, [r1, #4]
90006fcc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
90006fd0:	4322      	orrs	r2, r4
90006fd2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
90006fd4:	0759      	lsls	r1, r3, #29
90006fd6:	d506      	bpl.n	90006fe6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
90006fd8:	6801      	ldr	r1, [r0, #0]
90006fda:	6b04      	ldr	r4, [r0, #48]	; 0x30
90006fdc:	684a      	ldr	r2, [r1, #4]
90006fde:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
90006fe2:	4322      	orrs	r2, r4
90006fe4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
90006fe6:	071a      	lsls	r2, r3, #28
90006fe8:	d506      	bpl.n	90006ff8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
90006fea:	6801      	ldr	r1, [r0, #0]
90006fec:	6b44      	ldr	r4, [r0, #52]	; 0x34
90006fee:	684a      	ldr	r2, [r1, #4]
90006ff0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
90006ff4:	4322      	orrs	r2, r4
90006ff6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
90006ff8:	06dc      	lsls	r4, r3, #27
90006ffa:	d506      	bpl.n	9000700a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
90006ffc:	6801      	ldr	r1, [r0, #0]
90006ffe:	6b84      	ldr	r4, [r0, #56]	; 0x38
90007000:	688a      	ldr	r2, [r1, #8]
90007002:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
90007006:	4322      	orrs	r2, r4
90007008:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
9000700a:	0699      	lsls	r1, r3, #26
9000700c:	d506      	bpl.n	9000701c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
9000700e:	6801      	ldr	r1, [r0, #0]
90007010:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
90007012:	688a      	ldr	r2, [r1, #8]
90007014:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
90007018:	4322      	orrs	r2, r4
9000701a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
9000701c:	065a      	lsls	r2, r3, #25
9000701e:	d510      	bpl.n	90007042 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
90007020:	6801      	ldr	r1, [r0, #0]
90007022:	6c04      	ldr	r4, [r0, #64]	; 0x40
90007024:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
90007026:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
9000702a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
9000702e:	ea42 0204 	orr.w	r2, r2, r4
90007032:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
90007034:	d105      	bne.n	90007042 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
90007036:	684a      	ldr	r2, [r1, #4]
90007038:	6c44      	ldr	r4, [r0, #68]	; 0x44
9000703a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
9000703e:	4322      	orrs	r2, r4
90007040:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
90007042:	061b      	lsls	r3, r3, #24
90007044:	d506      	bpl.n	90007054 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
90007046:	6802      	ldr	r2, [r0, #0]
90007048:	6c81      	ldr	r1, [r0, #72]	; 0x48
9000704a:	6853      	ldr	r3, [r2, #4]
9000704c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
90007050:	430b      	orrs	r3, r1
90007052:	6053      	str	r3, [r2, #4]
  }
}
90007054:	bd10      	pop	{r4, pc}

90007056 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
90007056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000705a:	f8dd 8018 	ldr.w	r8, [sp, #24]
9000705e:	4604      	mov	r4, r0
90007060:	460e      	mov	r6, r1
90007062:	4615      	mov	r5, r2
90007064:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
90007066:	6822      	ldr	r2, [r4, #0]
90007068:	69d3      	ldr	r3, [r2, #28]
9000706a:	ea36 0303 	bics.w	r3, r6, r3
9000706e:	bf0c      	ite	eq
90007070:	2301      	moveq	r3, #1
90007072:	2300      	movne	r3, #0
90007074:	42ab      	cmp	r3, r5
90007076:	d001      	beq.n	9000707c <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
90007078:	2000      	movs	r0, #0
9000707a:	e01a      	b.n	900070b2 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
9000707c:	f1b8 3fff 	cmp.w	r8, #4294967295
90007080:	d0f2      	beq.n	90007068 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007082:	f7fd f895 	bl	900041b0 <HAL_GetTick>
90007086:	1bc0      	subs	r0, r0, r7
90007088:	4540      	cmp	r0, r8
9000708a:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
9000708c:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000708e:	d802      	bhi.n	90007096 <UART_WaitOnFlagUntilTimeout+0x40>
90007090:	f1b8 0f00 	cmp.w	r8, #0
90007094:	d10f      	bne.n	900070b6 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
90007096:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
9000709a:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000709c:	6883      	ldr	r3, [r0, #8]
9000709e:	f023 0301 	bic.w	r3, r3, #1
900070a2:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
900070a4:	2320      	movs	r3, #32
900070a6:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
900070a8:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
900070aa:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
900070ac:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
900070ae:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
}
900070b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
900070b6:	075a      	lsls	r2, r3, #29
900070b8:	d5d5      	bpl.n	90007066 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
900070ba:	69c3      	ldr	r3, [r0, #28]
900070bc:	051b      	lsls	r3, r3, #20
900070be:	d5d2      	bpl.n	90007066 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
900070c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
900070c4:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
900070c6:	6803      	ldr	r3, [r0, #0]
900070c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
900070cc:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
900070ce:	6883      	ldr	r3, [r0, #8]
900070d0:	f023 0301 	bic.w	r3, r3, #1
900070d4:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
900070d6:	2320      	movs	r3, #32
900070d8:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
900070da:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
900070dc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
900070e0:	e7e3      	b.n	900070aa <UART_WaitOnFlagUntilTimeout+0x54>

900070e2 <UART_CheckIdleState>:
{
900070e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
900070e4:	2500      	movs	r5, #0
{
900070e6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
900070e8:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
900070ec:	f7fd f860 	bl	900041b0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
900070f0:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
900070f2:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
900070f4:	6812      	ldr	r2, [r2, #0]
900070f6:	0712      	lsls	r2, r2, #28
900070f8:	d408      	bmi.n	9000710c <UART_CheckIdleState+0x2a>
  huart->gState = HAL_UART_STATE_READY;
900070fa:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
900070fc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
900070fe:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
90007100:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
90007104:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
90007106:	6620      	str	r0, [r4, #96]	; 0x60
}
90007108:	b003      	add	sp, #12
9000710a:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
9000710c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
90007110:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
90007114:	4620      	mov	r0, r4
90007116:	9200      	str	r2, [sp, #0]
90007118:	462a      	mov	r2, r5
9000711a:	f7ff ff9c 	bl	90007056 <UART_WaitOnFlagUntilTimeout>
9000711e:	2800      	cmp	r0, #0
90007120:	d0eb      	beq.n	900070fa <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
90007122:	2003      	movs	r0, #3
90007124:	e7f0      	b.n	90007108 <UART_CheckIdleState+0x26>

90007126 <HAL_UART_Init>:
{
90007126:	b510      	push	{r4, lr}
  if (huart == NULL)
90007128:	4604      	mov	r4, r0
9000712a:	b340      	cbz	r0, 9000717e <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
9000712c:	6f83      	ldr	r3, [r0, #120]	; 0x78
9000712e:	b91b      	cbnz	r3, 90007138 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
90007130:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
90007134:	f7fb f92c 	bl	90002390 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
90007138:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
9000713a:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
9000713c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
9000713e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
90007140:	6813      	ldr	r3, [r2, #0]
90007142:	f023 0301 	bic.w	r3, r3, #1
90007146:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
90007148:	f7ff fde8 	bl	90006d1c <UART_SetConfig>
9000714c:	2801      	cmp	r0, #1
9000714e:	d016      	beq.n	9000717e <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
90007150:	6a63      	ldr	r3, [r4, #36]	; 0x24
90007152:	b113      	cbz	r3, 9000715a <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
90007154:	4620      	mov	r0, r4
90007156:	f7ff ff29 	bl	90006fac <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
9000715a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
9000715c:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
9000715e:	685a      	ldr	r2, [r3, #4]
90007160:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
90007164:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
90007166:	689a      	ldr	r2, [r3, #8]
90007168:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
9000716c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
9000716e:	681a      	ldr	r2, [r3, #0]
90007170:	f042 0201 	orr.w	r2, r2, #1
}
90007174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
90007178:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
9000717a:	f7ff bfb2 	b.w	900070e2 <UART_CheckIdleState>
}
9000717e:	2001      	movs	r0, #1
90007180:	bd10      	pop	{r4, pc}
	...

90007184 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
90007184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90007188:	6a4a      	ldr	r2, [r1, #36]	; 0x24
9000718a:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
9000718e:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
90007192:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
90007196:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
9000719a:	6809      	ldr	r1, [r1, #0]
9000719c:	4323      	orrs	r3, r4
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
9000719e:	6804      	ldr	r4, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
900071a0:	2901      	cmp	r1, #1
900071a2:	4912      	ldr	r1, [pc, #72]	; (900071ec <FMC_SDRAM_Init+0x68>)
900071a4:	d00f      	beq.n	900071c6 <FMC_SDRAM_Init+0x42>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
900071a6:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
900071a8:	4021      	ands	r1, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
900071aa:	432a      	orrs	r2, r5
900071ac:	ea42 0308 	orr.w	r3, r2, r8
900071b0:	ea43 030e 	orr.w	r3, r3, lr
900071b4:	ea43 030c 	orr.w	r3, r3, ip
900071b8:	433b      	orrs	r3, r7
900071ba:	4333      	orrs	r3, r6
900071bc:	430b      	orrs	r3, r1
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
900071be:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
900071c0:	2000      	movs	r0, #0
900071c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
900071c6:	4313      	orrs	r3, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
900071c8:	6842      	ldr	r2, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
900071ca:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
900071ce:	4011      	ands	r1, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
900071d0:	ea45 0208 	orr.w	r2, r5, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
900071d4:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
900071d6:	ea42 020e 	orr.w	r2, r2, lr
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
900071da:	6003      	str	r3, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
900071dc:	ea42 020c 	orr.w	r2, r2, ip
900071e0:	433a      	orrs	r2, r7
900071e2:	4332      	orrs	r2, r6
900071e4:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
900071e6:	6042      	str	r2, [r0, #4]
900071e8:	e7ea      	b.n	900071c0 <FMC_SDRAM_Init+0x3c>
900071ea:	bf00      	nop
900071ec:	ffff8000 	.word	0xffff8000

900071f0 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
900071f0:	68cb      	ldr	r3, [r1, #12]
900071f2:	2a01      	cmp	r2, #1
{
900071f4:	b5f0      	push	{r4, r5, r6, r7, lr}
900071f6:	680c      	ldr	r4, [r1, #0]
900071f8:	f103 37ff 	add.w	r7, r3, #4294967295
900071fc:	694b      	ldr	r3, [r1, #20]
900071fe:	688e      	ldr	r6, [r1, #8]
90007200:	f104 3cff 	add.w	ip, r4, #4294967295
90007204:	690d      	ldr	r5, [r1, #16]
90007206:	f103 33ff 	add.w	r3, r3, #4294967295
9000720a:	684c      	ldr	r4, [r1, #4]
9000720c:	f106 36ff 	add.w	r6, r6, #4294967295
90007210:	6989      	ldr	r1, [r1, #24]
90007212:	ea4f 5303 	mov.w	r3, r3, lsl #20
90007216:	f104 34ff 	add.w	r4, r4, #4294967295
9000721a:	f105 35ff 	add.w	r5, r5, #4294967295
9000721e:	f101 31ff 	add.w	r1, r1, #4294967295
90007222:	ea4f 2606 	mov.w	r6, r6, lsl #8
90007226:	ea4f 1404 	mov.w	r4, r4, lsl #4
9000722a:	ea4f 4505 	mov.w	r5, r5, lsl #16
9000722e:	ea4f 6101 	mov.w	r1, r1, lsl #24
90007232:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  if (Bank != FMC_SDRAM_BANK2) 
90007236:	d00c      	beq.n	90007252 <FMC_SDRAM_Timing_Init+0x62>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90007238:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
9000723c:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
9000723e:	4323      	orrs	r3, r4
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
90007240:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90007244:	4333      	orrs	r3, r6
90007246:	432b      	orrs	r3, r5
90007248:	430b      	orrs	r3, r1
9000724a:	4313      	orrs	r3, r2
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
9000724c:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
9000724e:	2000      	movs	r0, #0
90007250:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
90007252:	6887      	ldr	r7, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90007254:	4334      	orrs	r4, r6
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
90007256:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
9000725a:	ea44 020c 	orr.w	r2, r4, ip
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
9000725e:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90007262:	432a      	orrs	r2, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
90007264:	433b      	orrs	r3, r7
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
90007266:	68c7      	ldr	r7, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90007268:	430a      	orrs	r2, r1
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
9000726a:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
9000726e:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
90007270:	433a      	orrs	r2, r7
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
90007272:	60c2      	str	r2, [r0, #12]
90007274:	e7eb      	b.n	9000724e <FMC_SDRAM_Timing_Init+0x5e>

90007276 <FMC_SDRAM_DeInit>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0;
90007276:	f44f 7234 	mov.w	r2, #720	; 0x2d0
9000727a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
9000727e:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFF;    
90007282:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
90007286:	609a      	str	r2, [r3, #8]
  Device->SDCMR      = 0x00000000;
90007288:	2300      	movs	r3, #0
9000728a:	6103      	str	r3, [r0, #16]
  Device->SDRTR      = 0x00000000;
9000728c:	6143      	str	r3, [r0, #20]
  Device->SDSR       = 0x00000000;
9000728e:	6183      	str	r3, [r0, #24]

  return HAL_OK;
}
90007290:	4618      	mov	r0, r3
90007292:	4770      	bx	lr

90007294 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
90007294:	6902      	ldr	r2, [r0, #16]
{ 
90007296:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
90007298:	e9d1 3400 	ldrd	r3, r4, [r1]
9000729c:	0d92      	lsrs	r2, r2, #22
9000729e:	4323      	orrs	r3, r4
900072a0:	68cc      	ldr	r4, [r1, #12]
900072a2:	0592      	lsls	r2, r2, #22
900072a4:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
900072a8:	4313      	orrs	r3, r2
900072aa:	688a      	ldr	r2, [r1, #8]
900072ac:	3a01      	subs	r2, #1
900072ae:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
900072b2:	6103      	str	r3, [r0, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
}
900072b4:	2000      	movs	r0, #0
900072b6:	bd10      	pop	{r4, pc}

900072b8 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
900072b8:	6943      	ldr	r3, [r0, #20]
900072ba:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
900072be:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
900072c0:	2000      	movs	r0, #0
900072c2:	4770      	bx	lr

900072c4 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
900072c4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
900072c8:	b113      	cbz	r3, 900072d0 <osKernelInitialize+0xc>
    stat = osErrorISR;
900072ca:	f06f 0005 	mvn.w	r0, #5
900072ce:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
900072d0:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
900072d4:	4b07      	ldr	r3, [pc, #28]	; (900072f4 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
900072d6:	b912      	cbnz	r2, 900072de <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
900072d8:	f3ef 8211 	mrs	r2, BASEPRI
900072dc:	b112      	cbz	r2, 900072e4 <osKernelInitialize+0x20>
900072de:	681a      	ldr	r2, [r3, #0]
900072e0:	2a02      	cmp	r2, #2
900072e2:	d0f2      	beq.n	900072ca <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
900072e4:	6818      	ldr	r0, [r3, #0]
900072e6:	b910      	cbnz	r0, 900072ee <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
900072e8:	2201      	movs	r2, #1
900072ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
900072ec:	4770      	bx	lr
    } else {
      stat = osError;
900072ee:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
900072f2:	4770      	bx	lr
900072f4:	20004aec 	.word	0x20004aec

900072f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
900072f8:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
900072fa:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
900072fe:	b113      	cbz	r3, 90007306 <osKernelStart+0xe>
    stat = osErrorISR;
90007300:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
90007304:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
90007306:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
9000730a:	4b0a      	ldr	r3, [pc, #40]	; (90007334 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
9000730c:	b912      	cbnz	r2, 90007314 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
9000730e:	f3ef 8211 	mrs	r2, BASEPRI
90007312:	b112      	cbz	r2, 9000731a <osKernelStart+0x22>
90007314:	681a      	ldr	r2, [r3, #0]
90007316:	2a02      	cmp	r2, #2
90007318:	d0f2      	beq.n	90007300 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
9000731a:	681a      	ldr	r2, [r3, #0]
9000731c:	2a01      	cmp	r2, #1
9000731e:	d105      	bne.n	9000732c <osKernelStart+0x34>
      KernelState = osKernelRunning;
90007320:	2202      	movs	r2, #2
90007322:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
90007324:	f001 ff4e 	bl	900091c4 <vTaskStartScheduler>
      stat = osOK;
90007328:	2000      	movs	r0, #0
9000732a:	e7eb      	b.n	90007304 <osKernelStart+0xc>
      stat = osError;
9000732c:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
90007330:	e7e8      	b.n	90007304 <osKernelStart+0xc>
90007332:	bf00      	nop
90007334:	20004aec 	.word	0x20004aec

90007338 <osKernelGetTickCount>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
90007338:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
9000733c:	b10b      	cbz	r3, 90007342 <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
9000733e:	f001 bdf9 	b.w	90008f34 <xTaskGetTickCountFromISR>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
90007342:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
90007346:	b913      	cbnz	r3, 9000734e <osKernelGetTickCount+0x16>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
90007348:	f3ef 8311 	mrs	r3, BASEPRI
9000734c:	b11b      	cbz	r3, 90007356 <osKernelGetTickCount+0x1e>
9000734e:	4b03      	ldr	r3, [pc, #12]	; (9000735c <osKernelGetTickCount+0x24>)
90007350:	681b      	ldr	r3, [r3, #0]
90007352:	2b02      	cmp	r3, #2
90007354:	d0f3      	beq.n	9000733e <osKernelGetTickCount+0x6>
  } else {
    ticks = xTaskGetTickCount();
90007356:	f001 bde7 	b.w	90008f28 <xTaskGetTickCount>
9000735a:	bf00      	nop
9000735c:	20004aec 	.word	0x20004aec

90007360 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
90007360:	b5f0      	push	{r4, r5, r6, r7, lr}
90007362:	4614      	mov	r4, r2
90007364:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
90007366:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
90007368:	460b      	mov	r3, r1
  hTask = NULL;
9000736a:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
9000736c:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
90007370:	bb22      	cbnz	r2, 900073bc <osThreadNew+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
90007372:	f3ef 8210 	mrs	r2, PRIMASK
90007376:	b912      	cbnz	r2, 9000737e <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
90007378:	f3ef 8211 	mrs	r2, BASEPRI
9000737c:	b11a      	cbz	r2, 90007386 <osThreadNew+0x26>
9000737e:	4a22      	ldr	r2, [pc, #136]	; (90007408 <osThreadNew+0xa8>)
90007380:	6812      	ldr	r2, [r2, #0]
90007382:	2a02      	cmp	r2, #2
90007384:	d01a      	beq.n	900073bc <osThreadNew+0x5c>
90007386:	b1c8      	cbz	r0, 900073bc <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
90007388:	2c00      	cmp	r4, #0
9000738a:	d02f      	beq.n	900073ec <osThreadNew+0x8c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
9000738c:	69a5      	ldr	r5, [r4, #24]
9000738e:	2d00      	cmp	r5, #0
90007390:	bf08      	it	eq
90007392:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
90007394:	1e6a      	subs	r2, r5, #1
90007396:	46ac      	mov	ip, r5
90007398:	2a37      	cmp	r2, #55	; 0x37
9000739a:	d82b      	bhi.n	900073f4 <osThreadNew+0x94>
9000739c:	6862      	ldr	r2, [r4, #4]
9000739e:	07d2      	lsls	r2, r2, #31
900073a0:	d428      	bmi.n	900073f4 <osThreadNew+0x94>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
900073a2:	6966      	ldr	r6, [r4, #20]
900073a4:	b16e      	cbz	r6, 900073c2 <osThreadNew+0x62>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
900073a6:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
900073a8:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
900073aa:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
900073ae:	b157      	cbz	r7, 900073c6 <osThreadNew+0x66>
900073b0:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
900073b4:	d902      	bls.n	900073bc <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
900073b6:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
900073b8:	b104      	cbz	r4, 900073bc <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
900073ba:	b9ee      	cbnz	r6, 900073f8 <osThreadNew+0x98>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
900073bc:	9805      	ldr	r0, [sp, #20]
}
900073be:	b007      	add	sp, #28
900073c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
900073c2:	2280      	movs	r2, #128	; 0x80
900073c4:	e7f0      	b.n	900073a8 <osThreadNew+0x48>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
900073c6:	f1be 0f00 	cmp.w	lr, #0
900073ca:	d1f7      	bne.n	900073bc <osThreadNew+0x5c>
      if (mem == 0) {
900073cc:	6924      	ldr	r4, [r4, #16]
900073ce:	2c00      	cmp	r4, #0
900073d0:	d1f4      	bne.n	900073bc <osThreadNew+0x5c>
900073d2:	460c      	mov	r4, r1
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
900073d4:	a905      	add	r1, sp, #20
900073d6:	b292      	uxth	r2, r2
900073d8:	e9cd c100 	strd	ip, r1, [sp]
900073dc:	4621      	mov	r1, r4
900073de:	f001 fd13 	bl	90008e08 <xTaskCreate>
900073e2:	2801      	cmp	r0, #1
          hTask = NULL;
900073e4:	bf1c      	itt	ne
900073e6:	2300      	movne	r3, #0
900073e8:	9305      	strne	r3, [sp, #20]
900073ea:	e7e7      	b.n	900073bc <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;
900073ec:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
900073f0:	2280      	movs	r2, #128	; 0x80
900073f2:	e7ef      	b.n	900073d4 <osThreadNew+0x74>
        return (NULL);
900073f4:	2000      	movs	r0, #0
900073f6:	e7e2      	b.n	900073be <osThreadNew+0x5e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
900073f8:	e9cd 4701 	strd	r4, r7, [sp, #4]
900073fc:	9500      	str	r5, [sp, #0]
900073fe:	f001 fcc5 	bl	90008d8c <xTaskCreateStatic>
90007402:	9005      	str	r0, [sp, #20]
90007404:	e7da      	b.n	900073bc <osThreadNew+0x5c>
90007406:	bf00      	nop
90007408:	20004aec 	.word	0x20004aec

9000740c <osThreadExit>:
  return (stat);
}

__NO_RETURN void osThreadExit (void) {
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
9000740c:	2000      	movs	r0, #0
__NO_RETURN void osThreadExit (void) {
9000740e:	b508      	push	{r3, lr}
  vTaskDelete (NULL);
90007410:	f001 fd28 	bl	90008e64 <vTaskDelete>
#endif
  for (;;);
90007414:	e7fe      	b.n	90007414 <osThreadExit+0x8>
	...

90007418 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
90007418:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
9000741a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
9000741e:	b113      	cbz	r3, 90007426 <osDelay+0xe>
    stat = osErrorISR;
90007420:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
90007424:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
90007426:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
9000742a:	b913      	cbnz	r3, 90007432 <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
9000742c:	f3ef 8311 	mrs	r3, BASEPRI
90007430:	b11b      	cbz	r3, 9000743a <osDelay+0x22>
90007432:	4b05      	ldr	r3, [pc, #20]	; (90007448 <osDelay+0x30>)
90007434:	681b      	ldr	r3, [r3, #0]
90007436:	2b02      	cmp	r3, #2
90007438:	d0f2      	beq.n	90007420 <osDelay+0x8>
    if (ticks != 0U) {
9000743a:	2800      	cmp	r0, #0
9000743c:	d0f2      	beq.n	90007424 <osDelay+0xc>
      vTaskDelay(ticks);
9000743e:	f001 fe8f 	bl	90009160 <vTaskDelay>
    stat = osOK;
90007442:	2000      	movs	r0, #0
90007444:	e7ee      	b.n	90007424 <osDelay+0xc>
90007446:	bf00      	nop
90007448:	20004aec 	.word	0x20004aec

9000744c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
9000744c:	b570      	push	{r4, r5, r6, lr}
9000744e:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
90007450:	f3ef 8505 	mrs	r5, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
90007454:	b115      	cbz	r5, 9000745c <osMutexNew+0x10>
  hMutex = NULL;
90007456:	2600      	movs	r6, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
90007458:	4630      	mov	r0, r6
9000745a:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
9000745c:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
90007460:	b912      	cbnz	r2, 90007468 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
90007462:	f3ef 8211 	mrs	r2, BASEPRI
90007466:	b11a      	cbz	r2, 90007470 <osMutexNew+0x24>
90007468:	4a18      	ldr	r2, [pc, #96]	; (900074cc <osMutexNew+0x80>)
9000746a:	6812      	ldr	r2, [r2, #0]
9000746c:	2a02      	cmp	r2, #2
9000746e:	d0f2      	beq.n	90007456 <osMutexNew+0xa>
    if (attr != NULL) {
90007470:	b114      	cbz	r4, 90007478 <osMutexNew+0x2c>
      type = attr->attr_bits;
90007472:	6865      	ldr	r5, [r4, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
90007474:	072b      	lsls	r3, r5, #28
90007476:	d4ee      	bmi.n	90007456 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
90007478:	f005 0501 	and.w	r5, r5, #1
      if (attr != NULL) {
9000747c:	b17c      	cbz	r4, 9000749e <osMutexNew+0x52>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000747e:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
90007482:	b151      	cbz	r1, 9000749a <osMutexNew+0x4e>
90007484:	2b4f      	cmp	r3, #79	; 0x4f
90007486:	d9e6      	bls.n	90007456 <osMutexNew+0xa>
        if (rmtx != 0U) {
90007488:	b1dd      	cbz	r5, 900074c2 <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
9000748a:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
9000748c:	f000 ff86 	bl	9000839c <xQueueCreateMutexStatic>
90007490:	4606      	mov	r6, r0
      if (hMutex != NULL) {
90007492:	2800      	cmp	r0, #0
90007494:	d0df      	beq.n	90007456 <osMutexNew+0xa>
          name = attr->name;
90007496:	6824      	ldr	r4, [r4, #0]
90007498:	e00a      	b.n	900074b0 <osMutexNew+0x64>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000749a:	2b00      	cmp	r3, #0
9000749c:	d1db      	bne.n	90007456 <osMutexNew+0xa>
          if (rmtx != 0U) {
9000749e:	b195      	cbz	r5, 900074c6 <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
900074a0:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
900074a2:	f000 ffb0 	bl	90008406 <xQueueCreateMutex>
900074a6:	4606      	mov	r6, r0
      if (hMutex != NULL) {
900074a8:	2800      	cmp	r0, #0
900074aa:	d0d4      	beq.n	90007456 <osMutexNew+0xa>
        if (attr != NULL) {
900074ac:	2c00      	cmp	r4, #0
900074ae:	d1f2      	bne.n	90007496 <osMutexNew+0x4a>
        vQueueAddToRegistry (hMutex, name);
900074b0:	4621      	mov	r1, r4
900074b2:	4630      	mov	r0, r6
900074b4:	f001 fa9a 	bl	900089ec <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
900074b8:	2d00      	cmp	r5, #0
900074ba:	d0cd      	beq.n	90007458 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
900074bc:	f046 0601 	orr.w	r6, r6, #1
  return ((osMutexId_t)hMutex);
900074c0:	e7ca      	b.n	90007458 <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
900074c2:	2001      	movs	r0, #1
900074c4:	e7e2      	b.n	9000748c <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
900074c6:	2001      	movs	r0, #1
900074c8:	e7eb      	b.n	900074a2 <osMutexNew+0x56>
900074ca:	bf00      	nop
900074cc:	20004aec 	.word	0x20004aec

900074d0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
900074d0:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
900074d2:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
900074d6:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
900074d8:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
900074dc:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
900074de:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
900074e2:	b112      	cbz	r2, 900074ea <osMutexAcquire+0x1a>
    stat = osErrorISR;
900074e4:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
900074e8:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
900074ea:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
900074ee:	b912      	cbnz	r2, 900074f6 <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
900074f0:	f3ef 8211 	mrs	r2, BASEPRI
900074f4:	b11a      	cbz	r2, 900074fe <osMutexAcquire+0x2e>
900074f6:	4a0d      	ldr	r2, [pc, #52]	; (9000752c <osMutexAcquire+0x5c>)
900074f8:	6812      	ldr	r2, [r2, #0]
900074fa:	2a02      	cmp	r2, #2
900074fc:	d0f2      	beq.n	900074e4 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
900074fe:	b188      	cbz	r0, 90007524 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
90007500:	4621      	mov	r1, r4
    if (rmtx != 0U) {
90007502:	b163      	cbz	r3, 9000751e <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
90007504:	f001 f9d4 	bl	900088b0 <xQueueTakeMutexRecursive>
90007508:	2801      	cmp	r0, #1
9000750a:	d101      	bne.n	90007510 <osMutexAcquire+0x40>
  stat = osOK;
9000750c:	2000      	movs	r0, #0
9000750e:	e7eb      	b.n	900074e8 <osMutexAcquire+0x18>
          stat = osErrorResource;
90007510:	2c00      	cmp	r4, #0
90007512:	bf14      	ite	ne
90007514:	f06f 0001 	mvnne.w	r0, #1
90007518:	f06f 0002 	mvneq.w	r0, #2
9000751c:	e7e4      	b.n	900074e8 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
9000751e:	f001 f8fb 	bl	90008718 <xQueueSemaphoreTake>
90007522:	e7f1      	b.n	90007508 <osMutexAcquire+0x38>
    stat = osErrorParameter;
90007524:	f06f 0003 	mvn.w	r0, #3
90007528:	e7de      	b.n	900074e8 <osMutexAcquire+0x18>
9000752a:	bf00      	nop
9000752c:	20004aec 	.word	0x20004aec

90007530 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
90007530:	b508      	push	{r3, lr}
90007532:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
90007534:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
90007538:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
9000753c:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
90007540:	b112      	cbz	r2, 90007548 <osMutexRelease+0x18>
    stat = osErrorISR;
90007542:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
90007546:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
90007548:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
9000754c:	b912      	cbnz	r2, 90007554 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
9000754e:	f3ef 8211 	mrs	r2, BASEPRI
90007552:	b11a      	cbz	r2, 9000755c <osMutexRelease+0x2c>
90007554:	4a0a      	ldr	r2, [pc, #40]	; (90007580 <osMutexRelease+0x50>)
90007556:	6812      	ldr	r2, [r2, #0]
90007558:	2a02      	cmp	r2, #2
9000755a:	d0f2      	beq.n	90007542 <osMutexRelease+0x12>
  else if (hMutex == NULL) {
9000755c:	b168      	cbz	r0, 9000757a <osMutexRelease+0x4a>
    if (rmtx != 0U) {
9000755e:	b13b      	cbz	r3, 90007570 <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
90007560:	f000 ff31 	bl	900083c6 <xQueueGiveMutexRecursive>
90007564:	2801      	cmp	r0, #1
  stat = osOK;
90007566:	bf0c      	ite	eq
90007568:	2000      	moveq	r0, #0
        stat = osErrorResource;
9000756a:	f06f 0002 	mvnne.w	r0, #2
9000756e:	e7ea      	b.n	90007546 <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
90007570:	461a      	mov	r2, r3
90007572:	4619      	mov	r1, r3
90007574:	f000 fe58 	bl	90008228 <xQueueGenericSend>
90007578:	e7f4      	b.n	90007564 <osMutexRelease+0x34>
    stat = osErrorParameter;
9000757a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
9000757e:	e7e2      	b.n	90007546 <osMutexRelease+0x16>
90007580:	20004aec 	.word	0x20004aec

90007584 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
90007584:	b573      	push	{r0, r1, r4, r5, r6, lr}
90007586:	460e      	mov	r6, r1
90007588:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
9000758a:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
9000758e:	b11b      	cbz	r3, 90007598 <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
90007590:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
90007592:	4620      	mov	r0, r4
90007594:	b002      	add	sp, #8
90007596:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
90007598:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
9000759c:	b913      	cbnz	r3, 900075a4 <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
9000759e:	f3ef 8311 	mrs	r3, BASEPRI
900075a2:	b11b      	cbz	r3, 900075ac <osSemaphoreNew+0x28>
900075a4:	4b21      	ldr	r3, [pc, #132]	; (9000762c <osSemaphoreNew+0xa8>)
900075a6:	681b      	ldr	r3, [r3, #0]
900075a8:	2b02      	cmp	r3, #2
900075aa:	d0f1      	beq.n	90007590 <osSemaphoreNew+0xc>
900075ac:	2800      	cmp	r0, #0
900075ae:	d0ef      	beq.n	90007590 <osSemaphoreNew+0xc>
900075b0:	42b0      	cmp	r0, r6
900075b2:	d3ed      	bcc.n	90007590 <osSemaphoreNew+0xc>
    if (attr != NULL) {
900075b4:	b1ed      	cbz	r5, 900075f2 <osSemaphoreNew+0x6e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
900075b6:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
900075ba:	b1c3      	cbz	r3, 900075ee <osSemaphoreNew+0x6a>
900075bc:	2a4f      	cmp	r2, #79	; 0x4f
900075be:	d9e7      	bls.n	90007590 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
900075c0:	2801      	cmp	r0, #1
900075c2:	d129      	bne.n	90007618 <osSemaphoreNew+0x94>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
900075c4:	2203      	movs	r2, #3
900075c6:	9200      	str	r2, [sp, #0]
900075c8:	2200      	movs	r2, #0
900075ca:	4611      	mov	r1, r2
900075cc:	f000 fd62 	bl	90008094 <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
900075d0:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
900075d2:	2800      	cmp	r0, #0
900075d4:	d0dc      	beq.n	90007590 <osSemaphoreNew+0xc>
900075d6:	b1ce      	cbz	r6, 9000760c <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
900075d8:	2300      	movs	r3, #0
900075da:	461a      	mov	r2, r3
900075dc:	4619      	mov	r1, r3
900075de:	f000 fe23 	bl	90008228 <xQueueGenericSend>
900075e2:	2801      	cmp	r0, #1
900075e4:	d012      	beq.n	9000760c <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
900075e6:	4620      	mov	r0, r4
900075e8:	f001 fa2a 	bl	90008a40 <vQueueDelete>
900075ec:	e7d0      	b.n	90007590 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
900075ee:	2a00      	cmp	r2, #0
900075f0:	d1ce      	bne.n	90007590 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
900075f2:	2801      	cmp	r0, #1
900075f4:	d104      	bne.n	90007600 <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
900075f6:	2203      	movs	r2, #3
900075f8:	2100      	movs	r1, #0
900075fa:	f000 fda3 	bl	90008144 <xQueueGenericCreate>
900075fe:	e7e7      	b.n	900075d0 <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
90007600:	4631      	mov	r1, r6
90007602:	f000 fdee 	bl	900081e2 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
90007606:	4604      	mov	r4, r0
90007608:	2800      	cmp	r0, #0
9000760a:	d0c1      	beq.n	90007590 <osSemaphoreNew+0xc>
        if (attr != NULL) {
9000760c:	b95d      	cbnz	r5, 90007626 <osSemaphoreNew+0xa2>
        vQueueAddToRegistry (hSemaphore, name);
9000760e:	4629      	mov	r1, r5
90007610:	4620      	mov	r0, r4
90007612:	f001 f9eb 	bl	900089ec <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
90007616:	e7bc      	b.n	90007592 <osSemaphoreNew+0xe>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
90007618:	461a      	mov	r2, r3
9000761a:	4631      	mov	r1, r6
9000761c:	f000 fdbb 	bl	90008196 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
90007620:	4604      	mov	r4, r0
90007622:	2800      	cmp	r0, #0
90007624:	d0b4      	beq.n	90007590 <osSemaphoreNew+0xc>
          name = attr->name;
90007626:	682d      	ldr	r5, [r5, #0]
90007628:	e7f1      	b.n	9000760e <osSemaphoreNew+0x8a>
9000762a:	bf00      	nop
9000762c:	20004aec 	.word	0x20004aec

90007630 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
90007630:	b513      	push	{r0, r1, r4, lr}
90007632:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
90007634:	b918      	cbnz	r0, 9000763e <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
90007636:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
9000763a:	b002      	add	sp, #8
9000763c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
9000763e:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
90007642:	b163      	cbz	r3, 9000765e <osSemaphoreAcquire+0x2e>
    if (timeout != 0U) {
90007644:	2c00      	cmp	r4, #0
90007646:	d1f6      	bne.n	90007636 <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
90007648:	aa01      	add	r2, sp, #4
9000764a:	4621      	mov	r1, r4
      yield = pdFALSE;
9000764c:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000764e:	f001 f953 	bl	900088f8 <xQueueReceiveFromISR>
90007652:	2801      	cmp	r0, #1
90007654:	d113      	bne.n	9000767e <osSemaphoreAcquire+0x4e>
        portYIELD_FROM_ISR (yield);
90007656:	9b01      	ldr	r3, [sp, #4]
90007658:	b9a3      	cbnz	r3, 90007684 <osSemaphoreAcquire+0x54>
  stat = osOK;
9000765a:	2000      	movs	r0, #0
9000765c:	e7ed      	b.n	9000763a <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
9000765e:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
90007662:	b913      	cbnz	r3, 9000766a <osSemaphoreAcquire+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
90007664:	f3ef 8311 	mrs	r3, BASEPRI
90007668:	b11b      	cbz	r3, 90007672 <osSemaphoreAcquire+0x42>
9000766a:	4b0c      	ldr	r3, [pc, #48]	; (9000769c <osSemaphoreAcquire+0x6c>)
9000766c:	681b      	ldr	r3, [r3, #0]
9000766e:	2b02      	cmp	r3, #2
90007670:	d0e8      	beq.n	90007644 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
90007672:	4621      	mov	r1, r4
90007674:	f001 f850 	bl	90008718 <xQueueSemaphoreTake>
90007678:	2801      	cmp	r0, #1
9000767a:	d0ee      	beq.n	9000765a <osSemaphoreAcquire+0x2a>
      if (timeout != 0U) {
9000767c:	b95c      	cbnz	r4, 90007696 <osSemaphoreAcquire+0x66>
        stat = osErrorResource;
9000767e:	f06f 0002 	mvn.w	r0, #2
90007682:	e7da      	b.n	9000763a <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
90007684:	4b06      	ldr	r3, [pc, #24]	; (900076a0 <osSemaphoreAcquire+0x70>)
90007686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000768a:	601a      	str	r2, [r3, #0]
9000768c:	f3bf 8f4f 	dsb	sy
90007690:	f3bf 8f6f 	isb	sy
90007694:	e7e1      	b.n	9000765a <osSemaphoreAcquire+0x2a>
        stat = osErrorTimeout;
90007696:	f06f 0001 	mvn.w	r0, #1
  return (stat);
9000769a:	e7ce      	b.n	9000763a <osSemaphoreAcquire+0xa>
9000769c:	20004aec 	.word	0x20004aec
900076a0:	e000ed04 	.word	0xe000ed04

900076a4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
900076a4:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
900076a6:	b360      	cbz	r0, 90007702 <osSemaphoreRelease+0x5e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
900076a8:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
900076ac:	b14b      	cbz	r3, 900076c2 <osSemaphoreRelease+0x1e>
    yield = pdFALSE;
900076ae:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
900076b0:	a901      	add	r1, sp, #4
    yield = pdFALSE;
900076b2:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
900076b4:	f000 ff2d 	bl	90008512 <xQueueGiveFromISR>
900076b8:	2801      	cmp	r0, #1
900076ba:	d014      	beq.n	900076e6 <osSemaphoreRelease+0x42>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
900076bc:	f06f 0002 	mvn.w	r0, #2
900076c0:	e014      	b.n	900076ec <osSemaphoreRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
900076c2:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
900076c6:	b913      	cbnz	r3, 900076ce <osSemaphoreRelease+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
900076c8:	f3ef 8311 	mrs	r3, BASEPRI
900076cc:	b11b      	cbz	r3, 900076d6 <osSemaphoreRelease+0x32>
900076ce:	4b0e      	ldr	r3, [pc, #56]	; (90007708 <osSemaphoreRelease+0x64>)
900076d0:	681b      	ldr	r3, [r3, #0]
900076d2:	2b02      	cmp	r3, #2
900076d4:	d0eb      	beq.n	900076ae <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
900076d6:	2300      	movs	r3, #0
900076d8:	461a      	mov	r2, r3
900076da:	4619      	mov	r1, r3
900076dc:	f000 fda4 	bl	90008228 <xQueueGenericSend>
900076e0:	2801      	cmp	r0, #1
900076e2:	d002      	beq.n	900076ea <osSemaphoreRelease+0x46>
900076e4:	e7ea      	b.n	900076bc <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
900076e6:	9b01      	ldr	r3, [sp, #4]
900076e8:	b913      	cbnz	r3, 900076f0 <osSemaphoreRelease+0x4c>
  stat = osOK;
900076ea:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
900076ec:	b002      	add	sp, #8
900076ee:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
900076f0:	4b06      	ldr	r3, [pc, #24]	; (9000770c <osSemaphoreRelease+0x68>)
900076f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900076f6:	601a      	str	r2, [r3, #0]
900076f8:	f3bf 8f4f 	dsb	sy
900076fc:	f3bf 8f6f 	isb	sy
90007700:	e7f3      	b.n	900076ea <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
90007702:	f06f 0003 	mvn.w	r0, #3
  return (stat);
90007706:	e7f1      	b.n	900076ec <osSemaphoreRelease+0x48>
90007708:	20004aec 	.word	0x20004aec
9000770c:	e000ed04 	.word	0xe000ed04

90007710 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  uint32_t count;

  if (hSemaphore == NULL) {
90007710:	4603      	mov	r3, r0
90007712:	b190      	cbz	r0, 9000773a <osSemaphoreGetCount+0x2a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
90007714:	f3ef 8205 	mrs	r2, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
90007718:	b112      	cbz	r2, 90007720 <osSemaphoreGetCount+0x10>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
9000771a:	4618      	mov	r0, r3
9000771c:	f001 b958 	b.w	900089d0 <uxQueueMessagesWaitingFromISR>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
90007720:	f3ef 8210 	mrs	r2, PRIMASK
  else if (IS_IRQ()) {
90007724:	b912      	cbnz	r2, 9000772c <osSemaphoreGetCount+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
90007726:	f3ef 8211 	mrs	r2, BASEPRI
9000772a:	b11a      	cbz	r2, 90007734 <osSemaphoreGetCount+0x24>
9000772c:	4a03      	ldr	r2, [pc, #12]	; (9000773c <osSemaphoreGetCount+0x2c>)
9000772e:	6812      	ldr	r2, [r2, #0]
90007730:	2a02      	cmp	r2, #2
90007732:	d0f2      	beq.n	9000771a <osSemaphoreGetCount+0xa>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
90007734:	4618      	mov	r0, r3
90007736:	f001 b934 	b.w	900089a2 <uxQueueMessagesWaiting>
  }

  return (count);
}
9000773a:	4770      	bx	lr
9000773c:	20004aec 	.word	0x20004aec

90007740 <osSemaphoreDelete>:

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
90007740:	b507      	push	{r0, r1, r2, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
90007742:	f3ef 8305 	mrs	r3, IPSR
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
90007746:	b123      	cbz	r3, 90007752 <osSemaphoreDelete+0x12>
    stat = osErrorISR;
90007748:	f06f 0005 	mvn.w	r0, #5
#else
  stat = osError;
#endif

  return (stat);
}
9000774c:	b003      	add	sp, #12
9000774e:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
90007752:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
90007756:	b913      	cbnz	r3, 9000775e <osSemaphoreDelete+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
90007758:	f3ef 8311 	mrs	r3, BASEPRI
9000775c:	b11b      	cbz	r3, 90007766 <osSemaphoreDelete+0x26>
9000775e:	4b08      	ldr	r3, [pc, #32]	; (90007780 <osSemaphoreDelete+0x40>)
90007760:	681b      	ldr	r3, [r3, #0]
90007762:	2b02      	cmp	r3, #2
90007764:	d0f0      	beq.n	90007748 <osSemaphoreDelete+0x8>
  else if (hSemaphore == NULL) {
90007766:	b138      	cbz	r0, 90007778 <osSemaphoreDelete+0x38>
    vQueueUnregisterQueue (hSemaphore);
90007768:	9001      	str	r0, [sp, #4]
9000776a:	f001 f951 	bl	90008a10 <vQueueUnregisterQueue>
    vSemaphoreDelete (hSemaphore);
9000776e:	9801      	ldr	r0, [sp, #4]
90007770:	f001 f966 	bl	90008a40 <vQueueDelete>
    stat = osOK;
90007774:	2000      	movs	r0, #0
90007776:	e7e9      	b.n	9000774c <osSemaphoreDelete+0xc>
    stat = osErrorParameter;
90007778:	f06f 0003 	mvn.w	r0, #3
  return (stat);
9000777c:	e7e6      	b.n	9000774c <osSemaphoreDelete+0xc>
9000777e:	bf00      	nop
90007780:	20004aec 	.word	0x20004aec

90007784 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
90007784:	b573      	push	{r0, r1, r4, r5, r6, lr}
90007786:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
90007788:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
9000778c:	b11b      	cbz	r3, 90007796 <osMessageQueueNew+0x12>
  hQueue = NULL;
9000778e:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
90007790:	4628      	mov	r0, r5
90007792:	b002      	add	sp, #8
90007794:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
90007796:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
9000779a:	b913      	cbnz	r3, 900077a2 <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
9000779c:	f3ef 8311 	mrs	r3, BASEPRI
900077a0:	b11b      	cbz	r3, 900077aa <osMessageQueueNew+0x26>
900077a2:	4b1a      	ldr	r3, [pc, #104]	; (9000780c <osMessageQueueNew+0x88>)
900077a4:	681b      	ldr	r3, [r3, #0]
900077a6:	2b02      	cmp	r3, #2
900077a8:	d0f1      	beq.n	9000778e <osMessageQueueNew+0xa>
900077aa:	2800      	cmp	r0, #0
900077ac:	d0ef      	beq.n	9000778e <osMessageQueueNew+0xa>
900077ae:	2900      	cmp	r1, #0
900077b0:	d0ed      	beq.n	9000778e <osMessageQueueNew+0xa>
    if (attr != NULL) {
900077b2:	b1ec      	cbz	r4, 900077f0 <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
900077b4:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
900077b8:	b193      	cbz	r3, 900077e0 <osMessageQueueNew+0x5c>
900077ba:	2a4f      	cmp	r2, #79	; 0x4f
900077bc:	d9e7      	bls.n	9000778e <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
900077be:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
900077c0:	2a00      	cmp	r2, #0
900077c2:	d0e4      	beq.n	9000778e <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
900077c4:	fb01 f500 	mul.w	r5, r1, r0
900077c8:	6966      	ldr	r6, [r4, #20]
900077ca:	42ae      	cmp	r6, r5
900077cc:	d3df      	bcc.n	9000778e <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
900077ce:	2500      	movs	r5, #0
900077d0:	9500      	str	r5, [sp, #0]
900077d2:	f000 fc5f 	bl	90008094 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
900077d6:	4605      	mov	r5, r0
900077d8:	2800      	cmp	r0, #0
900077da:	d0d8      	beq.n	9000778e <osMessageQueueNew+0xa>
        name = attr->name;
900077dc:	6824      	ldr	r4, [r4, #0]
900077de:	e00f      	b.n	90007800 <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
900077e0:	2a00      	cmp	r2, #0
900077e2:	d1d4      	bne.n	9000778e <osMessageQueueNew+0xa>
900077e4:	6923      	ldr	r3, [r4, #16]
900077e6:	2b00      	cmp	r3, #0
900077e8:	d1d1      	bne.n	9000778e <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
900077ea:	6963      	ldr	r3, [r4, #20]
900077ec:	2b00      	cmp	r3, #0
900077ee:	d1ce      	bne.n	9000778e <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
900077f0:	2200      	movs	r2, #0
900077f2:	f000 fca7 	bl	90008144 <xQueueGenericCreate>
    if (hQueue != NULL) {
900077f6:	4605      	mov	r5, r0
900077f8:	2800      	cmp	r0, #0
900077fa:	d0c8      	beq.n	9000778e <osMessageQueueNew+0xa>
      if (attr != NULL) {
900077fc:	2c00      	cmp	r4, #0
900077fe:	d1ed      	bne.n	900077dc <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
90007800:	4621      	mov	r1, r4
90007802:	4628      	mov	r0, r5
90007804:	f001 f8f2 	bl	900089ec <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
90007808:	e7c2      	b.n	90007790 <osMessageQueueNew+0xc>
9000780a:	bf00      	nop
9000780c:	20004aec 	.word	0x20004aec

90007810 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
90007810:	b513      	push	{r0, r1, r4, lr}
90007812:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
90007814:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
90007818:	b123      	cbz	r3, 90007824 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000781a:	b9d8      	cbnz	r0, 90007854 <osMessageQueuePut+0x44>
      stat = osErrorParameter;
9000781c:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
90007820:	b002      	add	sp, #8
90007822:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
90007824:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
90007828:	b913      	cbnz	r3, 90007830 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
9000782a:	f3ef 8311 	mrs	r3, BASEPRI
9000782e:	b11b      	cbz	r3, 90007838 <osMessageQueuePut+0x28>
90007830:	4b16      	ldr	r3, [pc, #88]	; (9000788c <osMessageQueuePut+0x7c>)
90007832:	681b      	ldr	r3, [r3, #0]
90007834:	2b02      	cmp	r3, #2
90007836:	d0f0      	beq.n	9000781a <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
90007838:	2800      	cmp	r0, #0
9000783a:	d0ef      	beq.n	9000781c <osMessageQueuePut+0xc>
9000783c:	2900      	cmp	r1, #0
9000783e:	d0ed      	beq.n	9000781c <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
90007840:	2300      	movs	r3, #0
90007842:	4622      	mov	r2, r4
90007844:	f000 fcf0 	bl	90008228 <xQueueGenericSend>
90007848:	2801      	cmp	r0, #1
9000784a:	d010      	beq.n	9000786e <osMessageQueuePut+0x5e>
        if (timeout != 0U) {
9000784c:	b9d4      	cbnz	r4, 90007884 <osMessageQueuePut+0x74>
          stat = osErrorResource;
9000784e:	f06f 0002 	mvn.w	r0, #2
90007852:	e7e5      	b.n	90007820 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
90007854:	2900      	cmp	r1, #0
90007856:	d0e1      	beq.n	9000781c <osMessageQueuePut+0xc>
90007858:	2c00      	cmp	r4, #0
9000785a:	d1df      	bne.n	9000781c <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000785c:	4623      	mov	r3, r4
9000785e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
90007860:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
90007862:	f000 fded 	bl	90008440 <xQueueGenericSendFromISR>
90007866:	2801      	cmp	r0, #1
90007868:	d1f1      	bne.n	9000784e <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
9000786a:	9b01      	ldr	r3, [sp, #4]
9000786c:	b90b      	cbnz	r3, 90007872 <osMessageQueuePut+0x62>
  stat = osOK;
9000786e:	2000      	movs	r0, #0
90007870:	e7d6      	b.n	90007820 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
90007872:	4b07      	ldr	r3, [pc, #28]	; (90007890 <osMessageQueuePut+0x80>)
90007874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90007878:	601a      	str	r2, [r3, #0]
9000787a:	f3bf 8f4f 	dsb	sy
9000787e:	f3bf 8f6f 	isb	sy
90007882:	e7f4      	b.n	9000786e <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
90007884:	f06f 0001 	mvn.w	r0, #1
  return (stat);
90007888:	e7ca      	b.n	90007820 <osMessageQueuePut+0x10>
9000788a:	bf00      	nop
9000788c:	20004aec 	.word	0x20004aec
90007890:	e000ed04 	.word	0xe000ed04

90007894 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
90007894:	b513      	push	{r0, r1, r4, lr}
90007896:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
90007898:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
9000789c:	b123      	cbz	r3, 900078a8 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000789e:	b9d0      	cbnz	r0, 900078d6 <osMessageQueueGet+0x42>
      stat = osErrorParameter;
900078a0:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
900078a4:	b002      	add	sp, #8
900078a6:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
900078a8:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
900078ac:	b913      	cbnz	r3, 900078b4 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
900078ae:	f3ef 8311 	mrs	r3, BASEPRI
900078b2:	b11b      	cbz	r3, 900078bc <osMessageQueueGet+0x28>
900078b4:	4b15      	ldr	r3, [pc, #84]	; (9000790c <osMessageQueueGet+0x78>)
900078b6:	681b      	ldr	r3, [r3, #0]
900078b8:	2b02      	cmp	r3, #2
900078ba:	d0f0      	beq.n	9000789e <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
900078bc:	2800      	cmp	r0, #0
900078be:	d0ef      	beq.n	900078a0 <osMessageQueueGet+0xc>
900078c0:	2900      	cmp	r1, #0
900078c2:	d0ed      	beq.n	900078a0 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
900078c4:	4622      	mov	r2, r4
900078c6:	f000 fe81 	bl	900085cc <xQueueReceive>
900078ca:	2801      	cmp	r0, #1
900078cc:	d00f      	beq.n	900078ee <osMessageQueueGet+0x5a>
        if (timeout != 0U) {
900078ce:	b9cc      	cbnz	r4, 90007904 <osMessageQueueGet+0x70>
          stat = osErrorResource;
900078d0:	f06f 0002 	mvn.w	r0, #2
900078d4:	e7e6      	b.n	900078a4 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
900078d6:	2900      	cmp	r1, #0
900078d8:	d0e2      	beq.n	900078a0 <osMessageQueueGet+0xc>
900078da:	2c00      	cmp	r4, #0
900078dc:	d1e0      	bne.n	900078a0 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
900078de:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
900078e0:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
900078e2:	f001 f809 	bl	900088f8 <xQueueReceiveFromISR>
900078e6:	2801      	cmp	r0, #1
900078e8:	d1f2      	bne.n	900078d0 <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
900078ea:	9b01      	ldr	r3, [sp, #4]
900078ec:	b90b      	cbnz	r3, 900078f2 <osMessageQueueGet+0x5e>
  stat = osOK;
900078ee:	2000      	movs	r0, #0
900078f0:	e7d8      	b.n	900078a4 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
900078f2:	4b07      	ldr	r3, [pc, #28]	; (90007910 <osMessageQueueGet+0x7c>)
900078f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900078f8:	601a      	str	r2, [r3, #0]
900078fa:	f3bf 8f4f 	dsb	sy
900078fe:	f3bf 8f6f 	isb	sy
90007902:	e7f4      	b.n	900078ee <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
90007904:	f06f 0001 	mvn.w	r0, #1
  return (stat);
90007908:	e7cc      	b.n	900078a4 <osMessageQueueGet+0x10>
9000790a:	bf00      	nop
9000790c:	20004aec 	.word	0x20004aec
90007910:	e000ed04 	.word	0xe000ed04

90007914 <osMessageQueueGetCount>:
90007914:	f7ff befc 	b.w	90007710 <osSemaphoreGetCount>

90007918 <osMessageQueueDelete>:
90007918:	f7ff bf12 	b.w	90007740 <osSemaphoreDelete>

9000791c <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000791c:	4b03      	ldr	r3, [pc, #12]	; (9000792c <vApplicationGetIdleTaskMemory+0x10>)
9000791e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
90007920:	4b03      	ldr	r3, [pc, #12]	; (90007930 <vApplicationGetIdleTaskMemory+0x14>)
90007922:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
90007924:	2380      	movs	r3, #128	; 0x80
90007926:	6013      	str	r3, [r2, #0]
}
90007928:	4770      	bx	lr
9000792a:	bf00      	nop
9000792c:	20004a8c 	.word	0x20004a8c
90007930:	2000488c 	.word	0x2000488c

90007934 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
90007934:	4b03      	ldr	r3, [pc, #12]	; (90007944 <vApplicationGetTimerTaskMemory+0x10>)
90007936:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
90007938:	4b03      	ldr	r3, [pc, #12]	; (90007948 <vApplicationGetTimerTaskMemory+0x14>)
9000793a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000793c:	f44f 7380 	mov.w	r3, #256	; 0x100
90007940:	6013      	str	r3, [r2, #0]
}
90007942:	4770      	bx	lr
90007944:	20004ef0 	.word	0x20004ef0
90007948:	20004af0 	.word	0x20004af0

9000794c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000794c:	4b0f      	ldr	r3, [pc, #60]	; (9000798c <prvInsertBlockIntoFreeList+0x40>)
{
9000794e:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
90007950:	461a      	mov	r2, r3
90007952:	681b      	ldr	r3, [r3, #0]
90007954:	4283      	cmp	r3, r0
90007956:	d3fb      	bcc.n	90007950 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
90007958:	6854      	ldr	r4, [r2, #4]
9000795a:	1911      	adds	r1, r2, r4
9000795c:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000795e:	bf01      	itttt	eq
90007960:	6841      	ldreq	r1, [r0, #4]
90007962:	4610      	moveq	r0, r2
90007964:	1909      	addeq	r1, r1, r4
90007966:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
90007968:	6844      	ldr	r4, [r0, #4]
9000796a:	1901      	adds	r1, r0, r4
9000796c:	428b      	cmp	r3, r1
9000796e:	d107      	bne.n	90007980 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
90007970:	4907      	ldr	r1, [pc, #28]	; (90007990 <prvInsertBlockIntoFreeList+0x44>)
90007972:	6809      	ldr	r1, [r1, #0]
90007974:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
90007976:	bf1f      	itttt	ne
90007978:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000797a:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000797c:	1909      	addne	r1, r1, r4
9000797e:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
90007980:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
90007982:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
90007984:	bf18      	it	ne
90007986:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
90007988:	bd10      	pop	{r4, pc}
9000798a:	bf00      	nop
9000798c:	20026020 	.word	0x20026020
90007990:	20004f50 	.word	0x20004f50

90007994 <pvPortMalloc>:
{
90007994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90007998:	4604      	mov	r4, r0
	vTaskSuspendAll();
9000799a:	f001 fabd 	bl	90008f18 <vTaskSuspendAll>
		if( pxEnd == NULL )
9000799e:	4b3d      	ldr	r3, [pc, #244]	; (90007a94 <pvPortMalloc+0x100>)
900079a0:	483d      	ldr	r0, [pc, #244]	; (90007a98 <pvPortMalloc+0x104>)
900079a2:	681a      	ldr	r2, [r3, #0]
900079a4:	469c      	mov	ip, r3
900079a6:	b9d2      	cbnz	r2, 900079de <pvPortMalloc+0x4a>
	uxAddress = ( size_t ) ucHeap;
900079a8:	4a3c      	ldr	r2, [pc, #240]	; (90007a9c <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
900079aa:	2100      	movs	r1, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
900079ac:	4b3c      	ldr	r3, [pc, #240]	; (90007aa0 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
900079ae:	0755      	lsls	r5, r2, #29
	xStart.xBlockSize = ( size_t ) 0;
900079b0:	6059      	str	r1, [r3, #4]
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
900079b2:	bf1c      	itt	ne
900079b4:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
900079b6:	f022 0207 	bicne.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
900079ba:	601a      	str	r2, [r3, #0]
	uxAddress -= xHeapStructSize;
900079bc:	4b39      	ldr	r3, [pc, #228]	; (90007aa4 <pvPortMalloc+0x110>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
900079be:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
900079c2:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
900079c6:	1a99      	subs	r1, r3, r2
	pxEnd = ( void * ) uxAddress;
900079c8:	f8cc 3000 	str.w	r3, [ip]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
900079cc:	e9c2 3100 	strd	r3, r1, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
900079d0:	4b35      	ldr	r3, [pc, #212]	; (90007aa8 <pvPortMalloc+0x114>)
900079d2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
900079d4:	4b35      	ldr	r3, [pc, #212]	; (90007aac <pvPortMalloc+0x118>)
900079d6:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
900079d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
900079dc:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
900079de:	6807      	ldr	r7, [r0, #0]
900079e0:	4227      	tst	r7, r4
900079e2:	d152      	bne.n	90007a8a <pvPortMalloc+0xf6>
			if( xWantedSize > 0 )
900079e4:	2c00      	cmp	r4, #0
900079e6:	d041      	beq.n	90007a6c <pvPortMalloc+0xd8>
				xWantedSize += xHeapStructSize;
900079e8:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
900079ec:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
900079ee:	bf1c      	itt	ne
900079f0:	f023 0307 	bicne.w	r3, r3, #7
900079f4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
900079f6:	2b00      	cmp	r3, #0
900079f8:	d047      	beq.n	90007a8a <pvPortMalloc+0xf6>
900079fa:	4a2c      	ldr	r2, [pc, #176]	; (90007aac <pvPortMalloc+0x118>)
900079fc:	6816      	ldr	r6, [r2, #0]
900079fe:	4690      	mov	r8, r2
90007a00:	429e      	cmp	r6, r3
90007a02:	d342      	bcc.n	90007a8a <pvPortMalloc+0xf6>
				pxBlock = xStart.pxNextFreeBlock;
90007a04:	4a26      	ldr	r2, [pc, #152]	; (90007aa0 <pvPortMalloc+0x10c>)
90007a06:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
90007a08:	6869      	ldr	r1, [r5, #4]
90007a0a:	4299      	cmp	r1, r3
90007a0c:	d201      	bcs.n	90007a12 <pvPortMalloc+0x7e>
90007a0e:	6828      	ldr	r0, [r5, #0]
90007a10:	b9b8      	cbnz	r0, 90007a42 <pvPortMalloc+0xae>
				if( pxBlock != pxEnd )
90007a12:	f8dc 0000 	ldr.w	r0, [ip]
90007a16:	42a8      	cmp	r0, r5
90007a18:	d037      	beq.n	90007a8a <pvPortMalloc+0xf6>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
90007a1a:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
90007a1c:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
90007a1e:	6814      	ldr	r4, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
90007a20:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
90007a22:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
90007a24:	d914      	bls.n	90007a50 <pvPortMalloc+0xbc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
90007a26:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
90007a28:	0742      	lsls	r2, r0, #29
90007a2a:	d00d      	beq.n	90007a48 <pvPortMalloc+0xb4>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
90007a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
90007a30:	b672      	cpsid	i
90007a32:	f383 8811 	msr	BASEPRI, r3
90007a36:	f3bf 8f6f 	isb	sy
90007a3a:	f3bf 8f4f 	dsb	sy
90007a3e:	b662      	cpsie	i
90007a40:	e7fe      	b.n	90007a40 <pvPortMalloc+0xac>
90007a42:	462a      	mov	r2, r5
90007a44:	4605      	mov	r5, r0
90007a46:	e7df      	b.n	90007a08 <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
90007a48:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
90007a4a:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
90007a4c:	f7ff ff7e 	bl	9000794c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
90007a50:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
90007a52:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
90007a54:	4914      	ldr	r1, [pc, #80]	; (90007aa8 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
90007a56:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
90007a58:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
90007a5a:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
90007a5c:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
90007a5e:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
90007a62:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
90007a64:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
90007a66:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
90007a68:	bf38      	it	cc
90007a6a:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
90007a6c:	f001 fb02 	bl	90009074 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
90007a70:	0763      	lsls	r3, r4, #29
90007a72:	d00c      	beq.n	90007a8e <pvPortMalloc+0xfa>
90007a74:	f04f 0350 	mov.w	r3, #80	; 0x50
90007a78:	b672      	cpsid	i
90007a7a:	f383 8811 	msr	BASEPRI, r3
90007a7e:	f3bf 8f6f 	isb	sy
90007a82:	f3bf 8f4f 	dsb	sy
90007a86:	b662      	cpsie	i
90007a88:	e7fe      	b.n	90007a88 <pvPortMalloc+0xf4>
void *pvReturn = NULL;
90007a8a:	2400      	movs	r4, #0
90007a8c:	e7ee      	b.n	90007a6c <pvPortMalloc+0xd8>
}
90007a8e:	4620      	mov	r0, r4
90007a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90007a94:	20004f50 	.word	0x20004f50
90007a98:	20026014 	.word	0x20026014
90007a9c:	20004f54 	.word	0x20004f54
90007aa0:	20026020 	.word	0x20026020
90007aa4:	2002600c 	.word	0x2002600c
90007aa8:	2002601c 	.word	0x2002601c
90007aac:	20026018 	.word	0x20026018

90007ab0 <vPortFree>:
{
90007ab0:	b510      	push	{r4, lr}
	if( pv != NULL )
90007ab2:	4604      	mov	r4, r0
90007ab4:	2800      	cmp	r0, #0
90007ab6:	d032      	beq.n	90007b1e <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
90007ab8:	4a19      	ldr	r2, [pc, #100]	; (90007b20 <vPortFree+0x70>)
90007aba:	f850 3c04 	ldr.w	r3, [r0, #-4]
90007abe:	6812      	ldr	r2, [r2, #0]
90007ac0:	4213      	tst	r3, r2
90007ac2:	d10a      	bne.n	90007ada <vPortFree+0x2a>
90007ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
90007ac8:	b672      	cpsid	i
90007aca:	f383 8811 	msr	BASEPRI, r3
90007ace:	f3bf 8f6f 	isb	sy
90007ad2:	f3bf 8f4f 	dsb	sy
90007ad6:	b662      	cpsie	i
90007ad8:	e7fe      	b.n	90007ad8 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
90007ada:	f850 1c08 	ldr.w	r1, [r0, #-8]
90007ade:	b151      	cbz	r1, 90007af6 <vPortFree+0x46>
90007ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
90007ae4:	b672      	cpsid	i
90007ae6:	f383 8811 	msr	BASEPRI, r3
90007aea:	f3bf 8f6f 	isb	sy
90007aee:	f3bf 8f4f 	dsb	sy
90007af2:	b662      	cpsie	i
90007af4:	e7fe      	b.n	90007af4 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
90007af6:	ea23 0302 	bic.w	r3, r3, r2
90007afa:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
90007afe:	f001 fa0b 	bl	90008f18 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
90007b02:	4a08      	ldr	r2, [pc, #32]	; (90007b24 <vPortFree+0x74>)
90007b04:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
90007b08:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
90007b0c:	6811      	ldr	r1, [r2, #0]
90007b0e:	440b      	add	r3, r1
90007b10:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
90007b12:	f7ff ff1b 	bl	9000794c <prvInsertBlockIntoFreeList>
}
90007b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
90007b1a:	f001 baab 	b.w	90009074 <xTaskResumeAll>
}
90007b1e:	bd10      	pop	{r4, pc}
90007b20:	20026014 	.word	0x20026014
90007b24:	20026018 	.word	0x20026018

90007b28 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
90007b28:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
90007b2c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
90007b30:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
90007b32:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
90007b34:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
90007b38:	2300      	movs	r3, #0
90007b3a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
90007b3c:	4770      	bx	lr

90007b3e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
90007b3e:	2300      	movs	r3, #0
90007b40:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
90007b42:	4770      	bx	lr

90007b44 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
90007b44:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
90007b46:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
90007b48:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
90007b4a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
90007b4c:	689a      	ldr	r2, [r3, #8]
90007b4e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
90007b50:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
90007b52:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
90007b54:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
90007b56:	3301      	adds	r3, #1
90007b58:	6003      	str	r3, [r0, #0]
}
90007b5a:	4770      	bx	lr

90007b5c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
90007b5c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
90007b5e:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
90007b60:	1c63      	adds	r3, r4, #1
90007b62:	d10a      	bne.n	90007b7a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
90007b64:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
90007b66:	685a      	ldr	r2, [r3, #4]
90007b68:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
90007b6a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
90007b6c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
90007b6e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
90007b70:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
90007b72:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
90007b74:	3301      	adds	r3, #1
90007b76:	6003      	str	r3, [r0, #0]
}
90007b78:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
90007b7a:	f100 0208 	add.w	r2, r0, #8
90007b7e:	4613      	mov	r3, r2
90007b80:	6852      	ldr	r2, [r2, #4]
90007b82:	6815      	ldr	r5, [r2, #0]
90007b84:	42a5      	cmp	r5, r4
90007b86:	d9fa      	bls.n	90007b7e <vListInsert+0x22>
90007b88:	e7ed      	b.n	90007b66 <vListInsert+0xa>

90007b8a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
90007b8a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
90007b8c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
90007b90:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
90007b92:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
90007b94:	6859      	ldr	r1, [r3, #4]
90007b96:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
90007b98:	bf08      	it	eq
90007b9a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
90007b9c:	2200      	movs	r2, #0
90007b9e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
90007ba0:	681a      	ldr	r2, [r3, #0]
90007ba2:	3a01      	subs	r2, #1
90007ba4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
90007ba6:	6818      	ldr	r0, [r3, #0]
}
90007ba8:	4770      	bx	lr
	...

90007bac <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
90007bac:	4808      	ldr	r0, [pc, #32]	; (90007bd0 <prvPortStartFirstTask+0x24>)
90007bae:	6800      	ldr	r0, [r0, #0]
90007bb0:	6800      	ldr	r0, [r0, #0]
90007bb2:	f380 8808 	msr	MSP, r0
90007bb6:	f04f 0000 	mov.w	r0, #0
90007bba:	f380 8814 	msr	CONTROL, r0
90007bbe:	b662      	cpsie	i
90007bc0:	b661      	cpsie	f
90007bc2:	f3bf 8f4f 	dsb	sy
90007bc6:	f3bf 8f6f 	isb	sy
90007bca:	df00      	svc	0
90007bcc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
90007bce:	0000      	.short	0x0000
90007bd0:	e000ed08 	.word	0xe000ed08

90007bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
90007bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 90007be4 <vPortEnableVFP+0x10>
90007bd8:	6801      	ldr	r1, [r0, #0]
90007bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
90007bde:	6001      	str	r1, [r0, #0]
90007be0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
90007be2:	0000      	.short	0x0000
90007be4:	e000ed88 	.word	0xe000ed88

90007be8 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
90007be8:	2300      	movs	r3, #0
{
90007bea:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
90007bec:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
90007bee:	4b0f      	ldr	r3, [pc, #60]	; (90007c2c <prvTaskExitError+0x44>)
90007bf0:	681b      	ldr	r3, [r3, #0]
90007bf2:	3301      	adds	r3, #1
90007bf4:	d00a      	beq.n	90007c0c <prvTaskExitError+0x24>
90007bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
90007bfa:	b672      	cpsid	i
90007bfc:	f383 8811 	msr	BASEPRI, r3
90007c00:	f3bf 8f6f 	isb	sy
90007c04:	f3bf 8f4f 	dsb	sy
90007c08:	b662      	cpsie	i
90007c0a:	e7fe      	b.n	90007c0a <prvTaskExitError+0x22>
90007c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
90007c10:	b672      	cpsid	i
90007c12:	f383 8811 	msr	BASEPRI, r3
90007c16:	f3bf 8f6f 	isb	sy
90007c1a:	f3bf 8f4f 	dsb	sy
90007c1e:	b662      	cpsie	i
	while( ulDummy == 0 )
90007c20:	9b01      	ldr	r3, [sp, #4]
90007c22:	2b00      	cmp	r3, #0
90007c24:	d0fc      	beq.n	90007c20 <prvTaskExitError+0x38>
}
90007c26:	b002      	add	sp, #8
90007c28:	4770      	bx	lr
90007c2a:	bf00      	nop
90007c2c:	20000044 	.word	0x20000044

90007c30 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
90007c30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
90007c34:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
90007c38:	f840 2c20 	str.w	r2, [r0, #-32]
}
90007c3c:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
90007c3e:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
90007c40:	4b03      	ldr	r3, [pc, #12]	; (90007c50 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
90007c42:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
90007c44:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
90007c46:	f06f 0302 	mvn.w	r3, #2
90007c4a:	6203      	str	r3, [r0, #32]
}
90007c4c:	4770      	bx	lr
90007c4e:	bf00      	nop
90007c50:	90007be9 	.word	0x90007be9
	...

90007c60 <SVC_Handler>:
	__asm volatile (
90007c60:	4b07      	ldr	r3, [pc, #28]	; (90007c80 <pxCurrentTCBConst2>)
90007c62:	6819      	ldr	r1, [r3, #0]
90007c64:	6808      	ldr	r0, [r1, #0]
90007c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90007c6a:	f380 8809 	msr	PSP, r0
90007c6e:	f3bf 8f6f 	isb	sy
90007c72:	f04f 0000 	mov.w	r0, #0
90007c76:	f380 8811 	msr	BASEPRI, r0
90007c7a:	4770      	bx	lr
90007c7c:	f3af 8000 	nop.w

90007c80 <pxCurrentTCBConst2>:
90007c80:	20026030 	.word	0x20026030

90007c84 <vPortEnterCritical>:
90007c84:	f04f 0350 	mov.w	r3, #80	; 0x50
90007c88:	b672      	cpsid	i
90007c8a:	f383 8811 	msr	BASEPRI, r3
90007c8e:	f3bf 8f6f 	isb	sy
90007c92:	f3bf 8f4f 	dsb	sy
90007c96:	b662      	cpsie	i
	uxCriticalNesting++;
90007c98:	4a0b      	ldr	r2, [pc, #44]	; (90007cc8 <vPortEnterCritical+0x44>)
90007c9a:	6813      	ldr	r3, [r2, #0]
90007c9c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
90007c9e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
90007ca0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
90007ca2:	d10f      	bne.n	90007cc4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
90007ca4:	4b09      	ldr	r3, [pc, #36]	; (90007ccc <vPortEnterCritical+0x48>)
90007ca6:	681b      	ldr	r3, [r3, #0]
90007ca8:	f013 0fff 	tst.w	r3, #255	; 0xff
90007cac:	d00a      	beq.n	90007cc4 <vPortEnterCritical+0x40>
90007cae:	f04f 0350 	mov.w	r3, #80	; 0x50
90007cb2:	b672      	cpsid	i
90007cb4:	f383 8811 	msr	BASEPRI, r3
90007cb8:	f3bf 8f6f 	isb	sy
90007cbc:	f3bf 8f4f 	dsb	sy
90007cc0:	b662      	cpsie	i
90007cc2:	e7fe      	b.n	90007cc2 <vPortEnterCritical+0x3e>
}
90007cc4:	4770      	bx	lr
90007cc6:	bf00      	nop
90007cc8:	20000044 	.word	0x20000044
90007ccc:	e000ed04 	.word	0xe000ed04

90007cd0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
90007cd0:	4a09      	ldr	r2, [pc, #36]	; (90007cf8 <vPortExitCritical+0x28>)
90007cd2:	6813      	ldr	r3, [r2, #0]
90007cd4:	b953      	cbnz	r3, 90007cec <vPortExitCritical+0x1c>
90007cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
90007cda:	b672      	cpsid	i
90007cdc:	f383 8811 	msr	BASEPRI, r3
90007ce0:	f3bf 8f6f 	isb	sy
90007ce4:	f3bf 8f4f 	dsb	sy
90007ce8:	b662      	cpsie	i
90007cea:	e7fe      	b.n	90007cea <vPortExitCritical+0x1a>
	uxCriticalNesting--;
90007cec:	3b01      	subs	r3, #1
90007cee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
90007cf0:	b90b      	cbnz	r3, 90007cf6 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
90007cf2:	f383 8811 	msr	BASEPRI, r3
}
90007cf6:	4770      	bx	lr
90007cf8:	20000044 	.word	0x20000044
90007cfc:	00000000 	.word	0x00000000

90007d00 <PendSV_Handler>:
	__asm volatile
90007d00:	f3ef 8009 	mrs	r0, PSP
90007d04:	f3bf 8f6f 	isb	sy
90007d08:	4b15      	ldr	r3, [pc, #84]	; (90007d60 <pxCurrentTCBConst>)
90007d0a:	681a      	ldr	r2, [r3, #0]
90007d0c:	f01e 0f10 	tst.w	lr, #16
90007d10:	bf08      	it	eq
90007d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
90007d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90007d1a:	6010      	str	r0, [r2, #0]
90007d1c:	e92d 0009 	stmdb	sp!, {r0, r3}
90007d20:	f04f 0050 	mov.w	r0, #80	; 0x50
90007d24:	b672      	cpsid	i
90007d26:	f380 8811 	msr	BASEPRI, r0
90007d2a:	f3bf 8f4f 	dsb	sy
90007d2e:	f3bf 8f6f 	isb	sy
90007d32:	b662      	cpsie	i
90007d34:	f001 fa94 	bl	90009260 <vTaskSwitchContext>
90007d38:	f04f 0000 	mov.w	r0, #0
90007d3c:	f380 8811 	msr	BASEPRI, r0
90007d40:	bc09      	pop	{r0, r3}
90007d42:	6819      	ldr	r1, [r3, #0]
90007d44:	6808      	ldr	r0, [r1, #0]
90007d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90007d4a:	f01e 0f10 	tst.w	lr, #16
90007d4e:	bf08      	it	eq
90007d50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
90007d54:	f380 8809 	msr	PSP, r0
90007d58:	f3bf 8f6f 	isb	sy
90007d5c:	4770      	bx	lr
90007d5e:	bf00      	nop

90007d60 <pxCurrentTCBConst>:
90007d60:	20026030 	.word	0x20026030

90007d64 <SysTick_Handler>:
{
90007d64:	b508      	push	{r3, lr}
	__asm volatile
90007d66:	f04f 0350 	mov.w	r3, #80	; 0x50
90007d6a:	b672      	cpsid	i
90007d6c:	f383 8811 	msr	BASEPRI, r3
90007d70:	f3bf 8f6f 	isb	sy
90007d74:	f3bf 8f4f 	dsb	sy
90007d78:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
90007d7a:	f001 f8e3 	bl	90008f44 <xTaskIncrementTick>
90007d7e:	b118      	cbz	r0, 90007d88 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
90007d80:	4b03      	ldr	r3, [pc, #12]	; (90007d90 <SysTick_Handler+0x2c>)
90007d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90007d86:	601a      	str	r2, [r3, #0]
	__asm volatile
90007d88:	2300      	movs	r3, #0
90007d8a:	f383 8811 	msr	BASEPRI, r3
}
90007d8e:	bd08      	pop	{r3, pc}
90007d90:	e000ed04 	.word	0xe000ed04

90007d94 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
90007d94:	2300      	movs	r3, #0
90007d96:	4a08      	ldr	r2, [pc, #32]	; (90007db8 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
90007d98:	4908      	ldr	r1, [pc, #32]	; (90007dbc <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
90007d9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
90007d9c:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
90007d9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
90007da2:	4b07      	ldr	r3, [pc, #28]	; (90007dc0 <vPortSetupTimerInterrupt+0x2c>)
90007da4:	681b      	ldr	r3, [r3, #0]
90007da6:	fbb3 f3f1 	udiv	r3, r3, r1
90007daa:	4906      	ldr	r1, [pc, #24]	; (90007dc4 <vPortSetupTimerInterrupt+0x30>)
90007dac:	3b01      	subs	r3, #1
90007dae:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
90007db0:	2307      	movs	r3, #7
90007db2:	6013      	str	r3, [r2, #0]
}
90007db4:	4770      	bx	lr
90007db6:	bf00      	nop
90007db8:	e000e010 	.word	0xe000e010
90007dbc:	e000e018 	.word	0xe000e018
90007dc0:	20000038 	.word	0x20000038
90007dc4:	e000e014 	.word	0xe000e014

90007dc8 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
90007dc8:	4b2b      	ldr	r3, [pc, #172]	; (90007e78 <xPortStartScheduler+0xb0>)
{
90007dca:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
90007dcc:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
90007dce:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
90007dd0:	b2d2      	uxtb	r2, r2
90007dd2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
90007dd4:	22ff      	movs	r2, #255	; 0xff
90007dd6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
90007dd8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
90007dda:	4a28      	ldr	r2, [pc, #160]	; (90007e7c <xPortStartScheduler+0xb4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
90007ddc:	b2db      	uxtb	r3, r3
90007dde:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
90007de2:	f89d 3003 	ldrb.w	r3, [sp, #3]
90007de6:	f003 0350 	and.w	r3, r3, #80	; 0x50
90007dea:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
90007dec:	2307      	movs	r3, #7
90007dee:	4a24      	ldr	r2, [pc, #144]	; (90007e80 <xPortStartScheduler+0xb8>)
90007df0:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
90007df2:	f89d 0003 	ldrb.w	r0, [sp, #3]
90007df6:	1e5c      	subs	r4, r3, #1
90007df8:	0600      	lsls	r0, r0, #24
90007dfa:	d40e      	bmi.n	90007e1a <xPortStartScheduler+0x52>
90007dfc:	b111      	cbz	r1, 90007e04 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
90007dfe:	2b03      	cmp	r3, #3
90007e00:	6013      	str	r3, [r2, #0]
90007e02:	d013      	beq.n	90007e2c <xPortStartScheduler+0x64>
	__asm volatile
90007e04:	f04f 0350 	mov.w	r3, #80	; 0x50
90007e08:	b672      	cpsid	i
90007e0a:	f383 8811 	msr	BASEPRI, r3
90007e0e:	f3bf 8f6f 	isb	sy
90007e12:	f3bf 8f4f 	dsb	sy
90007e16:	b662      	cpsie	i
90007e18:	e7fe      	b.n	90007e18 <xPortStartScheduler+0x50>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
90007e1a:	f89d 3003 	ldrb.w	r3, [sp, #3]
90007e1e:	2101      	movs	r1, #1
90007e20:	005b      	lsls	r3, r3, #1
90007e22:	b2db      	uxtb	r3, r3
90007e24:	f88d 3003 	strb.w	r3, [sp, #3]
90007e28:	4623      	mov	r3, r4
90007e2a:	e7e2      	b.n	90007df2 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
90007e2c:	f44f 7340 	mov.w	r3, #768	; 0x300
	uxCriticalNesting = 0;
90007e30:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
90007e32:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
90007e34:	9b01      	ldr	r3, [sp, #4]
90007e36:	4a10      	ldr	r2, [pc, #64]	; (90007e78 <xPortStartScheduler+0xb0>)
90007e38:	b2db      	uxtb	r3, r3
90007e3a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
90007e3c:	4b11      	ldr	r3, [pc, #68]	; (90007e84 <xPortStartScheduler+0xbc>)
90007e3e:	681a      	ldr	r2, [r3, #0]
90007e40:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
90007e44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
90007e46:	681a      	ldr	r2, [r3, #0]
90007e48:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
90007e4c:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
90007e4e:	f7ff ffa1 	bl	90007d94 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
90007e52:	4b0d      	ldr	r3, [pc, #52]	; (90007e88 <xPortStartScheduler+0xc0>)
90007e54:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
90007e56:	f7ff febd 	bl	90007bd4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
90007e5a:	4a0c      	ldr	r2, [pc, #48]	; (90007e8c <xPortStartScheduler+0xc4>)
90007e5c:	6813      	ldr	r3, [r2, #0]
90007e5e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
90007e62:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
90007e64:	f7ff fea2 	bl	90007bac <prvPortStartFirstTask>
	vTaskSwitchContext();
90007e68:	f001 f9fa 	bl	90009260 <vTaskSwitchContext>
	prvTaskExitError();
90007e6c:	f7ff febc 	bl	90007be8 <prvTaskExitError>
}
90007e70:	4620      	mov	r0, r4
90007e72:	b002      	add	sp, #8
90007e74:	bd10      	pop	{r4, pc}
90007e76:	bf00      	nop
90007e78:	e000e400 	.word	0xe000e400
90007e7c:	20026028 	.word	0x20026028
90007e80:	2002602c 	.word	0x2002602c
90007e84:	e000ed20 	.word	0xe000ed20
90007e88:	20000044 	.word	0x20000044
90007e8c:	e000ef34 	.word	0xe000ef34

90007e90 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
90007e90:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
90007e94:	2b0f      	cmp	r3, #15
90007e96:	d910      	bls.n	90007eba <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
90007e98:	4a12      	ldr	r2, [pc, #72]	; (90007ee4 <vPortValidateInterruptPriority+0x54>)
90007e9a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
90007e9c:	4a12      	ldr	r2, [pc, #72]	; (90007ee8 <vPortValidateInterruptPriority+0x58>)
90007e9e:	7812      	ldrb	r2, [r2, #0]
90007ea0:	429a      	cmp	r2, r3
90007ea2:	d90a      	bls.n	90007eba <vPortValidateInterruptPriority+0x2a>
90007ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
90007ea8:	b672      	cpsid	i
90007eaa:	f383 8811 	msr	BASEPRI, r3
90007eae:	f3bf 8f6f 	isb	sy
90007eb2:	f3bf 8f4f 	dsb	sy
90007eb6:	b662      	cpsie	i
90007eb8:	e7fe      	b.n	90007eb8 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
90007eba:	4b0c      	ldr	r3, [pc, #48]	; (90007eec <vPortValidateInterruptPriority+0x5c>)
90007ebc:	4a0c      	ldr	r2, [pc, #48]	; (90007ef0 <vPortValidateInterruptPriority+0x60>)
90007ebe:	681b      	ldr	r3, [r3, #0]
90007ec0:	6812      	ldr	r2, [r2, #0]
90007ec2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
90007ec6:	4293      	cmp	r3, r2
90007ec8:	d90a      	bls.n	90007ee0 <vPortValidateInterruptPriority+0x50>
90007eca:	f04f 0350 	mov.w	r3, #80	; 0x50
90007ece:	b672      	cpsid	i
90007ed0:	f383 8811 	msr	BASEPRI, r3
90007ed4:	f3bf 8f6f 	isb	sy
90007ed8:	f3bf 8f4f 	dsb	sy
90007edc:	b662      	cpsie	i
90007ede:	e7fe      	b.n	90007ede <vPortValidateInterruptPriority+0x4e>
	}
90007ee0:	4770      	bx	lr
90007ee2:	bf00      	nop
90007ee4:	e000e3f0 	.word	0xe000e3f0
90007ee8:	20026028 	.word	0x20026028
90007eec:	e000ed0c 	.word	0xe000ed0c
90007ef0:	2002602c 	.word	0x2002602c

90007ef4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
90007ef4:	b510      	push	{r4, lr}
90007ef6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
90007ef8:	f7ff fec4 	bl	90007c84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
90007efc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
90007efe:	f7ff fee7 	bl	90007cd0 <vPortExitCritical>

	return xReturn;
}
90007f02:	fab4 f084 	clz	r0, r4
90007f06:	0940      	lsrs	r0, r0, #5
90007f08:	bd10      	pop	{r4, pc}

90007f0a <prvCopyDataToQueue>:
{
90007f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90007f0c:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
90007f0e:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
90007f10:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
90007f12:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
90007f14:	b952      	cbnz	r2, 90007f2c <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
90007f16:	6807      	ldr	r7, [r0, #0]
90007f18:	bb47      	cbnz	r7, 90007f6c <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
90007f1a:	6880      	ldr	r0, [r0, #8]
90007f1c:	f001 fb14 	bl	90009548 <xTaskPriorityDisinherit>
90007f20:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
90007f22:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
90007f24:	3601      	adds	r6, #1
}
90007f26:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
90007f28:	63a6      	str	r6, [r4, #56]	; 0x38
}
90007f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
90007f2c:	b965      	cbnz	r5, 90007f48 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
90007f2e:	6840      	ldr	r0, [r0, #4]
90007f30:	f020 ff06 	bl	90028d40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
90007f34:	6863      	ldr	r3, [r4, #4]
90007f36:	6c22      	ldr	r2, [r4, #64]	; 0x40
90007f38:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
90007f3a:	68a2      	ldr	r2, [r4, #8]
90007f3c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
90007f3e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
90007f40:	d3f0      	bcc.n	90007f24 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
90007f42:	6823      	ldr	r3, [r4, #0]
90007f44:	6063      	str	r3, [r4, #4]
90007f46:	e7ed      	b.n	90007f24 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
90007f48:	68c0      	ldr	r0, [r0, #12]
90007f4a:	f020 fef9 	bl	90028d40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
90007f4e:	6c22      	ldr	r2, [r4, #64]	; 0x40
90007f50:	68e3      	ldr	r3, [r4, #12]
90007f52:	4251      	negs	r1, r2
90007f54:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
90007f56:	6822      	ldr	r2, [r4, #0]
90007f58:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
90007f5a:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
90007f5c:	bf3e      	ittt	cc
90007f5e:	68a3      	ldrcc	r3, [r4, #8]
90007f60:	185b      	addcc	r3, r3, r1
90007f62:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
90007f64:	2d02      	cmp	r5, #2
90007f66:	d101      	bne.n	90007f6c <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
90007f68:	b116      	cbz	r6, 90007f70 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
90007f6a:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
90007f6c:	2500      	movs	r5, #0
90007f6e:	e7d9      	b.n	90007f24 <prvCopyDataToQueue+0x1a>
90007f70:	4635      	mov	r5, r6
90007f72:	e7d7      	b.n	90007f24 <prvCopyDataToQueue+0x1a>

90007f74 <prvCopyDataFromQueue>:
{
90007f74:	4603      	mov	r3, r0
90007f76:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
90007f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
90007f7a:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
90007f7c:	b162      	cbz	r2, 90007f98 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
90007f7e:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
90007f80:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
90007f82:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
90007f84:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
90007f86:	60dc      	str	r4, [r3, #12]
}
90007f88:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
90007f8c:	bf24      	itt	cs
90007f8e:	6819      	ldrcs	r1, [r3, #0]
90007f90:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
90007f92:	68d9      	ldr	r1, [r3, #12]
90007f94:	f020 bed4 	b.w	90028d40 <memcpy>
}
90007f98:	f85d 4b04 	ldr.w	r4, [sp], #4
90007f9c:	4770      	bx	lr

90007f9e <prvUnlockQueue>:
{
90007f9e:	b570      	push	{r4, r5, r6, lr}
90007fa0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
90007fa2:	f7ff fe6f 	bl	90007c84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
90007fa6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90007faa:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
90007fae:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
90007fb0:	2d00      	cmp	r5, #0
90007fb2:	dc14      	bgt.n	90007fde <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
90007fb4:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90007fb6:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
90007fba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
90007fbe:	f7ff fe87 	bl	90007cd0 <vPortExitCritical>
	taskENTER_CRITICAL();
90007fc2:	f7ff fe5f 	bl	90007c84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
90007fc6:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
90007fca:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
90007fcc:	2d00      	cmp	r5, #0
90007fce:	dc12      	bgt.n	90007ff6 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
90007fd0:	23ff      	movs	r3, #255	; 0xff
90007fd2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
90007fd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
90007fda:	f7ff be79 	b.w	90007cd0 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90007fde:	6a63      	ldr	r3, [r4, #36]	; 0x24
90007fe0:	2b00      	cmp	r3, #0
90007fe2:	d0e7      	beq.n	90007fb4 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90007fe4:	4630      	mov	r0, r6
90007fe6:	f001 f9bf 	bl	90009368 <xTaskRemoveFromEventList>
90007fea:	b108      	cbz	r0, 90007ff0 <prvUnlockQueue+0x52>
						vTaskMissedYield();
90007fec:	f001 fa4e 	bl	9000948c <vTaskMissedYield>
			--cTxLock;
90007ff0:	3d01      	subs	r5, #1
90007ff2:	b26d      	sxtb	r5, r5
90007ff4:	e7dc      	b.n	90007fb0 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90007ff6:	6923      	ldr	r3, [r4, #16]
90007ff8:	2b00      	cmp	r3, #0
90007ffa:	d0e9      	beq.n	90007fd0 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90007ffc:	4630      	mov	r0, r6
90007ffe:	f001 f9b3 	bl	90009368 <xTaskRemoveFromEventList>
90008002:	b108      	cbz	r0, 90008008 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
90008004:	f001 fa42 	bl	9000948c <vTaskMissedYield>
				--cRxLock;
90008008:	3d01      	subs	r5, #1
9000800a:	b26d      	sxtb	r5, r5
9000800c:	e7de      	b.n	90007fcc <prvUnlockQueue+0x2e>
	...

90008010 <xQueueGenericReset>:
{
90008010:	b538      	push	{r3, r4, r5, lr}
90008012:	460d      	mov	r5, r1
	configASSERT( pxQueue );
90008014:	4604      	mov	r4, r0
90008016:	b950      	cbnz	r0, 9000802e <xQueueGenericReset+0x1e>
90008018:	f04f 0350 	mov.w	r3, #80	; 0x50
9000801c:	b672      	cpsid	i
9000801e:	f383 8811 	msr	BASEPRI, r3
90008022:	f3bf 8f6f 	isb	sy
90008026:	f3bf 8f4f 	dsb	sy
9000802a:	b662      	cpsie	i
9000802c:	e7fe      	b.n	9000802c <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
9000802e:	f7ff fe29 	bl	90007c84 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90008032:	6822      	ldr	r2, [r4, #0]
90008034:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
90008038:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000803a:	434b      	muls	r3, r1
9000803c:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000803e:	1a5b      	subs	r3, r3, r1
90008040:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90008042:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
90008044:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90008046:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
90008048:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000804a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
9000804c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
90008050:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
90008054:	b995      	cbnz	r5, 9000807c <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90008056:	6923      	ldr	r3, [r4, #16]
90008058:	b163      	cbz	r3, 90008074 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000805a:	f104 0010 	add.w	r0, r4, #16
9000805e:	f001 f983 	bl	90009368 <xTaskRemoveFromEventList>
90008062:	b138      	cbz	r0, 90008074 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
90008064:	4b0a      	ldr	r3, [pc, #40]	; (90008090 <xQueueGenericReset+0x80>)
90008066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000806a:	601a      	str	r2, [r3, #0]
9000806c:	f3bf 8f4f 	dsb	sy
90008070:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
90008074:	f7ff fe2c 	bl	90007cd0 <vPortExitCritical>
}
90008078:	2001      	movs	r0, #1
9000807a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000807c:	f104 0010 	add.w	r0, r4, #16
90008080:	f7ff fd52 	bl	90007b28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
90008084:	f104 0024 	add.w	r0, r4, #36	; 0x24
90008088:	f7ff fd4e 	bl	90007b28 <vListInitialise>
9000808c:	e7f2      	b.n	90008074 <xQueueGenericReset+0x64>
9000808e:	bf00      	nop
90008090:	e000ed04 	.word	0xe000ed04

90008094 <xQueueGenericCreateStatic>:
	{
90008094:	b513      	push	{r0, r1, r4, lr}
90008096:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
90008098:	b950      	cbnz	r0, 900080b0 <xQueueGenericCreateStatic+0x1c>
9000809a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000809e:	b672      	cpsid	i
900080a0:	f383 8811 	msr	BASEPRI, r3
900080a4:	f3bf 8f6f 	isb	sy
900080a8:	f3bf 8f4f 	dsb	sy
900080ac:	b662      	cpsie	i
900080ae:	e7fe      	b.n	900080ae <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
900080b0:	b953      	cbnz	r3, 900080c8 <xQueueGenericCreateStatic+0x34>
900080b2:	f04f 0350 	mov.w	r3, #80	; 0x50
900080b6:	b672      	cpsid	i
900080b8:	f383 8811 	msr	BASEPRI, r3
900080bc:	f3bf 8f6f 	isb	sy
900080c0:	f3bf 8f4f 	dsb	sy
900080c4:	b662      	cpsie	i
900080c6:	e7fe      	b.n	900080c6 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
900080c8:	b15a      	cbz	r2, 900080e2 <xQueueGenericCreateStatic+0x4e>
900080ca:	b9b1      	cbnz	r1, 900080fa <xQueueGenericCreateStatic+0x66>
900080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
900080d0:	b672      	cpsid	i
900080d2:	f383 8811 	msr	BASEPRI, r3
900080d6:	f3bf 8f6f 	isb	sy
900080da:	f3bf 8f4f 	dsb	sy
900080de:	b662      	cpsie	i
900080e0:	e7fe      	b.n	900080e0 <xQueueGenericCreateStatic+0x4c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
900080e2:	b151      	cbz	r1, 900080fa <xQueueGenericCreateStatic+0x66>
900080e4:	f04f 0350 	mov.w	r3, #80	; 0x50
900080e8:	b672      	cpsid	i
900080ea:	f383 8811 	msr	BASEPRI, r3
900080ee:	f3bf 8f6f 	isb	sy
900080f2:	f3bf 8f4f 	dsb	sy
900080f6:	b662      	cpsie	i
900080f8:	e7fe      	b.n	900080f8 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
900080fa:	2350      	movs	r3, #80	; 0x50
900080fc:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
900080fe:	9b01      	ldr	r3, [sp, #4]
90008100:	2b50      	cmp	r3, #80	; 0x50
90008102:	d00a      	beq.n	9000811a <xQueueGenericCreateStatic+0x86>
90008104:	f04f 0350 	mov.w	r3, #80	; 0x50
90008108:	b672      	cpsid	i
9000810a:	f383 8811 	msr	BASEPRI, r3
9000810e:	f3bf 8f6f 	isb	sy
90008112:	f3bf 8f4f 	dsb	sy
90008116:	b662      	cpsie	i
90008118:	e7fe      	b.n	90008118 <xQueueGenericCreateStatic+0x84>
	if( uxItemSize == ( UBaseType_t ) 0 )
9000811a:	2900      	cmp	r1, #0
9000811c:	bf08      	it	eq
9000811e:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
90008120:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
90008122:	2301      	movs	r3, #1
90008124:	6022      	str	r2, [r4, #0]
90008126:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000812a:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
9000812e:	4619      	mov	r1, r3
90008130:	4620      	mov	r0, r4
90008132:	f7ff ff6d 	bl	90008010 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
90008136:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
9000813a:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000813c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
90008140:	b002      	add	sp, #8
90008142:	bd10      	pop	{r4, pc}

90008144 <xQueueGenericCreate>:
	{
90008144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90008146:	460d      	mov	r5, r1
90008148:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000814a:	4606      	mov	r6, r0
9000814c:	b950      	cbnz	r0, 90008164 <xQueueGenericCreate+0x20>
9000814e:	f04f 0350 	mov.w	r3, #80	; 0x50
90008152:	b672      	cpsid	i
90008154:	f383 8811 	msr	BASEPRI, r3
90008158:	f3bf 8f6f 	isb	sy
9000815c:	f3bf 8f4f 	dsb	sy
90008160:	b662      	cpsie	i
90008162:	e7fe      	b.n	90008162 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90008164:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
90008166:	3050      	adds	r0, #80	; 0x50
90008168:	f7ff fc14 	bl	90007994 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000816c:	4604      	mov	r4, r0
9000816e:	b170      	cbz	r0, 9000818e <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
90008170:	2300      	movs	r3, #0
90008172:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
90008176:	b165      	cbz	r5, 90008192 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90008178:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
9000817c:	2101      	movs	r1, #1
9000817e:	4620      	mov	r0, r4
90008180:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
90008182:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
90008186:	f7ff ff43 	bl	90008010 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
9000818a:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
9000818e:	4620      	mov	r0, r4
90008190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90008192:	4603      	mov	r3, r0
90008194:	e7f2      	b.n	9000817c <xQueueGenericCreate+0x38>

90008196 <xQueueCreateCountingSemaphoreStatic>:
	{
90008196:	b513      	push	{r0, r1, r4, lr}
90008198:	4613      	mov	r3, r2
9000819a:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
9000819c:	b950      	cbnz	r0, 900081b4 <xQueueCreateCountingSemaphoreStatic+0x1e>
9000819e:	f04f 0350 	mov.w	r3, #80	; 0x50
900081a2:	b672      	cpsid	i
900081a4:	f383 8811 	msr	BASEPRI, r3
900081a8:	f3bf 8f6f 	isb	sy
900081ac:	f3bf 8f4f 	dsb	sy
900081b0:	b662      	cpsie	i
900081b2:	e7fe      	b.n	900081b2 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
900081b4:	4288      	cmp	r0, r1
900081b6:	d20a      	bcs.n	900081ce <xQueueCreateCountingSemaphoreStatic+0x38>
900081b8:	f04f 0350 	mov.w	r3, #80	; 0x50
900081bc:	b672      	cpsid	i
900081be:	f383 8811 	msr	BASEPRI, r3
900081c2:	f3bf 8f6f 	isb	sy
900081c6:	f3bf 8f4f 	dsb	sy
900081ca:	b662      	cpsie	i
900081cc:	e7fe      	b.n	900081cc <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
900081ce:	2202      	movs	r2, #2
900081d0:	9200      	str	r2, [sp, #0]
900081d2:	2200      	movs	r2, #0
900081d4:	4611      	mov	r1, r2
900081d6:	f7ff ff5d 	bl	90008094 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
900081da:	b100      	cbz	r0, 900081de <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
900081dc:	6384      	str	r4, [r0, #56]	; 0x38
	}
900081de:	b002      	add	sp, #8
900081e0:	bd10      	pop	{r4, pc}

900081e2 <xQueueCreateCountingSemaphore>:
	{
900081e2:	b510      	push	{r4, lr}
900081e4:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
900081e6:	b950      	cbnz	r0, 900081fe <xQueueCreateCountingSemaphore+0x1c>
900081e8:	f04f 0350 	mov.w	r3, #80	; 0x50
900081ec:	b672      	cpsid	i
900081ee:	f383 8811 	msr	BASEPRI, r3
900081f2:	f3bf 8f6f 	isb	sy
900081f6:	f3bf 8f4f 	dsb	sy
900081fa:	b662      	cpsie	i
900081fc:	e7fe      	b.n	900081fc <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
900081fe:	4288      	cmp	r0, r1
90008200:	d20a      	bcs.n	90008218 <xQueueCreateCountingSemaphore+0x36>
90008202:	f04f 0350 	mov.w	r3, #80	; 0x50
90008206:	b672      	cpsid	i
90008208:	f383 8811 	msr	BASEPRI, r3
9000820c:	f3bf 8f6f 	isb	sy
90008210:	f3bf 8f4f 	dsb	sy
90008214:	b662      	cpsie	i
90008216:	e7fe      	b.n	90008216 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
90008218:	2202      	movs	r2, #2
9000821a:	2100      	movs	r1, #0
9000821c:	f7ff ff92 	bl	90008144 <xQueueGenericCreate>
		if( xHandle != NULL )
90008220:	b100      	cbz	r0, 90008224 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
90008222:	6384      	str	r4, [r0, #56]	; 0x38
	}
90008224:	bd10      	pop	{r4, pc}
	...

90008228 <xQueueGenericSend>:
{
90008228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9000822c:	4688      	mov	r8, r1
9000822e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
90008230:	4604      	mov	r4, r0
{
90008232:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
90008234:	b950      	cbnz	r0, 9000824c <xQueueGenericSend+0x24>
90008236:	f04f 0350 	mov.w	r3, #80	; 0x50
9000823a:	b672      	cpsid	i
9000823c:	f383 8811 	msr	BASEPRI, r3
90008240:	f3bf 8f6f 	isb	sy
90008244:	f3bf 8f4f 	dsb	sy
90008248:	b662      	cpsie	i
9000824a:	e7fe      	b.n	9000824a <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000824c:	b961      	cbnz	r1, 90008268 <xQueueGenericSend+0x40>
9000824e:	6c03      	ldr	r3, [r0, #64]	; 0x40
90008250:	b153      	cbz	r3, 90008268 <xQueueGenericSend+0x40>
90008252:	f04f 0350 	mov.w	r3, #80	; 0x50
90008256:	b672      	cpsid	i
90008258:	f383 8811 	msr	BASEPRI, r3
9000825c:	f3bf 8f6f 	isb	sy
90008260:	f3bf 8f4f 	dsb	sy
90008264:	b662      	cpsie	i
90008266:	e7fe      	b.n	90008266 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
90008268:	2f02      	cmp	r7, #2
9000826a:	d10d      	bne.n	90008288 <xQueueGenericSend+0x60>
9000826c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000826e:	2b01      	cmp	r3, #1
90008270:	d00a      	beq.n	90008288 <xQueueGenericSend+0x60>
90008272:	f04f 0350 	mov.w	r3, #80	; 0x50
90008276:	b672      	cpsid	i
90008278:	f383 8811 	msr	BASEPRI, r3
9000827c:	f3bf 8f6f 	isb	sy
90008280:	f3bf 8f4f 	dsb	sy
90008284:	b662      	cpsie	i
90008286:	e7fe      	b.n	90008286 <xQueueGenericSend+0x5e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
90008288:	f001 f90c 	bl	900094a4 <xTaskGetSchedulerState>
9000828c:	4606      	mov	r6, r0
9000828e:	b960      	cbnz	r0, 900082aa <xQueueGenericSend+0x82>
90008290:	9b01      	ldr	r3, [sp, #4]
90008292:	b15b      	cbz	r3, 900082ac <xQueueGenericSend+0x84>
90008294:	f04f 0350 	mov.w	r3, #80	; 0x50
90008298:	b672      	cpsid	i
9000829a:	f383 8811 	msr	BASEPRI, r3
9000829e:	f3bf 8f6f 	isb	sy
900082a2:	f3bf 8f4f 	dsb	sy
900082a6:	b662      	cpsie	i
900082a8:	e7fe      	b.n	900082a8 <xQueueGenericSend+0x80>
900082aa:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
900082ac:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
900082b0:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 90008398 <xQueueGenericSend+0x170>
900082b4:	e037      	b.n	90008326 <xQueueGenericSend+0xfe>
				if( xTicksToWait == ( TickType_t ) 0 )
900082b6:	9d01      	ldr	r5, [sp, #4]
900082b8:	b91d      	cbnz	r5, 900082c2 <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
900082ba:	f7ff fd09 	bl	90007cd0 <vPortExitCritical>
			return errQUEUE_FULL;
900082be:	2000      	movs	r0, #0
900082c0:	e050      	b.n	90008364 <xQueueGenericSend+0x13c>
				else if( xEntryTimeSet == pdFALSE )
900082c2:	b916      	cbnz	r6, 900082ca <xQueueGenericSend+0xa2>
					vTaskInternalSetTimeOutState( &xTimeOut );
900082c4:	a802      	add	r0, sp, #8
900082c6:	f001 f895 	bl	900093f4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
900082ca:	f7ff fd01 	bl	90007cd0 <vPortExitCritical>
		vTaskSuspendAll();
900082ce:	f000 fe23 	bl	90008f18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
900082d2:	f7ff fcd7 	bl	90007c84 <vPortEnterCritical>
900082d6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
900082da:	2bff      	cmp	r3, #255	; 0xff
900082dc:	d101      	bne.n	900082e2 <xQueueGenericSend+0xba>
900082de:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
900082e2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
900082e6:	2bff      	cmp	r3, #255	; 0xff
900082e8:	d101      	bne.n	900082ee <xQueueGenericSend+0xc6>
900082ea:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
900082ee:	f7ff fcef 	bl	90007cd0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
900082f2:	a901      	add	r1, sp, #4
900082f4:	a802      	add	r0, sp, #8
900082f6:	f001 f889 	bl	9000940c <xTaskCheckForTimeOut>
900082fa:	2800      	cmp	r0, #0
900082fc:	d146      	bne.n	9000838c <xQueueGenericSend+0x164>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
900082fe:	f7ff fcc1 	bl	90007c84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
90008302:	6ba2      	ldr	r2, [r4, #56]	; 0x38
90008304:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90008306:	429a      	cmp	r2, r3
90008308:	d12f      	bne.n	9000836a <xQueueGenericSend+0x142>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
9000830a:	f7ff fce1 	bl	90007cd0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000830e:	9901      	ldr	r1, [sp, #4]
90008310:	f104 0010 	add.w	r0, r4, #16
90008314:	f000 ffec 	bl	900092f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
90008318:	4620      	mov	r0, r4
9000831a:	f7ff fe40 	bl	90007f9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
9000831e:	f000 fea9 	bl	90009074 <xTaskResumeAll>
90008322:	b350      	cbz	r0, 9000837a <xQueueGenericSend+0x152>
90008324:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
90008326:	f7ff fcad 	bl	90007c84 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000832a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000832c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000832e:	429a      	cmp	r2, r3
90008330:	d301      	bcc.n	90008336 <xQueueGenericSend+0x10e>
90008332:	2f02      	cmp	r7, #2
90008334:	d1bf      	bne.n	900082b6 <xQueueGenericSend+0x8e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
90008336:	463a      	mov	r2, r7
90008338:	4641      	mov	r1, r8
9000833a:	4620      	mov	r0, r4
9000833c:	f7ff fde5 	bl	90007f0a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90008340:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008342:	b11b      	cbz	r3, 9000834c <xQueueGenericSend+0x124>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90008344:	f104 0024 	add.w	r0, r4, #36	; 0x24
90008348:	f001 f80e 	bl	90009368 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
9000834c:	b138      	cbz	r0, 9000835e <xQueueGenericSend+0x136>
						queueYIELD_IF_USING_PREEMPTION();
9000834e:	4b12      	ldr	r3, [pc, #72]	; (90008398 <xQueueGenericSend+0x170>)
90008350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90008354:	601a      	str	r2, [r3, #0]
90008356:	f3bf 8f4f 	dsb	sy
9000835a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
9000835e:	f7ff fcb7 	bl	90007cd0 <vPortExitCritical>
				return pdPASS;
90008362:	2001      	movs	r0, #1
}
90008364:	b004      	add	sp, #16
90008366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
9000836a:	f7ff fcb1 	bl	90007cd0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
9000836e:	4620      	mov	r0, r4
90008370:	f7ff fe15 	bl	90007f9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
90008374:	f000 fe7e 	bl	90009074 <xTaskResumeAll>
90008378:	e7d4      	b.n	90008324 <xQueueGenericSend+0xfc>
					portYIELD_WITHIN_API();
9000837a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
9000837e:	f8ca 3000 	str.w	r3, [sl]
90008382:	f3bf 8f4f 	dsb	sy
90008386:	f3bf 8f6f 	isb	sy
9000838a:	e7cb      	b.n	90008324 <xQueueGenericSend+0xfc>
			prvUnlockQueue( pxQueue );
9000838c:	4620      	mov	r0, r4
9000838e:	f7ff fe06 	bl	90007f9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
90008392:	f000 fe6f 	bl	90009074 <xTaskResumeAll>
90008396:	e792      	b.n	900082be <xQueueGenericSend+0x96>
90008398:	e000ed04 	.word	0xe000ed04

9000839c <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
9000839c:	2200      	movs	r2, #0
	{
9000839e:	460b      	mov	r3, r1
900083a0:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
900083a2:	4611      	mov	r1, r2
900083a4:	9000      	str	r0, [sp, #0]
900083a6:	2001      	movs	r0, #1
900083a8:	f7ff fe74 	bl	90008094 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
900083ac:	4604      	mov	r4, r0
900083ae:	b138      	cbz	r0, 900083c0 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
900083b0:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
900083b2:	461a      	mov	r2, r3
900083b4:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
900083b6:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
900083b8:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
900083ba:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
900083bc:	f7ff ff34 	bl	90008228 <xQueueGenericSend>
	}
900083c0:	4620      	mov	r0, r4
900083c2:	b002      	add	sp, #8
900083c4:	bd10      	pop	{r4, pc}

900083c6 <xQueueGiveMutexRecursive>:
	{
900083c6:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
900083c8:	4604      	mov	r4, r0
900083ca:	b950      	cbnz	r0, 900083e2 <xQueueGiveMutexRecursive+0x1c>
900083cc:	f04f 0350 	mov.w	r3, #80	; 0x50
900083d0:	b672      	cpsid	i
900083d2:	f383 8811 	msr	BASEPRI, r3
900083d6:	f3bf 8f6f 	isb	sy
900083da:	f3bf 8f4f 	dsb	sy
900083de:	b662      	cpsie	i
900083e0:	e7fe      	b.n	900083e0 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
900083e2:	6885      	ldr	r5, [r0, #8]
900083e4:	f001 f858 	bl	90009498 <xTaskGetCurrentTaskHandle>
900083e8:	4285      	cmp	r5, r0
900083ea:	d10a      	bne.n	90008402 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
900083ec:	68e3      	ldr	r3, [r4, #12]
900083ee:	3b01      	subs	r3, #1
900083f0:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
900083f2:	b923      	cbnz	r3, 900083fe <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
900083f4:	461a      	mov	r2, r3
900083f6:	4619      	mov	r1, r3
900083f8:	4620      	mov	r0, r4
900083fa:	f7ff ff15 	bl	90008228 <xQueueGenericSend>
			xReturn = pdPASS;
900083fe:	2001      	movs	r0, #1
		return xReturn;
90008400:	e000      	b.n	90008404 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
90008402:	2000      	movs	r0, #0
	}
90008404:	bd38      	pop	{r3, r4, r5, pc}

90008406 <xQueueCreateMutex>:
	{
90008406:	b570      	push	{r4, r5, r6, lr}
90008408:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000840a:	2050      	movs	r0, #80	; 0x50
9000840c:	f7ff fac2 	bl	90007994 <pvPortMalloc>
		if( pxNewQueue != NULL )
90008410:	4604      	mov	r4, r0
90008412:	b198      	cbz	r0, 9000843c <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
90008414:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
90008416:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
90008418:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000841a:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000841e:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
90008422:	f7ff fdf5 	bl	90008010 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
90008426:	462b      	mov	r3, r5
90008428:	462a      	mov	r2, r5
9000842a:	4629      	mov	r1, r5
9000842c:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000842e:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
90008432:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
90008434:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
90008436:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
90008438:	f7ff fef6 	bl	90008228 <xQueueGenericSend>
	}
9000843c:	4620      	mov	r0, r4
9000843e:	bd70      	pop	{r4, r5, r6, pc}

90008440 <xQueueGenericSendFromISR>:
{
90008440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90008444:	4689      	mov	r9, r1
90008446:	4690      	mov	r8, r2
90008448:	461f      	mov	r7, r3
	configASSERT( pxQueue );
9000844a:	4604      	mov	r4, r0
9000844c:	b950      	cbnz	r0, 90008464 <xQueueGenericSendFromISR+0x24>
9000844e:	f04f 0350 	mov.w	r3, #80	; 0x50
90008452:	b672      	cpsid	i
90008454:	f383 8811 	msr	BASEPRI, r3
90008458:	f3bf 8f6f 	isb	sy
9000845c:	f3bf 8f4f 	dsb	sy
90008460:	b662      	cpsie	i
90008462:	e7fe      	b.n	90008462 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
90008464:	b961      	cbnz	r1, 90008480 <xQueueGenericSendFromISR+0x40>
90008466:	6c03      	ldr	r3, [r0, #64]	; 0x40
90008468:	b153      	cbz	r3, 90008480 <xQueueGenericSendFromISR+0x40>
9000846a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000846e:	b672      	cpsid	i
90008470:	f383 8811 	msr	BASEPRI, r3
90008474:	f3bf 8f6f 	isb	sy
90008478:	f3bf 8f4f 	dsb	sy
9000847c:	b662      	cpsie	i
9000847e:	e7fe      	b.n	9000847e <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
90008480:	2f02      	cmp	r7, #2
90008482:	d10d      	bne.n	900084a0 <xQueueGenericSendFromISR+0x60>
90008484:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90008486:	2b01      	cmp	r3, #1
90008488:	d00a      	beq.n	900084a0 <xQueueGenericSendFromISR+0x60>
9000848a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000848e:	b672      	cpsid	i
90008490:	f383 8811 	msr	BASEPRI, r3
90008494:	f3bf 8f6f 	isb	sy
90008498:	f3bf 8f4f 	dsb	sy
9000849c:	b662      	cpsie	i
9000849e:	e7fe      	b.n	9000849e <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
900084a0:	f7ff fcf6 	bl	90007e90 <vPortValidateInterruptPriority>
	__asm volatile
900084a4:	f3ef 8611 	mrs	r6, BASEPRI
900084a8:	f04f 0350 	mov.w	r3, #80	; 0x50
900084ac:	b672      	cpsid	i
900084ae:	f383 8811 	msr	BASEPRI, r3
900084b2:	f3bf 8f6f 	isb	sy
900084b6:	f3bf 8f4f 	dsb	sy
900084ba:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
900084bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
900084be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
900084c0:	429a      	cmp	r2, r3
900084c2:	d301      	bcc.n	900084c8 <xQueueGenericSendFromISR+0x88>
900084c4:	2f02      	cmp	r7, #2
900084c6:	d122      	bne.n	9000850e <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
900084c8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
900084cc:	463a      	mov	r2, r7
900084ce:	4649      	mov	r1, r9
900084d0:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
900084d2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
900084d4:	f7ff fd19 	bl	90007f0a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
900084d8:	1c6b      	adds	r3, r5, #1
900084da:	d113      	bne.n	90008504 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
900084dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
900084de:	b90b      	cbnz	r3, 900084e4 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
900084e0:	2001      	movs	r0, #1
900084e2:	e00b      	b.n	900084fc <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
900084e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
900084e8:	f000 ff3e 	bl	90009368 <xTaskRemoveFromEventList>
900084ec:	2800      	cmp	r0, #0
900084ee:	d0f7      	beq.n	900084e0 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
900084f0:	f1b8 0f00 	cmp.w	r8, #0
900084f4:	d0f4      	beq.n	900084e0 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
900084f6:	2001      	movs	r0, #1
900084f8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
900084fc:	f386 8811 	msr	BASEPRI, r6
}
90008500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
90008504:	3501      	adds	r5, #1
90008506:	b26d      	sxtb	r5, r5
90008508:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
9000850c:	e7e8      	b.n	900084e0 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
9000850e:	2000      	movs	r0, #0
90008510:	e7f4      	b.n	900084fc <xQueueGenericSendFromISR+0xbc>

90008512 <xQueueGiveFromISR>:
{
90008512:	b570      	push	{r4, r5, r6, lr}
90008514:	460d      	mov	r5, r1
	configASSERT( pxQueue );
90008516:	4604      	mov	r4, r0
90008518:	b950      	cbnz	r0, 90008530 <xQueueGiveFromISR+0x1e>
	__asm volatile
9000851a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000851e:	b672      	cpsid	i
90008520:	f383 8811 	msr	BASEPRI, r3
90008524:	f3bf 8f6f 	isb	sy
90008528:	f3bf 8f4f 	dsb	sy
9000852c:	b662      	cpsie	i
9000852e:	e7fe      	b.n	9000852e <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
90008530:	6c03      	ldr	r3, [r0, #64]	; 0x40
90008532:	b153      	cbz	r3, 9000854a <xQueueGiveFromISR+0x38>
90008534:	f04f 0350 	mov.w	r3, #80	; 0x50
90008538:	b672      	cpsid	i
9000853a:	f383 8811 	msr	BASEPRI, r3
9000853e:	f3bf 8f6f 	isb	sy
90008542:	f3bf 8f4f 	dsb	sy
90008546:	b662      	cpsie	i
90008548:	e7fe      	b.n	90008548 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9000854a:	6803      	ldr	r3, [r0, #0]
9000854c:	b963      	cbnz	r3, 90008568 <xQueueGiveFromISR+0x56>
9000854e:	6883      	ldr	r3, [r0, #8]
90008550:	b153      	cbz	r3, 90008568 <xQueueGiveFromISR+0x56>
90008552:	f04f 0350 	mov.w	r3, #80	; 0x50
90008556:	b672      	cpsid	i
90008558:	f383 8811 	msr	BASEPRI, r3
9000855c:	f3bf 8f6f 	isb	sy
90008560:	f3bf 8f4f 	dsb	sy
90008564:	b662      	cpsie	i
90008566:	e7fe      	b.n	90008566 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
90008568:	f7ff fc92 	bl	90007e90 <vPortValidateInterruptPriority>
	__asm volatile
9000856c:	f3ef 8611 	mrs	r6, BASEPRI
90008570:	f04f 0350 	mov.w	r3, #80	; 0x50
90008574:	b672      	cpsid	i
90008576:	f383 8811 	msr	BASEPRI, r3
9000857a:	f3bf 8f6f 	isb	sy
9000857e:	f3bf 8f4f 	dsb	sy
90008582:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
90008584:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
90008586:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90008588:	4293      	cmp	r3, r2
9000858a:	d91c      	bls.n	900085c6 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
9000858c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
90008590:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
90008592:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
90008594:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
90008596:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
90008598:	d110      	bne.n	900085bc <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000859a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000859c:	b90b      	cbnz	r3, 900085a2 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
9000859e:	2001      	movs	r0, #1
900085a0:	e009      	b.n	900085b6 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
900085a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
900085a6:	f000 fedf 	bl	90009368 <xTaskRemoveFromEventList>
900085aa:	2800      	cmp	r0, #0
900085ac:	d0f7      	beq.n	9000859e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
900085ae:	2d00      	cmp	r5, #0
900085b0:	d0f5      	beq.n	9000859e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
900085b2:	2001      	movs	r0, #1
900085b4:	6028      	str	r0, [r5, #0]
	__asm volatile
900085b6:	f386 8811 	msr	BASEPRI, r6
}
900085ba:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
900085bc:	3301      	adds	r3, #1
900085be:	b25b      	sxtb	r3, r3
900085c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
900085c4:	e7eb      	b.n	9000859e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
900085c6:	2000      	movs	r0, #0
900085c8:	e7f5      	b.n	900085b6 <xQueueGiveFromISR+0xa4>
	...

900085cc <xQueueReceive>:
{
900085cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900085d0:	b085      	sub	sp, #20
900085d2:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
900085d4:	4604      	mov	r4, r0
{
900085d6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
900085d8:	b950      	cbnz	r0, 900085f0 <xQueueReceive+0x24>
	__asm volatile
900085da:	f04f 0350 	mov.w	r3, #80	; 0x50
900085de:	b672      	cpsid	i
900085e0:	f383 8811 	msr	BASEPRI, r3
900085e4:	f3bf 8f6f 	isb	sy
900085e8:	f3bf 8f4f 	dsb	sy
900085ec:	b662      	cpsie	i
900085ee:	e7fe      	b.n	900085ee <xQueueReceive+0x22>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
900085f0:	b961      	cbnz	r1, 9000860c <xQueueReceive+0x40>
900085f2:	6c03      	ldr	r3, [r0, #64]	; 0x40
900085f4:	b153      	cbz	r3, 9000860c <xQueueReceive+0x40>
900085f6:	f04f 0350 	mov.w	r3, #80	; 0x50
900085fa:	b672      	cpsid	i
900085fc:	f383 8811 	msr	BASEPRI, r3
90008600:	f3bf 8f6f 	isb	sy
90008604:	f3bf 8f4f 	dsb	sy
90008608:	b662      	cpsie	i
9000860a:	e7fe      	b.n	9000860a <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000860c:	f000 ff4a 	bl	900094a4 <xTaskGetSchedulerState>
90008610:	4606      	mov	r6, r0
90008612:	b960      	cbnz	r0, 9000862e <xQueueReceive+0x62>
90008614:	9b01      	ldr	r3, [sp, #4]
90008616:	b15b      	cbz	r3, 90008630 <xQueueReceive+0x64>
90008618:	f04f 0350 	mov.w	r3, #80	; 0x50
9000861c:	b672      	cpsid	i
9000861e:	f383 8811 	msr	BASEPRI, r3
90008622:	f3bf 8f6f 	isb	sy
90008626:	f3bf 8f4f 	dsb	sy
9000862a:	b662      	cpsie	i
9000862c:	e7fe      	b.n	9000862c <xQueueReceive+0x60>
9000862e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
90008630:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
90008634:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 90008714 <xQueueReceive+0x148>
90008638:	e03b      	b.n	900086b2 <xQueueReceive+0xe6>
				if( xTicksToWait == ( TickType_t ) 0 )
9000863a:	9d01      	ldr	r5, [sp, #4]
9000863c:	b91d      	cbnz	r5, 90008646 <xQueueReceive+0x7a>
					taskEXIT_CRITICAL();
9000863e:	f7ff fb47 	bl	90007cd0 <vPortExitCritical>
				return errQUEUE_EMPTY;
90008642:	2000      	movs	r0, #0
90008644:	e052      	b.n	900086ec <xQueueReceive+0x120>
				else if( xEntryTimeSet == pdFALSE )
90008646:	b916      	cbnz	r6, 9000864e <xQueueReceive+0x82>
					vTaskInternalSetTimeOutState( &xTimeOut );
90008648:	a802      	add	r0, sp, #8
9000864a:	f000 fed3 	bl	900093f4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
9000864e:	f7ff fb3f 	bl	90007cd0 <vPortExitCritical>
		vTaskSuspendAll();
90008652:	f000 fc61 	bl	90008f18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
90008656:	f7ff fb15 	bl	90007c84 <vPortEnterCritical>
9000865a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000865e:	2bff      	cmp	r3, #255	; 0xff
90008660:	d101      	bne.n	90008666 <xQueueReceive+0x9a>
90008662:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
90008666:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000866a:	2bff      	cmp	r3, #255	; 0xff
9000866c:	d101      	bne.n	90008672 <xQueueReceive+0xa6>
9000866e:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
90008672:	f7ff fb2d 	bl	90007cd0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
90008676:	a901      	add	r1, sp, #4
90008678:	a802      	add	r0, sp, #8
9000867a:	f000 fec7 	bl	9000940c <xTaskCheckForTimeOut>
9000867e:	2800      	cmp	r0, #0
90008680:	d13d      	bne.n	900086fe <xQueueReceive+0x132>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
90008682:	4620      	mov	r0, r4
90008684:	f7ff fc36 	bl	90007ef4 <prvIsQueueEmpty>
90008688:	b398      	cbz	r0, 900086f2 <xQueueReceive+0x126>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9000868a:	9901      	ldr	r1, [sp, #4]
9000868c:	f104 0024 	add.w	r0, r4, #36	; 0x24
90008690:	f000 fe2e 	bl	900092f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
90008694:	4620      	mov	r0, r4
90008696:	f7ff fc82 	bl	90007f9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
9000869a:	f000 fceb 	bl	90009074 <xTaskResumeAll>
9000869e:	b938      	cbnz	r0, 900086b0 <xQueueReceive+0xe4>
					portYIELD_WITHIN_API();
900086a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
900086a4:	f8c9 3000 	str.w	r3, [r9]
900086a8:	f3bf 8f4f 	dsb	sy
900086ac:	f3bf 8f6f 	isb	sy
900086b0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
900086b2:	f7ff fae7 	bl	90007c84 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
900086b6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
900086b8:	2d00      	cmp	r5, #0
900086ba:	d0be      	beq.n	9000863a <xQueueReceive+0x6e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
900086bc:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
900086be:	4639      	mov	r1, r7
900086c0:	4620      	mov	r0, r4
900086c2:	f7ff fc57 	bl	90007f74 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
900086c6:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
900086c8:	6923      	ldr	r3, [r4, #16]
900086ca:	b163      	cbz	r3, 900086e6 <xQueueReceive+0x11a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900086cc:	f104 0010 	add.w	r0, r4, #16
900086d0:	f000 fe4a 	bl	90009368 <xTaskRemoveFromEventList>
900086d4:	b138      	cbz	r0, 900086e6 <xQueueReceive+0x11a>
						queueYIELD_IF_USING_PREEMPTION();
900086d6:	4b0f      	ldr	r3, [pc, #60]	; (90008714 <xQueueReceive+0x148>)
900086d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900086dc:	601a      	str	r2, [r3, #0]
900086de:	f3bf 8f4f 	dsb	sy
900086e2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
900086e6:	f7ff faf3 	bl	90007cd0 <vPortExitCritical>
				return pdPASS;
900086ea:	2001      	movs	r0, #1
}
900086ec:	b005      	add	sp, #20
900086ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
900086f2:	4620      	mov	r0, r4
900086f4:	f7ff fc53 	bl	90007f9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
900086f8:	f000 fcbc 	bl	90009074 <xTaskResumeAll>
900086fc:	e7d8      	b.n	900086b0 <xQueueReceive+0xe4>
			prvUnlockQueue( pxQueue );
900086fe:	4620      	mov	r0, r4
90008700:	f7ff fc4d 	bl	90007f9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
90008704:	f000 fcb6 	bl	90009074 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
90008708:	4620      	mov	r0, r4
9000870a:	f7ff fbf3 	bl	90007ef4 <prvIsQueueEmpty>
9000870e:	2800      	cmp	r0, #0
90008710:	d0ce      	beq.n	900086b0 <xQueueReceive+0xe4>
90008712:	e796      	b.n	90008642 <xQueueReceive+0x76>
90008714:	e000ed04 	.word	0xe000ed04

90008718 <xQueueSemaphoreTake>:
{
90008718:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
9000871c:	4604      	mov	r4, r0
{
9000871e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
90008720:	b950      	cbnz	r0, 90008738 <xQueueSemaphoreTake+0x20>
90008722:	f04f 0350 	mov.w	r3, #80	; 0x50
90008726:	b672      	cpsid	i
90008728:	f383 8811 	msr	BASEPRI, r3
9000872c:	f3bf 8f6f 	isb	sy
90008730:	f3bf 8f4f 	dsb	sy
90008734:	b662      	cpsie	i
90008736:	e7fe      	b.n	90008736 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
90008738:	6c05      	ldr	r5, [r0, #64]	; 0x40
9000873a:	b155      	cbz	r5, 90008752 <xQueueSemaphoreTake+0x3a>
9000873c:	f04f 0350 	mov.w	r3, #80	; 0x50
90008740:	b672      	cpsid	i
90008742:	f383 8811 	msr	BASEPRI, r3
90008746:	f3bf 8f6f 	isb	sy
9000874a:	f3bf 8f4f 	dsb	sy
9000874e:	b662      	cpsie	i
90008750:	e7fe      	b.n	90008750 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
90008752:	f000 fea7 	bl	900094a4 <xTaskGetSchedulerState>
90008756:	4606      	mov	r6, r0
90008758:	b960      	cbnz	r0, 90008774 <xQueueSemaphoreTake+0x5c>
9000875a:	9b01      	ldr	r3, [sp, #4]
9000875c:	b17b      	cbz	r3, 9000877e <xQueueSemaphoreTake+0x66>
9000875e:	f04f 0350 	mov.w	r3, #80	; 0x50
90008762:	b672      	cpsid	i
90008764:	f383 8811 	msr	BASEPRI, r3
90008768:	f3bf 8f6f 	isb	sy
9000876c:	f3bf 8f4f 	dsb	sy
90008770:	b662      	cpsie	i
90008772:	e7fe      	b.n	90008772 <xQueueSemaphoreTake+0x5a>
90008774:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
90008776:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
90008778:	f8df 8130 	ldr.w	r8, [pc, #304]	; 900088ac <xQueueSemaphoreTake+0x194>
9000877c:	e053      	b.n	90008826 <xQueueSemaphoreTake+0x10e>
9000877e:	4605      	mov	r5, r0
90008780:	e7f9      	b.n	90008776 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
90008782:	9b01      	ldr	r3, [sp, #4]
90008784:	b973      	cbnz	r3, 900087a4 <xQueueSemaphoreTake+0x8c>
						configASSERT( xInheritanceOccurred == pdFALSE );
90008786:	b155      	cbz	r5, 9000879e <xQueueSemaphoreTake+0x86>
90008788:	f04f 0350 	mov.w	r3, #80	; 0x50
9000878c:	b672      	cpsid	i
9000878e:	f383 8811 	msr	BASEPRI, r3
90008792:	f3bf 8f6f 	isb	sy
90008796:	f3bf 8f4f 	dsb	sy
9000879a:	b662      	cpsie	i
9000879c:	e7fe      	b.n	9000879c <xQueueSemaphoreTake+0x84>
					taskEXIT_CRITICAL();
9000879e:	f7ff fa97 	bl	90007cd0 <vPortExitCritical>
					return errQUEUE_EMPTY;
900087a2:	e05e      	b.n	90008862 <xQueueSemaphoreTake+0x14a>
				else if( xEntryTimeSet == pdFALSE )
900087a4:	b916      	cbnz	r6, 900087ac <xQueueSemaphoreTake+0x94>
					vTaskInternalSetTimeOutState( &xTimeOut );
900087a6:	a802      	add	r0, sp, #8
900087a8:	f000 fe24 	bl	900093f4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
900087ac:	f7ff fa90 	bl	90007cd0 <vPortExitCritical>
		vTaskSuspendAll();
900087b0:	f000 fbb2 	bl	90008f18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
900087b4:	f7ff fa66 	bl	90007c84 <vPortEnterCritical>
900087b8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
900087bc:	2bff      	cmp	r3, #255	; 0xff
900087be:	d101      	bne.n	900087c4 <xQueueSemaphoreTake+0xac>
900087c0:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
900087c4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
900087c8:	2bff      	cmp	r3, #255	; 0xff
900087ca:	d101      	bne.n	900087d0 <xQueueSemaphoreTake+0xb8>
900087cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
900087d0:	f7ff fa7e 	bl	90007cd0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
900087d4:	a901      	add	r1, sp, #4
900087d6:	a802      	add	r0, sp, #8
900087d8:	f000 fe18 	bl	9000940c <xTaskCheckForTimeOut>
900087dc:	2800      	cmp	r0, #0
900087de:	d14a      	bne.n	90008876 <xQueueSemaphoreTake+0x15e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
900087e0:	4620      	mov	r0, r4
900087e2:	f7ff fb87 	bl	90007ef4 <prvIsQueueEmpty>
900087e6:	2800      	cmp	r0, #0
900087e8:	d03f      	beq.n	9000886a <xQueueSemaphoreTake+0x152>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
900087ea:	6823      	ldr	r3, [r4, #0]
900087ec:	b93b      	cbnz	r3, 900087fe <xQueueSemaphoreTake+0xe6>
						taskENTER_CRITICAL();
900087ee:	f7ff fa49 	bl	90007c84 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
900087f2:	68a0      	ldr	r0, [r4, #8]
900087f4:	f000 fe66 	bl	900094c4 <xTaskPriorityInherit>
900087f8:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
900087fa:	f7ff fa69 	bl	90007cd0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
900087fe:	9901      	ldr	r1, [sp, #4]
90008800:	f104 0024 	add.w	r0, r4, #36	; 0x24
90008804:	f000 fd74 	bl	900092f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
90008808:	4620      	mov	r0, r4
9000880a:	f7ff fbc8 	bl	90007f9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
9000880e:	f000 fc31 	bl	90009074 <xTaskResumeAll>
90008812:	b938      	cbnz	r0, 90008824 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
90008814:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
90008818:	f8c8 3000 	str.w	r3, [r8]
9000881c:	f3bf 8f4f 	dsb	sy
90008820:	f3bf 8f6f 	isb	sy
90008824:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
90008826:	f7ff fa2d 	bl	90007c84 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
9000882a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
9000882c:	2b00      	cmp	r3, #0
9000882e:	d0a8      	beq.n	90008782 <xQueueSemaphoreTake+0x6a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
90008830:	3b01      	subs	r3, #1
90008832:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
90008834:	6823      	ldr	r3, [r4, #0]
90008836:	b913      	cbnz	r3, 9000883e <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
90008838:	f000 ff24 	bl	90009684 <pvTaskIncrementMutexHeldCount>
9000883c:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000883e:	6923      	ldr	r3, [r4, #16]
90008840:	b163      	cbz	r3, 9000885c <xQueueSemaphoreTake+0x144>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90008842:	f104 0010 	add.w	r0, r4, #16
90008846:	f000 fd8f 	bl	90009368 <xTaskRemoveFromEventList>
9000884a:	b138      	cbz	r0, 9000885c <xQueueSemaphoreTake+0x144>
						queueYIELD_IF_USING_PREEMPTION();
9000884c:	4b17      	ldr	r3, [pc, #92]	; (900088ac <xQueueSemaphoreTake+0x194>)
9000884e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90008852:	601a      	str	r2, [r3, #0]
90008854:	f3bf 8f4f 	dsb	sy
90008858:	f3bf 8f6f 	isb	sy
				return pdPASS;
9000885c:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
9000885e:	f7ff fa37 	bl	90007cd0 <vPortExitCritical>
}
90008862:	4628      	mov	r0, r5
90008864:	b004      	add	sp, #16
90008866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
9000886a:	4620      	mov	r0, r4
9000886c:	f7ff fb97 	bl	90007f9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
90008870:	f000 fc00 	bl	90009074 <xTaskResumeAll>
90008874:	e7d6      	b.n	90008824 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
90008876:	4620      	mov	r0, r4
90008878:	f7ff fb91 	bl	90007f9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
9000887c:	f000 fbfa 	bl	90009074 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
90008880:	4620      	mov	r0, r4
90008882:	f7ff fb37 	bl	90007ef4 <prvIsQueueEmpty>
90008886:	2800      	cmp	r0, #0
90008888:	d0cc      	beq.n	90008824 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
9000888a:	2d00      	cmp	r5, #0
9000888c:	d0e9      	beq.n	90008862 <xQueueSemaphoreTake+0x14a>
						taskENTER_CRITICAL();
9000888e:	f7ff f9f9 	bl	90007c84 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
90008892:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008894:	b119      	cbz	r1, 9000889e <xQueueSemaphoreTake+0x186>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
90008896:	6b23      	ldr	r3, [r4, #48]	; 0x30
90008898:	6819      	ldr	r1, [r3, #0]
9000889a:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
9000889e:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
900088a0:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
900088a2:	f000 fe99 	bl	900095d8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
900088a6:	f7ff fa13 	bl	90007cd0 <vPortExitCritical>
900088aa:	e7da      	b.n	90008862 <xQueueSemaphoreTake+0x14a>
900088ac:	e000ed04 	.word	0xe000ed04

900088b0 <xQueueTakeMutexRecursive>:
	{
900088b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
900088b2:	4604      	mov	r4, r0
900088b4:	b950      	cbnz	r0, 900088cc <xQueueTakeMutexRecursive+0x1c>
900088b6:	f04f 0350 	mov.w	r3, #80	; 0x50
900088ba:	b672      	cpsid	i
900088bc:	f383 8811 	msr	BASEPRI, r3
900088c0:	f3bf 8f6f 	isb	sy
900088c4:	f3bf 8f4f 	dsb	sy
900088c8:	b662      	cpsie	i
900088ca:	e7fe      	b.n	900088ca <xQueueTakeMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
900088cc:	6885      	ldr	r5, [r0, #8]
900088ce:	9101      	str	r1, [sp, #4]
900088d0:	f000 fde2 	bl	90009498 <xTaskGetCurrentTaskHandle>
900088d4:	4285      	cmp	r5, r0
900088d6:	9901      	ldr	r1, [sp, #4]
900088d8:	d105      	bne.n	900088e6 <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
900088da:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
900088dc:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
900088de:	3301      	adds	r3, #1
900088e0:	60e3      	str	r3, [r4, #12]
	}
900088e2:	b003      	add	sp, #12
900088e4:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
900088e6:	4620      	mov	r0, r4
900088e8:	f7ff ff16 	bl	90008718 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
900088ec:	2800      	cmp	r0, #0
900088ee:	d0f8      	beq.n	900088e2 <xQueueTakeMutexRecursive+0x32>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
900088f0:	68e3      	ldr	r3, [r4, #12]
900088f2:	3301      	adds	r3, #1
900088f4:	60e3      	str	r3, [r4, #12]
		return xReturn;
900088f6:	e7f4      	b.n	900088e2 <xQueueTakeMutexRecursive+0x32>

900088f8 <xQueueReceiveFromISR>:
{
900088f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
900088fc:	4689      	mov	r9, r1
900088fe:	4690      	mov	r8, r2
	configASSERT( pxQueue );
90008900:	4605      	mov	r5, r0
90008902:	b950      	cbnz	r0, 9000891a <xQueueReceiveFromISR+0x22>
90008904:	f04f 0350 	mov.w	r3, #80	; 0x50
90008908:	b672      	cpsid	i
9000890a:	f383 8811 	msr	BASEPRI, r3
9000890e:	f3bf 8f6f 	isb	sy
90008912:	f3bf 8f4f 	dsb	sy
90008916:	b662      	cpsie	i
90008918:	e7fe      	b.n	90008918 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000891a:	b961      	cbnz	r1, 90008936 <xQueueReceiveFromISR+0x3e>
9000891c:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000891e:	b153      	cbz	r3, 90008936 <xQueueReceiveFromISR+0x3e>
90008920:	f04f 0350 	mov.w	r3, #80	; 0x50
90008924:	b672      	cpsid	i
90008926:	f383 8811 	msr	BASEPRI, r3
9000892a:	f3bf 8f6f 	isb	sy
9000892e:	f3bf 8f4f 	dsb	sy
90008932:	b662      	cpsie	i
90008934:	e7fe      	b.n	90008934 <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
90008936:	f7ff faab 	bl	90007e90 <vPortValidateInterruptPriority>
	__asm volatile
9000893a:	f3ef 8711 	mrs	r7, BASEPRI
9000893e:	f04f 0350 	mov.w	r3, #80	; 0x50
90008942:	b672      	cpsid	i
90008944:	f383 8811 	msr	BASEPRI, r3
90008948:	f3bf 8f6f 	isb	sy
9000894c:	f3bf 8f4f 	dsb	sy
90008950:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
90008952:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
90008954:	b31c      	cbz	r4, 9000899e <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
90008956:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
9000895a:	4649      	mov	r1, r9
9000895c:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000895e:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
90008960:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
90008962:	f7ff fb07 	bl	90007f74 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
90008966:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
90008968:	1c73      	adds	r3, r6, #1
9000896a:	d113      	bne.n	90008994 <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000896c:	692b      	ldr	r3, [r5, #16]
9000896e:	b90b      	cbnz	r3, 90008974 <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
90008970:	2001      	movs	r0, #1
90008972:	e00b      	b.n	9000898c <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90008974:	f105 0010 	add.w	r0, r5, #16
90008978:	f000 fcf6 	bl	90009368 <xTaskRemoveFromEventList>
9000897c:	2800      	cmp	r0, #0
9000897e:	d0f7      	beq.n	90008970 <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
90008980:	f1b8 0f00 	cmp.w	r8, #0
90008984:	d0f4      	beq.n	90008970 <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
90008986:	2001      	movs	r0, #1
90008988:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
9000898c:	f387 8811 	msr	BASEPRI, r7
}
90008990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
90008994:	3601      	adds	r6, #1
90008996:	b276      	sxtb	r6, r6
90008998:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
9000899c:	e7e8      	b.n	90008970 <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
9000899e:	4620      	mov	r0, r4
900089a0:	e7f4      	b.n	9000898c <xQueueReceiveFromISR+0x94>

900089a2 <uxQueueMessagesWaiting>:
{
900089a2:	b513      	push	{r0, r1, r4, lr}
	configASSERT( xQueue );
900089a4:	4604      	mov	r4, r0
900089a6:	b950      	cbnz	r0, 900089be <uxQueueMessagesWaiting+0x1c>
	__asm volatile
900089a8:	f04f 0350 	mov.w	r3, #80	; 0x50
900089ac:	b672      	cpsid	i
900089ae:	f383 8811 	msr	BASEPRI, r3
900089b2:	f3bf 8f6f 	isb	sy
900089b6:	f3bf 8f4f 	dsb	sy
900089ba:	b662      	cpsie	i
900089bc:	e7fe      	b.n	900089bc <uxQueueMessagesWaiting+0x1a>
	taskENTER_CRITICAL();
900089be:	f7ff f961 	bl	90007c84 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
900089c2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
900089c4:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
900089c6:	f7ff f983 	bl	90007cd0 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
900089ca:	9801      	ldr	r0, [sp, #4]
900089cc:	b002      	add	sp, #8
900089ce:	bd10      	pop	{r4, pc}

900089d0 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
900089d0:	b950      	cbnz	r0, 900089e8 <uxQueueMessagesWaitingFromISR+0x18>
900089d2:	f04f 0350 	mov.w	r3, #80	; 0x50
900089d6:	b672      	cpsid	i
900089d8:	f383 8811 	msr	BASEPRI, r3
900089dc:	f3bf 8f6f 	isb	sy
900089e0:	f3bf 8f4f 	dsb	sy
900089e4:	b662      	cpsie	i
900089e6:	e7fe      	b.n	900089e6 <uxQueueMessagesWaitingFromISR+0x16>
	uxReturn = pxQueue->uxMessagesWaiting;
900089e8:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
900089ea:	4770      	bx	lr

900089ec <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
900089ec:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
900089ee:	4a07      	ldr	r2, [pc, #28]	; (90008a0c <vQueueAddToRegistry+0x20>)
	{
900089f0:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
900089f2:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
900089f6:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
900089fa:	b91d      	cbnz	r5, 90008a04 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
900089fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
90008a00:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
90008a02:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
90008a04:	3301      	adds	r3, #1
90008a06:	2b08      	cmp	r3, #8
90008a08:	d1f3      	bne.n	900089f2 <vQueueAddToRegistry+0x6>
90008a0a:	e7fa      	b.n	90008a02 <vQueueAddToRegistry+0x16>
90008a0c:	200272e4 	.word	0x200272e4

90008a10 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
90008a10:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
90008a12:	4909      	ldr	r1, [pc, #36]	; (90008a38 <vQueueUnregisterQueue+0x28>)
	{
90008a14:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
90008a16:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
90008a1a:	00dc      	lsls	r4, r3, #3
90008a1c:	4282      	cmp	r2, r0
90008a1e:	d106      	bne.n	90008a2e <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
90008a20:	4a06      	ldr	r2, [pc, #24]	; (90008a3c <vQueueUnregisterQueue+0x2c>)
90008a22:	2100      	movs	r1, #0
90008a24:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
90008a28:	4422      	add	r2, r4
90008a2a:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
90008a2c:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
90008a2e:	3301      	adds	r3, #1
90008a30:	2b08      	cmp	r3, #8
90008a32:	d1f0      	bne.n	90008a16 <vQueueUnregisterQueue+0x6>
90008a34:	e7fa      	b.n	90008a2c <vQueueUnregisterQueue+0x1c>
90008a36:	bf00      	nop
90008a38:	200272e8 	.word	0x200272e8
90008a3c:	200272e4 	.word	0x200272e4

90008a40 <vQueueDelete>:
{
90008a40:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
90008a42:	b950      	cbnz	r0, 90008a5a <vQueueDelete+0x1a>
90008a44:	f04f 0350 	mov.w	r3, #80	; 0x50
90008a48:	b672      	cpsid	i
90008a4a:	f383 8811 	msr	BASEPRI, r3
90008a4e:	f3bf 8f6f 	isb	sy
90008a52:	f3bf 8f4f 	dsb	sy
90008a56:	b662      	cpsie	i
90008a58:	e7fe      	b.n	90008a58 <vQueueDelete+0x18>
		vQueueUnregisterQueue( pxQueue );
90008a5a:	f7ff ffd9 	bl	90008a10 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
90008a5e:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
90008a62:	b91b      	cbnz	r3, 90008a6c <vQueueDelete+0x2c>
}
90008a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
90008a68:	f7ff b822 	b.w	90007ab0 <vPortFree>
}
90008a6c:	bd10      	pop	{r4, pc}

90008a6e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
90008a6e:	b570      	push	{r4, r5, r6, lr}
90008a70:	4604      	mov	r4, r0
90008a72:	460d      	mov	r5, r1
90008a74:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
90008a76:	f7ff f905 	bl	90007c84 <vPortEnterCritical>
90008a7a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
90008a7e:	2bff      	cmp	r3, #255	; 0xff
90008a80:	d102      	bne.n	90008a88 <vQueueWaitForMessageRestricted+0x1a>
90008a82:	2300      	movs	r3, #0
90008a84:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
90008a88:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
90008a8c:	2bff      	cmp	r3, #255	; 0xff
90008a8e:	d102      	bne.n	90008a96 <vQueueWaitForMessageRestricted+0x28>
90008a90:	2300      	movs	r3, #0
90008a92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
90008a96:	f7ff f91b 	bl	90007cd0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
90008a9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90008a9c:	b92b      	cbnz	r3, 90008aaa <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
90008a9e:	4632      	mov	r2, r6
90008aa0:	4629      	mov	r1, r5
90008aa2:	f104 0024 	add.w	r0, r4, #36	; 0x24
90008aa6:	f000 fc3f 	bl	90009328 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
90008aaa:	4620      	mov	r0, r4
	}
90008aac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
90008ab0:	f7ff ba75 	b.w	90007f9e <prvUnlockQueue>

90008ab4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
90008ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90008ab8:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
90008aba:	f7ff f8e3 	bl	90007c84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
90008abe:	4b2e      	ldr	r3, [pc, #184]	; (90008b78 <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
90008ac0:	4d2e      	ldr	r5, [pc, #184]	; (90008b7c <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
90008ac2:	681a      	ldr	r2, [r3, #0]
90008ac4:	4f2e      	ldr	r7, [pc, #184]	; (90008b80 <prvAddNewTaskToReadyList+0xcc>)
90008ac6:	3201      	adds	r2, #1
90008ac8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
90008aca:	682e      	ldr	r6, [r5, #0]
90008acc:	2e00      	cmp	r6, #0
90008ace:	d148      	bne.n	90008b62 <prvAddNewTaskToReadyList+0xae>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
90008ad0:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
90008ad2:	681b      	ldr	r3, [r3, #0]
90008ad4:	2b01      	cmp	r3, #1
90008ad6:	d11f      	bne.n	90008b18 <prvAddNewTaskToReadyList+0x64>
90008ad8:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
90008ada:	3601      	adds	r6, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
90008adc:	4640      	mov	r0, r8
90008ade:	f7ff f823 	bl	90007b28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
90008ae2:	f108 0814 	add.w	r8, r8, #20
90008ae6:	2e38      	cmp	r6, #56	; 0x38
90008ae8:	d1f7      	bne.n	90008ada <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
90008aea:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 90008bac <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
90008aee:	4e25      	ldr	r6, [pc, #148]	; (90008b84 <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
90008af0:	4640      	mov	r0, r8
90008af2:	f7ff f819 	bl	90007b28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
90008af6:	4630      	mov	r0, r6
90008af8:	f7ff f816 	bl	90007b28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
90008afc:	4822      	ldr	r0, [pc, #136]	; (90008b88 <prvAddNewTaskToReadyList+0xd4>)
90008afe:	f7ff f813 	bl	90007b28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
90008b02:	4822      	ldr	r0, [pc, #136]	; (90008b8c <prvAddNewTaskToReadyList+0xd8>)
90008b04:	f7ff f810 	bl	90007b28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
90008b08:	4821      	ldr	r0, [pc, #132]	; (90008b90 <prvAddNewTaskToReadyList+0xdc>)
90008b0a:	f7ff f80d 	bl	90007b28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
90008b0e:	4b21      	ldr	r3, [pc, #132]	; (90008b94 <prvAddNewTaskToReadyList+0xe0>)
90008b10:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
90008b14:	4b20      	ldr	r3, [pc, #128]	; (90008b98 <prvAddNewTaskToReadyList+0xe4>)
90008b16:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
90008b18:	4a20      	ldr	r2, [pc, #128]	; (90008b9c <prvAddNewTaskToReadyList+0xe8>)
90008b1a:	6813      	ldr	r3, [r2, #0]
90008b1c:	3301      	adds	r3, #1
90008b1e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
90008b20:	4a1f      	ldr	r2, [pc, #124]	; (90008ba0 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
90008b22:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
90008b24:	6811      	ldr	r1, [r2, #0]
90008b26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90008b28:	428b      	cmp	r3, r1
90008b2a:	d900      	bls.n	90008b2e <prvAddNewTaskToReadyList+0x7a>
90008b2c:	6013      	str	r3, [r2, #0]
90008b2e:	2014      	movs	r0, #20
90008b30:	1d21      	adds	r1, r4, #4
90008b32:	fb00 7003 	mla	r0, r0, r3, r7
90008b36:	f7ff f805 	bl	90007b44 <vListInsertEnd>
	taskEXIT_CRITICAL();
90008b3a:	f7ff f8c9 	bl	90007cd0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
90008b3e:	4b19      	ldr	r3, [pc, #100]	; (90008ba4 <prvAddNewTaskToReadyList+0xf0>)
90008b40:	681b      	ldr	r3, [r3, #0]
90008b42:	b163      	cbz	r3, 90008b5e <prvAddNewTaskToReadyList+0xaa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
90008b44:	682b      	ldr	r3, [r5, #0]
90008b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90008b48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90008b4a:	429a      	cmp	r2, r3
90008b4c:	d207      	bcs.n	90008b5e <prvAddNewTaskToReadyList+0xaa>
			taskYIELD_IF_USING_PREEMPTION();
90008b4e:	4b16      	ldr	r3, [pc, #88]	; (90008ba8 <prvAddNewTaskToReadyList+0xf4>)
90008b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90008b54:	601a      	str	r2, [r3, #0]
90008b56:	f3bf 8f4f 	dsb	sy
90008b5a:	f3bf 8f6f 	isb	sy
}
90008b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
90008b62:	4b10      	ldr	r3, [pc, #64]	; (90008ba4 <prvAddNewTaskToReadyList+0xf0>)
90008b64:	681b      	ldr	r3, [r3, #0]
90008b66:	2b00      	cmp	r3, #0
90008b68:	d1d6      	bne.n	90008b18 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
90008b6a:	682b      	ldr	r3, [r5, #0]
90008b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90008b6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90008b70:	429a      	cmp	r2, r3
90008b72:	d8d1      	bhi.n	90008b18 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
90008b74:	602c      	str	r4, [r5, #0]
90008b76:	e7cf      	b.n	90008b18 <prvAddNewTaskToReadyList+0x64>
90008b78:	2002649c 	.word	0x2002649c
90008b7c:	20026030 	.word	0x20026030
90008b80:	2002603c 	.word	0x2002603c
90008b84:	200264c8 	.word	0x200264c8
90008b88:	200264e4 	.word	0x200264e4
90008b8c:	20026510 	.word	0x20026510
90008b90:	200264fc 	.word	0x200264fc
90008b94:	20026034 	.word	0x20026034
90008b98:	20026038 	.word	0x20026038
90008b9c:	200264ac 	.word	0x200264ac
90008ba0:	200264b0 	.word	0x200264b0
90008ba4:	200264f8 	.word	0x200264f8
90008ba8:	e000ed04 	.word	0xe000ed04
90008bac:	200264b4 	.word	0x200264b4

90008bb0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90008bb0:	4a06      	ldr	r2, [pc, #24]	; (90008bcc <prvResetNextTaskUnblockTime+0x1c>)
90008bb2:	6813      	ldr	r3, [r2, #0]
90008bb4:	6819      	ldr	r1, [r3, #0]
90008bb6:	4b06      	ldr	r3, [pc, #24]	; (90008bd0 <prvResetNextTaskUnblockTime+0x20>)
90008bb8:	b919      	cbnz	r1, 90008bc2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
90008bba:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
90008bbe:	601a      	str	r2, [r3, #0]
	}
}
90008bc0:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90008bc2:	6812      	ldr	r2, [r2, #0]
90008bc4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
90008bc6:	68d2      	ldr	r2, [r2, #12]
90008bc8:	6852      	ldr	r2, [r2, #4]
90008bca:	e7f8      	b.n	90008bbe <prvResetNextTaskUnblockTime+0xe>
90008bcc:	20026034 	.word	0x20026034
90008bd0:	200264dc 	.word	0x200264dc

90008bd4 <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
90008bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90008bd8:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
90008bdc:	4606      	mov	r6, r0
90008bde:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90008be0:	21a5      	movs	r1, #165	; 0xa5
90008be2:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
90008be4:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90008be6:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
90008bea:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90008bee:	6b20      	ldr	r0, [r4, #48]	; 0x30
90008bf0:	f020 f8ce 	bl	90028d90 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90008bf4:	6b22      	ldr	r2, [r4, #48]	; 0x30
90008bf6:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
90008bf8:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
90008bfc:	2d00      	cmp	r5, #0
90008bfe:	d037      	beq.n	90008c70 <prvInitialiseNewTask.isra.0+0x9c>
90008c00:	1e6b      	subs	r3, r5, #1
90008c02:	f104 0234 	add.w	r2, r4, #52	; 0x34
90008c06:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90008c08:	f813 1f01 	ldrb.w	r1, [r3, #1]!
90008c0c:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
90008c10:	7819      	ldrb	r1, [r3, #0]
90008c12:	b109      	cbz	r1, 90008c18 <prvInitialiseNewTask.isra.0+0x44>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
90008c14:	42ab      	cmp	r3, r5
90008c16:	d1f7      	bne.n	90008c08 <prvInitialiseNewTask.isra.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
90008c18:	2300      	movs	r3, #0
90008c1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
90008c1e:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
90008c20:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90008c24:	1d20      	adds	r0, r4, #4
90008c26:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
90008c28:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
90008c2c:	bf28      	it	cs
90008c2e:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
90008c30:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
90008c32:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90008c34:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90008c38:	f7fe ff81 	bl	90007b3e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
90008c3c:	f104 0018 	add.w	r0, r4, #24
90008c40:	f7fe ff7d 	bl	90007b3e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
90008c44:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90008c48:	463a      	mov	r2, r7
90008c4a:	4631      	mov	r1, r6
90008c4c:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
90008c4e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90008c50:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
90008c52:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
90008c54:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
90008c58:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90008c5c:	f7fe ffe8 	bl	90007c30 <pxPortInitialiseStack>
90008c60:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
90008c62:	f1b8 0f00 	cmp.w	r8, #0
90008c66:	d001      	beq.n	90008c6c <prvInitialiseNewTask.isra.0+0x98>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
90008c68:	f8c8 4000 	str.w	r4, [r8]
}
90008c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
90008c70:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
90008c74:	e7d3      	b.n	90008c1e <prvInitialiseNewTask.isra.0+0x4a>

90008c76 <prvDeleteTCB>:
	{
90008c76:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
90008c78:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
90008c7c:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
90008c7e:	b93b      	cbnz	r3, 90008c90 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
90008c80:	6b00      	ldr	r0, [r0, #48]	; 0x30
90008c82:	f7fe ff15 	bl	90007ab0 <vPortFree>
				vPortFree( pxTCB );
90008c86:	4620      	mov	r0, r4
	}
90008c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
90008c8c:	f7fe bf10 	b.w	90007ab0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
90008c90:	2b01      	cmp	r3, #1
90008c92:	d0f9      	beq.n	90008c88 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
90008c94:	2b02      	cmp	r3, #2
90008c96:	d00a      	beq.n	90008cae <prvDeleteTCB+0x38>
90008c98:	f04f 0350 	mov.w	r3, #80	; 0x50
90008c9c:	b672      	cpsid	i
90008c9e:	f383 8811 	msr	BASEPRI, r3
90008ca2:	f3bf 8f6f 	isb	sy
90008ca6:	f3bf 8f4f 	dsb	sy
90008caa:	b662      	cpsie	i
90008cac:	e7fe      	b.n	90008cac <prvDeleteTCB+0x36>
	}
90008cae:	bd10      	pop	{r4, pc}

90008cb0 <prvIdleTask>:
{
90008cb0:	b580      	push	{r7, lr}
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90008cb2:	4e14      	ldr	r6, [pc, #80]	; (90008d04 <prvIdleTask+0x54>)
				taskYIELD();
90008cb4:	4f14      	ldr	r7, [pc, #80]	; (90008d08 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
90008cb6:	4c15      	ldr	r4, [pc, #84]	; (90008d0c <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
90008cb8:	4d15      	ldr	r5, [pc, #84]	; (90008d10 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
90008cba:	6823      	ldr	r3, [r4, #0]
90008cbc:	b96b      	cbnz	r3, 90008cda <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
90008cbe:	4b15      	ldr	r3, [pc, #84]	; (90008d14 <prvIdleTask+0x64>)
90008cc0:	681b      	ldr	r3, [r3, #0]
90008cc2:	2b01      	cmp	r3, #1
90008cc4:	d906      	bls.n	90008cd4 <prvIdleTask+0x24>
				taskYIELD();
90008cc6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
90008cca:	603b      	str	r3, [r7, #0]
90008ccc:	f3bf 8f4f 	dsb	sy
90008cd0:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
90008cd4:	f7f8 ff5c 	bl	90001b90 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
90008cd8:	e7ed      	b.n	90008cb6 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
90008cda:	f7fe ffd3 	bl	90007c84 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90008cde:	68f3      	ldr	r3, [r6, #12]
90008ce0:	f8d3 800c 	ldr.w	r8, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90008ce4:	f108 0004 	add.w	r0, r8, #4
90008ce8:	f7fe ff4f 	bl	90007b8a <uxListRemove>
				--uxCurrentNumberOfTasks;
90008cec:	682b      	ldr	r3, [r5, #0]
90008cee:	3b01      	subs	r3, #1
90008cf0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
90008cf2:	6823      	ldr	r3, [r4, #0]
90008cf4:	3b01      	subs	r3, #1
90008cf6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
90008cf8:	f7fe ffea 	bl	90007cd0 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
90008cfc:	4640      	mov	r0, r8
90008cfe:	f7ff ffba 	bl	90008c76 <prvDeleteTCB>
90008d02:	e7da      	b.n	90008cba <prvIdleTask+0xa>
90008d04:	20026510 	.word	0x20026510
90008d08:	e000ed04 	.word	0xe000ed04
90008d0c:	200264a0 	.word	0x200264a0
90008d10:	2002649c 	.word	0x2002649c
90008d14:	2002603c 	.word	0x2002603c

90008d18 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
90008d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
90008d1a:	4b16      	ldr	r3, [pc, #88]	; (90008d74 <prvAddCurrentTaskToDelayedList+0x5c>)
{
90008d1c:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90008d1e:	4e16      	ldr	r6, [pc, #88]	; (90008d78 <prvAddCurrentTaskToDelayedList+0x60>)
{
90008d20:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
90008d22:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90008d24:	6830      	ldr	r0, [r6, #0]
90008d26:	3004      	adds	r0, #4
90008d28:	f7fe ff2f 	bl	90007b8a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
90008d2c:	1c63      	adds	r3, r4, #1
90008d2e:	4633      	mov	r3, r6
90008d30:	d107      	bne.n	90008d42 <prvAddCurrentTaskToDelayedList+0x2a>
90008d32:	b137      	cbz	r7, 90008d42 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
90008d34:	6831      	ldr	r1, [r6, #0]
90008d36:	4811      	ldr	r0, [pc, #68]	; (90008d7c <prvAddCurrentTaskToDelayedList+0x64>)
90008d38:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
90008d3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
90008d3e:	f7fe bf01 	b.w	90007b44 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
90008d42:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
90008d44:	681a      	ldr	r2, [r3, #0]
90008d46:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
90008d48:	d307      	bcc.n	90008d5a <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90008d4a:	4a0d      	ldr	r2, [pc, #52]	; (90008d80 <prvAddCurrentTaskToDelayedList+0x68>)
90008d4c:	6810      	ldr	r0, [r2, #0]
90008d4e:	6819      	ldr	r1, [r3, #0]
}
90008d50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90008d54:	3104      	adds	r1, #4
90008d56:	f7fe bf01 	b.w	90007b5c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90008d5a:	4a0a      	ldr	r2, [pc, #40]	; (90008d84 <prvAddCurrentTaskToDelayedList+0x6c>)
90008d5c:	6810      	ldr	r0, [r2, #0]
90008d5e:	6819      	ldr	r1, [r3, #0]
90008d60:	3104      	adds	r1, #4
90008d62:	f7fe fefb 	bl	90007b5c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
90008d66:	4b08      	ldr	r3, [pc, #32]	; (90008d88 <prvAddCurrentTaskToDelayedList+0x70>)
90008d68:	681a      	ldr	r2, [r3, #0]
90008d6a:	42a2      	cmp	r2, r4
90008d6c:	d900      	bls.n	90008d70 <prvAddCurrentTaskToDelayedList+0x58>
					xNextTaskUnblockTime = xTimeToWake;
90008d6e:	601c      	str	r4, [r3, #0]
}
90008d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90008d72:	bf00      	nop
90008d74:	20026524 	.word	0x20026524
90008d78:	20026030 	.word	0x20026030
90008d7c:	200264fc 	.word	0x200264fc
90008d80:	20026038 	.word	0x20026038
90008d84:	20026034 	.word	0x20026034
90008d88:	200264dc 	.word	0x200264dc

90008d8c <xTaskCreateStatic>:
	{
90008d8c:	b570      	push	{r4, r5, r6, lr}
90008d8e:	b086      	sub	sp, #24
90008d90:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
90008d94:	b955      	cbnz	r5, 90008dac <xTaskCreateStatic+0x20>
90008d96:	f04f 0350 	mov.w	r3, #80	; 0x50
90008d9a:	b672      	cpsid	i
90008d9c:	f383 8811 	msr	BASEPRI, r3
90008da0:	f3bf 8f6f 	isb	sy
90008da4:	f3bf 8f4f 	dsb	sy
90008da8:	b662      	cpsie	i
90008daa:	e7fe      	b.n	90008daa <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
90008dac:	b954      	cbnz	r4, 90008dc4 <xTaskCreateStatic+0x38>
90008dae:	f04f 0350 	mov.w	r3, #80	; 0x50
90008db2:	b672      	cpsid	i
90008db4:	f383 8811 	msr	BASEPRI, r3
90008db8:	f3bf 8f6f 	isb	sy
90008dbc:	f3bf 8f4f 	dsb	sy
90008dc0:	b662      	cpsie	i
90008dc2:	e7fe      	b.n	90008dc2 <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
90008dc4:	2660      	movs	r6, #96	; 0x60
90008dc6:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
90008dc8:	9e05      	ldr	r6, [sp, #20]
90008dca:	2e60      	cmp	r6, #96	; 0x60
90008dcc:	d00a      	beq.n	90008de4 <xTaskCreateStatic+0x58>
90008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
90008dd2:	b672      	cpsid	i
90008dd4:	f383 8811 	msr	BASEPRI, r3
90008dd8:	f3bf 8f6f 	isb	sy
90008ddc:	f3bf 8f4f 	dsb	sy
90008de0:	b662      	cpsie	i
90008de2:	e7fe      	b.n	90008de2 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
90008de4:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
90008de6:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
90008de8:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
90008dea:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
90008dee:	ad04      	add	r5, sp, #16
90008df0:	9402      	str	r4, [sp, #8]
90008df2:	9501      	str	r5, [sp, #4]
90008df4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
90008df6:	9500      	str	r5, [sp, #0]
90008df8:	f7ff feec 	bl	90008bd4 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
90008dfc:	4620      	mov	r0, r4
90008dfe:	f7ff fe59 	bl	90008ab4 <prvAddNewTaskToReadyList>
	}
90008e02:	9804      	ldr	r0, [sp, #16]
90008e04:	b006      	add	sp, #24
90008e06:	bd70      	pop	{r4, r5, r6, pc}

90008e08 <xTaskCreate>:
	{
90008e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90008e0c:	4607      	mov	r7, r0
90008e0e:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
90008e10:	0090      	lsls	r0, r2, #2
	{
90008e12:	4688      	mov	r8, r1
90008e14:	4616      	mov	r6, r2
90008e16:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
90008e18:	f7fe fdbc 	bl	90007994 <pvPortMalloc>
			if( pxStack != NULL )
90008e1c:	4605      	mov	r5, r0
90008e1e:	b1e8      	cbz	r0, 90008e5c <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
90008e20:	2060      	movs	r0, #96	; 0x60
90008e22:	f7fe fdb7 	bl	90007994 <pvPortMalloc>
				if( pxNewTCB != NULL )
90008e26:	4604      	mov	r4, r0
90008e28:	b1a8      	cbz	r0, 90008e56 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
90008e2a:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
90008e2c:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
90008e2e:	4632      	mov	r2, r6
90008e30:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
90008e32:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
90008e36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90008e38:	9002      	str	r0, [sp, #8]
90008e3a:	4638      	mov	r0, r7
90008e3c:	9301      	str	r3, [sp, #4]
90008e3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90008e40:	9300      	str	r3, [sp, #0]
90008e42:	464b      	mov	r3, r9
90008e44:	f7ff fec6 	bl	90008bd4 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
90008e48:	4620      	mov	r0, r4
90008e4a:	f7ff fe33 	bl	90008ab4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
90008e4e:	2001      	movs	r0, #1
	}
90008e50:	b005      	add	sp, #20
90008e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
90008e56:	4628      	mov	r0, r5
90008e58:	f7fe fe2a 	bl	90007ab0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
90008e5c:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
90008e60:	e7f6      	b.n	90008e50 <xTaskCreate+0x48>
	...

90008e64 <vTaskDelete>:
	{
90008e64:	b570      	push	{r4, r5, r6, lr}
90008e66:	4604      	mov	r4, r0
90008e68:	4d23      	ldr	r5, [pc, #140]	; (90008ef8 <vTaskDelete+0x94>)
		taskENTER_CRITICAL();
90008e6a:	f7fe ff0b 	bl	90007c84 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
90008e6e:	b904      	cbnz	r4, 90008e72 <vTaskDelete+0xe>
90008e70:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90008e72:	1d26      	adds	r6, r4, #4
90008e74:	4630      	mov	r0, r6
90008e76:	f7fe fe88 	bl	90007b8a <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
90008e7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90008e7c:	b11b      	cbz	r3, 90008e86 <vTaskDelete+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
90008e7e:	f104 0018 	add.w	r0, r4, #24
90008e82:	f7fe fe82 	bl	90007b8a <uxListRemove>
			uxTaskNumber++;
90008e86:	4a1d      	ldr	r2, [pc, #116]	; (90008efc <vTaskDelete+0x98>)
90008e88:	6813      	ldr	r3, [r2, #0]
90008e8a:	3301      	adds	r3, #1
90008e8c:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
90008e8e:	682b      	ldr	r3, [r5, #0]
90008e90:	42a3      	cmp	r3, r4
90008e92:	d11d      	bne.n	90008ed0 <vTaskDelete+0x6c>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
90008e94:	4631      	mov	r1, r6
90008e96:	481a      	ldr	r0, [pc, #104]	; (90008f00 <vTaskDelete+0x9c>)
90008e98:	f7fe fe54 	bl	90007b44 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
90008e9c:	4a19      	ldr	r2, [pc, #100]	; (90008f04 <vTaskDelete+0xa0>)
90008e9e:	6813      	ldr	r3, [r2, #0]
90008ea0:	3301      	adds	r3, #1
90008ea2:	6013      	str	r3, [r2, #0]
		taskEXIT_CRITICAL();
90008ea4:	f7fe ff14 	bl	90007cd0 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
90008ea8:	4b17      	ldr	r3, [pc, #92]	; (90008f08 <vTaskDelete+0xa4>)
90008eaa:	681b      	ldr	r3, [r3, #0]
90008eac:	b313      	cbz	r3, 90008ef4 <vTaskDelete+0x90>
			if( pxTCB == pxCurrentTCB )
90008eae:	682b      	ldr	r3, [r5, #0]
90008eb0:	42a3      	cmp	r3, r4
90008eb2:	d11f      	bne.n	90008ef4 <vTaskDelete+0x90>
				configASSERT( uxSchedulerSuspended == 0 );
90008eb4:	4b15      	ldr	r3, [pc, #84]	; (90008f0c <vTaskDelete+0xa8>)
90008eb6:	681b      	ldr	r3, [r3, #0]
90008eb8:	b1a3      	cbz	r3, 90008ee4 <vTaskDelete+0x80>
90008eba:	f04f 0350 	mov.w	r3, #80	; 0x50
90008ebe:	b672      	cpsid	i
90008ec0:	f383 8811 	msr	BASEPRI, r3
90008ec4:	f3bf 8f6f 	isb	sy
90008ec8:	f3bf 8f4f 	dsb	sy
90008ecc:	b662      	cpsie	i
90008ece:	e7fe      	b.n	90008ece <vTaskDelete+0x6a>
				--uxCurrentNumberOfTasks;
90008ed0:	4a0f      	ldr	r2, [pc, #60]	; (90008f10 <vTaskDelete+0xac>)
				prvDeleteTCB( pxTCB );
90008ed2:	4620      	mov	r0, r4
				--uxCurrentNumberOfTasks;
90008ed4:	6813      	ldr	r3, [r2, #0]
90008ed6:	3b01      	subs	r3, #1
90008ed8:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
90008eda:	f7ff fecc 	bl	90008c76 <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
90008ede:	f7ff fe67 	bl	90008bb0 <prvResetNextTaskUnblockTime>
90008ee2:	e7df      	b.n	90008ea4 <vTaskDelete+0x40>
				portYIELD_WITHIN_API();
90008ee4:	4b0b      	ldr	r3, [pc, #44]	; (90008f14 <vTaskDelete+0xb0>)
90008ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90008eea:	601a      	str	r2, [r3, #0]
90008eec:	f3bf 8f4f 	dsb	sy
90008ef0:	f3bf 8f6f 	isb	sy
	}
90008ef4:	bd70      	pop	{r4, r5, r6, pc}
90008ef6:	bf00      	nop
90008ef8:	20026030 	.word	0x20026030
90008efc:	200264ac 	.word	0x200264ac
90008f00:	20026510 	.word	0x20026510
90008f04:	200264a0 	.word	0x200264a0
90008f08:	200264f8 	.word	0x200264f8
90008f0c:	200264a8 	.word	0x200264a8
90008f10:	2002649c 	.word	0x2002649c
90008f14:	e000ed04 	.word	0xe000ed04

90008f18 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
90008f18:	4a02      	ldr	r2, [pc, #8]	; (90008f24 <vTaskSuspendAll+0xc>)
90008f1a:	6813      	ldr	r3, [r2, #0]
90008f1c:	3301      	adds	r3, #1
90008f1e:	6013      	str	r3, [r2, #0]
}
90008f20:	4770      	bx	lr
90008f22:	bf00      	nop
90008f24:	200264a8 	.word	0x200264a8

90008f28 <xTaskGetTickCount>:
		xTicks = xTickCount;
90008f28:	4b01      	ldr	r3, [pc, #4]	; (90008f30 <xTaskGetTickCount+0x8>)
90008f2a:	6818      	ldr	r0, [r3, #0]
}
90008f2c:	4770      	bx	lr
90008f2e:	bf00      	nop
90008f30:	20026524 	.word	0x20026524

90008f34 <xTaskGetTickCountFromISR>:
{
90008f34:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
90008f36:	f7fe ffab 	bl	90007e90 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
90008f3a:	4b01      	ldr	r3, [pc, #4]	; (90008f40 <xTaskGetTickCountFromISR+0xc>)
90008f3c:	6818      	ldr	r0, [r3, #0]
}
90008f3e:	bd08      	pop	{r3, pc}
90008f40:	20026524 	.word	0x20026524

90008f44 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90008f44:	4b40      	ldr	r3, [pc, #256]	; (90009048 <xTaskIncrementTick+0x104>)
90008f46:	681b      	ldr	r3, [r3, #0]
{
90008f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90008f4c:	2b00      	cmp	r3, #0
90008f4e:	d174      	bne.n	9000903a <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
90008f50:	4b3e      	ldr	r3, [pc, #248]	; (9000904c <xTaskIncrementTick+0x108>)
90008f52:	681d      	ldr	r5, [r3, #0]
90008f54:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
90008f56:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
90008f58:	b9cd      	cbnz	r5, 90008f8e <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
90008f5a:	4b3d      	ldr	r3, [pc, #244]	; (90009050 <xTaskIncrementTick+0x10c>)
90008f5c:	681a      	ldr	r2, [r3, #0]
90008f5e:	6812      	ldr	r2, [r2, #0]
90008f60:	b152      	cbz	r2, 90008f78 <xTaskIncrementTick+0x34>
90008f62:	f04f 0350 	mov.w	r3, #80	; 0x50
90008f66:	b672      	cpsid	i
90008f68:	f383 8811 	msr	BASEPRI, r3
90008f6c:	f3bf 8f6f 	isb	sy
90008f70:	f3bf 8f4f 	dsb	sy
90008f74:	b662      	cpsie	i
90008f76:	e7fe      	b.n	90008f76 <xTaskIncrementTick+0x32>
90008f78:	4a36      	ldr	r2, [pc, #216]	; (90009054 <xTaskIncrementTick+0x110>)
90008f7a:	6819      	ldr	r1, [r3, #0]
90008f7c:	6810      	ldr	r0, [r2, #0]
90008f7e:	6018      	str	r0, [r3, #0]
90008f80:	6011      	str	r1, [r2, #0]
90008f82:	4a35      	ldr	r2, [pc, #212]	; (90009058 <xTaskIncrementTick+0x114>)
90008f84:	6813      	ldr	r3, [r2, #0]
90008f86:	3301      	adds	r3, #1
90008f88:	6013      	str	r3, [r2, #0]
90008f8a:	f7ff fe11 	bl	90008bb0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
90008f8e:	4e33      	ldr	r6, [pc, #204]	; (9000905c <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
90008f90:	2400      	movs	r4, #0
90008f92:	4f33      	ldr	r7, [pc, #204]	; (90009060 <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
90008f94:	6833      	ldr	r3, [r6, #0]
90008f96:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 9000906c <xTaskIncrementTick+0x128>
90008f9a:	42ab      	cmp	r3, r5
90008f9c:	d911      	bls.n	90008fc2 <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
90008f9e:	f8d8 3000 	ldr.w	r3, [r8]
90008fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90008fa4:	2314      	movs	r3, #20
90008fa6:	4353      	muls	r3, r2
90008fa8:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
90008faa:	2b02      	cmp	r3, #2
90008fac:	bf28      	it	cs
90008fae:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
90008fb0:	4b2c      	ldr	r3, [pc, #176]	; (90009064 <xTaskIncrementTick+0x120>)
90008fb2:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
90008fb4:	2b00      	cmp	r3, #0
}
90008fb6:	bf0c      	ite	eq
90008fb8:	4620      	moveq	r0, r4
90008fba:	2001      	movne	r0, #1
90008fbc:	b003      	add	sp, #12
90008fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90008fc2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 90009050 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
90008fc6:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 90009070 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90008fca:	f8d9 3000 	ldr.w	r3, [r9]
90008fce:	681b      	ldr	r3, [r3, #0]
90008fd0:	b91b      	cbnz	r3, 90008fda <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90008fd2:	f04f 33ff 	mov.w	r3, #4294967295
90008fd6:	6033      	str	r3, [r6, #0]
					break;
90008fd8:	e7e1      	b.n	90008f9e <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90008fda:	f8d9 3000 	ldr.w	r3, [r9]
90008fde:	68db      	ldr	r3, [r3, #12]
90008fe0:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
90008fe4:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
90008fe8:	4295      	cmp	r5, r2
90008fea:	d201      	bcs.n	90008ff0 <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
90008fec:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
90008fee:	e7d6      	b.n	90008f9e <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90008ff0:	f10b 0104 	add.w	r1, fp, #4
90008ff4:	4608      	mov	r0, r1
90008ff6:	9101      	str	r1, [sp, #4]
90008ff8:	f7fe fdc7 	bl	90007b8a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
90008ffc:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
90009000:	9901      	ldr	r1, [sp, #4]
90009002:	b122      	cbz	r2, 9000900e <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
90009004:	f10b 0018 	add.w	r0, fp, #24
90009008:	f7fe fdbf 	bl	90007b8a <uxListRemove>
9000900c:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
9000900e:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
90009012:	f8da 2000 	ldr.w	r2, [sl]
90009016:	4290      	cmp	r0, r2
90009018:	d901      	bls.n	9000901e <xTaskIncrementTick+0xda>
9000901a:	f8ca 0000 	str.w	r0, [sl]
9000901e:	2314      	movs	r3, #20
90009020:	fb03 7000 	mla	r0, r3, r0, r7
90009024:	f7fe fd8e 	bl	90007b44 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
90009028:	f8d8 1000 	ldr.w	r1, [r8]
9000902c:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
90009030:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
90009032:	429a      	cmp	r2, r3
90009034:	bf28      	it	cs
90009036:	2401      	movcs	r4, #1
90009038:	e7c7      	b.n	90008fca <xTaskIncrementTick+0x86>
		++uxPendedTicks;
9000903a:	4a0b      	ldr	r2, [pc, #44]	; (90009068 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
9000903c:	2400      	movs	r4, #0
		++uxPendedTicks;
9000903e:	6813      	ldr	r3, [r2, #0]
90009040:	3301      	adds	r3, #1
90009042:	6013      	str	r3, [r2, #0]
90009044:	e7b4      	b.n	90008fb0 <xTaskIncrementTick+0x6c>
90009046:	bf00      	nop
90009048:	200264a8 	.word	0x200264a8
9000904c:	20026524 	.word	0x20026524
90009050:	20026034 	.word	0x20026034
90009054:	20026038 	.word	0x20026038
90009058:	200264e0 	.word	0x200264e0
9000905c:	200264dc 	.word	0x200264dc
90009060:	2002603c 	.word	0x2002603c
90009064:	20026528 	.word	0x20026528
90009068:	200264a4 	.word	0x200264a4
9000906c:	20026030 	.word	0x20026030
90009070:	200264b0 	.word	0x200264b0

90009074 <xTaskResumeAll>:
{
90009074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
90009076:	4c31      	ldr	r4, [pc, #196]	; (9000913c <xTaskResumeAll+0xc8>)
90009078:	6823      	ldr	r3, [r4, #0]
9000907a:	b953      	cbnz	r3, 90009092 <xTaskResumeAll+0x1e>
9000907c:	f04f 0350 	mov.w	r3, #80	; 0x50
90009080:	b672      	cpsid	i
90009082:	f383 8811 	msr	BASEPRI, r3
90009086:	f3bf 8f6f 	isb	sy
9000908a:	f3bf 8f4f 	dsb	sy
9000908e:	b662      	cpsie	i
90009090:	e7fe      	b.n	90009090 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
90009092:	f7fe fdf7 	bl	90007c84 <vPortEnterCritical>
		--uxSchedulerSuspended;
90009096:	6823      	ldr	r3, [r4, #0]
90009098:	3b01      	subs	r3, #1
9000909a:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000909c:	6824      	ldr	r4, [r4, #0]
9000909e:	b12c      	cbz	r4, 900090ac <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
900090a0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
900090a2:	f7fe fe15 	bl	90007cd0 <vPortExitCritical>
}
900090a6:	4620      	mov	r0, r4
900090a8:	b003      	add	sp, #12
900090aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
900090ac:	4b24      	ldr	r3, [pc, #144]	; (90009140 <xTaskResumeAll+0xcc>)
900090ae:	681b      	ldr	r3, [r3, #0]
900090b0:	2b00      	cmp	r3, #0
900090b2:	d0f5      	beq.n	900090a0 <xTaskResumeAll+0x2c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
900090b4:	4d23      	ldr	r5, [pc, #140]	; (90009144 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
900090b6:	4e24      	ldr	r6, [pc, #144]	; (90009148 <xTaskResumeAll+0xd4>)
900090b8:	4f24      	ldr	r7, [pc, #144]	; (9000914c <xTaskResumeAll+0xd8>)
900090ba:	e01e      	b.n	900090fa <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900090bc:	68eb      	ldr	r3, [r5, #12]
900090be:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
900090c0:	f104 0018 	add.w	r0, r4, #24
900090c4:	f7fe fd61 	bl	90007b8a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
900090c8:	1d21      	adds	r1, r4, #4
900090ca:	4608      	mov	r0, r1
900090cc:	9101      	str	r1, [sp, #4]
900090ce:	f7fe fd5c 	bl	90007b8a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
900090d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
900090d4:	6832      	ldr	r2, [r6, #0]
900090d6:	9901      	ldr	r1, [sp, #4]
900090d8:	4293      	cmp	r3, r2
900090da:	d900      	bls.n	900090de <xTaskResumeAll+0x6a>
900090dc:	6033      	str	r3, [r6, #0]
900090de:	2014      	movs	r0, #20
900090e0:	fb00 7003 	mla	r0, r0, r3, r7
900090e4:	f7fe fd2e 	bl	90007b44 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
900090e8:	4b19      	ldr	r3, [pc, #100]	; (90009150 <xTaskResumeAll+0xdc>)
900090ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
900090ec:	681b      	ldr	r3, [r3, #0]
900090ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900090f0:	429a      	cmp	r2, r3
900090f2:	d302      	bcc.n	900090fa <xTaskResumeAll+0x86>
						xYieldPending = pdTRUE;
900090f4:	4b17      	ldr	r3, [pc, #92]	; (90009154 <xTaskResumeAll+0xe0>)
900090f6:	2201      	movs	r2, #1
900090f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
900090fa:	682b      	ldr	r3, [r5, #0]
900090fc:	2b00      	cmp	r3, #0
900090fe:	d1dd      	bne.n	900090bc <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
90009100:	b10c      	cbz	r4, 90009106 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
90009102:	f7ff fd55 	bl	90008bb0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
90009106:	4d14      	ldr	r5, [pc, #80]	; (90009158 <xTaskResumeAll+0xe4>)
90009108:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
9000910a:	b144      	cbz	r4, 9000911e <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
9000910c:	4e11      	ldr	r6, [pc, #68]	; (90009154 <xTaskResumeAll+0xe0>)
9000910e:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
90009110:	f7ff ff18 	bl	90008f44 <xTaskIncrementTick>
90009114:	b100      	cbz	r0, 90009118 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
90009116:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
90009118:	3c01      	subs	r4, #1
9000911a:	d1f9      	bne.n	90009110 <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
9000911c:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
9000911e:	4b0d      	ldr	r3, [pc, #52]	; (90009154 <xTaskResumeAll+0xe0>)
90009120:	681b      	ldr	r3, [r3, #0]
90009122:	2b00      	cmp	r3, #0
90009124:	d0bc      	beq.n	900090a0 <xTaskResumeAll+0x2c>
					taskYIELD_IF_USING_PREEMPTION();
90009126:	4b0d      	ldr	r3, [pc, #52]	; (9000915c <xTaskResumeAll+0xe8>)
90009128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000912c:	601a      	str	r2, [r3, #0]
9000912e:	f3bf 8f4f 	dsb	sy
90009132:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
90009136:	2401      	movs	r4, #1
90009138:	e7b3      	b.n	900090a2 <xTaskResumeAll+0x2e>
9000913a:	bf00      	nop
9000913c:	200264a8 	.word	0x200264a8
90009140:	2002649c 	.word	0x2002649c
90009144:	200264e4 	.word	0x200264e4
90009148:	200264b0 	.word	0x200264b0
9000914c:	2002603c 	.word	0x2002603c
90009150:	20026030 	.word	0x20026030
90009154:	20026528 	.word	0x20026528
90009158:	200264a4 	.word	0x200264a4
9000915c:	e000ed04 	.word	0xe000ed04

90009160 <vTaskDelay>:
	{
90009160:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
90009162:	b940      	cbnz	r0, 90009176 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
90009164:	4b0f      	ldr	r3, [pc, #60]	; (900091a4 <vTaskDelay+0x44>)
90009166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000916a:	601a      	str	r2, [r3, #0]
9000916c:	f3bf 8f4f 	dsb	sy
90009170:	f3bf 8f6f 	isb	sy
	}
90009174:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
90009176:	4b0c      	ldr	r3, [pc, #48]	; (900091a8 <vTaskDelay+0x48>)
90009178:	6819      	ldr	r1, [r3, #0]
9000917a:	b151      	cbz	r1, 90009192 <vTaskDelay+0x32>
9000917c:	f04f 0350 	mov.w	r3, #80	; 0x50
90009180:	b672      	cpsid	i
90009182:	f383 8811 	msr	BASEPRI, r3
90009186:	f3bf 8f6f 	isb	sy
9000918a:	f3bf 8f4f 	dsb	sy
9000918e:	b662      	cpsie	i
90009190:	e7fe      	b.n	90009190 <vTaskDelay+0x30>
			vTaskSuspendAll();
90009192:	f7ff fec1 	bl	90008f18 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
90009196:	f7ff fdbf 	bl	90008d18 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
9000919a:	f7ff ff6b 	bl	90009074 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
9000919e:	2800      	cmp	r0, #0
900091a0:	d0e0      	beq.n	90009164 <vTaskDelay+0x4>
900091a2:	e7e7      	b.n	90009174 <vTaskDelay+0x14>
900091a4:	e000ed04 	.word	0xe000ed04
900091a8:	200264a8 	.word	0x200264a8

900091ac <xTaskCallApplicationTaskHook>:
	{
900091ac:	4603      	mov	r3, r0
900091ae:	4608      	mov	r0, r1
		if( xTask == NULL )
900091b0:	b90b      	cbnz	r3, 900091b6 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
900091b2:	4b03      	ldr	r3, [pc, #12]	; (900091c0 <xTaskCallApplicationTaskHook+0x14>)
900091b4:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
900091b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900091b8:	b103      	cbz	r3, 900091bc <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
900091ba:	4718      	bx	r3
	}
900091bc:	4618      	mov	r0, r3
900091be:	4770      	bx	lr
900091c0:	20026030 	.word	0x20026030

900091c4 <vTaskStartScheduler>:
{
900091c4:	b510      	push	{r4, lr}
900091c6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
900091c8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
900091ca:	aa07      	add	r2, sp, #28
900091cc:	a906      	add	r1, sp, #24
900091ce:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
900091d0:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
900091d4:	f7fe fba2 	bl	9000791c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
900091d8:	9b05      	ldr	r3, [sp, #20]
900091da:	9a07      	ldr	r2, [sp, #28]
900091dc:	9302      	str	r3, [sp, #8]
900091de:	9b06      	ldr	r3, [sp, #24]
900091e0:	4919      	ldr	r1, [pc, #100]	; (90009248 <vTaskStartScheduler+0x84>)
900091e2:	481a      	ldr	r0, [pc, #104]	; (9000924c <vTaskStartScheduler+0x88>)
900091e4:	e9cd 4300 	strd	r4, r3, [sp]
900091e8:	4623      	mov	r3, r4
900091ea:	f7ff fdcf 	bl	90008d8c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
900091ee:	b1e0      	cbz	r0, 9000922a <vTaskStartScheduler+0x66>
			xReturn = xTimerCreateTimerTask();
900091f0:	f000 faa6 	bl	90009740 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
900091f4:	2801      	cmp	r0, #1
900091f6:	d11a      	bne.n	9000922e <vTaskStartScheduler+0x6a>
900091f8:	f04f 0350 	mov.w	r3, #80	; 0x50
900091fc:	b672      	cpsid	i
900091fe:	f383 8811 	msr	BASEPRI, r3
90009202:	f3bf 8f6f 	isb	sy
90009206:	f3bf 8f4f 	dsb	sy
9000920a:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
9000920c:	4b10      	ldr	r3, [pc, #64]	; (90009250 <vTaskStartScheduler+0x8c>)
9000920e:	f04f 32ff 	mov.w	r2, #4294967295
		traceTASK_SWITCHED_IN();
90009212:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
90009214:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
90009216:	4b0f      	ldr	r3, [pc, #60]	; (90009254 <vTaskStartScheduler+0x90>)
90009218:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
9000921a:	4b0f      	ldr	r3, [pc, #60]	; (90009258 <vTaskStartScheduler+0x94>)
9000921c:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
9000921e:	4b0f      	ldr	r3, [pc, #60]	; (9000925c <vTaskStartScheduler+0x98>)
90009220:	6818      	ldr	r0, [r3, #0]
90009222:	f7ff ffc3 	bl	900091ac <xTaskCallApplicationTaskHook>
		if( xPortStartScheduler() != pdFALSE )
90009226:	f7fe fdcf 	bl	90007dc8 <xPortStartScheduler>
}
9000922a:	b008      	add	sp, #32
9000922c:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
9000922e:	3001      	adds	r0, #1
90009230:	d1fb      	bne.n	9000922a <vTaskStartScheduler+0x66>
90009232:	f04f 0350 	mov.w	r3, #80	; 0x50
90009236:	b672      	cpsid	i
90009238:	f383 8811 	msr	BASEPRI, r3
9000923c:	f3bf 8f6f 	isb	sy
90009240:	f3bf 8f4f 	dsb	sy
90009244:	b662      	cpsie	i
90009246:	e7fe      	b.n	90009246 <vTaskStartScheduler+0x82>
90009248:	9002b254 	.word	0x9002b254
9000924c:	90008cb1 	.word	0x90008cb1
90009250:	200264dc 	.word	0x200264dc
90009254:	200264f8 	.word	0x200264f8
90009258:	20026524 	.word	0x20026524
9000925c:	20026030 	.word	0x20026030

90009260 <vTaskSwitchContext>:
{
90009260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
90009262:	4b1e      	ldr	r3, [pc, #120]	; (900092dc <vTaskSwitchContext+0x7c>)
90009264:	681a      	ldr	r2, [r3, #0]
90009266:	4b1e      	ldr	r3, [pc, #120]	; (900092e0 <vTaskSwitchContext+0x80>)
90009268:	b112      	cbz	r2, 90009270 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
9000926a:	2201      	movs	r2, #1
9000926c:	601a      	str	r2, [r3, #0]
}
9000926e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
90009270:	4e1c      	ldr	r6, [pc, #112]	; (900092e4 <vTaskSwitchContext+0x84>)
90009272:	2101      	movs	r1, #1
		xYieldPending = pdFALSE;
90009274:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
90009276:	6830      	ldr	r0, [r6, #0]
90009278:	f7ff ff98 	bl	900091ac <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000927c:	4d1a      	ldr	r5, [pc, #104]	; (900092e8 <vTaskSwitchContext+0x88>)
9000927e:	4a1b      	ldr	r2, [pc, #108]	; (900092ec <vTaskSwitchContext+0x8c>)
90009280:	f04f 0c14 	mov.w	ip, #20
90009284:	682b      	ldr	r3, [r5, #0]
90009286:	4617      	mov	r7, r2
90009288:	fb0c f103 	mul.w	r1, ip, r3
9000928c:	5854      	ldr	r4, [r2, r1]
9000928e:	1850      	adds	r0, r2, r1
90009290:	b1ac      	cbz	r4, 900092be <vTaskSwitchContext+0x5e>
90009292:	6844      	ldr	r4, [r0, #4]
90009294:	3108      	adds	r1, #8
90009296:	6864      	ldr	r4, [r4, #4]
90009298:	440a      	add	r2, r1
		traceTASK_SWITCHED_IN();
9000929a:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000929c:	4294      	cmp	r4, r2
9000929e:	6044      	str	r4, [r0, #4]
900092a0:	bf04      	itt	eq
900092a2:	6862      	ldreq	r2, [r4, #4]
900092a4:	6042      	streq	r2, [r0, #4]
900092a6:	2214      	movs	r2, #20
900092a8:	fb02 7203 	mla	r2, r2, r3, r7
900092ac:	6852      	ldr	r2, [r2, #4]
900092ae:	68d2      	ldr	r2, [r2, #12]
900092b0:	6032      	str	r2, [r6, #0]
900092b2:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
900092b4:	6830      	ldr	r0, [r6, #0]
}
900092b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
900092ba:	f7ff bf77 	b.w	900091ac <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900092be:	b953      	cbnz	r3, 900092d6 <vTaskSwitchContext+0x76>
900092c0:	f04f 0350 	mov.w	r3, #80	; 0x50
900092c4:	b672      	cpsid	i
900092c6:	f383 8811 	msr	BASEPRI, r3
900092ca:	f3bf 8f6f 	isb	sy
900092ce:	f3bf 8f4f 	dsb	sy
900092d2:	b662      	cpsie	i
900092d4:	e7fe      	b.n	900092d4 <vTaskSwitchContext+0x74>
900092d6:	3b01      	subs	r3, #1
900092d8:	e7d6      	b.n	90009288 <vTaskSwitchContext+0x28>
900092da:	bf00      	nop
900092dc:	200264a8 	.word	0x200264a8
900092e0:	20026528 	.word	0x20026528
900092e4:	20026030 	.word	0x20026030
900092e8:	200264b0 	.word	0x200264b0
900092ec:	2002603c 	.word	0x2002603c

900092f0 <vTaskPlaceOnEventList>:
{
900092f0:	b510      	push	{r4, lr}
900092f2:	460c      	mov	r4, r1
	configASSERT( pxEventList );
900092f4:	b950      	cbnz	r0, 9000930c <vTaskPlaceOnEventList+0x1c>
900092f6:	f04f 0350 	mov.w	r3, #80	; 0x50
900092fa:	b672      	cpsid	i
900092fc:	f383 8811 	msr	BASEPRI, r3
90009300:	f3bf 8f6f 	isb	sy
90009304:	f3bf 8f4f 	dsb	sy
90009308:	b662      	cpsie	i
9000930a:	e7fe      	b.n	9000930a <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
9000930c:	4b05      	ldr	r3, [pc, #20]	; (90009324 <vTaskPlaceOnEventList+0x34>)
9000930e:	6819      	ldr	r1, [r3, #0]
90009310:	3118      	adds	r1, #24
90009312:	f7fe fc23 	bl	90007b5c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
90009316:	4620      	mov	r0, r4
90009318:	2101      	movs	r1, #1
}
9000931a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
9000931e:	f7ff bcfb 	b.w	90008d18 <prvAddCurrentTaskToDelayedList>
90009322:	bf00      	nop
90009324:	20026030 	.word	0x20026030

90009328 <vTaskPlaceOnEventListRestricted>:
	{
90009328:	b538      	push	{r3, r4, r5, lr}
9000932a:	460d      	mov	r5, r1
9000932c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
9000932e:	b950      	cbnz	r0, 90009346 <vTaskPlaceOnEventListRestricted+0x1e>
90009330:	f04f 0350 	mov.w	r3, #80	; 0x50
90009334:	b672      	cpsid	i
90009336:	f383 8811 	msr	BASEPRI, r3
9000933a:	f3bf 8f6f 	isb	sy
9000933e:	f3bf 8f4f 	dsb	sy
90009342:	b662      	cpsie	i
90009344:	e7fe      	b.n	90009344 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
90009346:	4b07      	ldr	r3, [pc, #28]	; (90009364 <vTaskPlaceOnEventListRestricted+0x3c>)
90009348:	6819      	ldr	r1, [r3, #0]
9000934a:	3118      	adds	r1, #24
9000934c:	f7fe fbfa 	bl	90007b44 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
90009350:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
90009352:	4621      	mov	r1, r4
90009354:	bf0c      	ite	eq
90009356:	4628      	moveq	r0, r5
90009358:	f04f 30ff 	movne.w	r0, #4294967295
	}
9000935c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
90009360:	f7ff bcda 	b.w	90008d18 <prvAddCurrentTaskToDelayedList>
90009364:	20026030 	.word	0x20026030

90009368 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90009368:	68c3      	ldr	r3, [r0, #12]
{
9000936a:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000936c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
9000936e:	b954      	cbnz	r4, 90009386 <xTaskRemoveFromEventList+0x1e>
90009370:	f04f 0350 	mov.w	r3, #80	; 0x50
90009374:	b672      	cpsid	i
90009376:	f383 8811 	msr	BASEPRI, r3
9000937a:	f3bf 8f6f 	isb	sy
9000937e:	f3bf 8f4f 	dsb	sy
90009382:	b662      	cpsie	i
90009384:	e7fe      	b.n	90009384 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
90009386:	f104 0118 	add.w	r1, r4, #24
9000938a:	4608      	mov	r0, r1
9000938c:	9101      	str	r1, [sp, #4]
9000938e:	f7fe fbfc 	bl	90007b8a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90009392:	4b12      	ldr	r3, [pc, #72]	; (900093dc <xTaskRemoveFromEventList+0x74>)
90009394:	9901      	ldr	r1, [sp, #4]
90009396:	681b      	ldr	r3, [r3, #0]
90009398:	b9e3      	cbnz	r3, 900093d4 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
9000939a:	1d21      	adds	r1, r4, #4
9000939c:	4608      	mov	r0, r1
9000939e:	9101      	str	r1, [sp, #4]
900093a0:	f7fe fbf3 	bl	90007b8a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
900093a4:	4a0e      	ldr	r2, [pc, #56]	; (900093e0 <xTaskRemoveFromEventList+0x78>)
900093a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
900093a8:	6810      	ldr	r0, [r2, #0]
900093aa:	9901      	ldr	r1, [sp, #4]
900093ac:	4283      	cmp	r3, r0
900093ae:	d900      	bls.n	900093b2 <xTaskRemoveFromEventList+0x4a>
900093b0:	6013      	str	r3, [r2, #0]
900093b2:	4a0c      	ldr	r2, [pc, #48]	; (900093e4 <xTaskRemoveFromEventList+0x7c>)
900093b4:	2014      	movs	r0, #20
900093b6:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
900093ba:	f7fe fbc3 	bl	90007b44 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
900093be:	4b0a      	ldr	r3, [pc, #40]	; (900093e8 <xTaskRemoveFromEventList+0x80>)
900093c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
900093c2:	681b      	ldr	r3, [r3, #0]
900093c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900093c6:	429a      	cmp	r2, r3
900093c8:	d906      	bls.n	900093d8 <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
900093ca:	2001      	movs	r0, #1
900093cc:	4b07      	ldr	r3, [pc, #28]	; (900093ec <xTaskRemoveFromEventList+0x84>)
900093ce:	6018      	str	r0, [r3, #0]
}
900093d0:	b002      	add	sp, #8
900093d2:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
900093d4:	4806      	ldr	r0, [pc, #24]	; (900093f0 <xTaskRemoveFromEventList+0x88>)
900093d6:	e7f0      	b.n	900093ba <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
900093d8:	2000      	movs	r0, #0
	return xReturn;
900093da:	e7f9      	b.n	900093d0 <xTaskRemoveFromEventList+0x68>
900093dc:	200264a8 	.word	0x200264a8
900093e0:	200264b0 	.word	0x200264b0
900093e4:	2002603c 	.word	0x2002603c
900093e8:	20026030 	.word	0x20026030
900093ec:	20026528 	.word	0x20026528
900093f0:	200264e4 	.word	0x200264e4

900093f4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
900093f4:	4b03      	ldr	r3, [pc, #12]	; (90009404 <vTaskInternalSetTimeOutState+0x10>)
900093f6:	681b      	ldr	r3, [r3, #0]
900093f8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
900093fa:	4b03      	ldr	r3, [pc, #12]	; (90009408 <vTaskInternalSetTimeOutState+0x14>)
900093fc:	681b      	ldr	r3, [r3, #0]
900093fe:	6043      	str	r3, [r0, #4]
}
90009400:	4770      	bx	lr
90009402:	bf00      	nop
90009404:	200264e0 	.word	0x200264e0
90009408:	20026524 	.word	0x20026524

9000940c <xTaskCheckForTimeOut>:
{
9000940c:	b570      	push	{r4, r5, r6, lr}
9000940e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
90009410:	4605      	mov	r5, r0
90009412:	b950      	cbnz	r0, 9000942a <xTaskCheckForTimeOut+0x1e>
90009414:	f04f 0350 	mov.w	r3, #80	; 0x50
90009418:	b672      	cpsid	i
9000941a:	f383 8811 	msr	BASEPRI, r3
9000941e:	f3bf 8f6f 	isb	sy
90009422:	f3bf 8f4f 	dsb	sy
90009426:	b662      	cpsie	i
90009428:	e7fe      	b.n	90009428 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
9000942a:	b951      	cbnz	r1, 90009442 <xTaskCheckForTimeOut+0x36>
9000942c:	f04f 0350 	mov.w	r3, #80	; 0x50
90009430:	b672      	cpsid	i
90009432:	f383 8811 	msr	BASEPRI, r3
90009436:	f3bf 8f6f 	isb	sy
9000943a:	f3bf 8f4f 	dsb	sy
9000943e:	b662      	cpsie	i
90009440:	e7fe      	b.n	90009440 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
90009442:	f7fe fc1f 	bl	90007c84 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
90009446:	4b0f      	ldr	r3, [pc, #60]	; (90009484 <xTaskCheckForTimeOut+0x78>)
90009448:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
9000944a:	6823      	ldr	r3, [r4, #0]
9000944c:	1c5a      	adds	r2, r3, #1
9000944e:	d010      	beq.n	90009472 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
90009450:	480d      	ldr	r0, [pc, #52]	; (90009488 <xTaskCheckForTimeOut+0x7c>)
90009452:	682e      	ldr	r6, [r5, #0]
90009454:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
90009456:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
90009458:	4286      	cmp	r6, r0
9000945a:	d001      	beq.n	90009460 <xTaskCheckForTimeOut+0x54>
9000945c:	428a      	cmp	r2, r1
9000945e:	d90f      	bls.n	90009480 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
90009460:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
90009462:	4283      	cmp	r3, r0
90009464:	d90a      	bls.n	9000947c <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
90009466:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
90009468:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
9000946a:	4413      	add	r3, r2
9000946c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
9000946e:	f7ff ffc1 	bl	900093f4 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
90009472:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
90009474:	f7fe fc2c 	bl	90007cd0 <vPortExitCritical>
}
90009478:	4620      	mov	r0, r4
9000947a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
9000947c:	2300      	movs	r3, #0
9000947e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
90009480:	2401      	movs	r4, #1
90009482:	e7f7      	b.n	90009474 <xTaskCheckForTimeOut+0x68>
90009484:	20026524 	.word	0x20026524
90009488:	200264e0 	.word	0x200264e0

9000948c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
9000948c:	4b01      	ldr	r3, [pc, #4]	; (90009494 <vTaskMissedYield+0x8>)
9000948e:	2201      	movs	r2, #1
90009490:	601a      	str	r2, [r3, #0]
}
90009492:	4770      	bx	lr
90009494:	20026528 	.word	0x20026528

90009498 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
90009498:	4b01      	ldr	r3, [pc, #4]	; (900094a0 <xTaskGetCurrentTaskHandle+0x8>)
9000949a:	6818      	ldr	r0, [r3, #0]
	}
9000949c:	4770      	bx	lr
9000949e:	bf00      	nop
900094a0:	20026030 	.word	0x20026030

900094a4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
900094a4:	4b05      	ldr	r3, [pc, #20]	; (900094bc <xTaskGetSchedulerState+0x18>)
900094a6:	681b      	ldr	r3, [r3, #0]
900094a8:	b133      	cbz	r3, 900094b8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
900094aa:	4b05      	ldr	r3, [pc, #20]	; (900094c0 <xTaskGetSchedulerState+0x1c>)
900094ac:	681b      	ldr	r3, [r3, #0]
900094ae:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
900094b0:	bf0c      	ite	eq
900094b2:	2002      	moveq	r0, #2
900094b4:	2000      	movne	r0, #0
900094b6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
900094b8:	2001      	movs	r0, #1
	}
900094ba:	4770      	bx	lr
900094bc:	200264f8 	.word	0x200264f8
900094c0:	200264a8 	.word	0x200264a8

900094c4 <xTaskPriorityInherit>:
	{
900094c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
900094c6:	4604      	mov	r4, r0
900094c8:	b348      	cbz	r0, 9000951e <xTaskPriorityInherit+0x5a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
900094ca:	4a1c      	ldr	r2, [pc, #112]	; (9000953c <xTaskPriorityInherit+0x78>)
900094cc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
900094ce:	6811      	ldr	r1, [r2, #0]
900094d0:	4616      	mov	r6, r2
900094d2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
900094d4:	428b      	cmp	r3, r1
900094d6:	d228      	bcs.n	9000952a <xTaskPriorityInherit+0x66>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
900094d8:	6982      	ldr	r2, [r0, #24]
900094da:	2a00      	cmp	r2, #0
900094dc:	db04      	blt.n	900094e8 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900094de:	6832      	ldr	r2, [r6, #0]
900094e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
900094e2:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
900094e6:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
900094e8:	2214      	movs	r2, #20
900094ea:	4d15      	ldr	r5, [pc, #84]	; (90009540 <xTaskPriorityInherit+0x7c>)
900094ec:	fb02 5303 	mla	r3, r2, r3, r5
900094f0:	6962      	ldr	r2, [r4, #20]
900094f2:	429a      	cmp	r2, r3
900094f4:	d115      	bne.n	90009522 <xTaskPriorityInherit+0x5e>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
900094f6:	1d21      	adds	r1, r4, #4
900094f8:	4608      	mov	r0, r1
900094fa:	9101      	str	r1, [sp, #4]
900094fc:	f7fe fb45 	bl	90007b8a <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
90009500:	6833      	ldr	r3, [r6, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
90009502:	4a10      	ldr	r2, [pc, #64]	; (90009544 <xTaskPriorityInherit+0x80>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
90009504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
90009506:	6810      	ldr	r0, [r2, #0]
90009508:	9901      	ldr	r1, [sp, #4]
9000950a:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000950c:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
9000950e:	d900      	bls.n	90009512 <xTaskPriorityInherit+0x4e>
90009510:	6013      	str	r3, [r2, #0]
90009512:	2014      	movs	r0, #20
90009514:	fb00 5003 	mla	r0, r0, r3, r5
90009518:	f7fe fb14 	bl	90007b44 <vListInsertEnd>
				xReturn = pdTRUE;
9000951c:	2001      	movs	r0, #1
	}
9000951e:	b002      	add	sp, #8
90009520:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
90009522:	6833      	ldr	r3, [r6, #0]
90009524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009526:	62e3      	str	r3, [r4, #44]	; 0x2c
90009528:	e7f8      	b.n	9000951c <xTaskPriorityInherit+0x58>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
9000952a:	6813      	ldr	r3, [r2, #0]
9000952c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
9000952e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
90009530:	42a0      	cmp	r0, r4
90009532:	bf2c      	ite	cs
90009534:	2000      	movcs	r0, #0
90009536:	2001      	movcc	r0, #1
90009538:	e7f1      	b.n	9000951e <xTaskPriorityInherit+0x5a>
9000953a:	bf00      	nop
9000953c:	20026030 	.word	0x20026030
90009540:	2002603c 	.word	0x2002603c
90009544:	200264b0 	.word	0x200264b0

90009548 <xTaskPriorityDisinherit>:
	{
90009548:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
9000954a:	b910      	cbnz	r0, 90009552 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
9000954c:	2000      	movs	r0, #0
	}
9000954e:	b002      	add	sp, #8
90009550:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
90009552:	4b1e      	ldr	r3, [pc, #120]	; (900095cc <xTaskPriorityDisinherit+0x84>)
90009554:	681c      	ldr	r4, [r3, #0]
90009556:	4284      	cmp	r4, r0
90009558:	d00a      	beq.n	90009570 <xTaskPriorityDisinherit+0x28>
9000955a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000955e:	b672      	cpsid	i
90009560:	f383 8811 	msr	BASEPRI, r3
90009564:	f3bf 8f6f 	isb	sy
90009568:	f3bf 8f4f 	dsb	sy
9000956c:	b662      	cpsie	i
9000956e:	e7fe      	b.n	9000956e <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
90009570:	6d23      	ldr	r3, [r4, #80]	; 0x50
90009572:	b953      	cbnz	r3, 9000958a <xTaskPriorityDisinherit+0x42>
90009574:	f04f 0350 	mov.w	r3, #80	; 0x50
90009578:	b672      	cpsid	i
9000957a:	f383 8811 	msr	BASEPRI, r3
9000957e:	f3bf 8f6f 	isb	sy
90009582:	f3bf 8f4f 	dsb	sy
90009586:	b662      	cpsie	i
90009588:	e7fe      	b.n	90009588 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
9000958a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
9000958c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
9000958e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
90009590:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
90009592:	4291      	cmp	r1, r2
90009594:	d0da      	beq.n	9000954c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
90009596:	2b00      	cmp	r3, #0
90009598:	d1d8      	bne.n	9000954c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000959a:	1d21      	adds	r1, r4, #4
9000959c:	4608      	mov	r0, r1
9000959e:	9101      	str	r1, [sp, #4]
900095a0:	f7fe faf3 	bl	90007b8a <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
900095a4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
900095a6:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900095a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
900095ac:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900095ae:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
900095b0:	4a07      	ldr	r2, [pc, #28]	; (900095d0 <xTaskPriorityDisinherit+0x88>)
900095b2:	6810      	ldr	r0, [r2, #0]
900095b4:	4283      	cmp	r3, r0
900095b6:	d900      	bls.n	900095ba <xTaskPriorityDisinherit+0x72>
900095b8:	6013      	str	r3, [r2, #0]
900095ba:	4a06      	ldr	r2, [pc, #24]	; (900095d4 <xTaskPriorityDisinherit+0x8c>)
900095bc:	2014      	movs	r0, #20
900095be:	fb00 2003 	mla	r0, r0, r3, r2
900095c2:	f7fe fabf 	bl	90007b44 <vListInsertEnd>
					xReturn = pdTRUE;
900095c6:	2001      	movs	r0, #1
		return xReturn;
900095c8:	e7c1      	b.n	9000954e <xTaskPriorityDisinherit+0x6>
900095ca:	bf00      	nop
900095cc:	20026030 	.word	0x20026030
900095d0:	200264b0 	.word	0x200264b0
900095d4:	2002603c 	.word	0x2002603c

900095d8 <vTaskPriorityDisinheritAfterTimeout>:
	{
900095d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
900095da:	4604      	mov	r4, r0
900095dc:	2800      	cmp	r0, #0
900095de:	d048      	beq.n	90009672 <vTaskPriorityDisinheritAfterTimeout+0x9a>
			configASSERT( pxTCB->uxMutexesHeld );
900095e0:	6d02      	ldr	r2, [r0, #80]	; 0x50
900095e2:	b952      	cbnz	r2, 900095fa <vTaskPriorityDisinheritAfterTimeout+0x22>
900095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
900095e8:	b672      	cpsid	i
900095ea:	f383 8811 	msr	BASEPRI, r3
900095ee:	f3bf 8f6f 	isb	sy
900095f2:	f3bf 8f4f 	dsb	sy
900095f6:	b662      	cpsie	i
900095f8:	e7fe      	b.n	900095f8 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
900095fa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
900095fc:	4299      	cmp	r1, r3
900095fe:	bf38      	it	cc
90009600:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
90009602:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
90009604:	428b      	cmp	r3, r1
90009606:	d034      	beq.n	90009672 <vTaskPriorityDisinheritAfterTimeout+0x9a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
90009608:	2a01      	cmp	r2, #1
9000960a:	d132      	bne.n	90009672 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					configASSERT( pxTCB != pxCurrentTCB );
9000960c:	4a1a      	ldr	r2, [pc, #104]	; (90009678 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
9000960e:	6812      	ldr	r2, [r2, #0]
90009610:	4282      	cmp	r2, r0
90009612:	d10a      	bne.n	9000962a <vTaskPriorityDisinheritAfterTimeout+0x52>
90009614:	f04f 0350 	mov.w	r3, #80	; 0x50
90009618:	b672      	cpsid	i
9000961a:	f383 8811 	msr	BASEPRI, r3
9000961e:	f3bf 8f6f 	isb	sy
90009622:	f3bf 8f4f 	dsb	sy
90009626:	b662      	cpsie	i
90009628:	e7fe      	b.n	90009628 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000962a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
9000962c:	4d13      	ldr	r5, [pc, #76]	; (9000967c <vTaskPriorityDisinheritAfterTimeout+0xa4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000962e:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
90009630:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
90009634:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
90009636:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000963a:	bfa8      	it	ge
9000963c:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
90009640:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90009642:	bfa8      	it	ge
90009644:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
90009646:	429a      	cmp	r2, r3
90009648:	d113      	bne.n	90009672 <vTaskPriorityDisinheritAfterTimeout+0x9a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000964a:	1d01      	adds	r1, r0, #4
9000964c:	4608      	mov	r0, r1
9000964e:	9101      	str	r1, [sp, #4]
90009650:	f7fe fa9b 	bl	90007b8a <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
90009654:	4a0a      	ldr	r2, [pc, #40]	; (90009680 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
90009656:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90009658:	6810      	ldr	r0, [r2, #0]
9000965a:	9901      	ldr	r1, [sp, #4]
9000965c:	4283      	cmp	r3, r0
9000965e:	d900      	bls.n	90009662 <vTaskPriorityDisinheritAfterTimeout+0x8a>
90009660:	6013      	str	r3, [r2, #0]
90009662:	2014      	movs	r0, #20
90009664:	fb00 5003 	mla	r0, r0, r3, r5
	}
90009668:	b003      	add	sp, #12
9000966a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
9000966e:	f7fe ba69 	b.w	90007b44 <vListInsertEnd>
	}
90009672:	b003      	add	sp, #12
90009674:	bd30      	pop	{r4, r5, pc}
90009676:	bf00      	nop
90009678:	20026030 	.word	0x20026030
9000967c:	2002603c 	.word	0x2002603c
90009680:	200264b0 	.word	0x200264b0

90009684 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
90009684:	4b04      	ldr	r3, [pc, #16]	; (90009698 <pvTaskIncrementMutexHeldCount+0x14>)
90009686:	681a      	ldr	r2, [r3, #0]
90009688:	b11a      	cbz	r2, 90009692 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
9000968a:	6819      	ldr	r1, [r3, #0]
9000968c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
9000968e:	3201      	adds	r2, #1
90009690:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
90009692:	6818      	ldr	r0, [r3, #0]
	}
90009694:	4770      	bx	lr
90009696:	bf00      	nop
90009698:	20026030 	.word	0x20026030

9000969c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
9000969c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
9000969e:	4c11      	ldr	r4, [pc, #68]	; (900096e4 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
900096a0:	f7fe faf0 	bl	90007c84 <vPortEnterCritical>
		if( xTimerQueue == NULL )
900096a4:	6825      	ldr	r5, [r4, #0]
900096a6:	b9bd      	cbnz	r5, 900096d8 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
900096a8:	4f0f      	ldr	r7, [pc, #60]	; (900096e8 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
900096aa:	4e10      	ldr	r6, [pc, #64]	; (900096ec <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
900096ac:	4638      	mov	r0, r7
900096ae:	f7fe fa3b 	bl	90007b28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
900096b2:	4630      	mov	r0, r6
900096b4:	f7fe fa38 	bl	90007b28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
900096b8:	4b0d      	ldr	r3, [pc, #52]	; (900096f0 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
900096ba:	4a0e      	ldr	r2, [pc, #56]	; (900096f4 <prvCheckForValidListAndQueue+0x58>)
900096bc:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
900096be:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
900096c0:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
900096c2:	4b0d      	ldr	r3, [pc, #52]	; (900096f8 <prvCheckForValidListAndQueue+0x5c>)
900096c4:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
900096c6:	4b0d      	ldr	r3, [pc, #52]	; (900096fc <prvCheckForValidListAndQueue+0x60>)
900096c8:	9500      	str	r5, [sp, #0]
900096ca:	f7fe fce3 	bl	90008094 <xQueueGenericCreateStatic>
900096ce:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
900096d0:	b110      	cbz	r0, 900096d8 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
900096d2:	490b      	ldr	r1, [pc, #44]	; (90009700 <prvCheckForValidListAndQueue+0x64>)
900096d4:	f7ff f98a 	bl	900089ec <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
900096d8:	b003      	add	sp, #12
900096da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
900096de:	f7fe baf7 	b.w	90007cd0 <vPortExitCritical>
900096e2:	bf00      	nop
900096e4:	20026650 	.word	0x20026650
900096e8:	200265d4 	.word	0x200265d4
900096ec:	200265e8 	.word	0x200265e8
900096f0:	2002652c 	.word	0x2002652c
900096f4:	20026534 	.word	0x20026534
900096f8:	20026530 	.word	0x20026530
900096fc:	20026600 	.word	0x20026600
90009700:	9002b259 	.word	0x9002b259

90009704 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
90009704:	4291      	cmp	r1, r2
{
90009706:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
90009708:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9000970a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
9000970c:	d80a      	bhi.n	90009724 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000970e:	1ad2      	subs	r2, r2, r3
90009710:	6983      	ldr	r3, [r0, #24]
90009712:	429a      	cmp	r2, r3
90009714:	d20d      	bcs.n	90009732 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
90009716:	1d01      	adds	r1, r0, #4
90009718:	4b07      	ldr	r3, [pc, #28]	; (90009738 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000971a:	6818      	ldr	r0, [r3, #0]
9000971c:	f7fe fa1e 	bl	90007b5c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
90009720:	2000      	movs	r0, #0
}
90009722:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
90009724:	429a      	cmp	r2, r3
90009726:	d201      	bcs.n	9000972c <prvInsertTimerInActiveList+0x28>
90009728:	4299      	cmp	r1, r3
9000972a:	d202      	bcs.n	90009732 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000972c:	1d01      	adds	r1, r0, #4
9000972e:	4b03      	ldr	r3, [pc, #12]	; (9000973c <prvInsertTimerInActiveList+0x38>)
90009730:	e7f3      	b.n	9000971a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
90009732:	2001      	movs	r0, #1
	return xProcessTimerNow;
90009734:	e7f5      	b.n	90009722 <prvInsertTimerInActiveList+0x1e>
90009736:	bf00      	nop
90009738:	20026530 	.word	0x20026530
9000973c:	2002652c 	.word	0x2002652c

90009740 <xTimerCreateTimerTask>:
{
90009740:	b510      	push	{r4, lr}
90009742:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
90009744:	f7ff ffaa 	bl	9000969c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
90009748:	4b13      	ldr	r3, [pc, #76]	; (90009798 <xTimerCreateTimerTask+0x58>)
9000974a:	681b      	ldr	r3, [r3, #0]
9000974c:	b1b3      	cbz	r3, 9000977c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
9000974e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
90009750:	aa07      	add	r2, sp, #28
90009752:	a906      	add	r1, sp, #24
90009754:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
90009756:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
9000975a:	f7fe f8eb 	bl	90007934 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
9000975e:	9b05      	ldr	r3, [sp, #20]
90009760:	9a07      	ldr	r2, [sp, #28]
90009762:	9302      	str	r3, [sp, #8]
90009764:	9b06      	ldr	r3, [sp, #24]
90009766:	490d      	ldr	r1, [pc, #52]	; (9000979c <xTimerCreateTimerTask+0x5c>)
90009768:	9301      	str	r3, [sp, #4]
9000976a:	2302      	movs	r3, #2
9000976c:	480c      	ldr	r0, [pc, #48]	; (900097a0 <xTimerCreateTimerTask+0x60>)
9000976e:	9300      	str	r3, [sp, #0]
90009770:	4623      	mov	r3, r4
90009772:	f7ff fb0b 	bl	90008d8c <xTaskCreateStatic>
90009776:	4b0b      	ldr	r3, [pc, #44]	; (900097a4 <xTimerCreateTimerTask+0x64>)
90009778:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
9000977a:	b950      	cbnz	r0, 90009792 <xTimerCreateTimerTask+0x52>
9000977c:	f04f 0350 	mov.w	r3, #80	; 0x50
90009780:	b672      	cpsid	i
90009782:	f383 8811 	msr	BASEPRI, r3
90009786:	f3bf 8f6f 	isb	sy
9000978a:	f3bf 8f4f 	dsb	sy
9000978e:	b662      	cpsie	i
	configASSERT( xReturn );
90009790:	e7fe      	b.n	90009790 <xTimerCreateTimerTask+0x50>
}
90009792:	2001      	movs	r0, #1
90009794:	b008      	add	sp, #32
90009796:	bd10      	pop	{r4, pc}
90009798:	20026650 	.word	0x20026650
9000979c:	9002b25e 	.word	0x9002b25e
900097a0:	90009881 	.word	0x90009881
900097a4:	20026654 	.word	0x20026654

900097a8 <xTimerGenericCommand>:
{
900097a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
900097aa:	4616      	mov	r6, r2
	configASSERT( xTimer );
900097ac:	4604      	mov	r4, r0
{
900097ae:	461a      	mov	r2, r3
	configASSERT( xTimer );
900097b0:	b950      	cbnz	r0, 900097c8 <xTimerGenericCommand+0x20>
900097b2:	f04f 0350 	mov.w	r3, #80	; 0x50
900097b6:	b672      	cpsid	i
900097b8:	f383 8811 	msr	BASEPRI, r3
900097bc:	f3bf 8f6f 	isb	sy
900097c0:	f3bf 8f4f 	dsb	sy
900097c4:	b662      	cpsie	i
900097c6:	e7fe      	b.n	900097c6 <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
900097c8:	4d0c      	ldr	r5, [pc, #48]	; (900097fc <xTimerGenericCommand+0x54>)
900097ca:	6828      	ldr	r0, [r5, #0]
900097cc:	b178      	cbz	r0, 900097ee <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
900097ce:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
900097d0:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
900097d2:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
900097d6:	dc0c      	bgt.n	900097f2 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
900097d8:	f7ff fe64 	bl	900094a4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
900097dc:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
900097de:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
900097e0:	4669      	mov	r1, sp
900097e2:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
900097e4:	bf0c      	ite	eq
900097e6:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
900097e8:	461a      	movne	r2, r3
900097ea:	f7fe fd1d 	bl	90008228 <xQueueGenericSend>
}
900097ee:	b004      	add	sp, #16
900097f0:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
900097f2:	2300      	movs	r3, #0
900097f4:	4669      	mov	r1, sp
900097f6:	f7fe fe23 	bl	90008440 <xQueueGenericSendFromISR>
900097fa:	e7f8      	b.n	900097ee <xTimerGenericCommand+0x46>
900097fc:	20026650 	.word	0x20026650

90009800 <prvSwitchTimerLists>:
{
90009800:	b5f0      	push	{r4, r5, r6, r7, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
90009802:	4d1d      	ldr	r5, [pc, #116]	; (90009878 <prvSwitchTimerLists+0x78>)
{
90009804:	b085      	sub	sp, #20
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
90009806:	2700      	movs	r7, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
90009808:	682b      	ldr	r3, [r5, #0]
9000980a:	681a      	ldr	r2, [r3, #0]
9000980c:	b92a      	cbnz	r2, 9000981a <prvSwitchTimerLists+0x1a>
	pxCurrentTimerList = pxOverflowTimerList;
9000980e:	4a1b      	ldr	r2, [pc, #108]	; (9000987c <prvSwitchTimerLists+0x7c>)
90009810:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
90009812:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
90009814:	6029      	str	r1, [r5, #0]
}
90009816:	b005      	add	sp, #20
90009818:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000981a:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000981c:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000981e:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
90009820:	1d21      	adds	r1, r4, #4
90009822:	4608      	mov	r0, r1
90009824:	9103      	str	r1, [sp, #12]
90009826:	f7fe f9b0 	bl	90007b8a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9000982a:	6a23      	ldr	r3, [r4, #32]
9000982c:	4620      	mov	r0, r4
9000982e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
90009830:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
90009834:	9903      	ldr	r1, [sp, #12]
90009836:	f013 0f04 	tst.w	r3, #4
9000983a:	d0e5      	beq.n	90009808 <prvSwitchTimerLists+0x8>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
9000983c:	69a3      	ldr	r3, [r4, #24]
9000983e:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
90009840:	429e      	cmp	r6, r3
90009842:	d205      	bcs.n	90009850 <prvSwitchTimerLists+0x50>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90009844:	6828      	ldr	r0, [r5, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
90009846:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90009848:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000984a:	f7fe f987 	bl	90007b5c <vListInsert>
9000984e:	e7db      	b.n	90009808 <prvSwitchTimerLists+0x8>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
90009850:	2300      	movs	r3, #0
90009852:	4632      	mov	r2, r6
90009854:	4620      	mov	r0, r4
90009856:	9700      	str	r7, [sp, #0]
90009858:	4619      	mov	r1, r3
9000985a:	f7ff ffa5 	bl	900097a8 <xTimerGenericCommand>
				configASSERT( xResult );
9000985e:	2800      	cmp	r0, #0
90009860:	d1d2      	bne.n	90009808 <prvSwitchTimerLists+0x8>
90009862:	f04f 0350 	mov.w	r3, #80	; 0x50
90009866:	b672      	cpsid	i
90009868:	f383 8811 	msr	BASEPRI, r3
9000986c:	f3bf 8f6f 	isb	sy
90009870:	f3bf 8f4f 	dsb	sy
90009874:	b662      	cpsie	i
90009876:	e7fe      	b.n	90009876 <prvSwitchTimerLists+0x76>
90009878:	2002652c 	.word	0x2002652c
9000987c:	20026530 	.word	0x20026530

90009880 <prvTimerTask>:
{
90009880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
90009884:	4f7a      	ldr	r7, [pc, #488]	; (90009a70 <prvTimerTask+0x1f0>)
{
90009886:	b087      	sub	sp, #28
					portYIELD_WITHIN_API();
90009888:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 90009a80 <prvTimerTask+0x200>
9000988c:	46b9      	mov	r9, r7
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
9000988e:	683b      	ldr	r3, [r7, #0]
90009890:	f8d3 b000 	ldr.w	fp, [r3]
90009894:	f1bb 0f00 	cmp.w	fp, #0
90009898:	d028      	beq.n	900098ec <prvTimerTask+0x6c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000989a:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
9000989c:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000989e:	f8d3 b000 	ldr.w	fp, [r3]
	if( xTimeNow < xLastTime )
900098a2:	4e74      	ldr	r6, [pc, #464]	; (90009a74 <prvTimerTask+0x1f4>)
	vTaskSuspendAll();
900098a4:	f7ff fb38 	bl	90008f18 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
900098a8:	f7ff fb3e 	bl	90008f28 <xTaskGetTickCount>
900098ac:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
900098ae:	6833      	ldr	r3, [r6, #0]
900098b0:	46b0      	mov	r8, r6
900098b2:	4298      	cmp	r0, r3
900098b4:	d31c      	bcc.n	900098f0 <prvTimerTask+0x70>
	xLastTime = xTimeNow;
900098b6:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
900098b8:	b31c      	cbz	r4, 90009902 <prvTimerTask+0x82>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
900098ba:	4b6f      	ldr	r3, [pc, #444]	; (90009a78 <prvTimerTask+0x1f8>)
900098bc:	681b      	ldr	r3, [r3, #0]
900098be:	681c      	ldr	r4, [r3, #0]
900098c0:	fab4 f484 	clz	r4, r4
900098c4:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
900098c6:	4b6d      	ldr	r3, [pc, #436]	; (90009a7c <prvTimerTask+0x1fc>)
900098c8:	4622      	mov	r2, r4
900098ca:	ebab 0105 	sub.w	r1, fp, r5
900098ce:	6818      	ldr	r0, [r3, #0]
900098d0:	f7ff f8cd 	bl	90008a6e <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
900098d4:	f7ff fbce 	bl	90009074 <xTaskResumeAll>
900098d8:	b978      	cbnz	r0, 900098fa <prvTimerTask+0x7a>
					portYIELD_WITHIN_API();
900098da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
900098de:	f8ca 3000 	str.w	r3, [sl]
900098e2:	f3bf 8f4f 	dsb	sy
900098e6:	f3bf 8f6f 	isb	sy
900098ea:	e006      	b.n	900098fa <prvTimerTask+0x7a>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
900098ec:	2401      	movs	r4, #1
900098ee:	e7d8      	b.n	900098a2 <prvTimerTask+0x22>
		prvSwitchTimerLists();
900098f0:	f7ff ff86 	bl	90009800 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
900098f4:	6035      	str	r5, [r6, #0]
			( void ) xTaskResumeAll();
900098f6:	f7ff fbbd 	bl	90009074 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
900098fa:	4e60      	ldr	r6, [pc, #384]	; (90009a7c <prvTimerTask+0x1fc>)
900098fc:	f04f 0b00 	mov.w	fp, #0
90009900:	e037      	b.n	90009972 <prvTimerTask+0xf2>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
90009902:	4583      	cmp	fp, r0
90009904:	d8df      	bhi.n	900098c6 <prvTimerTask+0x46>
				( void ) xTaskResumeAll();
90009906:	f7ff fbb5 	bl	90009074 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000990a:	f8d9 3000 	ldr.w	r3, [r9]
9000990e:	68db      	ldr	r3, [r3, #12]
90009910:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
90009912:	1d30      	adds	r0, r6, #4
90009914:	f7fe f939 	bl	90007b8a <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
90009918:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
9000991c:	0758      	lsls	r0, r3, #29
9000991e:	d51a      	bpl.n	90009956 <prvTimerTask+0xd6>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
90009920:	69b1      	ldr	r1, [r6, #24]
90009922:	465b      	mov	r3, fp
90009924:	462a      	mov	r2, r5
90009926:	4630      	mov	r0, r6
90009928:	4459      	add	r1, fp
9000992a:	f7ff feeb 	bl	90009704 <prvInsertTimerInActiveList>
9000992e:	b1b0      	cbz	r0, 9000995e <prvTimerTask+0xde>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
90009930:	4623      	mov	r3, r4
90009932:	465a      	mov	r2, fp
90009934:	4621      	mov	r1, r4
90009936:	4630      	mov	r0, r6
90009938:	9400      	str	r4, [sp, #0]
9000993a:	f7ff ff35 	bl	900097a8 <xTimerGenericCommand>
			configASSERT( xResult );
9000993e:	b970      	cbnz	r0, 9000995e <prvTimerTask+0xde>
90009940:	f04f 0350 	mov.w	r3, #80	; 0x50
90009944:	b672      	cpsid	i
90009946:	f383 8811 	msr	BASEPRI, r3
9000994a:	f3bf 8f6f 	isb	sy
9000994e:	f3bf 8f4f 	dsb	sy
90009952:	b662      	cpsie	i
90009954:	e7fe      	b.n	90009954 <prvTimerTask+0xd4>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
90009956:	f023 0301 	bic.w	r3, r3, #1
9000995a:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9000995e:	6a33      	ldr	r3, [r6, #32]
90009960:	4630      	mov	r0, r6
90009962:	4798      	blx	r3
}
90009964:	e7c9      	b.n	900098fa <prvTimerTask+0x7a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
90009966:	9b03      	ldr	r3, [sp, #12]
90009968:	9905      	ldr	r1, [sp, #20]
9000996a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
9000996c:	9b02      	ldr	r3, [sp, #8]
9000996e:	2b00      	cmp	r3, #0
90009970:	da0a      	bge.n	90009988 <prvTimerTask+0x108>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
90009972:	2200      	movs	r2, #0
90009974:	a902      	add	r1, sp, #8
90009976:	6830      	ldr	r0, [r6, #0]
90009978:	f7fe fe28 	bl	900085cc <xQueueReceive>
9000997c:	2800      	cmp	r0, #0
9000997e:	d086      	beq.n	9000988e <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
90009980:	9b02      	ldr	r3, [sp, #8]
90009982:	9804      	ldr	r0, [sp, #16]
90009984:	2b00      	cmp	r3, #0
90009986:	dbee      	blt.n	90009966 <prvTimerTask+0xe6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
90009988:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
9000998a:	6963      	ldr	r3, [r4, #20]
9000998c:	b9a3      	cbnz	r3, 900099b8 <prvTimerTask+0x138>
	xTimeNow = xTaskGetTickCount();
9000998e:	f7ff facb 	bl	90008f28 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
90009992:	f8d8 3000 	ldr.w	r3, [r8]
	xTimeNow = xTaskGetTickCount();
90009996:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
90009998:	4298      	cmp	r0, r3
9000999a:	d201      	bcs.n	900099a0 <prvTimerTask+0x120>
		prvSwitchTimerLists();
9000999c:	f7ff ff30 	bl	90009800 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
900099a0:	9b02      	ldr	r3, [sp, #8]
900099a2:	f8c8 5000 	str.w	r5, [r8]
			switch( xMessage.xMessageID )
900099a6:	2b09      	cmp	r3, #9
900099a8:	d8e3      	bhi.n	90009972 <prvTimerTask+0xf2>
900099aa:	e8df f003 	tbb	[pc, r3]
900099ae:	0909      	.short	0x0909
900099b0:	583d3609 	.word	0x583d3609
900099b4:	3d360909 	.word	0x3d360909
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
900099b8:	1d20      	adds	r0, r4, #4
900099ba:	f7fe f8e6 	bl	90007b8a <uxListRemove>
900099be:	e7e6      	b.n	9000998e <prvTimerTask+0x10e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
900099c0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
900099c4:	462a      	mov	r2, r5
900099c6:	69a1      	ldr	r1, [r4, #24]
900099c8:	4620      	mov	r0, r4
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
900099ca:	f043 0301 	orr.w	r3, r3, #1
900099ce:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
900099d2:	9b03      	ldr	r3, [sp, #12]
900099d4:	4419      	add	r1, r3
900099d6:	f7ff fe95 	bl	90009704 <prvInsertTimerInActiveList>
900099da:	2800      	cmp	r0, #0
900099dc:	d0c9      	beq.n	90009972 <prvTimerTask+0xf2>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
900099de:	6a23      	ldr	r3, [r4, #32]
900099e0:	4620      	mov	r0, r4
900099e2:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
900099e4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
900099e8:	0759      	lsls	r1, r3, #29
900099ea:	d5c2      	bpl.n	90009972 <prvTimerTask+0xf2>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
900099ec:	69a2      	ldr	r2, [r4, #24]
900099ee:	2300      	movs	r3, #0
900099f0:	9903      	ldr	r1, [sp, #12]
900099f2:	4620      	mov	r0, r4
900099f4:	f8cd b000 	str.w	fp, [sp]
900099f8:	440a      	add	r2, r1
900099fa:	4619      	mov	r1, r3
900099fc:	f7ff fed4 	bl	900097a8 <xTimerGenericCommand>
							configASSERT( xResult );
90009a00:	2800      	cmp	r0, #0
90009a02:	d1b6      	bne.n	90009972 <prvTimerTask+0xf2>
90009a04:	f04f 0350 	mov.w	r3, #80	; 0x50
90009a08:	b672      	cpsid	i
90009a0a:	f383 8811 	msr	BASEPRI, r3
90009a0e:	f3bf 8f6f 	isb	sy
90009a12:	f3bf 8f4f 	dsb	sy
90009a16:	b662      	cpsie	i
90009a18:	e7fe      	b.n	90009a18 <prvTimerTask+0x198>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
90009a1a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
90009a1e:	f023 0301 	bic.w	r3, r3, #1
90009a22:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
90009a26:	e7a4      	b.n	90009972 <prvTimerTask+0xf2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90009a28:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
90009a2c:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90009a2e:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
90009a32:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90009a34:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
90009a38:	b951      	cbnz	r1, 90009a50 <prvTimerTask+0x1d0>
90009a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
90009a3e:	b672      	cpsid	i
90009a40:	f383 8811 	msr	BASEPRI, r3
90009a44:	f3bf 8f6f 	isb	sy
90009a48:	f3bf 8f4f 	dsb	sy
90009a4c:	b662      	cpsie	i
90009a4e:	e7fe      	b.n	90009a4e <prvTimerTask+0x1ce>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
90009a50:	462b      	mov	r3, r5
90009a52:	462a      	mov	r2, r5
90009a54:	4429      	add	r1, r5
90009a56:	4620      	mov	r0, r4
90009a58:	f7ff fe54 	bl	90009704 <prvInsertTimerInActiveList>
					break;
90009a5c:	e789      	b.n	90009972 <prvTimerTask+0xf2>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
90009a5e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
90009a62:	079a      	lsls	r2, r3, #30
90009a64:	d4db      	bmi.n	90009a1e <prvTimerTask+0x19e>
							vPortFree( pxTimer );
90009a66:	4620      	mov	r0, r4
90009a68:	f7fe f822 	bl	90007ab0 <vPortFree>
90009a6c:	e781      	b.n	90009972 <prvTimerTask+0xf2>
90009a6e:	bf00      	nop
90009a70:	2002652c 	.word	0x2002652c
90009a74:	200265fc 	.word	0x200265fc
90009a78:	20026530 	.word	0x20026530
90009a7c:	20026650 	.word	0x20026650
90009a80:	e000ed04 	.word	0xe000ed04

90009a84 <netconn_apimsg>:

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
90009a84:	680a      	ldr	r2, [r1, #0]
{
90009a86:	b510      	push	{r4, lr}
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
90009a88:	320c      	adds	r2, #12
{
90009a8a:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
90009a8c:	f009 fda0 	bl	900135d0 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
90009a90:	b908      	cbnz	r0, 90009a96 <netconn_apimsg+0x12>
    return apimsg->err;
90009a92:	f994 0004 	ldrsb.w	r0, [r4, #4]
  }
  return err;
}
90009a96:	bd10      	pop	{r4, pc}

90009a98 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
90009a98:	b500      	push	{lr}
90009a9a:	b089      	sub	sp, #36	; 0x24
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
90009a9c:	b958      	cbnz	r0, 90009ab6 <netconn_close_shutdown+0x1e>
90009a9e:	4b0b      	ldr	r3, [pc, #44]	; (90009acc <netconn_close_shutdown+0x34>)
90009aa0:	f240 4247 	movw	r2, #1095	; 0x447
90009aa4:	490a      	ldr	r1, [pc, #40]	; (90009ad0 <netconn_close_shutdown+0x38>)
90009aa6:	480b      	ldr	r0, [pc, #44]	; (90009ad4 <netconn_close_shutdown+0x3c>)
90009aa8:	f01f fd12 	bl	900294d0 <iprintf>
90009aac:	f06f 000f 	mvn.w	r0, #15
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
90009ab0:	b009      	add	sp, #36	; 0x24
90009ab2:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
90009ab6:	2329      	movs	r3, #41	; 0x29
  API_MSG_VAR_REF(msg).conn = conn;
90009ab8:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
90009aba:	f88d 1008 	strb.w	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
90009abe:	4669      	mov	r1, sp
90009ac0:	4805      	ldr	r0, [pc, #20]	; (90009ad8 <netconn_close_shutdown+0x40>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
90009ac2:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
90009ac6:	f7ff ffdd 	bl	90009a84 <netconn_apimsg>
  return err;
90009aca:	e7f1      	b.n	90009ab0 <netconn_close_shutdown+0x18>
90009acc:	9002b266 	.word	0x9002b266
90009ad0:	9002b2c8 	.word	0x9002b2c8
90009ad4:	9002a254 	.word	0x9002a254
90009ad8:	9000b049 	.word	0x9000b049

90009adc <netconn_new_with_proto_and_callback>:
{
90009adc:	b570      	push	{r4, r5, r6, lr}
90009ade:	460d      	mov	r5, r1
90009ae0:	b088      	sub	sp, #32
  conn = netconn_alloc(t, callback);
90009ae2:	4611      	mov	r1, r2
90009ae4:	f000 ff8e 	bl	9000aa04 <netconn_alloc>
  if (conn != NULL) {
90009ae8:	4604      	mov	r4, r0
90009aea:	2800      	cmp	r0, #0
90009aec:	d03e      	beq.n	90009b6c <netconn_new_with_proto_and_callback+0x90>
    API_MSG_VAR_REF(msg).conn = conn;
90009aee:	9000      	str	r0, [sp, #0]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
90009af0:	4669      	mov	r1, sp
90009af2:	4820      	ldr	r0, [pc, #128]	; (90009b74 <netconn_new_with_proto_and_callback+0x98>)
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
90009af4:	f88d 5008 	strb.w	r5, [sp, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
90009af8:	f7ff ffc4 	bl	90009a84 <netconn_apimsg>
    if (err != ERR_OK) {
90009afc:	2800      	cmp	r0, #0
90009afe:	d035      	beq.n	90009b6c <netconn_new_with_proto_and_callback+0x90>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
90009b00:	6863      	ldr	r3, [r4, #4]
90009b02:	b12b      	cbz	r3, 90009b10 <netconn_new_with_proto_and_callback+0x34>
90009b04:	4b1c      	ldr	r3, [pc, #112]	; (90009b78 <netconn_new_with_proto_and_callback+0x9c>)
90009b06:	22a3      	movs	r2, #163	; 0xa3
90009b08:	491c      	ldr	r1, [pc, #112]	; (90009b7c <netconn_new_with_proto_and_callback+0xa0>)
90009b0a:	481d      	ldr	r0, [pc, #116]	; (90009b80 <netconn_new_with_proto_and_callback+0xa4>)
90009b0c:	f01f fce0 	bl	900294d0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
90009b10:	f104 0510 	add.w	r5, r4, #16
90009b14:	4628      	mov	r0, r5
90009b16:	f005 ff30 	bl	9000f97a <sys_mbox_valid>
90009b1a:	b928      	cbnz	r0, 90009b28 <netconn_new_with_proto_and_callback+0x4c>
90009b1c:	4b16      	ldr	r3, [pc, #88]	; (90009b78 <netconn_new_with_proto_and_callback+0x9c>)
90009b1e:	22a4      	movs	r2, #164	; 0xa4
90009b20:	4918      	ldr	r1, [pc, #96]	; (90009b84 <netconn_new_with_proto_and_callback+0xa8>)
90009b22:	4817      	ldr	r0, [pc, #92]	; (90009b80 <netconn_new_with_proto_and_callback+0xa4>)
90009b24:	f01f fcd4 	bl	900294d0 <iprintf>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
90009b28:	f104 0014 	add.w	r0, r4, #20
90009b2c:	f005 ff25 	bl	9000f97a <sys_mbox_valid>
90009b30:	b128      	cbz	r0, 90009b3e <netconn_new_with_proto_and_callback+0x62>
90009b32:	4b11      	ldr	r3, [pc, #68]	; (90009b78 <netconn_new_with_proto_and_callback+0x9c>)
90009b34:	22a6      	movs	r2, #166	; 0xa6
90009b36:	4914      	ldr	r1, [pc, #80]	; (90009b88 <netconn_new_with_proto_and_callback+0xac>)
90009b38:	4811      	ldr	r0, [pc, #68]	; (90009b80 <netconn_new_with_proto_and_callback+0xa4>)
90009b3a:	f01f fcc9 	bl	900294d0 <iprintf>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
90009b3e:	f104 060c 	add.w	r6, r4, #12
90009b42:	4630      	mov	r0, r6
90009b44:	f005 ff55 	bl	9000f9f2 <sys_sem_valid>
90009b48:	b928      	cbnz	r0, 90009b56 <netconn_new_with_proto_and_callback+0x7a>
90009b4a:	4b0b      	ldr	r3, [pc, #44]	; (90009b78 <netconn_new_with_proto_and_callback+0x9c>)
90009b4c:	22a9      	movs	r2, #169	; 0xa9
90009b4e:	490f      	ldr	r1, [pc, #60]	; (90009b8c <netconn_new_with_proto_and_callback+0xb0>)
90009b50:	480b      	ldr	r0, [pc, #44]	; (90009b80 <netconn_new_with_proto_and_callback+0xa4>)
90009b52:	f01f fcbd 	bl	900294d0 <iprintf>
      sys_sem_free(&conn->op_completed);
90009b56:	4630      	mov	r0, r6
90009b58:	f005 ff48 	bl	9000f9ec <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
90009b5c:	4628      	mov	r0, r5
90009b5e:	f005 feca 	bl	9000f8f6 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
90009b62:	4621      	mov	r1, r4
      return NULL;
90009b64:	2400      	movs	r4, #0
      memp_free(MEMP_NETCONN, conn);
90009b66:	2007      	movs	r0, #7
90009b68:	f004 fb6a 	bl	9000e240 <memp_free>
}
90009b6c:	4620      	mov	r0, r4
90009b6e:	b008      	add	sp, #32
90009b70:	bd70      	pop	{r4, r5, r6, pc}
90009b72:	bf00      	nop
90009b74:	9000a9a5 	.word	0x9000a9a5
90009b78:	9002b266 	.word	0x9002b266
90009b7c:	9002b2e4 	.word	0x9002b2e4
90009b80:	9002a254 	.word	0x9002a254
90009b84:	9002b305 	.word	0x9002b305
90009b88:	9002b31a 	.word	0x9002b31a
90009b8c:	9002b33b 	.word	0x9002b33b

90009b90 <netconn_prepare_delete>:
{
90009b90:	b500      	push	{lr}
90009b92:	b089      	sub	sp, #36	; 0x24
  if (conn == NULL) {
90009b94:	b138      	cbz	r0, 90009ba6 <netconn_prepare_delete+0x16>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
90009b96:	2329      	movs	r3, #41	; 0x29
  API_MSG_VAR_REF(msg).conn = conn;
90009b98:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
90009b9a:	4669      	mov	r1, sp
90009b9c:	4803      	ldr	r0, [pc, #12]	; (90009bac <netconn_prepare_delete+0x1c>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
90009b9e:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
90009ba2:	f7ff ff6f 	bl	90009a84 <netconn_apimsg>
}
90009ba6:	b009      	add	sp, #36	; 0x24
90009ba8:	f85d fb04 	ldr.w	pc, [sp], #4
90009bac:	9000ac9d 	.word	0x9000ac9d

90009bb0 <netconn_delete>:
{
90009bb0:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
90009bb2:	4605      	mov	r5, r0
90009bb4:	b140      	cbz	r0, 90009bc8 <netconn_delete+0x18>
    err = netconn_prepare_delete(conn);
90009bb6:	f7ff ffeb 	bl	90009b90 <netconn_prepare_delete>
  if (err == ERR_OK) {
90009bba:	4604      	mov	r4, r0
90009bbc:	b910      	cbnz	r0, 90009bc4 <netconn_delete+0x14>
    netconn_free(conn);
90009bbe:	4628      	mov	r0, r5
90009bc0:	f000 ff66 	bl	9000aa90 <netconn_free>
}
90009bc4:	4620      	mov	r0, r4
90009bc6:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
90009bc8:	4604      	mov	r4, r0
90009bca:	e7fb      	b.n	90009bc4 <netconn_delete+0x14>

90009bcc <netconn_getaddr>:
{
90009bcc:	b500      	push	{lr}
90009bce:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
90009bd0:	b958      	cbnz	r0, 90009bea <netconn_getaddr+0x1e>
90009bd2:	4b11      	ldr	r3, [pc, #68]	; (90009c18 <netconn_getaddr+0x4c>)
90009bd4:	f44f 7289 	mov.w	r2, #274	; 0x112
90009bd8:	4910      	ldr	r1, [pc, #64]	; (90009c1c <netconn_getaddr+0x50>)
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
90009bda:	4811      	ldr	r0, [pc, #68]	; (90009c20 <netconn_getaddr+0x54>)
90009bdc:	f01f fc78 	bl	900294d0 <iprintf>
90009be0:	f06f 000f 	mvn.w	r0, #15
}
90009be4:	b009      	add	sp, #36	; 0x24
90009be6:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
90009bea:	b921      	cbnz	r1, 90009bf6 <netconn_getaddr+0x2a>
90009bec:	4b0a      	ldr	r3, [pc, #40]	; (90009c18 <netconn_getaddr+0x4c>)
90009bee:	f240 1213 	movw	r2, #275	; 0x113
90009bf2:	490c      	ldr	r1, [pc, #48]	; (90009c24 <netconn_getaddr+0x58>)
90009bf4:	e7f1      	b.n	90009bda <netconn_getaddr+0xe>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
90009bf6:	b922      	cbnz	r2, 90009c02 <netconn_getaddr+0x36>
90009bf8:	4b07      	ldr	r3, [pc, #28]	; (90009c18 <netconn_getaddr+0x4c>)
90009bfa:	f44f 728a 	mov.w	r2, #276	; 0x114
90009bfe:	490a      	ldr	r1, [pc, #40]	; (90009c28 <netconn_getaddr+0x5c>)
90009c00:	e7eb      	b.n	90009bda <netconn_getaddr+0xe>
  API_MSG_VAR_REF(msg).conn = conn;
90009c02:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
90009c04:	4809      	ldr	r0, [pc, #36]	; (90009c2c <netconn_getaddr+0x60>)
  API_MSG_VAR_REF(msg).msg.ad.local = local;
90009c06:	f88d 3010 	strb.w	r3, [sp, #16]
  msg.msg.ad.port = port;
90009c0a:	e9cd 1202 	strd	r1, r2, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
90009c0e:	4669      	mov	r1, sp
90009c10:	f7ff ff38 	bl	90009a84 <netconn_apimsg>
  return err;
90009c14:	e7e6      	b.n	90009be4 <netconn_getaddr+0x18>
90009c16:	bf00      	nop
90009c18:	9002b266 	.word	0x9002b266
90009c1c:	9002b354 	.word	0x9002b354
90009c20:	9002a254 	.word	0x9002a254
90009c24:	9002b372 	.word	0x9002b372
90009c28:	9002b390 	.word	0x9002b390
90009c2c:	9000afd5 	.word	0x9000afd5

90009c30 <netconn_bind>:
{
90009c30:	b500      	push	{lr}
90009c32:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
90009c34:	b958      	cbnz	r0, 90009c4e <netconn_bind+0x1e>
90009c36:	4b0c      	ldr	r3, [pc, #48]	; (90009c68 <netconn_bind+0x38>)
90009c38:	f44f 729c 	mov.w	r2, #312	; 0x138
90009c3c:	490b      	ldr	r1, [pc, #44]	; (90009c6c <netconn_bind+0x3c>)
90009c3e:	480c      	ldr	r0, [pc, #48]	; (90009c70 <netconn_bind+0x40>)
90009c40:	f01f fc46 	bl	900294d0 <iprintf>
90009c44:	f06f 000f 	mvn.w	r0, #15
}
90009c48:	b009      	add	sp, #36	; 0x24
90009c4a:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
90009c4e:	4b09      	ldr	r3, [pc, #36]	; (90009c74 <netconn_bind+0x44>)
  API_MSG_VAR_REF(msg).conn = conn;
90009c50:	9000      	str	r0, [sp, #0]
    addr = IP4_ADDR_ANY;
90009c52:	2900      	cmp	r1, #0
90009c54:	bf08      	it	eq
90009c56:	4619      	moveq	r1, r3
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
90009c58:	4807      	ldr	r0, [pc, #28]	; (90009c78 <netconn_bind+0x48>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
90009c5a:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
90009c5e:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
90009c60:	4669      	mov	r1, sp
90009c62:	f7ff ff0f 	bl	90009a84 <netconn_apimsg>
  return err;
90009c66:	e7ef      	b.n	90009c48 <netconn_bind+0x18>
90009c68:	9002b266 	.word	0x9002b266
90009c6c:	9002b3ae 	.word	0x9002b3ae
90009c70:	9002a254 	.word	0x9002a254
90009c74:	9002c1b0 	.word	0x9002c1b0
90009c78:	9000ada9 	.word	0x9000ada9

90009c7c <netconn_listen_with_backlog>:
{
90009c7c:	b500      	push	{lr}
90009c7e:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
90009c80:	b958      	cbnz	r0, 90009c9a <netconn_listen_with_backlog+0x1e>
90009c82:	4b09      	ldr	r3, [pc, #36]	; (90009ca8 <netconn_listen_with_backlog+0x2c>)
90009c84:	f240 12bb 	movw	r2, #443	; 0x1bb
90009c88:	4908      	ldr	r1, [pc, #32]	; (90009cac <netconn_listen_with_backlog+0x30>)
90009c8a:	4809      	ldr	r0, [pc, #36]	; (90009cb0 <netconn_listen_with_backlog+0x34>)
90009c8c:	f01f fc20 	bl	900294d0 <iprintf>
90009c90:	f06f 000f 	mvn.w	r0, #15
}
90009c94:	b009      	add	sp, #36	; 0x24
90009c96:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
90009c9a:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
90009c9c:	4669      	mov	r1, sp
90009c9e:	4805      	ldr	r0, [pc, #20]	; (90009cb4 <netconn_listen_with_backlog+0x38>)
90009ca0:	f7ff fef0 	bl	90009a84 <netconn_apimsg>
  return err;
90009ca4:	e7f6      	b.n	90009c94 <netconn_listen_with_backlog+0x18>
90009ca6:	bf00      	nop
90009ca8:	9002b266 	.word	0x9002b266
90009cac:	9002b3c9 	.word	0x9002b3c9
90009cb0:	9002a254 	.word	0x9002a254
90009cb4:	9000addd 	.word	0x9000addd

90009cb8 <netconn_tcp_recvd>:
{
90009cb8:	b500      	push	{lr}
90009cba:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
90009cbc:	b120      	cbz	r0, 90009cc8 <netconn_tcp_recvd+0x10>
90009cbe:	7803      	ldrb	r3, [r0, #0]
90009cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
90009cc4:	2b10      	cmp	r3, #16
90009cc6:	d00b      	beq.n	90009ce0 <netconn_tcp_recvd+0x28>
90009cc8:	4b09      	ldr	r3, [pc, #36]	; (90009cf0 <netconn_tcp_recvd+0x38>)
90009cca:	f240 22b5 	movw	r2, #693	; 0x2b5
90009cce:	4909      	ldr	r1, [pc, #36]	; (90009cf4 <netconn_tcp_recvd+0x3c>)
90009cd0:	4809      	ldr	r0, [pc, #36]	; (90009cf8 <netconn_tcp_recvd+0x40>)
90009cd2:	f01f fbfd 	bl	900294d0 <iprintf>
90009cd6:	f06f 000f 	mvn.w	r0, #15
}
90009cda:	b009      	add	sp, #36	; 0x24
90009cdc:	f85d fb04 	ldr.w	pc, [sp], #4
  msg->conn = conn;
90009ce0:	9000      	str	r0, [sp, #0]
  msg->msg.r.len = len;
90009ce2:	9102      	str	r1, [sp, #8]
  return netconn_apimsg(lwip_netconn_do_recv, msg);
90009ce4:	4669      	mov	r1, sp
90009ce6:	4805      	ldr	r0, [pc, #20]	; (90009cfc <netconn_tcp_recvd+0x44>)
90009ce8:	f7ff fecc 	bl	90009a84 <netconn_apimsg>
  return err;
90009cec:	e7f5      	b.n	90009cda <netconn_tcp_recvd+0x22>
90009cee:	bf00      	nop
90009cf0:	9002b266 	.word	0x9002b266
90009cf4:	9002b3e6 	.word	0x9002b3e6
90009cf8:	9002a254 	.word	0x9002a254
90009cfc:	9000aed1 	.word	0x9000aed1

90009d00 <netconn_send>:
{
90009d00:	b500      	push	{lr}
90009d02:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
90009d04:	b958      	cbnz	r0, 90009d1e <netconn_send+0x1e>
90009d06:	4b09      	ldr	r3, [pc, #36]	; (90009d2c <netconn_send+0x2c>)
90009d08:	f240 32b2 	movw	r2, #946	; 0x3b2
90009d0c:	4908      	ldr	r1, [pc, #32]	; (90009d30 <netconn_send+0x30>)
90009d0e:	4809      	ldr	r0, [pc, #36]	; (90009d34 <netconn_send+0x34>)
90009d10:	f01f fbde 	bl	900294d0 <iprintf>
90009d14:	f06f 000f 	mvn.w	r0, #15
}
90009d18:	b009      	add	sp, #36	; 0x24
90009d1a:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
90009d1e:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.b = buf;
90009d20:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
90009d22:	4669      	mov	r1, sp
90009d24:	4804      	ldr	r0, [pc, #16]	; (90009d38 <netconn_send+0x38>)
90009d26:	f7ff fead 	bl	90009a84 <netconn_apimsg>
  return err;
90009d2a:	e7f5      	b.n	90009d18 <netconn_send+0x18>
90009d2c:	9002b266 	.word	0x9002b266
90009d30:	9002b40a 	.word	0x9002b40a
90009d34:	9002a254 	.word	0x9002a254
90009d38:	9000ae95 	.word	0x9000ae95

90009d3c <netconn_write_vectors_partly>:
{
90009d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
90009d3e:	b089      	sub	sp, #36	; 0x24
90009d40:	469e      	mov	lr, r3
90009d42:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
90009d44:	b958      	cbnz	r0, 90009d5e <netconn_write_vectors_partly+0x22>
90009d46:	f06f 040f 	mvn.w	r4, #15
90009d4a:	4b2c      	ldr	r3, [pc, #176]	; (90009dfc <netconn_write_vectors_partly+0xc0>)
90009d4c:	f240 32ee 	movw	r2, #1006	; 0x3ee
90009d50:	492b      	ldr	r1, [pc, #172]	; (90009e00 <netconn_write_vectors_partly+0xc4>)
90009d52:	482c      	ldr	r0, [pc, #176]	; (90009e04 <netconn_write_vectors_partly+0xc8>)
90009d54:	f01f fbbc 	bl	900294d0 <iprintf>
}
90009d58:	4620      	mov	r0, r4
90009d5a:	b009      	add	sp, #36	; 0x24
90009d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
90009d5e:	7804      	ldrb	r4, [r0, #0]
90009d60:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
90009d64:	2c10      	cmp	r4, #16
90009d66:	d009      	beq.n	90009d7c <netconn_write_vectors_partly+0x40>
90009d68:	4b24      	ldr	r3, [pc, #144]	; (90009dfc <netconn_write_vectors_partly+0xc0>)
90009d6a:	f240 32ef 	movw	r2, #1007	; 0x3ef
90009d6e:	4926      	ldr	r1, [pc, #152]	; (90009e08 <netconn_write_vectors_partly+0xcc>)
90009d70:	4824      	ldr	r0, [pc, #144]	; (90009e04 <netconn_write_vectors_partly+0xc8>)
90009d72:	f01f fbad 	bl	900294d0 <iprintf>
    return ERR_VAL;
90009d76:	f06f 0405 	mvn.w	r4, #5
90009d7a:	e7ed      	b.n	90009d58 <netconn_write_vectors_partly+0x1c>
  if (dontblock && !bytes_written) {
90009d7c:	7f05      	ldrb	r5, [r0, #28]
90009d7e:	f003 0404 	and.w	r4, r3, #4
90009d82:	f005 0502 	and.w	r5, r5, #2
90009d86:	4325      	orrs	r5, r4
90009d88:	d002      	beq.n	90009d90 <netconn_write_vectors_partly+0x54>
90009d8a:	2f00      	cmp	r7, #0
90009d8c:	d0f3      	beq.n	90009d76 <netconn_write_vectors_partly+0x3a>
90009d8e:	2501      	movs	r5, #1
90009d90:	2400      	movs	r4, #0
    size += vectors[i].len;
90009d92:	f101 0c04 	add.w	ip, r1, #4
90009d96:	4626      	mov	r6, r4
90009d98:	e004      	b.n	90009da4 <netconn_write_vectors_partly+0x68>
    if (size < vectors[i].len) {
90009d9a:	f85c 3034 	ldr.w	r3, [ip, r4, lsl #3]
90009d9e:	199e      	adds	r6, r3, r6
90009da0:	d2e9      	bcs.n	90009d76 <netconn_write_vectors_partly+0x3a>
  for (i = 0; i < vectorcnt; i++) {
90009da2:	3401      	adds	r4, #1
90009da4:	42a2      	cmp	r2, r4
90009da6:	dcf8      	bgt.n	90009d9a <netconn_write_vectors_partly+0x5e>
  if (size == 0) {
90009da8:	2e00      	cmp	r6, #0
90009daa:	d101      	bne.n	90009db0 <netconn_write_vectors_partly+0x74>
    return ERR_OK;
90009dac:	2400      	movs	r4, #0
90009dae:	e7d3      	b.n	90009d58 <netconn_write_vectors_partly+0x1c>
  } else if (size > SSIZE_MAX) {
90009db0:	da03      	bge.n	90009dba <netconn_write_vectors_partly+0x7e>
    if (!bytes_written) {
90009db2:	2f00      	cmp	r7, #0
90009db4:	d0df      	beq.n	90009d76 <netconn_write_vectors_partly+0x3a>
    size = (size_t)limited;
90009db6:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
90009dba:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
90009dbe:	2200      	movs	r2, #0
  API_MSG_VAR_REF(msg).conn = conn;
90009dc0:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
90009dc2:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
90009dc4:	4669      	mov	r1, sp
90009dc6:	4811      	ldr	r0, [pc, #68]	; (90009e0c <netconn_write_vectors_partly+0xd0>)
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
90009dc8:	9204      	str	r2, [sp, #16]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
90009dca:	f88d e01c 	strb.w	lr, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
90009dce:	e9cd 6205 	strd	r6, r2, [sp, #20]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
90009dd2:	f7ff fe57 	bl	90009a84 <netconn_apimsg>
  if (err == ERR_OK) {
90009dd6:	4604      	mov	r4, r0
90009dd8:	2800      	cmp	r0, #0
90009dda:	d1bd      	bne.n	90009d58 <netconn_write_vectors_partly+0x1c>
    if (bytes_written != NULL) {
90009ddc:	b10f      	cbz	r7, 90009de2 <netconn_write_vectors_partly+0xa6>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
90009dde:	9b06      	ldr	r3, [sp, #24]
90009de0:	603b      	str	r3, [r7, #0]
    if (!dontblock) {
90009de2:	2d00      	cmp	r5, #0
90009de4:	d1e2      	bne.n	90009dac <netconn_write_vectors_partly+0x70>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
90009de6:	9b06      	ldr	r3, [sp, #24]
90009de8:	42b3      	cmp	r3, r6
90009dea:	d0df      	beq.n	90009dac <netconn_write_vectors_partly+0x70>
90009dec:	4b03      	ldr	r3, [pc, #12]	; (90009dfc <netconn_write_vectors_partly+0xc0>)
90009dee:	f44f 6286 	mov.w	r2, #1072	; 0x430
90009df2:	4907      	ldr	r1, [pc, #28]	; (90009e10 <netconn_write_vectors_partly+0xd4>)
90009df4:	4803      	ldr	r0, [pc, #12]	; (90009e04 <netconn_write_vectors_partly+0xc8>)
90009df6:	f01f fb6b 	bl	900294d0 <iprintf>
90009dfa:	e7ad      	b.n	90009d58 <netconn_write_vectors_partly+0x1c>
90009dfc:	9002b266 	.word	0x9002b266
90009e00:	9002b425 	.word	0x9002b425
90009e04:	9002a254 	.word	0x9002a254
90009e08:	9002b441 	.word	0x9002b441
90009e0c:	9000af09 	.word	0x9000af09
90009e10:	9002b463 	.word	0x9002b463

90009e14 <netconn_write_partly>:
{
90009e14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  vector.len = size;
90009e16:	e9cd 1202 	strd	r1, r2, [sp, #8]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
90009e1a:	9a06      	ldr	r2, [sp, #24]
90009e1c:	a902      	add	r1, sp, #8
90009e1e:	9200      	str	r2, [sp, #0]
90009e20:	2201      	movs	r2, #1
90009e22:	f7ff ff8b 	bl	90009d3c <netconn_write_vectors_partly>
}
90009e26:	b005      	add	sp, #20
90009e28:	f85d fb04 	ldr.w	pc, [sp], #4

90009e2c <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
90009e2c:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
90009e2e:	4604      	mov	r4, r0
90009e30:	b148      	cbz	r0, 90009e46 <netconn_err+0x1a>
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
90009e32:	f005 fe1b 	bl	9000fa6c <sys_arch_protect>
  err = conn->pending_err;
  conn->pending_err = ERR_OK;
90009e36:	2300      	movs	r3, #0
  err = conn->pending_err;
90009e38:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
90009e3c:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
90009e3e:	f005 fe21 	bl	9000fa84 <sys_arch_unprotect>
  return err;
}
90009e42:	4628      	mov	r0, r5
90009e44:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
90009e46:	4605      	mov	r5, r0
90009e48:	e7fb      	b.n	90009e42 <netconn_err+0x16>
	...

90009e4c <netconn_accept>:
{
90009e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
90009e4e:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
90009e50:	460e      	mov	r6, r1
90009e52:	b959      	cbnz	r1, 90009e6c <netconn_accept+0x20>
90009e54:	4b25      	ldr	r3, [pc, #148]	; (90009eec <netconn_accept+0xa0>)
90009e56:	f240 12e1 	movw	r2, #481	; 0x1e1
90009e5a:	4925      	ldr	r1, [pc, #148]	; (90009ef0 <netconn_accept+0xa4>)
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
90009e5c:	f06f 040f 	mvn.w	r4, #15
90009e60:	4824      	ldr	r0, [pc, #144]	; (90009ef4 <netconn_accept+0xa8>)
90009e62:	f01f fb35 	bl	900294d0 <iprintf>
}
90009e66:	4620      	mov	r0, r4
90009e68:	b003      	add	sp, #12
90009e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_conn = NULL;
90009e6c:	2300      	movs	r3, #0
90009e6e:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
90009e70:	b920      	cbnz	r0, 90009e7c <netconn_accept+0x30>
90009e72:	4b1e      	ldr	r3, [pc, #120]	; (90009eec <netconn_accept+0xa0>)
90009e74:	f240 12e3 	movw	r2, #483	; 0x1e3
90009e78:	491f      	ldr	r1, [pc, #124]	; (90009ef8 <netconn_accept+0xac>)
90009e7a:	e7ef      	b.n	90009e5c <netconn_accept+0x10>
  err = netconn_err(conn);
90009e7c:	f7ff ffd6 	bl	90009e2c <netconn_err>
90009e80:	4604      	mov	r4, r0
90009e82:	f88d 0003 	strb.w	r0, [sp, #3]
  if (err != ERR_OK) {
90009e86:	2800      	cmp	r0, #0
90009e88:	d1ed      	bne.n	90009e66 <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
90009e8a:	f105 0714 	add.w	r7, r5, #20
90009e8e:	4638      	mov	r0, r7
90009e90:	f005 fd73 	bl	9000f97a <sys_mbox_valid>
90009e94:	b910      	cbnz	r0, 90009e9c <netconn_accept+0x50>
    return ERR_CLSD;
90009e96:	f06f 040e 	mvn.w	r4, #14
90009e9a:	e7e4      	b.n	90009e66 <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
90009e9c:	7f2b      	ldrb	r3, [r5, #28]
90009e9e:	07da      	lsls	r2, r3, #31
90009ea0:	d4f9      	bmi.n	90009e96 <netconn_accept+0x4a>
  if (netconn_is_nonblocking(conn)) {
90009ea2:	079b      	lsls	r3, r3, #30
90009ea4:	d508      	bpl.n	90009eb8 <netconn_accept+0x6c>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
90009ea6:	a901      	add	r1, sp, #4
90009ea8:	4638      	mov	r0, r7
90009eaa:	f005 fd5b 	bl	9000f964 <sys_arch_mbox_tryfetch>
90009eae:	3001      	adds	r0, #1
90009eb0:	d107      	bne.n	90009ec2 <netconn_accept+0x76>
      return ERR_WOULDBLOCK;
90009eb2:	f06f 0406 	mvn.w	r4, #6
90009eb6:	e7d6      	b.n	90009e66 <netconn_accept+0x1a>
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
90009eb8:	4622      	mov	r2, r4
90009eba:	a901      	add	r1, sp, #4
90009ebc:	4638      	mov	r0, r7
90009ebe:	f005 fd33 	bl	9000f928 <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
90009ec2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
90009ec4:	b11b      	cbz	r3, 90009ece <netconn_accept+0x82>
90009ec6:	2200      	movs	r2, #0
90009ec8:	2101      	movs	r1, #1
90009eca:	4628      	mov	r0, r5
90009ecc:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
90009ece:	f10d 0103 	add.w	r1, sp, #3
90009ed2:	9801      	ldr	r0, [sp, #4]
90009ed4:	f000 fd3c 	bl	9000a950 <lwip_netconn_is_err_msg>
90009ed8:	b110      	cbz	r0, 90009ee0 <netconn_accept+0x94>
    return err;
90009eda:	f99d 4003 	ldrsb.w	r4, [sp, #3]
90009ede:	e7c2      	b.n	90009e66 <netconn_accept+0x1a>
  if (accept_ptr == NULL) {
90009ee0:	9b01      	ldr	r3, [sp, #4]
90009ee2:	2b00      	cmp	r3, #0
90009ee4:	d0d7      	beq.n	90009e96 <netconn_accept+0x4a>
  *new_conn = newconn;
90009ee6:	6033      	str	r3, [r6, #0]
  return ERR_OK;
90009ee8:	e7bd      	b.n	90009e66 <netconn_accept+0x1a>
90009eea:	bf00      	nop
90009eec:	9002b266 	.word	0x9002b266
90009ef0:	9002b486 	.word	0x9002b486
90009ef4:	9002a254 	.word	0x9002a254
90009ef8:	9002b4a6 	.word	0x9002b4a6

90009efc <netconn_recv_data>:
  void *buf = NULL;
90009efc:	2300      	movs	r3, #0
{
90009efe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
90009f00:	4604      	mov	r4, r0
90009f02:	4616      	mov	r6, r2
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
90009f04:	460d      	mov	r5, r1
  void *buf = NULL;
90009f06:	9301      	str	r3, [sp, #4]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
90009f08:	b951      	cbnz	r1, 90009f20 <netconn_recv_data+0x24>
90009f0a:	4b32      	ldr	r3, [pc, #200]	; (90009fd4 <netconn_recv_data+0xd8>)
90009f0c:	f44f 7212 	mov.w	r2, #584	; 0x248
90009f10:	4931      	ldr	r1, [pc, #196]	; (90009fd8 <netconn_recv_data+0xdc>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
90009f12:	4832      	ldr	r0, [pc, #200]	; (90009fdc <netconn_recv_data+0xe0>)
90009f14:	f01f fadc 	bl	900294d0 <iprintf>
90009f18:	f06f 000f 	mvn.w	r0, #15
}
90009f1c:	b003      	add	sp, #12
90009f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
90009f20:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
90009f22:	b920      	cbnz	r0, 90009f2e <netconn_recv_data+0x32>
90009f24:	4b2b      	ldr	r3, [pc, #172]	; (90009fd4 <netconn_recv_data+0xd8>)
90009f26:	f240 224a 	movw	r2, #586	; 0x24a
90009f2a:	492d      	ldr	r1, [pc, #180]	; (90009fe0 <netconn_recv_data+0xe4>)
90009f2c:	e7f1      	b.n	90009f12 <netconn_recv_data+0x16>
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
90009f2e:	f100 0710 	add.w	r7, r0, #16
90009f32:	4638      	mov	r0, r7
90009f34:	f005 fd21 	bl	9000f97a <sys_mbox_valid>
90009f38:	b938      	cbnz	r0, 90009f4a <netconn_recv_data+0x4e>
    err_t err = netconn_err(conn);
90009f3a:	4620      	mov	r0, r4
90009f3c:	f7ff ff76 	bl	90009e2c <netconn_err>
    if (err != ERR_OK) {
90009f40:	2800      	cmp	r0, #0
90009f42:	d1eb      	bne.n	90009f1c <netconn_recv_data+0x20>
    return ERR_CONN;
90009f44:	f06f 000a 	mvn.w	r0, #10
90009f48:	e7e8      	b.n	90009f1c <netconn_recv_data+0x20>
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
90009f4a:	7f23      	ldrb	r3, [r4, #28]
90009f4c:	f006 0604 	and.w	r6, r6, #4
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
90009f50:	a901      	add	r1, sp, #4
90009f52:	4638      	mov	r0, r7
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
90009f54:	f003 0303 	and.w	r3, r3, #3
90009f58:	4333      	orrs	r3, r6
90009f5a:	d102      	bne.n	90009f62 <netconn_recv_data+0x66>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
90009f5c:	f994 2008 	ldrsb.w	r2, [r4, #8]
90009f60:	b172      	cbz	r2, 90009f80 <netconn_recv_data+0x84>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
90009f62:	f005 fcff 	bl	9000f964 <sys_arch_mbox_tryfetch>
90009f66:	3001      	adds	r0, #1
90009f68:	d10c      	bne.n	90009f84 <netconn_recv_data+0x88>
      err = netconn_err(conn);
90009f6a:	4620      	mov	r0, r4
90009f6c:	f7ff ff5e 	bl	90009e2c <netconn_err>
      if (err != ERR_OK) {
90009f70:	2800      	cmp	r0, #0
90009f72:	d1d3      	bne.n	90009f1c <netconn_recv_data+0x20>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
90009f74:	7f23      	ldrb	r3, [r4, #28]
90009f76:	07db      	lsls	r3, r3, #31
90009f78:	d4e4      	bmi.n	90009f44 <netconn_recv_data+0x48>
      return ERR_WOULDBLOCK;
90009f7a:	f06f 0006 	mvn.w	r0, #6
90009f7e:	e7cd      	b.n	90009f1c <netconn_recv_data+0x20>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
90009f80:	f005 fcd2 	bl	9000f928 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
90009f84:	7823      	ldrb	r3, [r4, #0]
90009f86:	9801      	ldr	r0, [sp, #4]
90009f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
90009f8c:	2b10      	cmp	r3, #16
90009f8e:	d116      	bne.n	90009fbe <netconn_recv_data+0xc2>
    if (lwip_netconn_is_err_msg(buf, &err)) {
90009f90:	f10d 0103 	add.w	r1, sp, #3
90009f94:	f000 fcdc 	bl	9000a950 <lwip_netconn_is_err_msg>
90009f98:	b130      	cbz	r0, 90009fa8 <netconn_recv_data+0xac>
      if (err == ERR_CLSD) {
90009f9a:	f99d 0003 	ldrsb.w	r0, [sp, #3]
        return ERR_OK;
90009f9e:	f110 0f0f 	cmn.w	r0, #15
90009fa2:	bf08      	it	eq
90009fa4:	2000      	moveq	r0, #0
90009fa6:	e7b9      	b.n	90009f1c <netconn_recv_data+0x20>
    len = ((struct pbuf *)buf)->tot_len;
90009fa8:	9b01      	ldr	r3, [sp, #4]
    len = netbuf_len((struct netbuf *)buf);
90009faa:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
90009fac:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009fae:	b113      	cbz	r3, 90009fb6 <netconn_recv_data+0xba>
90009fb0:	2101      	movs	r1, #1
90009fb2:	4620      	mov	r0, r4
90009fb4:	4798      	blx	r3
  *new_buf = buf;
90009fb6:	9b01      	ldr	r3, [sp, #4]
  return ERR_OK;
90009fb8:	2000      	movs	r0, #0
  *new_buf = buf;
90009fba:	602b      	str	r3, [r5, #0]
  return ERR_OK;
90009fbc:	e7ae      	b.n	90009f1c <netconn_recv_data+0x20>
    LWIP_ASSERT("buf != NULL", buf != NULL);
90009fbe:	b930      	cbnz	r0, 90009fce <netconn_recv_data+0xd2>
90009fc0:	4b04      	ldr	r3, [pc, #16]	; (90009fd4 <netconn_recv_data+0xd8>)
90009fc2:	f240 2291 	movw	r2, #657	; 0x291
90009fc6:	4907      	ldr	r1, [pc, #28]	; (90009fe4 <netconn_recv_data+0xe8>)
90009fc8:	4804      	ldr	r0, [pc, #16]	; (90009fdc <netconn_recv_data+0xe0>)
90009fca:	f01f fa81 	bl	900294d0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
90009fce:	9b01      	ldr	r3, [sp, #4]
90009fd0:	681b      	ldr	r3, [r3, #0]
90009fd2:	e7ea      	b.n	90009faa <netconn_recv_data+0xae>
90009fd4:	9002b266 	.word	0x9002b266
90009fd8:	9002b4c3 	.word	0x9002b4c3
90009fdc:	9002a254 	.word	0x9002a254
90009fe0:	9002b4e1 	.word	0x9002b4e1
90009fe4:	9002b4fc 	.word	0x9002b4fc

90009fe8 <netconn_recv_udp_raw_netbuf_flags>:
{
90009fe8:	b508      	push	{r3, lr}
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
90009fea:	b140      	cbz	r0, 90009ffe <netconn_recv_udp_raw_netbuf_flags+0x16>
90009fec:	7803      	ldrb	r3, [r0, #0]
90009fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
90009ff2:	2b10      	cmp	r3, #16
90009ff4:	d003      	beq.n	90009ffe <netconn_recv_udp_raw_netbuf_flags+0x16>
}
90009ff6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return netconn_recv_data(conn, (void **)new_buf, apiflags);
90009ffa:	f7ff bf7f 	b.w	90009efc <netconn_recv_data>
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
90009ffe:	4b05      	ldr	r3, [pc, #20]	; (9000a014 <netconn_recv_udp_raw_netbuf_flags+0x2c>)
9000a000:	f44f 7253 	mov.w	r2, #844	; 0x34c
9000a004:	4904      	ldr	r1, [pc, #16]	; (9000a018 <netconn_recv_udp_raw_netbuf_flags+0x30>)
9000a006:	4805      	ldr	r0, [pc, #20]	; (9000a01c <netconn_recv_udp_raw_netbuf_flags+0x34>)
9000a008:	f01f fa62 	bl	900294d0 <iprintf>
}
9000a00c:	f06f 000f 	mvn.w	r0, #15
9000a010:	bd08      	pop	{r3, pc}
9000a012:	bf00      	nop
9000a014:	9002b266 	.word	0x9002b266
9000a018:	9002b508 	.word	0x9002b508
9000a01c:	9002a254 	.word	0x9002a254

9000a020 <netconn_recv_data_tcp>:
{
9000a020:	b5f0      	push	{r4, r5, r6, r7, lr}
9000a022:	4604      	mov	r4, r0
9000a024:	b089      	sub	sp, #36	; 0x24
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
9000a026:	3010      	adds	r0, #16
{
9000a028:	460f      	mov	r7, r1
9000a02a:	4616      	mov	r6, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
9000a02c:	f005 fca5 	bl	9000f97a <sys_mbox_valid>
9000a030:	2800      	cmp	r0, #0
9000a032:	d04c      	beq.n	9000a0ce <netconn_recv_data_tcp+0xae>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
9000a034:	f994 201c 	ldrsb.w	r2, [r4, #28]
9000a038:	7f23      	ldrb	r3, [r4, #28]
9000a03a:	2a00      	cmp	r2, #0
9000a03c:	da13      	bge.n	9000a066 <netconn_recv_data_tcp+0x46>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
9000a03e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
9000a042:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
9000a044:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a046:	b11b      	cbz	r3, 9000a050 <netconn_recv_data_tcp+0x30>
9000a048:	2200      	movs	r2, #0
9000a04a:	2101      	movs	r1, #1
9000a04c:	4620      	mov	r0, r4
9000a04e:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
9000a050:	6863      	ldr	r3, [r4, #4]
9000a052:	2b00      	cmp	r3, #0
9000a054:	d134      	bne.n	9000a0c0 <netconn_recv_data_tcp+0xa0>
        err = netconn_err(conn);
9000a056:	4620      	mov	r0, r4
9000a058:	f7ff fee8 	bl	90009e2c <netconn_err>
        return ERR_RST;
9000a05c:	1e05      	subs	r5, r0, #0
9000a05e:	bf08      	it	eq
9000a060:	f06f 050d 	mvneq.w	r5, #13
9000a064:	e020      	b.n	9000a0a8 <netconn_recv_data_tcp+0x88>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
9000a066:	4632      	mov	r2, r6
9000a068:	4639      	mov	r1, r7
9000a06a:	4620      	mov	r0, r4
9000a06c:	f7ff ff46 	bl	90009efc <netconn_recv_data>
  if (err != ERR_OK) {
9000a070:	4605      	mov	r5, r0
9000a072:	b9c8      	cbnz	r0, 9000a0a8 <netconn_recv_data_tcp+0x88>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
9000a074:	0732      	lsls	r2, r6, #28
  buf = *new_buf;
9000a076:	683f      	ldr	r7, [r7, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
9000a078:	d40d      	bmi.n	9000a096 <netconn_recv_data_tcp+0x76>
    u16_t len = buf ? buf->tot_len : 1;
9000a07a:	b1c7      	cbz	r7, 9000a0ae <netconn_recv_data_tcp+0x8e>
9000a07c:	893a      	ldrh	r2, [r7, #8]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
9000a07e:	7823      	ldrb	r3, [r4, #0]
9000a080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000a084:	2b10      	cmp	r3, #16
9000a086:	d014      	beq.n	9000a0b2 <netconn_recv_data_tcp+0x92>
9000a088:	4b12      	ldr	r3, [pc, #72]	; (9000a0d4 <netconn_recv_data_tcp+0xb4>)
9000a08a:	f240 22a7 	movw	r2, #679	; 0x2a7
9000a08e:	4912      	ldr	r1, [pc, #72]	; (9000a0d8 <netconn_recv_data_tcp+0xb8>)
9000a090:	4812      	ldr	r0, [pc, #72]	; (9000a0dc <netconn_recv_data_tcp+0xbc>)
9000a092:	f01f fa1d 	bl	900294d0 <iprintf>
  if (buf == NULL) {
9000a096:	b93f      	cbnz	r7, 9000a0a8 <netconn_recv_data_tcp+0x88>
    if (apiflags & NETCONN_NOFIN) {
9000a098:	06f3      	lsls	r3, r6, #27
9000a09a:	d5d3      	bpl.n	9000a044 <netconn_recv_data_tcp+0x24>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
9000a09c:	7f23      	ldrb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
9000a09e:	f06f 0506 	mvn.w	r5, #6
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
9000a0a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
9000a0a6:	7723      	strb	r3, [r4, #28]
}
9000a0a8:	4628      	mov	r0, r5
9000a0aa:	b009      	add	sp, #36	; 0x24
9000a0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u16_t len = buf ? buf->tot_len : 1;
9000a0ae:	2201      	movs	r2, #1
9000a0b0:	e7e5      	b.n	9000a07e <netconn_recv_data_tcp+0x5e>
  return netconn_apimsg(lwip_netconn_do_recv, msg);
9000a0b2:	4669      	mov	r1, sp
9000a0b4:	480a      	ldr	r0, [pc, #40]	; (9000a0e0 <netconn_recv_data_tcp+0xc0>)
  msg->conn = conn;
9000a0b6:	9400      	str	r4, [sp, #0]
  msg->msg.r.len = len;
9000a0b8:	9202      	str	r2, [sp, #8]
  return netconn_apimsg(lwip_netconn_do_recv, msg);
9000a0ba:	f7ff fce3 	bl	90009a84 <netconn_apimsg>
9000a0be:	e7ea      	b.n	9000a096 <netconn_recv_data_tcp+0x76>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
9000a0c0:	2101      	movs	r1, #1
9000a0c2:	4620      	mov	r0, r4
      return ERR_CLSD;
9000a0c4:	f06f 050e 	mvn.w	r5, #14
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
9000a0c8:	f7ff fce6 	bl	90009a98 <netconn_close_shutdown>
      return ERR_CLSD;
9000a0cc:	e7ec      	b.n	9000a0a8 <netconn_recv_data_tcp+0x88>
    return ERR_CONN;
9000a0ce:	f06f 050a 	mvn.w	r5, #10
9000a0d2:	e7e9      	b.n	9000a0a8 <netconn_recv_data_tcp+0x88>
9000a0d4:	9002b266 	.word	0x9002b266
9000a0d8:	9002b3e6 	.word	0x9002b3e6
9000a0dc:	9002a254 	.word	0x9002a254
9000a0e0:	9000aed1 	.word	0x9000aed1

9000a0e4 <netconn_recv_tcp_pbuf_flags>:
{
9000a0e4:	b508      	push	{r3, lr}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
9000a0e6:	b140      	cbz	r0, 9000a0fa <netconn_recv_tcp_pbuf_flags+0x16>
9000a0e8:	7803      	ldrb	r3, [r0, #0]
9000a0ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000a0ee:	2b10      	cmp	r3, #16
9000a0f0:	d103      	bne.n	9000a0fa <netconn_recv_tcp_pbuf_flags+0x16>
}
9000a0f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return netconn_recv_data_tcp(conn, new_buf, apiflags);
9000a0f6:	f7ff bf93 	b.w	9000a020 <netconn_recv_data_tcp>
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
9000a0fa:	4b05      	ldr	r3, [pc, #20]	; (9000a110 <netconn_recv_tcp_pbuf_flags+0x2c>)
9000a0fc:	f240 3225 	movw	r2, #805	; 0x325
9000a100:	4904      	ldr	r1, [pc, #16]	; (9000a114 <netconn_recv_tcp_pbuf_flags+0x30>)
9000a102:	4805      	ldr	r0, [pc, #20]	; (9000a118 <netconn_recv_tcp_pbuf_flags+0x34>)
9000a104:	f01f f9e4 	bl	900294d0 <iprintf>
}
9000a108:	f06f 000f 	mvn.w	r0, #15
9000a10c:	bd08      	pop	{r3, pc}
9000a10e:	bf00      	nop
9000a110:	9002b266 	.word	0x9002b266
9000a114:	9002b3e6 	.word	0x9002b3e6
9000a118:	9002a254 	.word	0x9002a254

9000a11c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
9000a11c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
9000a120:	4606      	mov	r6, r0
9000a122:	4617      	mov	r7, r2
9000a124:	461d      	mov	r5, r3
9000a126:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
9000a12a:	460c      	mov	r4, r1
9000a12c:	b929      	cbnz	r1, 9000a13a <recv_udp+0x1e>
9000a12e:	4b25      	ldr	r3, [pc, #148]	; (9000a1c4 <recv_udp+0xa8>)
9000a130:	22e5      	movs	r2, #229	; 0xe5
9000a132:	4925      	ldr	r1, [pc, #148]	; (9000a1c8 <recv_udp+0xac>)
9000a134:	4825      	ldr	r0, [pc, #148]	; (9000a1cc <recv_udp+0xb0>)
9000a136:	f01f f9cb 	bl	900294d0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
9000a13a:	b99e      	cbnz	r6, 9000a164 <recv_udp+0x48>
9000a13c:	4b21      	ldr	r3, [pc, #132]	; (9000a1c4 <recv_udp+0xa8>)
9000a13e:	22e6      	movs	r2, #230	; 0xe6
9000a140:	4923      	ldr	r1, [pc, #140]	; (9000a1d0 <recv_udp+0xb4>)
9000a142:	4822      	ldr	r0, [pc, #136]	; (9000a1cc <recv_udp+0xb0>)
9000a144:	f01f f9c4 	bl	900294d0 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
9000a148:	4638      	mov	r0, r7
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
9000a14a:	b003      	add	sp, #12
9000a14c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    pbuf_free(p);
9000a150:	f004 bb60 	b.w	9000e814 <pbuf_free>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
9000a154:	6a73      	ldr	r3, [r6, #36]	; 0x24
9000a156:	2b00      	cmp	r3, #0
9000a158:	d031      	beq.n	9000a1be <recv_udp+0xa2>
9000a15a:	4630      	mov	r0, r6
}
9000a15c:	b003      	add	sp, #12
9000a15e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
9000a162:	4718      	bx	r3
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
9000a164:	6873      	ldr	r3, [r6, #4]
9000a166:	42a3      	cmp	r3, r4
9000a168:	d005      	beq.n	9000a176 <recv_udp+0x5a>
9000a16a:	4b16      	ldr	r3, [pc, #88]	; (9000a1c4 <recv_udp+0xa8>)
9000a16c:	22ee      	movs	r2, #238	; 0xee
9000a16e:	4919      	ldr	r1, [pc, #100]	; (9000a1d4 <recv_udp+0xb8>)
9000a170:	4816      	ldr	r0, [pc, #88]	; (9000a1cc <recv_udp+0xb0>)
9000a172:	f01f f9ad 	bl	900294d0 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
9000a176:	f106 0910 	add.w	r9, r6, #16
9000a17a:	4648      	mov	r0, r9
9000a17c:	f005 fbfd 	bl	9000f97a <sys_mbox_valid>
9000a180:	2800      	cmp	r0, #0
9000a182:	d0e1      	beq.n	9000a148 <recv_udp+0x2c>
  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
9000a184:	2006      	movs	r0, #6
9000a186:	f004 f83f 	bl	9000e208 <memp_malloc>
  if (buf == NULL) {
9000a18a:	4604      	mov	r4, r0
9000a18c:	2800      	cmp	r0, #0
9000a18e:	d0db      	beq.n	9000a148 <recv_udp+0x2c>
    buf->ptr = p;
9000a190:	e9c0 7700 	strd	r7, r7, [r0]
    ip_addr_set(&buf->addr, addr);
9000a194:	b105      	cbz	r5, 9000a198 <recv_udp+0x7c>
9000a196:	682d      	ldr	r5, [r5, #0]
  len = p->tot_len;
9000a198:	893a      	ldrh	r2, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
9000a19a:	4621      	mov	r1, r4
9000a19c:	4648      	mov	r0, r9
    ip_addr_set(&buf->addr, addr);
9000a19e:	60a5      	str	r5, [r4, #8]
    buf->port = port;
9000a1a0:	f8a4 800c 	strh.w	r8, [r4, #12]
  len = p->tot_len;
9000a1a4:	9201      	str	r2, [sp, #4]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
9000a1a6:	f005 fbb0 	bl	9000f90a <sys_mbox_trypost>
9000a1aa:	9a01      	ldr	r2, [sp, #4]
9000a1ac:	4601      	mov	r1, r0
9000a1ae:	2800      	cmp	r0, #0
9000a1b0:	d0d0      	beq.n	9000a154 <recv_udp+0x38>
    netbuf_delete(buf);
9000a1b2:	4620      	mov	r0, r4
}
9000a1b4:	b003      	add	sp, #12
9000a1b6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    netbuf_delete(buf);
9000a1ba:	f004 b85b 	b.w	9000e274 <netbuf_delete>
}
9000a1be:	b003      	add	sp, #12
9000a1c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9000a1c4:	9002b532 	.word	0x9002b532
9000a1c8:	9002b594 	.word	0x9002b594
9000a1cc:	9002a254 	.word	0x9002a254
9000a1d0:	9002b5b6 	.word	0x9002b5b6
9000a1d4:	9002b5d5 	.word	0x9002b5d5

9000a1d8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
9000a1d8:	b507      	push	{r0, r1, r2, lr}
9000a1da:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
9000a1dc:	6840      	ldr	r0, [r0, #4]
  tcp_arg(pcb, conn);
9000a1de:	9001      	str	r0, [sp, #4]
9000a1e0:	f005 fe3e 	bl	9000fe60 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
9000a1e4:	9801      	ldr	r0, [sp, #4]
9000a1e6:	4909      	ldr	r1, [pc, #36]	; (9000a20c <setup_tcp+0x34>)
9000a1e8:	f005 fe3e 	bl	9000fe68 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
9000a1ec:	9801      	ldr	r0, [sp, #4]
9000a1ee:	4908      	ldr	r1, [pc, #32]	; (9000a210 <setup_tcp+0x38>)
9000a1f0:	f005 fe52 	bl	9000fe98 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
9000a1f4:	9801      	ldr	r0, [sp, #4]
9000a1f6:	2202      	movs	r2, #2
9000a1f8:	4906      	ldr	r1, [pc, #24]	; (9000a214 <setup_tcp+0x3c>)
9000a1fa:	f005 fe83 	bl	9000ff04 <tcp_poll>
  tcp_err(pcb, err_tcp);
9000a1fe:	4906      	ldr	r1, [pc, #24]	; (9000a218 <setup_tcp+0x40>)
9000a200:	9801      	ldr	r0, [sp, #4]
}
9000a202:	b003      	add	sp, #12
9000a204:	f85d eb04 	ldr.w	lr, [sp], #4
  tcp_err(pcb, err_tcp);
9000a208:	f005 be5e 	b.w	9000fec8 <tcp_err>
9000a20c:	9000a6d5 	.word	0x9000a6d5
9000a210:	9000a8e1 	.word	0x9000a8e1
9000a214:	9000a659 	.word	0x9000a659
9000a218:	9000a7a5 	.word	0x9000a7a5

9000a21c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
9000a21c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000a220:	460f      	mov	r7, r1
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
9000a222:	4604      	mov	r4, r0
9000a224:	b930      	cbnz	r0, 9000a234 <lwip_netconn_do_writemore+0x18>
9000a226:	4b89      	ldr	r3, [pc, #548]	; (9000a44c <lwip_netconn_do_writemore+0x230>)
9000a228:	f240 6273 	movw	r2, #1651	; 0x673
9000a22c:	4988      	ldr	r1, [pc, #544]	; (9000a450 <lwip_netconn_do_writemore+0x234>)
9000a22e:	4889      	ldr	r0, [pc, #548]	; (9000a454 <lwip_netconn_do_writemore+0x238>)
9000a230:	f01f f94e 	bl	900294d0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
9000a234:	7863      	ldrb	r3, [r4, #1]
9000a236:	2b01      	cmp	r3, #1
9000a238:	d006      	beq.n	9000a248 <lwip_netconn_do_writemore+0x2c>
9000a23a:	4b84      	ldr	r3, [pc, #528]	; (9000a44c <lwip_netconn_do_writemore+0x230>)
9000a23c:	f240 6274 	movw	r2, #1652	; 0x674
9000a240:	4985      	ldr	r1, [pc, #532]	; (9000a458 <lwip_netconn_do_writemore+0x23c>)
9000a242:	4884      	ldr	r0, [pc, #528]	; (9000a454 <lwip_netconn_do_writemore+0x238>)
9000a244:	f01f f944 	bl	900294d0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
9000a248:	6a23      	ldr	r3, [r4, #32]
9000a24a:	b933      	cbnz	r3, 9000a25a <lwip_netconn_do_writemore+0x3e>
9000a24c:	4b7f      	ldr	r3, [pc, #508]	; (9000a44c <lwip_netconn_do_writemore+0x230>)
9000a24e:	f240 6275 	movw	r2, #1653	; 0x675
9000a252:	4982      	ldr	r1, [pc, #520]	; (9000a45c <lwip_netconn_do_writemore+0x240>)
9000a254:	487f      	ldr	r0, [pc, #508]	; (9000a454 <lwip_netconn_do_writemore+0x238>)
9000a256:	f01f f93b 	bl	900294d0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
9000a25a:	6863      	ldr	r3, [r4, #4]
9000a25c:	b933      	cbnz	r3, 9000a26c <lwip_netconn_do_writemore+0x50>
9000a25e:	4b7b      	ldr	r3, [pc, #492]	; (9000a44c <lwip_netconn_do_writemore+0x230>)
9000a260:	f240 6276 	movw	r2, #1654	; 0x676
9000a264:	497e      	ldr	r1, [pc, #504]	; (9000a460 <lwip_netconn_do_writemore+0x244>)
9000a266:	487b      	ldr	r0, [pc, #492]	; (9000a454 <lwip_netconn_do_writemore+0x238>)
9000a268:	f01f f932 	bl	900294d0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
9000a26c:	6a23      	ldr	r3, [r4, #32]
9000a26e:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
9000a272:	429a      	cmp	r2, r3
9000a274:	d306      	bcc.n	9000a284 <lwip_netconn_do_writemore+0x68>
9000a276:	4b75      	ldr	r3, [pc, #468]	; (9000a44c <lwip_netconn_do_writemore+0x230>)
9000a278:	f240 6277 	movw	r2, #1655	; 0x677
9000a27c:	4979      	ldr	r1, [pc, #484]	; (9000a464 <lwip_netconn_do_writemore+0x248>)
9000a27e:	4875      	ldr	r0, [pc, #468]	; (9000a454 <lwip_netconn_do_writemore+0x238>)
9000a280:	f01f f926 	bl	900294d0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
9000a284:	6a23      	ldr	r3, [r4, #32]
9000a286:	899b      	ldrh	r3, [r3, #12]
9000a288:	b933      	cbnz	r3, 9000a298 <lwip_netconn_do_writemore+0x7c>
9000a28a:	4b70      	ldr	r3, [pc, #448]	; (9000a44c <lwip_netconn_do_writemore+0x230>)
9000a28c:	f240 6279 	movw	r2, #1657	; 0x679
9000a290:	4975      	ldr	r1, [pc, #468]	; (9000a468 <lwip_netconn_do_writemore+0x24c>)
9000a292:	4870      	ldr	r0, [pc, #448]	; (9000a454 <lwip_netconn_do_writemore+0x238>)
9000a294:	f01f f91c 	bl	900294d0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
9000a298:	6a23      	ldr	r3, [r4, #32]
9000a29a:	7f26      	ldrb	r6, [r4, #28]
9000a29c:	f893 801c 	ldrb.w	r8, [r3, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
9000a2a0:	f006 0602 	and.w	r6, r6, #2
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
9000a2a4:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 9000a454 <lwip_netconn_do_writemore+0x238>
9000a2a8:	f008 0304 	and.w	r3, r8, #4
9000a2ac:	431e      	orrs	r6, r3
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
9000a2ae:	6a21      	ldr	r1, [r4, #32]
      available = tcp_sndbuf(conn->pcb.tcp);
9000a2b0:	6865      	ldr	r5, [r4, #4]
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
9000a2b2:	688a      	ldr	r2, [r1, #8]
9000a2b4:	690b      	ldr	r3, [r1, #16]
9000a2b6:	6810      	ldr	r0, [r2, #0]
      available = tcp_sndbuf(conn->pcb.tcp);
9000a2b8:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
9000a2bc:	eb00 0a03 	add.w	sl, r0, r3
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
9000a2c0:	6850      	ldr	r0, [r2, #4]
9000a2c2:	eba0 0903 	sub.w	r9, r0, r3
      if (diff > 0xffffUL) { /* max_u16_t */
9000a2c6:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
        len = 0xffff;
9000a2ca:	bf2a      	itet	cs
9000a2cc:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
        len = (u16_t)diff;
9000a2d0:	fa1f f289 	uxthcc.w	r2, r9
        apiflags |= TCP_WRITE_FLAG_MORE;
9000a2d4:	f048 0802 	orrcs.w	r8, r8, #2
      if (available < len) {
9000a2d8:	42aa      	cmp	r2, r5
9000a2da:	d979      	bls.n	9000a3d0 <lwip_netconn_do_writemore+0x1b4>
        if (dontblock) {
9000a2dc:	2e00      	cmp	r6, #0
9000a2de:	d038      	beq.n	9000a352 <lwip_netconn_do_writemore+0x136>
          if (!len) {
9000a2e0:	2d00      	cmp	r5, #0
9000a2e2:	d138      	bne.n	9000a356 <lwip_netconn_do_writemore+0x13a>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
9000a2e4:	698b      	ldr	r3, [r1, #24]
9000a2e6:	2b00      	cmp	r3, #0
9000a2e8:	bf0c      	ite	eq
9000a2ea:	f06f 0a06 	mvneq.w	sl, #6
9000a2ee:	f04f 0a00 	movne.w	sl, #0
      }
    } while (write_more && err == ERR_OK);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
9000a2f2:	6a23      	ldr	r3, [r4, #32]
9000a2f4:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
9000a2f8:	429a      	cmp	r2, r3
9000a2fa:	d276      	bcs.n	9000a3ea <lwip_netconn_do_writemore+0x1ce>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
9000a2fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a2fe:	b11b      	cbz	r3, 9000a308 <lwip_netconn_do_writemore+0xec>
9000a300:	2200      	movs	r2, #0
9000a302:	2103      	movs	r1, #3
9000a304:	4620      	mov	r0, r4
9000a306:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
9000a308:	7f23      	ldrb	r3, [r4, #28]
9000a30a:	f043 0310 	orr.w	r3, r3, #16
9000a30e:	7723      	strb	r3, [r4, #28]
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
      }
    }

    if (err == ERR_OK) {
9000a310:	f1ba 0f00 	cmp.w	sl, #0
9000a314:	d17e      	bne.n	9000a414 <lwip_netconn_do_writemore+0x1f8>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
9000a316:	6a23      	ldr	r3, [r4, #32]
9000a318:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
9000a31c:	429a      	cmp	r2, r3
9000a31e:	d077      	beq.n	9000a410 <lwip_netconn_do_writemore+0x1f4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
9000a320:	3e00      	subs	r6, #0
9000a322:	bf18      	it	ne
9000a324:	2601      	movne	r6, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
9000a326:	6860      	ldr	r0, [r4, #4]
9000a328:	f008 fe18 	bl	90012f5c <tcp_output>
      if (out_err == ERR_RTE) {
9000a32c:	3004      	adds	r0, #4
9000a32e:	f040 8084 	bne.w	9000a43a <lwip_netconn_do_writemore+0x21e>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
9000a332:	f06f 0a03 	mvn.w	sl, #3
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
9000a336:	6a23      	ldr	r3, [r4, #32]
    conn->current_msg->err = err;
    conn->current_msg = NULL;
9000a338:	2500      	movs	r5, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
9000a33a:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
9000a33c:	f883 a004 	strb.w	sl, [r3, #4]
    conn->current_msg = NULL;
9000a340:	6225      	str	r5, [r4, #32]
    conn->state = NETCONN_NONE;
9000a342:	7065      	strb	r5, [r4, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
9000a344:	2f00      	cmp	r7, #0
9000a346:	d07e      	beq.n	9000a446 <lwip_netconn_do_writemore+0x22a>
#endif
    {
      sys_sem_signal(op_completed_sem);
9000a348:	300c      	adds	r0, #12
9000a34a:	f005 fb4c 	bl	9000f9e6 <sys_sem_signal>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
9000a34e:	4628      	mov	r0, r5
9000a350:	e06b      	b.n	9000a42a <lwip_netconn_do_writemore+0x20e>
          apiflags |= TCP_WRITE_FLAG_MORE;
9000a352:	f048 0802 	orr.w	r8, r8, #2
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
9000a356:	442b      	add	r3, r5
9000a358:	4298      	cmp	r0, r3
9000a35a:	d206      	bcs.n	9000a36a <lwip_netconn_do_writemore+0x14e>
9000a35c:	4b3b      	ldr	r3, [pc, #236]	; (9000a44c <lwip_netconn_do_writemore+0x230>)
9000a35e:	f240 62a3 	movw	r2, #1699	; 0x6a3
9000a362:	4942      	ldr	r1, [pc, #264]	; (9000a46c <lwip_netconn_do_writemore+0x250>)
9000a364:	4658      	mov	r0, fp
9000a366:	f01f f8b3 	bl	900294d0 <iprintf>
      if ((len == 0xffff && diff > 0xffffUL) ||
9000a36a:	f64f 73ff 	movw	r3, #65535	; 0xffff
9000a36e:	429d      	cmp	r5, r3
9000a370:	d102      	bne.n	9000a378 <lwip_netconn_do_writemore+0x15c>
9000a372:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
9000a376:	d207      	bcs.n	9000a388 <lwip_netconn_do_writemore+0x16c>
9000a378:	fa1f f989 	uxth.w	r9, r9
9000a37c:	45a9      	cmp	r9, r5
9000a37e:	d129      	bne.n	9000a3d4 <lwip_netconn_do_writemore+0x1b8>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
9000a380:	6a23      	ldr	r3, [r4, #32]
9000a382:	899b      	ldrh	r3, [r3, #12]
9000a384:	2b01      	cmp	r3, #1
9000a386:	d925      	bls.n	9000a3d4 <lwip_netconn_do_writemore+0x1b8>
        apiflags |= TCP_WRITE_FLAG_MORE;
9000a388:	f048 0802 	orr.w	r8, r8, #2
        write_more = 1;
9000a38c:	f04f 0901 	mov.w	r9, #1
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
9000a390:	4651      	mov	r1, sl
9000a392:	4643      	mov	r3, r8
9000a394:	462a      	mov	r2, r5
9000a396:	6860      	ldr	r0, [r4, #4]
9000a398:	f008 f880 	bl	9001249c <tcp_write>
      if (err == ERR_OK) {
9000a39c:	4682      	mov	sl, r0
9000a39e:	b9e0      	cbnz	r0, 9000a3da <lwip_netconn_do_writemore+0x1be>
        conn->current_msg->msg.w.offset += len;
9000a3a0:	6a23      	ldr	r3, [r4, #32]
9000a3a2:	699a      	ldr	r2, [r3, #24]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
9000a3a4:	6899      	ldr	r1, [r3, #8]
        conn->current_msg->msg.w.offset += len;
9000a3a6:	442a      	add	r2, r5
9000a3a8:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
9000a3aa:	691a      	ldr	r2, [r3, #16]
9000a3ac:	4415      	add	r5, r2
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
9000a3ae:	684a      	ldr	r2, [r1, #4]
9000a3b0:	4295      	cmp	r5, r2
        conn->current_msg->msg.w.vector_off += len;
9000a3b2:	611d      	str	r5, [r3, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
9000a3b4:	d107      	bne.n	9000a3c6 <lwip_netconn_do_writemore+0x1aa>
          conn->current_msg->msg.w.vector_cnt--;
9000a3b6:	899a      	ldrh	r2, [r3, #12]
9000a3b8:	3a01      	subs	r2, #1
9000a3ba:	b292      	uxth	r2, r2
9000a3bc:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
9000a3be:	b112      	cbz	r2, 9000a3c6 <lwip_netconn_do_writemore+0x1aa>
            conn->current_msg->msg.w.vector++;
9000a3c0:	3108      	adds	r1, #8
            conn->current_msg->msg.w.vector_off = 0;
9000a3c2:	6118      	str	r0, [r3, #16]
            conn->current_msg->msg.w.vector++;
9000a3c4:	6099      	str	r1, [r3, #8]
    } while (write_more && err == ERR_OK);
9000a3c6:	f1b9 0f00 	cmp.w	r9, #0
9000a3ca:	f47f af70 	bne.w	9000a2ae <lwip_netconn_do_writemore+0x92>
9000a3ce:	e00a      	b.n	9000a3e6 <lwip_netconn_do_writemore+0x1ca>
9000a3d0:	4615      	mov	r5, r2
9000a3d2:	e7c0      	b.n	9000a356 <lwip_netconn_do_writemore+0x13a>
        write_more = 0;
9000a3d4:	f04f 0900 	mov.w	r9, #0
9000a3d8:	e7da      	b.n	9000a390 <lwip_netconn_do_writemore+0x174>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
9000a3da:	1c43      	adds	r3, r0, #1
9000a3dc:	b2db      	uxtb	r3, r3
9000a3de:	2b01      	cmp	r3, #1
9000a3e0:	d8a9      	bhi.n	9000a336 <lwip_netconn_do_writemore+0x11a>
err_mem:
9000a3e2:	f04f 3aff 	mov.w	sl, #4294967295
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
9000a3e6:	2e00      	cmp	r6, #0
9000a3e8:	d183      	bne.n	9000a2f2 <lwip_netconn_do_writemore+0xd6>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
9000a3ea:	6863      	ldr	r3, [r4, #4]
9000a3ec:	f240 3299 	movw	r2, #921	; 0x399
9000a3f0:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
9000a3f4:	4291      	cmp	r1, r2
9000a3f6:	d903      	bls.n	9000a400 <lwip_netconn_do_writemore+0x1e4>
9000a3f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000a3fc:	2b07      	cmp	r3, #7
9000a3fe:	d987      	bls.n	9000a310 <lwip_netconn_do_writemore+0xf4>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
9000a400:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a402:	2b00      	cmp	r3, #0
9000a404:	d084      	beq.n	9000a310 <lwip_netconn_do_writemore+0xf4>
9000a406:	2200      	movs	r2, #0
9000a408:	2103      	movs	r1, #3
9000a40a:	4620      	mov	r0, r4
9000a40c:	4798      	blx	r3
9000a40e:	e77f      	b.n	9000a310 <lwip_netconn_do_writemore+0xf4>
        write_finished = 1;
9000a410:	2601      	movs	r6, #1
9000a412:	e788      	b.n	9000a326 <lwip_netconn_do_writemore+0x10a>
    } else if (err == ERR_MEM) {
9000a414:	f1ba 3fff 	cmp.w	sl, #4294967295
9000a418:	d18d      	bne.n	9000a336 <lwip_netconn_do_writemore+0x11a>
      err_t out_err = tcp_output(conn->pcb.tcp);
9000a41a:	6860      	ldr	r0, [r4, #4]
9000a41c:	f008 fd9e 	bl	90012f5c <tcp_output>
      if (out_err == ERR_RTE) {
9000a420:	3004      	adds	r0, #4
9000a422:	d086      	beq.n	9000a332 <lwip_netconn_do_writemore+0x116>
      } else if (dontblock) {
9000a424:	b91e      	cbnz	r6, 9000a42e <lwip_netconn_do_writemore+0x212>
    return ERR_MEM;
9000a426:	f04f 30ff 	mov.w	r0, #4294967295
}
9000a42a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
9000a42e:	6a23      	ldr	r3, [r4, #32]
9000a430:	699b      	ldr	r3, [r3, #24]
9000a432:	b12b      	cbz	r3, 9000a440 <lwip_netconn_do_writemore+0x224>
9000a434:	f04f 0a00 	mov.w	sl, #0
9000a438:	e77d      	b.n	9000a336 <lwip_netconn_do_writemore+0x11a>
  if (write_finished) {
9000a43a:	2e00      	cmp	r6, #0
9000a43c:	d1fa      	bne.n	9000a434 <lwip_netconn_do_writemore+0x218>
9000a43e:	e7f2      	b.n	9000a426 <lwip_netconn_do_writemore+0x20a>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
9000a440:	f06f 0a06 	mvn.w	sl, #6
9000a444:	e777      	b.n	9000a336 <lwip_netconn_do_writemore+0x11a>
  return ERR_OK;
9000a446:	4638      	mov	r0, r7
9000a448:	e7ef      	b.n	9000a42a <lwip_netconn_do_writemore+0x20e>
9000a44a:	bf00      	nop
9000a44c:	9002b532 	.word	0x9002b532
9000a450:	9002ceb2 	.word	0x9002ceb2
9000a454:	9002a254 	.word	0x9002a254
9000a458:	9002b5f3 	.word	0x9002b5f3
9000a45c:	9002b610 	.word	0x9002b610
9000a460:	9002b62a 	.word	0x9002b62a
9000a464:	9002b640 	.word	0x9002b640
9000a468:	9002b67f 	.word	0x9002b67f
9000a46c:	9002b6a7 	.word	0x9002b6a7

9000a470 <lwip_netconn_do_close_internal>:
{
9000a470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000a474:	4689      	mov	r9, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
9000a476:	4604      	mov	r4, r0
9000a478:	b930      	cbnz	r0, 9000a488 <lwip_netconn_do_close_internal+0x18>
9000a47a:	4b6c      	ldr	r3, [pc, #432]	; (9000a62c <lwip_netconn_do_close_internal+0x1bc>)
9000a47c:	f240 32a2 	movw	r2, #930	; 0x3a2
9000a480:	496b      	ldr	r1, [pc, #428]	; (9000a630 <lwip_netconn_do_close_internal+0x1c0>)
9000a482:	486c      	ldr	r0, [pc, #432]	; (9000a634 <lwip_netconn_do_close_internal+0x1c4>)
9000a484:	f01f f824 	bl	900294d0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
9000a488:	7823      	ldrb	r3, [r4, #0]
9000a48a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000a48e:	2b10      	cmp	r3, #16
9000a490:	d006      	beq.n	9000a4a0 <lwip_netconn_do_close_internal+0x30>
9000a492:	4b66      	ldr	r3, [pc, #408]	; (9000a62c <lwip_netconn_do_close_internal+0x1bc>)
9000a494:	f240 32a3 	movw	r2, #931	; 0x3a3
9000a498:	4967      	ldr	r1, [pc, #412]	; (9000a638 <lwip_netconn_do_close_internal+0x1c8>)
9000a49a:	4866      	ldr	r0, [pc, #408]	; (9000a634 <lwip_netconn_do_close_internal+0x1c4>)
9000a49c:	f01f f818 	bl	900294d0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
9000a4a0:	7863      	ldrb	r3, [r4, #1]
9000a4a2:	2b04      	cmp	r3, #4
9000a4a4:	d006      	beq.n	9000a4b4 <lwip_netconn_do_close_internal+0x44>
9000a4a6:	4b61      	ldr	r3, [pc, #388]	; (9000a62c <lwip_netconn_do_close_internal+0x1bc>)
9000a4a8:	f44f 7269 	mov.w	r2, #932	; 0x3a4
9000a4ac:	4963      	ldr	r1, [pc, #396]	; (9000a63c <lwip_netconn_do_close_internal+0x1cc>)
9000a4ae:	4861      	ldr	r0, [pc, #388]	; (9000a634 <lwip_netconn_do_close_internal+0x1c4>)
9000a4b0:	f01f f80e 	bl	900294d0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
9000a4b4:	6863      	ldr	r3, [r4, #4]
9000a4b6:	b933      	cbnz	r3, 9000a4c6 <lwip_netconn_do_close_internal+0x56>
9000a4b8:	4b5c      	ldr	r3, [pc, #368]	; (9000a62c <lwip_netconn_do_close_internal+0x1bc>)
9000a4ba:	f240 32a5 	movw	r2, #933	; 0x3a5
9000a4be:	4960      	ldr	r1, [pc, #384]	; (9000a640 <lwip_netconn_do_close_internal+0x1d0>)
9000a4c0:	485c      	ldr	r0, [pc, #368]	; (9000a634 <lwip_netconn_do_close_internal+0x1c4>)
9000a4c2:	f01f f805 	bl	900294d0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
9000a4c6:	6a23      	ldr	r3, [r4, #32]
9000a4c8:	b933      	cbnz	r3, 9000a4d8 <lwip_netconn_do_close_internal+0x68>
9000a4ca:	4b58      	ldr	r3, [pc, #352]	; (9000a62c <lwip_netconn_do_close_internal+0x1bc>)
9000a4cc:	f240 32a6 	movw	r2, #934	; 0x3a6
9000a4d0:	495c      	ldr	r1, [pc, #368]	; (9000a644 <lwip_netconn_do_close_internal+0x1d4>)
9000a4d2:	4858      	ldr	r0, [pc, #352]	; (9000a634 <lwip_netconn_do_close_internal+0x1c4>)
9000a4d4:	f01e fffc 	bl	900294d0 <iprintf>
  shut = conn->current_msg->msg.sd.shut;
9000a4d8:	6a23      	ldr	r3, [r4, #32]
  tpcb = conn->pcb.tcp;
9000a4da:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
9000a4dc:	7a1b      	ldrb	r3, [r3, #8]
  if (shut == NETCONN_SHUT_RDWR) {
9000a4de:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
9000a4e0:	f003 0a01 	and.w	sl, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
9000a4e4:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
9000a4e8:	d00f      	beq.n	9000a50a <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_rx &&
9000a4ea:	f1ba 0f00 	cmp.w	sl, #0
9000a4ee:	d005      	beq.n	9000a4fc <lwip_netconn_do_close_internal+0x8c>
             ((tpcb->state == FIN_WAIT_1) ||
9000a4f0:	7d2b      	ldrb	r3, [r5, #20]
  } else if (shut_rx &&
9000a4f2:	1f5a      	subs	r2, r3, #5
9000a4f4:	2a01      	cmp	r2, #1
9000a4f6:	d908      	bls.n	9000a50a <lwip_netconn_do_close_internal+0x9a>
              (tpcb->state == FIN_WAIT_2) ||
9000a4f8:	2b08      	cmp	r3, #8
9000a4fa:	d006      	beq.n	9000a50a <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
9000a4fc:	f1b8 0f00 	cmp.w	r8, #0
9000a500:	d016      	beq.n	9000a530 <lwip_netconn_do_close_internal+0xc0>
9000a502:	8b6f      	ldrh	r7, [r5, #26]
9000a504:	f017 0710 	ands.w	r7, r7, #16
9000a508:	d004      	beq.n	9000a514 <lwip_netconn_do_close_internal+0xa4>
    tcp_arg(tpcb, NULL);
9000a50a:	2701      	movs	r7, #1
9000a50c:	2100      	movs	r1, #0
9000a50e:	4628      	mov	r0, r5
9000a510:	f005 fca6 	bl	9000fe60 <tcp_arg>
  if (tpcb->state == LISTEN) {
9000a514:	7d2b      	ldrb	r3, [r5, #20]
9000a516:	2b01      	cmp	r3, #1
9000a518:	d10c      	bne.n	9000a534 <lwip_netconn_do_close_internal+0xc4>
    tcp_accept(tpcb, NULL);
9000a51a:	2100      	movs	r1, #0
9000a51c:	4628      	mov	r0, r5
9000a51e:	f005 fceb 	bl	9000fef8 <tcp_accept>
  if (shut_close) {
9000a522:	bb27      	cbnz	r7, 9000a56e <lwip_netconn_do_close_internal+0xfe>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
9000a524:	4642      	mov	r2, r8
9000a526:	4651      	mov	r1, sl
9000a528:	4628      	mov	r0, r5
9000a52a:	f006 f8f9 	bl	90010720 <tcp_shutdown>
9000a52e:	e021      	b.n	9000a574 <lwip_netconn_do_close_internal+0x104>
    shut_close = 0;
9000a530:	4647      	mov	r7, r8
9000a532:	e7ef      	b.n	9000a514 <lwip_netconn_do_close_internal+0xa4>
    if (shut_rx) {
9000a534:	f1ba 0f00 	cmp.w	sl, #0
9000a538:	d007      	beq.n	9000a54a <lwip_netconn_do_close_internal+0xda>
      tcp_recv(tpcb, NULL);
9000a53a:	2100      	movs	r1, #0
9000a53c:	4628      	mov	r0, r5
9000a53e:	f005 fc93 	bl	9000fe68 <tcp_recv>
      tcp_accept(tpcb, NULL);
9000a542:	2100      	movs	r1, #0
9000a544:	4628      	mov	r0, r5
9000a546:	f005 fcd7 	bl	9000fef8 <tcp_accept>
    if (shut_tx) {
9000a54a:	f1b8 0f00 	cmp.w	r8, #0
9000a54e:	d003      	beq.n	9000a558 <lwip_netconn_do_close_internal+0xe8>
      tcp_sent(tpcb, NULL);
9000a550:	2100      	movs	r1, #0
9000a552:	4628      	mov	r0, r5
9000a554:	f005 fca0 	bl	9000fe98 <tcp_sent>
    if (shut_close) {
9000a558:	2f00      	cmp	r7, #0
9000a55a:	d0e3      	beq.n	9000a524 <lwip_netconn_do_close_internal+0xb4>
      tcp_poll(tpcb, NULL, 0);
9000a55c:	2200      	movs	r2, #0
9000a55e:	4628      	mov	r0, r5
9000a560:	4611      	mov	r1, r2
9000a562:	f005 fccf 	bl	9000ff04 <tcp_poll>
      tcp_err(tpcb, NULL);
9000a566:	2100      	movs	r1, #0
9000a568:	4628      	mov	r0, r5
9000a56a:	f005 fcad 	bl	9000fec8 <tcp_err>
      err = tcp_close(tpcb);
9000a56e:	4628      	mov	r0, r5
9000a570:	f006 f810 	bl	90010594 <tcp_close>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
9000a574:	4606      	mov	r6, r0
  if (err == ERR_OK) {
9000a576:	b160      	cbz	r0, 9000a592 <lwip_netconn_do_close_internal+0x122>
    if (err == ERR_MEM) {
9000a578:	1c43      	adds	r3, r0, #1
9000a57a:	d10a      	bne.n	9000a592 <lwip_netconn_do_close_internal+0x122>
      if (conn->current_msg->msg.sd.polls_left == 0) {
9000a57c:	6a23      	ldr	r3, [r4, #32]
9000a57e:	f893 b009 	ldrb.w	fp, [r3, #9]
9000a582:	f1bb 0f00 	cmp.w	fp, #0
9000a586:	d130      	bne.n	9000a5ea <lwip_netconn_do_close_internal+0x17a>
        if (shut_close) {
9000a588:	b11f      	cbz	r7, 9000a592 <lwip_netconn_do_close_internal+0x122>
          err = ERR_OK;
9000a58a:	465e      	mov	r6, fp
          tcp_abort(tpcb);
9000a58c:	4628      	mov	r0, r5
9000a58e:	f005 fe39 	bl	90010204 <tcp_abort>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
9000a592:	6a23      	ldr	r3, [r4, #32]
9000a594:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
9000a596:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
9000a598:	2300      	movs	r3, #0
9000a59a:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
9000a59c:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
9000a59e:	b9ce      	cbnz	r6, 9000a5d4 <lwip_netconn_do_close_internal+0x164>
      if (shut_close) {
9000a5a0:	b137      	cbz	r7, 9000a5b0 <lwip_netconn_do_close_internal+0x140>
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
9000a5a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
        conn->pcb.tcp = NULL;
9000a5a4:	6066      	str	r6, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
9000a5a6:	b11b      	cbz	r3, 9000a5b0 <lwip_netconn_do_close_internal+0x140>
9000a5a8:	4632      	mov	r2, r6
9000a5aa:	2104      	movs	r1, #4
9000a5ac:	4620      	mov	r0, r4
9000a5ae:	4798      	blx	r3
      if (shut_rx) {
9000a5b0:	f1ba 0f00 	cmp.w	sl, #0
9000a5b4:	d005      	beq.n	9000a5c2 <lwip_netconn_do_close_internal+0x152>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
9000a5b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a5b8:	b11b      	cbz	r3, 9000a5c2 <lwip_netconn_do_close_internal+0x152>
9000a5ba:	2200      	movs	r2, #0
9000a5bc:	4620      	mov	r0, r4
9000a5be:	4611      	mov	r1, r2
9000a5c0:	4798      	blx	r3
      if (shut_tx) {
9000a5c2:	f1b8 0f00 	cmp.w	r8, #0
9000a5c6:	d005      	beq.n	9000a5d4 <lwip_netconn_do_close_internal+0x164>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
9000a5c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a5ca:	b11b      	cbz	r3, 9000a5d4 <lwip_netconn_do_close_internal+0x164>
9000a5cc:	2200      	movs	r2, #0
9000a5ce:	2102      	movs	r1, #2
9000a5d0:	4620      	mov	r0, r4
9000a5d2:	4798      	blx	r3
    if (delayed)
9000a5d4:	f1b9 0f00 	cmp.w	r9, #0
9000a5d8:	d026      	beq.n	9000a628 <lwip_netconn_do_close_internal+0x1b8>
    return ERR_OK;
9000a5da:	2600      	movs	r6, #0
      sys_sem_signal(op_completed_sem);
9000a5dc:	f105 000c 	add.w	r0, r5, #12
9000a5e0:	f005 fa01 	bl	9000f9e6 <sys_sem_signal>
}
9000a5e4:	4630      	mov	r0, r6
9000a5e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
9000a5ea:	7d2b      	ldrb	r3, [r5, #20]
9000a5ec:	2b01      	cmp	r3, #1
9000a5ee:	d106      	bne.n	9000a5fe <lwip_netconn_do_close_internal+0x18e>
9000a5f0:	4b0e      	ldr	r3, [pc, #56]	; (9000a62c <lwip_netconn_do_close_internal+0x1bc>)
9000a5f2:	f240 4241 	movw	r2, #1089	; 0x441
9000a5f6:	4914      	ldr	r1, [pc, #80]	; (9000a648 <lwip_netconn_do_close_internal+0x1d8>)
9000a5f8:	480e      	ldr	r0, [pc, #56]	; (9000a634 <lwip_netconn_do_close_internal+0x1c4>)
9000a5fa:	f01e ff69 	bl	900294d0 <iprintf>
    if (shut_tx) {
9000a5fe:	f1b8 0f00 	cmp.w	r8, #0
9000a602:	d003      	beq.n	9000a60c <lwip_netconn_do_close_internal+0x19c>
      tcp_sent(tpcb, sent_tcp);
9000a604:	4911      	ldr	r1, [pc, #68]	; (9000a64c <lwip_netconn_do_close_internal+0x1dc>)
9000a606:	4628      	mov	r0, r5
9000a608:	f005 fc46 	bl	9000fe98 <tcp_sent>
    tcp_poll(tpcb, poll_tcp, 1);
9000a60c:	2201      	movs	r2, #1
9000a60e:	4628      	mov	r0, r5
9000a610:	490f      	ldr	r1, [pc, #60]	; (9000a650 <lwip_netconn_do_close_internal+0x1e0>)
9000a612:	f005 fc77 	bl	9000ff04 <tcp_poll>
    tcp_err(tpcb, err_tcp);
9000a616:	4628      	mov	r0, r5
9000a618:	490e      	ldr	r1, [pc, #56]	; (9000a654 <lwip_netconn_do_close_internal+0x1e4>)
9000a61a:	f005 fc55 	bl	9000fec8 <tcp_err>
    tcp_arg(tpcb, conn);
9000a61e:	4621      	mov	r1, r4
9000a620:	4628      	mov	r0, r5
9000a622:	f005 fc1d 	bl	9000fe60 <tcp_arg>
  return err;
9000a626:	e7dd      	b.n	9000a5e4 <lwip_netconn_do_close_internal+0x174>
    return ERR_OK;
9000a628:	464e      	mov	r6, r9
9000a62a:	e7db      	b.n	9000a5e4 <lwip_netconn_do_close_internal+0x174>
9000a62c:	9002b532 	.word	0x9002b532
9000a630:	9002b418 	.word	0x9002b418
9000a634:	9002a254 	.word	0x9002a254
9000a638:	9002b6d2 	.word	0x9002b6d2
9000a63c:	9002b6f0 	.word	0x9002b6f0
9000a640:	9002b714 	.word	0x9002b714
9000a644:	9002b610 	.word	0x9002b610
9000a648:	9002b727 	.word	0x9002b727
9000a64c:	9000a8e1 	.word	0x9000a8e1
9000a650:	9000a659 	.word	0x9000a659
9000a654:	9000a7a5 	.word	0x9000a7a5

9000a658 <poll_tcp>:
{
9000a658:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
9000a65a:	4604      	mov	r4, r0
9000a65c:	b930      	cbnz	r0, 9000a66c <poll_tcp+0x14>
9000a65e:	4b1a      	ldr	r3, [pc, #104]	; (9000a6c8 <poll_tcp+0x70>)
9000a660:	f44f 72b5 	mov.w	r2, #362	; 0x16a
9000a664:	4919      	ldr	r1, [pc, #100]	; (9000a6cc <poll_tcp+0x74>)
9000a666:	481a      	ldr	r0, [pc, #104]	; (9000a6d0 <poll_tcp+0x78>)
9000a668:	f01e ff32 	bl	900294d0 <iprintf>
  if (conn->state == NETCONN_WRITE) {
9000a66c:	7861      	ldrb	r1, [r4, #1]
9000a66e:	2901      	cmp	r1, #1
9000a670:	d11c      	bne.n	9000a6ac <poll_tcp+0x54>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
9000a672:	4620      	mov	r0, r4
9000a674:	f7ff fdd2 	bl	9000a21c <lwip_netconn_do_writemore>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
9000a678:	7f23      	ldrb	r3, [r4, #28]
9000a67a:	06da      	lsls	r2, r3, #27
9000a67c:	d514      	bpl.n	9000a6a8 <poll_tcp+0x50>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
9000a67e:	6862      	ldr	r2, [r4, #4]
9000a680:	b192      	cbz	r2, 9000a6a8 <poll_tcp+0x50>
9000a682:	f8b2 0064 	ldrh.w	r0, [r2, #100]	; 0x64
9000a686:	f240 3199 	movw	r1, #921	; 0x399
9000a68a:	4288      	cmp	r0, r1
9000a68c:	d90c      	bls.n	9000a6a8 <poll_tcp+0x50>
9000a68e:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
9000a692:	2a07      	cmp	r2, #7
9000a694:	d808      	bhi.n	9000a6a8 <poll_tcp+0x50>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
9000a696:	f023 0310 	bic.w	r3, r3, #16
9000a69a:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
9000a69c:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a69e:	b11b      	cbz	r3, 9000a6a8 <poll_tcp+0x50>
9000a6a0:	2200      	movs	r2, #0
9000a6a2:	2102      	movs	r1, #2
9000a6a4:	4620      	mov	r0, r4
9000a6a6:	4798      	blx	r3
}
9000a6a8:	2000      	movs	r0, #0
9000a6aa:	bd10      	pop	{r4, pc}
  } else if (conn->state == NETCONN_CLOSE) {
9000a6ac:	2904      	cmp	r1, #4
9000a6ae:	d1e3      	bne.n	9000a678 <poll_tcp+0x20>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
9000a6b0:	6a22      	ldr	r2, [r4, #32]
9000a6b2:	b11a      	cbz	r2, 9000a6bc <poll_tcp+0x64>
9000a6b4:	7a53      	ldrb	r3, [r2, #9]
9000a6b6:	b10b      	cbz	r3, 9000a6bc <poll_tcp+0x64>
      conn->current_msg->msg.sd.polls_left--;
9000a6b8:	3b01      	subs	r3, #1
9000a6ba:	7253      	strb	r3, [r2, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
9000a6bc:	2101      	movs	r1, #1
9000a6be:	4620      	mov	r0, r4
9000a6c0:	f7ff fed6 	bl	9000a470 <lwip_netconn_do_close_internal>
9000a6c4:	e7d8      	b.n	9000a678 <poll_tcp+0x20>
9000a6c6:	bf00      	nop
9000a6c8:	9002b532 	.word	0x9002b532
9000a6cc:	9002ceb2 	.word	0x9002ceb2
9000a6d0:	9002a254 	.word	0x9002a254

9000a6d4 <recv_tcp>:
{
9000a6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000a6d8:	4606      	mov	r6, r0
9000a6da:	4615      	mov	r5, r2
9000a6dc:	461c      	mov	r4, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
9000a6de:	460f      	mov	r7, r1
9000a6e0:	b931      	cbnz	r1, 9000a6f0 <recv_tcp+0x1c>
9000a6e2:	4b29      	ldr	r3, [pc, #164]	; (9000a788 <recv_tcp+0xb4>)
9000a6e4:	f44f 7296 	mov.w	r2, #300	; 0x12c
9000a6e8:	4928      	ldr	r1, [pc, #160]	; (9000a78c <recv_tcp+0xb8>)
9000a6ea:	4829      	ldr	r0, [pc, #164]	; (9000a790 <recv_tcp+0xbc>)
9000a6ec:	f01e fef0 	bl	900294d0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
9000a6f0:	bb4e      	cbnz	r6, 9000a746 <recv_tcp+0x72>
9000a6f2:	4b25      	ldr	r3, [pc, #148]	; (9000a788 <recv_tcp+0xb4>)
9000a6f4:	f240 122d 	movw	r2, #301	; 0x12d
9000a6f8:	4926      	ldr	r1, [pc, #152]	; (9000a794 <recv_tcp+0xc0>)
9000a6fa:	4825      	ldr	r0, [pc, #148]	; (9000a790 <recv_tcp+0xbc>)
9000a6fc:	f01e fee8 	bl	900294d0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
9000a700:	bb14      	cbnz	r4, 9000a748 <recv_tcp+0x74>
    return ERR_VAL;
9000a702:	f06f 0405 	mvn.w	r4, #5
}
9000a706:	4620      	mov	r0, r4
9000a708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tcp_recved(pcb, p->tot_len);
9000a70c:	4638      	mov	r0, r7
9000a70e:	8929      	ldrh	r1, [r5, #8]
9000a710:	f005 fb2e 	bl	9000fd70 <tcp_recved>
      pbuf_free(p);
9000a714:	4628      	mov	r0, r5
9000a716:	f004 f87d 	bl	9000e814 <pbuf_free>
9000a71a:	e7f4      	b.n	9000a706 <recv_tcp+0x32>
  if (p != NULL) {
9000a71c:	b16d      	cbz	r5, 9000a73a <recv_tcp+0x66>
    len = p->tot_len;
9000a71e:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
9000a720:	4629      	mov	r1, r5
9000a722:	4640      	mov	r0, r8
9000a724:	f005 f8f1 	bl	9000f90a <sys_mbox_trypost>
9000a728:	4604      	mov	r4, r0
9000a72a:	b948      	cbnz	r0, 9000a740 <recv_tcp+0x6c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
9000a72c:	6a73      	ldr	r3, [r6, #36]	; 0x24
9000a72e:	b343      	cbz	r3, 9000a782 <recv_tcp+0xae>
9000a730:	4601      	mov	r1, r0
9000a732:	463a      	mov	r2, r7
9000a734:	4630      	mov	r0, r6
9000a736:	4798      	blx	r3
9000a738:	e7e5      	b.n	9000a706 <recv_tcp+0x32>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
9000a73a:	4d17      	ldr	r5, [pc, #92]	; (9000a798 <recv_tcp+0xc4>)
    len = 0;
9000a73c:	2700      	movs	r7, #0
9000a73e:	e7ef      	b.n	9000a720 <recv_tcp+0x4c>
    return ERR_MEM;
9000a740:	f04f 34ff 	mov.w	r4, #4294967295
9000a744:	e7df      	b.n	9000a706 <recv_tcp+0x32>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
9000a746:	b144      	cbz	r4, 9000a75a <recv_tcp+0x86>
9000a748:	4b0f      	ldr	r3, [pc, #60]	; (9000a788 <recv_tcp+0xb4>)
9000a74a:	f44f 7297 	mov.w	r2, #302	; 0x12e
9000a74e:	4913      	ldr	r1, [pc, #76]	; (9000a79c <recv_tcp+0xc8>)
9000a750:	480f      	ldr	r0, [pc, #60]	; (9000a790 <recv_tcp+0xbc>)
9000a752:	f01e febd 	bl	900294d0 <iprintf>
  if (conn == NULL) {
9000a756:	2e00      	cmp	r6, #0
9000a758:	d0d3      	beq.n	9000a702 <recv_tcp+0x2e>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
9000a75a:	6873      	ldr	r3, [r6, #4]
9000a75c:	42bb      	cmp	r3, r7
9000a75e:	d006      	beq.n	9000a76e <recv_tcp+0x9a>
9000a760:	4b09      	ldr	r3, [pc, #36]	; (9000a788 <recv_tcp+0xb4>)
9000a762:	f240 1235 	movw	r2, #309	; 0x135
9000a766:	490e      	ldr	r1, [pc, #56]	; (9000a7a0 <recv_tcp+0xcc>)
9000a768:	4809      	ldr	r0, [pc, #36]	; (9000a790 <recv_tcp+0xbc>)
9000a76a:	f01e feb1 	bl	900294d0 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
9000a76e:	f106 0810 	add.w	r8, r6, #16
9000a772:	4640      	mov	r0, r8
9000a774:	f005 f901 	bl	9000f97a <sys_mbox_valid>
9000a778:	4604      	mov	r4, r0
9000a77a:	2800      	cmp	r0, #0
9000a77c:	d1ce      	bne.n	9000a71c <recv_tcp+0x48>
    if (p != NULL) {
9000a77e:	2d00      	cmp	r5, #0
9000a780:	d1c4      	bne.n	9000a70c <recv_tcp+0x38>
    return ERR_OK;
9000a782:	2400      	movs	r4, #0
9000a784:	e7bf      	b.n	9000a706 <recv_tcp+0x32>
9000a786:	bf00      	nop
9000a788:	9002b532 	.word	0x9002b532
9000a78c:	9002b74a 	.word	0x9002b74a
9000a790:	9002a254 	.word	0x9002a254
9000a794:	9002b76c 	.word	0x9002b76c
9000a798:	9002b96d 	.word	0x9002b96d
9000a79c:	9002b78b 	.word	0x9002b78b
9000a7a0:	9002b7a3 	.word	0x9002b7a3

9000a7a4 <err_tcp>:
{
9000a7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000a7a8:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
9000a7aa:	4604      	mov	r4, r0
9000a7ac:	b930      	cbnz	r0, 9000a7bc <err_tcp+0x18>
9000a7ae:	4b44      	ldr	r3, [pc, #272]	; (9000a8c0 <err_tcp+0x11c>)
9000a7b0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
9000a7b4:	4943      	ldr	r1, [pc, #268]	; (9000a8c4 <err_tcp+0x120>)
9000a7b6:	4844      	ldr	r0, [pc, #272]	; (9000a8c8 <err_tcp+0x124>)
9000a7b8:	f01e fe8a 	bl	900294d0 <iprintf>
  SYS_ARCH_PROTECT(lev);
9000a7bc:	f005 f956 	bl	9000fa6c <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
9000a7c0:	7f23      	ldrb	r3, [r4, #28]
  conn->pcb.tcp = NULL;
9000a7c2:	2600      	movs	r6, #0
  old_state = conn->state;
9000a7c4:	7867      	ldrb	r7, [r4, #1]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
9000a7c6:	f043 0301 	orr.w	r3, r3, #1
  conn->pending_err = err;
9000a7ca:	7225      	strb	r5, [r4, #8]
  conn->pcb.tcp = NULL;
9000a7cc:	6066      	str	r6, [r4, #4]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
9000a7ce:	7723      	strb	r3, [r4, #28]
  conn->state = NETCONN_NONE;
9000a7d0:	7066      	strb	r6, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
9000a7d2:	f005 f957 	bl	9000fa84 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
9000a7d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a7d8:	b11b      	cbz	r3, 9000a7e2 <err_tcp+0x3e>
9000a7da:	4632      	mov	r2, r6
9000a7dc:	2104      	movs	r1, #4
9000a7de:	4620      	mov	r0, r4
9000a7e0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
9000a7e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a7e4:	b11b      	cbz	r3, 9000a7ee <err_tcp+0x4a>
9000a7e6:	2200      	movs	r2, #0
9000a7e8:	4620      	mov	r0, r4
9000a7ea:	4611      	mov	r1, r2
9000a7ec:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
9000a7ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a7f0:	b11b      	cbz	r3, 9000a7fa <err_tcp+0x56>
9000a7f2:	2200      	movs	r2, #0
9000a7f4:	2102      	movs	r1, #2
9000a7f6:	4620      	mov	r0, r4
9000a7f8:	4798      	blx	r3
  switch (err) {
9000a7fa:	f105 030f 	add.w	r3, r5, #15
9000a7fe:	b2db      	uxtb	r3, r3
9000a800:	2b02      	cmp	r3, #2
9000a802:	d845      	bhi.n	9000a890 <err_tcp+0xec>
9000a804:	4a31      	ldr	r2, [pc, #196]	; (9000a8cc <err_tcp+0x128>)
9000a806:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
9000a80a:	f104 0810 	add.w	r8, r4, #16
9000a80e:	4640      	mov	r0, r8
9000a810:	f005 f8b3 	bl	9000f97a <sys_mbox_valid>
9000a814:	b118      	cbz	r0, 9000a81e <err_tcp+0x7a>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
9000a816:	4631      	mov	r1, r6
9000a818:	4640      	mov	r0, r8
9000a81a:	f005 f876 	bl	9000f90a <sys_mbox_trypost>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
9000a81e:	f104 0814 	add.w	r8, r4, #20
9000a822:	4640      	mov	r0, r8
9000a824:	f005 f8a9 	bl	9000f97a <sys_mbox_valid>
9000a828:	b118      	cbz	r0, 9000a832 <err_tcp+0x8e>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
9000a82a:	4631      	mov	r1, r6
9000a82c:	4640      	mov	r0, r8
9000a82e:	f005 f86c 	bl	9000f90a <sys_mbox_trypost>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
9000a832:	2f01      	cmp	r7, #1
9000a834:	d002      	beq.n	9000a83c <err_tcp+0x98>
9000a836:	1efb      	subs	r3, r7, #3
9000a838:	2b01      	cmp	r3, #1
9000a83a:	d834      	bhi.n	9000a8a6 <err_tcp+0x102>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
9000a83c:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
9000a83e:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
9000a842:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
9000a844:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
9000a846:	d439      	bmi.n	9000a8bc <err_tcp+0x118>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
9000a848:	6a23      	ldr	r3, [r4, #32]
9000a84a:	b933      	cbnz	r3, 9000a85a <err_tcp+0xb6>
9000a84c:	4b1c      	ldr	r3, [pc, #112]	; (9000a8c0 <err_tcp+0x11c>)
9000a84e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
9000a852:	491f      	ldr	r1, [pc, #124]	; (9000a8d0 <err_tcp+0x12c>)
9000a854:	481c      	ldr	r0, [pc, #112]	; (9000a8c8 <err_tcp+0x124>)
9000a856:	f01e fe3b 	bl	900294d0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
9000a85a:	2f04      	cmp	r7, #4
        conn->current_msg->err = ERR_OK;
9000a85c:	6a23      	ldr	r3, [r4, #32]
        conn->current_msg->err = err;
9000a85e:	bf14      	ite	ne
9000a860:	711d      	strbne	r5, [r3, #4]
        conn->current_msg->err = ERR_OK;
9000a862:	2200      	moveq	r2, #0
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
9000a864:	681d      	ldr	r5, [r3, #0]
        conn->current_msg->err = ERR_OK;
9000a866:	bf08      	it	eq
9000a868:	711a      	strbeq	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
9000a86a:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
9000a86c:	4628      	mov	r0, r5
9000a86e:	f005 f8c0 	bl	9000f9f2 <sys_sem_valid>
9000a872:	b930      	cbnz	r0, 9000a882 <err_tcp+0xde>
9000a874:	4b12      	ldr	r3, [pc, #72]	; (9000a8c0 <err_tcp+0x11c>)
9000a876:	f240 12ef 	movw	r2, #495	; 0x1ef
9000a87a:	4916      	ldr	r1, [pc, #88]	; (9000a8d4 <err_tcp+0x130>)
9000a87c:	4812      	ldr	r0, [pc, #72]	; (9000a8c8 <err_tcp+0x124>)
9000a87e:	f01e fe27 	bl	900294d0 <iprintf>
      conn->current_msg = NULL;
9000a882:	2300      	movs	r3, #0
      sys_sem_signal(op_completed_sem);
9000a884:	4628      	mov	r0, r5
      conn->current_msg = NULL;
9000a886:	6223      	str	r3, [r4, #32]
}
9000a888:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
9000a88c:	f005 b8ab 	b.w	9000f9e6 <sys_sem_signal>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
9000a890:	b13d      	cbz	r5, 9000a8a2 <err_tcp+0xfe>
9000a892:	4b0b      	ldr	r3, [pc, #44]	; (9000a8c0 <err_tcp+0x11c>)
9000a894:	227d      	movs	r2, #125	; 0x7d
9000a896:	4910      	ldr	r1, [pc, #64]	; (9000a8d8 <err_tcp+0x134>)
9000a898:	2600      	movs	r6, #0
9000a89a:	480b      	ldr	r0, [pc, #44]	; (9000a8c8 <err_tcp+0x124>)
9000a89c:	f01e fe18 	bl	900294d0 <iprintf>
9000a8a0:	e7b3      	b.n	9000a80a <err_tcp+0x66>
      return NULL;
9000a8a2:	462e      	mov	r6, r5
9000a8a4:	e7b1      	b.n	9000a80a <err_tcp+0x66>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
9000a8a6:	6a23      	ldr	r3, [r4, #32]
9000a8a8:	b143      	cbz	r3, 9000a8bc <err_tcp+0x118>
9000a8aa:	4b05      	ldr	r3, [pc, #20]	; (9000a8c0 <err_tcp+0x11c>)
9000a8ac:	f240 12f7 	movw	r2, #503	; 0x1f7
9000a8b0:	490a      	ldr	r1, [pc, #40]	; (9000a8dc <err_tcp+0x138>)
9000a8b2:	4805      	ldr	r0, [pc, #20]	; (9000a8c8 <err_tcp+0x124>)
}
9000a8b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
9000a8b8:	f01e be0a 	b.w	900294d0 <iprintf>
}
9000a8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000a8c0:	9002b532 	.word	0x9002b532
9000a8c4:	9002ceb2 	.word	0x9002ceb2
9000a8c8:	9002a254 	.word	0x9002a254
9000a8cc:	9002b960 	.word	0x9002b960
9000a8d0:	9002b610 	.word	0x9002b610
9000a8d4:	9002b7d1 	.word	0x9002b7d1
9000a8d8:	9002b7c1 	.word	0x9002b7c1
9000a8dc:	9002b7ea 	.word	0x9002b7ea

9000a8e0 <sent_tcp>:
{
9000a8e0:	b538      	push	{r3, r4, r5, lr}
9000a8e2:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
9000a8e4:	4604      	mov	r4, r0
9000a8e6:	b970      	cbnz	r0, 9000a906 <sent_tcp+0x26>
9000a8e8:	4b16      	ldr	r3, [pc, #88]	; (9000a944 <sent_tcp+0x64>)
9000a8ea:	f240 1293 	movw	r2, #403	; 0x193
9000a8ee:	4916      	ldr	r1, [pc, #88]	; (9000a948 <sent_tcp+0x68>)
9000a8f0:	4816      	ldr	r0, [pc, #88]	; (9000a94c <sent_tcp+0x6c>)
9000a8f2:	f01e fded 	bl	900294d0 <iprintf>
}
9000a8f6:	2000      	movs	r0, #0
9000a8f8:	bd38      	pop	{r3, r4, r5, pc}
    } else if (conn->state == NETCONN_CLOSE) {
9000a8fa:	2904      	cmp	r1, #4
9000a8fc:	d108      	bne.n	9000a910 <sent_tcp+0x30>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
9000a8fe:	2101      	movs	r1, #1
9000a900:	f7ff fdb6 	bl	9000a470 <lwip_netconn_do_close_internal>
9000a904:	e004      	b.n	9000a910 <sent_tcp+0x30>
    if (conn->state == NETCONN_WRITE) {
9000a906:	7841      	ldrb	r1, [r0, #1]
9000a908:	2901      	cmp	r1, #1
9000a90a:	d1f6      	bne.n	9000a8fa <sent_tcp+0x1a>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
9000a90c:	f7ff fc86 	bl	9000a21c <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
9000a910:	6863      	ldr	r3, [r4, #4]
9000a912:	2b00      	cmp	r3, #0
9000a914:	d0ef      	beq.n	9000a8f6 <sent_tcp+0x16>
9000a916:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
9000a91a:	f240 3299 	movw	r2, #921	; 0x399
9000a91e:	4291      	cmp	r1, r2
9000a920:	d9e9      	bls.n	9000a8f6 <sent_tcp+0x16>
9000a922:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000a926:	2b07      	cmp	r3, #7
9000a928:	d8e5      	bhi.n	9000a8f6 <sent_tcp+0x16>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
9000a92a:	7f23      	ldrb	r3, [r4, #28]
9000a92c:	f023 0310 	bic.w	r3, r3, #16
9000a930:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
9000a932:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a934:	2b00      	cmp	r3, #0
9000a936:	d0de      	beq.n	9000a8f6 <sent_tcp+0x16>
9000a938:	462a      	mov	r2, r5
9000a93a:	2102      	movs	r1, #2
9000a93c:	4620      	mov	r0, r4
9000a93e:	4798      	blx	r3
  return ERR_OK;
9000a940:	e7d9      	b.n	9000a8f6 <sent_tcp+0x16>
9000a942:	bf00      	nop
9000a944:	9002b532 	.word	0x9002b532
9000a948:	9002ceb2 	.word	0x9002ceb2
9000a94c:	9002a254 	.word	0x9002a254

9000a950 <lwip_netconn_is_err_msg>:
{
9000a950:	b538      	push	{r3, r4, r5, lr}
9000a952:	4605      	mov	r5, r0
  LWIP_ASSERT("err != NULL", err != NULL);
9000a954:	460c      	mov	r4, r1
9000a956:	b929      	cbnz	r1, 9000a964 <lwip_netconn_is_err_msg+0x14>
9000a958:	4b0c      	ldr	r3, [pc, #48]	; (9000a98c <lwip_netconn_is_err_msg+0x3c>)
9000a95a:	2285      	movs	r2, #133	; 0x85
9000a95c:	490c      	ldr	r1, [pc, #48]	; (9000a990 <lwip_netconn_is_err_msg+0x40>)
9000a95e:	480d      	ldr	r0, [pc, #52]	; (9000a994 <lwip_netconn_is_err_msg+0x44>)
9000a960:	f01e fdb6 	bl	900294d0 <iprintf>
  if (msg == &netconn_aborted) {
9000a964:	4b0c      	ldr	r3, [pc, #48]	; (9000a998 <lwip_netconn_is_err_msg+0x48>)
9000a966:	429d      	cmp	r5, r3
9000a968:	d103      	bne.n	9000a972 <lwip_netconn_is_err_msg+0x22>
    *err = ERR_ABRT;
9000a96a:	23f3      	movs	r3, #243	; 0xf3
    return 1;
9000a96c:	2001      	movs	r0, #1
    *err = ERR_CLSD;
9000a96e:	7023      	strb	r3, [r4, #0]
}
9000a970:	bd38      	pop	{r3, r4, r5, pc}
  } else if (msg == &netconn_reset) {
9000a972:	4b0a      	ldr	r3, [pc, #40]	; (9000a99c <lwip_netconn_is_err_msg+0x4c>)
9000a974:	429d      	cmp	r5, r3
9000a976:	d101      	bne.n	9000a97c <lwip_netconn_is_err_msg+0x2c>
    *err = ERR_RST;
9000a978:	23f2      	movs	r3, #242	; 0xf2
9000a97a:	e7f7      	b.n	9000a96c <lwip_netconn_is_err_msg+0x1c>
  } else if (msg == &netconn_closed) {
9000a97c:	4b08      	ldr	r3, [pc, #32]	; (9000a9a0 <lwip_netconn_is_err_msg+0x50>)
9000a97e:	429d      	cmp	r5, r3
9000a980:	d101      	bne.n	9000a986 <lwip_netconn_is_err_msg+0x36>
    *err = ERR_CLSD;
9000a982:	23f1      	movs	r3, #241	; 0xf1
9000a984:	e7f2      	b.n	9000a96c <lwip_netconn_is_err_msg+0x1c>
  return 0;
9000a986:	2000      	movs	r0, #0
9000a988:	e7f2      	b.n	9000a970 <lwip_netconn_is_err_msg+0x20>
9000a98a:	bf00      	nop
9000a98c:	9002b532 	.word	0x9002b532
9000a990:	9002b804 	.word	0x9002b804
9000a994:	9002a254 	.word	0x9002a254
9000a998:	9002b96c 	.word	0x9002b96c
9000a99c:	9002b96e 	.word	0x9002b96e
9000a9a0:	9002b96d 	.word	0x9002b96d

9000a9a4 <lwip_netconn_do_newconn>:
{
9000a9a4:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
9000a9a6:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
9000a9a8:	6805      	ldr	r5, [r0, #0]
{
9000a9aa:	4604      	mov	r4, r0
  msg->err = ERR_OK;
9000a9ac:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
9000a9ae:	6868      	ldr	r0, [r5, #4]
9000a9b0:	bb28      	cbnz	r0, 9000a9fe <lwip_netconn_do_newconn+0x5a>
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
9000a9b2:	782b      	ldrb	r3, [r5, #0]
9000a9b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000a9b8:	2b10      	cmp	r3, #16
9000a9ba:	d014      	beq.n	9000a9e6 <lwip_netconn_do_newconn+0x42>
9000a9bc:	2b20      	cmp	r3, #32
9000a9be:	d11c      	bne.n	9000a9fa <lwip_netconn_do_newconn+0x56>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
9000a9c0:	f009 fa40 	bl	90013e44 <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
9000a9c4:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
9000a9c6:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
9000a9c8:	6850      	ldr	r0, [r2, #4]
9000a9ca:	b150      	cbz	r0, 9000a9e2 <lwip_netconn_do_newconn+0x3e>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
9000a9cc:	7813      	ldrb	r3, [r2, #0]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
9000a9ce:	490c      	ldr	r1, [pc, #48]	; (9000aa00 <lwip_netconn_do_newconn+0x5c>)
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
9000a9d0:	2b22      	cmp	r3, #34	; 0x22
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
9000a9d2:	bf04      	itt	eq
9000a9d4:	2301      	moveq	r3, #1
9000a9d6:	7403      	strbeq	r3, [r0, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
9000a9d8:	f009 f9ee 	bl	90013db8 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
9000a9dc:	6823      	ldr	r3, [r4, #0]
9000a9de:	685b      	ldr	r3, [r3, #4]
9000a9e0:	b96b      	cbnz	r3, 9000a9fe <lwip_netconn_do_newconn+0x5a>
    msg->err = ERR_MEM;
9000a9e2:	23ff      	movs	r3, #255	; 0xff
9000a9e4:	e00a      	b.n	9000a9fc <lwip_netconn_do_newconn+0x58>
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
9000a9e6:	f005 fd1f 	bl	90010428 <tcp_new_ip_type>
9000a9ea:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
9000a9ec:	6820      	ldr	r0, [r4, #0]
9000a9ee:	6843      	ldr	r3, [r0, #4]
9000a9f0:	2b00      	cmp	r3, #0
9000a9f2:	d0f6      	beq.n	9000a9e2 <lwip_netconn_do_newconn+0x3e>
        setup_tcp(msg->conn);
9000a9f4:	f7ff fbf0 	bl	9000a1d8 <setup_tcp>
9000a9f8:	e7f0      	b.n	9000a9dc <lwip_netconn_do_newconn+0x38>
      msg->err = ERR_VAL;
9000a9fa:	23fa      	movs	r3, #250	; 0xfa
    msg->err = ERR_MEM;
9000a9fc:	7123      	strb	r3, [r4, #4]
}
9000a9fe:	bd38      	pop	{r3, r4, r5, pc}
9000aa00:	9000a11d 	.word	0x9000a11d

9000aa04 <netconn_alloc>:
{
9000aa04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000aa06:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
9000aa08:	2007      	movs	r0, #7
{
9000aa0a:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
9000aa0c:	f003 fbfc 	bl	9000e208 <memp_malloc>
  if (conn == NULL) {
9000aa10:	4604      	mov	r4, r0
9000aa12:	b3a0      	cbz	r0, 9000aa7e <netconn_alloc+0x7a>
  conn->type = t;
9000aa14:	7005      	strb	r5, [r0, #0]
9000aa16:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
  conn->pending_err = ERR_OK;
9000aa1a:	2300      	movs	r3, #0
  switch (NETCONNTYPE_GROUP(t)) {
9000aa1c:	2d10      	cmp	r5, #16
  conn->pending_err = ERR_OK;
9000aa1e:	7203      	strb	r3, [r0, #8]
  conn->pcb.tcp = NULL;
9000aa20:	6043      	str	r3, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
9000aa22:	d00e      	beq.n	9000aa42 <netconn_alloc+0x3e>
9000aa24:	2d20      	cmp	r5, #32
9000aa26:	d00c      	beq.n	9000aa42 <netconn_alloc+0x3e>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
9000aa28:	4b16      	ldr	r3, [pc, #88]	; (9000aa84 <netconn_alloc+0x80>)
9000aa2a:	f240 22e5 	movw	r2, #741	; 0x2e5
9000aa2e:	4916      	ldr	r1, [pc, #88]	; (9000aa88 <netconn_alloc+0x84>)
9000aa30:	4816      	ldr	r0, [pc, #88]	; (9000aa8c <netconn_alloc+0x88>)
9000aa32:	f01e fd4d 	bl	900294d0 <iprintf>
  memp_free(MEMP_NETCONN, conn);
9000aa36:	4621      	mov	r1, r4
9000aa38:	2007      	movs	r0, #7
  return NULL;
9000aa3a:	2400      	movs	r4, #0
  memp_free(MEMP_NETCONN, conn);
9000aa3c:	f003 fc00 	bl	9000e240 <memp_free>
  return NULL;
9000aa40:	e01d      	b.n	9000aa7e <netconn_alloc+0x7a>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
9000aa42:	f104 0710 	add.w	r7, r4, #16
9000aa46:	2106      	movs	r1, #6
9000aa48:	4638      	mov	r0, r7
9000aa4a:	f004 ff47 	bl	9000f8dc <sys_mbox_new>
9000aa4e:	4601      	mov	r1, r0
9000aa50:	2800      	cmp	r0, #0
9000aa52:	d1f0      	bne.n	9000aa36 <netconn_alloc+0x32>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
9000aa54:	f104 000c 	add.w	r0, r4, #12
9000aa58:	f004 ff97 	bl	9000f98a <sys_sem_new>
9000aa5c:	4605      	mov	r5, r0
9000aa5e:	b118      	cbz	r0, 9000aa68 <netconn_alloc+0x64>
    sys_mbox_free(&conn->recvmbox);
9000aa60:	4638      	mov	r0, r7
9000aa62:	f004 ff48 	bl	9000f8f6 <sys_mbox_free>
    goto free_and_return;
9000aa66:	e7e6      	b.n	9000aa36 <netconn_alloc+0x32>
  sys_mbox_set_invalid(&conn->acceptmbox);
9000aa68:	f104 0014 	add.w	r0, r4, #20
9000aa6c:	f004 ff8a 	bl	9000f984 <sys_mbox_set_invalid>
  conn->socket       = -1;
9000aa70:	f04f 33ff 	mov.w	r3, #4294967295
  conn->state        = NETCONN_NONE;
9000aa74:	7065      	strb	r5, [r4, #1]
  conn->socket       = -1;
9000aa76:	61a3      	str	r3, [r4, #24]
  conn->flags = init_flags;
9000aa78:	7725      	strb	r5, [r4, #28]
  conn->current_msg  = NULL;
9000aa7a:	e9c4 5608 	strd	r5, r6, [r4, #32]
}
9000aa7e:	4620      	mov	r0, r4
9000aa80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000aa82:	bf00      	nop
9000aa84:	9002b532 	.word	0x9002b532
9000aa88:	9002b810 	.word	0x9002b810
9000aa8c:	9002a254 	.word	0x9002a254

9000aa90 <netconn_free>:
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
9000aa90:	6843      	ldr	r3, [r0, #4]
{
9000aa92:	b513      	push	{r0, r1, r4, lr}
9000aa94:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
9000aa96:	b133      	cbz	r3, 9000aaa6 <netconn_free+0x16>
9000aa98:	4b16      	ldr	r3, [pc, #88]	; (9000aaf4 <netconn_free+0x64>)
9000aa9a:	f44f 7247 	mov.w	r2, #796	; 0x31c
9000aa9e:	4916      	ldr	r1, [pc, #88]	; (9000aaf8 <netconn_free+0x68>)
9000aaa0:	4816      	ldr	r0, [pc, #88]	; (9000aafc <netconn_free+0x6c>)
9000aaa2:	f01e fd15 	bl	900294d0 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
9000aaa6:	f104 0010 	add.w	r0, r4, #16
9000aaaa:	f004 ff66 	bl	9000f97a <sys_mbox_valid>
9000aaae:	b130      	cbz	r0, 9000aabe <netconn_free+0x2e>
9000aab0:	4b10      	ldr	r3, [pc, #64]	; (9000aaf4 <netconn_free+0x64>)
9000aab2:	f240 3223 	movw	r2, #803	; 0x323
9000aab6:	4912      	ldr	r1, [pc, #72]	; (9000ab00 <netconn_free+0x70>)
9000aab8:	4810      	ldr	r0, [pc, #64]	; (9000aafc <netconn_free+0x6c>)
9000aaba:	f01e fd09 	bl	900294d0 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
9000aabe:	f104 0014 	add.w	r0, r4, #20
9000aac2:	f004 ff5a 	bl	9000f97a <sys_mbox_valid>
9000aac6:	b130      	cbz	r0, 9000aad6 <netconn_free+0x46>
9000aac8:	4b0a      	ldr	r3, [pc, #40]	; (9000aaf4 <netconn_free+0x64>)
9000aaca:	f240 3226 	movw	r2, #806	; 0x326
9000aace:	490d      	ldr	r1, [pc, #52]	; (9000ab04 <netconn_free+0x74>)
9000aad0:	480a      	ldr	r0, [pc, #40]	; (9000aafc <netconn_free+0x6c>)
9000aad2:	f01e fcfd 	bl	900294d0 <iprintf>
  sys_sem_free(&conn->op_completed);
9000aad6:	f104 000c 	add.w	r0, r4, #12
9000aada:	9001      	str	r0, [sp, #4]
9000aadc:	f004 ff86 	bl	9000f9ec <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
9000aae0:	9801      	ldr	r0, [sp, #4]
9000aae2:	f004 ff8b 	bl	9000f9fc <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
9000aae6:	4621      	mov	r1, r4
9000aae8:	2007      	movs	r0, #7
}
9000aaea:	b002      	add	sp, #8
9000aaec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_NETCONN, conn);
9000aaf0:	f003 bba6 	b.w	9000e240 <memp_free>
9000aaf4:	9002b532 	.word	0x9002b532
9000aaf8:	9002b836 	.word	0x9002b836
9000aafc:	9002a254 	.word	0x9002a254
9000ab00:	9002b864 	.word	0x9002b864
9000ab04:	9002b89e 	.word	0x9002b89e

9000ab08 <netconn_drain>:
{
9000ab08:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
9000ab0a:	f100 0510 	add.w	r5, r0, #16
{
9000ab0e:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
9000ab10:	4628      	mov	r0, r5
9000ab12:	f004 ff32 	bl	9000f97a <sys_mbox_valid>
9000ab16:	b158      	cbz	r0, 9000ab30 <netconn_drain+0x28>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
9000ab18:	a901      	add	r1, sp, #4
9000ab1a:	4628      	mov	r0, r5
9000ab1c:	f004 ff22 	bl	9000f964 <sys_arch_mbox_tryfetch>
9000ab20:	3001      	adds	r0, #1
9000ab22:	d118      	bne.n	9000ab56 <netconn_drain+0x4e>
    sys_mbox_free(&conn->recvmbox);
9000ab24:	4628      	mov	r0, r5
9000ab26:	f004 fee6 	bl	9000f8f6 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
9000ab2a:	4628      	mov	r0, r5
9000ab2c:	f004 ff2a 	bl	9000f984 <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
9000ab30:	3414      	adds	r4, #20
9000ab32:	4620      	mov	r0, r4
9000ab34:	f004 ff21 	bl	9000f97a <sys_mbox_valid>
9000ab38:	b158      	cbz	r0, 9000ab52 <netconn_drain+0x4a>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
9000ab3a:	a901      	add	r1, sp, #4
9000ab3c:	4620      	mov	r0, r4
9000ab3e:	f004 ff11 	bl	9000f964 <sys_arch_mbox_tryfetch>
9000ab42:	3001      	adds	r0, #1
9000ab44:	d11a      	bne.n	9000ab7c <netconn_drain+0x74>
    sys_mbox_free(&conn->acceptmbox);
9000ab46:	4620      	mov	r0, r4
9000ab48:	f004 fed5 	bl	9000f8f6 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
9000ab4c:	4620      	mov	r0, r4
9000ab4e:	f004 ff19 	bl	9000f984 <sys_mbox_set_invalid>
}
9000ab52:	b002      	add	sp, #8
9000ab54:	bd70      	pop	{r4, r5, r6, pc}
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
9000ab56:	7823      	ldrb	r3, [r4, #0]
9000ab58:	9801      	ldr	r0, [sp, #4]
9000ab5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000ab5e:	2b10      	cmp	r3, #16
9000ab60:	d109      	bne.n	9000ab76 <netconn_drain+0x6e>
          if (!lwip_netconn_is_err_msg(mem, &err)) {
9000ab62:	f10d 0103 	add.w	r1, sp, #3
9000ab66:	f7ff fef3 	bl	9000a950 <lwip_netconn_is_err_msg>
9000ab6a:	2800      	cmp	r0, #0
9000ab6c:	d1d4      	bne.n	9000ab18 <netconn_drain+0x10>
            pbuf_free((struct pbuf *)mem);
9000ab6e:	9801      	ldr	r0, [sp, #4]
9000ab70:	f003 fe50 	bl	9000e814 <pbuf_free>
9000ab74:	e7d0      	b.n	9000ab18 <netconn_drain+0x10>
          netbuf_delete((struct netbuf *)mem);
9000ab76:	f003 fb7d 	bl	9000e274 <netbuf_delete>
9000ab7a:	e7cd      	b.n	9000ab18 <netconn_drain+0x10>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
9000ab7c:	f10d 0103 	add.w	r1, sp, #3
9000ab80:	9801      	ldr	r0, [sp, #4]
9000ab82:	f7ff fee5 	bl	9000a950 <lwip_netconn_is_err_msg>
9000ab86:	4606      	mov	r6, r0
9000ab88:	2800      	cmp	r0, #0
9000ab8a:	d1d6      	bne.n	9000ab3a <netconn_drain+0x32>
          struct netconn *newconn = (struct netconn *)mem;
9000ab8c:	9d01      	ldr	r5, [sp, #4]
          netconn_drain(newconn);
9000ab8e:	4628      	mov	r0, r5
9000ab90:	f7ff ffba 	bl	9000ab08 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
9000ab94:	6868      	ldr	r0, [r5, #4]
9000ab96:	b110      	cbz	r0, 9000ab9e <netconn_drain+0x96>
            tcp_abort(newconn->pcb.tcp);
9000ab98:	f005 fb34 	bl	90010204 <tcp_abort>
            newconn->pcb.tcp = NULL;
9000ab9c:	606e      	str	r6, [r5, #4]
          netconn_free(newconn);
9000ab9e:	4628      	mov	r0, r5
9000aba0:	f7ff ff76 	bl	9000aa90 <netconn_free>
9000aba4:	e7c9      	b.n	9000ab3a <netconn_drain+0x32>
	...

9000aba8 <accept_function>:
{
9000aba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
9000abaa:	460f      	mov	r7, r1
9000abac:	4616      	mov	r6, r2
  if (conn == NULL) {
9000abae:	4605      	mov	r5, r0
9000abb0:	b920      	cbnz	r0, 9000abbc <accept_function+0x14>
    return ERR_VAL;
9000abb2:	f06f 0405 	mvn.w	r4, #5
}
9000abb6:	4620      	mov	r0, r4
9000abb8:	b003      	add	sp, #12
9000abba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
9000abbc:	f100 0414 	add.w	r4, r0, #20
9000abc0:	4620      	mov	r0, r4
9000abc2:	f004 feda 	bl	9000f97a <sys_mbox_valid>
9000abc6:	2800      	cmp	r0, #0
9000abc8:	d0f3      	beq.n	9000abb2 <accept_function+0xa>
  if (newpcb == NULL) {
9000abca:	b96f      	cbnz	r7, 9000abe8 <accept_function+0x40>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
9000abcc:	492f      	ldr	r1, [pc, #188]	; (9000ac8c <accept_function+0xe4>)
9000abce:	4620      	mov	r0, r4
9000abd0:	f004 fe9b 	bl	9000f90a <sys_mbox_trypost>
9000abd4:	4602      	mov	r2, r0
9000abd6:	2800      	cmp	r0, #0
9000abd8:	d1eb      	bne.n	9000abb2 <accept_function+0xa>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
9000abda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
9000abdc:	2b00      	cmp	r3, #0
9000abde:	d0e8      	beq.n	9000abb2 <accept_function+0xa>
9000abe0:	4601      	mov	r1, r0
9000abe2:	4628      	mov	r0, r5
9000abe4:	4798      	blx	r3
9000abe6:	e7e4      	b.n	9000abb2 <accept_function+0xa>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
9000abe8:	b136      	cbz	r6, 9000abf8 <accept_function+0x50>
9000abea:	4b29      	ldr	r3, [pc, #164]	; (9000ac90 <accept_function+0xe8>)
9000abec:	f240 222a 	movw	r2, #554	; 0x22a
9000abf0:	4928      	ldr	r1, [pc, #160]	; (9000ac94 <accept_function+0xec>)
9000abf2:	4829      	ldr	r0, [pc, #164]	; (9000ac98 <accept_function+0xf0>)
9000abf4:	f01e fc6c 	bl	900294d0 <iprintf>
  newconn = netconn_alloc(conn->type, conn->callback);
9000abf8:	6a69      	ldr	r1, [r5, #36]	; 0x24
9000abfa:	7828      	ldrb	r0, [r5, #0]
9000abfc:	f7ff ff02 	bl	9000aa04 <netconn_alloc>
  if (newconn == NULL) {
9000ac00:	4606      	mov	r6, r0
9000ac02:	b968      	cbnz	r0, 9000ac20 <accept_function+0x78>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
9000ac04:	4921      	ldr	r1, [pc, #132]	; (9000ac8c <accept_function+0xe4>)
9000ac06:	4620      	mov	r0, r4
9000ac08:	f004 fe7f 	bl	9000f90a <sys_mbox_trypost>
9000ac0c:	4602      	mov	r2, r0
9000ac0e:	b920      	cbnz	r0, 9000ac1a <accept_function+0x72>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
9000ac10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
9000ac12:	b113      	cbz	r3, 9000ac1a <accept_function+0x72>
9000ac14:	4601      	mov	r1, r0
9000ac16:	4628      	mov	r0, r5
9000ac18:	4798      	blx	r3
    return ERR_MEM;
9000ac1a:	f04f 34ff 	mov.w	r4, #4294967295
9000ac1e:	e7ca      	b.n	9000abb6 <accept_function+0xe>
  newconn->pcb.tcp = newpcb;
9000ac20:	6047      	str	r7, [r0, #4]
  setup_tcp(newconn);
9000ac22:	f7ff fad9 	bl	9000a1d8 <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
9000ac26:	4620      	mov	r0, r4
9000ac28:	4631      	mov	r1, r6
9000ac2a:	f004 fe6e 	bl	9000f90a <sys_mbox_trypost>
9000ac2e:	4604      	mov	r4, r0
9000ac30:	b318      	cbz	r0, 9000ac7a <accept_function+0xd2>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
9000ac32:	6870      	ldr	r0, [r6, #4]
    tcp_arg(pcb, NULL);
9000ac34:	2100      	movs	r1, #0
9000ac36:	9001      	str	r0, [sp, #4]
9000ac38:	f005 f912 	bl	9000fe60 <tcp_arg>
    tcp_recv(pcb, NULL);
9000ac3c:	9801      	ldr	r0, [sp, #4]
9000ac3e:	2100      	movs	r1, #0
9000ac40:	f005 f912 	bl	9000fe68 <tcp_recv>
    tcp_sent(pcb, NULL);
9000ac44:	9801      	ldr	r0, [sp, #4]
9000ac46:	2100      	movs	r1, #0
9000ac48:	f005 f926 	bl	9000fe98 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
9000ac4c:	2200      	movs	r2, #0
9000ac4e:	9801      	ldr	r0, [sp, #4]
9000ac50:	4611      	mov	r1, r2
9000ac52:	f005 f957 	bl	9000ff04 <tcp_poll>
    tcp_err(pcb, NULL);
9000ac56:	2100      	movs	r1, #0
9000ac58:	9801      	ldr	r0, [sp, #4]
9000ac5a:	f005 f935 	bl	9000fec8 <tcp_err>
    newconn->pcb.tcp = NULL;
9000ac5e:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
9000ac60:	f106 0010 	add.w	r0, r6, #16
    newconn->pcb.tcp = NULL;
9000ac64:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
9000ac66:	9001      	str	r0, [sp, #4]
9000ac68:	f004 fe45 	bl	9000f8f6 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
9000ac6c:	9801      	ldr	r0, [sp, #4]
9000ac6e:	f004 fe89 	bl	9000f984 <sys_mbox_set_invalid>
    netconn_free(newconn);
9000ac72:	4630      	mov	r0, r6
9000ac74:	f7ff ff0c 	bl	9000aa90 <netconn_free>
    return ERR_MEM;
9000ac78:	e7cf      	b.n	9000ac1a <accept_function+0x72>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
9000ac7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
9000ac7c:	2b00      	cmp	r3, #0
9000ac7e:	d09a      	beq.n	9000abb6 <accept_function+0xe>
9000ac80:	4602      	mov	r2, r0
9000ac82:	4601      	mov	r1, r0
9000ac84:	4628      	mov	r0, r5
9000ac86:	4798      	blx	r3
9000ac88:	e795      	b.n	9000abb6 <accept_function+0xe>
9000ac8a:	bf00      	nop
9000ac8c:	9002b96c 	.word	0x9002b96c
9000ac90:	9002b532 	.word	0x9002b532
9000ac94:	9002b8da 	.word	0x9002b8da
9000ac98:	9002a254 	.word	0x9002a254

9000ac9c <lwip_netconn_do_delconn>:
  enum netconn_state state = msg->conn->state;
9000ac9c:	6803      	ldr	r3, [r0, #0]
{
9000ac9e:	b570      	push	{r4, r5, r6, lr}
  enum netconn_state state = msg->conn->state;
9000aca0:	785d      	ldrb	r5, [r3, #1]
{
9000aca2:	4604      	mov	r4, r0
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
9000aca4:	b16d      	cbz	r5, 9000acc2 <lwip_netconn_do_delconn+0x26>
9000aca6:	781b      	ldrb	r3, [r3, #0]
9000aca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000acac:	2b10      	cmp	r3, #16
9000acae:	d006      	beq.n	9000acbe <lwip_netconn_do_delconn+0x22>
9000acb0:	4b37      	ldr	r3, [pc, #220]	; (9000ad90 <lwip_netconn_do_delconn+0xf4>)
9000acb2:	f240 425e 	movw	r2, #1118	; 0x45e
9000acb6:	4937      	ldr	r1, [pc, #220]	; (9000ad94 <lwip_netconn_do_delconn+0xf8>)
9000acb8:	4837      	ldr	r0, [pc, #220]	; (9000ad98 <lwip_netconn_do_delconn+0xfc>)
9000acba:	f01e fc09 	bl	900294d0 <iprintf>
  if (((state != NETCONN_NONE) &&
9000acbe:	2d02      	cmp	r5, #2
9000acc0:	d121      	bne.n	9000ad06 <lwip_netconn_do_delconn+0x6a>
    msg->err = ERR_OK;
9000acc2:	2500      	movs	r5, #0
    netconn_drain(msg->conn);
9000acc4:	6820      	ldr	r0, [r4, #0]
    msg->err = ERR_OK;
9000acc6:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
9000acc8:	f7ff ff1e 	bl	9000ab08 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
9000accc:	6822      	ldr	r2, [r4, #0]
9000acce:	6850      	ldr	r0, [r2, #4]
9000acd0:	b160      	cbz	r0, 9000acec <lwip_netconn_do_delconn+0x50>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
9000acd2:	7813      	ldrb	r3, [r2, #0]
9000acd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000acd8:	2b10      	cmp	r3, #16
9000acda:	d022      	beq.n	9000ad22 <lwip_netconn_do_delconn+0x86>
9000acdc:	2b20      	cmp	r3, #32
9000acde:	d102      	bne.n	9000ace6 <lwip_netconn_do_delconn+0x4a>
          msg->conn->pcb.udp->recv_arg = NULL;
9000ace0:	61c5      	str	r5, [r0, #28]
          udp_remove(msg->conn->pcb.udp);
9000ace2:	f009 f87b 	bl	90013ddc <udp_remove>
      msg->conn->pcb.tcp = NULL;
9000ace6:	6823      	ldr	r3, [r4, #0]
9000ace8:	2200      	movs	r2, #0
9000acea:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
9000acec:	6820      	ldr	r0, [r4, #0]
9000acee:	6a43      	ldr	r3, [r0, #36]	; 0x24
9000acf0:	b113      	cbz	r3, 9000acf8 <lwip_netconn_do_delconn+0x5c>
9000acf2:	2200      	movs	r2, #0
9000acf4:	4611      	mov	r1, r2
9000acf6:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
9000acf8:	6820      	ldr	r0, [r4, #0]
9000acfa:	6a43      	ldr	r3, [r0, #36]	; 0x24
9000acfc:	b15b      	cbz	r3, 9000ad16 <lwip_netconn_do_delconn+0x7a>
9000acfe:	2200      	movs	r2, #0
9000ad00:	2102      	movs	r1, #2
9000ad02:	4798      	blx	r3
9000ad04:	e007      	b.n	9000ad16 <lwip_netconn_do_delconn+0x7a>
       (state != NETCONN_LISTEN) &&
9000ad06:	2d03      	cmp	r5, #3
9000ad08:	d103      	bne.n	9000ad12 <lwip_netconn_do_delconn+0x76>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
9000ad0a:	6823      	ldr	r3, [r4, #0]
9000ad0c:	7f1b      	ldrb	r3, [r3, #28]
9000ad0e:	075b      	lsls	r3, r3, #29
9000ad10:	d4d7      	bmi.n	9000acc2 <lwip_netconn_do_delconn+0x26>
    msg->err = ERR_INPROGRESS;
9000ad12:	23fb      	movs	r3, #251	; 0xfb
9000ad14:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
9000ad16:	6820      	ldr	r0, [r4, #0]
}
9000ad18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
9000ad1c:	300c      	adds	r0, #12
9000ad1e:	f004 be68 	b.w	9000f9f2 <sys_sem_valid>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
9000ad22:	6a13      	ldr	r3, [r2, #32]
9000ad24:	b133      	cbz	r3, 9000ad34 <lwip_netconn_do_delconn+0x98>
9000ad26:	4b1a      	ldr	r3, [pc, #104]	; (9000ad90 <lwip_netconn_do_delconn+0xf4>)
9000ad28:	f240 4294 	movw	r2, #1172	; 0x494
9000ad2c:	491b      	ldr	r1, [pc, #108]	; (9000ad9c <lwip_netconn_do_delconn+0x100>)
9000ad2e:	481a      	ldr	r0, [pc, #104]	; (9000ad98 <lwip_netconn_do_delconn+0xfc>)
9000ad30:	f01e fbce 	bl	900294d0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
9000ad34:	6820      	ldr	r0, [r4, #0]
9000ad36:	2304      	movs	r3, #4
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
9000ad38:	2100      	movs	r1, #0
          msg->conn->state = NETCONN_CLOSE;
9000ad3a:	7043      	strb	r3, [r0, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
9000ad3c:	2303      	movs	r3, #3
9000ad3e:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
9000ad40:	6204      	str	r4, [r0, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
9000ad42:	f7ff fb95 	bl	9000a470 <lwip_netconn_do_close_internal>
9000ad46:	b308      	cbz	r0, 9000ad8c <lwip_netconn_do_delconn+0xf0>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
9000ad48:	6823      	ldr	r3, [r4, #0]
9000ad4a:	785b      	ldrb	r3, [r3, #1]
9000ad4c:	2b04      	cmp	r3, #4
9000ad4e:	d006      	beq.n	9000ad5e <lwip_netconn_do_delconn+0xc2>
9000ad50:	4b0f      	ldr	r3, [pc, #60]	; (9000ad90 <lwip_netconn_do_delconn+0xf4>)
9000ad52:	f240 429a 	movw	r2, #1178	; 0x49a
9000ad56:	4912      	ldr	r1, [pc, #72]	; (9000ada0 <lwip_netconn_do_delconn+0x104>)
9000ad58:	480f      	ldr	r0, [pc, #60]	; (9000ad98 <lwip_netconn_do_delconn+0xfc>)
9000ad5a:	f01e fbb9 	bl	900294d0 <iprintf>
            UNLOCK_TCPIP_CORE();
9000ad5e:	4811      	ldr	r0, [pc, #68]	; (9000ada4 <lwip_netconn_do_delconn+0x108>)
9000ad60:	f004 fe6a 	bl	9000fa38 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
9000ad64:	6820      	ldr	r0, [r4, #0]
9000ad66:	2100      	movs	r1, #0
9000ad68:	300c      	adds	r0, #12
9000ad6a:	f004 fe21 	bl	9000f9b0 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
9000ad6e:	480d      	ldr	r0, [pc, #52]	; (9000ada4 <lwip_netconn_do_delconn+0x108>)
9000ad70:	f004 fe5d 	bl	9000fa2e <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
9000ad74:	6823      	ldr	r3, [r4, #0]
9000ad76:	785b      	ldrb	r3, [r3, #1]
9000ad78:	b143      	cbz	r3, 9000ad8c <lwip_netconn_do_delconn+0xf0>
9000ad7a:	4b05      	ldr	r3, [pc, #20]	; (9000ad90 <lwip_netconn_do_delconn+0xf4>)
9000ad7c:	f240 429e 	movw	r2, #1182	; 0x49e
9000ad80:	4907      	ldr	r1, [pc, #28]	; (9000ada0 <lwip_netconn_do_delconn+0x104>)
9000ad82:	4805      	ldr	r0, [pc, #20]	; (9000ad98 <lwip_netconn_do_delconn+0xfc>)
}
9000ad84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
9000ad88:	f01e bba2 	b.w	900294d0 <iprintf>
}
9000ad8c:	bd70      	pop	{r4, r5, r6, pc}
9000ad8e:	bf00      	nop
9000ad90:	9002b532 	.word	0x9002b532
9000ad94:	9002b901 	.word	0x9002b901
9000ad98:	9002a254 	.word	0x9002a254
9000ad9c:	9002b915 	.word	0x9002b915
9000ada0:	9002b930 	.word	0x9002b930
9000ada4:	2002cb84 	.word	0x2002cb84

9000ada8 <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
9000ada8:	6803      	ldr	r3, [r0, #0]
{
9000adaa:	b510      	push	{r4, lr}
9000adac:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
9000adae:	6858      	ldr	r0, [r3, #4]
9000adb0:	b188      	cbz	r0, 9000add6 <lwip_netconn_do_bind+0x2e>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
9000adb2:	781b      	ldrb	r3, [r3, #0]
9000adb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000adb8:	2b10      	cmp	r3, #16
9000adba:	d007      	beq.n	9000adcc <lwip_netconn_do_bind+0x24>
9000adbc:	2b20      	cmp	r3, #32
9000adbe:	d10a      	bne.n	9000add6 <lwip_netconn_do_bind+0x2e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
9000adc0:	89a2      	ldrh	r2, [r4, #12]
9000adc2:	68a1      	ldr	r1, [r4, #8]
9000adc4:	f008 fe1e 	bl	90013a04 <udp_bind>
  msg->err = err;
9000adc8:	7120      	strb	r0, [r4, #4]
}
9000adca:	bd10      	pop	{r4, pc}
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
9000adcc:	89a2      	ldrh	r2, [r4, #12]
9000adce:	68a1      	ldr	r1, [r4, #8]
9000add0:	f004 fedc 	bl	9000fb8c <tcp_bind>
        break;
9000add4:	e7f8      	b.n	9000adc8 <lwip_netconn_do_bind+0x20>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
9000add6:	f06f 0005 	mvn.w	r0, #5
9000adda:	e7f5      	b.n	9000adc8 <lwip_netconn_do_bind+0x20>

9000addc <lwip_netconn_do_listen>:
  if (msg->conn->pcb.tcp != NULL) {
9000addc:	6803      	ldr	r3, [r0, #0]
{
9000adde:	b537      	push	{r0, r1, r2, r4, r5, lr}
9000ade0:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
9000ade2:	6858      	ldr	r0, [r3, #4]
9000ade4:	2800      	cmp	r0, #0
9000ade6:	d04f      	beq.n	9000ae88 <lwip_netconn_do_listen+0xac>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
9000ade8:	781a      	ldrb	r2, [r3, #0]
9000adea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
9000adee:	2a10      	cmp	r2, #16
9000adf0:	d14c      	bne.n	9000ae8c <lwip_netconn_do_listen+0xb0>
      if (msg->conn->state == NETCONN_NONE) {
9000adf2:	785b      	ldrb	r3, [r3, #1]
9000adf4:	2b00      	cmp	r3, #0
9000adf6:	d143      	bne.n	9000ae80 <lwip_netconn_do_listen+0xa4>
        if (msg->conn->pcb.tcp->state != CLOSED) {
9000adf8:	7d03      	ldrb	r3, [r0, #20]
9000adfa:	b11b      	cbz	r3, 9000ae04 <lwip_netconn_do_listen+0x28>
          err = ERR_VAL;
9000adfc:	23fa      	movs	r3, #250	; 0xfa
      err = ERR_ARG;
9000adfe:	f88d 3007 	strb.w	r3, [sp, #7]
9000ae02:	e031      	b.n	9000ae68 <lwip_netconn_do_listen+0x8c>
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
9000ae04:	f10d 0207 	add.w	r2, sp, #7
9000ae08:	21ff      	movs	r1, #255	; 0xff
9000ae0a:	f004 ff15 	bl	9000fc38 <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
9000ae0e:	4605      	mov	r5, r0
9000ae10:	b350      	cbz	r0, 9000ae68 <lwip_netconn_do_listen+0x8c>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
9000ae12:	6820      	ldr	r0, [r4, #0]
9000ae14:	3010      	adds	r0, #16
9000ae16:	f004 fdb0 	bl	9000f97a <sys_mbox_valid>
9000ae1a:	b138      	cbz	r0, 9000ae2c <lwip_netconn_do_listen+0x50>
              sys_mbox_free(&msg->conn->recvmbox);
9000ae1c:	6820      	ldr	r0, [r4, #0]
9000ae1e:	3010      	adds	r0, #16
9000ae20:	f004 fd69 	bl	9000f8f6 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
9000ae24:	6820      	ldr	r0, [r4, #0]
9000ae26:	3010      	adds	r0, #16
9000ae28:	f004 fdac 	bl	9000f984 <sys_mbox_set_invalid>
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
9000ae2c:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
9000ae2e:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
9000ae30:	3014      	adds	r0, #20
            err = ERR_OK;
9000ae32:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
9000ae36:	f004 fda0 	bl	9000f97a <sys_mbox_valid>
9000ae3a:	b930      	cbnz	r0, 9000ae4a <lwip_netconn_do_listen+0x6e>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
9000ae3c:	6820      	ldr	r0, [r4, #0]
9000ae3e:	2106      	movs	r1, #6
9000ae40:	3014      	adds	r0, #20
9000ae42:	f004 fd4b 	bl	9000f8dc <sys_mbox_new>
9000ae46:	f88d 0007 	strb.w	r0, [sp, #7]
            if (err == ERR_OK) {
9000ae4a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
9000ae4e:	b983      	cbnz	r3, 9000ae72 <lwip_netconn_do_listen+0x96>
              msg->conn->state = NETCONN_LISTEN;
9000ae50:	6821      	ldr	r1, [r4, #0]
9000ae52:	2302      	movs	r3, #2
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
9000ae54:	4628      	mov	r0, r5
              msg->conn->state = NETCONN_LISTEN;
9000ae56:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
9000ae58:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
9000ae5a:	f005 f801 	bl	9000fe60 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
9000ae5e:	6823      	ldr	r3, [r4, #0]
9000ae60:	490b      	ldr	r1, [pc, #44]	; (9000ae90 <lwip_netconn_do_listen+0xb4>)
9000ae62:	6858      	ldr	r0, [r3, #4]
9000ae64:	f005 f848 	bl	9000fef8 <tcp_accept>
  msg->err = err;
9000ae68:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000ae6c:	7123      	strb	r3, [r4, #4]
}
9000ae6e:	b003      	add	sp, #12
9000ae70:	bd30      	pop	{r4, r5, pc}
              tcp_close(lpcb);
9000ae72:	4628      	mov	r0, r5
9000ae74:	f005 fb8e 	bl	90010594 <tcp_close>
              msg->conn->pcb.tcp = NULL;
9000ae78:	6823      	ldr	r3, [r4, #0]
9000ae7a:	2200      	movs	r2, #0
9000ae7c:	605a      	str	r2, [r3, #4]
9000ae7e:	e7f3      	b.n	9000ae68 <lwip_netconn_do_listen+0x8c>
      } else if (msg->conn->state == NETCONN_LISTEN) {
9000ae80:	2b02      	cmp	r3, #2
9000ae82:	d101      	bne.n	9000ae88 <lwip_netconn_do_listen+0xac>
        err = ERR_OK;
9000ae84:	2300      	movs	r3, #0
9000ae86:	e7ba      	b.n	9000adfe <lwip_netconn_do_listen+0x22>
        err = ERR_CONN;
9000ae88:	23f5      	movs	r3, #245	; 0xf5
9000ae8a:	e7b8      	b.n	9000adfe <lwip_netconn_do_listen+0x22>
      err = ERR_ARG;
9000ae8c:	23f0      	movs	r3, #240	; 0xf0
9000ae8e:	e7b6      	b.n	9000adfe <lwip_netconn_do_listen+0x22>
9000ae90:	9000aba9 	.word	0x9000aba9

9000ae94 <lwip_netconn_do_send>:
{
9000ae94:	b510      	push	{r4, lr}
9000ae96:	4604      	mov	r4, r0
  err_t err = netconn_err(msg->conn);
9000ae98:	6800      	ldr	r0, [r0, #0]
9000ae9a:	f7fe ffc7 	bl	90009e2c <netconn_err>
  if (err == ERR_OK) {
9000ae9e:	b968      	cbnz	r0, 9000aebc <lwip_netconn_do_send+0x28>
    if (msg->conn->pcb.tcp != NULL) {
9000aea0:	6823      	ldr	r3, [r4, #0]
9000aea2:	6858      	ldr	r0, [r3, #4]
9000aea4:	b188      	cbz	r0, 9000aeca <lwip_netconn_do_send+0x36>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
9000aea6:	781b      	ldrb	r3, [r3, #0]
9000aea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000aeac:	2b20      	cmp	r3, #32
9000aeae:	d10c      	bne.n	9000aeca <lwip_netconn_do_send+0x36>
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
9000aeb0:	68a2      	ldr	r2, [r4, #8]
9000aeb2:	6893      	ldr	r3, [r2, #8]
9000aeb4:	6811      	ldr	r1, [r2, #0]
9000aeb6:	b91b      	cbnz	r3, 9000aec0 <lwip_netconn_do_send+0x2c>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
9000aeb8:	f008 ff20 	bl	90013cfc <udp_send>
  msg->err = err;
9000aebc:	7120      	strb	r0, [r4, #4]
}
9000aebe:	bd10      	pop	{r4, pc}
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
9000aec0:	8993      	ldrh	r3, [r2, #12]
9000aec2:	3208      	adds	r2, #8
9000aec4:	f008 fede 	bl	90013c84 <udp_sendto>
9000aec8:	e7f8      	b.n	9000aebc <lwip_netconn_do_send+0x28>
      err = ERR_CONN;
9000aeca:	f06f 000a 	mvn.w	r0, #10
9000aece:	e7f5      	b.n	9000aebc <lwip_netconn_do_send+0x28>

9000aed0 <lwip_netconn_do_recv>:
{
9000aed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
9000aed2:	2300      	movs	r3, #0
{
9000aed4:	4604      	mov	r4, r0
  msg->err = ERR_OK;
9000aed6:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
9000aed8:	6803      	ldr	r3, [r0, #0]
9000aeda:	685a      	ldr	r2, [r3, #4]
9000aedc:	b192      	cbz	r2, 9000af04 <lwip_netconn_do_recv+0x34>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
9000aede:	781b      	ldrb	r3, [r3, #0]
9000aee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000aee4:	2b10      	cmp	r3, #16
9000aee6:	d10d      	bne.n	9000af04 <lwip_netconn_do_recv+0x34>
      size_t remaining = msg->msg.r.len;
9000aee8:	6885      	ldr	r5, [r0, #8]
9000aeea:	f64f 77ff 	movw	r7, #65535	; 0xffff
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
9000aeee:	42bd      	cmp	r5, r7
9000aef0:	462e      	mov	r6, r5
        tcp_recved(msg->conn->pcb.tcp, recved);
9000aef2:	6823      	ldr	r3, [r4, #0]
9000aef4:	bf28      	it	cs
9000aef6:	463e      	movcs	r6, r7
9000aef8:	6858      	ldr	r0, [r3, #4]
9000aefa:	b2b1      	uxth	r1, r6
9000aefc:	f004 ff38 	bl	9000fd70 <tcp_recved>
      } while (remaining != 0);
9000af00:	1bad      	subs	r5, r5, r6
9000af02:	d1f4      	bne.n	9000aeee <lwip_netconn_do_recv+0x1e>
}
9000af04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9000af08 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
9000af08:	b510      	push	{r4, lr}
9000af0a:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
9000af0c:	6800      	ldr	r0, [r0, #0]
9000af0e:	f7fe ff8d 	bl	90009e2c <netconn_err>
  if (err == ERR_OK) {
9000af12:	2800      	cmp	r0, #0
9000af14:	d14a      	bne.n	9000afac <lwip_netconn_do_write+0xa4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
9000af16:	6823      	ldr	r3, [r4, #0]
9000af18:	781a      	ldrb	r2, [r3, #0]
9000af1a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
9000af1e:	2a10      	cmp	r2, #16
9000af20:	d142      	bne.n	9000afa8 <lwip_netconn_do_write+0xa0>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
9000af22:	785a      	ldrb	r2, [r3, #1]
9000af24:	2a00      	cmp	r2, #0
9000af26:	d143      	bne.n	9000afb0 <lwip_netconn_do_write+0xa8>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
      } else if (msg->conn->pcb.tcp != NULL) {
9000af28:	685a      	ldr	r2, [r3, #4]
9000af2a:	2a00      	cmp	r2, #0
9000af2c:	d043      	beq.n	9000afb6 <lwip_netconn_do_write+0xae>
        msg->conn->state = NETCONN_WRITE;
9000af2e:	2201      	movs	r2, #1
9000af30:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
9000af32:	6a1b      	ldr	r3, [r3, #32]
9000af34:	b133      	cbz	r3, 9000af44 <lwip_netconn_do_write+0x3c>
9000af36:	4b21      	ldr	r3, [pc, #132]	; (9000afbc <lwip_netconn_do_write+0xb4>)
9000af38:	f240 7223 	movw	r2, #1827	; 0x723
9000af3c:	4920      	ldr	r1, [pc, #128]	; (9000afc0 <lwip_netconn_do_write+0xb8>)
9000af3e:	4821      	ldr	r0, [pc, #132]	; (9000afc4 <lwip_netconn_do_write+0xbc>)
9000af40:	f01e fac6 	bl	900294d0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
9000af44:	6963      	ldr	r3, [r4, #20]
9000af46:	b933      	cbnz	r3, 9000af56 <lwip_netconn_do_write+0x4e>
9000af48:	4b1c      	ldr	r3, [pc, #112]	; (9000afbc <lwip_netconn_do_write+0xb4>)
9000af4a:	f240 7224 	movw	r2, #1828	; 0x724
9000af4e:	491e      	ldr	r1, [pc, #120]	; (9000afc8 <lwip_netconn_do_write+0xc0>)
9000af50:	481c      	ldr	r0, [pc, #112]	; (9000afc4 <lwip_netconn_do_write+0xbc>)
9000af52:	f01e fabd 	bl	900294d0 <iprintf>
        msg->conn->current_msg = msg;
9000af56:	6820      	ldr	r0, [r4, #0]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
9000af58:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
9000af5a:	6204      	str	r4, [r0, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
9000af5c:	f7ff f95e 	bl	9000a21c <lwip_netconn_do_writemore>
9000af60:	b328      	cbz	r0, 9000afae <lwip_netconn_do_write+0xa6>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
9000af62:	6823      	ldr	r3, [r4, #0]
9000af64:	785b      	ldrb	r3, [r3, #1]
9000af66:	2b01      	cmp	r3, #1
9000af68:	d006      	beq.n	9000af78 <lwip_netconn_do_write+0x70>
9000af6a:	4b14      	ldr	r3, [pc, #80]	; (9000afbc <lwip_netconn_do_write+0xb4>)
9000af6c:	f44f 62e5 	mov.w	r2, #1832	; 0x728
9000af70:	4916      	ldr	r1, [pc, #88]	; (9000afcc <lwip_netconn_do_write+0xc4>)
9000af72:	4814      	ldr	r0, [pc, #80]	; (9000afc4 <lwip_netconn_do_write+0xbc>)
9000af74:	f01e faac 	bl	900294d0 <iprintf>
          UNLOCK_TCPIP_CORE();
9000af78:	4815      	ldr	r0, [pc, #84]	; (9000afd0 <lwip_netconn_do_write+0xc8>)
9000af7a:	f004 fd5d 	bl	9000fa38 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
9000af7e:	6820      	ldr	r0, [r4, #0]
9000af80:	2100      	movs	r1, #0
9000af82:	300c      	adds	r0, #12
9000af84:	f004 fd14 	bl	9000f9b0 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
9000af88:	4811      	ldr	r0, [pc, #68]	; (9000afd0 <lwip_netconn_do_write+0xc8>)
9000af8a:	f004 fd50 	bl	9000fa2e <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
9000af8e:	6823      	ldr	r3, [r4, #0]
9000af90:	785b      	ldrb	r3, [r3, #1]
9000af92:	2b01      	cmp	r3, #1
9000af94:	d10b      	bne.n	9000afae <lwip_netconn_do_write+0xa6>
9000af96:	4b09      	ldr	r3, [pc, #36]	; (9000afbc <lwip_netconn_do_write+0xb4>)
9000af98:	f240 722c 	movw	r2, #1836	; 0x72c
9000af9c:	490b      	ldr	r1, [pc, #44]	; (9000afcc <lwip_netconn_do_write+0xc4>)
9000af9e:	4809      	ldr	r0, [pc, #36]	; (9000afc4 <lwip_netconn_do_write+0xbc>)
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
  TCPIP_APIMSG_ACK(msg);
}
9000afa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
9000afa4:	f01e ba94 	b.w	900294d0 <iprintf>
      err = ERR_VAL;
9000afa8:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
9000afac:	7120      	strb	r0, [r4, #4]
}
9000afae:	bd10      	pop	{r4, pc}
        err = ERR_INPROGRESS;
9000afb0:	f06f 0004 	mvn.w	r0, #4
9000afb4:	e7fa      	b.n	9000afac <lwip_netconn_do_write+0xa4>
        err = ERR_CONN;
9000afb6:	f06f 000a 	mvn.w	r0, #10
9000afba:	e7f7      	b.n	9000afac <lwip_netconn_do_write+0xa4>
9000afbc:	9002b532 	.word	0x9002b532
9000afc0:	9002b915 	.word	0x9002b915
9000afc4:	9002a254 	.word	0x9002a254
9000afc8:	9002b937 	.word	0x9002b937
9000afcc:	9002b930 	.word	0x9002b930
9000afd0:	2002cb84 	.word	0x2002cb84

9000afd4 <lwip_netconn_do_getaddr>:
void
lwip_netconn_do_getaddr(void *m)
{
  struct api_msg *msg = (struct api_msg *)m;

  if (msg->conn->pcb.ip != NULL) {
9000afd4:	6802      	ldr	r2, [r0, #0]
9000afd6:	6853      	ldr	r3, [r2, #4]
{
9000afd8:	b430      	push	{r4, r5}
  if (msg->conn->pcb.ip != NULL) {
9000afda:	b1bb      	cbz	r3, 9000b00c <lwip_netconn_do_getaddr+0x38>
    if (msg->msg.ad.local) {
9000afdc:	7c01      	ldrb	r1, [r0, #16]
9000afde:	6884      	ldr	r4, [r0, #8]
9000afe0:	b179      	cbz	r1, 9000b002 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
9000afe2:	681d      	ldr	r5, [r3, #0]
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
9000afe4:	6025      	str	r5, [r4, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
9000afe6:	2400      	movs	r4, #0
9000afe8:	7104      	strb	r4, [r0, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
9000afea:	7812      	ldrb	r2, [r2, #0]
9000afec:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
9000aff0:	2a10      	cmp	r2, #16
9000aff2:	d012      	beq.n	9000b01a <lwip_netconn_do_getaddr+0x46>
9000aff4:	2a20      	cmp	r2, #32
9000aff6:	d119      	bne.n	9000b02c <lwip_netconn_do_getaddr+0x58>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
9000aff8:	b129      	cbz	r1, 9000b006 <lwip_netconn_do_getaddr+0x32>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
9000affa:	68c2      	ldr	r2, [r0, #12]
9000affc:	8a5b      	ldrh	r3, [r3, #18]
        if ((msg->msg.ad.local == 0) &&
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
9000affe:	8013      	strh	r3, [r2, #0]
9000b000:	e006      	b.n	9000b010 <lwip_netconn_do_getaddr+0x3c>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
9000b002:	685d      	ldr	r5, [r3, #4]
9000b004:	e7ee      	b.n	9000afe4 <lwip_netconn_do_getaddr+0x10>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
9000b006:	7c1a      	ldrb	r2, [r3, #16]
9000b008:	0752      	lsls	r2, r2, #29
9000b00a:	d403      	bmi.n	9000b014 <lwip_netconn_do_getaddr+0x40>
            msg->err = ERR_CONN;
9000b00c:	23f5      	movs	r3, #245	; 0xf5
9000b00e:	7103      	strb	r3, [r0, #4]
    }
  } else {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
9000b010:	bc30      	pop	{r4, r5}
9000b012:	4770      	bx	lr
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
9000b014:	68c2      	ldr	r2, [r0, #12]
9000b016:	8a9b      	ldrh	r3, [r3, #20]
9000b018:	e7f1      	b.n	9000affe <lwip_netconn_do_getaddr+0x2a>
        if ((msg->msg.ad.local == 0) &&
9000b01a:	b921      	cbnz	r1, 9000b026 <lwip_netconn_do_getaddr+0x52>
9000b01c:	7d1a      	ldrb	r2, [r3, #20]
9000b01e:	2a01      	cmp	r2, #1
9000b020:	d9f4      	bls.n	9000b00c <lwip_netconn_do_getaddr+0x38>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
9000b022:	8b1b      	ldrh	r3, [r3, #24]
9000b024:	e000      	b.n	9000b028 <lwip_netconn_do_getaddr+0x54>
9000b026:	8adb      	ldrh	r3, [r3, #22]
9000b028:	68c2      	ldr	r2, [r0, #12]
9000b02a:	e7e8      	b.n	9000affe <lwip_netconn_do_getaddr+0x2a>
        LWIP_ASSERT("invalid netconn_type", 0);
9000b02c:	4b03      	ldr	r3, [pc, #12]	; (9000b03c <lwip_netconn_do_getaddr+0x68>)
9000b02e:	f240 727d 	movw	r2, #1917	; 0x77d
9000b032:	4903      	ldr	r1, [pc, #12]	; (9000b040 <lwip_netconn_do_getaddr+0x6c>)
9000b034:	4803      	ldr	r0, [pc, #12]	; (9000b044 <lwip_netconn_do_getaddr+0x70>)
}
9000b036:	bc30      	pop	{r4, r5}
        LWIP_ASSERT("invalid netconn_type", 0);
9000b038:	f01e ba4a 	b.w	900294d0 <iprintf>
9000b03c:	9002b532 	.word	0x9002b532
9000b040:	9002b94b 	.word	0x9002b94b
9000b044:	9002a254 	.word	0x9002a254

9000b048 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
9000b048:	b510      	push	{r4, lr}
9000b04a:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
9000b04c:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
9000b04e:	6843      	ldr	r3, [r0, #4]
9000b050:	b163      	cbz	r3, 9000b06c <lwip_netconn_do_close+0x24>
9000b052:	7803      	ldrb	r3, [r0, #0]
9000b054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000b058:	2b10      	cmp	r3, #16
9000b05a:	d107      	bne.n	9000b06c <lwip_netconn_do_close+0x24>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
9000b05c:	7a22      	ldrb	r2, [r4, #8]
  enum netconn_state state = msg->conn->state;
9000b05e:	7843      	ldrb	r3, [r0, #1]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
9000b060:	2a03      	cmp	r2, #3
9000b062:	d001      	beq.n	9000b068 <lwip_netconn_do_close+0x20>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
9000b064:	2b02      	cmp	r3, #2
9000b066:	d001      	beq.n	9000b06c <lwip_netconn_do_close+0x24>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
9000b068:	2b03      	cmp	r3, #3
9000b06a:	d102      	bne.n	9000b072 <lwip_netconn_do_close+0x2a>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
9000b06c:	23f5      	movs	r3, #245	; 0xf5
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
9000b06e:	7123      	strb	r3, [r4, #4]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
9000b070:	bd10      	pop	{r4, pc}
    } else if (state == NETCONN_WRITE) {
9000b072:	2b01      	cmp	r3, #1
9000b074:	d101      	bne.n	9000b07a <lwip_netconn_do_close+0x32>
      msg->err = ERR_INPROGRESS;
9000b076:	23fb      	movs	r3, #251	; 0xfb
9000b078:	e7f9      	b.n	9000b06e <lwip_netconn_do_close+0x26>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
9000b07a:	07d3      	lsls	r3, r2, #31
9000b07c:	d501      	bpl.n	9000b082 <lwip_netconn_do_close+0x3a>
        netconn_drain(msg->conn);
9000b07e:	f7ff fd43 	bl	9000ab08 <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
9000b082:	6823      	ldr	r3, [r4, #0]
9000b084:	6a1b      	ldr	r3, [r3, #32]
9000b086:	b133      	cbz	r3, 9000b096 <lwip_netconn_do_close+0x4e>
9000b088:	4b19      	ldr	r3, [pc, #100]	; (9000b0f0 <lwip_netconn_do_close+0xa8>)
9000b08a:	f240 72bd 	movw	r2, #1981	; 0x7bd
9000b08e:	4919      	ldr	r1, [pc, #100]	; (9000b0f4 <lwip_netconn_do_close+0xac>)
9000b090:	4819      	ldr	r0, [pc, #100]	; (9000b0f8 <lwip_netconn_do_close+0xb0>)
9000b092:	f01e fa1d 	bl	900294d0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
9000b096:	6820      	ldr	r0, [r4, #0]
9000b098:	2304      	movs	r3, #4
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
9000b09a:	2100      	movs	r1, #0
      msg->conn->state = NETCONN_CLOSE;
9000b09c:	7043      	strb	r3, [r0, #1]
      msg->conn->current_msg = msg;
9000b09e:	6204      	str	r4, [r0, #32]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
9000b0a0:	f7ff f9e6 	bl	9000a470 <lwip_netconn_do_close_internal>
9000b0a4:	2800      	cmp	r0, #0
9000b0a6:	d0e3      	beq.n	9000b070 <lwip_netconn_do_close+0x28>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
9000b0a8:	6823      	ldr	r3, [r4, #0]
9000b0aa:	785b      	ldrb	r3, [r3, #1]
9000b0ac:	2b04      	cmp	r3, #4
9000b0ae:	d006      	beq.n	9000b0be <lwip_netconn_do_close+0x76>
9000b0b0:	4b0f      	ldr	r3, [pc, #60]	; (9000b0f0 <lwip_netconn_do_close+0xa8>)
9000b0b2:	f240 72c2 	movw	r2, #1986	; 0x7c2
9000b0b6:	4911      	ldr	r1, [pc, #68]	; (9000b0fc <lwip_netconn_do_close+0xb4>)
9000b0b8:	480f      	ldr	r0, [pc, #60]	; (9000b0f8 <lwip_netconn_do_close+0xb0>)
9000b0ba:	f01e fa09 	bl	900294d0 <iprintf>
        UNLOCK_TCPIP_CORE();
9000b0be:	4810      	ldr	r0, [pc, #64]	; (9000b100 <lwip_netconn_do_close+0xb8>)
9000b0c0:	f004 fcba 	bl	9000fa38 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
9000b0c4:	6820      	ldr	r0, [r4, #0]
9000b0c6:	2100      	movs	r1, #0
9000b0c8:	300c      	adds	r0, #12
9000b0ca:	f004 fc71 	bl	9000f9b0 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
9000b0ce:	480c      	ldr	r0, [pc, #48]	; (9000b100 <lwip_netconn_do_close+0xb8>)
9000b0d0:	f004 fcad 	bl	9000fa2e <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
9000b0d4:	6823      	ldr	r3, [r4, #0]
9000b0d6:	785b      	ldrb	r3, [r3, #1]
9000b0d8:	2b00      	cmp	r3, #0
9000b0da:	d0c9      	beq.n	9000b070 <lwip_netconn_do_close+0x28>
9000b0dc:	4b04      	ldr	r3, [pc, #16]	; (9000b0f0 <lwip_netconn_do_close+0xa8>)
9000b0de:	f240 72c6 	movw	r2, #1990	; 0x7c6
9000b0e2:	4906      	ldr	r1, [pc, #24]	; (9000b0fc <lwip_netconn_do_close+0xb4>)
9000b0e4:	4804      	ldr	r0, [pc, #16]	; (9000b0f8 <lwip_netconn_do_close+0xb0>)
}
9000b0e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
9000b0ea:	f01e b9f1 	b.w	900294d0 <iprintf>
9000b0ee:	bf00      	nop
9000b0f0:	9002b532 	.word	0x9002b532
9000b0f4:	9002b915 	.word	0x9002b915
9000b0f8:	9002a254 	.word	0x9002a254
9000b0fc:	9002b930 	.word	0x9002b930
9000b100:	2002cb84 	.word	0x2002cb84

9000b104 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
9000b104:	ba40      	rev16	r0, r0
}
9000b106:	b280      	uxth	r0, r0
9000b108:	4770      	bx	lr

9000b10a <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
9000b10a:	ba00      	rev	r0, r0
9000b10c:	4770      	bx	lr

9000b10e <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
9000b10e:	7943      	ldrb	r3, [r0, #5]
9000b110:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
9000b112:	bf1f      	itttt	ne
9000b114:	2300      	movne	r3, #0
    dhcp->state = new_state;
9000b116:	7141      	strbne	r1, [r0, #5]
    dhcp->tries = 0;
9000b118:	7183      	strbne	r3, [r0, #6]
    dhcp->request_timeout = 0;
9000b11a:	8103      	strhne	r3, [r0, #8]
  }
}
9000b11c:	4770      	bx	lr
	...

9000b120 <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
9000b120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
9000b122:	1c87      	adds	r7, r0, #2
{
9000b124:	4604      	mov	r4, r0
9000b126:	460d      	mov	r5, r1
9000b128:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
9000b12a:	2f44      	cmp	r7, #68	; 0x44
9000b12c:	d906      	bls.n	9000b13c <dhcp_option_short+0x1c>
9000b12e:	4b07      	ldr	r3, [pc, #28]	; (9000b14c <dhcp_option_short+0x2c>)
9000b130:	f240 52ae 	movw	r2, #1454	; 0x5ae
9000b134:	4906      	ldr	r1, [pc, #24]	; (9000b150 <dhcp_option_short+0x30>)
9000b136:	4807      	ldr	r0, [pc, #28]	; (9000b154 <dhcp_option_short+0x34>)
9000b138:	f01e f9ca 	bl	900294d0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
9000b13c:	0a33      	lsrs	r3, r6, #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
  return options_out_len;
}
9000b13e:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
9000b140:	552b      	strb	r3, [r5, r4]
9000b142:	3401      	adds	r4, #1
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
9000b144:	b2a4      	uxth	r4, r4
9000b146:	552e      	strb	r6, [r5, r4]
}
9000b148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000b14a:	bf00      	nop
9000b14c:	9002b96f 	.word	0x9002b96f
9000b150:	9002b9d4 	.word	0x9002b9d4
9000b154:	9002a254 	.word	0x9002a254

9000b158 <dhcp_option>:
{
9000b158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000b15a:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
9000b15c:	3302      	adds	r3, #2
{
9000b15e:	4604      	mov	r4, r0
9000b160:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
9000b162:	4403      	add	r3, r0
{
9000b164:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
9000b166:	2b44      	cmp	r3, #68	; 0x44
9000b168:	d906      	bls.n	9000b178 <dhcp_option+0x20>
9000b16a:	4b07      	ldr	r3, [pc, #28]	; (9000b188 <dhcp_option+0x30>)
9000b16c:	f240 529a 	movw	r2, #1434	; 0x59a
9000b170:	4906      	ldr	r1, [pc, #24]	; (9000b18c <dhcp_option+0x34>)
9000b172:	4807      	ldr	r0, [pc, #28]	; (9000b190 <dhcp_option+0x38>)
9000b174:	f01e f9ac 	bl	900294d0 <iprintf>
  options[options_out_len++] = option_type;
9000b178:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = option_len;
9000b17a:	1ca0      	adds	r0, r4, #2
  options[options_out_len++] = option_type;
9000b17c:	552f      	strb	r7, [r5, r4]
  options[options_out_len++] = option_len;
9000b17e:	b29b      	uxth	r3, r3
}
9000b180:	b280      	uxth	r0, r0
  options[options_out_len++] = option_len;
9000b182:	54ee      	strb	r6, [r5, r3]
}
9000b184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000b186:	bf00      	nop
9000b188:	9002b96f 	.word	0x9002b96f
9000b18c:	9002ba0f 	.word	0x9002ba0f
9000b190:	9002a254 	.word	0x9002a254

9000b194 <dhcp_option_byte>:
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
9000b194:	2843      	cmp	r0, #67	; 0x43
{
9000b196:	b570      	push	{r4, r5, r6, lr}
9000b198:	4604      	mov	r4, r0
9000b19a:	460d      	mov	r5, r1
9000b19c:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
9000b19e:	d906      	bls.n	9000b1ae <dhcp_option_byte+0x1a>
9000b1a0:	4b05      	ldr	r3, [pc, #20]	; (9000b1b8 <dhcp_option_byte+0x24>)
9000b1a2:	f240 52a6 	movw	r2, #1446	; 0x5a6
9000b1a6:	4905      	ldr	r1, [pc, #20]	; (9000b1bc <dhcp_option_byte+0x28>)
9000b1a8:	4805      	ldr	r0, [pc, #20]	; (9000b1c0 <dhcp_option_byte+0x2c>)
9000b1aa:	f01e f991 	bl	900294d0 <iprintf>
  options[options_out_len++] = value;
9000b1ae:	1c60      	adds	r0, r4, #1
9000b1b0:	552e      	strb	r6, [r5, r4]
}
9000b1b2:	b280      	uxth	r0, r0
9000b1b4:	bd70      	pop	{r4, r5, r6, pc}
9000b1b6:	bf00      	nop
9000b1b8:	9002b96f 	.word	0x9002b96f
9000b1bc:	9002ba51 	.word	0x9002ba51
9000b1c0:	9002a254 	.word	0x9002a254

9000b1c4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
9000b1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
9000b1c6:	1d07      	adds	r7, r0, #4
{
9000b1c8:	4604      	mov	r4, r0
9000b1ca:	460d      	mov	r5, r1
9000b1cc:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
9000b1ce:	2f44      	cmp	r7, #68	; 0x44
9000b1d0:	d906      	bls.n	9000b1e0 <dhcp_option_long+0x1c>
9000b1d2:	4b0b      	ldr	r3, [pc, #44]	; (9000b200 <dhcp_option_long+0x3c>)
9000b1d4:	f240 52b7 	movw	r2, #1463	; 0x5b7
9000b1d8:	490a      	ldr	r1, [pc, #40]	; (9000b204 <dhcp_option_long+0x40>)
9000b1da:	480b      	ldr	r0, [pc, #44]	; (9000b208 <dhcp_option_long+0x44>)
9000b1dc:	f01e f978 	bl	900294d0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
9000b1e0:	0e33      	lsrs	r3, r6, #24
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
9000b1e2:	0c32      	lsrs	r2, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
9000b1e4:	552b      	strb	r3, [r5, r4]
9000b1e6:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
  return options_out_len;
}
9000b1e8:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
9000b1ea:	b29b      	uxth	r3, r3
9000b1ec:	54ea      	strb	r2, [r5, r3]
9000b1ee:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
9000b1f0:	3403      	adds	r4, #3
9000b1f2:	0a32      	lsrs	r2, r6, #8
9000b1f4:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
9000b1f6:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
9000b1f8:	54ea      	strb	r2, [r5, r3]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
9000b1fa:	552e      	strb	r6, [r5, r4]
}
9000b1fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000b1fe:	bf00      	nop
9000b200:	9002b96f 	.word	0x9002b96f
9000b204:	9002ba86 	.word	0x9002ba86
9000b208:	9002a254 	.word	0x9002a254

9000b20c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
9000b20c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
9000b210:	460e      	mov	r6, r1
9000b212:	4690      	mov	r8, r2
9000b214:	4699      	mov	r9, r3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
9000b216:	4605      	mov	r5, r0
9000b218:	b958      	cbnz	r0, 9000b232 <dhcp_create_msg+0x26>
9000b21a:	462f      	mov	r7, r5
9000b21c:	4b3f      	ldr	r3, [pc, #252]	; (9000b31c <dhcp_create_msg+0x110>)
9000b21e:	f240 7269 	movw	r2, #1897	; 0x769
9000b222:	493f      	ldr	r1, [pc, #252]	; (9000b320 <dhcp_create_msg+0x114>)
9000b224:	483f      	ldr	r0, [pc, #252]	; (9000b324 <dhcp_create_msg+0x118>)
9000b226:	f01e f953 	bl	900294d0 <iprintf>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
  }
  return p_out;
}
9000b22a:	4638      	mov	r0, r7
9000b22c:	b003      	add	sp, #12
9000b22e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
9000b232:	b941      	cbnz	r1, 9000b246 <dhcp_create_msg+0x3a>
9000b234:	4b39      	ldr	r3, [pc, #228]	; (9000b31c <dhcp_create_msg+0x110>)
9000b236:	f240 726a 	movw	r2, #1898	; 0x76a
9000b23a:	493b      	ldr	r1, [pc, #236]	; (9000b328 <dhcp_create_msg+0x11c>)
9000b23c:	4637      	mov	r7, r6
9000b23e:	4839      	ldr	r0, [pc, #228]	; (9000b324 <dhcp_create_msg+0x118>)
9000b240:	f01e f946 	bl	900294d0 <iprintf>
9000b244:	e7f1      	b.n	9000b22a <dhcp_create_msg+0x1e>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
9000b246:	f44f 7220 	mov.w	r2, #640	; 0x280
9000b24a:	f44f 719a 	mov.w	r1, #308	; 0x134
9000b24e:	2036      	movs	r0, #54	; 0x36
9000b250:	f003 fb48 	bl	9000e8e4 <pbuf_alloc>
  if (p_out == NULL) {
9000b254:	4607      	mov	r7, r0
9000b256:	2800      	cmp	r0, #0
9000b258:	d0e7      	beq.n	9000b22a <dhcp_create_msg+0x1e>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
9000b25a:	8943      	ldrh	r3, [r0, #10]
9000b25c:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
9000b260:	d206      	bcs.n	9000b270 <dhcp_create_msg+0x64>
9000b262:	4b2e      	ldr	r3, [pc, #184]	; (9000b31c <dhcp_create_msg+0x110>)
9000b264:	f240 7271 	movw	r2, #1905	; 0x771
9000b268:	4930      	ldr	r1, [pc, #192]	; (9000b32c <dhcp_create_msg+0x120>)
9000b26a:	482e      	ldr	r0, [pc, #184]	; (9000b324 <dhcp_create_msg+0x118>)
9000b26c:	f01e f930 	bl	900294d0 <iprintf>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
9000b270:	f1b8 0f03 	cmp.w	r8, #3
9000b274:	d102      	bne.n	9000b27c <dhcp_create_msg+0x70>
9000b276:	7973      	ldrb	r3, [r6, #5]
9000b278:	2b03      	cmp	r3, #3
9000b27a:	d107      	bne.n	9000b28c <dhcp_create_msg+0x80>
    if (dhcp->tries == 0) {
9000b27c:	79b3      	ldrb	r3, [r6, #6]
9000b27e:	4c2c      	ldr	r4, [pc, #176]	; (9000b330 <dhcp_create_msg+0x124>)
9000b280:	b913      	cbnz	r3, 9000b288 <dhcp_create_msg+0x7c>
      xid = LWIP_RAND();
9000b282:	f01e f93d 	bl	90029500 <rand>
9000b286:	6020      	str	r0, [r4, #0]
    dhcp->xid = xid;
9000b288:	6823      	ldr	r3, [r4, #0]
9000b28a:	6033      	str	r3, [r6, #0]
  msg_out = (struct dhcp_msg *)p_out->payload;
9000b28c:	687c      	ldr	r4, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
9000b28e:	f44f 729a 	mov.w	r2, #308	; 0x134
9000b292:	2100      	movs	r1, #0
9000b294:	4620      	mov	r0, r4
9000b296:	f01d fd7b 	bl	90028d90 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
9000b29a:	2301      	movs	r3, #1
9000b29c:	7023      	strb	r3, [r4, #0]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
9000b29e:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
9000b2a0:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
9000b2a4:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
9000b2a6:	6830      	ldr	r0, [r6, #0]
9000b2a8:	f7ff ff2f 	bl	9000b10a <lwip_htonl>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
9000b2ac:	f1b8 0f04 	cmp.w	r8, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
9000b2b0:	6060      	str	r0, [r4, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
9000b2b2:	d00a      	beq.n	9000b2ca <dhcp_create_msg+0xbe>
9000b2b4:	f1a8 0307 	sub.w	r3, r8, #7
9000b2b8:	2b01      	cmp	r3, #1
9000b2ba:	d906      	bls.n	9000b2ca <dhcp_create_msg+0xbe>
9000b2bc:	f1b8 0f03 	cmp.w	r8, #3
9000b2c0:	d105      	bne.n	9000b2ce <dhcp_create_msg+0xc2>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
9000b2c2:	7973      	ldrb	r3, [r6, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
9000b2c4:	3b04      	subs	r3, #4
9000b2c6:	2b01      	cmp	r3, #1
9000b2c8:	d801      	bhi.n	9000b2ce <dhcp_create_msg+0xc2>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
9000b2ca:	686b      	ldr	r3, [r5, #4]
9000b2cc:	60e3      	str	r3, [r4, #12]
9000b2ce:	f105 032a 	add.w	r3, r5, #42	; 0x2a
9000b2d2:	f104 021c 	add.w	r2, r4, #28
9000b2d6:	3530      	adds	r5, #48	; 0x30
    msg_out->chaddr[i] = netif->hwaddr[i];
9000b2d8:	f813 1b01 	ldrb.w	r1, [r3], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
9000b2dc:	42ab      	cmp	r3, r5
    msg_out->chaddr[i] = netif->hwaddr[i];
9000b2de:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
9000b2e2:	d1f9      	bne.n	9000b2d8 <dhcp_create_msg+0xcc>
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
9000b2e4:	f06f 027d 	mvn.w	r2, #125	; 0x7d
9000b2e8:	2363      	movs	r3, #99	; 0x63
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
9000b2ea:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
9000b2ee:	2000      	movs	r0, #0
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
9000b2f0:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
9000b2f4:	2253      	movs	r2, #83	; 0x53
9000b2f6:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
9000b2fa:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
9000b2fe:	2235      	movs	r2, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
9000b300:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
9000b304:	2301      	movs	r3, #1
9000b306:	9101      	str	r1, [sp, #4]
9000b308:	f7ff ff26 	bl	9000b158 <dhcp_option>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
9000b30c:	4642      	mov	r2, r8
9000b30e:	9901      	ldr	r1, [sp, #4]
9000b310:	f7ff ff40 	bl	9000b194 <dhcp_option_byte>
    *options_out_len = options_out_len_loc;
9000b314:	f8a9 0000 	strh.w	r0, [r9]
9000b318:	e787      	b.n	9000b22a <dhcp_create_msg+0x1e>
9000b31a:	bf00      	nop
9000b31c:	9002b96f 	.word	0x9002b96f
9000b320:	9002bac0 	.word	0x9002bac0
9000b324:	9002a254 	.word	0x9002a254
9000b328:	9002badf 	.word	0x9002badf
9000b32c:	9002bafd 	.word	0x9002bafd
9000b330:	20026660 	.word	0x20026660

9000b334 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
9000b334:	4603      	mov	r3, r0
9000b336:	4610      	mov	r0, r2
9000b338:	b430      	push	{r4, r5}
  options[options_out_len++] = DHCP_OPTION_END;
9000b33a:	1c5c      	adds	r4, r3, #1
9000b33c:	25ff      	movs	r5, #255	; 0xff
9000b33e:	b2a2      	uxth	r2, r4
9000b340:	54cd      	strb	r5, [r1, r3]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
9000b342:	fa11 f184 	uxtah	r1, r1, r4
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
9000b346:	2500      	movs	r5, #0
  options[options_out_len++] = DHCP_OPTION_END;
9000b348:	4614      	mov	r4, r2
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
9000b34a:	2c43      	cmp	r4, #67	; 0x43
9000b34c:	d90b      	bls.n	9000b366 <dhcp_option_trailer+0x32>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
9000b34e:	2a44      	cmp	r2, #68	; 0x44
9000b350:	f1c3 0143 	rsb	r1, r3, #67	; 0x43
9000b354:	f103 03f1 	add.w	r3, r3, #241	; 0xf1
9000b358:	bf88      	it	hi
9000b35a:	2100      	movhi	r1, #0
9000b35c:	4419      	add	r1, r3
}
9000b35e:	bc30      	pop	{r4, r5}
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
9000b360:	b289      	uxth	r1, r1
9000b362:	f003 bb51 	b.w	9000ea08 <pbuf_realloc>
    options[options_out_len++] = 0;
9000b366:	3401      	adds	r4, #1
9000b368:	f801 5b01 	strb.w	r5, [r1], #1
9000b36c:	b2a4      	uxth	r4, r4
9000b36e:	e7ec      	b.n	9000b34a <dhcp_option_trailer+0x16>

9000b370 <dhcp_reboot>:
{
9000b370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
9000b374:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
9000b376:	b086      	sub	sp, #24
9000b378:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
9000b37a:	2103      	movs	r1, #3
9000b37c:	4620      	mov	r0, r4
9000b37e:	f7ff fec6 	bl	9000b10e <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
9000b382:	f10d 0316 	add.w	r3, sp, #22
9000b386:	2203      	movs	r2, #3
9000b388:	4621      	mov	r1, r4
9000b38a:	4630      	mov	r0, r6
9000b38c:	f7ff ff3e 	bl	9000b20c <dhcp_create_msg>
  if (p_out != NULL) {
9000b390:	4605      	mov	r5, r0
9000b392:	2800      	cmp	r0, #0
9000b394:	d067      	beq.n	9000b466 <dhcp_reboot+0xf6>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
9000b396:	6841      	ldr	r1, [r0, #4]
9000b398:	2302      	movs	r3, #2
9000b39a:	2239      	movs	r2, #57	; 0x39
9000b39c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
9000b3a0:	31f0      	adds	r1, #240	; 0xf0
9000b3a2:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 9000b474 <dhcp_reboot+0x104>
9000b3a6:	9103      	str	r1, [sp, #12]
9000b3a8:	f7ff fed6 	bl	9000b158 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
9000b3ac:	f44f 7210 	mov.w	r2, #576	; 0x240
9000b3b0:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
9000b3b2:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
9000b3b6:	f7ff feb3 	bl	9000b120 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
9000b3ba:	2304      	movs	r3, #4
9000b3bc:	2232      	movs	r2, #50	; 0x32
9000b3be:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
9000b3c0:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
9000b3c4:	f7ff fec8 	bl	9000b158 <dhcp_option>
9000b3c8:	4607      	mov	r7, r0
9000b3ca:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
9000b3ce:	69e0      	ldr	r0, [r4, #28]
9000b3d0:	f7ff fe9b 	bl	9000b10a <lwip_htonl>
9000b3d4:	9903      	ldr	r1, [sp, #12]
9000b3d6:	4602      	mov	r2, r0
9000b3d8:	4638      	mov	r0, r7
9000b3da:	f7ff fef3 	bl	9000b1c4 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
9000b3de:	9903      	ldr	r1, [sp, #12]
9000b3e0:	2304      	movs	r3, #4
9000b3e2:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
9000b3e4:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
9000b3e8:	2704      	movs	r7, #4
9000b3ea:	f7ff feb5 	bl	9000b158 <dhcp_option>
9000b3ee:	9903      	ldr	r1, [sp, #12]
9000b3f0:	f8ad 0016 	strh.w	r0, [sp, #22]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
9000b3f4:	3f01      	subs	r7, #1
9000b3f6:	f818 2b01 	ldrb.w	r2, [r8], #1
9000b3fa:	f8bd 0016 	ldrh.w	r0, [sp, #22]
9000b3fe:	9103      	str	r1, [sp, #12]
9000b400:	f7ff fec8 	bl	9000b194 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
9000b404:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
9000b408:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
9000b40a:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
9000b40e:	d1f1      	bne.n	9000b3f4 <dhcp_reboot+0x84>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
9000b410:	462a      	mov	r2, r5
9000b412:	f7ff ff8f 	bl	9000b334 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
9000b416:	4815      	ldr	r0, [pc, #84]	; (9000b46c <dhcp_reboot+0xfc>)
9000b418:	9600      	str	r6, [sp, #0]
9000b41a:	2343      	movs	r3, #67	; 0x43
9000b41c:	4a14      	ldr	r2, [pc, #80]	; (9000b470 <dhcp_reboot+0x100>)
9000b41e:	4629      	mov	r1, r5
9000b420:	6800      	ldr	r0, [r0, #0]
9000b422:	f008 fbef 	bl	90013c04 <udp_sendto_if>
9000b426:	4606      	mov	r6, r0
    pbuf_free(p_out);
9000b428:	4628      	mov	r0, r5
9000b42a:	f003 f9f3 	bl	9000e814 <pbuf_free>
  if (dhcp->tries < 255) {
9000b42e:	79a3      	ldrb	r3, [r4, #6]
}
9000b430:	4630      	mov	r0, r6
  if (dhcp->tries < 255) {
9000b432:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
9000b434:	bf1c      	itt	ne
9000b436:	3301      	addne	r3, #1
9000b438:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
9000b43a:	79a3      	ldrb	r3, [r4, #6]
9000b43c:	2b09      	cmp	r3, #9
9000b43e:	bf96      	itet	ls
9000b440:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
9000b444:	f242 7310 	movwhi	r3, #10000	; 0x2710
9000b448:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
9000b44c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
9000b450:	bf9c      	itt	ls
9000b452:	00db      	lslls	r3, r3, #3
9000b454:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
9000b456:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
9000b45a:	fbb3 f3f2 	udiv	r3, r3, r2
9000b45e:	8123      	strh	r3, [r4, #8]
}
9000b460:	b006      	add	sp, #24
9000b462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
9000b466:	f04f 36ff 	mov.w	r6, #4294967295
9000b46a:	e7e0      	b.n	9000b42e <dhcp_reboot+0xbe>
9000b46c:	20026658 	.word	0x20026658
9000b470:	9002c1b4 	.word	0x9002c1b4
9000b474:	9002bccc 	.word	0x9002bccc

9000b478 <dhcp_select>:
{
9000b478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
9000b47c:	4607      	mov	r7, r0
{
9000b47e:	b085      	sub	sp, #20
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
9000b480:	b960      	cbnz	r0, 9000b49c <dhcp_select+0x24>
9000b482:	f06f 050f 	mvn.w	r5, #15
9000b486:	4b52      	ldr	r3, [pc, #328]	; (9000b5d0 <dhcp_select+0x158>)
9000b488:	f240 1277 	movw	r2, #375	; 0x177
9000b48c:	4951      	ldr	r1, [pc, #324]	; (9000b5d4 <dhcp_select+0x15c>)
9000b48e:	4852      	ldr	r0, [pc, #328]	; (9000b5d8 <dhcp_select+0x160>)
9000b490:	f01e f81e 	bl	900294d0 <iprintf>
}
9000b494:	4628      	mov	r0, r5
9000b496:	b005      	add	sp, #20
9000b498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  dhcp = netif_dhcp_data(netif);
9000b49c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
9000b49e:	b94c      	cbnz	r4, 9000b4b4 <dhcp_select+0x3c>
9000b4a0:	4b4b      	ldr	r3, [pc, #300]	; (9000b5d0 <dhcp_select+0x158>)
9000b4a2:	f240 1279 	movw	r2, #377	; 0x179
9000b4a6:	494d      	ldr	r1, [pc, #308]	; (9000b5dc <dhcp_select+0x164>)
9000b4a8:	f06f 0505 	mvn.w	r5, #5
9000b4ac:	484a      	ldr	r0, [pc, #296]	; (9000b5d8 <dhcp_select+0x160>)
9000b4ae:	f01e f80f 	bl	900294d0 <iprintf>
9000b4b2:	e7ef      	b.n	9000b494 <dhcp_select+0x1c>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
9000b4b4:	2101      	movs	r1, #1
9000b4b6:	4620      	mov	r0, r4
9000b4b8:	f7ff fe29 	bl	9000b10e <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
9000b4bc:	f10d 030e 	add.w	r3, sp, #14
9000b4c0:	2203      	movs	r2, #3
9000b4c2:	4621      	mov	r1, r4
9000b4c4:	4638      	mov	r0, r7
9000b4c6:	f7ff fea1 	bl	9000b20c <dhcp_create_msg>
  if (p_out != NULL) {
9000b4ca:	4606      	mov	r6, r0
9000b4cc:	2800      	cmp	r0, #0
9000b4ce:	d07b      	beq.n	9000b5c8 <dhcp_select+0x150>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
9000b4d0:	6845      	ldr	r5, [r0, #4]
9000b4d2:	2302      	movs	r3, #2
9000b4d4:	2239      	movs	r2, #57	; 0x39
9000b4d6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
9000b4da:	35f0      	adds	r5, #240	; 0xf0
9000b4dc:	f8df 910c 	ldr.w	r9, [pc, #268]	; 9000b5ec <dhcp_select+0x174>
9000b4e0:	4629      	mov	r1, r5
9000b4e2:	f7ff fe39 	bl	9000b158 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
9000b4e6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
9000b4e8:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
9000b4ea:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
9000b4ee:	f7ff fe17 	bl	9000b120 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
9000b4f2:	2304      	movs	r3, #4
9000b4f4:	2232      	movs	r2, #50	; 0x32
9000b4f6:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
9000b4f8:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
9000b4fc:	f7ff fe2c 	bl	9000b158 <dhcp_option>
9000b500:	4680      	mov	r8, r0
9000b502:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
9000b506:	69e0      	ldr	r0, [r4, #28]
9000b508:	f7ff fdff 	bl	9000b10a <lwip_htonl>
9000b50c:	4629      	mov	r1, r5
9000b50e:	4602      	mov	r2, r0
9000b510:	4640      	mov	r0, r8
9000b512:	f7ff fe57 	bl	9000b1c4 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
9000b516:	2304      	movs	r3, #4
9000b518:	2236      	movs	r2, #54	; 0x36
9000b51a:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
9000b51c:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
9000b520:	f7ff fe1a 	bl	9000b158 <dhcp_option>
9000b524:	4680      	mov	r8, r0
9000b526:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
9000b52a:	69a0      	ldr	r0, [r4, #24]
9000b52c:	f7ff fded 	bl	9000b10a <lwip_htonl>
9000b530:	4629      	mov	r1, r5
9000b532:	4602      	mov	r2, r0
9000b534:	4640      	mov	r0, r8
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
9000b536:	f04f 0804 	mov.w	r8, #4
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
9000b53a:	f7ff fe43 	bl	9000b1c4 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
9000b53e:	2304      	movs	r3, #4
9000b540:	2237      	movs	r2, #55	; 0x37
9000b542:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
9000b544:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
9000b548:	f7ff fe06 	bl	9000b158 <dhcp_option>
9000b54c:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
9000b550:	f108 38ff 	add.w	r8, r8, #4294967295
9000b554:	f819 2b01 	ldrb.w	r2, [r9], #1
9000b558:	4629      	mov	r1, r5
9000b55a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
9000b55e:	f7ff fe19 	bl	9000b194 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
9000b562:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
9000b566:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
9000b56a:	d1f1      	bne.n	9000b550 <dhcp_select+0xd8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
9000b56c:	4629      	mov	r1, r5
9000b56e:	4632      	mov	r2, r6
9000b570:	f7ff fee0 	bl	9000b334 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
9000b574:	4b1a      	ldr	r3, [pc, #104]	; (9000b5e0 <dhcp_select+0x168>)
9000b576:	481b      	ldr	r0, [pc, #108]	; (9000b5e4 <dhcp_select+0x16c>)
9000b578:	4631      	mov	r1, r6
9000b57a:	4a1b      	ldr	r2, [pc, #108]	; (9000b5e8 <dhcp_select+0x170>)
9000b57c:	e9cd 7300 	strd	r7, r3, [sp]
9000b580:	2343      	movs	r3, #67	; 0x43
9000b582:	6800      	ldr	r0, [r0, #0]
9000b584:	f008 faa6 	bl	90013ad4 <udp_sendto_if_src>
9000b588:	4605      	mov	r5, r0
    pbuf_free(p_out);
9000b58a:	4630      	mov	r0, r6
9000b58c:	f003 f942 	bl	9000e814 <pbuf_free>
  if (dhcp->tries < 255) {
9000b590:	79a3      	ldrb	r3, [r4, #6]
9000b592:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
9000b594:	bf1c      	itt	ne
9000b596:	3301      	addne	r3, #1
9000b598:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
9000b59a:	79a2      	ldrb	r2, [r4, #6]
9000b59c:	2a05      	cmp	r2, #5
9000b59e:	bf97      	itett	ls
9000b5a0:	2301      	movls	r3, #1
9000b5a2:	f64e 2360 	movwhi	r3, #60000	; 0xea60
9000b5a6:	4093      	lslls	r3, r2
9000b5a8:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
9000b5ac:	bf98      	it	ls
9000b5ae:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
9000b5b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
9000b5b6:	bf9c      	itt	ls
9000b5b8:	00db      	lslls	r3, r3, #3
9000b5ba:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
9000b5bc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
9000b5c0:	fbb3 f3f2 	udiv	r3, r3, r2
9000b5c4:	8123      	strh	r3, [r4, #8]
  return result;
9000b5c6:	e765      	b.n	9000b494 <dhcp_select+0x1c>
    result = ERR_MEM;
9000b5c8:	f04f 35ff 	mov.w	r5, #4294967295
9000b5cc:	e7e0      	b.n	9000b590 <dhcp_select+0x118>
9000b5ce:	bf00      	nop
9000b5d0:	9002b96f 	.word	0x9002b96f
9000b5d4:	9002bb3d 	.word	0x9002bb3d
9000b5d8:	9002a254 	.word	0x9002a254
9000b5dc:	9002bb58 	.word	0x9002bb58
9000b5e0:	9002c1b0 	.word	0x9002c1b0
9000b5e4:	20026658 	.word	0x20026658
9000b5e8:	9002c1b4 	.word	0x9002c1b4
9000b5ec:	9002bccc 	.word	0x9002bccc

9000b5f0 <dhcp_discover>:
{
9000b5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ip4_addr_set_any(&dhcp->offered_ip_addr);
9000b5f4:	2300      	movs	r3, #0
  struct dhcp *dhcp = netif_dhcp_data(netif);
9000b5f6:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
9000b5f8:	b086      	sub	sp, #24
9000b5fa:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
9000b5fc:	2106      	movs	r1, #6
9000b5fe:	4620      	mov	r0, r4
  ip4_addr_set_any(&dhcp->offered_ip_addr);
9000b600:	61e3      	str	r3, [r4, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
9000b602:	f7ff fd84 	bl	9000b10e <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
9000b606:	f10d 0316 	add.w	r3, sp, #22
9000b60a:	2201      	movs	r2, #1
9000b60c:	4621      	mov	r1, r4
9000b60e:	4630      	mov	r0, r6
9000b610:	f7ff fdfc 	bl	9000b20c <dhcp_create_msg>
  if (p_out != NULL) {
9000b614:	4605      	mov	r5, r0
9000b616:	2800      	cmp	r0, #0
9000b618:	d039      	beq.n	9000b68e <dhcp_discover+0x9e>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
9000b61a:	6841      	ldr	r1, [r0, #4]
9000b61c:	2302      	movs	r3, #2
9000b61e:	2239      	movs	r2, #57	; 0x39
9000b620:	f8bd 0016 	ldrh.w	r0, [sp, #22]
9000b624:	31f0      	adds	r1, #240	; 0xf0
9000b626:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 9000b6d8 <dhcp_discover+0xe8>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
9000b62a:	2704      	movs	r7, #4
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
9000b62c:	9103      	str	r1, [sp, #12]
9000b62e:	f7ff fd93 	bl	9000b158 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
9000b632:	8d32      	ldrh	r2, [r6, #40]	; 0x28
9000b634:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
9000b636:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
9000b63a:	f7ff fd71 	bl	9000b120 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
9000b63e:	9903      	ldr	r1, [sp, #12]
9000b640:	2304      	movs	r3, #4
9000b642:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
9000b644:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
9000b648:	f7ff fd86 	bl	9000b158 <dhcp_option>
9000b64c:	9903      	ldr	r1, [sp, #12]
9000b64e:	f8ad 0016 	strh.w	r0, [sp, #22]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
9000b652:	3f01      	subs	r7, #1
9000b654:	f818 2b01 	ldrb.w	r2, [r8], #1
9000b658:	f8bd 0016 	ldrh.w	r0, [sp, #22]
9000b65c:	9103      	str	r1, [sp, #12]
9000b65e:	f7ff fd99 	bl	9000b194 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
9000b662:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
9000b666:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
9000b668:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
9000b66c:	d1f1      	bne.n	9000b652 <dhcp_discover+0x62>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
9000b66e:	462a      	mov	r2, r5
9000b670:	f7ff fe60 	bl	9000b334 <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
9000b674:	4b15      	ldr	r3, [pc, #84]	; (9000b6cc <dhcp_discover+0xdc>)
9000b676:	4816      	ldr	r0, [pc, #88]	; (9000b6d0 <dhcp_discover+0xe0>)
9000b678:	4629      	mov	r1, r5
9000b67a:	4a16      	ldr	r2, [pc, #88]	; (9000b6d4 <dhcp_discover+0xe4>)
9000b67c:	e9cd 6300 	strd	r6, r3, [sp]
9000b680:	2343      	movs	r3, #67	; 0x43
9000b682:	6800      	ldr	r0, [r0, #0]
9000b684:	f008 fa26 	bl	90013ad4 <udp_sendto_if_src>
    pbuf_free(p_out);
9000b688:	4628      	mov	r0, r5
9000b68a:	f003 f8c3 	bl	9000e814 <pbuf_free>
  if (dhcp->tries < 255) {
9000b68e:	79a3      	ldrb	r3, [r4, #6]
}
9000b690:	2000      	movs	r0, #0
  if (dhcp->tries < 255) {
9000b692:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
9000b694:	bf1c      	itt	ne
9000b696:	3301      	addne	r3, #1
9000b698:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
9000b69a:	79a2      	ldrb	r2, [r4, #6]
9000b69c:	2a05      	cmp	r2, #5
9000b69e:	bf97      	itett	ls
9000b6a0:	2301      	movls	r3, #1
9000b6a2:	f64e 2360 	movwhi	r3, #60000	; 0xea60
9000b6a6:	4093      	lslls	r3, r2
9000b6a8:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
9000b6ac:	bf98      	it	ls
9000b6ae:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
9000b6b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
9000b6b6:	bf9c      	itt	ls
9000b6b8:	00db      	lslls	r3, r3, #3
9000b6ba:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
9000b6bc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
9000b6c0:	fbb3 f3f2 	udiv	r3, r3, r2
9000b6c4:	8123      	strh	r3, [r4, #8]
}
9000b6c6:	b006      	add	sp, #24
9000b6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000b6cc:	9002c1b0 	.word	0x9002c1b0
9000b6d0:	20026658 	.word	0x20026658
9000b6d4:	9002c1b4 	.word	0x9002c1b4
9000b6d8:	9002bccc 	.word	0x9002bccc

9000b6dc <dhcp_check>:
{
9000b6dc:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
9000b6de:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
9000b6e0:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
9000b6e2:	2108      	movs	r1, #8
9000b6e4:	4620      	mov	r0, r4
9000b6e6:	f7ff fd12 	bl	9000b10e <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
9000b6ea:	2200      	movs	r2, #0
9000b6ec:	f104 011c 	add.w	r1, r4, #28
9000b6f0:	4628      	mov	r0, r5
9000b6f2:	f001 fa69 	bl	9000cbc8 <etharp_query>
  if (dhcp->tries < 255) {
9000b6f6:	79a3      	ldrb	r3, [r4, #6]
9000b6f8:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
9000b6fa:	bf1c      	itt	ne
9000b6fc:	3301      	addne	r3, #1
9000b6fe:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
9000b700:	2301      	movs	r3, #1
9000b702:	8123      	strh	r3, [r4, #8]
}
9000b704:	bd38      	pop	{r3, r4, r5, pc}
	...

9000b708 <dhcp_bind>:
{
9000b708:	b523      	push	{r0, r1, r5, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
9000b70a:	4605      	mov	r5, r0
9000b70c:	b940      	cbnz	r0, 9000b720 <dhcp_bind+0x18>
9000b70e:	4b3d      	ldr	r3, [pc, #244]	; (9000b804 <dhcp_bind+0xfc>)
9000b710:	f240 4215 	movw	r2, #1045	; 0x415
9000b714:	493c      	ldr	r1, [pc, #240]	; (9000b808 <dhcp_bind+0x100>)
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
9000b716:	483d      	ldr	r0, [pc, #244]	; (9000b80c <dhcp_bind+0x104>)
9000b718:	f01d feda 	bl	900294d0 <iprintf>
}
9000b71c:	b002      	add	sp, #8
9000b71e:	bd20      	pop	{r5, pc}
  dhcp = netif_dhcp_data(netif);
9000b720:	6a40      	ldr	r0, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
9000b722:	b920      	cbnz	r0, 9000b72e <dhcp_bind+0x26>
9000b724:	4b37      	ldr	r3, [pc, #220]	; (9000b804 <dhcp_bind+0xfc>)
9000b726:	f240 4217 	movw	r2, #1047	; 0x417
9000b72a:	4939      	ldr	r1, [pc, #228]	; (9000b810 <dhcp_bind+0x108>)
9000b72c:	e7f3      	b.n	9000b716 <dhcp_bind+0xe>
  dhcp->lease_used = 0;
9000b72e:	2300      	movs	r3, #0
9000b730:	8243      	strh	r3, [r0, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
9000b732:	6a83      	ldr	r3, [r0, #40]	; 0x28
9000b734:	1c5a      	adds	r2, r3, #1
9000b736:	d00c      	beq.n	9000b752 <dhcp_bind+0x4a>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
9000b738:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
9000b73a:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
9000b73e:	bf36      	itet	cc
9000b740:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
9000b742:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
9000b746:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t0_timeout = (u16_t)timeout;
9000b74a:	b29a      	uxth	r2, r3
    if (dhcp->t0_timeout == 0) {
9000b74c:	2b00      	cmp	r3, #0
9000b74e:	d042      	beq.n	9000b7d6 <dhcp_bind+0xce>
    dhcp->t0_timeout = (u16_t)timeout;
9000b750:	8282      	strh	r2, [r0, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
9000b752:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
9000b754:	1c59      	adds	r1, r3, #1
9000b756:	d00e      	beq.n	9000b776 <dhcp_bind+0x6e>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
9000b758:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
9000b75a:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
9000b75e:	bf36      	itet	cc
9000b760:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
9000b762:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
9000b766:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t1_timeout = (u16_t)timeout;
9000b76a:	b29a      	uxth	r2, r3
    if (dhcp->t1_timeout == 0) {
9000b76c:	2b00      	cmp	r3, #0
9000b76e:	d035      	beq.n	9000b7dc <dhcp_bind+0xd4>
    dhcp->t1_timeout = (u16_t)timeout;
9000b770:	8142      	strh	r2, [r0, #10]
    dhcp->t1_renew_time = dhcp->t1_timeout;
9000b772:	8943      	ldrh	r3, [r0, #10]
9000b774:	81c3      	strh	r3, [r0, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
9000b776:	6b03      	ldr	r3, [r0, #48]	; 0x30
9000b778:	1c5a      	adds	r2, r3, #1
9000b77a:	d00d      	beq.n	9000b798 <dhcp_bind+0x90>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
9000b77c:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
9000b77e:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
9000b782:	bf36      	itet	cc
9000b784:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
9000b786:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
9000b78a:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t2_timeout = (u16_t)timeout;
9000b78e:	b29a      	uxth	r2, r3
    if (dhcp->t2_timeout == 0) {
9000b790:	b33b      	cbz	r3, 9000b7e2 <dhcp_bind+0xda>
    dhcp->t2_timeout = (u16_t)timeout;
9000b792:	8182      	strh	r2, [r0, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
9000b794:	8983      	ldrh	r3, [r0, #12]
9000b796:	8203      	strh	r3, [r0, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
9000b798:	8983      	ldrh	r3, [r0, #12]
9000b79a:	8942      	ldrh	r2, [r0, #10]
9000b79c:	429a      	cmp	r2, r3
9000b79e:	d302      	bcc.n	9000b7a6 <dhcp_bind+0x9e>
9000b7a0:	b10b      	cbz	r3, 9000b7a6 <dhcp_bind+0x9e>
    dhcp->t1_timeout = 0;
9000b7a2:	2300      	movs	r3, #0
9000b7a4:	8143      	strh	r3, [r0, #10]
  if (dhcp->subnet_mask_given) {
9000b7a6:	79c3      	ldrb	r3, [r0, #7]
9000b7a8:	b1f3      	cbz	r3, 9000b7e8 <dhcp_bind+0xe0>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
9000b7aa:	6a03      	ldr	r3, [r0, #32]
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
9000b7ac:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
9000b7ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
9000b7b0:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
9000b7b2:	b92b      	cbnz	r3, 9000b7c0 <dhcp_bind+0xb8>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
9000b7b4:	69c3      	ldr	r3, [r0, #28]
9000b7b6:	9a00      	ldr	r2, [sp, #0]
9000b7b8:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
9000b7ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
9000b7be:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
9000b7c0:	210a      	movs	r1, #10
9000b7c2:	f7ff fca4 	bl	9000b10e <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
9000b7c6:	ab01      	add	r3, sp, #4
9000b7c8:	f100 011c 	add.w	r1, r0, #28
9000b7cc:	466a      	mov	r2, sp
9000b7ce:	4628      	mov	r0, r5
9000b7d0:	f002 fdfc 	bl	9000e3cc <netif_set_addr>
9000b7d4:	e7a2      	b.n	9000b71c <dhcp_bind+0x14>
      dhcp->t0_timeout = 1;
9000b7d6:	2301      	movs	r3, #1
9000b7d8:	8283      	strh	r3, [r0, #20]
9000b7da:	e7ba      	b.n	9000b752 <dhcp_bind+0x4a>
      dhcp->t1_timeout = 1;
9000b7dc:	2301      	movs	r3, #1
9000b7de:	8143      	strh	r3, [r0, #10]
9000b7e0:	e7c7      	b.n	9000b772 <dhcp_bind+0x6a>
      dhcp->t2_timeout = 1;
9000b7e2:	2301      	movs	r3, #1
9000b7e4:	8183      	strh	r3, [r0, #12]
9000b7e6:	e7d5      	b.n	9000b794 <dhcp_bind+0x8c>
    if (first_octet <= 127) {
9000b7e8:	f990 201c 	ldrsb.w	r2, [r0, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
9000b7ec:	7f03      	ldrb	r3, [r0, #28]
    if (first_octet <= 127) {
9000b7ee:	2a00      	cmp	r2, #0
9000b7f0:	db01      	blt.n	9000b7f6 <dhcp_bind+0xee>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
9000b7f2:	23ff      	movs	r3, #255	; 0xff
9000b7f4:	e7da      	b.n	9000b7ac <dhcp_bind+0xa4>
    } else if (first_octet >= 192) {
9000b7f6:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
9000b7f8:	bf8c      	ite	hi
9000b7fa:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
9000b7fe:	f64f 73ff 	movwls	r3, #65535	; 0xffff
9000b802:	e7d3      	b.n	9000b7ac <dhcp_bind+0xa4>
9000b804:	9002b96f 	.word	0x9002b96f
9000b808:	9002bb72 	.word	0x9002bb72
9000b80c:	9002a254 	.word	0x9002a254
9000b810:	9002bb8b 	.word	0x9002bb8b

9000b814 <dhcp_inc_pcb_refcount>:
{
9000b814:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
9000b816:	4d15      	ldr	r5, [pc, #84]	; (9000b86c <dhcp_inc_pcb_refcount+0x58>)
9000b818:	782b      	ldrb	r3, [r5, #0]
9000b81a:	b9f3      	cbnz	r3, 9000b85a <dhcp_inc_pcb_refcount+0x46>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
9000b81c:	4c14      	ldr	r4, [pc, #80]	; (9000b870 <dhcp_inc_pcb_refcount+0x5c>)
9000b81e:	6823      	ldr	r3, [r4, #0]
9000b820:	b12b      	cbz	r3, 9000b82e <dhcp_inc_pcb_refcount+0x1a>
9000b822:	4b14      	ldr	r3, [pc, #80]	; (9000b874 <dhcp_inc_pcb_refcount+0x60>)
9000b824:	22e5      	movs	r2, #229	; 0xe5
9000b826:	4914      	ldr	r1, [pc, #80]	; (9000b878 <dhcp_inc_pcb_refcount+0x64>)
9000b828:	4814      	ldr	r0, [pc, #80]	; (9000b87c <dhcp_inc_pcb_refcount+0x68>)
9000b82a:	f01d fe51 	bl	900294d0 <iprintf>
    dhcp_pcb = udp_new();
9000b82e:	f008 fafb 	bl	90013e28 <udp_new>
9000b832:	6020      	str	r0, [r4, #0]
    if (dhcp_pcb == NULL) {
9000b834:	b1b0      	cbz	r0, 9000b864 <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
9000b836:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
9000b838:	4911      	ldr	r1, [pc, #68]	; (9000b880 <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
9000b83a:	f042 0220 	orr.w	r2, r2, #32
9000b83e:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
9000b840:	2244      	movs	r2, #68	; 0x44
9000b842:	f008 f8df 	bl	90013a04 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
9000b846:	2243      	movs	r2, #67	; 0x43
9000b848:	490d      	ldr	r1, [pc, #52]	; (9000b880 <dhcp_inc_pcb_refcount+0x6c>)
9000b84a:	6820      	ldr	r0, [r4, #0]
9000b84c:	f008 fa78 	bl	90013d40 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
9000b850:	2200      	movs	r2, #0
9000b852:	490c      	ldr	r1, [pc, #48]	; (9000b884 <dhcp_inc_pcb_refcount+0x70>)
9000b854:	6820      	ldr	r0, [r4, #0]
9000b856:	f008 faaf 	bl	90013db8 <udp_recv>
  dhcp_pcb_refcount++;
9000b85a:	782b      	ldrb	r3, [r5, #0]
  return ERR_OK;
9000b85c:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
9000b85e:	3301      	adds	r3, #1
9000b860:	702b      	strb	r3, [r5, #0]
}
9000b862:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
9000b864:	f04f 30ff 	mov.w	r0, #4294967295
9000b868:	e7fb      	b.n	9000b862 <dhcp_inc_pcb_refcount+0x4e>
9000b86a:	bf00      	nop
9000b86c:	2002665c 	.word	0x2002665c
9000b870:	20026658 	.word	0x20026658
9000b874:	9002b96f 	.word	0x9002b96f
9000b878:	9002bba3 	.word	0x9002bba3
9000b87c:	9002a254 	.word	0x9002a254
9000b880:	9002c1b0 	.word	0x9002c1b0
9000b884:	9000b961 	.word	0x9000b961

9000b888 <dhcp_dec_pcb_refcount>:
{
9000b888:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
9000b88a:	4d0a      	ldr	r5, [pc, #40]	; (9000b8b4 <dhcp_dec_pcb_refcount+0x2c>)
9000b88c:	782b      	ldrb	r3, [r5, #0]
9000b88e:	b92b      	cbnz	r3, 9000b89c <dhcp_dec_pcb_refcount+0x14>
9000b890:	4b09      	ldr	r3, [pc, #36]	; (9000b8b8 <dhcp_dec_pcb_refcount+0x30>)
9000b892:	22ff      	movs	r2, #255	; 0xff
9000b894:	4909      	ldr	r1, [pc, #36]	; (9000b8bc <dhcp_dec_pcb_refcount+0x34>)
9000b896:	480a      	ldr	r0, [pc, #40]	; (9000b8c0 <dhcp_dec_pcb_refcount+0x38>)
9000b898:	f01d fe1a 	bl	900294d0 <iprintf>
  dhcp_pcb_refcount--;
9000b89c:	782c      	ldrb	r4, [r5, #0]
9000b89e:	3c01      	subs	r4, #1
9000b8a0:	b2e4      	uxtb	r4, r4
9000b8a2:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
9000b8a4:	b924      	cbnz	r4, 9000b8b0 <dhcp_dec_pcb_refcount+0x28>
    udp_remove(dhcp_pcb);
9000b8a6:	4d07      	ldr	r5, [pc, #28]	; (9000b8c4 <dhcp_dec_pcb_refcount+0x3c>)
9000b8a8:	6828      	ldr	r0, [r5, #0]
9000b8aa:	f008 fa97 	bl	90013ddc <udp_remove>
    dhcp_pcb = NULL;
9000b8ae:	602c      	str	r4, [r5, #0]
}
9000b8b0:	bd38      	pop	{r3, r4, r5, pc}
9000b8b2:	bf00      	nop
9000b8b4:	2002665c 	.word	0x2002665c
9000b8b8:	9002b96f 	.word	0x9002b96f
9000b8bc:	9002bbc8 	.word	0x9002bbc8
9000b8c0:	9002a254 	.word	0x9002a254
9000b8c4:	20026658 	.word	0x20026658

9000b8c8 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
9000b8c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
9000b8ca:	2300      	movs	r3, #0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
9000b8cc:	4d22      	ldr	r5, [pc, #136]	; (9000b958 <dhcp_handle_ack.isra.0+0x90>)
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
9000b8ce:	4604      	mov	r4, r0
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
9000b8d0:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
9000b8d4:	78eb      	ldrb	r3, [r5, #3]
9000b8d6:	b113      	cbz	r3, 9000b8de <dhcp_handle_ack.isra.0+0x16>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
9000b8d8:	4b20      	ldr	r3, [pc, #128]	; (9000b95c <dhcp_handle_ack.isra.0+0x94>)
9000b8da:	68db      	ldr	r3, [r3, #12]
9000b8dc:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
9000b8de:	792b      	ldrb	r3, [r5, #4]
9000b8e0:	2b00      	cmp	r3, #0
9000b8e2:	d031      	beq.n	9000b948 <dhcp_handle_ack.isra.0+0x80>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
9000b8e4:	4b1d      	ldr	r3, [pc, #116]	; (9000b95c <dhcp_handle_ack.isra.0+0x94>)
9000b8e6:	691b      	ldr	r3, [r3, #16]
9000b8e8:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
9000b8ea:	796b      	ldrb	r3, [r5, #5]
9000b8ec:	2b00      	cmp	r3, #0
9000b8ee:	d02e      	beq.n	9000b94e <dhcp_handle_ack.isra.0+0x86>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
9000b8f0:	4b1a      	ldr	r3, [pc, #104]	; (9000b95c <dhcp_handle_ack.isra.0+0x94>)
9000b8f2:	695b      	ldr	r3, [r3, #20]
9000b8f4:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
9000b8f6:	690b      	ldr	r3, [r1, #16]
9000b8f8:	61e3      	str	r3, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
9000b8fa:	79ab      	ldrb	r3, [r5, #6]
9000b8fc:	b12b      	cbz	r3, 9000b90a <dhcp_handle_ack.isra.0+0x42>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
9000b8fe:	4b17      	ldr	r3, [pc, #92]	; (9000b95c <dhcp_handle_ack.isra.0+0x94>)
9000b900:	6998      	ldr	r0, [r3, #24]
9000b902:	f7ff fc02 	bl	9000b10a <lwip_htonl>
    dhcp->subnet_mask_given = 1;
9000b906:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
9000b908:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 0;
9000b90a:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
9000b90c:	79eb      	ldrb	r3, [r5, #7]
9000b90e:	b123      	cbz	r3, 9000b91a <dhcp_handle_ack.isra.0+0x52>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
9000b910:	4b12      	ldr	r3, [pc, #72]	; (9000b95c <dhcp_handle_ack.isra.0+0x94>)
9000b912:	69d8      	ldr	r0, [r3, #28]
9000b914:	f7ff fbf9 	bl	9000b10a <lwip_htonl>
9000b918:	6260      	str	r0, [r4, #36]	; 0x24
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
9000b91a:	7a2b      	ldrb	r3, [r5, #8]
9000b91c:	b193      	cbz	r3, 9000b944 <dhcp_handle_ack.isra.0+0x7c>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
9000b91e:	4c0f      	ldr	r4, [pc, #60]	; (9000b95c <dhcp_handle_ack.isra.0+0x94>)
9000b920:	6a20      	ldr	r0, [r4, #32]
9000b922:	f7ff fbf2 	bl	9000b10a <lwip_htonl>
    dns_setserver(n, &dns_addr);
9000b926:	a901      	add	r1, sp, #4
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
9000b928:	9001      	str	r0, [sp, #4]
    dns_setserver(n, &dns_addr);
9000b92a:	2000      	movs	r0, #0
9000b92c:	f000 feba 	bl	9000c6a4 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
9000b930:	7a6b      	ldrb	r3, [r5, #9]
9000b932:	b13b      	cbz	r3, 9000b944 <dhcp_handle_ack.isra.0+0x7c>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
9000b934:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000b936:	f7ff fbe8 	bl	9000b10a <lwip_htonl>
    dns_setserver(n, &dns_addr);
9000b93a:	a901      	add	r1, sp, #4
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
9000b93c:	9001      	str	r0, [sp, #4]
    dns_setserver(n, &dns_addr);
9000b93e:	2001      	movs	r0, #1
9000b940:	f000 feb0 	bl	9000c6a4 <dns_setserver>
}
9000b944:	b003      	add	sp, #12
9000b946:	bd30      	pop	{r4, r5, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
9000b948:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b94a:	085b      	lsrs	r3, r3, #1
9000b94c:	e7cc      	b.n	9000b8e8 <dhcp_handle_ack.isra.0+0x20>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
9000b94e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b950:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
9000b954:	08db      	lsrs	r3, r3, #3
9000b956:	e7cd      	b.n	9000b8f4 <dhcp_handle_ack.isra.0+0x2c>
9000b958:	20027324 	.word	0x20027324
9000b95c:	20027330 	.word	0x20027330

9000b960 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
9000b960:	4ba9      	ldr	r3, [pc, #676]	; (9000bc08 <dhcp_recv+0x2a8>)
{
9000b962:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
9000b966:	685f      	ldr	r7, [r3, #4]
{
9000b968:	b08b      	sub	sp, #44	; 0x2c
9000b96a:	4692      	mov	sl, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
9000b96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000b96e:	9301      	str	r3, [sp, #4]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
9000b970:	2b00      	cmp	r3, #0
9000b972:	d03c      	beq.n	9000b9ee <dhcp_recv+0x8e>
9000b974:	791b      	ldrb	r3, [r3, #4]
9000b976:	2b00      	cmp	r3, #0
9000b978:	d039      	beq.n	9000b9ee <dhcp_recv+0x8e>
  if (p->len < DHCP_MIN_REPLY_LEN) {
9000b97a:	8953      	ldrh	r3, [r2, #10]
9000b97c:	2b2b      	cmp	r3, #43	; 0x2b
9000b97e:	d936      	bls.n	9000b9ee <dhcp_recv+0x8e>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
9000b980:	6852      	ldr	r2, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
9000b982:	7813      	ldrb	r3, [r2, #0]
9000b984:	2b02      	cmp	r3, #2
9000b986:	d132      	bne.n	9000b9ee <dhcp_recv+0x8e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
9000b988:	f897 4030 	ldrb.w	r4, [r7, #48]	; 0x30
9000b98c:	f107 002a 	add.w	r0, r7, #42	; 0x2a
9000b990:	f102 011c 	add.w	r1, r2, #28
9000b994:	2300      	movs	r3, #0
9000b996:	b2dd      	uxtb	r5, r3
9000b998:	42ac      	cmp	r4, r5
9000b99a:	d901      	bls.n	9000b9a0 <dhcp_recv+0x40>
9000b99c:	2b06      	cmp	r3, #6
9000b99e:	d11f      	bne.n	9000b9e0 <dhcp_recv+0x80>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
9000b9a0:	6850      	ldr	r0, [r2, #4]
9000b9a2:	f7ff fbb2 	bl	9000b10a <lwip_htonl>
9000b9a6:	9b01      	ldr	r3, [sp, #4]
9000b9a8:	681b      	ldr	r3, [r3, #0]
9000b9aa:	4298      	cmp	r0, r3
9000b9ac:	d11f      	bne.n	9000b9ee <dhcp_recv+0x8e>
  dhcp_clear_all_options(dhcp);
9000b9ae:	4b97      	ldr	r3, [pc, #604]	; (9000bc0c <dhcp_recv+0x2ac>)
9000b9b0:	2200      	movs	r2, #0
9000b9b2:	605a      	str	r2, [r3, #4]
9000b9b4:	811a      	strh	r2, [r3, #8]
  if (p->len < DHCP_SNAME_OFS) {
9000b9b6:	f8ba 100a 	ldrh.w	r1, [sl, #10]
  dhcp_clear_all_options(dhcp);
9000b9ba:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
9000b9bc:	292b      	cmp	r1, #43	; 0x2b
9000b9be:	d916      	bls.n	9000b9ee <dhcp_recv+0x8e>
  options_idx_max = p->tot_len;
9000b9c0:	f8ba 9008 	ldrh.w	r9, [sl, #8]
  options_idx = DHCP_OPTIONS_OFS;
9000b9c4:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
  int parse_sname_as_options = 0;
9000b9c8:	9204      	str	r2, [sp, #16]
9000b9ca:	9303      	str	r3, [sp, #12]
  options_idx = DHCP_OPTIONS_OFS;
9000b9cc:	46d0      	mov	r8, sl
  while ((q != NULL) && (options_idx >= q->len)) {
9000b9ce:	f8b8 300a 	ldrh.w	r3, [r8, #10]
9000b9d2:	455b      	cmp	r3, fp
9000b9d4:	d911      	bls.n	9000b9fa <dhcp_recv+0x9a>
  options = (u8_t *)q->payload;
9000b9d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
9000b9da:	465e      	mov	r6, fp
9000b9dc:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
9000b9de:	e0eb      	b.n	9000bbb8 <dhcp_recv+0x258>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
9000b9e0:	f810 6b01 	ldrb.w	r6, [r0], #1
9000b9e4:	3301      	adds	r3, #1
9000b9e6:	f811 5b01 	ldrb.w	r5, [r1], #1
9000b9ea:	42ae      	cmp	r6, r5
9000b9ec:	d0d3      	beq.n	9000b996 <dhcp_recv+0x36>
  pbuf_free(p);
9000b9ee:	4650      	mov	r0, sl
9000b9f0:	f002 ff10 	bl	9000e814 <pbuf_free>
}
9000b9f4:	b00b      	add	sp, #44	; 0x2c
9000b9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options_idx = (u16_t)(options_idx - q->len);
9000b9fa:	ebab 0203 	sub.w	r2, fp, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
9000b9fe:	eba9 0903 	sub.w	r9, r9, r3
    q = q->next;
9000ba02:	f8d8 8000 	ldr.w	r8, [r8]
    options_idx = (u16_t)(options_idx - q->len);
9000ba06:	fa1f fb82 	uxth.w	fp, r2
    options_idx_max = (u16_t)(options_idx_max - q->len);
9000ba0a:	fa1f f989 	uxth.w	r9, r9
  while ((q != NULL) && (options_idx >= q->len)) {
9000ba0e:	f1b8 0f00 	cmp.w	r8, #0
9000ba12:	d1dc      	bne.n	9000b9ce <dhcp_recv+0x6e>
9000ba14:	e7eb      	b.n	9000b9ee <dhcp_recv+0x8e>
    u16_t val_offset = (u16_t)(offset + 2);
9000ba16:	1cb3      	adds	r3, r6, #2
9000ba18:	b29b      	uxth	r3, r3
    if (val_offset < offset) {
9000ba1a:	42b3      	cmp	r3, r6
    u16_t val_offset = (u16_t)(offset + 2);
9000ba1c:	9302      	str	r3, [sp, #8]
    if (val_offset < offset) {
9000ba1e:	d3e6      	bcc.n	9000b9ee <dhcp_recv+0x8e>
    if ((offset + 1) < q->len) {
9000ba20:	1c73      	adds	r3, r6, #1
9000ba22:	f8b8 100a 	ldrh.w	r1, [r8, #10]
9000ba26:	428b      	cmp	r3, r1
9000ba28:	da0e      	bge.n	9000ba48 <dhcp_recv+0xe8>
      len = options[offset + 1];
9000ba2a:	9b05      	ldr	r3, [sp, #20]
9000ba2c:	4433      	add	r3, r6
9000ba2e:	785b      	ldrb	r3, [r3, #1]
    switch (op) {
9000ba30:	2a06      	cmp	r2, #6
9000ba32:	f200 81dc 	bhi.w	9000bdee <dhcp_recv+0x48e>
9000ba36:	2a06      	cmp	r2, #6
9000ba38:	f200 8088 	bhi.w	9000bb4c <dhcp_recv+0x1ec>
9000ba3c:	e8df f002 	tbb	[pc, r2]
9000ba40:	14860c68 	.word	0x14860c68
9000ba44:	8686      	.short	0x8686
9000ba46:	1d          	.byte	0x1d
9000ba47:	00          	.byte	0x00
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
9000ba48:	f8d8 3000 	ldr.w	r3, [r8]
9000ba4c:	2b00      	cmp	r3, #0
9000ba4e:	f000 814b 	beq.w	9000bce8 <dhcp_recv+0x388>
9000ba52:	685b      	ldr	r3, [r3, #4]
9000ba54:	781b      	ldrb	r3, [r3, #0]
9000ba56:	e7eb      	b.n	9000ba30 <dhcp_recv+0xd0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
9000ba58:	2b04      	cmp	r3, #4
9000ba5a:	f000 817c 	beq.w	9000bd56 <dhcp_recv+0x3f6>
9000ba5e:	4b6c      	ldr	r3, [pc, #432]	; (9000bc10 <dhcp_recv+0x2b0>)
9000ba60:	f240 622e 	movw	r2, #1582	; 0x62e
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
9000ba64:	496b      	ldr	r1, [pc, #428]	; (9000bc14 <dhcp_recv+0x2b4>)
9000ba66:	e00e      	b.n	9000ba86 <dhcp_recv+0x126>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
9000ba68:	2b03      	cmp	r3, #3
9000ba6a:	f200 81ae 	bhi.w	9000bdca <dhcp_recv+0x46a>
9000ba6e:	4b68      	ldr	r3, [pc, #416]	; (9000bc10 <dhcp_recv+0x2b0>)
9000ba70:	f240 6233 	movw	r2, #1587	; 0x633
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
9000ba74:	4968      	ldr	r1, [pc, #416]	; (9000bc18 <dhcp_recv+0x2b8>)
9000ba76:	e006      	b.n	9000ba86 <dhcp_recv+0x126>
    switch (op) {
9000ba78:	2300      	movs	r3, #0
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
9000ba7a:	0799      	lsls	r1, r3, #30
9000ba7c:	d007      	beq.n	9000ba8e <dhcp_recv+0x12e>
9000ba7e:	4b64      	ldr	r3, [pc, #400]	; (9000bc10 <dhcp_recv+0x2b0>)
9000ba80:	f240 6239 	movw	r2, #1593	; 0x639
9000ba84:	4965      	ldr	r1, [pc, #404]	; (9000bc1c <dhcp_recv+0x2bc>)
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
9000ba86:	4866      	ldr	r0, [pc, #408]	; (9000bc20 <dhcp_recv+0x2c0>)
9000ba88:	f01d fd22 	bl	900294d0 <iprintf>
9000ba8c:	e7af      	b.n	9000b9ee <dhcp_recv+0x8e>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
9000ba8e:	2b08      	cmp	r3, #8
9000ba90:	461c      	mov	r4, r3
9000ba92:	bf28      	it	cs
9000ba94:	2408      	movcs	r4, #8
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
9000ba96:	429c      	cmp	r4, r3
9000ba98:	d936      	bls.n	9000bb08 <dhcp_recv+0x1a8>
9000ba9a:	4b5d      	ldr	r3, [pc, #372]	; (9000bc10 <dhcp_recv+0x2b0>)
9000ba9c:	f240 623c 	movw	r2, #1596	; 0x63c
9000baa0:	e7e8      	b.n	9000ba74 <dhcp_recv+0x114>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
9000baa2:	2b04      	cmp	r3, #4
9000baa4:	f000 8194 	beq.w	9000bdd0 <dhcp_recv+0x470>
9000baa8:	4b59      	ldr	r3, [pc, #356]	; (9000bc10 <dhcp_recv+0x2b0>)
9000baaa:	f240 6241 	movw	r2, #1601	; 0x641
9000baae:	e7d9      	b.n	9000ba64 <dhcp_recv+0x104>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
9000bab0:	2b01      	cmp	r3, #1
9000bab2:	d004      	beq.n	9000babe <dhcp_recv+0x15e>
9000bab4:	4b56      	ldr	r3, [pc, #344]	; (9000bc10 <dhcp_recv+0x2b0>)
9000bab6:	f240 624f 	movw	r2, #1615	; 0x64f
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
9000baba:	495a      	ldr	r1, [pc, #360]	; (9000bc24 <dhcp_recv+0x2c4>)
9000babc:	e7e3      	b.n	9000ba86 <dhcp_recv+0x126>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
9000babe:	f1bb 0ff0 	cmp.w	fp, #240	; 0xf0
9000bac2:	f000 8188 	beq.w	9000bdd6 <dhcp_recv+0x476>
9000bac6:	4b52      	ldr	r3, [pc, #328]	; (9000bc10 <dhcp_recv+0x2b0>)
9000bac8:	f240 6251 	movw	r2, #1617	; 0x651
9000bacc:	4956      	ldr	r1, [pc, #344]	; (9000bc28 <dhcp_recv+0x2c8>)
9000bace:	e7da      	b.n	9000ba86 <dhcp_recv+0x126>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
9000bad0:	2b01      	cmp	r3, #1
9000bad2:	f000 8186 	beq.w	9000bde2 <dhcp_recv+0x482>
9000bad6:	4b4e      	ldr	r3, [pc, #312]	; (9000bc10 <dhcp_recv+0x2b0>)
9000bad8:	f240 6255 	movw	r2, #1621	; 0x655
9000badc:	e7ed      	b.n	9000baba <dhcp_recv+0x15a>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
9000bade:	2b04      	cmp	r3, #4
9000bae0:	f000 817c 	beq.w	9000bddc <dhcp_recv+0x47c>
9000bae4:	4b4a      	ldr	r3, [pc, #296]	; (9000bc10 <dhcp_recv+0x2b0>)
9000bae6:	f240 6259 	movw	r2, #1625	; 0x659
9000baea:	e7bb      	b.n	9000ba64 <dhcp_recv+0x104>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
9000baec:	2b04      	cmp	r3, #4
9000baee:	f000 8178 	beq.w	9000bde2 <dhcp_recv+0x482>
9000baf2:	4b47      	ldr	r3, [pc, #284]	; (9000bc10 <dhcp_recv+0x2b0>)
9000baf4:	f240 625d 	movw	r2, #1629	; 0x65d
9000baf8:	e7b4      	b.n	9000ba64 <dhcp_recv+0x104>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
9000bafa:	2b04      	cmp	r3, #4
9000bafc:	f000 8174 	beq.w	9000bde8 <dhcp_recv+0x488>
9000bb00:	4b43      	ldr	r3, [pc, #268]	; (9000bc10 <dhcp_recv+0x2b0>)
9000bb02:	f240 6261 	movw	r2, #1633	; 0x661
9000bb06:	e7ad      	b.n	9000ba64 <dhcp_recv+0x104>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
9000bb08:	2508      	movs	r5, #8
    if (op == DHCP_OPTION_PAD) {
9000bb0a:	2a00      	cmp	r2, #0
9000bb0c:	f040 8125 	bne.w	9000bd5a <dhcp_recv+0x3fa>
      offset++;
9000bb10:	3601      	adds	r6, #1
9000bb12:	b2b6      	uxth	r6, r6
    if (offset >= q->len) {
9000bb14:	f8b8 300a 	ldrh.w	r3, [r8, #10]
9000bb18:	42b3      	cmp	r3, r6
9000bb1a:	d84d      	bhi.n	9000bbb8 <dhcp_recv+0x258>
      offset = (u16_t)(offset - q->len);
9000bb1c:	1af6      	subs	r6, r6, r3
      offset_max = (u16_t)(offset_max - q->len);
9000bb1e:	eba9 0903 	sub.w	r9, r9, r3
      offset = (u16_t)(offset - q->len);
9000bb22:	b2b6      	uxth	r6, r6
      offset_max = (u16_t)(offset_max - q->len);
9000bb24:	fa1f f989 	uxth.w	r9, r9
      if (offset < offset_max) {
9000bb28:	454e      	cmp	r6, r9
9000bb2a:	f4bf af60 	bcs.w	9000b9ee <dhcp_recv+0x8e>
        q = q->next;
9000bb2e:	f8d8 8000 	ldr.w	r8, [r8]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
9000bb32:	f1b8 0f00 	cmp.w	r8, #0
9000bb36:	d13c      	bne.n	9000bbb2 <dhcp_recv+0x252>
9000bb38:	4b35      	ldr	r3, [pc, #212]	; (9000bc10 <dhcp_recv+0x2b0>)
9000bb3a:	f240 629d 	movw	r2, #1693	; 0x69d
9000bb3e:	493b      	ldr	r1, [pc, #236]	; (9000bc2c <dhcp_recv+0x2cc>)
9000bb40:	e7a1      	b.n	9000ba86 <dhcp_recv+0x126>
    switch (op) {
9000bb42:	2400      	movs	r4, #0
9000bb44:	f04f 35ff 	mov.w	r5, #4294967295
9000bb48:	4623      	mov	r3, r4
9000bb4a:	e7de      	b.n	9000bb0a <dhcp_recv+0x1aa>
9000bb4c:	f04f 35ff 	mov.w	r5, #4294967295
9000bb50:	2400      	movs	r4, #0
9000bb52:	e7da      	b.n	9000bb0a <dhcp_recv+0x1aa>
            dhcp_got_option(dhcp, decode_idx);
9000bb54:	9a06      	ldr	r2, [sp, #24]
9000bb56:	2301      	movs	r3, #1
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
9000bb58:	9809      	ldr	r0, [sp, #36]	; 0x24
            decode_len = (u8_t)(decode_len - 4);
9000bb5a:	3c04      	subs	r4, #4
            dhcp_got_option(dhcp, decode_idx);
9000bb5c:	f802 3b01 	strb.w	r3, [r2], #1
9000bb60:	9206      	str	r2, [sp, #24]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
9000bb62:	f7ff fad2 	bl	9000b10a <lwip_htonl>
9000bb66:	4b32      	ldr	r3, [pc, #200]	; (9000bc30 <dhcp_recv+0x2d0>)
            decode_len = (u8_t)(decode_len - 4);
9000bb68:	b2e4      	uxtb	r4, r4
            if (next_val_offset < val_offset) {
9000bb6a:	9a02      	ldr	r2, [sp, #8]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
9000bb6c:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
            next_val_offset = (u16_t)(val_offset + 4);
9000bb70:	9b02      	ldr	r3, [sp, #8]
9000bb72:	3304      	adds	r3, #4
9000bb74:	b29b      	uxth	r3, r3
            if (next_val_offset < val_offset) {
9000bb76:	429a      	cmp	r2, r3
9000bb78:	f63f af39 	bhi.w	9000b9ee <dhcp_recv+0x8e>
            decode_idx++;
9000bb7c:	3501      	adds	r5, #1
            goto decode_next;
9000bb7e:	9302      	str	r3, [sp, #8]
9000bb80:	e0fc      	b.n	9000bd7c <dhcp_recv+0x41c>
          } else if (decode_len == 4) {
9000bb82:	d10b      	bne.n	9000bb9c <dhcp_recv+0x23c>
            value = lwip_ntohl(value);
9000bb84:	9809      	ldr	r0, [sp, #36]	; 0x24
9000bb86:	f7ff fac0 	bl	9000b10a <lwip_htonl>
9000bb8a:	9009      	str	r0, [sp, #36]	; 0x24
          dhcp_got_option(dhcp, decode_idx);
9000bb8c:	2301      	movs	r3, #1
9000bb8e:	9a03      	ldr	r2, [sp, #12]
9000bb90:	5553      	strb	r3, [r2, r5]
          dhcp_set_option_value(dhcp, decode_idx, value);
9000bb92:	4b27      	ldr	r3, [pc, #156]	; (9000bc30 <dhcp_recv+0x2d0>)
9000bb94:	9a09      	ldr	r2, [sp, #36]	; 0x24
9000bb96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
9000bb9a:	e7bb      	b.n	9000bb14 <dhcp_recv+0x1b4>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
9000bb9c:	2c01      	cmp	r4, #1
9000bb9e:	d004      	beq.n	9000bbaa <dhcp_recv+0x24a>
9000bba0:	4b1b      	ldr	r3, [pc, #108]	; (9000bc10 <dhcp_recv+0x2b0>)
9000bba2:	f44f 62d2 	mov.w	r2, #1680	; 0x690
9000bba6:	4923      	ldr	r1, [pc, #140]	; (9000bc34 <dhcp_recv+0x2d4>)
9000bba8:	e76d      	b.n	9000ba86 <dhcp_recv+0x126>
            value = ((u8_t *)&value)[0];
9000bbaa:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
9000bbae:	9309      	str	r3, [sp, #36]	; 0x24
9000bbb0:	e7ec      	b.n	9000bb8c <dhcp_recv+0x22c>
        options = (u8_t *)q->payload;
9000bbb2:	f8d8 3004 	ldr.w	r3, [r8, #4]
9000bbb6:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
9000bbb8:	454e      	cmp	r6, r9
9000bbba:	d204      	bcs.n	9000bbc6 <dhcp_recv+0x266>
9000bbbc:	9b05      	ldr	r3, [sp, #20]
9000bbbe:	5d9a      	ldrb	r2, [r3, r6]
9000bbc0:	2aff      	cmp	r2, #255	; 0xff
9000bbc2:	f47f af28 	bne.w	9000ba16 <dhcp_recv+0xb6>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
9000bbc6:	9b03      	ldr	r3, [sp, #12]
9000bbc8:	781b      	ldrb	r3, [r3, #0]
9000bbca:	2b00      	cmp	r3, #0
9000bbcc:	d134      	bne.n	9000bc38 <dhcp_recv+0x2d8>
  } else if (parse_sname_as_options) {
9000bbce:	9b04      	ldr	r3, [sp, #16]
9000bbd0:	2b00      	cmp	r3, #0
9000bbd2:	d13a      	bne.n	9000bc4a <dhcp_recv+0x2ea>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
9000bbd4:	9b03      	ldr	r3, [sp, #12]
9000bbd6:	785b      	ldrb	r3, [r3, #1]
9000bbd8:	2b00      	cmp	r3, #0
9000bbda:	f43f af08 	beq.w	9000b9ee <dhcp_recv+0x8e>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
9000bbde:	4a14      	ldr	r2, [pc, #80]	; (9000bc30 <dhcp_recv+0x2d0>)
  msg_in = (struct dhcp_msg *)p->payload;
9000bbe0:	f8da 1004 	ldr.w	r1, [sl, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
9000bbe4:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
9000bbe6:	2b05      	cmp	r3, #5
9000bbe8:	d14a      	bne.n	9000bc80 <dhcp_recv+0x320>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
9000bbea:	9b01      	ldr	r3, [sp, #4]
9000bbec:	795b      	ldrb	r3, [r3, #5]
9000bbee:	2b01      	cmp	r3, #1
9000bbf0:	d13b      	bne.n	9000bc6a <dhcp_recv+0x30a>
      dhcp_handle_ack(netif, msg_in);
9000bbf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
9000bbf4:	f7ff fe68 	bl	9000b8c8 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
9000bbf8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
        dhcp_check(netif);
9000bbfc:	4638      	mov	r0, r7
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
9000bbfe:	071b      	lsls	r3, r3, #28
9000bc00:	d53b      	bpl.n	9000bc7a <dhcp_recv+0x31a>
        dhcp_check(netif);
9000bc02:	f7ff fd6b 	bl	9000b6dc <dhcp_check>
9000bc06:	e6f2      	b.n	9000b9ee <dhcp_recv+0x8e>
9000bc08:	20027358 	.word	0x20027358
9000bc0c:	20027324 	.word	0x20027324
9000bc10:	9002b96f 	.word	0x9002b96f
9000bc14:	9002bbec 	.word	0x9002bbec
9000bc18:	9002bbf5 	.word	0x9002bbf5
9000bc1c:	9002bc3f 	.word	0x9002bc3f
9000bc20:	9002a254 	.word	0x9002a254
9000bc24:	9002bc07 	.word	0x9002bc07
9000bc28:	9002bc10 	.word	0x9002bc10
9000bc2c:	9002bc60 	.word	0x9002bc60
9000bc30:	20027330 	.word	0x20027330
9000bc34:	9002bc4d 	.word	0x9002bc4d
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
9000bc38:	4b7b      	ldr	r3, [pc, #492]	; (9000be28 <dhcp_recv+0x4c8>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
9000bc3a:	2200      	movs	r2, #0
9000bc3c:	9903      	ldr	r1, [sp, #12]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
9000bc3e:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
9000bc40:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
9000bc42:	2b01      	cmp	r3, #1
9000bc44:	d00c      	beq.n	9000bc60 <dhcp_recv+0x300>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
9000bc46:	2b02      	cmp	r3, #2
9000bc48:	d106      	bne.n	9000bc58 <dhcp_recv+0x2f8>
    parse_sname_as_options = 0;
9000bc4a:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
9000bc4c:	f04f 096c 	mov.w	r9, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
9000bc50:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
    parse_sname_as_options = 0;
9000bc54:	9304      	str	r3, [sp, #16]
9000bc56:	e6b9      	b.n	9000b9cc <dhcp_recv+0x6c>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
9000bc58:	2b03      	cmp	r3, #3
9000bc5a:	d1b8      	bne.n	9000bbce <dhcp_recv+0x26e>
      parse_sname_as_options = 1;
9000bc5c:	2301      	movs	r3, #1
9000bc5e:	9304      	str	r3, [sp, #16]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
9000bc60:	f04f 09ec 	mov.w	r9, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
9000bc64:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
9000bc68:	e6b0      	b.n	9000b9cc <dhcp_recv+0x6c>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
9000bc6a:	3b03      	subs	r3, #3
9000bc6c:	2b02      	cmp	r3, #2
9000bc6e:	f63f aebe 	bhi.w	9000b9ee <dhcp_recv+0x8e>
      dhcp_handle_ack(netif, msg_in);
9000bc72:	6a78      	ldr	r0, [r7, #36]	; 0x24
9000bc74:	f7ff fe28 	bl	9000b8c8 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
9000bc78:	4638      	mov	r0, r7
9000bc7a:	f7ff fd45 	bl	9000b708 <dhcp_bind>
9000bc7e:	e6b6      	b.n	9000b9ee <dhcp_recv+0x8e>
  else if ((msg_type == DHCP_NAK) &&
9000bc80:	2b06      	cmp	r3, #6
9000bc82:	d115      	bne.n	9000bcb0 <dhcp_recv+0x350>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
9000bc84:	9b01      	ldr	r3, [sp, #4]
9000bc86:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
9000bc88:	1eda      	subs	r2, r3, #3
9000bc8a:	2a02      	cmp	r2, #2
9000bc8c:	d902      	bls.n	9000bc94 <dhcp_recv+0x334>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
9000bc8e:	2b01      	cmp	r3, #1
9000bc90:	f47f aead 	bne.w	9000b9ee <dhcp_recv+0x8e>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
9000bc94:	6a78      	ldr	r0, [r7, #36]	; 0x24
9000bc96:	210c      	movs	r1, #12
9000bc98:	f7ff fa39 	bl	9000b10e <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
9000bc9c:	4b63      	ldr	r3, [pc, #396]	; (9000be2c <dhcp_recv+0x4cc>)
9000bc9e:	4638      	mov	r0, r7
9000bca0:	461a      	mov	r2, r3
9000bca2:	4619      	mov	r1, r3
9000bca4:	f002 fb92 	bl	9000e3cc <netif_set_addr>
  dhcp_discover(netif);
9000bca8:	4638      	mov	r0, r7
9000bcaa:	f7ff fca1 	bl	9000b5f0 <dhcp_discover>
}
9000bcae:	e69e      	b.n	9000b9ee <dhcp_recv+0x8e>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
9000bcb0:	2b02      	cmp	r3, #2
9000bcb2:	f47f ae9c 	bne.w	9000b9ee <dhcp_recv+0x8e>
9000bcb6:	9b01      	ldr	r3, [sp, #4]
9000bcb8:	795b      	ldrb	r3, [r3, #5]
9000bcba:	2b06      	cmp	r3, #6
9000bcbc:	f47f ae97 	bne.w	9000b9ee <dhcp_recv+0x8e>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
9000bcc0:	9b03      	ldr	r3, [sp, #12]
9000bcc2:	789b      	ldrb	r3, [r3, #2]
9000bcc4:	2b00      	cmp	r3, #0
9000bcc6:	f43f ae92 	beq.w	9000b9ee <dhcp_recv+0x8e>
  struct dhcp *dhcp = netif_dhcp_data(netif);
9000bcca:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    dhcp->request_timeout = 0; /* stop timer */
9000bccc:	9b04      	ldr	r3, [sp, #16]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
9000bcce:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
9000bcd0:	8123      	strh	r3, [r4, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
9000bcd2:	9101      	str	r1, [sp, #4]
9000bcd4:	f7ff fa19 	bl	9000b10a <lwip_htonl>
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
9000bcd8:	9901      	ldr	r1, [sp, #4]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
9000bcda:	61a0      	str	r0, [r4, #24]
    dhcp_select(netif);
9000bcdc:	4638      	mov	r0, r7
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
9000bcde:	690b      	ldr	r3, [r1, #16]
9000bce0:	61e3      	str	r3, [r4, #28]
    dhcp_select(netif);
9000bce2:	f7ff fbc9 	bl	9000b478 <dhcp_select>
9000bce6:	e682      	b.n	9000b9ee <dhcp_recv+0x8e>
    switch (op) {
9000bce8:	2a06      	cmp	r2, #6
9000bcea:	d82b      	bhi.n	9000bd44 <dhcp_recv+0x3e4>
9000bcec:	2a06      	cmp	r2, #6
9000bcee:	f63f af28 	bhi.w	9000bb42 <dhcp_recv+0x1e2>
9000bcf2:	a301      	add	r3, pc, #4	; (adr r3, 9000bcf8 <dhcp_recv+0x398>)
9000bcf4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
9000bcf8:	9000bb11 	.word	0x9000bb11
9000bcfc:	9000ba5f 	.word	0x9000ba5f
9000bd00:	9000bb43 	.word	0x9000bb43
9000bd04:	9000ba6f 	.word	0x9000ba6f
9000bd08:	9000bb43 	.word	0x9000bb43
9000bd0c:	9000bb43 	.word	0x9000bb43
9000bd10:	9000ba79 	.word	0x9000ba79
9000bd14:	2908      	cmp	r1, #8
9000bd16:	f63f af14 	bhi.w	9000bb42 <dhcp_recv+0x1e2>
9000bd1a:	a301      	add	r3, pc, #4	; (adr r3, 9000bd20 <dhcp_recv+0x3c0>)
9000bd1c:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
9000bd20:	9000baa9 	.word	0x9000baa9
9000bd24:	9000bab5 	.word	0x9000bab5
9000bd28:	9000bad7 	.word	0x9000bad7
9000bd2c:	9000bae5 	.word	0x9000bae5
9000bd30:	9000bb43 	.word	0x9000bb43
9000bd34:	9000bb43 	.word	0x9000bb43
9000bd38:	9000bb43 	.word	0x9000bb43
9000bd3c:	9000baf3 	.word	0x9000baf3
9000bd40:	9000bb01 	.word	0x9000bb01
9000bd44:	f1a2 0133 	sub.w	r1, r2, #51	; 0x33
9000bd48:	b2c8      	uxtb	r0, r1
9000bd4a:	2808      	cmp	r0, #8
9000bd4c:	d9e2      	bls.n	9000bd14 <dhcp_recv+0x3b4>
9000bd4e:	f04f 35ff 	mov.w	r5, #4294967295
9000bd52:	2400      	movs	r4, #0
9000bd54:	e001      	b.n	9000bd5a <dhcp_recv+0x3fa>
9000bd56:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
9000bd58:	2506      	movs	r5, #6
      if (offset + len + 2 > 0xFFFF) {
9000bd5a:	441e      	add	r6, r3
9000bd5c:	f64f 72fd 	movw	r2, #65533	; 0xfffd
9000bd60:	4296      	cmp	r6, r2
9000bd62:	f73f ae44 	bgt.w	9000b9ee <dhcp_recv+0x8e>
      offset = (u16_t)(offset + len + 2);
9000bd66:	9a02      	ldr	r2, [sp, #8]
9000bd68:	18d6      	adds	r6, r2, r3
9000bd6a:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
9000bd6c:	2c00      	cmp	r4, #0
9000bd6e:	f43f aed1 	beq.w	9000bb14 <dhcp_recv+0x1b4>
        u32_t value = 0;
9000bd72:	2300      	movs	r3, #0
9000bd74:	9309      	str	r3, [sp, #36]	; 0x24
9000bd76:	9b03      	ldr	r3, [sp, #12]
9000bd78:	18eb      	adds	r3, r5, r3
9000bd7a:	9306      	str	r3, [sp, #24]
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
9000bd7c:	2d09      	cmp	r5, #9
9000bd7e:	d906      	bls.n	9000bd8e <dhcp_recv+0x42e>
9000bd80:	4b2b      	ldr	r3, [pc, #172]	; (9000be30 <dhcp_recv+0x4d0>)
9000bd82:	f44f 62cf 	mov.w	r2, #1656	; 0x678
9000bd86:	492b      	ldr	r1, [pc, #172]	; (9000be34 <dhcp_recv+0x4d4>)
9000bd88:	482b      	ldr	r0, [pc, #172]	; (9000be38 <dhcp_recv+0x4d8>)
9000bd8a:	f01d fba1 	bl	900294d0 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
9000bd8e:	9b06      	ldr	r3, [sp, #24]
9000bd90:	781b      	ldrb	r3, [r3, #0]
9000bd92:	2b00      	cmp	r3, #0
9000bd94:	f47f aebe 	bne.w	9000bb14 <dhcp_recv+0x1b4>
          copy_len = LWIP_MIN(decode_len, 4);
9000bd98:	2c04      	cmp	r4, #4
9000bd9a:	4622      	mov	r2, r4
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
9000bd9c:	9b02      	ldr	r3, [sp, #8]
9000bd9e:	a909      	add	r1, sp, #36	; 0x24
          copy_len = LWIP_MIN(decode_len, 4);
9000bda0:	bf28      	it	cs
9000bda2:	2204      	movcs	r2, #4
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
9000bda4:	4640      	mov	r0, r8
9000bda6:	9207      	str	r2, [sp, #28]
9000bda8:	f002 ff88 	bl	9000ecbc <pbuf_copy_partial>
9000bdac:	9a07      	ldr	r2, [sp, #28]
9000bdae:	4282      	cmp	r2, r0
9000bdb0:	f47f ae1d 	bne.w	9000b9ee <dhcp_recv+0x8e>
          if (decode_len > 4) {
9000bdb4:	2c04      	cmp	r4, #4
9000bdb6:	f67f aee4 	bls.w	9000bb82 <dhcp_recv+0x222>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
9000bdba:	07a2      	lsls	r2, r4, #30
9000bdbc:	f43f aeca 	beq.w	9000bb54 <dhcp_recv+0x1f4>
9000bdc0:	4b1b      	ldr	r3, [pc, #108]	; (9000be30 <dhcp_recv+0x4d0>)
9000bdc2:	f240 6281 	movw	r2, #1665	; 0x681
9000bdc6:	491d      	ldr	r1, [pc, #116]	; (9000be3c <dhcp_recv+0x4dc>)
9000bdc8:	e65d      	b.n	9000ba86 <dhcp_recv+0x126>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
9000bdca:	2507      	movs	r5, #7
        decode_len = 4; /* only copy the first given router */
9000bdcc:	2404      	movs	r4, #4
9000bdce:	e7c4      	b.n	9000bd5a <dhcp_recv+0x3fa>
9000bdd0:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
9000bdd2:	2503      	movs	r5, #3
9000bdd4:	e7c1      	b.n	9000bd5a <dhcp_recv+0x3fa>
    decode_len = len;
9000bdd6:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
9000bdd8:	2500      	movs	r5, #0
9000bdda:	e7be      	b.n	9000bd5a <dhcp_recv+0x3fa>
9000bddc:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
9000bdde:	2502      	movs	r5, #2
9000bde0:	e7bb      	b.n	9000bd5a <dhcp_recv+0x3fa>
9000bde2:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_T1;
9000bde4:	461d      	mov	r5, r3
9000bde6:	e7b8      	b.n	9000bd5a <dhcp_recv+0x3fa>
9000bde8:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_T2;
9000bdea:	2505      	movs	r5, #5
    if (op == DHCP_OPTION_PAD) {
9000bdec:	e7b5      	b.n	9000bd5a <dhcp_recv+0x3fa>
    switch (op) {
9000bdee:	f1a2 0133 	sub.w	r1, r2, #51	; 0x33
9000bdf2:	b2c8      	uxtb	r0, r1
9000bdf4:	2808      	cmp	r0, #8
9000bdf6:	d8aa      	bhi.n	9000bd4e <dhcp_recv+0x3ee>
9000bdf8:	2908      	cmp	r1, #8
9000bdfa:	f63f aea7 	bhi.w	9000bb4c <dhcp_recv+0x1ec>
9000bdfe:	a001      	add	r0, pc, #4	; (adr r0, 9000be04 <dhcp_recv+0x4a4>)
9000be00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
9000be04:	9000baa3 	.word	0x9000baa3
9000be08:	9000bab1 	.word	0x9000bab1
9000be0c:	9000bad1 	.word	0x9000bad1
9000be10:	9000badf 	.word	0x9000badf
9000be14:	9000bb4d 	.word	0x9000bb4d
9000be18:	9000bb4d 	.word	0x9000bb4d
9000be1c:	9000bb4d 	.word	0x9000bb4d
9000be20:	9000baed 	.word	0x9000baed
9000be24:	9000bafb 	.word	0x9000bafb
9000be28:	20027330 	.word	0x20027330
9000be2c:	9002c1b0 	.word	0x9002c1b0
9000be30:	9002b96f 	.word	0x9002b96f
9000be34:	9002bc27 	.word	0x9002bc27
9000be38:	9002a254 	.word	0x9002a254
9000be3c:	9002bc38 	.word	0x9002bc38

9000be40 <dhcp_network_changed>:
{
9000be40:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
9000be42:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
9000be44:	4604      	mov	r4, r0
  if (!dhcp) {
9000be46:	b1fd      	cbz	r5, 9000be88 <dhcp_network_changed+0x48>
  switch (dhcp->state) {
9000be48:	796b      	ldrb	r3, [r5, #5]
9000be4a:	2b05      	cmp	r3, #5
9000be4c:	d809      	bhi.n	9000be62 <dhcp_network_changed+0x22>
9000be4e:	2b02      	cmp	r3, #2
9000be50:	d809      	bhi.n	9000be66 <dhcp_network_changed+0x26>
9000be52:	b1cb      	cbz	r3, 9000be88 <dhcp_network_changed+0x48>
      dhcp->tries = 0;
9000be54:	2300      	movs	r3, #0
      dhcp_discover(netif);
9000be56:	4620      	mov	r0, r4
      dhcp->tries = 0;
9000be58:	71ab      	strb	r3, [r5, #6]
}
9000be5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
9000be5e:	f7ff bbc7 	b.w	9000b5f0 <dhcp_discover>
  switch (dhcp->state) {
9000be62:	2b0a      	cmp	r3, #10
9000be64:	d106      	bne.n	9000be74 <dhcp_network_changed+0x34>
      dhcp->tries = 0;
9000be66:	2300      	movs	r3, #0
      dhcp_reboot(netif);
9000be68:	4620      	mov	r0, r4
      dhcp->tries = 0;
9000be6a:	71ab      	strb	r3, [r5, #6]
}
9000be6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
9000be70:	f7ff ba7e 	b.w	9000b370 <dhcp_reboot>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
9000be74:	2b0c      	cmp	r3, #12
9000be76:	d9ed      	bls.n	9000be54 <dhcp_network_changed+0x14>
9000be78:	4b04      	ldr	r3, [pc, #16]	; (9000be8c <dhcp_network_changed+0x4c>)
9000be7a:	f240 326d 	movw	r2, #877	; 0x36d
9000be7e:	4904      	ldr	r1, [pc, #16]	; (9000be90 <dhcp_network_changed+0x50>)
9000be80:	4804      	ldr	r0, [pc, #16]	; (9000be94 <dhcp_network_changed+0x54>)
9000be82:	f01d fb25 	bl	900294d0 <iprintf>
9000be86:	e7e5      	b.n	9000be54 <dhcp_network_changed+0x14>
}
9000be88:	bd38      	pop	{r3, r4, r5, pc}
9000be8a:	bf00      	nop
9000be8c:	9002b96f 	.word	0x9002b96f
9000be90:	9002bc97 	.word	0x9002bc97
9000be94:	9002a254 	.word	0x9002a254

9000be98 <dhcp_arp_reply>:
{
9000be98:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
9000be9a:	4606      	mov	r6, r0
{
9000be9c:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
9000be9e:	b940      	cbnz	r0, 9000beb2 <dhcp_arp_reply+0x1a>
9000bea0:	4b27      	ldr	r3, [pc, #156]	; (9000bf40 <dhcp_arp_reply+0xa8>)
9000bea2:	f240 328b 	movw	r2, #907	; 0x38b
9000bea6:	4927      	ldr	r1, [pc, #156]	; (9000bf44 <dhcp_arp_reply+0xac>)
9000bea8:	4827      	ldr	r0, [pc, #156]	; (9000bf48 <dhcp_arp_reply+0xb0>)
9000beaa:	f01d fb11 	bl	900294d0 <iprintf>
}
9000beae:	b007      	add	sp, #28
9000beb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  dhcp = netif_dhcp_data(netif);
9000beb2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
9000beb4:	2c00      	cmp	r4, #0
9000beb6:	d0fa      	beq.n	9000beae <dhcp_arp_reply+0x16>
9000beb8:	7963      	ldrb	r3, [r4, #5]
9000beba:	2b08      	cmp	r3, #8
9000bebc:	d1f7      	bne.n	9000beae <dhcp_arp_reply+0x16>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
9000bebe:	680a      	ldr	r2, [r1, #0]
9000bec0:	69e3      	ldr	r3, [r4, #28]
9000bec2:	429a      	cmp	r2, r3
9000bec4:	d1f3      	bne.n	9000beae <dhcp_arp_reply+0x16>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
9000bec6:	210c      	movs	r1, #12
9000bec8:	4620      	mov	r0, r4
9000beca:	f7ff f920 	bl	9000b10e <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
9000bece:	f10d 0316 	add.w	r3, sp, #22
9000bed2:	2204      	movs	r2, #4
9000bed4:	4621      	mov	r1, r4
9000bed6:	4630      	mov	r0, r6
9000bed8:	f7ff f998 	bl	9000b20c <dhcp_create_msg>
  if (p_out != NULL) {
9000bedc:	4605      	mov	r5, r0
9000bede:	b330      	cbz	r0, 9000bf2e <dhcp_arp_reply+0x96>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
9000bee0:	6841      	ldr	r1, [r0, #4]
9000bee2:	2304      	movs	r3, #4
9000bee4:	2232      	movs	r2, #50	; 0x32
9000bee6:	f8bd 0016 	ldrh.w	r0, [sp, #22]
9000beea:	31f0      	adds	r1, #240	; 0xf0
9000beec:	9103      	str	r1, [sp, #12]
9000beee:	f7ff f933 	bl	9000b158 <dhcp_option>
9000bef2:	4607      	mov	r7, r0
9000bef4:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
9000bef8:	69e0      	ldr	r0, [r4, #28]
9000befa:	f7ff f906 	bl	9000b10a <lwip_htonl>
9000befe:	9903      	ldr	r1, [sp, #12]
9000bf00:	4602      	mov	r2, r0
9000bf02:	4638      	mov	r0, r7
9000bf04:	f7ff f95e 	bl	9000b1c4 <dhcp_option_long>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
9000bf08:	462a      	mov	r2, r5
9000bf0a:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
9000bf0c:	f8ad 0016 	strh.w	r0, [sp, #22]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
9000bf10:	f7ff fa10 	bl	9000b334 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
9000bf14:	4b0d      	ldr	r3, [pc, #52]	; (9000bf4c <dhcp_arp_reply+0xb4>)
9000bf16:	4629      	mov	r1, r5
9000bf18:	480d      	ldr	r0, [pc, #52]	; (9000bf50 <dhcp_arp_reply+0xb8>)
9000bf1a:	4a0e      	ldr	r2, [pc, #56]	; (9000bf54 <dhcp_arp_reply+0xbc>)
9000bf1c:	e9cd 6300 	strd	r6, r3, [sp]
9000bf20:	2343      	movs	r3, #67	; 0x43
9000bf22:	6800      	ldr	r0, [r0, #0]
9000bf24:	f007 fdd6 	bl	90013ad4 <udp_sendto_if_src>
    pbuf_free(p_out);
9000bf28:	4628      	mov	r0, r5
9000bf2a:	f002 fc73 	bl	9000e814 <pbuf_free>
  if (dhcp->tries < 255) {
9000bf2e:	79a3      	ldrb	r3, [r4, #6]
9000bf30:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
9000bf32:	bf1c      	itt	ne
9000bf34:	3301      	addne	r3, #1
9000bf36:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
9000bf38:	2314      	movs	r3, #20
9000bf3a:	8123      	strh	r3, [r4, #8]
  return result;
9000bf3c:	e7b7      	b.n	9000beae <dhcp_arp_reply+0x16>
9000bf3e:	bf00      	nop
9000bf40:	9002b96f 	.word	0x9002b96f
9000bf44:	9002bb7d 	.word	0x9002bb7d
9000bf48:	9002a254 	.word	0x9002a254
9000bf4c:	9002c1b0 	.word	0x9002c1b0
9000bf50:	20026658 	.word	0x20026658
9000bf54:	9002c1b4 	.word	0x9002c1b4

9000bf58 <dhcp_renew>:
{
9000bf58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
9000bf5c:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
9000bf5e:	b086      	sub	sp, #24
9000bf60:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
9000bf62:	2105      	movs	r1, #5
9000bf64:	4620      	mov	r0, r4
9000bf66:	f7ff f8d2 	bl	9000b10e <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
9000bf6a:	f10d 0316 	add.w	r3, sp, #22
9000bf6e:	2203      	movs	r2, #3
9000bf70:	4621      	mov	r1, r4
9000bf72:	4630      	mov	r0, r6
9000bf74:	f7ff f94a 	bl	9000b20c <dhcp_create_msg>
  if (p_out != NULL) {
9000bf78:	4605      	mov	r5, r0
9000bf7a:	2800      	cmp	r0, #0
9000bf7c:	d055      	beq.n	9000c02a <dhcp_renew+0xd2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
9000bf7e:	6841      	ldr	r1, [r0, #4]
9000bf80:	2302      	movs	r3, #2
9000bf82:	2239      	movs	r2, #57	; 0x39
9000bf84:	f8bd 0016 	ldrh.w	r0, [sp, #22]
9000bf88:	31f0      	adds	r1, #240	; 0xf0
9000bf8a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 9000c034 <dhcp_renew+0xdc>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
9000bf8e:	2704      	movs	r7, #4
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
9000bf90:	9103      	str	r1, [sp, #12]
9000bf92:	f7ff f8e1 	bl	9000b158 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
9000bf96:	8d32      	ldrh	r2, [r6, #40]	; 0x28
9000bf98:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
9000bf9a:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
9000bf9e:	f7ff f8bf 	bl	9000b120 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
9000bfa2:	9903      	ldr	r1, [sp, #12]
9000bfa4:	2304      	movs	r3, #4
9000bfa6:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
9000bfa8:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
9000bfac:	f7ff f8d4 	bl	9000b158 <dhcp_option>
9000bfb0:	9903      	ldr	r1, [sp, #12]
9000bfb2:	f8ad 0016 	strh.w	r0, [sp, #22]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
9000bfb6:	3f01      	subs	r7, #1
9000bfb8:	f818 2b01 	ldrb.w	r2, [r8], #1
9000bfbc:	f8bd 0016 	ldrh.w	r0, [sp, #22]
9000bfc0:	9103      	str	r1, [sp, #12]
9000bfc2:	f7ff f8e7 	bl	9000b194 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
9000bfc6:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
9000bfca:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
9000bfcc:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
9000bfd0:	d1f1      	bne.n	9000bfb6 <dhcp_renew+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
9000bfd2:	462a      	mov	r2, r5
9000bfd4:	f7ff f9ae 	bl	9000b334 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
9000bfd8:	4815      	ldr	r0, [pc, #84]	; (9000c030 <dhcp_renew+0xd8>)
9000bfda:	9600      	str	r6, [sp, #0]
9000bfdc:	2343      	movs	r3, #67	; 0x43
9000bfde:	f104 0218 	add.w	r2, r4, #24
9000bfe2:	4629      	mov	r1, r5
9000bfe4:	6800      	ldr	r0, [r0, #0]
9000bfe6:	f007 fe0d 	bl	90013c04 <udp_sendto_if>
9000bfea:	4606      	mov	r6, r0
    pbuf_free(p_out);
9000bfec:	4628      	mov	r0, r5
9000bfee:	f002 fc11 	bl	9000e814 <pbuf_free>
  if (dhcp->tries < 255) {
9000bff2:	79a3      	ldrb	r3, [r4, #6]
}
9000bff4:	4630      	mov	r0, r6
  if (dhcp->tries < 255) {
9000bff6:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
9000bff8:	bf1c      	itt	ne
9000bffa:	3301      	addne	r3, #1
9000bffc:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
9000bffe:	79a3      	ldrb	r3, [r4, #6]
9000c000:	2b09      	cmp	r3, #9
9000c002:	bf96      	itet	ls
9000c004:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
9000c008:	f644 6320 	movwhi	r3, #20000	; 0x4e20
9000c00c:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
9000c010:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
9000c014:	bf9c      	itt	ls
9000c016:	011b      	lslls	r3, r3, #4
9000c018:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
9000c01a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
9000c01e:	fbb3 f3f2 	udiv	r3, r3, r2
9000c022:	8123      	strh	r3, [r4, #8]
}
9000c024:	b006      	add	sp, #24
9000c026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
9000c02a:	f04f 36ff 	mov.w	r6, #4294967295
9000c02e:	e7e0      	b.n	9000bff2 <dhcp_renew+0x9a>
9000c030:	20026658 	.word	0x20026658
9000c034:	9002bccc 	.word	0x9002bccc

9000c038 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
9000c038:	b150      	cbz	r0, 9000c050 <dhcp_supplied_address+0x18>
9000c03a:	6a40      	ldr	r0, [r0, #36]	; 0x24
9000c03c:	b140      	cbz	r0, 9000c050 <dhcp_supplied_address+0x18>
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
9000c03e:	7940      	ldrb	r0, [r0, #5]
9000c040:	280a      	cmp	r0, #10
9000c042:	d006      	beq.n	9000c052 <dhcp_supplied_address+0x1a>
9000c044:	3804      	subs	r0, #4
9000c046:	2801      	cmp	r0, #1
9000c048:	bf8c      	ite	hi
9000c04a:	2000      	movhi	r0, #0
9000c04c:	2001      	movls	r0, #1
9000c04e:	b2c0      	uxtb	r0, r0
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
9000c050:	4770      	bx	lr
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
9000c052:	2001      	movs	r0, #1
9000c054:	e7fb      	b.n	9000c04e <dhcp_supplied_address+0x16>
	...

9000c058 <dhcp_release_and_stop>:
{
9000c058:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
9000c05a:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
9000c05c:	b087      	sub	sp, #28
9000c05e:	4606      	mov	r6, r0
  if (dhcp == NULL) {
9000c060:	2c00      	cmp	r4, #0
9000c062:	d050      	beq.n	9000c106 <dhcp_release_and_stop+0xae>
  if (dhcp->state == DHCP_STATE_OFF) {
9000c064:	7963      	ldrb	r3, [r4, #5]
9000c066:	2b00      	cmp	r3, #0
9000c068:	d04d      	beq.n	9000c106 <dhcp_release_and_stop+0xae>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
9000c06a:	69a3      	ldr	r3, [r4, #24]
9000c06c:	9305      	str	r3, [sp, #20]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
9000c06e:	2300      	movs	r3, #0
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
9000c070:	e9c4 3306 	strd	r3, r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
9000c074:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
9000c078:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
9000c07c:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
9000c07e:	81e3      	strh	r3, [r4, #14]
9000c080:	6123      	str	r3, [r4, #16]
9000c082:	82a3      	strh	r3, [r4, #20]
  if (dhcp_supplied_address(netif)) {
9000c084:	f7ff ffd8 	bl	9000c038 <dhcp_supplied_address>
9000c088:	b368      	cbz	r0, 9000c0e6 <dhcp_release_and_stop+0x8e>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
9000c08a:	f10d 0312 	add.w	r3, sp, #18
9000c08e:	2207      	movs	r2, #7
9000c090:	4621      	mov	r1, r4
9000c092:	4630      	mov	r0, r6
9000c094:	f7ff f8ba 	bl	9000b20c <dhcp_create_msg>
    if (p_out != NULL) {
9000c098:	4605      	mov	r5, r0
9000c09a:	b320      	cbz	r0, 9000c0e6 <dhcp_release_and_stop+0x8e>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
9000c09c:	6841      	ldr	r1, [r0, #4]
9000c09e:	2304      	movs	r3, #4
9000c0a0:	2236      	movs	r2, #54	; 0x36
9000c0a2:	f8bd 0012 	ldrh.w	r0, [sp, #18]
9000c0a6:	31f0      	adds	r1, #240	; 0xf0
9000c0a8:	9103      	str	r1, [sp, #12]
9000c0aa:	f7ff f855 	bl	9000b158 <dhcp_option>
9000c0ae:	4607      	mov	r7, r0
9000c0b0:	f8ad 0012 	strh.w	r0, [sp, #18]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
9000c0b4:	9805      	ldr	r0, [sp, #20]
9000c0b6:	f7ff f828 	bl	9000b10a <lwip_htonl>
9000c0ba:	9903      	ldr	r1, [sp, #12]
9000c0bc:	4602      	mov	r2, r0
9000c0be:	4638      	mov	r0, r7
9000c0c0:	f7ff f880 	bl	9000b1c4 <dhcp_option_long>
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
9000c0c4:	462a      	mov	r2, r5
9000c0c6:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
9000c0c8:	f8ad 0012 	strh.w	r0, [sp, #18]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
9000c0cc:	f7ff f932 	bl	9000b334 <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
9000c0d0:	480e      	ldr	r0, [pc, #56]	; (9000c10c <dhcp_release_and_stop+0xb4>)
9000c0d2:	2343      	movs	r3, #67	; 0x43
9000c0d4:	9600      	str	r6, [sp, #0]
9000c0d6:	aa05      	add	r2, sp, #20
9000c0d8:	4629      	mov	r1, r5
9000c0da:	6800      	ldr	r0, [r0, #0]
9000c0dc:	f007 fd92 	bl	90013c04 <udp_sendto_if>
      pbuf_free(p_out);
9000c0e0:	4628      	mov	r0, r5
9000c0e2:	f002 fb97 	bl	9000e814 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
9000c0e6:	4b0a      	ldr	r3, [pc, #40]	; (9000c110 <dhcp_release_and_stop+0xb8>)
9000c0e8:	4630      	mov	r0, r6
9000c0ea:	4619      	mov	r1, r3
9000c0ec:	461a      	mov	r2, r3
9000c0ee:	f002 f96d 	bl	9000e3cc <netif_set_addr>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
9000c0f2:	2100      	movs	r1, #0
9000c0f4:	4620      	mov	r0, r4
9000c0f6:	f7ff f80a 	bl	9000b10e <dhcp_set_state>
  if (dhcp->pcb_allocated != 0) {
9000c0fa:	7923      	ldrb	r3, [r4, #4]
9000c0fc:	b11b      	cbz	r3, 9000c106 <dhcp_release_and_stop+0xae>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
9000c0fe:	f7ff fbc3 	bl	9000b888 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
9000c102:	2300      	movs	r3, #0
9000c104:	7123      	strb	r3, [r4, #4]
}
9000c106:	b007      	add	sp, #28
9000c108:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000c10a:	bf00      	nop
9000c10c:	20026658 	.word	0x20026658
9000c110:	9002c1b0 	.word	0x9002c1b0

9000c114 <dhcp_start>:
{
9000c114:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
9000c116:	4604      	mov	r4, r0
9000c118:	b950      	cbnz	r0, 9000c130 <dhcp_start+0x1c>
9000c11a:	4b24      	ldr	r3, [pc, #144]	; (9000c1ac <dhcp_start+0x98>)
9000c11c:	f240 22e7 	movw	r2, #743	; 0x2e7
9000c120:	4923      	ldr	r1, [pc, #140]	; (9000c1b0 <dhcp_start+0x9c>)
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
9000c122:	4824      	ldr	r0, [pc, #144]	; (9000c1b4 <dhcp_start+0xa0>)
9000c124:	f01d f9d4 	bl	900294d0 <iprintf>
9000c128:	f06f 020f 	mvn.w	r2, #15
}
9000c12c:	4610      	mov	r0, r2
9000c12e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
9000c130:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
9000c134:	07da      	lsls	r2, r3, #31
9000c136:	d404      	bmi.n	9000c142 <dhcp_start+0x2e>
9000c138:	4b1c      	ldr	r3, [pc, #112]	; (9000c1ac <dhcp_start+0x98>)
9000c13a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
9000c13e:	491e      	ldr	r1, [pc, #120]	; (9000c1b8 <dhcp_start+0xa4>)
9000c140:	e7ef      	b.n	9000c122 <dhcp_start+0xe>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
9000c142:	8d03      	ldrh	r3, [r0, #40]	; 0x28
  dhcp = netif_dhcp_data(netif);
9000c144:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
9000c146:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
9000c14a:	d202      	bcs.n	9000c152 <dhcp_start+0x3e>
    return ERR_MEM;
9000c14c:	f04f 32ff 	mov.w	r2, #4294967295
9000c150:	e7ec      	b.n	9000c12c <dhcp_start+0x18>
  if (dhcp == NULL) {
9000c152:	b9dd      	cbnz	r5, 9000c18c <dhcp_start+0x78>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
9000c154:	2034      	movs	r0, #52	; 0x34
9000c156:	f001 ff4b 	bl	9000dff0 <mem_malloc>
    if (dhcp == NULL) {
9000c15a:	4605      	mov	r5, r0
9000c15c:	2800      	cmp	r0, #0
9000c15e:	d0f5      	beq.n	9000c14c <dhcp_start+0x38>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
9000c160:	6260      	str	r0, [r4, #36]	; 0x24
  memset(dhcp, 0, sizeof(struct dhcp));
9000c162:	2234      	movs	r2, #52	; 0x34
9000c164:	2100      	movs	r1, #0
9000c166:	4628      	mov	r0, r5
9000c168:	f01c fe12 	bl	90028d90 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
9000c16c:	f7ff fb52 	bl	9000b814 <dhcp_inc_pcb_refcount>
9000c170:	4602      	mov	r2, r0
9000c172:	2800      	cmp	r0, #0
9000c174:	d1ea      	bne.n	9000c14c <dhcp_start+0x38>
  dhcp->pcb_allocated = 1;
9000c176:	2301      	movs	r3, #1
9000c178:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
9000c17a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
9000c17e:	075b      	lsls	r3, r3, #29
9000c180:	d40a      	bmi.n	9000c198 <dhcp_start+0x84>
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
9000c182:	2102      	movs	r1, #2
9000c184:	4628      	mov	r0, r5
9000c186:	f7fe ffc2 	bl	9000b10e <dhcp_set_state>
    return ERR_OK;
9000c18a:	e7cf      	b.n	9000c12c <dhcp_start+0x18>
    if (dhcp->pcb_allocated != 0) {
9000c18c:	792b      	ldrb	r3, [r5, #4]
9000c18e:	2b00      	cmp	r3, #0
9000c190:	d0e7      	beq.n	9000c162 <dhcp_start+0x4e>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
9000c192:	f7ff fb79 	bl	9000b888 <dhcp_dec_pcb_refcount>
9000c196:	e7e4      	b.n	9000c162 <dhcp_start+0x4e>
  result = dhcp_discover(netif);
9000c198:	4620      	mov	r0, r4
9000c19a:	f7ff fa29 	bl	9000b5f0 <dhcp_discover>
  if (result != ERR_OK) {
9000c19e:	4602      	mov	r2, r0
9000c1a0:	2800      	cmp	r0, #0
9000c1a2:	d0c3      	beq.n	9000c12c <dhcp_start+0x18>
    dhcp_release_and_stop(netif);
9000c1a4:	4620      	mov	r0, r4
9000c1a6:	f7ff ff57 	bl	9000c058 <dhcp_release_and_stop>
9000c1aa:	e7cf      	b.n	9000c14c <dhcp_start+0x38>
9000c1ac:	9002b96f 	.word	0x9002b96f
9000c1b0:	9002bb7d 	.word	0x9002bb7d
9000c1b4:	9002a254 	.word	0x9002a254
9000c1b8:	9002bcab 	.word	0x9002bcab

9000c1bc <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
9000c1bc:	4b58      	ldr	r3, [pc, #352]	; (9000c320 <dhcp_coarse_tmr+0x164>)
{
9000c1be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
9000c1c2:	681d      	ldr	r5, [r3, #0]
{
9000c1c4:	b087      	sub	sp, #28
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
9000c1c6:	f240 2619 	movw	r6, #537	; 0x219
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
9000c1ca:	4f56      	ldr	r7, [pc, #344]	; (9000c324 <dhcp_coarse_tmr+0x168>)
9000c1cc:	f8df 8158 	ldr.w	r8, [pc, #344]	; 9000c328 <dhcp_coarse_tmr+0x16c>
  NETIF_FOREACH(netif) {
9000c1d0:	b915      	cbnz	r5, 9000c1d8 <dhcp_coarse_tmr+0x1c>
}
9000c1d2:	b007      	add	sp, #28
9000c1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
9000c1d8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
9000c1da:	b17c      	cbz	r4, 9000c1fc <dhcp_coarse_tmr+0x40>
9000c1dc:	7963      	ldrb	r3, [r4, #5]
9000c1de:	b16b      	cbz	r3, 9000c1fc <dhcp_coarse_tmr+0x40>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
9000c1e0:	8aa1      	ldrh	r1, [r4, #20]
9000c1e2:	b169      	cbz	r1, 9000c200 <dhcp_coarse_tmr+0x44>
9000c1e4:	8a62      	ldrh	r2, [r4, #18]
9000c1e6:	3201      	adds	r2, #1
9000c1e8:	b292      	uxth	r2, r2
9000c1ea:	4291      	cmp	r1, r2
9000c1ec:	8262      	strh	r2, [r4, #18]
9000c1ee:	d107      	bne.n	9000c200 <dhcp_coarse_tmr+0x44>
        dhcp_release_and_stop(netif);
9000c1f0:	4628      	mov	r0, r5
9000c1f2:	f7ff ff31 	bl	9000c058 <dhcp_release_and_stop>
        dhcp_start(netif);
9000c1f6:	4628      	mov	r0, r5
9000c1f8:	f7ff ff8c 	bl	9000c114 <dhcp_start>
  NETIF_FOREACH(netif) {
9000c1fc:	682d      	ldr	r5, [r5, #0]
9000c1fe:	e7e7      	b.n	9000c1d0 <dhcp_coarse_tmr+0x14>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
9000c200:	8a22      	ldrh	r2, [r4, #16]
9000c202:	2a00      	cmp	r2, #0
9000c204:	d072      	beq.n	9000c2ec <dhcp_coarse_tmr+0x130>
9000c206:	1e51      	subs	r1, r2, #1
9000c208:	2a01      	cmp	r2, #1
9000c20a:	8221      	strh	r1, [r4, #16]
9000c20c:	d16e      	bne.n	9000c2ec <dhcp_coarse_tmr+0x130>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
9000c20e:	3b01      	subs	r3, #1
9000c210:	b2db      	uxtb	r3, r3
9000c212:	2b09      	cmp	r3, #9
9000c214:	d8f2      	bhi.n	9000c1fc <dhcp_coarse_tmr+0x40>
9000c216:	fa26 f303 	lsr.w	r3, r6, r3
9000c21a:	07db      	lsls	r3, r3, #31
9000c21c:	d5ee      	bpl.n	9000c1fc <dhcp_coarse_tmr+0x40>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
9000c21e:	2104      	movs	r1, #4
9000c220:	4620      	mov	r0, r4
9000c222:	f7fe ff74 	bl	9000b10e <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
9000c226:	f10d 0316 	add.w	r3, sp, #22
9000c22a:	2203      	movs	r2, #3
9000c22c:	4621      	mov	r1, r4
9000c22e:	4628      	mov	r0, r5
9000c230:	f7fe ffec 	bl	9000b20c <dhcp_create_msg>
  if (p_out != NULL) {
9000c234:	4681      	mov	r9, r0
9000c236:	2800      	cmp	r0, #0
9000c238:	d038      	beq.n	9000c2ac <dhcp_coarse_tmr+0xf0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
9000c23a:	6841      	ldr	r1, [r0, #4]
9000c23c:	2302      	movs	r3, #2
9000c23e:	2239      	movs	r2, #57	; 0x39
9000c240:	f8bd 0016 	ldrh.w	r0, [sp, #22]
9000c244:	31f0      	adds	r1, #240	; 0xf0
9000c246:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 9000c32c <dhcp_coarse_tmr+0x170>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
9000c24a:	f04f 0a04 	mov.w	sl, #4
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
9000c24e:	9103      	str	r1, [sp, #12]
9000c250:	f7fe ff82 	bl	9000b158 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
9000c254:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
9000c256:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
9000c258:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
9000c25c:	f7fe ff60 	bl	9000b120 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
9000c260:	9903      	ldr	r1, [sp, #12]
9000c262:	2304      	movs	r3, #4
9000c264:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
9000c266:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
9000c26a:	f7fe ff75 	bl	9000b158 <dhcp_option>
9000c26e:	9903      	ldr	r1, [sp, #12]
9000c270:	f8ad 0016 	strh.w	r0, [sp, #22]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
9000c274:	f10a 3aff 	add.w	sl, sl, #4294967295
9000c278:	f81b 2b01 	ldrb.w	r2, [fp], #1
9000c27c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
9000c280:	9103      	str	r1, [sp, #12]
9000c282:	f7fe ff87 	bl	9000b194 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
9000c286:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
9000c28a:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
9000c28c:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
9000c290:	d1f0      	bne.n	9000c274 <dhcp_coarse_tmr+0xb8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
9000c292:	464a      	mov	r2, r9
9000c294:	f7ff f84e 	bl	9000b334 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
9000c298:	2343      	movs	r3, #67	; 0x43
9000c29a:	4642      	mov	r2, r8
9000c29c:	4649      	mov	r1, r9
9000c29e:	6838      	ldr	r0, [r7, #0]
9000c2a0:	9500      	str	r5, [sp, #0]
9000c2a2:	f007 fcaf 	bl	90013c04 <udp_sendto_if>
    pbuf_free(p_out);
9000c2a6:	4648      	mov	r0, r9
9000c2a8:	f002 fab4 	bl	9000e814 <pbuf_free>
  if (dhcp->tries < 255) {
9000c2ac:	79a3      	ldrb	r3, [r4, #6]
9000c2ae:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
9000c2b0:	bf1c      	itt	ne
9000c2b2:	3301      	addne	r3, #1
9000c2b4:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
9000c2b6:	79a3      	ldrb	r3, [r4, #6]
9000c2b8:	2b09      	cmp	r3, #9
9000c2ba:	bf96      	itet	ls
9000c2bc:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
9000c2c0:	f242 7310 	movwhi	r3, #10000	; 0x2710
9000c2c4:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
9000c2c8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
9000c2cc:	bf9c      	itt	ls
9000c2ce:	00db      	lslls	r3, r3, #3
9000c2d0:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
9000c2d2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
9000c2d6:	fbb3 f3f2 	udiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
9000c2da:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
9000c2dc:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
9000c2de:	8aa3      	ldrh	r3, [r4, #20]
9000c2e0:	1a9b      	subs	r3, r3, r2
9000c2e2:	2b01      	cmp	r3, #1
9000c2e4:	dd8a      	ble.n	9000c1fc <dhcp_coarse_tmr+0x40>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
9000c2e6:	105b      	asrs	r3, r3, #1
9000c2e8:	8223      	strh	r3, [r4, #16]
9000c2ea:	e787      	b.n	9000c1fc <dhcp_coarse_tmr+0x40>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
9000c2ec:	89e2      	ldrh	r2, [r4, #14]
9000c2ee:	2a00      	cmp	r2, #0
9000c2f0:	d084      	beq.n	9000c1fc <dhcp_coarse_tmr+0x40>
9000c2f2:	1e51      	subs	r1, r2, #1
9000c2f4:	2a01      	cmp	r2, #1
9000c2f6:	81e1      	strh	r1, [r4, #14]
9000c2f8:	d180      	bne.n	9000c1fc <dhcp_coarse_tmr+0x40>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
9000c2fa:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
9000c2fe:	2a01      	cmp	r2, #1
9000c300:	d002      	beq.n	9000c308 <dhcp_coarse_tmr+0x14c>
9000c302:	2b0a      	cmp	r3, #10
9000c304:	f47f af7a 	bne.w	9000c1fc <dhcp_coarse_tmr+0x40>
    dhcp_renew(netif);
9000c308:	4628      	mov	r0, r5
9000c30a:	f7ff fe25 	bl	9000bf58 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
9000c30e:	89a3      	ldrh	r3, [r4, #12]
9000c310:	8a62      	ldrh	r2, [r4, #18]
9000c312:	1a9b      	subs	r3, r3, r2
9000c314:	2b01      	cmp	r3, #1
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
9000c316:	bfc4      	itt	gt
9000c318:	105b      	asrgt	r3, r3, #1
9000c31a:	81e3      	strhgt	r3, [r4, #14]
9000c31c:	e76e      	b.n	9000c1fc <dhcp_coarse_tmr+0x40>
9000c31e:	bf00      	nop
9000c320:	2002cb54 	.word	0x2002cb54
9000c324:	20026658 	.word	0x20026658
9000c328:	9002c1b4 	.word	0x9002c1b4
9000c32c:	9002bccc 	.word	0x9002bccc

9000c330 <dhcp_fine_tmr>:
{
9000c330:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
9000c332:	4b1e      	ldr	r3, [pc, #120]	; (9000c3ac <dhcp_fine_tmr+0x7c>)
        dhcp->request_timeout--;
9000c334:	2500      	movs	r5, #0
  NETIF_FOREACH(netif) {
9000c336:	681c      	ldr	r4, [r3, #0]
9000c338:	b904      	cbnz	r4, 9000c33c <dhcp_fine_tmr+0xc>
}
9000c33a:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
9000c33c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (dhcp != NULL) {
9000c33e:	b123      	cbz	r3, 9000c34a <dhcp_fine_tmr+0x1a>
      if (dhcp->request_timeout > 1) {
9000c340:	891a      	ldrh	r2, [r3, #8]
9000c342:	2a01      	cmp	r2, #1
9000c344:	d903      	bls.n	9000c34e <dhcp_fine_tmr+0x1e>
        dhcp->request_timeout--;
9000c346:	3a01      	subs	r2, #1
9000c348:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
9000c34a:	6824      	ldr	r4, [r4, #0]
9000c34c:	e7f4      	b.n	9000c338 <dhcp_fine_tmr+0x8>
      } else if (dhcp->request_timeout == 1) {
9000c34e:	d1fc      	bne.n	9000c34a <dhcp_fine_tmr+0x1a>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
9000c350:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
9000c352:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
9000c354:	2a0c      	cmp	r2, #12
9000c356:	d001      	beq.n	9000c35c <dhcp_fine_tmr+0x2c>
9000c358:	2a06      	cmp	r2, #6
9000c35a:	d103      	bne.n	9000c364 <dhcp_fine_tmr+0x34>
    dhcp_discover(netif);
9000c35c:	4620      	mov	r0, r4
      dhcp_discover(netif);
9000c35e:	f7ff f947 	bl	9000b5f0 <dhcp_discover>
9000c362:	e7f2      	b.n	9000c34a <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
9000c364:	2a01      	cmp	r2, #1
9000c366:	d10c      	bne.n	9000c382 <dhcp_fine_tmr+0x52>
    if (dhcp->tries <= 5) {
9000c368:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
9000c36a:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
9000c36c:	2b05      	cmp	r3, #5
9000c36e:	d802      	bhi.n	9000c376 <dhcp_fine_tmr+0x46>
      dhcp_select(netif);
9000c370:	f7ff f882 	bl	9000b478 <dhcp_select>
9000c374:	e7e9      	b.n	9000c34a <dhcp_fine_tmr+0x1a>
      dhcp_release_and_stop(netif);
9000c376:	f7ff fe6f 	bl	9000c058 <dhcp_release_and_stop>
      dhcp_start(netif);
9000c37a:	4620      	mov	r0, r4
9000c37c:	f7ff feca 	bl	9000c114 <dhcp_start>
9000c380:	e7e3      	b.n	9000c34a <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
9000c382:	2a08      	cmp	r2, #8
9000c384:	d109      	bne.n	9000c39a <dhcp_fine_tmr+0x6a>
    if (dhcp->tries <= 1) {
9000c386:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
9000c388:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
9000c38a:	2b01      	cmp	r3, #1
9000c38c:	d802      	bhi.n	9000c394 <dhcp_fine_tmr+0x64>
      dhcp_check(netif);
9000c38e:	f7ff f9a5 	bl	9000b6dc <dhcp_check>
9000c392:	e7da      	b.n	9000c34a <dhcp_fine_tmr+0x1a>
      dhcp_bind(netif);
9000c394:	f7ff f9b8 	bl	9000b708 <dhcp_bind>
9000c398:	e7d7      	b.n	9000c34a <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
9000c39a:	2a03      	cmp	r2, #3
9000c39c:	d1d5      	bne.n	9000c34a <dhcp_fine_tmr+0x1a>
    if (dhcp->tries < REBOOT_TRIES) {
9000c39e:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
9000c3a0:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
9000c3a2:	2b01      	cmp	r3, #1
9000c3a4:	d8db      	bhi.n	9000c35e <dhcp_fine_tmr+0x2e>
      dhcp_reboot(netif);
9000c3a6:	f7fe ffe3 	bl	9000b370 <dhcp_reboot>
9000c3aa:	e7ce      	b.n	9000c34a <dhcp_fine_tmr+0x1a>
9000c3ac:	2002cb54 	.word	0x2002cb54

9000c3b0 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
9000c3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
9000c3b4:	4e23      	ldr	r6, [pc, #140]	; (9000c444 <dns_call_found+0x94>)
9000c3b6:	f44f 7788 	mov.w	r7, #272	; 0x110
9000c3ba:	4d23      	ldr	r5, [pc, #140]	; (9000c448 <dns_call_found+0x98>)
{
9000c3bc:	4604      	mov	r4, r0
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
9000c3be:	fb07 6700 	mla	r7, r7, r0, r6
{
9000c3c2:	468a      	mov	sl, r1
9000c3c4:	f105 0830 	add.w	r8, r5, #48	; 0x30
      /* flush this entry */
      dns_requests[i].found = NULL;
9000c3c8:	f04f 0900 	mov.w	r9, #0
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
9000c3cc:	3710      	adds	r7, #16
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
9000c3ce:	682b      	ldr	r3, [r5, #0]
9000c3d0:	b143      	cbz	r3, 9000c3e4 <dns_call_found+0x34>
9000c3d2:	7a2a      	ldrb	r2, [r5, #8]
9000c3d4:	42a2      	cmp	r2, r4
9000c3d6:	d105      	bne.n	9000c3e4 <dns_call_found+0x34>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
9000c3d8:	686a      	ldr	r2, [r5, #4]
9000c3da:	4651      	mov	r1, sl
9000c3dc:	4638      	mov	r0, r7
9000c3de:	4798      	blx	r3
      dns_requests[i].found = NULL;
9000c3e0:	f8c5 9000 	str.w	r9, [r5]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
9000c3e4:	350c      	adds	r5, #12
9000c3e6:	4545      	cmp	r5, r8
9000c3e8:	d1f1      	bne.n	9000c3ce <dns_call_found+0x1e>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
9000c3ea:	f44f 7188 	mov.w	r1, #272	; 0x110
9000c3ee:	4a15      	ldr	r2, [pc, #84]	; (9000c444 <dns_call_found+0x94>)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
9000c3f0:	2300      	movs	r3, #0
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
9000c3f2:	fb01 6104 	mla	r1, r1, r4, r6
    if (i == idx) {
9000c3f6:	b2d8      	uxtb	r0, r3
9000c3f8:	4284      	cmp	r4, r0
9000c3fa:	d01c      	beq.n	9000c436 <dns_call_found+0x86>
    if (dns_table[i].state == DNS_STATE_ASKING) {
9000c3fc:	7a90      	ldrb	r0, [r2, #10]
9000c3fe:	2802      	cmp	r0, #2
9000c400:	d119      	bne.n	9000c436 <dns_call_found+0x86>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
9000c402:	7bd7      	ldrb	r7, [r2, #15]
9000c404:	7bcd      	ldrb	r5, [r1, #15]
9000c406:	42af      	cmp	r7, r5
9000c408:	d115      	bne.n	9000c436 <dns_call_found+0x86>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
9000c40a:	2304      	movs	r3, #4
9000c40c:	73cb      	strb	r3, [r1, #15]
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
9000c40e:	f44f 7088 	mov.w	r0, #272	; 0x110
9000c412:	fb00 6404 	mla	r4, r0, r4, r6
9000c416:	7be3      	ldrb	r3, [r4, #15]
9000c418:	2b03      	cmp	r3, #3
9000c41a:	d80a      	bhi.n	9000c432 <dns_call_found+0x82>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
9000c41c:	4d0b      	ldr	r5, [pc, #44]	; (9000c44c <dns_call_found+0x9c>)
9000c41e:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
9000c422:	f007 fcdb 	bl	90013ddc <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
9000c426:	7be3      	ldrb	r3, [r4, #15]
9000c428:	2200      	movs	r2, #0
9000c42a:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
9000c42e:	2304      	movs	r3, #4
9000c430:	73e3      	strb	r3, [r4, #15]
  }
#endif
}
9000c432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
9000c436:	3301      	adds	r3, #1
9000c438:	f502 7288 	add.w	r2, r2, #272	; 0x110
9000c43c:	2b04      	cmp	r3, #4
9000c43e:	d1da      	bne.n	9000c3f6 <dns_call_found+0x46>
9000c440:	e7e5      	b.n	9000c40e <dns_call_found+0x5e>
9000c442:	bf00      	nop
9000c444:	200266ac 	.word	0x200266ac
9000c448:	20026674 	.word	0x20026674
9000c44c:	20026664 	.word	0x20026664

9000c450 <dns_send>:
{
9000c450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
9000c454:	f44f 7388 	mov.w	r3, #272	; 0x110
{
9000c458:	4606      	mov	r6, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
9000c45a:	484f      	ldr	r0, [pc, #316]	; (9000c598 <dns_send+0x148>)
{
9000c45c:	b087      	sub	sp, #28
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
9000c45e:	fb03 0306 	mla	r3, r3, r6, r0
9000c462:	4680      	mov	r8, r0
9000c464:	7adb      	ldrb	r3, [r3, #11]
9000c466:	2b01      	cmp	r3, #1
9000c468:	d906      	bls.n	9000c478 <dns_send+0x28>
9000c46a:	4b4c      	ldr	r3, [pc, #304]	; (9000c59c <dns_send+0x14c>)
9000c46c:	f240 22fa 	movw	r2, #762	; 0x2fa
9000c470:	494b      	ldr	r1, [pc, #300]	; (9000c5a0 <dns_send+0x150>)
9000c472:	484c      	ldr	r0, [pc, #304]	; (9000c5a4 <dns_send+0x154>)
9000c474:	f01d f82c 	bl	900294d0 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
9000c478:	f44f 7388 	mov.w	r3, #272	; 0x110
9000c47c:	4a4a      	ldr	r2, [pc, #296]	; (9000c5a8 <dns_send+0x158>)
9000c47e:	4373      	muls	r3, r6
9000c480:	4691      	mov	r9, r2
9000c482:	eb08 0703 	add.w	r7, r8, r3
9000c486:	7af9      	ldrb	r1, [r7, #11]
9000c488:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
9000c48c:	b944      	cbnz	r4, 9000c4a0 <dns_send+0x50>
    dns_call_found(idx, NULL);
9000c48e:	4621      	mov	r1, r4
9000c490:	4630      	mov	r0, r6
9000c492:	f7ff ff8d 	bl	9000c3b0 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
9000c496:	72bc      	strb	r4, [r7, #10]
}
9000c498:	4620      	mov	r0, r4
9000c49a:	b007      	add	sp, #28
9000c49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
9000c4a0:	f103 0410 	add.w	r4, r3, #16
9000c4a4:	4444      	add	r4, r8
9000c4a6:	4620      	mov	r0, r4
9000c4a8:	f7f3 feb2 	bl	90000210 <strlen>
9000c4ac:	3012      	adds	r0, #18
9000c4ae:	f44f 7220 	mov.w	r2, #640	; 0x280
9000c4b2:	b281      	uxth	r1, r0
9000c4b4:	2036      	movs	r0, #54	; 0x36
9000c4b6:	f002 fa15 	bl	9000e8e4 <pbuf_alloc>
  if (p != NULL) {
9000c4ba:	4605      	mov	r5, r0
9000c4bc:	2800      	cmp	r0, #0
9000c4be:	d067      	beq.n	9000c590 <dns_send+0x140>
    memset(&hdr, 0, SIZEOF_DNS_HDR);
9000c4c0:	2300      	movs	r3, #0
    hdr.id = lwip_htons(entry->txid);
9000c4c2:	8938      	ldrh	r0, [r7, #8]
    --hostname;
9000c4c4:	3c01      	subs	r4, #1
    memset(&hdr, 0, SIZEOF_DNS_HDR);
9000c4c6:	9305      	str	r3, [sp, #20]
9000c4c8:	e9cd 3303 	strd	r3, r3, [sp, #12]
    hdr.id = lwip_htons(entry->txid);
9000c4cc:	f7fe fe1a 	bl	9000b104 <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
9000c4d0:	2301      	movs	r3, #1
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
9000c4d2:	220c      	movs	r2, #12
    hdr.id = lwip_htons(entry->txid);
9000c4d4:	f8ad 000c 	strh.w	r0, [sp, #12]
    hdr.flags1 = DNS_FLAG1_RD;
9000c4d8:	f88d 300e 	strb.w	r3, [sp, #14]
    hdr.numquestions = PP_HTONS(1);
9000c4dc:	f44f 7380 	mov.w	r3, #256	; 0x100
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
9000c4e0:	eb0d 0102 	add.w	r1, sp, r2
9000c4e4:	4628      	mov	r0, r5
    hdr.numquestions = PP_HTONS(1);
9000c4e6:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
9000c4ea:	f002 fc2d 	bl	9000ed48 <pbuf_take>
    query_idx = SIZEOF_DNS_HDR;
9000c4ee:	210c      	movs	r1, #12
      ++hostname;
9000c4f0:	f104 0a01 	add.w	sl, r4, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
9000c4f4:	2200      	movs	r2, #0
9000c4f6:	4653      	mov	r3, sl
9000c4f8:	461c      	mov	r4, r3
9000c4fa:	f813 0b01 	ldrb.w	r0, [r3], #1
9000c4fe:	282e      	cmp	r0, #46	; 0x2e
9000c500:	d10e      	bne.n	9000c520 <dns_send+0xd0>
      if (query_idx + n + 1 > 0xFFFF) {
9000c502:	188f      	adds	r7, r1, r2
9000c504:	f64f 73fe 	movw	r3, #65534	; 0xfffe
      copy_len = (u16_t)(hostname - hostname_part);
9000c508:	eba4 0b0a 	sub.w	fp, r4, sl
      if (query_idx + n + 1 > 0xFFFF) {
9000c50c:	429f      	cmp	r7, r3
      copy_len = (u16_t)(hostname - hostname_part);
9000c50e:	fa1f fb8b 	uxth.w	fp, fp
      if (query_idx + n + 1 > 0xFFFF) {
9000c512:	dd0a      	ble.n	9000c52a <dns_send+0xda>
  pbuf_free(p);
9000c514:	4628      	mov	r0, r5
  return ERR_VAL;
9000c516:	f06f 0405 	mvn.w	r4, #5
  pbuf_free(p);
9000c51a:	f002 f97b 	bl	9000e814 <pbuf_free>
  return ERR_VAL;
9000c51e:	e7bb      	b.n	9000c498 <dns_send+0x48>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
9000c520:	2800      	cmp	r0, #0
9000c522:	d0ee      	beq.n	9000c502 <dns_send+0xb2>
        ++n;
9000c524:	3201      	adds	r2, #1
9000c526:	b2d2      	uxtb	r2, r2
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
9000c528:	e7e6      	b.n	9000c4f8 <dns_send+0xa8>
      pbuf_put_at(p, query_idx, n);
9000c52a:	4628      	mov	r0, r5
9000c52c:	9101      	str	r1, [sp, #4]
9000c52e:	f002 fcc1 	bl	9000eeb4 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
9000c532:	9901      	ldr	r1, [sp, #4]
      query_idx = (u16_t)(query_idx + n + 1);
9000c534:	b2bf      	uxth	r7, r7
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
9000c536:	465a      	mov	r2, fp
9000c538:	1c4b      	adds	r3, r1, #1
9000c53a:	4628      	mov	r0, r5
9000c53c:	4651      	mov	r1, sl
9000c53e:	b29b      	uxth	r3, r3
9000c540:	f002 fc60 	bl	9000ee04 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
9000c544:	1c79      	adds	r1, r7, #1
    } while (*hostname != 0);
9000c546:	7822      	ldrb	r2, [r4, #0]
      query_idx = (u16_t)(query_idx + n + 1);
9000c548:	b289      	uxth	r1, r1
    } while (*hostname != 0);
9000c54a:	2a00      	cmp	r2, #0
9000c54c:	d1d0      	bne.n	9000c4f0 <dns_send+0xa0>
    pbuf_put_at(p, query_idx, 0);
9000c54e:	4628      	mov	r0, r5
    query_idx++;
9000c550:	3702      	adds	r7, #2
    pbuf_put_at(p, query_idx, 0);
9000c552:	f002 fcaf 	bl	9000eeb4 <pbuf_put_at>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
9000c556:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
9000c55a:	a902      	add	r1, sp, #8
9000c55c:	2204      	movs	r2, #4
      qry.type = PP_HTONS(DNS_RRTYPE_A);
9000c55e:	9302      	str	r3, [sp, #8]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
9000c560:	4628      	mov	r0, r5
9000c562:	b2bb      	uxth	r3, r7
9000c564:	f002 fc4e 	bl	9000ee04 <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
9000c568:	f44f 7088 	mov.w	r0, #272	; 0x110
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
9000c56c:	2335      	movs	r3, #53	; 0x35
9000c56e:	4629      	mov	r1, r5
      dst = &dns_servers[entry->server_idx];
9000c570:	fb00 8606 	mla	r6, r0, r6, r8
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
9000c574:	480d      	ldr	r0, [pc, #52]	; (9000c5ac <dns_send+0x15c>)
9000c576:	7bf4      	ldrb	r4, [r6, #15]
      dst = &dns_servers[entry->server_idx];
9000c578:	7af2      	ldrb	r2, [r6, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
9000c57a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
9000c57e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
9000c582:	f007 fb7f 	bl	90013c84 <udp_sendto>
9000c586:	4604      	mov	r4, r0
    pbuf_free(p);
9000c588:	4628      	mov	r0, r5
9000c58a:	f002 f943 	bl	9000e814 <pbuf_free>
9000c58e:	e783      	b.n	9000c498 <dns_send+0x48>
    err = ERR_MEM;
9000c590:	f04f 34ff 	mov.w	r4, #4294967295
9000c594:	e780      	b.n	9000c498 <dns_send+0x48>
9000c596:	bf00      	nop
9000c598:	200266ac 	.word	0x200266ac
9000c59c:	9002bcd0 	.word	0x9002bcd0
9000c5a0:	9002bd2f 	.word	0x9002bd2f
9000c5a4:	9002a254 	.word	0x9002a254
9000c5a8:	200266a4 	.word	0x200266a4
9000c5ac:	20026664 	.word	0x20026664

9000c5b0 <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
9000c5b0:	2803      	cmp	r0, #3
{
9000c5b2:	b570      	push	{r4, r5, r6, lr}
9000c5b4:	4604      	mov	r4, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
9000c5b6:	d906      	bls.n	9000c5c6 <dns_check_entry+0x16>
9000c5b8:	4b33      	ldr	r3, [pc, #204]	; (9000c688 <dns_check_entry+0xd8>)
9000c5ba:	f240 421c 	movw	r2, #1052	; 0x41c
9000c5be:	4933      	ldr	r1, [pc, #204]	; (9000c68c <dns_check_entry+0xdc>)
9000c5c0:	4833      	ldr	r0, [pc, #204]	; (9000c690 <dns_check_entry+0xe0>)
9000c5c2:	f01c ff85 	bl	900294d0 <iprintf>

  switch (entry->state) {
9000c5c6:	4d33      	ldr	r5, [pc, #204]	; (9000c694 <dns_check_entry+0xe4>)
9000c5c8:	f44f 7388 	mov.w	r3, #272	; 0x110
9000c5cc:	fb03 5204 	mla	r2, r3, r4, r5
9000c5d0:	7a92      	ldrb	r2, [r2, #10]
9000c5d2:	2a03      	cmp	r2, #3
9000c5d4:	d84f      	bhi.n	9000c676 <dns_check_entry+0xc6>
9000c5d6:	e8df f002 	tbb	[pc, r2]
9000c5da:	0242      	.short	0x0242
9000c5dc:	4522      	.short	0x4522
  txid = (u16_t)DNS_RAND_TXID();
9000c5de:	f01c ff8f 	bl	90029500 <rand>
9000c5e2:	4b2c      	ldr	r3, [pc, #176]	; (9000c694 <dns_check_entry+0xe4>)
9000c5e4:	b280      	uxth	r0, r0
9000c5e6:	2200      	movs	r2, #0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
9000c5e8:	7a99      	ldrb	r1, [r3, #10]
9000c5ea:	2902      	cmp	r1, #2
9000c5ec:	d102      	bne.n	9000c5f4 <dns_check_entry+0x44>
9000c5ee:	8919      	ldrh	r1, [r3, #8]
9000c5f0:	4281      	cmp	r1, r0
9000c5f2:	d0f4      	beq.n	9000c5de <dns_check_entry+0x2e>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
9000c5f4:	3201      	adds	r2, #1
9000c5f6:	f503 7388 	add.w	r3, r3, #272	; 0x110
9000c5fa:	2a04      	cmp	r2, #4
9000c5fc:	d1f4      	bne.n	9000c5e8 <dns_check_entry+0x38>
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
9000c5fe:	f44f 7388 	mov.w	r3, #272	; 0x110
9000c602:	4363      	muls	r3, r4
9000c604:	18ea      	adds	r2, r5, r3
9000c606:	3308      	adds	r3, #8
9000c608:	441d      	add	r5, r3
      entry->state = DNS_STATE_ASKING;
9000c60a:	2302      	movs	r3, #2
      entry->txid = dns_create_txid();
9000c60c:	8110      	strh	r0, [r2, #8]
      entry->state = DNS_STATE_ASKING;
9000c60e:	806b      	strh	r3, [r5, #2]
      entry->server_idx = 0;
      entry->tmr = 1;
9000c610:	2301      	movs	r3, #1
9000c612:	80ab      	strh	r3, [r5, #4]
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
9000c614:	4620      	mov	r0, r4
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
9000c616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        err = dns_send(i);
9000c61a:	f7ff bf19 	b.w	9000c450 <dns_send>
      if (--entry->tmr == 0) {
9000c61e:	fb03 5304 	mla	r3, r3, r4, r5
9000c622:	7b1a      	ldrb	r2, [r3, #12]
9000c624:	3a01      	subs	r2, #1
9000c626:	b2d2      	uxtb	r2, r2
9000c628:	731a      	strb	r2, [r3, #12]
9000c62a:	b9c2      	cbnz	r2, 9000c65e <dns_check_entry+0xae>
        if (++entry->retries == DNS_MAX_RETRIES) {
9000c62c:	7b5a      	ldrb	r2, [r3, #13]
9000c62e:	3201      	adds	r2, #1
9000c630:	b2d2      	uxtb	r2, r2
9000c632:	2a04      	cmp	r2, #4
9000c634:	735a      	strb	r2, [r3, #13]
9000c636:	d113      	bne.n	9000c660 <dns_check_entry+0xb0>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
9000c638:	7ada      	ldrb	r2, [r3, #11]
9000c63a:	b932      	cbnz	r2, 9000c64a <dns_check_entry+0x9a>
9000c63c:	4a16      	ldr	r2, [pc, #88]	; (9000c698 <dns_check_entry+0xe8>)
9000c63e:	6852      	ldr	r2, [r2, #4]
9000c640:	b11a      	cbz	r2, 9000c64a <dns_check_entry+0x9a>
            entry->server_idx++;
9000c642:	2201      	movs	r2, #1
9000c644:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
9000c646:	819a      	strh	r2, [r3, #12]
9000c648:	e7e4      	b.n	9000c614 <dns_check_entry+0x64>
            dns_call_found(i, NULL);
9000c64a:	2100      	movs	r1, #0
9000c64c:	4620      	mov	r0, r4
9000c64e:	f7ff feaf 	bl	9000c3b0 <dns_call_found>
        entry->state = DNS_STATE_UNUSED;
9000c652:	f44f 7088 	mov.w	r0, #272	; 0x110
9000c656:	2300      	movs	r3, #0
9000c658:	fb00 5404 	mla	r4, r0, r4, r5
9000c65c:	72a3      	strb	r3, [r4, #10]
}
9000c65e:	bd70      	pop	{r4, r5, r6, pc}
          entry->tmr = entry->retries;
9000c660:	731a      	strb	r2, [r3, #12]
9000c662:	e7d7      	b.n	9000c614 <dns_check_entry+0x64>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
9000c664:	4363      	muls	r3, r4
9000c666:	58ea      	ldr	r2, [r5, r3]
9000c668:	2a00      	cmp	r2, #0
9000c66a:	d0f2      	beq.n	9000c652 <dns_check_entry+0xa2>
9000c66c:	3a01      	subs	r2, #1
9000c66e:	50ea      	str	r2, [r5, r3]
9000c670:	2a00      	cmp	r2, #0
9000c672:	d0ee      	beq.n	9000c652 <dns_check_entry+0xa2>
9000c674:	e7f3      	b.n	9000c65e <dns_check_entry+0xae>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
9000c676:	4b04      	ldr	r3, [pc, #16]	; (9000c688 <dns_check_entry+0xd8>)
9000c678:	f240 425b 	movw	r2, #1115	; 0x45b
9000c67c:	4907      	ldr	r1, [pc, #28]	; (9000c69c <dns_check_entry+0xec>)
9000c67e:	4804      	ldr	r0, [pc, #16]	; (9000c690 <dns_check_entry+0xe0>)
}
9000c680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
9000c684:	f01c bf24 	b.w	900294d0 <iprintf>
9000c688:	9002bcd0 	.word	0x9002bcd0
9000c68c:	9002bd47 	.word	0x9002bd47
9000c690:	9002a254 	.word	0x9002a254
9000c694:	200266ac 	.word	0x200266ac
9000c698:	200266a4 	.word	0x200266a4
9000c69c:	9002bd61 	.word	0x9002bd61

9000c6a0 <dns_init>:
}
9000c6a0:	4770      	bx	lr
	...

9000c6a4 <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
9000c6a4:	2801      	cmp	r0, #1
9000c6a6:	d804      	bhi.n	9000c6b2 <dns_setserver+0xe>
    if (dnsserver != NULL) {
9000c6a8:	4b04      	ldr	r3, [pc, #16]	; (9000c6bc <dns_setserver+0x18>)
9000c6aa:	b119      	cbz	r1, 9000c6b4 <dns_setserver+0x10>
      dns_servers[numdns] = (*dnsserver);
9000c6ac:	680a      	ldr	r2, [r1, #0]
      dns_servers[numdns] = *IP_ADDR_ANY;
9000c6ae:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
9000c6b2:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
9000c6b4:	4a02      	ldr	r2, [pc, #8]	; (9000c6c0 <dns_setserver+0x1c>)
9000c6b6:	6812      	ldr	r2, [r2, #0]
9000c6b8:	e7f9      	b.n	9000c6ae <dns_setserver+0xa>
9000c6ba:	bf00      	nop
9000c6bc:	200266a4 	.word	0x200266a4
9000c6c0:	9002c1b0 	.word	0x9002c1b0

9000c6c4 <dns_tmr>:
{
9000c6c4:	b508      	push	{r3, lr}
dns_check_entries(void)
{
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
    dns_check_entry(i);
9000c6c6:	2000      	movs	r0, #0
9000c6c8:	f7ff ff72 	bl	9000c5b0 <dns_check_entry>
9000c6cc:	2001      	movs	r0, #1
9000c6ce:	f7ff ff6f 	bl	9000c5b0 <dns_check_entry>
9000c6d2:	2002      	movs	r0, #2
9000c6d4:	f7ff ff6c 	bl	9000c5b0 <dns_check_entry>
9000c6d8:	2003      	movs	r0, #3
}
9000c6da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
9000c6de:	f7ff bf67 	b.w	9000c5b0 <dns_check_entry>
	...

9000c6e4 <err_to_errno>:
};

int
err_to_errno(err_t err)
{
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
9000c6e4:	f100 0310 	add.w	r3, r0, #16
9000c6e8:	b2db      	uxtb	r3, r3
9000c6ea:	2b10      	cmp	r3, #16
    return EIO;
  }
  return err_to_errno_table[-err];
9000c6ec:	bf9d      	ittte	ls
9000c6ee:	4240      	negls	r0, r0
9000c6f0:	4b02      	ldrls	r3, [pc, #8]	; (9000c6fc <err_to_errno+0x18>)
9000c6f2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    return EIO;
9000c6f6:	2005      	movhi	r0, #5
}
9000c6f8:	4770      	bx	lr
9000c6fa:	bf00      	nop
9000c6fc:	9002bd80 	.word	0x9002bd80

9000c700 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
9000c700:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
9000c702:	2618      	movs	r6, #24
9000c704:	4d07      	ldr	r5, [pc, #28]	; (9000c724 <etharp_free_entry+0x24>)
{
9000c706:	4604      	mov	r4, r0
  if (arp_table[i].q != NULL) {
9000c708:	4346      	muls	r6, r0
9000c70a:	59a8      	ldr	r0, [r5, r6]
9000c70c:	b118      	cbz	r0, 9000c716 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
9000c70e:	f002 f881 	bl	9000e814 <pbuf_free>
    arp_table[i].q = NULL;
9000c712:	2300      	movs	r3, #0
9000c714:	51ab      	str	r3, [r5, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
9000c716:	2018      	movs	r0, #24
9000c718:	2300      	movs	r3, #0
9000c71a:	fb00 5404 	mla	r4, r0, r4, r5
9000c71e:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
9000c720:	bd70      	pop	{r4, r5, r6, pc}
9000c722:	bf00      	nop
9000c724:	20026aec 	.word	0x20026aec

9000c728 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
9000c728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000c72c:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
9000c72e:	f04f 0e0a 	mov.w	lr, #10
{
9000c732:	4606      	mov	r6, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
9000c734:	4699      	mov	r9, r3
9000c736:	469b      	mov	fp, r3
9000c738:	469c      	mov	ip, r3
  s16_t empty = ARP_TABLE_SIZE;
9000c73a:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
9000c73c:	4675      	mov	r5, lr
9000c73e:	46f0      	mov	r8, lr
{
9000c740:	e9cd 2100 	strd	r2, r1, [sp]
9000c744:	4a3a      	ldr	r2, [pc, #232]	; (9000c830 <etharp_find_entry+0x108>)
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
9000c746:	2c0a      	cmp	r4, #10
9000c748:	b218      	sxth	r0, r3
    u8_t state = arp_table[i].state;
9000c74a:	f892 a014 	ldrb.w	sl, [r2, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
9000c74e:	d11a      	bne.n	9000c786 <etharp_find_entry+0x5e>
9000c750:	f1ba 0f00 	cmp.w	sl, #0
9000c754:	d05d      	beq.n	9000c812 <etharp_find_entry+0xea>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
9000c756:	b156      	cbz	r6, 9000c76e <etharp_find_entry+0x46>
9000c758:	6837      	ldr	r7, [r6, #0]
9000c75a:	6851      	ldr	r1, [r2, #4]
9000c75c:	428f      	cmp	r7, r1
9000c75e:	d106      	bne.n	9000c76e <etharp_find_entry+0x46>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
9000c760:	9900      	ldr	r1, [sp, #0]
9000c762:	2900      	cmp	r1, #0
9000c764:	d048      	beq.n	9000c7f8 <etharp_find_entry+0xd0>
9000c766:	6891      	ldr	r1, [r2, #8]
9000c768:	9f00      	ldr	r7, [sp, #0]
9000c76a:	42b9      	cmp	r1, r7
9000c76c:	d044      	beq.n	9000c7f8 <etharp_find_entry+0xd0>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
9000c76e:	f1ba 0f01 	cmp.w	sl, #1
9000c772:	8a51      	ldrh	r1, [r2, #18]
9000c774:	d148      	bne.n	9000c808 <etharp_find_entry+0xe0>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
9000c776:	6817      	ldr	r7, [r2, #0]
9000c778:	2f00      	cmp	r7, #0
9000c77a:	d040      	beq.n	9000c7fe <etharp_find_entry+0xd6>
          if (arp_table[i].ctime >= age_queue) {
9000c77c:	458c      	cmp	ip, r1
9000c77e:	d805      	bhi.n	9000c78c <etharp_find_entry+0x64>
9000c780:	468c      	mov	ip, r1
9000c782:	4686      	mov	lr, r0
9000c784:	e002      	b.n	9000c78c <etharp_find_entry+0x64>
    } else if (state != ETHARP_STATE_EMPTY) {
9000c786:	f1ba 0f00 	cmp.w	sl, #0
9000c78a:	d1e4      	bne.n	9000c756 <etharp_find_entry+0x2e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
9000c78c:	3301      	adds	r3, #1
9000c78e:	3218      	adds	r2, #24
9000c790:	2b0a      	cmp	r3, #10
9000c792:	d1d8      	bne.n	9000c746 <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
9000c794:	9b01      	ldr	r3, [sp, #4]
9000c796:	2b01      	cmp	r3, #1
9000c798:	d143      	bne.n	9000c822 <etharp_find_entry+0xfa>
9000c79a:	2c0a      	cmp	r4, #10
9000c79c:	d111      	bne.n	9000c7c2 <etharp_find_entry+0x9a>
  if (empty < ARP_TABLE_SIZE) {
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
9000c79e:	2d0a      	cmp	r5, #10
9000c7a0:	d039      	beq.n	9000c816 <etharp_find_entry+0xee>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
9000c7a2:	2318      	movs	r3, #24
9000c7a4:	4a22      	ldr	r2, [pc, #136]	; (9000c830 <etharp_find_entry+0x108>)
9000c7a6:	436b      	muls	r3, r5
9000c7a8:	58d3      	ldr	r3, [r2, r3]
9000c7aa:	b133      	cbz	r3, 9000c7ba <etharp_find_entry+0x92>
9000c7ac:	4b21      	ldr	r3, [pc, #132]	; (9000c834 <etharp_find_entry+0x10c>)
9000c7ae:	f240 126d 	movw	r2, #365	; 0x16d
9000c7b2:	4921      	ldr	r1, [pc, #132]	; (9000c838 <etharp_find_entry+0x110>)
9000c7b4:	4821      	ldr	r0, [pc, #132]	; (9000c83c <etharp_find_entry+0x114>)
9000c7b6:	f01c fe8b 	bl	900294d0 <iprintf>
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
9000c7ba:	462c      	mov	r4, r5
9000c7bc:	4628      	mov	r0, r5
9000c7be:	f7ff ff9f 	bl	9000c700 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
9000c7c2:	4d1b      	ldr	r5, [pc, #108]	; (9000c830 <etharp_find_entry+0x108>)
9000c7c4:	2318      	movs	r3, #24
9000c7c6:	fb03 5304 	mla	r3, r3, r4, r5
9000c7ca:	7d1b      	ldrb	r3, [r3, #20]
9000c7cc:	b133      	cbz	r3, 9000c7dc <etharp_find_entry+0xb4>
9000c7ce:	4b19      	ldr	r3, [pc, #100]	; (9000c834 <etharp_find_entry+0x10c>)
9000c7d0:	f44f 72c2 	mov.w	r2, #388	; 0x184
9000c7d4:	491a      	ldr	r1, [pc, #104]	; (9000c840 <etharp_find_entry+0x118>)
9000c7d6:	4819      	ldr	r0, [pc, #100]	; (9000c83c <etharp_find_entry+0x114>)
9000c7d8:	f01c fe7a 	bl	900294d0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
9000c7dc:	b126      	cbz	r6, 9000c7e8 <etharp_find_entry+0xc0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
9000c7de:	2318      	movs	r3, #24
9000c7e0:	6832      	ldr	r2, [r6, #0]
9000c7e2:	fb03 5304 	mla	r3, r3, r4, r5
9000c7e6:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
9000c7e8:	2318      	movs	r3, #24
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
9000c7ea:	4620      	mov	r0, r4
  arp_table[i].ctime = 0;
9000c7ec:	fb03 5504 	mla	r5, r3, r4, r5
9000c7f0:	2300      	movs	r3, #0
9000c7f2:	826b      	strh	r3, [r5, #18]
  arp_table[i].netif = netif;
9000c7f4:	9b00      	ldr	r3, [sp, #0]
9000c7f6:	60ab      	str	r3, [r5, #8]
}
9000c7f8:	b003      	add	sp, #12
9000c7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
9000c7fe:	458b      	cmp	fp, r1
9000c800:	d8c4      	bhi.n	9000c78c <etharp_find_entry+0x64>
9000c802:	468b      	mov	fp, r1
9000c804:	4680      	mov	r8, r0
9000c806:	e7c1      	b.n	9000c78c <etharp_find_entry+0x64>
          if (arp_table[i].ctime >= age_stable) {
9000c808:	4589      	cmp	r9, r1
9000c80a:	d8bf      	bhi.n	9000c78c <etharp_find_entry+0x64>
9000c80c:	4689      	mov	r9, r1
9000c80e:	4605      	mov	r5, r0
9000c810:	e7bc      	b.n	9000c78c <etharp_find_entry+0x64>
9000c812:	4604      	mov	r4, r0
9000c814:	e7ba      	b.n	9000c78c <etharp_find_entry+0x64>
    } else if (old_pending < ARP_TABLE_SIZE) {
9000c816:	f1b8 0f0a 	cmp.w	r8, #10
9000c81a:	d105      	bne.n	9000c828 <etharp_find_entry+0x100>
    } else if (old_queue < ARP_TABLE_SIZE) {
9000c81c:	f1be 0f0a 	cmp.w	lr, #10
9000c820:	d104      	bne.n	9000c82c <etharp_find_entry+0x104>
    return (s16_t)ERR_MEM;
9000c822:	f04f 30ff 	mov.w	r0, #4294967295
9000c826:	e7e7      	b.n	9000c7f8 <etharp_find_entry+0xd0>
9000c828:	4645      	mov	r5, r8
9000c82a:	e7c6      	b.n	9000c7ba <etharp_find_entry+0x92>
9000c82c:	4675      	mov	r5, lr
9000c82e:	e7c4      	b.n	9000c7ba <etharp_find_entry+0x92>
9000c830:	20026aec 	.word	0x20026aec
9000c834:	9002bdc4 	.word	0x9002bdc4
9000c838:	9002be2b 	.word	0x9002be2b
9000c83c:	9002a254 	.word	0x9002a254
9000c840:	9002be42 	.word	0x9002be42

9000c844 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
9000c844:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
9000c848:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
9000c84c:	4688      	mov	r8, r1
9000c84e:	4691      	mov	r9, r2
9000c850:	461e      	mov	r6, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
9000c852:	4607      	mov	r7, r0
9000c854:	b930      	cbnz	r0, 9000c864 <etharp_raw+0x20>
9000c856:	4b2d      	ldr	r3, [pc, #180]	; (9000c90c <etharp_raw+0xc8>)
9000c858:	f240 4257 	movw	r2, #1111	; 0x457
9000c85c:	492c      	ldr	r1, [pc, #176]	; (9000c910 <etharp_raw+0xcc>)
9000c85e:	482d      	ldr	r0, [pc, #180]	; (9000c914 <etharp_raw+0xd0>)
9000c860:	f01c fe36 	bl	900294d0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
9000c864:	f44f 7220 	mov.w	r2, #640	; 0x280
9000c868:	211c      	movs	r1, #28
9000c86a:	200e      	movs	r0, #14
9000c86c:	f002 f83a 	bl	9000e8e4 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
9000c870:	4605      	mov	r5, r0
9000c872:	2800      	cmp	r0, #0
9000c874:	d047      	beq.n	9000c906 <etharp_raw+0xc2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
9000c876:	8943      	ldrh	r3, [r0, #10]
9000c878:	2b1b      	cmp	r3, #27
9000c87a:	d806      	bhi.n	9000c88a <etharp_raw+0x46>
9000c87c:	4b23      	ldr	r3, [pc, #140]	; (9000c90c <etharp_raw+0xc8>)
9000c87e:	f240 4262 	movw	r2, #1122	; 0x462
9000c882:	4925      	ldr	r1, [pc, #148]	; (9000c918 <etharp_raw+0xd4>)
9000c884:	4823      	ldr	r0, [pc, #140]	; (9000c914 <etharp_raw+0xd0>)
9000c886:	f01c fe23 	bl	900294d0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
9000c88a:	686c      	ldr	r4, [r5, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
9000c88c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
9000c890:	f7fe fc38 	bl	9000b104 <lwip_htons>
9000c894:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
9000c896:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
9000c89a:	2b06      	cmp	r3, #6
9000c89c:	d006      	beq.n	9000c8ac <etharp_raw+0x68>
9000c89e:	4b1b      	ldr	r3, [pc, #108]	; (9000c90c <etharp_raw+0xc8>)
9000c8a0:	f240 4269 	movw	r2, #1129	; 0x469
9000c8a4:	491d      	ldr	r1, [pc, #116]	; (9000c91c <etharp_raw+0xd8>)
9000c8a6:	481b      	ldr	r0, [pc, #108]	; (9000c914 <etharp_raw+0xd0>)
9000c8a8:	f01c fe12 	bl	900294d0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
9000c8ac:	6833      	ldr	r3, [r6, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
9000c8ae:	4642      	mov	r2, r8
9000c8b0:	4629      	mov	r1, r5
9000c8b2:	4638      	mov	r0, r7
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
9000c8b4:	60a3      	str	r3, [r4, #8]
9000c8b6:	88b3      	ldrh	r3, [r6, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
9000c8b8:	2600      	movs	r6, #0
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
9000c8ba:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
9000c8bc:	f8da 3000 	ldr.w	r3, [sl]
9000c8c0:	f8c4 3012 	str.w	r3, [r4, #18]
9000c8c4:	f8ba 3004 	ldrh.w	r3, [sl, #4]
9000c8c8:	82e3      	strh	r3, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
9000c8ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9000c8cc:	681b      	ldr	r3, [r3, #0]
9000c8ce:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
9000c8d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9000c8d4:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
9000c8d6:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
9000c8d8:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
9000c8da:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
9000c8dc:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
9000c8de:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
9000c8e0:	2308      	movs	r3, #8
9000c8e2:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
9000c8e4:	2306      	movs	r3, #6
9000c8e6:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
9000c8e8:	2304      	movs	r3, #4
9000c8ea:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
9000c8ec:	f640 0306 	movw	r3, #2054	; 0x806
9000c8f0:	9300      	str	r3, [sp, #0]
9000c8f2:	464b      	mov	r3, r9
9000c8f4:	f000 faea 	bl	9000cecc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
9000c8f8:	4628      	mov	r0, r5
9000c8fa:	f001 ff8b 	bl	9000e814 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
9000c8fe:	4630      	mov	r0, r6
}
9000c900:	b002      	add	sp, #8
9000c902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
9000c906:	f04f 30ff 	mov.w	r0, #4294967295
9000c90a:	e7f9      	b.n	9000c900 <etharp_raw+0xbc>
9000c90c:	9002bdc4 	.word	0x9002bdc4
9000c910:	9002bb7d 	.word	0x9002bb7d
9000c914:	9002a254 	.word	0x9002a254
9000c918:	9002be6b 	.word	0x9002be6b
9000c91c:	9002be9c 	.word	0x9002be9c

9000c920 <etharp_cleanup_netif>:
{
9000c920:	b570      	push	{r4, r5, r6, lr}
9000c922:	4606      	mov	r6, r0
9000c924:	4d07      	ldr	r5, [pc, #28]	; (9000c944 <etharp_cleanup_netif+0x24>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
9000c926:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
9000c928:	7d2b      	ldrb	r3, [r5, #20]
9000c92a:	b12b      	cbz	r3, 9000c938 <etharp_cleanup_netif+0x18>
9000c92c:	68ab      	ldr	r3, [r5, #8]
9000c92e:	42b3      	cmp	r3, r6
9000c930:	d102      	bne.n	9000c938 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
9000c932:	4620      	mov	r0, r4
9000c934:	f7ff fee4 	bl	9000c700 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
9000c938:	3401      	adds	r4, #1
9000c93a:	3518      	adds	r5, #24
9000c93c:	2c0a      	cmp	r4, #10
9000c93e:	d1f3      	bne.n	9000c928 <etharp_cleanup_netif+0x8>
}
9000c940:	bd70      	pop	{r4, r5, r6, pc}
9000c942:	bf00      	nop
9000c944:	20026aec 	.word	0x20026aec

9000c948 <etharp_input>:
{
9000c948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000c94c:	4607      	mov	r7, r0
9000c94e:	b088      	sub	sp, #32
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
9000c950:	460c      	mov	r4, r1
9000c952:	b949      	cbnz	r1, 9000c968 <etharp_input+0x20>
9000c954:	4b4c      	ldr	r3, [pc, #304]	; (9000ca88 <etharp_input+0x140>)
9000c956:	f240 228a 	movw	r2, #650	; 0x28a
9000c95a:	494c      	ldr	r1, [pc, #304]	; (9000ca8c <etharp_input+0x144>)
9000c95c:	484c      	ldr	r0, [pc, #304]	; (9000ca90 <etharp_input+0x148>)
9000c95e:	f01c fdb7 	bl	900294d0 <iprintf>
}
9000c962:	b008      	add	sp, #32
9000c964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
9000c968:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
9000c96a:	882b      	ldrh	r3, [r5, #0]
9000c96c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000c970:	d108      	bne.n	9000c984 <etharp_input+0x3c>
9000c972:	792b      	ldrb	r3, [r5, #4]
9000c974:	2b06      	cmp	r3, #6
9000c976:	d105      	bne.n	9000c984 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
9000c978:	796b      	ldrb	r3, [r5, #5]
9000c97a:	2b04      	cmp	r3, #4
9000c97c:	d102      	bne.n	9000c984 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
9000c97e:	886b      	ldrh	r3, [r5, #2]
9000c980:	2b08      	cmp	r3, #8
9000c982:	d003      	beq.n	9000c98c <etharp_input+0x44>
  pbuf_free(p);
9000c984:	4638      	mov	r0, r7
9000c986:	f001 ff45 	bl	9000e814 <pbuf_free>
9000c98a:	e7ea      	b.n	9000c962 <etharp_input+0x1a>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
9000c98c:	f8d5 300e 	ldr.w	r3, [r5, #14]
9000c990:	f105 0808 	add.w	r8, r5, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
9000c994:	684e      	ldr	r6, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
9000c996:	9307      	str	r3, [sp, #28]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
9000c998:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
9000c99a:	2e00      	cmp	r6, #0
9000c99c:	d05f      	beq.n	9000ca5e <etharp_input+0x116>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
9000c99e:	1af3      	subs	r3, r6, r3
9000c9a0:	425e      	negs	r6, r3
9000c9a2:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
9000c9a4:	f1c6 0a02 	rsb	sl, r6, #2
9000c9a8:	fa5f fa8a 	uxtb.w	sl, sl
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
9000c9ac:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
9000c9b0:	2b06      	cmp	r3, #6
9000c9b2:	d006      	beq.n	9000c9c2 <etharp_input+0x7a>
9000c9b4:	4b34      	ldr	r3, [pc, #208]	; (9000ca88 <etharp_input+0x140>)
9000c9b6:	f240 12a9 	movw	r2, #425	; 0x1a9
9000c9ba:	4936      	ldr	r1, [pc, #216]	; (9000ca94 <etharp_input+0x14c>)
9000c9bc:	4834      	ldr	r0, [pc, #208]	; (9000ca90 <etharp_input+0x148>)
9000c9be:	f01c fd87 	bl	900294d0 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
9000c9c2:	9807      	ldr	r0, [sp, #28]
9000c9c4:	2800      	cmp	r0, #0
9000c9c6:	d03e      	beq.n	9000ca46 <etharp_input+0xfe>
      ip4_addr_isbroadcast(ipaddr, netif) ||
9000c9c8:	4621      	mov	r1, r4
9000c9ca:	f000 fd4a 	bl	9000d462 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
9000c9ce:	4681      	mov	r9, r0
9000c9d0:	2800      	cmp	r0, #0
9000c9d2:	d138      	bne.n	9000ca46 <etharp_input+0xfe>
      ip4_addr_ismulticast(ipaddr)) {
9000c9d4:	9b07      	ldr	r3, [sp, #28]
9000c9d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
9000c9da:	2be0      	cmp	r3, #224	; 0xe0
9000c9dc:	d033      	beq.n	9000ca46 <etharp_input+0xfe>
  i = etharp_find_entry(ipaddr, flags, netif);
9000c9de:	4622      	mov	r2, r4
9000c9e0:	4651      	mov	r1, sl
9000c9e2:	a807      	add	r0, sp, #28
9000c9e4:	f7ff fea0 	bl	9000c728 <etharp_find_entry>
  if (i < 0) {
9000c9e8:	1e03      	subs	r3, r0, #0
9000c9ea:	db2c      	blt.n	9000ca46 <etharp_input+0xfe>
    arp_table[i].state = ETHARP_STATE_STABLE;
9000c9ec:	2018      	movs	r0, #24
9000c9ee:	4a2a      	ldr	r2, [pc, #168]	; (9000ca98 <etharp_input+0x150>)
9000c9f0:	f04f 0e02 	mov.w	lr, #2
9000c9f4:	fb00 fc03 	mul.w	ip, r0, r3
9000c9f8:	eb02 010c 	add.w	r1, r2, ip
9000c9fc:	f881 e014 	strb.w	lr, [r1, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
9000ca00:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
9000ca04:	608c      	str	r4, [r1, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
9000ca06:	fb13 e300 	smlabb	r3, r3, r0, lr
9000ca0a:	f8d8 0000 	ldr.w	r0, [r8]
9000ca0e:	eb02 0e03 	add.w	lr, r2, r3
9000ca12:	50d0      	str	r0, [r2, r3]
9000ca14:	f8b8 3004 	ldrh.w	r3, [r8, #4]
9000ca18:	f8ae 3004 	strh.w	r3, [lr, #4]
  arp_table[i].ctime = 0;
9000ca1c:	f8a1 9012 	strh.w	r9, [r1, #18]
  if (arp_table[i].q != NULL) {
9000ca20:	f852 100c 	ldr.w	r1, [r2, ip]
9000ca24:	b179      	cbz	r1, 9000ca46 <etharp_input+0xfe>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
9000ca26:	f44f 6300 	mov.w	r3, #2048	; 0x800
    arp_table[i].q = NULL;
9000ca2a:	f842 900c 	str.w	r9, [r2, ip]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
9000ca2e:	4620      	mov	r0, r4
9000ca30:	f104 022a 	add.w	r2, r4, #42	; 0x2a
9000ca34:	9300      	str	r3, [sp, #0]
9000ca36:	4643      	mov	r3, r8
9000ca38:	9105      	str	r1, [sp, #20]
9000ca3a:	f000 fa47 	bl	9000cecc <ethernet_output>
    pbuf_free(p);
9000ca3e:	9905      	ldr	r1, [sp, #20]
9000ca40:	4608      	mov	r0, r1
9000ca42:	f001 fee7 	bl	9000e814 <pbuf_free>
  switch (hdr->opcode) {
9000ca46:	88eb      	ldrh	r3, [r5, #6]
9000ca48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000ca4c:	d00a      	beq.n	9000ca64 <etharp_input+0x11c>
9000ca4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
9000ca52:	d197      	bne.n	9000c984 <etharp_input+0x3c>
      dhcp_arp_reply(netif, &sipaddr);
9000ca54:	a907      	add	r1, sp, #28
9000ca56:	4620      	mov	r0, r4
9000ca58:	f7ff fa1e 	bl	9000be98 <dhcp_arp_reply>
      break;
9000ca5c:	e792      	b.n	9000c984 <etharp_input+0x3c>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
9000ca5e:	f04f 0a02 	mov.w	sl, #2
9000ca62:	e7a3      	b.n	9000c9ac <etharp_input+0x64>
      if (for_us) {
9000ca64:	2e00      	cmp	r6, #0
9000ca66:	d08d      	beq.n	9000c984 <etharp_input+0x3c>
        etharp_raw(netif,
9000ca68:	2202      	movs	r2, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
9000ca6a:	f104 032a 	add.w	r3, r4, #42	; 0x2a
        etharp_raw(netif,
9000ca6e:	4620      	mov	r0, r4
9000ca70:	9203      	str	r2, [sp, #12]
9000ca72:	aa07      	add	r2, sp, #28
9000ca74:	4619      	mov	r1, r3
9000ca76:	e9cd 8201 	strd	r8, r2, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
9000ca7a:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
9000ca7c:	9200      	str	r2, [sp, #0]
9000ca7e:	4642      	mov	r2, r8
9000ca80:	f7ff fee0 	bl	9000c844 <etharp_raw>
9000ca84:	e77e      	b.n	9000c984 <etharp_input+0x3c>
9000ca86:	bf00      	nop
9000ca88:	9002bdc4 	.word	0x9002bdc4
9000ca8c:	9002bb7d 	.word	0x9002bb7d
9000ca90:	9002a254 	.word	0x9002a254
9000ca94:	9002befc 	.word	0x9002befc
9000ca98:	20026aec 	.word	0x20026aec

9000ca9c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
9000ca9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
9000ca9e:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
9000caa0:	2401      	movs	r4, #1
9000caa2:	f100 032a 	add.w	r3, r0, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
9000caa6:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
9000caa8:	e9cd 1402 	strd	r1, r4, [sp, #8]
9000caac:	4904      	ldr	r1, [pc, #16]	; (9000cac0 <etharp_request+0x24>)
9000caae:	9200      	str	r2, [sp, #0]
9000cab0:	9101      	str	r1, [sp, #4]
9000cab2:	4619      	mov	r1, r3
9000cab4:	4a03      	ldr	r2, [pc, #12]	; (9000cac4 <etharp_request+0x28>)
9000cab6:	f7ff fec5 	bl	9000c844 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
9000caba:	b004      	add	sp, #16
9000cabc:	bd10      	pop	{r4, pc}
9000cabe:	bf00      	nop
9000cac0:	9002c014 	.word	0x9002c014
9000cac4:	9002c00e 	.word	0x9002c00e

9000cac8 <etharp_tmr>:
{
9000cac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000caca:	4c13      	ldr	r4, [pc, #76]	; (9000cb18 <etharp_tmr+0x50>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
9000cacc:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
9000cace:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
9000cad0:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
9000cad2:	7d22      	ldrb	r2, [r4, #20]
    if (state != ETHARP_STATE_EMPTY
9000cad4:	b16a      	cbz	r2, 9000caf2 <etharp_tmr+0x2a>
      arp_table[i].ctime++;
9000cad6:	8a63      	ldrh	r3, [r4, #18]
9000cad8:	3301      	adds	r3, #1
9000cada:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
9000cadc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
9000cae0:	8263      	strh	r3, [r4, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
9000cae2:	d203      	bcs.n	9000caec <etharp_tmr+0x24>
9000cae4:	2a01      	cmp	r2, #1
9000cae6:	d109      	bne.n	9000cafc <etharp_tmr+0x34>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
9000cae8:	2b04      	cmp	r3, #4
9000caea:	d90f      	bls.n	9000cb0c <etharp_tmr+0x44>
        etharp_free_entry(i);
9000caec:	4628      	mov	r0, r5
9000caee:	f7ff fe07 	bl	9000c700 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
9000caf2:	3501      	adds	r5, #1
9000caf4:	3418      	adds	r4, #24
9000caf6:	2d0a      	cmp	r5, #10
9000caf8:	d1eb      	bne.n	9000cad2 <etharp_tmr+0xa>
}
9000cafa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
9000cafc:	2a03      	cmp	r2, #3
9000cafe:	d101      	bne.n	9000cb04 <etharp_tmr+0x3c>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
9000cb00:	7527      	strb	r7, [r4, #20]
9000cb02:	e7f6      	b.n	9000caf2 <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
9000cb04:	2a04      	cmp	r2, #4
9000cb06:	d1f4      	bne.n	9000caf2 <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
9000cb08:	7526      	strb	r6, [r4, #20]
9000cb0a:	e7f2      	b.n	9000caf2 <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
9000cb0c:	1d21      	adds	r1, r4, #4
9000cb0e:	68a0      	ldr	r0, [r4, #8]
9000cb10:	f7ff ffc4 	bl	9000ca9c <etharp_request>
9000cb14:	e7ed      	b.n	9000caf2 <etharp_tmr+0x2a>
9000cb16:	bf00      	nop
9000cb18:	20026aec 	.word	0x20026aec

9000cb1c <etharp_output_to_arp_index>:
{
9000cb1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
9000cb20:	4d24      	ldr	r5, [pc, #144]	; (9000cbb4 <etharp_output_to_arp_index+0x98>)
9000cb22:	2318      	movs	r3, #24
{
9000cb24:	4607      	mov	r7, r0
9000cb26:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
9000cb28:	fb03 5302 	mla	r3, r3, r2, r5
{
9000cb2c:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
9000cb2e:	7d1b      	ldrb	r3, [r3, #20]
9000cb30:	2b01      	cmp	r3, #1
9000cb32:	d806      	bhi.n	9000cb42 <etharp_output_to_arp_index+0x26>
9000cb34:	4b20      	ldr	r3, [pc, #128]	; (9000cbb8 <etharp_output_to_arp_index+0x9c>)
9000cb36:	f240 22ee 	movw	r2, #750	; 0x2ee
9000cb3a:	4920      	ldr	r1, [pc, #128]	; (9000cbbc <etharp_output_to_arp_index+0xa0>)
9000cb3c:	4820      	ldr	r0, [pc, #128]	; (9000cbc0 <etharp_output_to_arp_index+0xa4>)
9000cb3e:	f01c fcc7 	bl	900294d0 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
9000cb42:	2218      	movs	r2, #24
9000cb44:	eb04 0644 	add.w	r6, r4, r4, lsl #1
9000cb48:	f107 092a 	add.w	r9, r7, #42	; 0x2a
9000cb4c:	fb02 5404 	mla	r4, r2, r4, r5
9000cb50:	00f6      	lsls	r6, r6, #3
9000cb52:	7d23      	ldrb	r3, [r4, #20]
9000cb54:	f106 0a0c 	add.w	sl, r6, #12
9000cb58:	2b02      	cmp	r3, #2
9000cb5a:	44aa      	add	sl, r5
9000cb5c:	d10b      	bne.n	9000cb76 <etharp_output_to_arp_index+0x5a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
9000cb5e:	8a63      	ldrh	r3, [r4, #18]
9000cb60:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
9000cb64:	d913      	bls.n	9000cb8e <etharp_output_to_arp_index+0x72>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
9000cb66:	3604      	adds	r6, #4
9000cb68:	4638      	mov	r0, r7
9000cb6a:	19a9      	adds	r1, r5, r6
9000cb6c:	f7ff ff96 	bl	9000ca9c <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
9000cb70:	b908      	cbnz	r0, 9000cb76 <etharp_output_to_arp_index+0x5a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
9000cb72:	2303      	movs	r3, #3
9000cb74:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
9000cb76:	f44f 6300 	mov.w	r3, #2048	; 0x800
9000cb7a:	464a      	mov	r2, r9
9000cb7c:	4641      	mov	r1, r8
9000cb7e:	4638      	mov	r0, r7
9000cb80:	9300      	str	r3, [sp, #0]
9000cb82:	4653      	mov	r3, sl
9000cb84:	f000 f9a2 	bl	9000cecc <ethernet_output>
}
9000cb88:	b004      	add	sp, #16
9000cb8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
9000cb8e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
9000cb92:	d3f0      	bcc.n	9000cb76 <etharp_output_to_arp_index+0x5a>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
9000cb94:	2301      	movs	r3, #1
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
9000cb96:	3604      	adds	r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
9000cb98:	4652      	mov	r2, sl
9000cb9a:	4649      	mov	r1, r9
9000cb9c:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
9000cb9e:	442e      	add	r6, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
9000cba0:	4b08      	ldr	r3, [pc, #32]	; (9000cbc4 <etharp_output_to_arp_index+0xa8>)
9000cba2:	4638      	mov	r0, r7
9000cba4:	9602      	str	r6, [sp, #8]
9000cba6:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
9000cba8:	1d3b      	adds	r3, r7, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
9000cbaa:	9300      	str	r3, [sp, #0]
9000cbac:	464b      	mov	r3, r9
9000cbae:	f7ff fe49 	bl	9000c844 <etharp_raw>
9000cbb2:	e7dd      	b.n	9000cb70 <etharp_output_to_arp_index+0x54>
9000cbb4:	20026aec 	.word	0x20026aec
9000cbb8:	9002bdc4 	.word	0x9002bdc4
9000cbbc:	9002bf20 	.word	0x9002bf20
9000cbc0:	9002a254 	.word	0x9002a254
9000cbc4:	9002c014 	.word	0x9002c014

9000cbc8 <etharp_query>:
{
9000cbc8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
9000cbcc:	4688      	mov	r8, r1
9000cbce:	4606      	mov	r6, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
9000cbd0:	4601      	mov	r1, r0
{
9000cbd2:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
9000cbd4:	f8d8 0000 	ldr.w	r0, [r8]
9000cbd8:	f000 fc43 	bl	9000d462 <ip4_addr_isbroadcast_u32>
9000cbdc:	2800      	cmp	r0, #0
9000cbde:	d16b      	bne.n	9000ccb8 <etharp_query+0xf0>
      ip4_addr_ismulticast(ipaddr) ||
9000cbe0:	f8d8 3000 	ldr.w	r3, [r8]
9000cbe4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
9000cbe8:	2ae0      	cmp	r2, #224	; 0xe0
9000cbea:	d065      	beq.n	9000ccb8 <etharp_query+0xf0>
      ip4_addr_isany(ipaddr)) {
9000cbec:	2b00      	cmp	r3, #0
9000cbee:	d063      	beq.n	9000ccb8 <etharp_query+0xf0>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
9000cbf0:	4632      	mov	r2, r6
9000cbf2:	2101      	movs	r1, #1
9000cbf4:	4640      	mov	r0, r8
9000cbf6:	f7ff fd97 	bl	9000c728 <etharp_find_entry>
  if (i_err < 0) {
9000cbfa:	1e04      	subs	r4, r0, #0
9000cbfc:	da03      	bge.n	9000cc06 <etharp_query+0x3e>
    return (err_t)i_err;
9000cbfe:	b260      	sxtb	r0, r4
}
9000cc00:	b002      	add	sp, #8
9000cc02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
9000cc06:	2c7e      	cmp	r4, #126	; 0x7e
9000cc08:	dd06      	ble.n	9000cc18 <etharp_query+0x50>
9000cc0a:	4b35      	ldr	r3, [pc, #212]	; (9000cce0 <etharp_query+0x118>)
9000cc0c:	f240 32c1 	movw	r2, #961	; 0x3c1
9000cc10:	4934      	ldr	r1, [pc, #208]	; (9000cce4 <etharp_query+0x11c>)
9000cc12:	4835      	ldr	r0, [pc, #212]	; (9000cce8 <etharp_query+0x120>)
9000cc14:	f01c fc5c 	bl	900294d0 <iprintf>
  i = (netif_addr_idx_t)i_err;
9000cc18:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
9000cc1a:	4f34      	ldr	r7, [pc, #208]	; (9000ccec <etharp_query+0x124>)
9000cc1c:	2218      	movs	r2, #24
9000cc1e:	fb02 7204 	mla	r2, r2, r4, r7
9000cc22:	7d13      	ldrb	r3, [r2, #20]
9000cc24:	2b00      	cmp	r3, #0
9000cc26:	d156      	bne.n	9000ccd6 <etharp_query+0x10e>
    arp_table[i].state = ETHARP_STATE_PENDING;
9000cc28:	2301      	movs	r3, #1
    arp_table[i].netif = netif;
9000cc2a:	6096      	str	r6, [r2, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
9000cc2c:	7513      	strb	r3, [r2, #20]
    result = etharp_request(netif, ipaddr);
9000cc2e:	4641      	mov	r1, r8
9000cc30:	4630      	mov	r0, r6
9000cc32:	f7ff ff33 	bl	9000ca9c <etharp_request>
    if (q == NULL) {
9000cc36:	2d00      	cmp	r5, #0
9000cc38:	d0e2      	beq.n	9000cc00 <etharp_query+0x38>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
9000cc3a:	2318      	movs	r3, #24
9000cc3c:	fb03 7204 	mla	r2, r3, r4, r7
9000cc40:	7d12      	ldrb	r2, [r2, #20]
9000cc42:	2a01      	cmp	r2, #1
9000cc44:	d90e      	bls.n	9000cc64 <etharp_query+0x9c>
    ETHARP_SET_ADDRHINT(netif, i);
9000cc46:	4a2a      	ldr	r2, [pc, #168]	; (9000ccf0 <etharp_query+0x128>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
9000cc48:	fb03 7304 	mla	r3, r3, r4, r7
9000cc4c:	4629      	mov	r1, r5
9000cc4e:	4630      	mov	r0, r6
    ETHARP_SET_ADDRHINT(netif, i);
9000cc50:	7014      	strb	r4, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
9000cc52:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000cc56:	330c      	adds	r3, #12
9000cc58:	9200      	str	r2, [sp, #0]
9000cc5a:	f106 022a 	add.w	r2, r6, #42	; 0x2a
9000cc5e:	f000 f935 	bl	9000cecc <ethernet_output>
9000cc62:	e7cd      	b.n	9000cc00 <etharp_query+0x38>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
9000cc64:	d1cc      	bne.n	9000cc00 <etharp_query+0x38>
9000cc66:	462e      	mov	r6, r5
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
9000cc68:	f8df 8074 	ldr.w	r8, [pc, #116]	; 9000cce0 <etharp_query+0x118>
9000cc6c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 9000ccf4 <etharp_query+0x12c>
9000cc70:	f8df a074 	ldr.w	sl, [pc, #116]	; 9000cce8 <etharp_query+0x120>
9000cc74:	8972      	ldrh	r2, [r6, #10]
9000cc76:	8933      	ldrh	r3, [r6, #8]
9000cc78:	429a      	cmp	r2, r3
9000cc7a:	d108      	bne.n	9000cc8e <etharp_query+0xc6>
9000cc7c:	6833      	ldr	r3, [r6, #0]
9000cc7e:	b133      	cbz	r3, 9000cc8e <etharp_query+0xc6>
9000cc80:	4643      	mov	r3, r8
9000cc82:	f240 32f1 	movw	r2, #1009	; 0x3f1
9000cc86:	4649      	mov	r1, r9
9000cc88:	4650      	mov	r0, sl
9000cc8a:	f01c fc21 	bl	900294d0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
9000cc8e:	7b33      	ldrb	r3, [r6, #12]
9000cc90:	065b      	lsls	r3, r3, #25
9000cc92:	d414      	bmi.n	9000ccbe <etharp_query+0xf6>
      p = p->next;
9000cc94:	6836      	ldr	r6, [r6, #0]
    while (p) {
9000cc96:	2e00      	cmp	r6, #0
9000cc98:	d1ec      	bne.n	9000cc74 <etharp_query+0xac>
      pbuf_ref(p);
9000cc9a:	4628      	mov	r0, r5
9000cc9c:	f001 ff2c 	bl	9000eaf8 <pbuf_ref>
      if (arp_table[i].q != NULL) {
9000cca0:	2318      	movs	r3, #24
9000cca2:	fb03 f204 	mul.w	r2, r3, r4
9000cca6:	461e      	mov	r6, r3
9000cca8:	58b8      	ldr	r0, [r7, r2]
9000ccaa:	b108      	cbz	r0, 9000ccb0 <etharp_query+0xe8>
        pbuf_free(arp_table[i].q);
9000ccac:	f001 fdb2 	bl	9000e814 <pbuf_free>
      arp_table[i].q = p;
9000ccb0:	4374      	muls	r4, r6
      result = ERR_OK;
9000ccb2:	2000      	movs	r0, #0
      arp_table[i].q = p;
9000ccb4:	513d      	str	r5, [r7, r4]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
9000ccb6:	e7a3      	b.n	9000cc00 <etharp_query+0x38>
    return ERR_ARG;
9000ccb8:	f06f 000f 	mvn.w	r0, #15
9000ccbc:	e7a0      	b.n	9000cc00 <etharp_query+0x38>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
9000ccbe:	462a      	mov	r2, r5
9000ccc0:	f44f 7120 	mov.w	r1, #640	; 0x280
9000ccc4:	200e      	movs	r0, #14
9000ccc6:	f002 f8d9 	bl	9000ee7c <pbuf_clone>
    if (p != NULL) {
9000ccca:	4605      	mov	r5, r0
9000cccc:	2800      	cmp	r0, #0
9000ccce:	d1e7      	bne.n	9000cca0 <etharp_query+0xd8>
      result = ERR_MEM;
9000ccd0:	f04f 30ff 	mov.w	r0, #4294967295
9000ccd4:	e794      	b.n	9000cc00 <etharp_query+0x38>
  if (is_new_entry || (q == NULL)) {
9000ccd6:	2d00      	cmp	r5, #0
9000ccd8:	d0a9      	beq.n	9000cc2e <etharp_query+0x66>
  err_t result = ERR_MEM;
9000ccda:	f04f 30ff 	mov.w	r0, #4294967295
9000ccde:	e7ac      	b.n	9000cc3a <etharp_query+0x72>
9000cce0:	9002bdc4 	.word	0x9002bdc4
9000cce4:	9002bf50 	.word	0x9002bf50
9000cce8:	9002a254 	.word	0x9002a254
9000ccec:	20026aec 	.word	0x20026aec
9000ccf0:	20026bdc 	.word	0x20026bdc
9000ccf4:	9002bf5e 	.word	0x9002bf5e

9000ccf8 <etharp_output>:
{
9000ccf8:	b5f0      	push	{r4, r5, r6, r7, lr}
9000ccfa:	460e      	mov	r6, r1
9000ccfc:	b085      	sub	sp, #20
9000ccfe:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
9000cd00:	4604      	mov	r4, r0
9000cd02:	b930      	cbnz	r0, 9000cd12 <etharp_output+0x1a>
9000cd04:	4b41      	ldr	r3, [pc, #260]	; (9000ce0c <etharp_output+0x114>)
9000cd06:	f240 321e 	movw	r2, #798	; 0x31e
9000cd0a:	4941      	ldr	r1, [pc, #260]	; (9000ce10 <etharp_output+0x118>)
9000cd0c:	4841      	ldr	r0, [pc, #260]	; (9000ce14 <etharp_output+0x11c>)
9000cd0e:	f01c fbdf 	bl	900294d0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
9000cd12:	b936      	cbnz	r6, 9000cd22 <etharp_output+0x2a>
9000cd14:	4b3d      	ldr	r3, [pc, #244]	; (9000ce0c <etharp_output+0x114>)
9000cd16:	f240 321f 	movw	r2, #799	; 0x31f
9000cd1a:	493f      	ldr	r1, [pc, #252]	; (9000ce18 <etharp_output+0x120>)
9000cd1c:	483d      	ldr	r0, [pc, #244]	; (9000ce14 <etharp_output+0x11c>)
9000cd1e:	f01c fbd7 	bl	900294d0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
9000cd22:	b935      	cbnz	r5, 9000cd32 <etharp_output+0x3a>
9000cd24:	4b39      	ldr	r3, [pc, #228]	; (9000ce0c <etharp_output+0x114>)
9000cd26:	f44f 7248 	mov.w	r2, #800	; 0x320
9000cd2a:	493c      	ldr	r1, [pc, #240]	; (9000ce1c <etharp_output+0x124>)
9000cd2c:	4839      	ldr	r0, [pc, #228]	; (9000ce14 <etharp_output+0x11c>)
9000cd2e:	f01c fbcf 	bl	900294d0 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
9000cd32:	4621      	mov	r1, r4
9000cd34:	6828      	ldr	r0, [r5, #0]
9000cd36:	f000 fb94 	bl	9000d462 <ip4_addr_isbroadcast_u32>
9000cd3a:	2800      	cmp	r0, #0
9000cd3c:	d160      	bne.n	9000ce00 <etharp_output+0x108>
  } else if (ip4_addr_ismulticast(ipaddr)) {
9000cd3e:	682b      	ldr	r3, [r5, #0]
9000cd40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
9000cd44:	2ae0      	cmp	r2, #224	; 0xe0
9000cd46:	d11b      	bne.n	9000cd80 <etharp_output+0x88>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
9000cd48:	2301      	movs	r3, #1
9000cd4a:	f8ad 3008 	strh.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
9000cd4e:	235e      	movs	r3, #94	; 0x5e
9000cd50:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
9000cd54:	786b      	ldrb	r3, [r5, #1]
9000cd56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
9000cd5a:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
9000cd5e:	78ab      	ldrb	r3, [r5, #2]
9000cd60:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
9000cd64:	78eb      	ldrb	r3, [r5, #3]
9000cd66:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
9000cd6a:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
9000cd6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000cd70:	4631      	mov	r1, r6
9000cd72:	4620      	mov	r0, r4
9000cd74:	9200      	str	r2, [sp, #0]
9000cd76:	f104 022a 	add.w	r2, r4, #42	; 0x2a
9000cd7a:	f000 f8a7 	bl	9000cecc <ethernet_output>
9000cd7e:	e023      	b.n	9000cdc8 <etharp_output+0xd0>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
9000cd80:	6862      	ldr	r2, [r4, #4]
9000cd82:	68a1      	ldr	r1, [r4, #8]
9000cd84:	405a      	eors	r2, r3
9000cd86:	420a      	tst	r2, r1
9000cd88:	d009      	beq.n	9000cd9e <etharp_output+0xa6>
        !ip4_addr_islinklocal(ipaddr)) {
9000cd8a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
9000cd8c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
9000cd90:	4293      	cmp	r3, r2
9000cd92:	d004      	beq.n	9000cd9e <etharp_output+0xa6>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
9000cd94:	68e3      	ldr	r3, [r4, #12]
9000cd96:	2b00      	cmp	r3, #0
9000cd98:	d034      	beq.n	9000ce04 <etharp_output+0x10c>
            dst_addr = netif_ip4_gw(netif);
9000cd9a:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
9000cd9e:	4920      	ldr	r1, [pc, #128]	; (9000ce20 <etharp_output+0x128>)
9000cda0:	2318      	movs	r3, #24
9000cda2:	4820      	ldr	r0, [pc, #128]	; (9000ce24 <etharp_output+0x12c>)
9000cda4:	780a      	ldrb	r2, [r1, #0]
9000cda6:	468c      	mov	ip, r1
9000cda8:	fb03 0302 	mla	r3, r3, r2, r0
9000cdac:	7d18      	ldrb	r0, [r3, #20]
9000cdae:	2801      	cmp	r0, #1
9000cdb0:	d90c      	bls.n	9000cdcc <etharp_output+0xd4>
9000cdb2:	6899      	ldr	r1, [r3, #8]
9000cdb4:	42a1      	cmp	r1, r4
9000cdb6:	d109      	bne.n	9000cdcc <etharp_output+0xd4>
            (arp_table[etharp_cached_entry].netif == netif) &&
9000cdb8:	6829      	ldr	r1, [r5, #0]
9000cdba:	685b      	ldr	r3, [r3, #4]
9000cdbc:	4299      	cmp	r1, r3
9000cdbe:	d105      	bne.n	9000cdcc <etharp_output+0xd4>
        return etharp_output_to_arp_index(netif, q, i);
9000cdc0:	4631      	mov	r1, r6
9000cdc2:	4620      	mov	r0, r4
9000cdc4:	f7ff feaa 	bl	9000cb1c <etharp_output_to_arp_index>
}
9000cdc8:	b005      	add	sp, #20
9000cdca:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000cdcc:	4b15      	ldr	r3, [pc, #84]	; (9000ce24 <etharp_output+0x12c>)
{
9000cdce:	2100      	movs	r1, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
9000cdd0:	7d18      	ldrb	r0, [r3, #20]
9000cdd2:	b2ca      	uxtb	r2, r1
9000cdd4:	2801      	cmp	r0, #1
9000cdd6:	d909      	bls.n	9000cdec <etharp_output+0xf4>
9000cdd8:	6898      	ldr	r0, [r3, #8]
9000cdda:	42a0      	cmp	r0, r4
9000cddc:	d106      	bne.n	9000cdec <etharp_output+0xf4>
          (arp_table[i].netif == netif) &&
9000cdde:	682f      	ldr	r7, [r5, #0]
9000cde0:	6858      	ldr	r0, [r3, #4]
9000cde2:	4287      	cmp	r7, r0
9000cde4:	d102      	bne.n	9000cdec <etharp_output+0xf4>
        ETHARP_SET_ADDRHINT(netif, i);
9000cde6:	f88c 2000 	strb.w	r2, [ip]
9000cdea:	e7e9      	b.n	9000cdc0 <etharp_output+0xc8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
9000cdec:	3101      	adds	r1, #1
9000cdee:	3318      	adds	r3, #24
9000cdf0:	290a      	cmp	r1, #10
9000cdf2:	d1ed      	bne.n	9000cdd0 <etharp_output+0xd8>
    return etharp_query(netif, dst_addr, q);
9000cdf4:	4632      	mov	r2, r6
9000cdf6:	4629      	mov	r1, r5
9000cdf8:	4620      	mov	r0, r4
9000cdfa:	f7ff fee5 	bl	9000cbc8 <etharp_query>
9000cdfe:	e7e3      	b.n	9000cdc8 <etharp_output+0xd0>
    dest = (const struct eth_addr *)&ethbroadcast;
9000ce00:	4b09      	ldr	r3, [pc, #36]	; (9000ce28 <etharp_output+0x130>)
9000ce02:	e7b3      	b.n	9000cd6c <etharp_output+0x74>
            return ERR_RTE;
9000ce04:	f06f 0003 	mvn.w	r0, #3
9000ce08:	e7de      	b.n	9000cdc8 <etharp_output+0xd0>
9000ce0a:	bf00      	nop
9000ce0c:	9002bdc4 	.word	0x9002bdc4
9000ce10:	9002bb7d 	.word	0x9002bb7d
9000ce14:	9002a254 	.word	0x9002a254
9000ce18:	9002cb35 	.word	0x9002cb35
9000ce1c:	9002bedd 	.word	0x9002bedd
9000ce20:	20026bdc 	.word	0x20026bdc
9000ce24:	20026aec 	.word	0x20026aec
9000ce28:	9002c00e 	.word	0x9002c00e

9000ce2c <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
9000ce2c:	8943      	ldrh	r3, [r0, #10]
9000ce2e:	2b0e      	cmp	r3, #14
{
9000ce30:	b570      	push	{r4, r5, r6, lr}
9000ce32:	4604      	mov	r4, r0
9000ce34:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
9000ce36:	d91a      	bls.n	9000ce6e <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
9000ce38:	7bc3      	ldrb	r3, [r0, #15]
9000ce3a:	b91b      	cbnz	r3, 9000ce44 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
9000ce3c:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
9000ce40:	3301      	adds	r3, #1
9000ce42:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
9000ce44:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
9000ce46:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
9000ce48:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
9000ce4a:	07d9      	lsls	r1, r3, #31
9000ce4c:	d50a      	bpl.n	9000ce64 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
9000ce4e:	2b01      	cmp	r3, #1
9000ce50:	d111      	bne.n	9000ce76 <ethernet_input+0x4a>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
9000ce52:	7843      	ldrb	r3, [r0, #1]
9000ce54:	b933      	cbnz	r3, 9000ce64 <ethernet_input+0x38>
9000ce56:	7883      	ldrb	r3, [r0, #2]
9000ce58:	2b5e      	cmp	r3, #94	; 0x5e
9000ce5a:	d103      	bne.n	9000ce64 <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
9000ce5c:	7b63      	ldrb	r3, [r4, #13]
9000ce5e:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
9000ce62:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
9000ce64:	2e08      	cmp	r6, #8
9000ce66:	d010      	beq.n	9000ce8a <ethernet_input+0x5e>
9000ce68:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
9000ce6c:	d01d      	beq.n	9000ceaa <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
9000ce6e:	4620      	mov	r0, r4
9000ce70:	f001 fcd0 	bl	9000e814 <pbuf_free>
  return ERR_OK;
9000ce74:	e017      	b.n	9000cea6 <ethernet_input+0x7a>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
9000ce76:	2206      	movs	r2, #6
9000ce78:	4913      	ldr	r1, [pc, #76]	; (9000cec8 <ethernet_input+0x9c>)
9000ce7a:	f01b ff53 	bl	90028d24 <memcmp>
9000ce7e:	2800      	cmp	r0, #0
9000ce80:	d1f0      	bne.n	9000ce64 <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
9000ce82:	7b63      	ldrb	r3, [r4, #13]
9000ce84:	f043 0308 	orr.w	r3, r3, #8
9000ce88:	e7eb      	b.n	9000ce62 <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
9000ce8a:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
9000ce8e:	071a      	lsls	r2, r3, #28
9000ce90:	d5ed      	bpl.n	9000ce6e <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
9000ce92:	210e      	movs	r1, #14
9000ce94:	4620      	mov	r0, r4
9000ce96:	f001 fc89 	bl	9000e7ac <pbuf_remove_header>
9000ce9a:	2800      	cmp	r0, #0
9000ce9c:	d1e7      	bne.n	9000ce6e <ethernet_input+0x42>
        ip4_input(p, netif);
9000ce9e:	4629      	mov	r1, r5
9000cea0:	4620      	mov	r0, r4
9000cea2:	f000 f98f 	bl	9000d1c4 <ip4_input>
}
9000cea6:	2000      	movs	r0, #0
9000cea8:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
9000ceaa:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
9000ceae:	071b      	lsls	r3, r3, #28
9000ceb0:	d5dd      	bpl.n	9000ce6e <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
9000ceb2:	210e      	movs	r1, #14
9000ceb4:	4620      	mov	r0, r4
9000ceb6:	f001 fc79 	bl	9000e7ac <pbuf_remove_header>
9000ceba:	2800      	cmp	r0, #0
9000cebc:	d1d7      	bne.n	9000ce6e <ethernet_input+0x42>
        etharp_input(p, netif);
9000cebe:	4629      	mov	r1, r5
9000cec0:	4620      	mov	r0, r4
9000cec2:	f7ff fd41 	bl	9000c948 <etharp_input>
      break;
9000cec6:	e7ee      	b.n	9000cea6 <ethernet_input+0x7a>
9000cec8:	9002c00e 	.word	0x9002c00e

9000cecc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
9000cecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000ced0:	460d      	mov	r5, r1
9000ced2:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
9000ced4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
9000ced8:	4616      	mov	r6, r2
9000ceda:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
9000cedc:	f7fe f912 	bl	9000b104 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
9000cee0:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
9000cee2:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
9000cee4:	4628      	mov	r0, r5
9000cee6:	f001 fc5d 	bl	9000e7a4 <pbuf_add_header>
9000ceea:	b9e0      	cbnz	r0, 9000cf26 <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
9000ceec:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
9000ceee:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
9000cef2:	683b      	ldr	r3, [r7, #0]
9000cef4:	600b      	str	r3, [r1, #0]
9000cef6:	88bb      	ldrh	r3, [r7, #4]
9000cef8:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
9000cefa:	6833      	ldr	r3, [r6, #0]
9000cefc:	f8c1 3006 	str.w	r3, [r1, #6]
9000cf00:	88b3      	ldrh	r3, [r6, #4]
9000cf02:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
9000cf04:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
9000cf08:	2b06      	cmp	r3, #6
9000cf0a:	d006      	beq.n	9000cf1a <ethernet_output+0x4e>
9000cf0c:	4b08      	ldr	r3, [pc, #32]	; (9000cf30 <ethernet_output+0x64>)
9000cf0e:	f44f 7299 	mov.w	r2, #306	; 0x132
9000cf12:	4908      	ldr	r1, [pc, #32]	; (9000cf34 <ethernet_output+0x68>)
9000cf14:	4808      	ldr	r0, [pc, #32]	; (9000cf38 <ethernet_output+0x6c>)
9000cf16:	f01c fadb 	bl	900294d0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
9000cf1a:	69a3      	ldr	r3, [r4, #24]
9000cf1c:	4629      	mov	r1, r5
9000cf1e:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
9000cf20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
9000cf24:	4718      	bx	r3
}
9000cf26:	f06f 0001 	mvn.w	r0, #1
9000cf2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000cf2e:	bf00      	nop
9000cf30:	9002bf78 	.word	0x9002bf78
9000cf34:	9002bfdd 	.word	0x9002bfdd
9000cf38:	9002a254 	.word	0x9002a254

9000cf3c <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
9000cf3c:	b5f0      	push	{r4, r5, r6, r7, lr}
9000cf3e:	4604      	mov	r4, r0
9000cf40:	b087      	sub	sp, #28
9000cf42:	460f      	mov	r7, r1
9000cf44:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
9000cf46:	2124      	movs	r1, #36	; 0x24
9000cf48:	f44f 7220 	mov.w	r2, #640	; 0x280
9000cf4c:	2022      	movs	r0, #34	; 0x22
9000cf4e:	f001 fcc9 	bl	9000e8e4 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
9000cf52:	4605      	mov	r5, r0
9000cf54:	b390      	cbz	r0, 9000cfbc <icmp_send_response.isra.0+0x80>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
9000cf56:	8943      	ldrh	r3, [r0, #10]
9000cf58:	2b23      	cmp	r3, #35	; 0x23
9000cf5a:	d806      	bhi.n	9000cf6a <icmp_send_response.isra.0+0x2e>
9000cf5c:	4b18      	ldr	r3, [pc, #96]	; (9000cfc0 <icmp_send_response.isra.0+0x84>)
9000cf5e:	f44f 72b4 	mov.w	r2, #360	; 0x168
9000cf62:	4918      	ldr	r1, [pc, #96]	; (9000cfc4 <icmp_send_response.isra.0+0x88>)
9000cf64:	4818      	ldr	r0, [pc, #96]	; (9000cfc8 <icmp_send_response.isra.0+0x8c>)
9000cf66:	f01c fab3 	bl	900294d0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
9000cf6a:	6820      	ldr	r0, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
9000cf6c:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
9000cf6e:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
9000cf70:	f100 011c 	add.w	r1, r0, #28
  icmphdr->id = 0;
9000cf74:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
9000cf76:	f104 0208 	add.w	r2, r4, #8
  icmphdr->id = 0;
9000cf7a:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
9000cf7c:	71a3      	strb	r3, [r4, #6]
9000cf7e:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
9000cf80:	4603      	mov	r3, r0
  icmphdr->type = type;
9000cf82:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
9000cf84:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
9000cf86:	f853 6b04 	ldr.w	r6, [r3], #4
9000cf8a:	428b      	cmp	r3, r1
9000cf8c:	f842 6b04 	str.w	r6, [r2], #4
9000cf90:	d1f9      	bne.n	9000cf86 <icmp_send_response.isra.0+0x4a>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
9000cf92:	68c3      	ldr	r3, [r0, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
9000cf94:	a805      	add	r0, sp, #20
  ip4_addr_copy(iphdr_src, iphdr->src);
9000cf96:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
9000cf98:	f000 f8e6 	bl	9000d168 <ip4_route>
#endif
  if (netif != NULL) {
9000cf9c:	b158      	cbz	r0, 9000cfb6 <icmp_send_response.isra.0+0x7a>
    /* calculate checksum */
    icmphdr->chksum = 0;
9000cf9e:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
9000cfa0:	2301      	movs	r3, #1
9000cfa2:	aa05      	add	r2, sp, #20
    icmphdr->chksum = 0;
9000cfa4:	70a1      	strb	r1, [r4, #2]
9000cfa6:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
9000cfa8:	9002      	str	r0, [sp, #8]
9000cfaa:	4628      	mov	r0, r5
9000cfac:	e9cd 1300 	strd	r1, r3, [sp]
9000cfb0:	2380      	movs	r3, #128	; 0x80
9000cfb2:	f000 fa45 	bl	9000d440 <ip4_output_if>
  }
  pbuf_free(q);
9000cfb6:	4628      	mov	r0, r5
9000cfb8:	f001 fc2c 	bl	9000e814 <pbuf_free>
}
9000cfbc:	b007      	add	sp, #28
9000cfbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000cfc0:	9002c01a 	.word	0x9002c01a
9000cfc4:	9002c07f 	.word	0x9002c07f
9000cfc8:	9002a254 	.word	0x9002a254

9000cfcc <icmp_input>:
{
9000cfcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
9000cfd0:	4f43      	ldr	r7, [pc, #268]	; (9000d0e0 <icmp_input+0x114>)
{
9000cfd2:	b087      	sub	sp, #28
9000cfd4:	4604      	mov	r4, r0
9000cfd6:	4688      	mov	r8, r1
  iphdr_in = ip4_current_header();
9000cfd8:	f8d7 9008 	ldr.w	r9, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
9000cfdc:	f899 5000 	ldrb.w	r5, [r9]
9000cfe0:	f005 050f 	and.w	r5, r5, #15
9000cfe4:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
9000cfe6:	2d13      	cmp	r5, #19
9000cfe8:	d92f      	bls.n	9000d04a <icmp_input+0x7e>
  if (p->len < sizeof(u16_t) * 2) {
9000cfea:	8943      	ldrh	r3, [r0, #10]
9000cfec:	2b03      	cmp	r3, #3
9000cfee:	d92c      	bls.n	9000d04a <icmp_input+0x7e>
  type = *((u8_t *)p->payload);
9000cff0:	6843      	ldr	r3, [r0, #4]
  switch (type) {
9000cff2:	781b      	ldrb	r3, [r3, #0]
9000cff4:	2b08      	cmp	r3, #8
9000cff6:	d128      	bne.n	9000d04a <icmp_input+0x7e>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
9000cff8:	6978      	ldr	r0, [r7, #20]
9000cffa:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
9000cffe:	2be0      	cmp	r3, #224	; 0xe0
9000d000:	d023      	beq.n	9000d04a <icmp_input+0x7e>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
9000d002:	6839      	ldr	r1, [r7, #0]
9000d004:	f000 fa2d 	bl	9000d462 <ip4_addr_isbroadcast_u32>
9000d008:	b9f8      	cbnz	r0, 9000d04a <icmp_input+0x7e>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
9000d00a:	8923      	ldrh	r3, [r4, #8]
9000d00c:	2b07      	cmp	r3, #7
9000d00e:	d91c      	bls.n	9000d04a <icmp_input+0x7e>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
9000d010:	f105 010e 	add.w	r1, r5, #14
9000d014:	4620      	mov	r0, r4
9000d016:	9105      	str	r1, [sp, #20]
9000d018:	f001 fbc4 	bl	9000e7a4 <pbuf_add_header>
9000d01c:	9905      	ldr	r1, [sp, #20]
9000d01e:	2800      	cmp	r0, #0
9000d020:	d052      	beq.n	9000d0c8 <icmp_input+0xfc>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
9000d022:	8923      	ldrh	r3, [r4, #8]
9000d024:	1959      	adds	r1, r3, r5
9000d026:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
9000d028:	428b      	cmp	r3, r1
9000d02a:	d80e      	bhi.n	9000d04a <icmp_input+0x7e>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
9000d02c:	f44f 7220 	mov.w	r2, #640	; 0x280
9000d030:	200e      	movs	r0, #14
9000d032:	f001 fc57 	bl	9000e8e4 <pbuf_alloc>
        if (r == NULL) {
9000d036:	4606      	mov	r6, r0
9000d038:	b138      	cbz	r0, 9000d04a <icmp_input+0x7e>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
9000d03a:	8942      	ldrh	r2, [r0, #10]
9000d03c:	f105 0308 	add.w	r3, r5, #8
9000d040:	429a      	cmp	r2, r3
9000d042:	d208      	bcs.n	9000d056 <icmp_input+0x8a>
          pbuf_free(r);
9000d044:	4630      	mov	r0, r6
9000d046:	f001 fbe5 	bl	9000e814 <pbuf_free>
  pbuf_free(p);
9000d04a:	4620      	mov	r0, r4
}
9000d04c:	b007      	add	sp, #28
9000d04e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
9000d052:	f001 bbdf 	b.w	9000e814 <pbuf_free>
        MEMCPY(r->payload, iphdr_in, hlen);
9000d056:	4649      	mov	r1, r9
9000d058:	462a      	mov	r2, r5
9000d05a:	6840      	ldr	r0, [r0, #4]
9000d05c:	f01b fe70 	bl	90028d40 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
9000d060:	4629      	mov	r1, r5
9000d062:	4630      	mov	r0, r6
9000d064:	f001 fba2 	bl	9000e7ac <pbuf_remove_header>
9000d068:	b130      	cbz	r0, 9000d078 <icmp_input+0xac>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
9000d06a:	4b1e      	ldr	r3, [pc, #120]	; (9000d0e4 <icmp_input+0x118>)
9000d06c:	22b6      	movs	r2, #182	; 0xb6
9000d06e:	491e      	ldr	r1, [pc, #120]	; (9000d0e8 <icmp_input+0x11c>)
9000d070:	481e      	ldr	r0, [pc, #120]	; (9000d0ec <icmp_input+0x120>)
9000d072:	f01c fa2d 	bl	900294d0 <iprintf>
          pbuf_free(r);
9000d076:	e7e5      	b.n	9000d044 <icmp_input+0x78>
        if (pbuf_copy(r, p) != ERR_OK) {
9000d078:	4621      	mov	r1, r4
9000d07a:	4630      	mov	r0, r6
9000d07c:	f001 fd9c 	bl	9000ebb8 <pbuf_copy>
9000d080:	2800      	cmp	r0, #0
9000d082:	d1df      	bne.n	9000d044 <icmp_input+0x78>
        pbuf_free(p);
9000d084:	4620      	mov	r0, r4
9000d086:	4634      	mov	r4, r6
9000d088:	f001 fbc4 	bl	9000e814 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
9000d08c:	4629      	mov	r1, r5
9000d08e:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
9000d090:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
9000d092:	f001 fb87 	bl	9000e7a4 <pbuf_add_header>
9000d096:	2800      	cmp	r0, #0
9000d098:	d1d7      	bne.n	9000d04a <icmp_input+0x7e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
9000d09a:	6862      	ldr	r2, [r4, #4]
        ip4_addr_copy(iphdr->src, *src);
9000d09c:	697b      	ldr	r3, [r7, #20]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
9000d09e:	4914      	ldr	r1, [pc, #80]	; (9000d0f0 <icmp_input+0x124>)
        ip4_addr_copy(iphdr->src, *src);
9000d0a0:	60d3      	str	r3, [r2, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
9000d0a2:	693b      	ldr	r3, [r7, #16]
9000d0a4:	6113      	str	r3, [r2, #16]
        IPH_TTL_SET(iphdr, ICMP_TTL);
9000d0a6:	2380      	movs	r3, #128	; 0x80
        ICMPH_TYPE_SET(iecho, ICMP_ER);
9000d0a8:	7030      	strb	r0, [r6, #0]
        iecho->chksum = 0;
9000d0aa:	70b0      	strb	r0, [r6, #2]
9000d0ac:	70f0      	strb	r0, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
9000d0ae:	7213      	strb	r3, [r2, #8]
        IPH_CHKSUM_SET(iphdr, 0);
9000d0b0:	7290      	strb	r0, [r2, #10]
9000d0b2:	72d0      	strb	r0, [r2, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
9000d0b4:	2201      	movs	r2, #1
9000d0b6:	f8cd 8008 	str.w	r8, [sp, #8]
9000d0ba:	e9cd 0200 	strd	r0, r2, [sp]
9000d0be:	4602      	mov	r2, r0
9000d0c0:	4620      	mov	r0, r4
9000d0c2:	f000 f9bd 	bl	9000d440 <ip4_output_if>
  pbuf_free(p);
9000d0c6:	e7c0      	b.n	9000d04a <icmp_input+0x7e>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
9000d0c8:	4620      	mov	r0, r4
9000d0ca:	f001 fb6f 	bl	9000e7ac <pbuf_remove_header>
9000d0ce:	2800      	cmp	r0, #0
9000d0d0:	d0dc      	beq.n	9000d08c <icmp_input+0xc0>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
9000d0d2:	4b04      	ldr	r3, [pc, #16]	; (9000d0e4 <icmp_input+0x118>)
9000d0d4:	22c7      	movs	r2, #199	; 0xc7
9000d0d6:	4907      	ldr	r1, [pc, #28]	; (9000d0f4 <icmp_input+0x128>)
9000d0d8:	4804      	ldr	r0, [pc, #16]	; (9000d0ec <icmp_input+0x120>)
9000d0da:	f01c f9f9 	bl	900294d0 <iprintf>
          goto icmperr;
9000d0de:	e7b4      	b.n	9000d04a <icmp_input+0x7e>
9000d0e0:	20027358 	.word	0x20027358
9000d0e4:	9002c01a 	.word	0x9002c01a
9000d0e8:	9002c0ab 	.word	0x9002c0ab
9000d0ec:	9002a254 	.word	0x9002a254
9000d0f0:	2002736c 	.word	0x2002736c
9000d0f4:	9002c0e0 	.word	0x9002c0e0

9000d0f8 <icmp_dest_unreach>:
{
9000d0f8:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
9000d0fa:	3004      	adds	r0, #4
9000d0fc:	2103      	movs	r1, #3
9000d0fe:	f7ff bf1d 	b.w	9000cf3c <icmp_send_response.isra.0>

9000d102 <icmp_time_exceeded>:
{
9000d102:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
9000d104:	3004      	adds	r0, #4
9000d106:	210b      	movs	r1, #11
9000d108:	f7ff bf18 	b.w	9000cf3c <icmp_send_response.isra.0>

9000d10c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
9000d10c:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
9000d10e:	f002 fc79 	bl	9000fa04 <sys_init>
#endif /* !NO_SYS */
  mem_init();
9000d112:	f000 fda1 	bl	9000dc58 <mem_init>
  memp_init();
9000d116:	f001 f869 	bl	9000e1ec <memp_init>
  pbuf_init();
  netif_init();
9000d11a:	f001 f955 	bl	9000e3c8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
9000d11e:	f006 fb8d 	bl	9001383c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
9000d122:	f002 fd0f 	bl	9000fb44 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
9000d126:	f7ff fabb 	bl	9000c6a0 <dns_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
9000d12a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
9000d12e:	f006 bb3f 	b.w	900137b0 <sys_timeouts_init>
	...

9000d134 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
9000d134:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
9000d136:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
{
9000d13a:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
9000d13c:	f013 0301 	ands.w	r3, r3, #1
9000d140:	d00b      	beq.n	9000d15a <ip4_input_accept+0x26>
9000d142:	6843      	ldr	r3, [r0, #4]
9000d144:	b14b      	cbz	r3, 9000d15a <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
9000d146:	4a07      	ldr	r2, [pc, #28]	; (9000d164 <ip4_input_accept+0x30>)
9000d148:	6950      	ldr	r0, [r2, #20]
9000d14a:	4283      	cmp	r3, r0
9000d14c:	d007      	beq.n	9000d15e <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
9000d14e:	f000 f988 	bl	9000d462 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
9000d152:	3800      	subs	r0, #0
9000d154:	bf18      	it	ne
9000d156:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
9000d158:	bd08      	pop	{r3, pc}
  return 0;
9000d15a:	4618      	mov	r0, r3
9000d15c:	e7fc      	b.n	9000d158 <ip4_input_accept+0x24>
      return 1;
9000d15e:	2001      	movs	r0, #1
9000d160:	e7fa      	b.n	9000d158 <ip4_input_accept+0x24>
9000d162:	bf00      	nop
9000d164:	20027358 	.word	0x20027358

9000d168 <ip4_route>:
  NETIF_FOREACH(netif) {
9000d168:	4b14      	ldr	r3, [pc, #80]	; (9000d1bc <ip4_route+0x54>)
{
9000d16a:	4602      	mov	r2, r0
  NETIF_FOREACH(netif) {
9000d16c:	6818      	ldr	r0, [r3, #0]
{
9000d16e:	b530      	push	{r4, r5, lr}
  NETIF_FOREACH(netif) {
9000d170:	b978      	cbnz	r0, 9000d192 <ip4_route+0x2a>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
9000d172:	4b13      	ldr	r3, [pc, #76]	; (9000d1c0 <ip4_route+0x58>)
9000d174:	681b      	ldr	r3, [r3, #0]
9000d176:	b15b      	cbz	r3, 9000d190 <ip4_route+0x28>
9000d178:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
9000d17c:	f001 0105 	and.w	r1, r1, #5
9000d180:	2905      	cmp	r1, #5
9000d182:	d105      	bne.n	9000d190 <ip4_route+0x28>
9000d184:	6859      	ldr	r1, [r3, #4]
9000d186:	b119      	cbz	r1, 9000d190 <ip4_route+0x28>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
9000d188:	7812      	ldrb	r2, [r2, #0]
9000d18a:	2a7f      	cmp	r2, #127	; 0x7f
9000d18c:	bf18      	it	ne
9000d18e:	4618      	movne	r0, r3
}
9000d190:	bd30      	pop	{r4, r5, pc}
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
9000d192:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
9000d196:	07cd      	lsls	r5, r1, #31
9000d198:	d50d      	bpl.n	9000d1b6 <ip4_route+0x4e>
9000d19a:	074c      	lsls	r4, r1, #29
9000d19c:	d50b      	bpl.n	9000d1b6 <ip4_route+0x4e>
9000d19e:	6843      	ldr	r3, [r0, #4]
9000d1a0:	b14b      	cbz	r3, 9000d1b6 <ip4_route+0x4e>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
9000d1a2:	6814      	ldr	r4, [r2, #0]
9000d1a4:	6885      	ldr	r5, [r0, #8]
9000d1a6:	4063      	eors	r3, r4
9000d1a8:	422b      	tst	r3, r5
9000d1aa:	d0f1      	beq.n	9000d190 <ip4_route+0x28>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
9000d1ac:	078b      	lsls	r3, r1, #30
9000d1ae:	d402      	bmi.n	9000d1b6 <ip4_route+0x4e>
9000d1b0:	68c3      	ldr	r3, [r0, #12]
9000d1b2:	429c      	cmp	r4, r3
9000d1b4:	d0ec      	beq.n	9000d190 <ip4_route+0x28>
  NETIF_FOREACH(netif) {
9000d1b6:	6800      	ldr	r0, [r0, #0]
9000d1b8:	e7da      	b.n	9000d170 <ip4_route+0x8>
9000d1ba:	bf00      	nop
9000d1bc:	2002cb54 	.word	0x2002cb54
9000d1c0:	2002cb58 	.word	0x2002cb58

9000d1c4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
9000d1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
9000d1c8:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
9000d1cc:	4604      	mov	r4, r0
9000d1ce:	460e      	mov	r6, r1
  if (IPH_V(iphdr) != 4) {
9000d1d0:	f898 5000 	ldrb.w	r5, [r8]
9000d1d4:	092b      	lsrs	r3, r5, #4
9000d1d6:	2b04      	cmp	r3, #4
9000d1d8:	d005      	beq.n	9000d1e6 <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
9000d1da:	4620      	mov	r0, r4
9000d1dc:	f001 fb1a 	bl	9000e814 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
9000d1e0:	2000      	movs	r0, #0
9000d1e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
9000d1e6:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
9000d1ea:	f005 050f 	and.w	r5, r5, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
9000d1ee:	f7fd ff89 	bl	9000b104 <lwip_htons>
  if (iphdr_len < p->tot_len) {
9000d1f2:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
9000d1f4:	ea4f 0985 	mov.w	r9, r5, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
9000d1f8:	4607      	mov	r7, r0
  if (iphdr_len < p->tot_len) {
9000d1fa:	4283      	cmp	r3, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
9000d1fc:	464d      	mov	r5, r9
  if (iphdr_len < p->tot_len) {
9000d1fe:	d903      	bls.n	9000d208 <ip4_input+0x44>
    pbuf_realloc(p, iphdr_len);
9000d200:	4601      	mov	r1, r0
9000d202:	4620      	mov	r0, r4
9000d204:	f001 fc00 	bl	9000ea08 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
9000d208:	8963      	ldrh	r3, [r4, #10]
9000d20a:	42ab      	cmp	r3, r5
9000d20c:	d3e5      	bcc.n	9000d1da <ip4_input+0x16>
9000d20e:	8923      	ldrh	r3, [r4, #8]
9000d210:	42bb      	cmp	r3, r7
9000d212:	d3e2      	bcc.n	9000d1da <ip4_input+0x16>
9000d214:	2d13      	cmp	r5, #19
9000d216:	d9e0      	bls.n	9000d1da <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
9000d218:	f8d8 3010 	ldr.w	r3, [r8, #16]
9000d21c:	4d49      	ldr	r5, [pc, #292]	; (9000d344 <ip4_input+0x180>)
9000d21e:	616b      	str	r3, [r5, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
9000d220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
9000d224:	f8d8 200c 	ldr.w	r2, [r8, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
9000d228:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
9000d22a:	612a      	str	r2, [r5, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
9000d22c:	d143      	bne.n	9000d2b6 <ip4_input+0xf2>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
9000d22e:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
9000d232:	07db      	lsls	r3, r3, #31
9000d234:	d405      	bmi.n	9000d242 <ip4_input+0x7e>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
9000d236:	f898 3009 	ldrb.w	r3, [r8, #9]
9000d23a:	2b11      	cmp	r3, #17
9000d23c:	d053      	beq.n	9000d2e6 <ip4_input+0x122>
9000d23e:	2700      	movs	r7, #0
9000d240:	e003      	b.n	9000d24a <ip4_input+0x86>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
9000d242:	6873      	ldr	r3, [r6, #4]
9000d244:	2b00      	cmp	r3, #0
9000d246:	d0f6      	beq.n	9000d236 <ip4_input+0x72>
9000d248:	4637      	mov	r7, r6
      && !ip4_addr_isany_val(*ip4_current_src_addr())
9000d24a:	6928      	ldr	r0, [r5, #16]
9000d24c:	b148      	cbz	r0, 9000d262 <ip4_input+0x9e>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
9000d24e:	4631      	mov	r1, r6
9000d250:	f000 f907 	bl	9000d462 <ip4_addr_isbroadcast_u32>
9000d254:	2800      	cmp	r0, #0
9000d256:	d1c0      	bne.n	9000d1da <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
9000d258:	692b      	ldr	r3, [r5, #16]
9000d25a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
9000d25e:	2be0      	cmp	r3, #224	; 0xe0
9000d260:	d0bb      	beq.n	9000d1da <ip4_input+0x16>
  if (netif == NULL) {
9000d262:	2f00      	cmp	r7, #0
9000d264:	d0b9      	beq.n	9000d1da <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
9000d266:	f8b8 3006 	ldrh.w	r3, [r8, #6]
9000d26a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
9000d26e:	b13b      	cbz	r3, 9000d280 <ip4_input+0xbc>
    p = ip4_reass(p);
9000d270:	4620      	mov	r0, r4
9000d272:	f000 fa29 	bl	9000d6c8 <ip4_reass>
    if (p == NULL) {
9000d276:	4604      	mov	r4, r0
9000d278:	2800      	cmp	r0, #0
9000d27a:	d0b1      	beq.n	9000d1e0 <ip4_input+0x1c>
    iphdr = (const struct ip_hdr *)p->payload;
9000d27c:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_ip4_header = iphdr;
9000d280:	f8c5 8008 	str.w	r8, [r5, #8]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
9000d284:	4649      	mov	r1, r9
9000d286:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
9000d288:	e9c5 7600 	strd	r7, r6, [r5]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
9000d28c:	f898 3000 	ldrb.w	r3, [r8]
9000d290:	f003 030f 	and.w	r3, r3, #15
9000d294:	009b      	lsls	r3, r3, #2
9000d296:	81ab      	strh	r3, [r5, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
9000d298:	f001 fa88 	bl	9000e7ac <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
9000d29c:	f898 3009 	ldrb.w	r3, [r8, #9]
9000d2a0:	2b06      	cmp	r3, #6
9000d2a2:	d034      	beq.n	9000d30e <ip4_input+0x14a>
9000d2a4:	2b11      	cmp	r3, #17
9000d2a6:	d026      	beq.n	9000d2f6 <ip4_input+0x132>
9000d2a8:	2b01      	cmp	r3, #1
9000d2aa:	d135      	bne.n	9000d318 <ip4_input+0x154>
        icmp_input(p, inp);
9000d2ac:	4631      	mov	r1, r6
9000d2ae:	4620      	mov	r0, r4
9000d2b0:	f7ff fe8c 	bl	9000cfcc <icmp_input>
        break;
9000d2b4:	e023      	b.n	9000d2fe <ip4_input+0x13a>
    if (ip4_input_accept(inp)) {
9000d2b6:	4630      	mov	r0, r6
9000d2b8:	f7ff ff3c 	bl	9000d134 <ip4_input_accept>
9000d2bc:	b980      	cbnz	r0, 9000d2e0 <ip4_input+0x11c>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
9000d2be:	7d2b      	ldrb	r3, [r5, #20]
9000d2c0:	2b7f      	cmp	r3, #127	; 0x7f
9000d2c2:	d0b8      	beq.n	9000d236 <ip4_input+0x72>
        NETIF_FOREACH(netif) {
9000d2c4:	4b20      	ldr	r3, [pc, #128]	; (9000d348 <ip4_input+0x184>)
9000d2c6:	681f      	ldr	r7, [r3, #0]
9000d2c8:	2f00      	cmp	r7, #0
9000d2ca:	d0b4      	beq.n	9000d236 <ip4_input+0x72>
          if (netif == inp) {
9000d2cc:	42b7      	cmp	r7, r6
9000d2ce:	d101      	bne.n	9000d2d4 <ip4_input+0x110>
        NETIF_FOREACH(netif) {
9000d2d0:	683f      	ldr	r7, [r7, #0]
9000d2d2:	e7f9      	b.n	9000d2c8 <ip4_input+0x104>
          if (ip4_input_accept(netif)) {
9000d2d4:	4638      	mov	r0, r7
9000d2d6:	f7ff ff2d 	bl	9000d134 <ip4_input_accept>
9000d2da:	2800      	cmp	r0, #0
9000d2dc:	d0f8      	beq.n	9000d2d0 <ip4_input+0x10c>
9000d2de:	e7b4      	b.n	9000d24a <ip4_input+0x86>
  if (netif == NULL) {
9000d2e0:	2e00      	cmp	r6, #0
9000d2e2:	d1b1      	bne.n	9000d248 <ip4_input+0x84>
9000d2e4:	e7a7      	b.n	9000d236 <ip4_input+0x72>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
9000d2e6:	eb08 0309 	add.w	r3, r8, r9
9000d2ea:	885b      	ldrh	r3, [r3, #2]
9000d2ec:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
9000d2f0:	d1a5      	bne.n	9000d23e <ip4_input+0x7a>
9000d2f2:	4637      	mov	r7, r6
9000d2f4:	e7b5      	b.n	9000d262 <ip4_input+0x9e>
        udp_input(p, inp);
9000d2f6:	4631      	mov	r1, r6
9000d2f8:	4620      	mov	r0, r4
9000d2fa:	f006 faab 	bl	90013854 <udp_input>
  ip_data.current_netif = NULL;
9000d2fe:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
9000d300:	e9c5 3300 	strd	r3, r3, [r5]
  ip_data.current_ip4_header = NULL;
9000d304:	60ab      	str	r3, [r5, #8]
  ip_data.current_ip_header_tot_len = 0;
9000d306:	81ab      	strh	r3, [r5, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
9000d308:	e9c5 3304 	strd	r3, r3, [r5, #16]
  return ERR_OK;
9000d30c:	e768      	b.n	9000d1e0 <ip4_input+0x1c>
        tcp_input(p, inp);
9000d30e:	4631      	mov	r1, r6
9000d310:	4620      	mov	r0, r4
9000d312:	f004 f9d1 	bl	900116b8 <tcp_input>
        break;
9000d316:	e7f2      	b.n	9000d2fe <ip4_input+0x13a>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
9000d318:	4639      	mov	r1, r7
9000d31a:	6968      	ldr	r0, [r5, #20]
9000d31c:	f000 f8a1 	bl	9000d462 <ip4_addr_isbroadcast_u32>
9000d320:	b960      	cbnz	r0, 9000d33c <ip4_input+0x178>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
9000d322:	696b      	ldr	r3, [r5, #20]
9000d324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
9000d328:	2be0      	cmp	r3, #224	; 0xe0
9000d32a:	d007      	beq.n	9000d33c <ip4_input+0x178>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
9000d32c:	4649      	mov	r1, r9
9000d32e:	4620      	mov	r0, r4
9000d330:	f001 fa68 	bl	9000e804 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
9000d334:	2102      	movs	r1, #2
9000d336:	4620      	mov	r0, r4
9000d338:	f7ff fede 	bl	9000d0f8 <icmp_dest_unreach>
        pbuf_free(p);
9000d33c:	4620      	mov	r0, r4
9000d33e:	f001 fa69 	bl	9000e814 <pbuf_free>
        break;
9000d342:	e7dc      	b.n	9000d2fe <ip4_input+0x13a>
9000d344:	20027358 	.word	0x20027358
9000d348:	2002cb54 	.word	0x2002cb54

9000d34c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
9000d34c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
9000d350:	461f      	mov	r7, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
9000d352:	7b83      	ldrb	r3, [r0, #14]
{
9000d354:	4604      	mov	r4, r0
9000d356:	4689      	mov	r9, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
9000d358:	2b01      	cmp	r3, #1
{
9000d35a:	4616      	mov	r6, r2
9000d35c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
9000d360:	d006      	beq.n	9000d370 <ip4_output_if_src+0x24>
9000d362:	4b31      	ldr	r3, [pc, #196]	; (9000d428 <ip4_output_if_src+0xdc>)
9000d364:	f44f 7255 	mov.w	r2, #852	; 0x354
9000d368:	4930      	ldr	r1, [pc, #192]	; (9000d42c <ip4_output_if_src+0xe0>)
9000d36a:	4831      	ldr	r0, [pc, #196]	; (9000d430 <ip4_output_if_src+0xe4>)
9000d36c:	f01c f8b0 	bl	900294d0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
9000d370:	2e00      	cmp	r6, #0
9000d372:	d049      	beq.n	9000d408 <ip4_output_if_src+0xbc>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
9000d374:	2114      	movs	r1, #20
9000d376:	4620      	mov	r0, r4
9000d378:	f001 fa14 	bl	9000e7a4 <pbuf_add_header>
9000d37c:	b120      	cbz	r0, 9000d388 <ip4_output_if_src+0x3c>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
9000d37e:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
9000d382:	b002      	add	sp, #8
9000d384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
9000d388:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
9000d38a:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
9000d38c:	2b13      	cmp	r3, #19
9000d38e:	d806      	bhi.n	9000d39e <ip4_output_if_src+0x52>
9000d390:	4b25      	ldr	r3, [pc, #148]	; (9000d428 <ip4_output_if_src+0xdc>)
9000d392:	f44f 7262 	mov.w	r2, #904	; 0x388
9000d396:	4927      	ldr	r1, [pc, #156]	; (9000d434 <ip4_output_if_src+0xe8>)
9000d398:	4825      	ldr	r0, [pc, #148]	; (9000d430 <ip4_output_if_src+0xe4>)
9000d39a:	f01c f899 	bl	900294d0 <iprintf>
    IPH_PROTO_SET(iphdr, proto);
9000d39e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
9000d3a2:	722f      	strb	r7, [r5, #8]
    IPH_OFFSET_SET(iphdr, 0);
9000d3a4:	2700      	movs	r7, #0
    IPH_PROTO_SET(iphdr, proto);
9000d3a6:	726b      	strb	r3, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
9000d3a8:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
9000d3aa:	f8df a090 	ldr.w	sl, [pc, #144]	; 9000d43c <ip4_output_if_src+0xf0>
    ip4_addr_copy(iphdr->dest, *dest);
9000d3ae:	612b      	str	r3, [r5, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
9000d3b0:	2345      	movs	r3, #69	; 0x45
9000d3b2:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
9000d3b4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
9000d3b8:	706b      	strb	r3, [r5, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
9000d3ba:	8920      	ldrh	r0, [r4, #8]
9000d3bc:	f7fd fea2 	bl	9000b104 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
9000d3c0:	71af      	strb	r7, [r5, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
9000d3c2:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(iphdr, 0);
9000d3c4:	71ef      	strb	r7, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
9000d3c6:	f8ba 0000 	ldrh.w	r0, [sl]
9000d3ca:	f7fd fe9b 	bl	9000b104 <lwip_htons>
    ++ip_id;
9000d3ce:	f8ba 3000 	ldrh.w	r3, [sl]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
9000d3d2:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
9000d3d4:	3301      	adds	r3, #1
9000d3d6:	f8aa 3000 	strh.w	r3, [sl]
    if (src == NULL) {
9000d3da:	f1b9 0f00 	cmp.w	r9, #0
9000d3de:	d110      	bne.n	9000d402 <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
9000d3e0:	4b15      	ldr	r3, [pc, #84]	; (9000d438 <ip4_output_if_src+0xec>)
9000d3e2:	681b      	ldr	r3, [r3, #0]
9000d3e4:	60eb      	str	r3, [r5, #12]
    IPH_CHKSUM_SET(iphdr, 0);
9000d3e6:	72af      	strb	r7, [r5, #10]
9000d3e8:	72ef      	strb	r7, [r5, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
9000d3ea:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
9000d3ee:	b19b      	cbz	r3, 9000d418 <ip4_output_if_src+0xcc>
9000d3f0:	8922      	ldrh	r2, [r4, #8]
9000d3f2:	429a      	cmp	r2, r3
9000d3f4:	d910      	bls.n	9000d418 <ip4_output_if_src+0xcc>
    return ip4_frag(p, netif, dest);
9000d3f6:	4632      	mov	r2, r6
9000d3f8:	4641      	mov	r1, r8
9000d3fa:	4620      	mov	r0, r4
9000d3fc:	f000 fb40 	bl	9000da80 <ip4_frag>
9000d400:	e7bf      	b.n	9000d382 <ip4_output_if_src+0x36>
      ip4_addr_copy(iphdr->src, *src);
9000d402:	f8d9 3000 	ldr.w	r3, [r9]
9000d406:	e7ed      	b.n	9000d3e4 <ip4_output_if_src+0x98>
    if (p->len < IP_HLEN) {
9000d408:	8963      	ldrh	r3, [r4, #10]
9000d40a:	2b13      	cmp	r3, #19
9000d40c:	d9b7      	bls.n	9000d37e <ip4_output_if_src+0x32>
    ip4_addr_copy(dest_addr, iphdr->dest);
9000d40e:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
9000d410:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
9000d412:	691b      	ldr	r3, [r3, #16]
9000d414:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
9000d416:	e7e8      	b.n	9000d3ea <ip4_output_if_src+0x9e>
  return netif->output(netif, p, dest);
9000d418:	f8d8 3014 	ldr.w	r3, [r8, #20]
9000d41c:	4632      	mov	r2, r6
9000d41e:	4621      	mov	r1, r4
9000d420:	4640      	mov	r0, r8
9000d422:	4798      	blx	r3
9000d424:	e7ad      	b.n	9000d382 <ip4_output_if_src+0x36>
9000d426:	bf00      	nop
9000d428:	9002c112 	.word	0x9002c112
9000d42c:	9002c176 	.word	0x9002c176
9000d430:	9002a254 	.word	0x9002a254
9000d434:	9002c182 	.word	0x9002c182
9000d438:	9002c1b0 	.word	0x9002c1b0
9000d43c:	20026bde 	.word	0x20026bde

9000d440 <ip4_output_if>:
{
9000d440:	b4f0      	push	{r4, r5, r6, r7}
9000d442:	9c06      	ldr	r4, [sp, #24]
9000d444:	f89d 5010 	ldrb.w	r5, [sp, #16]
9000d448:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
9000d44c:	b11a      	cbz	r2, 9000d456 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
9000d44e:	b109      	cbz	r1, 9000d454 <ip4_output_if+0x14>
9000d450:	680f      	ldr	r7, [r1, #0]
9000d452:	b907      	cbnz	r7, 9000d456 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
9000d454:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
9000d456:	9504      	str	r5, [sp, #16]
9000d458:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
9000d45c:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
9000d45e:	f7ff bf75 	b.w	9000d34c <ip4_output_if_src>

9000d462 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
9000d462:	1e43      	subs	r3, r0, #1
{
9000d464:	4602      	mov	r2, r0
  if ((~addr == IPADDR_ANY) ||
9000d466:	3303      	adds	r3, #3
9000d468:	d812      	bhi.n	9000d490 <ip4_addr_isbroadcast_u32+0x2e>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
9000d46a:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
9000d46e:	f013 0002 	ands.w	r0, r3, #2
9000d472:	d010      	beq.n	9000d496 <ip4_addr_isbroadcast_u32+0x34>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
9000d474:	684b      	ldr	r3, [r1, #4]
9000d476:	4293      	cmp	r3, r2
9000d478:	d00c      	beq.n	9000d494 <ip4_addr_isbroadcast_u32+0x32>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
9000d47a:	6888      	ldr	r0, [r1, #8]
9000d47c:	4053      	eors	r3, r2
9000d47e:	4203      	tst	r3, r0
9000d480:	d108      	bne.n	9000d494 <ip4_addr_isbroadcast_u32+0x32>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
9000d482:	43c3      	mvns	r3, r0
9000d484:	ea22 0000 	bic.w	r0, r2, r0
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
9000d488:	1ac3      	subs	r3, r0, r3
9000d48a:	4258      	negs	r0, r3
9000d48c:	4158      	adcs	r0, r3
9000d48e:	4770      	bx	lr
    return 1;
9000d490:	2001      	movs	r0, #1
9000d492:	4770      	bx	lr
    return 0;
9000d494:	2000      	movs	r0, #0
  }
}
9000d496:	4770      	bx	lr

9000d498 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
9000d498:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
9000d49a:	4b0c      	ldr	r3, [pc, #48]	; (9000d4cc <ip_reass_dequeue_datagram+0x34>)
{
9000d49c:	4604      	mov	r4, r0
9000d49e:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
9000d4a0:	681a      	ldr	r2, [r3, #0]
9000d4a2:	4282      	cmp	r2, r0
9000d4a4:	d107      	bne.n	9000d4b6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
9000d4a6:	6802      	ldr	r2, [r0, #0]
9000d4a8:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
9000d4aa:	4621      	mov	r1, r4
9000d4ac:	2004      	movs	r0, #4
}
9000d4ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
9000d4b2:	f000 bec5 	b.w	9000e240 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
9000d4b6:	b931      	cbnz	r1, 9000d4c6 <ip_reass_dequeue_datagram+0x2e>
9000d4b8:	4b05      	ldr	r3, [pc, #20]	; (9000d4d0 <ip_reass_dequeue_datagram+0x38>)
9000d4ba:	f240 1245 	movw	r2, #325	; 0x145
9000d4be:	4905      	ldr	r1, [pc, #20]	; (9000d4d4 <ip_reass_dequeue_datagram+0x3c>)
9000d4c0:	4805      	ldr	r0, [pc, #20]	; (9000d4d8 <ip_reass_dequeue_datagram+0x40>)
9000d4c2:	f01c f805 	bl	900294d0 <iprintf>
    prev->next = ipr->next;
9000d4c6:	6823      	ldr	r3, [r4, #0]
9000d4c8:	602b      	str	r3, [r5, #0]
9000d4ca:	e7ee      	b.n	9000d4aa <ip_reass_dequeue_datagram+0x12>
9000d4cc:	20026be4 	.word	0x20026be4
9000d4d0:	9002c1b8 	.word	0x9002c1b8
9000d4d4:	9002c221 	.word	0x9002c221
9000d4d8:	9002a254 	.word	0x9002a254

9000d4dc <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
9000d4dc:	4281      	cmp	r1, r0
{
9000d4de:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000d4e2:	4604      	mov	r4, r0
9000d4e4:	460e      	mov	r6, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
9000d4e6:	d105      	bne.n	9000d4f4 <ip_reass_free_complete_datagram+0x18>
9000d4e8:	4b2f      	ldr	r3, [pc, #188]	; (9000d5a8 <ip_reass_free_complete_datagram+0xcc>)
9000d4ea:	22ab      	movs	r2, #171	; 0xab
9000d4ec:	492f      	ldr	r1, [pc, #188]	; (9000d5ac <ip_reass_free_complete_datagram+0xd0>)
9000d4ee:	4830      	ldr	r0, [pc, #192]	; (9000d5b0 <ip_reass_free_complete_datagram+0xd4>)
9000d4f0:	f01b ffee 	bl	900294d0 <iprintf>
  if (prev != NULL) {
9000d4f4:	b146      	cbz	r6, 9000d508 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
9000d4f6:	6833      	ldr	r3, [r6, #0]
9000d4f8:	42a3      	cmp	r3, r4
9000d4fa:	d005      	beq.n	9000d508 <ip_reass_free_complete_datagram+0x2c>
9000d4fc:	4b2a      	ldr	r3, [pc, #168]	; (9000d5a8 <ip_reass_free_complete_datagram+0xcc>)
9000d4fe:	22ad      	movs	r2, #173	; 0xad
9000d500:	492c      	ldr	r1, [pc, #176]	; (9000d5b4 <ip_reass_free_complete_datagram+0xd8>)
9000d502:	482b      	ldr	r0, [pc, #172]	; (9000d5b0 <ip_reass_free_complete_datagram+0xd4>)
9000d504:	f01b ffe4 	bl	900294d0 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
9000d508:	6867      	ldr	r7, [r4, #4]
9000d50a:	687b      	ldr	r3, [r7, #4]
  if (iprh->start == 0) {
9000d50c:	889a      	ldrh	r2, [r3, #4]
9000d50e:	bb92      	cbnz	r2, 9000d576 <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
9000d510:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
9000d512:	f104 011c 	add.w	r1, r4, #28
    ipr->p = iprh->next_pbuf;
9000d516:	6062      	str	r2, [r4, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
9000d518:	f104 0208 	add.w	r2, r4, #8
9000d51c:	f852 0b04 	ldr.w	r0, [r2], #4
9000d520:	428a      	cmp	r2, r1
9000d522:	f843 0b04 	str.w	r0, [r3], #4
9000d526:	d1f9      	bne.n	9000d51c <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
9000d528:	2101      	movs	r1, #1
9000d52a:	4638      	mov	r0, r7
9000d52c:	f7ff fde9 	bl	9000d102 <icmp_time_exceeded>
    clen = pbuf_clen(p);
9000d530:	4638      	mov	r0, r7
9000d532:	f001 fad9 	bl	9000eae8 <pbuf_clen>
9000d536:	4605      	mov	r5, r0
    pbuf_free(p);
9000d538:	4638      	mov	r0, r7
9000d53a:	f001 f96b 	bl	9000e814 <pbuf_free>
  p = ipr->p;
9000d53e:	6867      	ldr	r7, [r4, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
9000d540:	f8df 8064 	ldr.w	r8, [pc, #100]	; 9000d5a8 <ip_reass_free_complete_datagram+0xcc>
9000d544:	f8df 9078 	ldr.w	r9, [pc, #120]	; 9000d5c0 <ip_reass_free_complete_datagram+0xe4>
9000d548:	f8df a064 	ldr.w	sl, [pc, #100]	; 9000d5b0 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
9000d54c:	b9af      	cbnz	r7, 9000d57a <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
9000d54e:	4620      	mov	r0, r4
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
9000d550:	4c19      	ldr	r4, [pc, #100]	; (9000d5b8 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
9000d552:	4631      	mov	r1, r6
9000d554:	f7ff ffa0 	bl	9000d498 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
9000d558:	8823      	ldrh	r3, [r4, #0]
9000d55a:	42ab      	cmp	r3, r5
9000d55c:	d205      	bcs.n	9000d56a <ip_reass_free_complete_datagram+0x8e>
9000d55e:	4b12      	ldr	r3, [pc, #72]	; (9000d5a8 <ip_reass_free_complete_datagram+0xcc>)
9000d560:	22d2      	movs	r2, #210	; 0xd2
9000d562:	4916      	ldr	r1, [pc, #88]	; (9000d5bc <ip_reass_free_complete_datagram+0xe0>)
9000d564:	4812      	ldr	r0, [pc, #72]	; (9000d5b0 <ip_reass_free_complete_datagram+0xd4>)
9000d566:	f01b ffb3 	bl	900294d0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
9000d56a:	8823      	ldrh	r3, [r4, #0]
}
9000d56c:	4628      	mov	r0, r5
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
9000d56e:	1b5b      	subs	r3, r3, r5
9000d570:	8023      	strh	r3, [r4, #0]
}
9000d572:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
9000d576:	2500      	movs	r5, #0
9000d578:	e7e1      	b.n	9000d53e <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
9000d57a:	687b      	ldr	r3, [r7, #4]
    clen = pbuf_clen(pcur);
9000d57c:	4638      	mov	r0, r7
    p = iprh->next_pbuf;
9000d57e:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
9000d582:	f001 fab1 	bl	9000eae8 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
9000d586:	4405      	add	r5, r0
9000d588:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
9000d58c:	db05      	blt.n	9000d59a <ip_reass_free_complete_datagram+0xbe>
9000d58e:	4643      	mov	r3, r8
9000d590:	22cc      	movs	r2, #204	; 0xcc
9000d592:	4649      	mov	r1, r9
9000d594:	4650      	mov	r0, sl
9000d596:	f01b ff9b 	bl	900294d0 <iprintf>
    pbuf_free(pcur);
9000d59a:	4638      	mov	r0, r7
    pbufs_freed = (u16_t)(pbufs_freed + clen);
9000d59c:	b2ad      	uxth	r5, r5
    p = iprh->next_pbuf;
9000d59e:	465f      	mov	r7, fp
    pbuf_free(pcur);
9000d5a0:	f001 f938 	bl	9000e814 <pbuf_free>
9000d5a4:	e7d2      	b.n	9000d54c <ip_reass_free_complete_datagram+0x70>
9000d5a6:	bf00      	nop
9000d5a8:	9002c1b8 	.word	0x9002c1b8
9000d5ac:	9002c23a 	.word	0x9002c23a
9000d5b0:	9002a254 	.word	0x9002a254
9000d5b4:	9002c246 	.word	0x9002c246
9000d5b8:	20026be0 	.word	0x20026be0
9000d5bc:	9002c275 	.word	0x9002c275
9000d5c0:	9002c258 	.word	0x9002c258

9000d5c4 <ip_reass_remove_oldest_datagram>:
{
9000d5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d5c8:	4605      	mov	r5, r0
9000d5ca:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
9000d5cc:	2600      	movs	r6, #0
    r = reassdatagrams;
9000d5ce:	f8df 8068 	ldr.w	r8, [pc, #104]	; 9000d638 <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
9000d5d2:	2400      	movs	r4, #0
    r = reassdatagrams;
9000d5d4:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
9000d5d8:	4621      	mov	r1, r4
    prev = NULL;
9000d5da:	46a4      	mov	ip, r4
    oldest = NULL;
9000d5dc:	4620      	mov	r0, r4
    while (r != NULL) {
9000d5de:	b953      	cbnz	r3, 9000d5f6 <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
9000d5e0:	b110      	cbz	r0, 9000d5e8 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
9000d5e2:	f7ff ff7b 	bl	9000d4dc <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
9000d5e6:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
9000d5e8:	42be      	cmp	r6, r7
9000d5ea:	da01      	bge.n	9000d5f0 <ip_reass_remove_oldest_datagram+0x2c>
9000d5ec:	2c01      	cmp	r4, #1
9000d5ee:	dcf0      	bgt.n	9000d5d2 <ip_reass_remove_oldest_datagram+0xe>
}
9000d5f0:	4630      	mov	r0, r6
9000d5f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
9000d5f6:	f8d5 e00c 	ldr.w	lr, [r5, #12]
9000d5fa:	695a      	ldr	r2, [r3, #20]
9000d5fc:	4572      	cmp	r2, lr
9000d5fe:	d109      	bne.n	9000d614 <ip_reass_remove_oldest_datagram+0x50>
9000d600:	f8d5 e010 	ldr.w	lr, [r5, #16]
9000d604:	699a      	ldr	r2, [r3, #24]
9000d606:	4572      	cmp	r2, lr
9000d608:	d104      	bne.n	9000d614 <ip_reass_remove_oldest_datagram+0x50>
9000d60a:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
9000d60e:	88aa      	ldrh	r2, [r5, #4]
9000d610:	4596      	cmp	lr, r2
9000d612:	d008      	beq.n	9000d626 <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
9000d614:	3401      	adds	r4, #1
        if (oldest == NULL) {
9000d616:	b160      	cbz	r0, 9000d632 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
9000d618:	7fc2      	ldrb	r2, [r0, #31]
9000d61a:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest_prev = prev;
9000d61e:	4596      	cmp	lr, r2
9000d620:	bf9c      	itt	ls
9000d622:	4661      	movls	r1, ip
9000d624:	4618      	movls	r0, r3
      if (r->next != NULL) {
9000d626:	681a      	ldr	r2, [r3, #0]
9000d628:	2a00      	cmp	r2, #0
9000d62a:	bf18      	it	ne
9000d62c:	469c      	movne	ip, r3
9000d62e:	4613      	mov	r3, r2
9000d630:	e7d5      	b.n	9000d5de <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
9000d632:	4661      	mov	r1, ip
9000d634:	4618      	mov	r0, r3
9000d636:	e7f6      	b.n	9000d626 <ip_reass_remove_oldest_datagram+0x62>
9000d638:	20026be4 	.word	0x20026be4

9000d63c <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
9000d63c:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
9000d63e:	4604      	mov	r4, r0
9000d640:	b930      	cbnz	r0, 9000d650 <ip_frag_free_pbuf_custom_ref+0x14>
9000d642:	4b06      	ldr	r3, [pc, #24]	; (9000d65c <ip_frag_free_pbuf_custom_ref+0x20>)
9000d644:	f44f 7231 	mov.w	r2, #708	; 0x2c4
9000d648:	4905      	ldr	r1, [pc, #20]	; (9000d660 <ip_frag_free_pbuf_custom_ref+0x24>)
9000d64a:	4806      	ldr	r0, [pc, #24]	; (9000d664 <ip_frag_free_pbuf_custom_ref+0x28>)
9000d64c:	f01b ff40 	bl	900294d0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
9000d650:	4621      	mov	r1, r4
9000d652:	2005      	movs	r0, #5
}
9000d654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
9000d658:	f000 bdf2 	b.w	9000e240 <memp_free>
9000d65c:	9002c1b8 	.word	0x9002c1b8
9000d660:	9002cb1d 	.word	0x9002cb1d
9000d664:	9002a254 	.word	0x9002a254

9000d668 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
9000d668:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
9000d66a:	4604      	mov	r4, r0
9000d66c:	b930      	cbnz	r0, 9000d67c <ipfrag_free_pbuf_custom+0x14>
9000d66e:	4b08      	ldr	r3, [pc, #32]	; (9000d690 <ipfrag_free_pbuf_custom+0x28>)
9000d670:	f240 22ce 	movw	r2, #718	; 0x2ce
9000d674:	4907      	ldr	r1, [pc, #28]	; (9000d694 <ipfrag_free_pbuf_custom+0x2c>)
9000d676:	4808      	ldr	r0, [pc, #32]	; (9000d698 <ipfrag_free_pbuf_custom+0x30>)
9000d678:	f01b ff2a 	bl	900294d0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
9000d67c:	6960      	ldr	r0, [r4, #20]
9000d67e:	b108      	cbz	r0, 9000d684 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
9000d680:	f001 f8c8 	bl	9000e814 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
9000d684:	4620      	mov	r0, r4
}
9000d686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
9000d68a:	f7ff bfd7 	b.w	9000d63c <ip_frag_free_pbuf_custom_ref>
9000d68e:	bf00      	nop
9000d690:	9002c1b8 	.word	0x9002c1b8
9000d694:	9002c297 	.word	0x9002c297
9000d698:	9002a254 	.word	0x9002a254

9000d69c <ip_reass_tmr>:
{
9000d69c:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
9000d69e:	4b09      	ldr	r3, [pc, #36]	; (9000d6c4 <ip_reass_tmr+0x28>)
  struct ip_reassdata *r, *prev = NULL;
9000d6a0:	2400      	movs	r4, #0
  r = reassdatagrams;
9000d6a2:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
9000d6a4:	b900      	cbnz	r0, 9000d6a8 <ip_reass_tmr+0xc>
}
9000d6a6:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
9000d6a8:	7fc3      	ldrb	r3, [r0, #31]
9000d6aa:	6805      	ldr	r5, [r0, #0]
9000d6ac:	b123      	cbz	r3, 9000d6b8 <ip_reass_tmr+0x1c>
      r->timer--;
9000d6ae:	3b01      	subs	r3, #1
9000d6b0:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
9000d6b2:	4604      	mov	r4, r0
9000d6b4:	4628      	mov	r0, r5
9000d6b6:	e7f5      	b.n	9000d6a4 <ip_reass_tmr+0x8>
9000d6b8:	4621      	mov	r1, r4
9000d6ba:	f7ff ff0f 	bl	9000d4dc <ip_reass_free_complete_datagram>
9000d6be:	4620      	mov	r0, r4
9000d6c0:	e7f7      	b.n	9000d6b2 <ip_reass_tmr+0x16>
9000d6c2:	bf00      	nop
9000d6c4:	20026be4 	.word	0x20026be4

9000d6c8 <ip4_reass>:
{
9000d6c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
9000d6cc:	6845      	ldr	r5, [r0, #4]
{
9000d6ce:	4680      	mov	r8, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
9000d6d0:	782b      	ldrb	r3, [r5, #0]
9000d6d2:	f003 030f 	and.w	r3, r3, #15
9000d6d6:	2b05      	cmp	r3, #5
9000d6d8:	f040 80a0 	bne.w	9000d81c <ip4_reass+0x154>
  offset = IPH_OFFSET_BYTES(fraghdr);
9000d6dc:	88e8      	ldrh	r0, [r5, #6]
9000d6de:	f7fd fd11 	bl	9000b104 <lwip_htons>
9000d6e2:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
9000d6e4:	8868      	ldrh	r0, [r5, #2]
9000d6e6:	f7fd fd0d 	bl	9000b104 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
9000d6ea:	782a      	ldrb	r2, [r5, #0]
9000d6ec:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
9000d6f0:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
9000d6f4:	ea4f 0382 	mov.w	r3, r2, lsl #2
9000d6f8:	f0c0 8090 	bcc.w	9000d81c <ip4_reass+0x154>
  len = (u16_t)(len - hlen);
9000d6fc:	1ac3      	subs	r3, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
9000d6fe:	4cb7      	ldr	r4, [pc, #732]	; (9000d9dc <ip4_reass+0x314>)
  clen = pbuf_clen(p);
9000d700:	4640      	mov	r0, r8
  len = (u16_t)(len - hlen);
9000d702:	b29b      	uxth	r3, r3
9000d704:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
9000d706:	f001 f9ef 	bl	9000eae8 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
9000d70a:	8823      	ldrh	r3, [r4, #0]
  clen = pbuf_clen(p);
9000d70c:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
9000d70e:	4403      	add	r3, r0
9000d710:	2b0a      	cmp	r3, #10
9000d712:	dc79      	bgt.n	9000d808 <ip4_reass+0x140>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
9000d714:	4fb2      	ldr	r7, [pc, #712]	; (9000d9e0 <ip4_reass+0x318>)
9000d716:	683c      	ldr	r4, [r7, #0]
9000d718:	2c00      	cmp	r4, #0
9000d71a:	f040 8084 	bne.w	9000d826 <ip4_reass+0x15e>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
9000d71e:	2004      	movs	r0, #4
9000d720:	f000 fd72 	bl	9000e208 <memp_malloc>
  if (ipr == NULL) {
9000d724:	4604      	mov	r4, r0
9000d726:	b958      	cbnz	r0, 9000d740 <ip4_reass+0x78>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
9000d728:	4649      	mov	r1, r9
9000d72a:	4628      	mov	r0, r5
9000d72c:	f7ff ff4a 	bl	9000d5c4 <ip_reass_remove_oldest_datagram>
9000d730:	4581      	cmp	r9, r0
9000d732:	dc73      	bgt.n	9000d81c <ip4_reass+0x154>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
9000d734:	2004      	movs	r0, #4
9000d736:	f000 fd67 	bl	9000e208 <memp_malloc>
    if (ipr == NULL)
9000d73a:	4604      	mov	r4, r0
9000d73c:	2800      	cmp	r0, #0
9000d73e:	d06d      	beq.n	9000d81c <ip4_reass+0x154>
  memset(ipr, 0, sizeof(struct ip_reassdata));
9000d740:	221c      	movs	r2, #28
9000d742:	2100      	movs	r1, #0
9000d744:	1d20      	adds	r0, r4, #4
9000d746:	f01b fb23 	bl	90028d90 <memset>
  ipr->timer = IP_REASS_MAXAGE;
9000d74a:	230f      	movs	r3, #15
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
9000d74c:	f104 0208 	add.w	r2, r4, #8
9000d750:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
9000d754:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
9000d756:	683b      	ldr	r3, [r7, #0]
  reassdatagrams = ipr;
9000d758:	603c      	str	r4, [r7, #0]
  ipr->next = reassdatagrams;
9000d75a:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
9000d75c:	462b      	mov	r3, r5
9000d75e:	f853 0b04 	ldr.w	r0, [r3], #4
9000d762:	428b      	cmp	r3, r1
9000d764:	f842 0b04 	str.w	r0, [r2], #4
9000d768:	d1f9      	bne.n	9000d75e <ip4_reass+0x96>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
9000d76a:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
9000d76e:	f3c6 070c 	ubfx	r7, r6, #0, #13
  if (is_last) {
9000d772:	f01b 0b20 	ands.w	fp, fp, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
9000d776:	ea4f 07c7 	mov.w	r7, r7, lsl #3
  if (is_last) {
9000d77a:	d10a      	bne.n	9000d792 <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
9000d77c:	9b01      	ldr	r3, [sp, #4]
9000d77e:	18fb      	adds	r3, r7, r3
9000d780:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
9000d782:	429f      	cmp	r7, r3
9000d784:	f200 813c 	bhi.w	9000da00 <ip4_reass+0x338>
9000d788:	f64f 72eb 	movw	r2, #65515	; 0xffeb
9000d78c:	4293      	cmp	r3, r2
9000d78e:	f200 8137 	bhi.w	9000da00 <ip4_reass+0x338>
  fraghdr = (struct ip_hdr *)new_p->payload;
9000d792:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
9000d796:	8868      	ldrh	r0, [r5, #2]
9000d798:	f7fd fcb4 	bl	9000b104 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
9000d79c:	782b      	ldrb	r3, [r5, #0]
9000d79e:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
9000d7a2:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
9000d7a6:	ea4f 0283 	mov.w	r2, r3, lsl #2
9000d7aa:	f0c0 8129 	bcc.w	9000da00 <ip4_reass+0x338>
  len = (u16_t)(len - hlen);
9000d7ae:	1a80      	subs	r0, r0, r2
9000d7b0:	fa1f fa80 	uxth.w	sl, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
9000d7b4:	88e8      	ldrh	r0, [r5, #6]
9000d7b6:	f7fd fca5 	bl	9000b104 <lwip_htons>
9000d7ba:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
9000d7be:	f8d8 6004 	ldr.w	r6, [r8, #4]
  iprh->next_pbuf = NULL;
9000d7c2:	2500      	movs	r5, #0
  offset = IPH_OFFSET_BYTES(fraghdr);
9000d7c4:	00c0      	lsls	r0, r0, #3
  iprh->next_pbuf = NULL;
9000d7c6:	7035      	strb	r5, [r6, #0]
  iprh->end = (u16_t)(offset + len);
9000d7c8:	eb0a 0300 	add.w	r3, sl, r0
  iprh->next_pbuf = NULL;
9000d7cc:	7075      	strb	r5, [r6, #1]
9000d7ce:	70b5      	strb	r5, [r6, #2]
  iprh->end = (u16_t)(offset + len);
9000d7d0:	b29a      	uxth	r2, r3
  iprh->next_pbuf = NULL;
9000d7d2:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
9000d7d4:	80b0      	strh	r0, [r6, #4]
  if (iprh->end < offset) {
9000d7d6:	4290      	cmp	r0, r2
  iprh->end = (u16_t)(offset + len);
9000d7d8:	80f3      	strh	r3, [r6, #6]
  if (iprh->end < offset) {
9000d7da:	f200 8111 	bhi.w	9000da00 <ip4_reass+0x338>
  for (q = ipr->p; q != NULL;) {
9000d7de:	f8d4 c004 	ldr.w	ip, [r4, #4]
  int valid = 1;
9000d7e2:	f04f 0a01 	mov.w	sl, #1
  for (q = ipr->p; q != NULL;) {
9000d7e6:	4663      	mov	r3, ip
9000d7e8:	bb63      	cbnz	r3, 9000d844 <ip4_reass+0x17c>
    if (iprh_prev != NULL) {
9000d7ea:	2d00      	cmp	r5, #0
9000d7ec:	f040 80ae 	bne.w	9000d94c <ip4_reass+0x284>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
9000d7f0:	f1bc 0f00 	cmp.w	ip, #0
9000d7f4:	f000 8098 	beq.w	9000d928 <ip4_reass+0x260>
9000d7f8:	4b7a      	ldr	r3, [pc, #488]	; (9000d9e4 <ip4_reass+0x31c>)
9000d7fa:	f44f 72df 	mov.w	r2, #446	; 0x1be
9000d7fe:	497a      	ldr	r1, [pc, #488]	; (9000d9e8 <ip4_reass+0x320>)
9000d800:	487a      	ldr	r0, [pc, #488]	; (9000d9ec <ip4_reass+0x324>)
9000d802:	f01b fe65 	bl	900294d0 <iprintf>
9000d806:	e08f      	b.n	9000d928 <ip4_reass+0x260>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
9000d808:	4601      	mov	r1, r0
9000d80a:	4628      	mov	r0, r5
9000d80c:	f7ff feda 	bl	9000d5c4 <ip_reass_remove_oldest_datagram>
9000d810:	b120      	cbz	r0, 9000d81c <ip4_reass+0x154>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
9000d812:	8823      	ldrh	r3, [r4, #0]
9000d814:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
9000d816:	2b0a      	cmp	r3, #10
9000d818:	f77f af7c 	ble.w	9000d714 <ip4_reass+0x4c>
  pbuf_free(p);
9000d81c:	4640      	mov	r0, r8
9000d81e:	f000 fff9 	bl	9000e814 <pbuf_free>
  return NULL;
9000d822:	2500      	movs	r5, #0
9000d824:	e07a      	b.n	9000d91c <ip4_reass+0x254>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
9000d826:	68eb      	ldr	r3, [r5, #12]
9000d828:	6962      	ldr	r2, [r4, #20]
9000d82a:	429a      	cmp	r2, r3
9000d82c:	d108      	bne.n	9000d840 <ip4_reass+0x178>
9000d82e:	692b      	ldr	r3, [r5, #16]
9000d830:	69a2      	ldr	r2, [r4, #24]
9000d832:	429a      	cmp	r2, r3
9000d834:	d104      	bne.n	9000d840 <ip4_reass+0x178>
9000d836:	89a2      	ldrh	r2, [r4, #12]
9000d838:	88ab      	ldrh	r3, [r5, #4]
9000d83a:	429a      	cmp	r2, r3
9000d83c:	f000 80f4 	beq.w	9000da28 <ip4_reass+0x360>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
9000d840:	6824      	ldr	r4, [r4, #0]
9000d842:	e769      	b.n	9000d718 <ip4_reass+0x50>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
9000d844:	f8d3 e004 	ldr.w	lr, [r3, #4]
    if (iprh->start < iprh_tmp->start) {
9000d848:	f8be 1004 	ldrh.w	r1, [lr, #4]
9000d84c:	4288      	cmp	r0, r1
9000d84e:	d26e      	bcs.n	9000d92e <ip4_reass+0x266>
      iprh->next_pbuf = q;
9000d850:	6033      	str	r3, [r6, #0]
      if (iprh_prev != NULL) {
9000d852:	2d00      	cmp	r5, #0
9000d854:	d066      	beq.n	9000d924 <ip4_reass+0x25c>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
9000d856:	88eb      	ldrh	r3, [r5, #6]
9000d858:	4298      	cmp	r0, r3
9000d85a:	f0c0 80d1 	bcc.w	9000da00 <ip4_reass+0x338>
9000d85e:	428a      	cmp	r2, r1
9000d860:	f200 80ce 	bhi.w	9000da00 <ip4_reass+0x338>
        if (iprh_prev->end != iprh->start) {
9000d864:	4298      	cmp	r0, r3
        iprh_prev->next_pbuf = new_p;
9000d866:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
9000d86a:	f040 80f9 	bne.w	9000da60 <ip4_reass+0x398>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
9000d86e:	f1bb 0f00 	cmp.w	fp, #0
9000d872:	d004      	beq.n	9000d87e <ip4_reass+0x1b6>
9000d874:	7fa3      	ldrb	r3, [r4, #30]
9000d876:	f013 0301 	ands.w	r3, r3, #1
9000d87a:	f000 809e 	beq.w	9000d9ba <ip4_reass+0x2f2>
    if (valid) {
9000d87e:	f1ba 0f00 	cmp.w	sl, #0
9000d882:	d173      	bne.n	9000d96c <ip4_reass+0x2a4>
          q = iprh->next_pbuf;
9000d884:	f04f 0a00 	mov.w	sl, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
9000d888:	4e54      	ldr	r6, [pc, #336]	; (9000d9dc <ip4_reass+0x314>)
9000d88a:	8830      	ldrh	r0, [r6, #0]
9000d88c:	4481      	add	r9, r0
9000d88e:	f8a6 9000 	strh.w	r9, [r6]
  if (is_last) {
9000d892:	f1bb 0f00 	cmp.w	fp, #0
9000d896:	d106      	bne.n	9000d8a6 <ip4_reass+0x1de>
    u16_t datagram_len = (u16_t)(offset + len);
9000d898:	9b01      	ldr	r3, [sp, #4]
9000d89a:	441f      	add	r7, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
9000d89c:	7fa3      	ldrb	r3, [r4, #30]
9000d89e:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
9000d8a2:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
9000d8a4:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
9000d8a6:	f1ba 0f01 	cmp.w	sl, #1
9000d8aa:	d1ba      	bne.n	9000d822 <ip4_reass+0x15a>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
9000d8ac:	6863      	ldr	r3, [r4, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
9000d8ae:	f104 011c 	add.w	r1, r4, #28
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
9000d8b2:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
9000d8b4:	685d      	ldr	r5, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
9000d8b6:	f104 0308 	add.w	r3, r4, #8
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
9000d8ba:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
9000d8bc:	682f      	ldr	r7, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
9000d8be:	462a      	mov	r2, r5
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
9000d8c0:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
9000d8c2:	f853 cb04 	ldr.w	ip, [r3], #4
9000d8c6:	428b      	cmp	r3, r1
9000d8c8:	f842 cb04 	str.w	ip, [r2], #4
9000d8cc:	d1f9      	bne.n	9000d8c2 <ip4_reass+0x1fa>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
9000d8ce:	f7fd fc19 	bl	9000b104 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
9000d8d2:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
9000d8d4:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
9000d8d6:	71ab      	strb	r3, [r5, #6]
9000d8d8:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
9000d8da:	72ab      	strb	r3, [r5, #10]
9000d8dc:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
9000d8de:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
9000d8e0:	2f00      	cmp	r7, #0
9000d8e2:	d16c      	bne.n	9000d9be <ip4_reass+0x2f6>
    if (ipr == reassdatagrams) {
9000d8e4:	4b3e      	ldr	r3, [pc, #248]	; (9000d9e0 <ip4_reass+0x318>)
9000d8e6:	681b      	ldr	r3, [r3, #0]
        if (ipr_prev->next == ipr) {
9000d8e8:	42a3      	cmp	r3, r4
9000d8ea:	d002      	beq.n	9000d8f2 <ip4_reass+0x22a>
9000d8ec:	461f      	mov	r7, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
9000d8ee:	2b00      	cmp	r3, #0
9000d8f0:	d172      	bne.n	9000d9d8 <ip4_reass+0x310>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
9000d8f2:	4620      	mov	r0, r4
9000d8f4:	4639      	mov	r1, r7
9000d8f6:	f7ff fdcf 	bl	9000d498 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
9000d8fa:	4628      	mov	r0, r5
9000d8fc:	f001 f8f4 	bl	9000eae8 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
9000d900:	8833      	ldrh	r3, [r6, #0]
    clen = pbuf_clen(p);
9000d902:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
9000d904:	4283      	cmp	r3, r0
9000d906:	d206      	bcs.n	9000d916 <ip4_reass+0x24e>
9000d908:	4b36      	ldr	r3, [pc, #216]	; (9000d9e4 <ip4_reass+0x31c>)
9000d90a:	f240 229b 	movw	r2, #667	; 0x29b
9000d90e:	4938      	ldr	r1, [pc, #224]	; (9000d9f0 <ip4_reass+0x328>)
9000d910:	4836      	ldr	r0, [pc, #216]	; (9000d9ec <ip4_reass+0x324>)
9000d912:	f01b fddd 	bl	900294d0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
9000d916:	8830      	ldrh	r0, [r6, #0]
9000d918:	1b04      	subs	r4, r0, r4
9000d91a:	8034      	strh	r4, [r6, #0]
}
9000d91c:	4628      	mov	r0, r5
9000d91e:	b003      	add	sp, #12
9000d920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (iprh->end > iprh_tmp->start) {
9000d924:	428a      	cmp	r2, r1
9000d926:	d86b      	bhi.n	9000da00 <ip4_reass+0x338>
      ipr->p = new_p;
9000d928:	f8c4 8004 	str.w	r8, [r4, #4]
9000d92c:	e79f      	b.n	9000d86e <ip4_reass+0x1a6>
    } else if (iprh->start == iprh_tmp->start) {
9000d92e:	d067      	beq.n	9000da00 <ip4_reass+0x338>
    } else if (iprh->start < iprh_tmp->end) {
9000d930:	f8be 3006 	ldrh.w	r3, [lr, #6]
9000d934:	4283      	cmp	r3, r0
9000d936:	d863      	bhi.n	9000da00 <ip4_reass+0x338>
      if (iprh_prev != NULL) {
9000d938:	b125      	cbz	r5, 9000d944 <ip4_reass+0x27c>
        if (iprh_prev->end != iprh_tmp->start) {
9000d93a:	88eb      	ldrh	r3, [r5, #6]
          valid = 0;
9000d93c:	428b      	cmp	r3, r1
9000d93e:	bf18      	it	ne
9000d940:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
9000d944:	f8de 3000 	ldr.w	r3, [lr]
9000d948:	4675      	mov	r5, lr
9000d94a:	e74d      	b.n	9000d7e8 <ip4_reass+0x120>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
9000d94c:	88eb      	ldrh	r3, [r5, #6]
9000d94e:	4283      	cmp	r3, r0
9000d950:	d906      	bls.n	9000d960 <ip4_reass+0x298>
9000d952:	4b24      	ldr	r3, [pc, #144]	; (9000d9e4 <ip4_reass+0x31c>)
9000d954:	f44f 72db 	mov.w	r2, #438	; 0x1b6
9000d958:	4926      	ldr	r1, [pc, #152]	; (9000d9f4 <ip4_reass+0x32c>)
9000d95a:	4824      	ldr	r0, [pc, #144]	; (9000d9ec <ip4_reass+0x324>)
9000d95c:	f01b fdb8 	bl	900294d0 <iprintf>
      if (iprh_prev->end != iprh->start) {
9000d960:	88ea      	ldrh	r2, [r5, #6]
      iprh_prev->next_pbuf = new_p;
9000d962:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
9000d966:	88b3      	ldrh	r3, [r6, #4]
9000d968:	429a      	cmp	r2, r3
9000d96a:	e77e      	b.n	9000d86a <ip4_reass+0x1a2>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
9000d96c:	6863      	ldr	r3, [r4, #4]
9000d96e:	2b00      	cmp	r3, #0
9000d970:	d088      	beq.n	9000d884 <ip4_reass+0x1bc>
9000d972:	6859      	ldr	r1, [r3, #4]
9000d974:	888b      	ldrh	r3, [r1, #4]
9000d976:	2b00      	cmp	r3, #0
9000d978:	d184      	bne.n	9000d884 <ip4_reass+0x1bc>
        q = iprh->next_pbuf;
9000d97a:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
9000d97c:	b9a3      	cbnz	r3, 9000d9a8 <ip4_reass+0x2e0>
          LWIP_ASSERT("sanity check",
9000d97e:	42b1      	cmp	r1, r6
9000d980:	d106      	bne.n	9000d990 <ip4_reass+0x2c8>
9000d982:	4b18      	ldr	r3, [pc, #96]	; (9000d9e4 <ip4_reass+0x31c>)
9000d984:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
9000d988:	491b      	ldr	r1, [pc, #108]	; (9000d9f8 <ip4_reass+0x330>)
9000d98a:	4818      	ldr	r0, [pc, #96]	; (9000d9ec <ip4_reass+0x324>)
9000d98c:	f01b fda0 	bl	900294d0 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
9000d990:	6833      	ldr	r3, [r6, #0]
9000d992:	2b00      	cmp	r3, #0
9000d994:	f43f af78 	beq.w	9000d888 <ip4_reass+0x1c0>
9000d998:	4b12      	ldr	r3, [pc, #72]	; (9000d9e4 <ip4_reass+0x31c>)
9000d99a:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
9000d99e:	4917      	ldr	r1, [pc, #92]	; (9000d9fc <ip4_reass+0x334>)
9000d9a0:	4812      	ldr	r0, [pc, #72]	; (9000d9ec <ip4_reass+0x324>)
9000d9a2:	f01b fd95 	bl	900294d0 <iprintf>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
9000d9a6:	e76f      	b.n	9000d888 <ip4_reass+0x1c0>
          iprh = (struct ip_reass_helper *)q->payload;
9000d9a8:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
9000d9aa:	88f0      	ldrh	r0, [r6, #6]
9000d9ac:	8893      	ldrh	r3, [r2, #4]
9000d9ae:	4298      	cmp	r0, r3
9000d9b0:	f47f af68 	bne.w	9000d884 <ip4_reass+0x1bc>
          q = iprh->next_pbuf;
9000d9b4:	6813      	ldr	r3, [r2, #0]
9000d9b6:	4616      	mov	r6, r2
9000d9b8:	e7e0      	b.n	9000d97c <ip4_reass+0x2b4>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
9000d9ba:	469a      	mov	sl, r3
9000d9bc:	e764      	b.n	9000d888 <ip4_reass+0x1c0>
      iprh = (struct ip_reass_helper *)r->payload;
9000d9be:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_remove_header(r, IP_HLEN);
9000d9c2:	2114      	movs	r1, #20
9000d9c4:	4638      	mov	r0, r7
9000d9c6:	f000 fef1 	bl	9000e7ac <pbuf_remove_header>
      pbuf_cat(p, r);
9000d9ca:	4639      	mov	r1, r7
9000d9cc:	4628      	mov	r0, r5
9000d9ce:	f001 f8af 	bl	9000eb30 <pbuf_cat>
      r = iprh->next_pbuf;
9000d9d2:	f8d8 7000 	ldr.w	r7, [r8]
9000d9d6:	e783      	b.n	9000d8e0 <ip4_reass+0x218>
        if (ipr_prev->next == ipr) {
9000d9d8:	683b      	ldr	r3, [r7, #0]
9000d9da:	e785      	b.n	9000d8e8 <ip4_reass+0x220>
9000d9dc:	20026be0 	.word	0x20026be0
9000d9e0:	20026be4 	.word	0x20026be4
9000d9e4:	9002c1b8 	.word	0x9002c1b8
9000d9e8:	9002c2c1 	.word	0x9002c2c1
9000d9ec:	9002a254 	.word	0x9002a254
9000d9f0:	9002c327 	.word	0x9002c327
9000d9f4:	9002c2a3 	.word	0x9002c2a3
9000d9f8:	9002c2f8 	.word	0x9002c2f8
9000d9fc:	9002c305 	.word	0x9002c305
  if (ipr->p == NULL) {
9000da00:	6863      	ldr	r3, [r4, #4]
9000da02:	2b00      	cmp	r3, #0
9000da04:	f47f af0a 	bne.w	9000d81c <ip4_reass+0x154>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
9000da08:	4b19      	ldr	r3, [pc, #100]	; (9000da70 <ip4_reass+0x3a8>)
9000da0a:	681b      	ldr	r3, [r3, #0]
9000da0c:	42a3      	cmp	r3, r4
9000da0e:	d006      	beq.n	9000da1e <ip4_reass+0x356>
9000da10:	4b18      	ldr	r3, [pc, #96]	; (9000da74 <ip4_reass+0x3ac>)
9000da12:	f240 22ab 	movw	r2, #683	; 0x2ab
9000da16:	4918      	ldr	r1, [pc, #96]	; (9000da78 <ip4_reass+0x3b0>)
9000da18:	4818      	ldr	r0, [pc, #96]	; (9000da7c <ip4_reass+0x3b4>)
9000da1a:	f01b fd59 	bl	900294d0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
9000da1e:	2100      	movs	r1, #0
9000da20:	4620      	mov	r0, r4
9000da22:	f7ff fd39 	bl	9000d498 <ip_reass_dequeue_datagram>
9000da26:	e6f9      	b.n	9000d81c <ip4_reass+0x154>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
9000da28:	88e8      	ldrh	r0, [r5, #6]
9000da2a:	f7fd fb6b 	bl	9000b104 <lwip_htons>
9000da2e:	f3c0 000c 	ubfx	r0, r0, #0, #13
9000da32:	2800      	cmp	r0, #0
9000da34:	f47f ae99 	bne.w	9000d76a <ip4_reass+0xa2>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
9000da38:	89e0      	ldrh	r0, [r4, #14]
9000da3a:	f7fd fb63 	bl	9000b104 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
9000da3e:	f3c0 000c 	ubfx	r0, r0, #0, #13
9000da42:	2800      	cmp	r0, #0
9000da44:	f43f ae91 	beq.w	9000d76a <ip4_reass+0xa2>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
9000da48:	462b      	mov	r3, r5
9000da4a:	f104 0208 	add.w	r2, r4, #8
9000da4e:	f105 0114 	add.w	r1, r5, #20
9000da52:	f853 0b04 	ldr.w	r0, [r3], #4
9000da56:	428b      	cmp	r3, r1
9000da58:	f842 0b04 	str.w	r0, [r2], #4
9000da5c:	d1f9      	bne.n	9000da52 <ip4_reass+0x38a>
9000da5e:	e684      	b.n	9000d76a <ip4_reass+0xa2>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
9000da60:	f1bb 0f00 	cmp.w	fp, #0
9000da64:	f43f af0e 	beq.w	9000d884 <ip4_reass+0x1bc>
9000da68:	f04f 0a00 	mov.w	sl, #0
9000da6c:	e702      	b.n	9000d874 <ip4_reass+0x1ac>
9000da6e:	bf00      	nop
9000da70:	20026be4 	.word	0x20026be4
9000da74:	9002c1b8 	.word	0x9002c1b8
9000da78:	9002c342 	.word	0x9002c342
9000da7c:	9002a254 	.word	0x9002a254

9000da80 <ip4_frag>:
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
9000da80:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
{
9000da82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000da86:	ed2d 8b02 	vpush	{d8}
9000da8a:	ee08 2a10 	vmov	s16, r2
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
9000da8e:	f1b3 0214 	subs.w	r2, r3, #20
{
9000da92:	b08b      	sub	sp, #44	; 0x2c
9000da94:	4605      	mov	r5, r0
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
9000da96:	bf48      	it	mi
9000da98:	f1a3 020d 	submi.w	r2, r3, #13
{
9000da9c:	468a      	mov	sl, r1
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
9000da9e:	f3c2 03cf 	ubfx	r3, r2, #3, #16
9000daa2:	9305      	str	r3, [sp, #20]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
9000daa4:	6843      	ldr	r3, [r0, #4]
9000daa6:	9302      	str	r3, [sp, #8]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
9000daa8:	781b      	ldrb	r3, [r3, #0]
9000daaa:	f003 030f 	and.w	r3, r3, #15
9000daae:	2b05      	cmp	r3, #5
9000dab0:	ea4f 0783 	mov.w	r7, r3, lsl #2
9000dab4:	d109      	bne.n	9000daca <ip4_frag+0x4a>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
9000dab6:	8943      	ldrh	r3, [r0, #10]
9000dab8:	2b13      	cmp	r3, #19
9000daba:	d809      	bhi.n	9000dad0 <ip4_frag+0x50>
9000dabc:	4b60      	ldr	r3, [pc, #384]	; (9000dc40 <ip4_frag+0x1c0>)
9000dabe:	f44f 723f 	mov.w	r2, #764	; 0x2fc
9000dac2:	4960      	ldr	r1, [pc, #384]	; (9000dc44 <ip4_frag+0x1c4>)
9000dac4:	4860      	ldr	r0, [pc, #384]	; (9000dc48 <ip4_frag+0x1c8>)
9000dac6:	f01b fd03 	bl	900294d0 <iprintf>
    return ERR_VAL;
9000daca:	f06f 0005 	mvn.w	r0, #5
9000dace:	e013      	b.n	9000daf8 <ip4_frag+0x78>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
9000dad0:	9b02      	ldr	r3, [sp, #8]
  u16_t newpbuflen = 0;
9000dad2:	2600      	movs	r6, #0
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
9000dad4:	88d8      	ldrh	r0, [r3, #6]
9000dad6:	f7fd fb15 	bl	9000b104 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
9000dada:	f3c0 030c 	ubfx	r3, r0, #0, #13
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
9000dade:	892c      	ldrh	r4, [r5, #8]
  ofo = tmp & IP_OFFMASK;
9000dae0:	9303      	str	r3, [sp, #12]
  mf_set = tmp & IP_MF;
9000dae2:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
9000dae6:	3c14      	subs	r4, #20
9000dae8:	9307      	str	r3, [sp, #28]

  while (left) {
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
9000daea:	9b05      	ldr	r3, [sp, #20]
  left = (u16_t)(p->tot_len - IP_HLEN);
9000daec:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
9000daee:	00db      	lsls	r3, r3, #3
9000daf0:	b29b      	uxth	r3, r3
9000daf2:	9306      	str	r3, [sp, #24]
  while (left) {
9000daf4:	b92c      	cbnz	r4, 9000db02 <ip4_frag+0x82>
    pbuf_free(rambuf);
    left = (u16_t)(left - fragsize);
    ofo = (u16_t)(ofo + nfb);
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
9000daf6:	4620      	mov	r0, r4
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
9000daf8:	b00b      	add	sp, #44	; 0x2c
9000dafa:	ecbd 8b02 	vpop	{d8}
9000dafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
9000db02:	9b06      	ldr	r3, [sp, #24]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
9000db04:	f44f 7220 	mov.w	r2, #640	; 0x280
9000db08:	2114      	movs	r1, #20
9000db0a:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
9000db0c:	42a3      	cmp	r3, r4
9000db0e:	bf28      	it	cs
9000db10:	4623      	movcs	r3, r4
9000db12:	9304      	str	r3, [sp, #16]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
9000db14:	f000 fee6 	bl	9000e8e4 <pbuf_alloc>
    if (rambuf == NULL) {
9000db18:	4680      	mov	r8, r0
9000db1a:	2800      	cmp	r0, #0
9000db1c:	d036      	beq.n	9000db8c <ip4_frag+0x10c>
    LWIP_ASSERT("this needs a pbuf in one piece!",
9000db1e:	8943      	ldrh	r3, [r0, #10]
9000db20:	2b13      	cmp	r3, #19
9000db22:	d806      	bhi.n	9000db32 <ip4_frag+0xb2>
9000db24:	4b46      	ldr	r3, [pc, #280]	; (9000dc40 <ip4_frag+0x1c0>)
9000db26:	f44f 7249 	mov.w	r2, #804	; 0x324
9000db2a:	4948      	ldr	r1, [pc, #288]	; (9000dc4c <ip4_frag+0x1cc>)
9000db2c:	4846      	ldr	r0, [pc, #280]	; (9000dc48 <ip4_frag+0x1c8>)
9000db2e:	f01b fccf 	bl	900294d0 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
9000db32:	9b02      	ldr	r3, [sp, #8]
9000db34:	f8d8 2004 	ldr.w	r2, [r8, #4]
9000db38:	4619      	mov	r1, r3
9000db3a:	3114      	adds	r1, #20
9000db3c:	f853 0b04 	ldr.w	r0, [r3], #4
9000db40:	428b      	cmp	r3, r1
9000db42:	f842 0b04 	str.w	r0, [r2], #4
9000db46:	d1f9      	bne.n	9000db3c <ip4_frag+0xbc>
    iphdr = (struct ip_hdr *)rambuf->payload;
9000db48:	f8d8 b004 	ldr.w	fp, [r8, #4]
    left_to_copy = fragsize;
9000db4c:	f8dd 9010 	ldr.w	r9, [sp, #16]
    while (left_to_copy) {
9000db50:	f1b9 0f00 	cmp.w	r9, #0
9000db54:	d041      	beq.n	9000dbda <ip4_frag+0x15a>
      u16_t plen = (u16_t)(p->len - poff);
9000db56:	896b      	ldrh	r3, [r5, #10]
9000db58:	1bde      	subs	r6, r3, r7
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
9000db5a:	42bb      	cmp	r3, r7
      u16_t plen = (u16_t)(p->len - poff);
9000db5c:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
9000db5e:	d206      	bcs.n	9000db6e <ip4_frag+0xee>
9000db60:	4b37      	ldr	r3, [pc, #220]	; (9000dc40 <ip4_frag+0x1c0>)
9000db62:	f240 322d 	movw	r2, #813	; 0x32d
9000db66:	493a      	ldr	r1, [pc, #232]	; (9000dc50 <ip4_frag+0x1d0>)
9000db68:	4837      	ldr	r0, [pc, #220]	; (9000dc48 <ip4_frag+0x1c8>)
9000db6a:	f01b fcb1 	bl	900294d0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
9000db6e:	454e      	cmp	r6, r9
9000db70:	bf28      	it	cs
9000db72:	464e      	movcs	r6, r9
      if (!newpbuflen) {
9000db74:	b916      	cbnz	r6, 9000db7c <ip4_frag+0xfc>
        p = p->next;
9000db76:	682d      	ldr	r5, [r5, #0]
        poff = 0;
9000db78:	2700      	movs	r7, #0
9000db7a:	e7e9      	b.n	9000db50 <ip4_frag+0xd0>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
9000db7c:	2005      	movs	r0, #5
9000db7e:	f000 fb43 	bl	9000e208 <memp_malloc>
      if (pcr == NULL) {
9000db82:	4603      	mov	r3, r0
9000db84:	b928      	cbnz	r0, 9000db92 <ip4_frag+0x112>
        pbuf_free(rambuf);
9000db86:	4640      	mov	r0, r8
9000db88:	f000 fe44 	bl	9000e814 <pbuf_free>
  return ERR_MEM;
9000db8c:	f04f 30ff 	mov.w	r0, #4294967295
9000db90:	e7b2      	b.n	9000daf8 <ip4_frag+0x78>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
9000db92:	9601      	str	r6, [sp, #4]
9000db94:	4631      	mov	r1, r6
9000db96:	686a      	ldr	r2, [r5, #4]
9000db98:	9008      	str	r0, [sp, #32]
9000db9a:	2000      	movs	r0, #0
9000db9c:	443a      	add	r2, r7
9000db9e:	9200      	str	r2, [sp, #0]
9000dba0:	2241      	movs	r2, #65	; 0x41
9000dba2:	f000 fde5 	bl	9000e770 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
9000dba6:	9b08      	ldr	r3, [sp, #32]
9000dba8:	b918      	cbnz	r0, 9000dbb2 <ip4_frag+0x132>
        ip_frag_free_pbuf_custom_ref(pcr);
9000dbaa:	4618      	mov	r0, r3
9000dbac:	f7ff fd46 	bl	9000d63c <ip_frag_free_pbuf_custom_ref>
9000dbb0:	e7e9      	b.n	9000db86 <ip4_frag+0x106>
9000dbb2:	e9cd 0308 	strd	r0, r3, [sp, #32]
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
9000dbb6:	eba9 0906 	sub.w	r9, r9, r6
      pbuf_ref(p);
9000dbba:	4628      	mov	r0, r5
9000dbbc:	f000 ff9c 	bl	9000eaf8 <pbuf_ref>
      pcr->original = p;
9000dbc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
9000dbc2:	4a24      	ldr	r2, [pc, #144]	; (9000dc54 <ip4_frag+0x1d4>)
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
9000dbc4:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
9000dbc8:	9908      	ldr	r1, [sp, #32]
9000dbca:	4640      	mov	r0, r8
      pcr->original = p;
9000dbcc:	615d      	str	r5, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
9000dbce:	611a      	str	r2, [r3, #16]
      pbuf_cat(rambuf, newpbuf);
9000dbd0:	f000 ffae 	bl	9000eb30 <pbuf_cat>
      if (left_to_copy) {
9000dbd4:	f1b9 0f00 	cmp.w	r9, #0
9000dbd8:	d1cd      	bne.n	9000db76 <ip4_frag+0xf6>
    tmp = (IP_OFFMASK & (ofo));
9000dbda:	9b03      	ldr	r3, [sp, #12]
    poff = (u16_t)(poff + newpbuflen);
9000dbdc:	4437      	add	r7, r6
    tmp = (IP_OFFMASK & (ofo));
9000dbde:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
9000dbe2:	f8ba 3028 	ldrh.w	r3, [sl, #40]	; 0x28
    poff = (u16_t)(poff + newpbuflen);
9000dbe6:	b2bf      	uxth	r7, r7
    last = (left <= netif->mtu - IP_HLEN);
9000dbe8:	3b13      	subs	r3, #19
    if (!last || mf_set) {
9000dbea:	42a3      	cmp	r3, r4
9000dbec:	dd01      	ble.n	9000dbf2 <ip4_frag+0x172>
9000dbee:	9b07      	ldr	r3, [sp, #28]
9000dbf0:	b10b      	cbz	r3, 9000dbf6 <ip4_frag+0x176>
      tmp = tmp | IP_MF;
9000dbf2:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
9000dbf6:	f7fd fa85 	bl	9000b104 <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
9000dbfa:	9b04      	ldr	r3, [sp, #16]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
9000dbfc:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
9000dc00:	f103 0014 	add.w	r0, r3, #20
9000dc04:	b280      	uxth	r0, r0
9000dc06:	f7fd fa7d 	bl	9000b104 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
9000dc0a:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
9000dc0c:	ee18 2a10 	vmov	r2, s16
9000dc10:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
9000dc12:	f8ab 0002 	strh.w	r0, [fp, #2]
    netif->output(netif, rambuf, dest);
9000dc16:	4650      	mov	r0, sl
    IPH_CHKSUM_SET(iphdr, 0);
9000dc18:	f88b 300a 	strb.w	r3, [fp, #10]
9000dc1c:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
9000dc20:	f8da 3014 	ldr.w	r3, [sl, #20]
9000dc24:	4798      	blx	r3
    pbuf_free(rambuf);
9000dc26:	4640      	mov	r0, r8
9000dc28:	f000 fdf4 	bl	9000e814 <pbuf_free>
    left = (u16_t)(left - fragsize);
9000dc2c:	9b04      	ldr	r3, [sp, #16]
    ofo = (u16_t)(ofo + nfb);
9000dc2e:	9a05      	ldr	r2, [sp, #20]
    left = (u16_t)(left - fragsize);
9000dc30:	1ae4      	subs	r4, r4, r3
    ofo = (u16_t)(ofo + nfb);
9000dc32:	9b03      	ldr	r3, [sp, #12]
9000dc34:	4413      	add	r3, r2
    left = (u16_t)(left - fragsize);
9000dc36:	b2a4      	uxth	r4, r4
    ofo = (u16_t)(ofo + nfb);
9000dc38:	b29b      	uxth	r3, r3
9000dc3a:	9303      	str	r3, [sp, #12]
9000dc3c:	e75a      	b.n	9000daf4 <ip4_frag+0x74>
9000dc3e:	bf00      	nop
9000dc40:	9002c1b8 	.word	0x9002c1b8
9000dc44:	9002c362 	.word	0x9002c362
9000dc48:	9002a254 	.word	0x9002a254
9000dc4c:	9002c37d 	.word	0x9002c37d
9000dc50:	9002c39d 	.word	0x9002c39d
9000dc54:	9000d669 	.word	0x9000d669

9000dc58 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
9000dc58:	4b10      	ldr	r3, [pc, #64]	; (9000dc9c <mem_init+0x44>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
  mem->used = 0;
9000dc5a:	2100      	movs	r1, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
9000dc5c:	4a10      	ldr	r2, [pc, #64]	; (9000dca0 <mem_init+0x48>)
9000dc5e:	f023 0303 	bic.w	r3, r3, #3
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
9000dc62:	4810      	ldr	r0, [pc, #64]	; (9000dca4 <mem_init+0x4c>)
{
9000dc64:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
9000dc66:	6013      	str	r3, [r2, #0]
  mem->next = MEM_SIZE_ALIGNED;
9000dc68:	f242 7210 	movw	r2, #10000	; 0x2710
  mem->used = 0;
9000dc6c:	7119      	strb	r1, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
9000dc6e:	1899      	adds	r1, r3, r2
  mem->next = MEM_SIZE_ALIGNED;
9000dc70:	601a      	str	r2, [r3, #0]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
9000dc72:	6001      	str	r1, [r0, #0]
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
9000dc74:	480c      	ldr	r0, [pc, #48]	; (9000dca8 <mem_init+0x50>)
9000dc76:	5098      	str	r0, [r3, r2]
  ram_end->used = 1;
9000dc78:	2201      	movs	r2, #1
  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
9000dc7a:	480c      	ldr	r0, [pc, #48]	; (9000dcac <mem_init+0x54>)
  ram_end->used = 1;
9000dc7c:	710a      	strb	r2, [r1, #4]
  lfree = (struct mem *)(void *)ram;
9000dc7e:	4a0c      	ldr	r2, [pc, #48]	; (9000dcb0 <mem_init+0x58>)
9000dc80:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
9000dc82:	f001 fec9 	bl	9000fa18 <sys_mutex_new>
9000dc86:	b140      	cbz	r0, 9000dc9a <mem_init+0x42>
    LWIP_ASSERT("failed to create mem_mutex", 0);
9000dc88:	4b0a      	ldr	r3, [pc, #40]	; (9000dcb4 <mem_init+0x5c>)
9000dc8a:	f240 221f 	movw	r2, #543	; 0x21f
9000dc8e:	490a      	ldr	r1, [pc, #40]	; (9000dcb8 <mem_init+0x60>)
9000dc90:	480a      	ldr	r0, [pc, #40]	; (9000dcbc <mem_init+0x64>)
  }
}
9000dc92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
9000dc96:	f01b bc1b 	b.w	900294d0 <iprintf>
}
9000dc9a:	bd10      	pop	{r4, pc}
9000dc9c:	20027373 	.word	0x20027373
9000dca0:	20026bf0 	.word	0x20026bf0
9000dca4:	20026bf4 	.word	0x20026bf4
9000dca8:	27102710 	.word	0x27102710
9000dcac:	20026bec 	.word	0x20026bec
9000dcb0:	20026be8 	.word	0x20026be8
9000dcb4:	9002c3ac 	.word	0x9002c3ac
9000dcb8:	9002c40b 	.word	0x9002c40b
9000dcbc:	9002a254 	.word	0x9002a254

9000dcc0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
9000dcc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
9000dcc4:	4604      	mov	r4, r0
9000dcc6:	2800      	cmp	r0, #0
9000dcc8:	f000 80b9 	beq.w	9000de3e <mem_free+0x17e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
9000dccc:	0783      	lsls	r3, r0, #30
9000dcce:	d00c      	beq.n	9000dcea <mem_free+0x2a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
9000dcd0:	4b5c      	ldr	r3, [pc, #368]	; (9000de44 <mem_free+0x184>)
9000dcd2:	f240 2273 	movw	r2, #627	; 0x273
9000dcd6:	495c      	ldr	r1, [pc, #368]	; (9000de48 <mem_free+0x188>)
  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
9000dcd8:	485c      	ldr	r0, [pc, #368]	; (9000de4c <mem_free+0x18c>)
9000dcda:	f01b fbf9 	bl	900294d0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
9000dcde:	f001 fec5 	bl	9000fa6c <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
9000dce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
9000dce6:	f001 becd 	b.w	9000fa84 <sys_arch_unprotect>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
9000dcea:	4b59      	ldr	r3, [pc, #356]	; (9000de50 <mem_free+0x190>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
9000dcec:	f1a0 0508 	sub.w	r5, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
9000dcf0:	681a      	ldr	r2, [r3, #0]
9000dcf2:	4698      	mov	r8, r3
9000dcf4:	42aa      	cmp	r2, r5
9000dcf6:	d805      	bhi.n	9000dd04 <mem_free+0x44>
9000dcf8:	4f56      	ldr	r7, [pc, #344]	; (9000de54 <mem_free+0x194>)
9000dcfa:	f100 030c 	add.w	r3, r0, #12
9000dcfe:	683a      	ldr	r2, [r7, #0]
9000dd00:	429a      	cmp	r2, r3
9000dd02:	d204      	bcs.n	9000dd0e <mem_free+0x4e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
9000dd04:	4b4f      	ldr	r3, [pc, #316]	; (9000de44 <mem_free+0x184>)
9000dd06:	f240 227f 	movw	r2, #639	; 0x27f
9000dd0a:	4953      	ldr	r1, [pc, #332]	; (9000de58 <mem_free+0x198>)
9000dd0c:	e7e4      	b.n	9000dcd8 <mem_free+0x18>
  LWIP_MEM_FREE_PROTECT();
9000dd0e:	4853      	ldr	r0, [pc, #332]	; (9000de5c <mem_free+0x19c>)
9000dd10:	f001 fe8d 	bl	9000fa2e <sys_mutex_lock>
  if (!mem->used) {
9000dd14:	f814 3c04 	ldrb.w	r3, [r4, #-4]
9000dd18:	b953      	cbnz	r3, 9000dd30 <mem_free+0x70>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
9000dd1a:	4b4a      	ldr	r3, [pc, #296]	; (9000de44 <mem_free+0x184>)
9000dd1c:	f44f 7223 	mov.w	r2, #652	; 0x28c
9000dd20:	494f      	ldr	r1, [pc, #316]	; (9000de60 <mem_free+0x1a0>)
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
9000dd22:	484a      	ldr	r0, [pc, #296]	; (9000de4c <mem_free+0x18c>)
9000dd24:	f01b fbd4 	bl	900294d0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
9000dd28:	484c      	ldr	r0, [pc, #304]	; (9000de5c <mem_free+0x19c>)
9000dd2a:	f001 fe85 	bl	9000fa38 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
9000dd2e:	e7d6      	b.n	9000dcde <mem_free+0x1e>
  nmem = ptr_to_mem(mem->next);
9000dd30:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
9000dd34:	f242 7310 	movw	r3, #10000	; 0x2710
9000dd38:	429a      	cmp	r2, r3
9000dd3a:	d813      	bhi.n	9000dd64 <mem_free+0xa4>
  pmem = ptr_to_mem(mem->prev);
9000dd3c:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
9000dd40:	4298      	cmp	r0, r3
9000dd42:	d80f      	bhi.n	9000dd64 <mem_free+0xa4>
  return (mem_size_t)((u8_t *)mem - ram);
9000dd44:	f8d8 1000 	ldr.w	r1, [r8]
9000dd48:	1a6b      	subs	r3, r5, r1
9000dd4a:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
9000dd4c:	4283      	cmp	r3, r0
9000dd4e:	d002      	beq.n	9000dd56 <mem_free+0x96>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
9000dd50:	5a08      	ldrh	r0, [r1, r0]
9000dd52:	4298      	cmp	r0, r3
9000dd54:	d106      	bne.n	9000dd64 <mem_free+0xa4>
  return (struct mem *)(void *)&ram[ptr];
9000dd56:	440a      	add	r2, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
9000dd58:	6838      	ldr	r0, [r7, #0]
9000dd5a:	4282      	cmp	r2, r0
9000dd5c:	d007      	beq.n	9000dd6e <mem_free+0xae>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
9000dd5e:	8852      	ldrh	r2, [r2, #2]
9000dd60:	429a      	cmp	r2, r3
9000dd62:	d004      	beq.n	9000dd6e <mem_free+0xae>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
9000dd64:	4b37      	ldr	r3, [pc, #220]	; (9000de44 <mem_free+0x184>)
9000dd66:	f240 2295 	movw	r2, #661	; 0x295
9000dd6a:	493e      	ldr	r1, [pc, #248]	; (9000de64 <mem_free+0x1a4>)
9000dd6c:	e7d9      	b.n	9000dd22 <mem_free+0x62>
  mem->used = 0;
9000dd6e:	2300      	movs	r3, #0
  if (mem < lfree) {
9000dd70:	4e3d      	ldr	r6, [pc, #244]	; (9000de68 <mem_free+0x1a8>)
  mem->used = 0;
9000dd72:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
9000dd76:	6833      	ldr	r3, [r6, #0]
9000dd78:	42ab      	cmp	r3, r5
    lfree = mem;
9000dd7a:	bf88      	it	hi
9000dd7c:	6035      	strhi	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
9000dd7e:	428d      	cmp	r5, r1
9000dd80:	d206      	bcs.n	9000dd90 <mem_free+0xd0>
9000dd82:	4b30      	ldr	r3, [pc, #192]	; (9000de44 <mem_free+0x184>)
9000dd84:	f240 12df 	movw	r2, #479	; 0x1df
9000dd88:	4938      	ldr	r1, [pc, #224]	; (9000de6c <mem_free+0x1ac>)
9000dd8a:	4830      	ldr	r0, [pc, #192]	; (9000de4c <mem_free+0x18c>)
9000dd8c:	f01b fba0 	bl	900294d0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
9000dd90:	683b      	ldr	r3, [r7, #0]
9000dd92:	429d      	cmp	r5, r3
9000dd94:	d306      	bcc.n	9000dda4 <mem_free+0xe4>
9000dd96:	4b2b      	ldr	r3, [pc, #172]	; (9000de44 <mem_free+0x184>)
9000dd98:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
9000dd9c:	4934      	ldr	r1, [pc, #208]	; (9000de70 <mem_free+0x1b0>)
9000dd9e:	482b      	ldr	r0, [pc, #172]	; (9000de4c <mem_free+0x18c>)
9000dda0:	f01b fb96 	bl	900294d0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
9000dda4:	f814 3c04 	ldrb.w	r3, [r4, #-4]
9000dda8:	b133      	cbz	r3, 9000ddb8 <mem_free+0xf8>
9000ddaa:	4b26      	ldr	r3, [pc, #152]	; (9000de44 <mem_free+0x184>)
9000ddac:	f240 12e1 	movw	r2, #481	; 0x1e1
9000ddb0:	4930      	ldr	r1, [pc, #192]	; (9000de74 <mem_free+0x1b4>)
9000ddb2:	4826      	ldr	r0, [pc, #152]	; (9000de4c <mem_free+0x18c>)
9000ddb4:	f01b fb8c 	bl	900294d0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
9000ddb8:	f834 2c08 	ldrh.w	r2, [r4, #-8]
9000ddbc:	f242 7310 	movw	r3, #10000	; 0x2710
9000ddc0:	429a      	cmp	r2, r3
9000ddc2:	d906      	bls.n	9000ddd2 <mem_free+0x112>
9000ddc4:	4b1f      	ldr	r3, [pc, #124]	; (9000de44 <mem_free+0x184>)
9000ddc6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
9000ddca:	492b      	ldr	r1, [pc, #172]	; (9000de78 <mem_free+0x1b8>)
9000ddcc:	481f      	ldr	r0, [pc, #124]	; (9000de4c <mem_free+0x18c>)
9000ddce:	f01b fb7f 	bl	900294d0 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
9000ddd2:	f8d8 3000 	ldr.w	r3, [r8]
9000ddd6:	f834 1c08 	ldrh.w	r1, [r4, #-8]
9000ddda:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
9000dddc:	4295      	cmp	r5, r2
9000ddde:	d013      	beq.n	9000de08 <mem_free+0x148>
9000dde0:	7910      	ldrb	r0, [r2, #4]
9000dde2:	b988      	cbnz	r0, 9000de08 <mem_free+0x148>
9000dde4:	6838      	ldr	r0, [r7, #0]
9000dde6:	4282      	cmp	r2, r0
9000dde8:	d00e      	beq.n	9000de08 <mem_free+0x148>
    if (lfree == nmem) {
9000ddea:	6830      	ldr	r0, [r6, #0]
9000ddec:	4282      	cmp	r2, r0
    mem->next = nmem->next;
9000ddee:	5a5a      	ldrh	r2, [r3, r1]
9000ddf0:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
9000ddf4:	5a5a      	ldrh	r2, [r3, r1]
9000ddf6:	f242 7110 	movw	r1, #10000	; 0x2710
      lfree = mem;
9000ddfa:	bf08      	it	eq
9000ddfc:	6035      	streq	r5, [r6, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
9000ddfe:	428a      	cmp	r2, r1
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
9000de00:	bf1e      	ittt	ne
9000de02:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
9000de04:	1ae9      	subne	r1, r5, r3
9000de06:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
9000de08:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
9000de0c:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
9000de0e:	428d      	cmp	r5, r1
9000de10:	d010      	beq.n	9000de34 <mem_free+0x174>
9000de12:	7908      	ldrb	r0, [r1, #4]
9000de14:	b970      	cbnz	r0, 9000de34 <mem_free+0x174>
    if (lfree == mem) {
9000de16:	6830      	ldr	r0, [r6, #0]
9000de18:	4285      	cmp	r5, r0
    if (mem->next != MEM_SIZE_ALIGNED) {
9000de1a:	f242 7010 	movw	r0, #10000	; 0x2710
      lfree = pmem;
9000de1e:	bf08      	it	eq
9000de20:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
9000de22:	f834 1c08 	ldrh.w	r1, [r4, #-8]
9000de26:	5299      	strh	r1, [r3, r2]
    if (mem->next != MEM_SIZE_ALIGNED) {
9000de28:	f834 1c08 	ldrh.w	r1, [r4, #-8]
9000de2c:	4281      	cmp	r1, r0
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
9000de2e:	bf1c      	itt	ne
9000de30:	185b      	addne	r3, r3, r1
9000de32:	805a      	strhne	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
9000de34:	4809      	ldr	r0, [pc, #36]	; (9000de5c <mem_free+0x19c>)
}
9000de36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
9000de3a:	f001 bdfd 	b.w	9000fa38 <sys_mutex_unlock>
}
9000de3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000de42:	bf00      	nop
9000de44:	9002c3ac 	.word	0x9002c3ac
9000de48:	9002c426 	.word	0x9002c426
9000de4c:	9002a254 	.word	0x9002a254
9000de50:	20026bf0 	.word	0x20026bf0
9000de54:	20026bf4 	.word	0x20026bf4
9000de58:	9002c447 	.word	0x9002c447
9000de5c:	20026bec 	.word	0x20026bec
9000de60:	9002c460 	.word	0x9002c460
9000de64:	9002c486 	.word	0x9002c486
9000de68:	20026be8 	.word	0x20026be8
9000de6c:	9002c4b8 	.word	0x9002c4b8
9000de70:	9002c4cf 	.word	0x9002c4cf
9000de74:	9002c4e9 	.word	0x9002c4e9
9000de78:	9002c504 	.word	0x9002c504

9000de7c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
9000de7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
9000de80:	1ccc      	adds	r4, r1, #3
{
9000de82:	4605      	mov	r5, r0
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
9000de84:	f024 0403 	bic.w	r4, r4, #3
9000de88:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
9000de8a:	2c0b      	cmp	r4, #11
9000de8c:	d905      	bls.n	9000de9a <mem_trim+0x1e>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
9000de8e:	f242 7310 	movw	r3, #10000	; 0x2710
9000de92:	429c      	cmp	r4, r3
9000de94:	d902      	bls.n	9000de9c <mem_trim+0x20>
    return NULL;
9000de96:	2500      	movs	r5, #0
9000de98:	e01e      	b.n	9000ded8 <mem_trim+0x5c>
    newsize = MIN_SIZE_ALIGNED;
9000de9a:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
9000de9c:	42a1      	cmp	r1, r4
9000de9e:	d8fa      	bhi.n	9000de96 <mem_trim+0x1a>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
9000dea0:	4b4a      	ldr	r3, [pc, #296]	; (9000dfcc <mem_trim+0x150>)
9000dea2:	681a      	ldr	r2, [r3, #0]
9000dea4:	4698      	mov	r8, r3
9000dea6:	42aa      	cmp	r2, r5
9000dea8:	d803      	bhi.n	9000deb2 <mem_trim+0x36>
9000deaa:	4b49      	ldr	r3, [pc, #292]	; (9000dfd0 <mem_trim+0x154>)
9000deac:	681b      	ldr	r3, [r3, #0]
9000deae:	42ab      	cmp	r3, r5
9000deb0:	d806      	bhi.n	9000dec0 <mem_trim+0x44>
9000deb2:	4b48      	ldr	r3, [pc, #288]	; (9000dfd4 <mem_trim+0x158>)
9000deb4:	f240 22d1 	movw	r2, #721	; 0x2d1
9000deb8:	4947      	ldr	r1, [pc, #284]	; (9000dfd8 <mem_trim+0x15c>)
9000deba:	4848      	ldr	r0, [pc, #288]	; (9000dfdc <mem_trim+0x160>)
9000debc:	f01b fb08 	bl	900294d0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
9000dec0:	f8d8 3000 	ldr.w	r3, [r8]
9000dec4:	42ab      	cmp	r3, r5
9000dec6:	d803      	bhi.n	9000ded0 <mem_trim+0x54>
9000dec8:	4a41      	ldr	r2, [pc, #260]	; (9000dfd0 <mem_trim+0x154>)
9000deca:	6812      	ldr	r2, [r2, #0]
9000decc:	42aa      	cmp	r2, r5
9000dece:	d806      	bhi.n	9000dede <mem_trim+0x62>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
9000ded0:	f001 fdcc 	bl	9000fa6c <sys_arch_protect>
9000ded4:	f001 fdd6 	bl	9000fa84 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
9000ded8:	4628      	mov	r0, r5
9000deda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
9000dede:	f1a5 0608 	sub.w	r6, r5, #8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
9000dee2:	f835 7c08 	ldrh.w	r7, [r5, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
9000dee6:	1af6      	subs	r6, r6, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
9000dee8:	3f08      	subs	r7, #8
  return (mem_size_t)((u8_t *)mem - ram);
9000deea:	b2b6      	uxth	r6, r6
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
9000deec:	1bbf      	subs	r7, r7, r6
9000deee:	b2bf      	uxth	r7, r7
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
9000def0:	42a7      	cmp	r7, r4
9000def2:	d207      	bcs.n	9000df04 <mem_trim+0x88>
9000def4:	4b37      	ldr	r3, [pc, #220]	; (9000dfd4 <mem_trim+0x158>)
9000def6:	f44f 7239 	mov.w	r2, #740	; 0x2e4
9000defa:	4939      	ldr	r1, [pc, #228]	; (9000dfe0 <mem_trim+0x164>)
9000defc:	4837      	ldr	r0, [pc, #220]	; (9000dfdc <mem_trim+0x160>)
9000defe:	f01b fae7 	bl	900294d0 <iprintf>
  if (newsize > size) {
9000df02:	e7c8      	b.n	9000de96 <mem_trim+0x1a>
  if (newsize == size) {
9000df04:	d0e8      	beq.n	9000ded8 <mem_trim+0x5c>
  LWIP_MEM_FREE_PROTECT();
9000df06:	4837      	ldr	r0, [pc, #220]	; (9000dfe4 <mem_trim+0x168>)
9000df08:	f001 fd91 	bl	9000fa2e <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
9000df0c:	f835 9c08 	ldrh.w	r9, [r5, #-8]
  return (struct mem *)(void *)&ram[ptr];
9000df10:	f8d8 b000 	ldr.w	fp, [r8]
9000df14:	eb0b 0a09 	add.w	sl, fp, r9
  if (mem2->used == 0) {
9000df18:	f89a 3004 	ldrb.w	r3, [sl, #4]
9000df1c:	bb53      	cbnz	r3, 9000df74 <mem_trim+0xf8>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
9000df1e:	f242 7310 	movw	r3, #10000	; 0x2710
9000df22:	4599      	cmp	r9, r3
9000df24:	d106      	bne.n	9000df34 <mem_trim+0xb8>
9000df26:	4b2b      	ldr	r3, [pc, #172]	; (9000dfd4 <mem_trim+0x158>)
9000df28:	f240 22f5 	movw	r2, #757	; 0x2f5
9000df2c:	492e      	ldr	r1, [pc, #184]	; (9000dfe8 <mem_trim+0x16c>)
9000df2e:	482b      	ldr	r0, [pc, #172]	; (9000dfdc <mem_trim+0x160>)
9000df30:	f01b face 	bl	900294d0 <iprintf>
    if (lfree == mem2) {
9000df34:	492d      	ldr	r1, [pc, #180]	; (9000dfec <mem_trim+0x170>)
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
9000df36:	f106 0308 	add.w	r3, r6, #8
    next = mem2->next;
9000df3a:	f83b 7009 	ldrh.w	r7, [fp, r9]
    if (lfree == mem2) {
9000df3e:	6808      	ldr	r0, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
9000df40:	441c      	add	r4, r3
9000df42:	f8d8 3000 	ldr.w	r3, [r8]
9000df46:	b2a2      	uxth	r2, r4
    if (lfree == mem2) {
9000df48:	4550      	cmp	r0, sl
  return (struct mem *)(void *)&ram[ptr];
9000df4a:	fa13 f484 	uxtah	r4, r3, r4
    if (mem2->next != MEM_SIZE_ALIGNED) {
9000df4e:	f242 7010 	movw	r0, #10000	; 0x2710
      lfree = ptr_to_mem(ptr2);
9000df52:	bf08      	it	eq
9000df54:	600c      	streq	r4, [r1, #0]
    mem2->used = 0;
9000df56:	2100      	movs	r1, #0
9000df58:	7121      	strb	r1, [r4, #4]
    mem2->next = next;
9000df5a:	529f      	strh	r7, [r3, r2]
    mem2->prev = ptr;
9000df5c:	8066      	strh	r6, [r4, #2]
    mem->next = ptr2;
9000df5e:	f825 2c08 	strh.w	r2, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
9000df62:	5a99      	ldrh	r1, [r3, r2]
9000df64:	4281      	cmp	r1, r0
9000df66:	d001      	beq.n	9000df6c <mem_trim+0xf0>
      ptr_to_mem(mem2->next)->prev = ptr2;
9000df68:	440b      	add	r3, r1
9000df6a:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
9000df6c:	481d      	ldr	r0, [pc, #116]	; (9000dfe4 <mem_trim+0x168>)
9000df6e:	f001 fd63 	bl	9000fa38 <sys_mutex_unlock>
  return rmem;
9000df72:	e7b1      	b.n	9000ded8 <mem_trim+0x5c>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
9000df74:	f104 0314 	add.w	r3, r4, #20
9000df78:	42bb      	cmp	r3, r7
9000df7a:	d8f7      	bhi.n	9000df6c <mem_trim+0xf0>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
9000df7c:	f106 0308 	add.w	r3, r6, #8
9000df80:	441c      	add	r4, r3
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
9000df82:	f242 7310 	movw	r3, #10000	; 0x2710
9000df86:	4599      	cmp	r9, r3
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
9000df88:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
9000df8a:	d106      	bne.n	9000df9a <mem_trim+0x11e>
9000df8c:	4b11      	ldr	r3, [pc, #68]	; (9000dfd4 <mem_trim+0x158>)
9000df8e:	f240 3216 	movw	r2, #790	; 0x316
9000df92:	4915      	ldr	r1, [pc, #84]	; (9000dfe8 <mem_trim+0x16c>)
9000df94:	4811      	ldr	r0, [pc, #68]	; (9000dfdc <mem_trim+0x160>)
9000df96:	f01b fa9b 	bl	900294d0 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
9000df9a:	f8d8 3000 	ldr.w	r3, [r8]
    if (mem2 < lfree) {
9000df9e:	4913      	ldr	r1, [pc, #76]	; (9000dfec <mem_trim+0x170>)
  return (struct mem *)(void *)&ram[ptr];
9000dfa0:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
9000dfa2:	6808      	ldr	r0, [r1, #0]
9000dfa4:	4290      	cmp	r0, r2
      lfree = mem2;
9000dfa6:	bf88      	it	hi
9000dfa8:	600a      	strhi	r2, [r1, #0]
    mem2->used = 0;
9000dfaa:	2100      	movs	r1, #0
9000dfac:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
9000dfae:	f835 1c08 	ldrh.w	r1, [r5, #-8]
9000dfb2:	5319      	strh	r1, [r3, r4]
    if (mem2->next != MEM_SIZE_ALIGNED) {
9000dfb4:	f242 7110 	movw	r1, #10000	; 0x2710
    mem2->prev = ptr;
9000dfb8:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
9000dfba:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
9000dfbe:	5b1a      	ldrh	r2, [r3, r4]
9000dfc0:	428a      	cmp	r2, r1
      ptr_to_mem(mem2->next)->prev = ptr2;
9000dfc2:	bf1c      	itt	ne
9000dfc4:	189b      	addne	r3, r3, r2
9000dfc6:	805c      	strhne	r4, [r3, #2]
9000dfc8:	e7d0      	b.n	9000df6c <mem_trim+0xf0>
9000dfca:	bf00      	nop
9000dfcc:	20026bf0 	.word	0x20026bf0
9000dfd0:	20026bf4 	.word	0x20026bf4
9000dfd4:	9002c3ac 	.word	0x9002c3ac
9000dfd8:	9002c52e 	.word	0x9002c52e
9000dfdc:	9002a254 	.word	0x9002a254
9000dfe0:	9002c545 	.word	0x9002c545
9000dfe4:	20026bec 	.word	0x20026bec
9000dfe8:	9002c565 	.word	0x9002c565
9000dfec:	20026be8 	.word	0x20026be8

9000dff0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
9000dff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
9000dff4:	2800      	cmp	r0, #0
9000dff6:	f000 808b 	beq.w	9000e110 <mem_malloc+0x120>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
9000dffa:	1cc5      	adds	r5, r0, #3
9000dffc:	f025 0503 	bic.w	r5, r5, #3
9000e000:	b2ad      	uxth	r5, r5
  if (size < MIN_SIZE_ALIGNED) {
9000e002:	2d0b      	cmp	r5, #11
9000e004:	d905      	bls.n	9000e012 <mem_malloc+0x22>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
9000e006:	f242 7310 	movw	r3, #10000	; 0x2710
9000e00a:	429d      	cmp	r5, r3
9000e00c:	d902      	bls.n	9000e014 <mem_malloc+0x24>
    return NULL;
9000e00e:	2000      	movs	r0, #0
9000e010:	e07e      	b.n	9000e110 <mem_malloc+0x120>
    size = MIN_SIZE_ALIGNED;
9000e012:	250c      	movs	r5, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
9000e014:	42a8      	cmp	r0, r5
9000e016:	d8fa      	bhi.n	9000e00e <mem_malloc+0x1e>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
9000e018:	4842      	ldr	r0, [pc, #264]	; (9000e124 <mem_malloc+0x134>)
9000e01a:	f001 fd08 	bl	9000fa2e <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
9000e01e:	4942      	ldr	r1, [pc, #264]	; (9000e128 <mem_malloc+0x138>)
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
9000e020:	4b42      	ldr	r3, [pc, #264]	; (9000e12c <mem_malloc+0x13c>)
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
9000e022:	f06f 0c07 	mvn.w	ip, #7
  return (mem_size_t)((u8_t *)mem - ram);
9000e026:	680a      	ldr	r2, [r1, #0]
9000e028:	4689      	mov	r9, r1
9000e02a:	681e      	ldr	r6, [r3, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
9000e02c:	f242 7110 	movw	r1, #10000	; 0x2710
9000e030:	4698      	mov	r8, r3
  return (mem_size_t)((u8_t *)mem - ram);
9000e032:	1ab6      	subs	r6, r6, r2
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
9000e034:	1b4f      	subs	r7, r1, r5
  return (mem_size_t)((u8_t *)mem - ram);
9000e036:	b2b6      	uxth	r6, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
9000e038:	42be      	cmp	r6, r7
9000e03a:	d303      	bcc.n	9000e044 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
9000e03c:	4839      	ldr	r0, [pc, #228]	; (9000e124 <mem_malloc+0x134>)
9000e03e:	f001 fcfb 	bl	9000fa38 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
9000e042:	e7e4      	b.n	9000e00e <mem_malloc+0x1e>
  return (struct mem *)(void *)&ram[ptr];
9000e044:	1994      	adds	r4, r2, r6
      if ((!mem->used) &&
9000e046:	5b90      	ldrh	r0, [r2, r6]
9000e048:	7923      	ldrb	r3, [r4, #4]
9000e04a:	2b00      	cmp	r3, #0
9000e04c:	d168      	bne.n	9000e120 <mem_malloc+0x130>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
9000e04e:	ebac 0306 	sub.w	r3, ip, r6
9000e052:	4403      	add	r3, r0
      if ((!mem->used) &&
9000e054:	42ab      	cmp	r3, r5
9000e056:	d363      	bcc.n	9000e120 <mem_malloc+0x130>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
9000e058:	f105 0214 	add.w	r2, r5, #20
9000e05c:	4293      	cmp	r3, r2
9000e05e:	d359      	bcc.n	9000e114 <mem_malloc+0x124>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
9000e060:	f105 0708 	add.w	r7, r5, #8
9000e064:	4437      	add	r7, r6
9000e066:	b2bf      	uxth	r7, r7
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
9000e068:	428f      	cmp	r7, r1
9000e06a:	d106      	bne.n	9000e07a <mem_malloc+0x8a>
9000e06c:	4b30      	ldr	r3, [pc, #192]	; (9000e130 <mem_malloc+0x140>)
9000e06e:	f240 3287 	movw	r2, #903	; 0x387
9000e072:	4930      	ldr	r1, [pc, #192]	; (9000e134 <mem_malloc+0x144>)
9000e074:	4830      	ldr	r0, [pc, #192]	; (9000e138 <mem_malloc+0x148>)
9000e076:	f01b fa2b 	bl	900294d0 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
9000e07a:	f8d9 3000 	ldr.w	r3, [r9]
          mem2->used = 0;
9000e07e:	2100      	movs	r1, #0
  return (struct mem *)(void *)&ram[ptr];
9000e080:	19da      	adds	r2, r3, r7
          mem2->used = 0;
9000e082:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
9000e084:	8821      	ldrh	r1, [r4, #0]
9000e086:	53d9      	strh	r1, [r3, r7]
          if (mem2->next != MEM_SIZE_ALIGNED) {
9000e088:	f242 7110 	movw	r1, #10000	; 0x2710
          mem2->prev = ptr;
9000e08c:	8056      	strh	r6, [r2, #2]
          mem->used = 1;
9000e08e:	2201      	movs	r2, #1
          mem->next = ptr2;
9000e090:	8027      	strh	r7, [r4, #0]
          mem->used = 1;
9000e092:	7122      	strb	r2, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
9000e094:	5bda      	ldrh	r2, [r3, r7]
9000e096:	428a      	cmp	r2, r1
9000e098:	d001      	beq.n	9000e09e <mem_malloc+0xae>
            ptr_to_mem(mem2->next)->prev = ptr2;
9000e09a:	4413      	add	r3, r2
9000e09c:	805f      	strh	r7, [r3, #2]
        if (mem == lfree) {
9000e09e:	f8d8 3000 	ldr.w	r3, [r8]
9000e0a2:	4e26      	ldr	r6, [pc, #152]	; (9000e13c <mem_malloc+0x14c>)
9000e0a4:	42a3      	cmp	r3, r4
9000e0a6:	d112      	bne.n	9000e0ce <mem_malloc+0xde>
          while (cur->used && cur != ram_end) {
9000e0a8:	6831      	ldr	r1, [r6, #0]
  return (struct mem *)(void *)&ram[ptr];
9000e0aa:	f8d9 0000 	ldr.w	r0, [r9]
          while (cur->used && cur != ram_end) {
9000e0ae:	791a      	ldrb	r2, [r3, #4]
9000e0b0:	b10a      	cbz	r2, 9000e0b6 <mem_malloc+0xc6>
9000e0b2:	4299      	cmp	r1, r3
9000e0b4:	d131      	bne.n	9000e11a <mem_malloc+0x12a>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
9000e0b6:	4299      	cmp	r1, r3
          lfree = cur;
9000e0b8:	f8c8 3000 	str.w	r3, [r8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
9000e0bc:	d007      	beq.n	9000e0ce <mem_malloc+0xde>
9000e0be:	b132      	cbz	r2, 9000e0ce <mem_malloc+0xde>
9000e0c0:	4b1b      	ldr	r3, [pc, #108]	; (9000e130 <mem_malloc+0x140>)
9000e0c2:	f240 32b5 	movw	r2, #949	; 0x3b5
9000e0c6:	491e      	ldr	r1, [pc, #120]	; (9000e140 <mem_malloc+0x150>)
9000e0c8:	481b      	ldr	r0, [pc, #108]	; (9000e138 <mem_malloc+0x148>)
9000e0ca:	f01b fa01 	bl	900294d0 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
9000e0ce:	3508      	adds	r5, #8
        sys_mutex_unlock(&mem_mutex);
9000e0d0:	4814      	ldr	r0, [pc, #80]	; (9000e124 <mem_malloc+0x134>)
9000e0d2:	f001 fcb1 	bl	9000fa38 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
9000e0d6:	6833      	ldr	r3, [r6, #0]
9000e0d8:	4425      	add	r5, r4
9000e0da:	42ab      	cmp	r3, r5
9000e0dc:	d206      	bcs.n	9000e0ec <mem_malloc+0xfc>
9000e0de:	4b14      	ldr	r3, [pc, #80]	; (9000e130 <mem_malloc+0x140>)
9000e0e0:	f240 32b9 	movw	r2, #953	; 0x3b9
9000e0e4:	4917      	ldr	r1, [pc, #92]	; (9000e144 <mem_malloc+0x154>)
9000e0e6:	4814      	ldr	r0, [pc, #80]	; (9000e138 <mem_malloc+0x148>)
9000e0e8:	f01b f9f2 	bl	900294d0 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
9000e0ec:	07a3      	lsls	r3, r4, #30
9000e0ee:	d00d      	beq.n	9000e10c <mem_malloc+0x11c>
9000e0f0:	4b0f      	ldr	r3, [pc, #60]	; (9000e130 <mem_malloc+0x140>)
9000e0f2:	f240 32bb 	movw	r2, #955	; 0x3bb
9000e0f6:	4914      	ldr	r1, [pc, #80]	; (9000e148 <mem_malloc+0x158>)
9000e0f8:	480f      	ldr	r0, [pc, #60]	; (9000e138 <mem_malloc+0x148>)
9000e0fa:	f01b f9e9 	bl	900294d0 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
9000e0fe:	4b0c      	ldr	r3, [pc, #48]	; (9000e130 <mem_malloc+0x140>)
9000e100:	f240 32bd 	movw	r2, #957	; 0x3bd
9000e104:	4911      	ldr	r1, [pc, #68]	; (9000e14c <mem_malloc+0x15c>)
9000e106:	480c      	ldr	r0, [pc, #48]	; (9000e138 <mem_malloc+0x148>)
9000e108:	f01b f9e2 	bl	900294d0 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
9000e10c:	f104 0008 	add.w	r0, r4, #8
}
9000e110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
9000e114:	2301      	movs	r3, #1
9000e116:	7123      	strb	r3, [r4, #4]
9000e118:	e7c1      	b.n	9000e09e <mem_malloc+0xae>
  return (struct mem *)(void *)&ram[ptr];
9000e11a:	881b      	ldrh	r3, [r3, #0]
9000e11c:	4403      	add	r3, r0
9000e11e:	e7c6      	b.n	9000e0ae <mem_malloc+0xbe>
    size = MIN_SIZE_ALIGNED;
9000e120:	4606      	mov	r6, r0
9000e122:	e789      	b.n	9000e038 <mem_malloc+0x48>
9000e124:	20026bec 	.word	0x20026bec
9000e128:	20026bf0 	.word	0x20026bf0
9000e12c:	20026be8 	.word	0x20026be8
9000e130:	9002c3ac 	.word	0x9002c3ac
9000e134:	9002c565 	.word	0x9002c565
9000e138:	9002a254 	.word	0x9002a254
9000e13c:	20026bf4 	.word	0x20026bf4
9000e140:	9002c576 	.word	0x9002c576
9000e144:	9002c58f 	.word	0x9002c58f
9000e148:	9002c5bf 	.word	0x9002c5bf
9000e14c:	9002c5ee 	.word	0x9002c5ee

9000e150 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void *
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
9000e150:	b538      	push	{r3, r4, r5, lr}
9000e152:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
9000e154:	f001 fc8a 	bl	9000fa6c <sys_arch_protect>
9000e158:	4605      	mov	r5, r0

  memp = *desc->tab;
9000e15a:	6823      	ldr	r3, [r4, #0]
9000e15c:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
9000e15e:	b15c      	cbz	r4, 9000e178 <do_memp_malloc_pool.isra.0+0x28>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
9000e160:	6822      	ldr	r2, [r4, #0]
9000e162:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
9000e164:	07a3      	lsls	r3, r4, #30
9000e166:	d006      	beq.n	9000e176 <do_memp_malloc_pool.isra.0+0x26>
9000e168:	4b05      	ldr	r3, [pc, #20]	; (9000e180 <do_memp_malloc_pool.isra.0+0x30>)
9000e16a:	f44f 728c 	mov.w	r2, #280	; 0x118
9000e16e:	4905      	ldr	r1, [pc, #20]	; (9000e184 <do_memp_malloc_pool.isra.0+0x34>)
9000e170:	4805      	ldr	r0, [pc, #20]	; (9000e188 <do_memp_malloc_pool.isra.0+0x38>)
9000e172:	f01b f9ad 	bl	900294d0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
9000e176:	4628      	mov	r0, r5
    return ((u8_t *)memp + MEMP_SIZE);
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
9000e178:	f001 fc84 	bl	9000fa84 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
9000e17c:	4620      	mov	r0, r4
9000e17e:	bd38      	pop	{r3, r4, r5, pc}
9000e180:	9002c611 	.word	0x9002c611
9000e184:	9002c671 	.word	0x9002c671
9000e188:	9002a254 	.word	0x9002a254

9000e18c <do_memp_free_pool.isra.0>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
9000e18c:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
9000e18e:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc *desc, void *mem)
9000e190:	4605      	mov	r5, r0
9000e192:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
9000e194:	d006      	beq.n	9000e1a4 <do_memp_free_pool.isra.0+0x18>
9000e196:	4b08      	ldr	r3, [pc, #32]	; (9000e1b8 <do_memp_free_pool.isra.0+0x2c>)
9000e198:	f44f 72b6 	mov.w	r2, #364	; 0x16c
9000e19c:	4907      	ldr	r1, [pc, #28]	; (9000e1bc <do_memp_free_pool.isra.0+0x30>)
9000e19e:	4808      	ldr	r0, [pc, #32]	; (9000e1c0 <do_memp_free_pool.isra.0+0x34>)
9000e1a0:	f01b f996 	bl	900294d0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
9000e1a4:	f001 fc62 	bl	9000fa6c <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
9000e1a8:	682b      	ldr	r3, [r5, #0]
9000e1aa:	681a      	ldr	r2, [r3, #0]
9000e1ac:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
9000e1ae:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
9000e1b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
9000e1b4:	f001 bc66 	b.w	9000fa84 <sys_arch_unprotect>
9000e1b8:	9002c611 	.word	0x9002c611
9000e1bc:	9002c694 	.word	0x9002c694
9000e1c0:	9002a254 	.word	0x9002a254

9000e1c4 <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
9000e1c4:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
9000e1c6:	2200      	movs	r2, #0
9000e1c8:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
9000e1ca:	3303      	adds	r3, #3
{
9000e1cc:	b530      	push	{r4, r5, lr}
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
9000e1ce:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
9000e1d2:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
9000e1d4:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
9000e1d6:	4294      	cmp	r4, r2
9000e1d8:	dc00      	bgt.n	9000e1dc <memp_init_pool+0x18>
}
9000e1da:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
9000e1dc:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
9000e1de:	3201      	adds	r2, #1
    memp->next = *desc->tab;
9000e1e0:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
9000e1e2:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
9000e1e4:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
9000e1e6:	442b      	add	r3, r5
  for (i = 0; i < desc->num; ++i) {
9000e1e8:	e7f5      	b.n	9000e1d6 <memp_init_pool+0x12>
	...

9000e1ec <memp_init>:
{
9000e1ec:	b538      	push	{r3, r4, r5, lr}
9000e1ee:	4d05      	ldr	r5, [pc, #20]	; (9000e204 <memp_init+0x18>)
9000e1f0:	240e      	movs	r4, #14
    memp_init_pool(memp_pools[i]);
9000e1f2:	3c01      	subs	r4, #1
9000e1f4:	f855 0b04 	ldr.w	r0, [r5], #4
9000e1f8:	f7ff ffe4 	bl	9000e1c4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
9000e1fc:	b2a4      	uxth	r4, r4
9000e1fe:	2c00      	cmp	r4, #0
9000e200:	d1f7      	bne.n	9000e1f2 <memp_init+0x6>
}
9000e202:	bd38      	pop	{r3, r4, r5, pc}
9000e204:	9002c794 	.word	0x9002c794

9000e208 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
9000e208:	280d      	cmp	r0, #13
{
9000e20a:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
9000e20c:	d807      	bhi.n	9000e21e <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
9000e20e:	4b08      	ldr	r3, [pc, #32]	; (9000e230 <memp_malloc+0x28>)
9000e210:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
9000e214:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
9000e218:	3008      	adds	r0, #8
9000e21a:	f7ff bf99 	b.w	9000e150 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
9000e21e:	4b05      	ldr	r3, [pc, #20]	; (9000e234 <memp_malloc+0x2c>)
9000e220:	f240 1257 	movw	r2, #343	; 0x157
9000e224:	4904      	ldr	r1, [pc, #16]	; (9000e238 <memp_malloc+0x30>)
9000e226:	4805      	ldr	r0, [pc, #20]	; (9000e23c <memp_malloc+0x34>)
9000e228:	f01b f952 	bl	900294d0 <iprintf>
}
9000e22c:	2000      	movs	r0, #0
9000e22e:	bd08      	pop	{r3, pc}
9000e230:	9002c794 	.word	0x9002c794
9000e234:	9002c611 	.word	0x9002c611
9000e238:	9002c6b4 	.word	0x9002c6b4
9000e23c:	9002a254 	.word	0x9002a254

9000e240 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
9000e240:	280d      	cmp	r0, #13
9000e242:	d906      	bls.n	9000e252 <memp_free+0x12>
9000e244:	4b07      	ldr	r3, [pc, #28]	; (9000e264 <memp_free+0x24>)
9000e246:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
9000e24a:	4907      	ldr	r1, [pc, #28]	; (9000e268 <memp_free+0x28>)
9000e24c:	4807      	ldr	r0, [pc, #28]	; (9000e26c <memp_free+0x2c>)
9000e24e:	f01b b93f 	b.w	900294d0 <iprintf>

  if (mem == NULL) {
9000e252:	b129      	cbz	r1, 9000e260 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
9000e254:	4b06      	ldr	r3, [pc, #24]	; (9000e270 <memp_free+0x30>)
9000e256:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
9000e25a:	3008      	adds	r0, #8
9000e25c:	f7ff bf96 	b.w	9000e18c <do_memp_free_pool.isra.0>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
9000e260:	4770      	bx	lr
9000e262:	bf00      	nop
9000e264:	9002c611 	.word	0x9002c611
9000e268:	9002c6d1 	.word	0x9002c6d1
9000e26c:	9002a254 	.word	0x9002a254
9000e270:	9002c794 	.word	0x9002c794

9000e274 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
9000e274:	b510      	push	{r4, lr}
  if (buf != NULL) {
9000e276:	4604      	mov	r4, r0
9000e278:	b160      	cbz	r0, 9000e294 <netbuf_delete+0x20>
    if (buf->p != NULL) {
9000e27a:	6800      	ldr	r0, [r0, #0]
9000e27c:	b120      	cbz	r0, 9000e288 <netbuf_delete+0x14>
      pbuf_free(buf->p);
9000e27e:	f000 fac9 	bl	9000e814 <pbuf_free>
      buf->p = buf->ptr = NULL;
9000e282:	2300      	movs	r3, #0
9000e284:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
9000e288:	4621      	mov	r1, r4
9000e28a:	2006      	movs	r0, #6
  }
}
9000e28c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
9000e290:	f7ff bfd6 	b.w	9000e240 <memp_free>
}
9000e294:	bd10      	pop	{r4, pc}
	...

9000e298 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
9000e298:	b510      	push	{r4, lr}
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
9000e29a:	4604      	mov	r4, r0
9000e29c:	b938      	cbnz	r0, 9000e2ae <netbuf_free+0x16>
9000e29e:	4b08      	ldr	r3, [pc, #32]	; (9000e2c0 <netbuf_free+0x28>)
9000e2a0:	2281      	movs	r2, #129	; 0x81
9000e2a2:	4908      	ldr	r1, [pc, #32]	; (9000e2c4 <netbuf_free+0x2c>)
9000e2a4:	4808      	ldr	r0, [pc, #32]	; (9000e2c8 <netbuf_free+0x30>)
  buf->p = buf->ptr = NULL;
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
9000e2a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
9000e2aa:	f01b b911 	b.w	900294d0 <iprintf>
  if (buf->p != NULL) {
9000e2ae:	6800      	ldr	r0, [r0, #0]
9000e2b0:	b108      	cbz	r0, 9000e2b6 <netbuf_free+0x1e>
    pbuf_free(buf->p);
9000e2b2:	f000 faaf 	bl	9000e814 <pbuf_free>
  buf->p = buf->ptr = NULL;
9000e2b6:	2300      	movs	r3, #0
9000e2b8:	e9c4 3300 	strd	r3, r3, [r4]
}
9000e2bc:	bd10      	pop	{r4, pc}
9000e2be:	bf00      	nop
9000e2c0:	9002c7cc 	.word	0x9002c7cc
9000e2c4:	9002c86b 	.word	0x9002c86b
9000e2c8:	9002a254 	.word	0x9002a254

9000e2cc <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
9000e2cc:	b570      	push	{r4, r5, r6, lr}
9000e2ce:	460e      	mov	r6, r1
9000e2d0:	4615      	mov	r5, r2
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
9000e2d2:	4604      	mov	r4, r0
9000e2d4:	b940      	cbnz	r0, 9000e2e8 <netbuf_ref+0x1c>
9000e2d6:	4b0f      	ldr	r3, [pc, #60]	; (9000e314 <netbuf_ref+0x48>)
9000e2d8:	2299      	movs	r2, #153	; 0x99
9000e2da:	490f      	ldr	r1, [pc, #60]	; (9000e318 <netbuf_ref+0x4c>)
9000e2dc:	480f      	ldr	r0, [pc, #60]	; (9000e31c <netbuf_ref+0x50>)
9000e2de:	f01b f8f7 	bl	900294d0 <iprintf>
9000e2e2:	f06f 000f 	mvn.w	r0, #15
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
  buf->p->len = buf->p->tot_len = size;
  buf->ptr = buf->p;
  return ERR_OK;
}
9000e2e6:	bd70      	pop	{r4, r5, r6, pc}
  if (buf->p != NULL) {
9000e2e8:	6800      	ldr	r0, [r0, #0]
9000e2ea:	b108      	cbz	r0, 9000e2f0 <netbuf_ref+0x24>
    pbuf_free(buf->p);
9000e2ec:	f000 fa92 	bl	9000e814 <pbuf_free>
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
9000e2f0:	2241      	movs	r2, #65	; 0x41
9000e2f2:	2100      	movs	r1, #0
9000e2f4:	2036      	movs	r0, #54	; 0x36
9000e2f6:	f000 faf5 	bl	9000e8e4 <pbuf_alloc>
9000e2fa:	6020      	str	r0, [r4, #0]
  if (buf->p == NULL) {
9000e2fc:	b918      	cbnz	r0, 9000e306 <netbuf_ref+0x3a>
    buf->ptr = NULL;
9000e2fe:	6060      	str	r0, [r4, #4]
    return ERR_MEM;
9000e300:	f04f 30ff 	mov.w	r0, #4294967295
9000e304:	e7ef      	b.n	9000e2e6 <netbuf_ref+0x1a>
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
9000e306:	6046      	str	r6, [r0, #4]
  buf->p->len = buf->p->tot_len = size;
9000e308:	8105      	strh	r5, [r0, #8]
9000e30a:	8145      	strh	r5, [r0, #10]
  buf->ptr = buf->p;
9000e30c:	6060      	str	r0, [r4, #4]
  return ERR_OK;
9000e30e:	2000      	movs	r0, #0
9000e310:	e7e9      	b.n	9000e2e6 <netbuf_ref+0x1a>
9000e312:	bf00      	nop
9000e314:	9002c7cc 	.word	0x9002c7cc
9000e318:	9002c884 	.word	0x9002c884
9000e31c:	9002a254 	.word	0x9002a254

9000e320 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
9000e320:	f06f 000b 	mvn.w	r0, #11
9000e324:	4770      	bx	lr
	...

9000e328 <netif_issue_reports>:
{
9000e328:	b538      	push	{r3, r4, r5, lr}
9000e32a:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
9000e32c:	4604      	mov	r4, r0
9000e32e:	b930      	cbnz	r0, 9000e33e <netif_issue_reports+0x16>
9000e330:	4b0c      	ldr	r3, [pc, #48]	; (9000e364 <netif_issue_reports+0x3c>)
9000e332:	f240 326d 	movw	r2, #877	; 0x36d
9000e336:	490c      	ldr	r1, [pc, #48]	; (9000e368 <netif_issue_reports+0x40>)
9000e338:	480c      	ldr	r0, [pc, #48]	; (9000e36c <netif_issue_reports+0x44>)
9000e33a:	f01b f8c9 	bl	900294d0 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
9000e33e:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
9000e342:	f003 0205 	and.w	r2, r3, #5
9000e346:	2a05      	cmp	r2, #5
9000e348:	d10b      	bne.n	9000e362 <netif_issue_reports+0x3a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
9000e34a:	07ea      	lsls	r2, r5, #31
9000e34c:	d509      	bpl.n	9000e362 <netif_issue_reports+0x3a>
9000e34e:	6862      	ldr	r2, [r4, #4]
9000e350:	b13a      	cbz	r2, 9000e362 <netif_issue_reports+0x3a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
9000e352:	071b      	lsls	r3, r3, #28
9000e354:	d505      	bpl.n	9000e362 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
9000e356:	1d21      	adds	r1, r4, #4
9000e358:	4620      	mov	r0, r4
}
9000e35a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      etharp_gratuitous(netif);
9000e35e:	f7fe bb9d 	b.w	9000ca9c <etharp_request>
}
9000e362:	bd38      	pop	{r3, r4, r5, pc}
9000e364:	9002c89c 	.word	0x9002c89c
9000e368:	9002c8fd 	.word	0x9002c8fd
9000e36c:	9002a254 	.word	0x9002a254

9000e370 <netif_do_set_ipaddr>:
{
9000e370:	b573      	push	{r0, r1, r4, r5, r6, lr}
9000e372:	4605      	mov	r5, r0
9000e374:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
9000e376:	460c      	mov	r4, r1
9000e378:	b931      	cbnz	r1, 9000e388 <netif_do_set_ipaddr+0x18>
9000e37a:	4b10      	ldr	r3, [pc, #64]	; (9000e3bc <netif_do_set_ipaddr+0x4c>)
9000e37c:	f240 12cb 	movw	r2, #459	; 0x1cb
9000e380:	490f      	ldr	r1, [pc, #60]	; (9000e3c0 <netif_do_set_ipaddr+0x50>)
9000e382:	4810      	ldr	r0, [pc, #64]	; (9000e3c4 <netif_do_set_ipaddr+0x54>)
9000e384:	f01b f8a4 	bl	900294d0 <iprintf>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
9000e388:	686b      	ldr	r3, [r5, #4]
9000e38a:	6822      	ldr	r2, [r4, #0]
9000e38c:	429a      	cmp	r2, r3
9000e38e:	d101      	bne.n	9000e394 <netif_do_set_ipaddr+0x24>
  return 0; /* address unchanged */
9000e390:	2000      	movs	r0, #0
9000e392:	e010      	b.n	9000e3b6 <netif_do_set_ipaddr+0x46>
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
9000e394:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
9000e396:	a901      	add	r1, sp, #4
9000e398:	4630      	mov	r0, r6
    *ip_2_ip4(&new_addr) = *ipaddr;
9000e39a:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
9000e39c:	f001 ff6a 	bl	90010274 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
9000e3a0:	a901      	add	r1, sp, #4
9000e3a2:	4630      	mov	r0, r6
9000e3a4:	f005 fd50 	bl	90013e48 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
9000e3a8:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
9000e3aa:	4628      	mov	r0, r5
9000e3ac:	2101      	movs	r1, #1
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
9000e3ae:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
9000e3b0:	f7ff ffba 	bl	9000e328 <netif_issue_reports>
    return 1; /* address changed */
9000e3b4:	2001      	movs	r0, #1
}
9000e3b6:	b002      	add	sp, #8
9000e3b8:	bd70      	pop	{r4, r5, r6, pc}
9000e3ba:	bf00      	nop
9000e3bc:	9002c89c 	.word	0x9002c89c
9000e3c0:	9002b496 	.word	0x9002b496
9000e3c4:	9002a254 	.word	0x9002a254

9000e3c8 <netif_init>:
}
9000e3c8:	4770      	bx	lr
	...

9000e3cc <netif_set_addr>:
{
9000e3cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
9000e3ce:	4f14      	ldr	r7, [pc, #80]	; (9000e420 <netif_set_addr+0x54>)
{
9000e3d0:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
9000e3d2:	2900      	cmp	r1, #0
9000e3d4:	bf14      	ite	ne
9000e3d6:	460d      	movne	r5, r1
9000e3d8:	463d      	moveq	r5, r7
    netmask = IP4_ADDR_ANY4;
9000e3da:	2a00      	cmp	r2, #0
9000e3dc:	bf14      	ite	ne
9000e3de:	4616      	movne	r6, r2
9000e3e0:	463e      	moveq	r6, r7
    gw = IP4_ADDR_ANY4;
9000e3e2:	2b00      	cmp	r3, #0
9000e3e4:	bf18      	it	ne
9000e3e6:	461f      	movne	r7, r3
  remove = ip4_addr_isany(ipaddr);
9000e3e8:	682b      	ldr	r3, [r5, #0]
9000e3ea:	b9b3      	cbnz	r3, 9000e41a <netif_set_addr+0x4e>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
9000e3ec:	aa01      	add	r2, sp, #4
9000e3ee:	4629      	mov	r1, r5
9000e3f0:	f7ff ffbe 	bl	9000e370 <netif_do_set_ipaddr>
9000e3f4:	2301      	movs	r3, #1
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
9000e3f6:	6832      	ldr	r2, [r6, #0]
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
9000e3f8:	68a1      	ldr	r1, [r4, #8]
9000e3fa:	428a      	cmp	r2, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
9000e3fc:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
9000e3fe:	bf18      	it	ne
9000e400:	60a2      	strne	r2, [r4, #8]
  if (netif_do_set_gw(netif, gw, old_gw)) {
9000e402:	683a      	ldr	r2, [r7, #0]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
9000e404:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
9000e406:	bf18      	it	ne
9000e408:	60e2      	strne	r2, [r4, #12]
  if (!remove) {
9000e40a:	b923      	cbnz	r3, 9000e416 <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
9000e40c:	aa01      	add	r2, sp, #4
9000e40e:	4629      	mov	r1, r5
9000e410:	4620      	mov	r0, r4
9000e412:	f7ff ffad 	bl	9000e370 <netif_do_set_ipaddr>
}
9000e416:	b003      	add	sp, #12
9000e418:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
9000e41a:	2300      	movs	r3, #0
9000e41c:	e7eb      	b.n	9000e3f6 <netif_set_addr+0x2a>
9000e41e:	bf00      	nop
9000e420:	9002c1b0 	.word	0x9002c1b0

9000e424 <netif_add>:
{
9000e424:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000e428:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
9000e42a:	4698      	mov	r8, r3
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
9000e42c:	4604      	mov	r4, r0
9000e42e:	b948      	cbnz	r0, 9000e444 <netif_add+0x20>
9000e430:	4b3e      	ldr	r3, [pc, #248]	; (9000e52c <netif_add+0x108>)
9000e432:	f240 1227 	movw	r2, #295	; 0x127
9000e436:	493e      	ldr	r1, [pc, #248]	; (9000e530 <netif_add+0x10c>)
9000e438:	483e      	ldr	r0, [pc, #248]	; (9000e534 <netif_add+0x110>)
9000e43a:	f01b f849 	bl	900294d0 <iprintf>
}
9000e43e:	4620      	mov	r0, r4
9000e440:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
9000e444:	b947      	cbnz	r7, 9000e458 <netif_add+0x34>
9000e446:	4b39      	ldr	r3, [pc, #228]	; (9000e52c <netif_add+0x108>)
9000e448:	f44f 7294 	mov.w	r2, #296	; 0x128
9000e44c:	493a      	ldr	r1, [pc, #232]	; (9000e538 <netif_add+0x114>)
9000e44e:	463c      	mov	r4, r7
9000e450:	4838      	ldr	r0, [pc, #224]	; (9000e534 <netif_add+0x110>)
9000e452:	f01b f83d 	bl	900294d0 <iprintf>
9000e456:	e7f2      	b.n	9000e43e <netif_add+0x1a>
  netif->output = netif_null_output_ip4;
9000e458:	4e38      	ldr	r6, [pc, #224]	; (9000e53c <netif_add+0x118>)
  ip_addr_set_zero_ip4(&netif->ip_addr);
9000e45a:	2500      	movs	r5, #0
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
9000e45c:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 9000e548 <netif_add+0x124>
  netif->output = netif_null_output_ip4;
9000e460:	6146      	str	r6, [r0, #20]
  netif->state = state;
9000e462:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  netif_set_addr(netif, ipaddr, netmask, gw);
9000e464:	42aa      	cmp	r2, r5
9000e466:	bf08      	it	eq
9000e468:	4662      	moveq	r2, ip
  netif->input = input;
9000e46a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  netif_set_addr(netif, ipaddr, netmask, gw);
9000e46c:	42a9      	cmp	r1, r5
9000e46e:	bf08      	it	eq
9000e470:	4661      	moveq	r1, ip
  netif->state = state;
9000e472:	6206      	str	r6, [r0, #32]
  netif->num = netif_num;
9000e474:	4e32      	ldr	r6, [pc, #200]	; (9000e540 <netif_add+0x11c>)
  netif->input = input;
9000e476:	6103      	str	r3, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
9000e478:	45a8      	cmp	r8, r5
9000e47a:	bf14      	ite	ne
9000e47c:	4643      	movne	r3, r8
9000e47e:	4663      	moveq	r3, ip
  netif->num = netif_num;
9000e480:	f896 e000 	ldrb.w	lr, [r6]
  ip_addr_set_zero_ip4(&netif->gw);
9000e484:	60c5      	str	r5, [r0, #12]
  netif->mtu = 0;
9000e486:	8505      	strh	r5, [r0, #40]	; 0x28
  netif->flags = 0;
9000e488:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
  memset(netif->client_data, 0, sizeof(netif->client_data));
9000e48c:	6245      	str	r5, [r0, #36]	; 0x24
  netif->link_callback = NULL;
9000e48e:	61c5      	str	r5, [r0, #28]
  netif->num = netif_num;
9000e490:	f880 e034 	strb.w	lr, [r0, #52]	; 0x34
  ip_addr_set_zero_ip4(&netif->netmask);
9000e494:	e9c0 5501 	strd	r5, r5, [r0, #4]
  netif_set_addr(netif, ipaddr, netmask, gw);
9000e498:	f7ff ff98 	bl	9000e3cc <netif_set_addr>
  if (init(netif) != ERR_OK) {
9000e49c:	4620      	mov	r0, r4
9000e49e:	47b8      	blx	r7
9000e4a0:	2800      	cmp	r0, #0
9000e4a2:	d140      	bne.n	9000e526 <netif_add+0x102>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
9000e4a4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 9000e54c <netif_add+0x128>
        LWIP_ASSERT("netif already added", netif2 != netif);
9000e4a8:	4b20      	ldr	r3, [pc, #128]	; (9000e52c <netif_add+0x108>)
9000e4aa:	46c8      	mov	r8, r9
      if (netif->num == 255) {
9000e4ac:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
      num_netifs = 0;
9000e4b0:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
9000e4b2:	f8d9 5000 	ldr.w	r5, [r9]
      if (netif->num == 255) {
9000e4b6:	2aff      	cmp	r2, #255	; 0xff
        LWIP_ASSERT("netif already added", netif2 != netif);
9000e4b8:	f8df b094 	ldr.w	fp, [pc, #148]	; 9000e550 <netif_add+0x12c>
9000e4bc:	f8df a074 	ldr.w	sl, [pc, #116]	; 9000e534 <netif_add+0x110>
        netif->num = 0;
9000e4c0:	bf04      	itt	eq
9000e4c2:	2200      	moveq	r2, #0
9000e4c4:	f884 2034 	strbeq.w	r2, [r4, #52]	; 0x34
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
9000e4c8:	b92d      	cbnz	r5, 9000e4d6 <netif_add+0xb2>
  if (netif->num == 254) {
9000e4ca:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
9000e4ce:	2bfe      	cmp	r3, #254	; 0xfe
9000e4d0:	d120      	bne.n	9000e514 <netif_add+0xf0>
    netif_num = 0;
9000e4d2:	462b      	mov	r3, r5
9000e4d4:	e020      	b.n	9000e518 <netif_add+0xf4>
        LWIP_ASSERT("netif already added", netif2 != netif);
9000e4d6:	42a5      	cmp	r5, r4
9000e4d8:	d106      	bne.n	9000e4e8 <netif_add+0xc4>
9000e4da:	f240 128b 	movw	r2, #395	; 0x18b
9000e4de:	4659      	mov	r1, fp
9000e4e0:	4650      	mov	r0, sl
9000e4e2:	f01a fff5 	bl	900294d0 <iprintf>
9000e4e6:	4b11      	ldr	r3, [pc, #68]	; (9000e52c <netif_add+0x108>)
        num_netifs++;
9000e4e8:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
9000e4ea:	2fff      	cmp	r7, #255	; 0xff
9000e4ec:	dd06      	ble.n	9000e4fc <netif_add+0xd8>
9000e4ee:	f240 128d 	movw	r2, #397	; 0x18d
9000e4f2:	4914      	ldr	r1, [pc, #80]	; (9000e544 <netif_add+0x120>)
9000e4f4:	4650      	mov	r0, sl
9000e4f6:	f01a ffeb 	bl	900294d0 <iprintf>
9000e4fa:	4b0c      	ldr	r3, [pc, #48]	; (9000e52c <netif_add+0x108>)
        if (netif2->num == netif->num) {
9000e4fc:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
9000e500:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
9000e504:	428a      	cmp	r2, r1
9000e506:	d103      	bne.n	9000e510 <netif_add+0xec>
          netif->num++;
9000e508:	3201      	adds	r2, #1
9000e50a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    } while (netif2 != NULL);
9000e50e:	e7cd      	b.n	9000e4ac <netif_add+0x88>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
9000e510:	682d      	ldr	r5, [r5, #0]
9000e512:	e7d9      	b.n	9000e4c8 <netif_add+0xa4>
    netif_num = (u8_t)(netif->num + 1);
9000e514:	3301      	adds	r3, #1
9000e516:	b2db      	uxtb	r3, r3
9000e518:	7033      	strb	r3, [r6, #0]
  netif->next = netif_list;
9000e51a:	f8d8 3000 	ldr.w	r3, [r8]
9000e51e:	6023      	str	r3, [r4, #0]
  netif_list = netif;
9000e520:	f8c8 4000 	str.w	r4, [r8]
  return netif;
9000e524:	e78b      	b.n	9000e43e <netif_add+0x1a>
    return NULL;
9000e526:	462c      	mov	r4, r5
9000e528:	e789      	b.n	9000e43e <netif_add+0x1a>
9000e52a:	bf00      	nop
9000e52c:	9002c89c 	.word	0x9002c89c
9000e530:	9002c920 	.word	0x9002c920
9000e534:	9002a254 	.word	0x9002a254
9000e538:	9002c939 	.word	0x9002c939
9000e53c:	9000e321 	.word	0x9000e321
9000e540:	20026c30 	.word	0x20026c30
9000e544:	9002c96f 	.word	0x9002c96f
9000e548:	9002c1b0 	.word	0x9002c1b0
9000e54c:	2002cb54 	.word	0x2002cb54
9000e550:	9002c95b 	.word	0x9002c95b

9000e554 <netif_set_default>:
  netif_default = netif;
9000e554:	4b01      	ldr	r3, [pc, #4]	; (9000e55c <netif_set_default+0x8>)
9000e556:	6018      	str	r0, [r3, #0]
}
9000e558:	4770      	bx	lr
9000e55a:	bf00      	nop
9000e55c:	2002cb58 	.word	0x2002cb58

9000e560 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
9000e560:	b930      	cbnz	r0, 9000e570 <netif_set_up+0x10>
9000e562:	4b09      	ldr	r3, [pc, #36]	; (9000e588 <netif_set_up+0x28>)
9000e564:	f44f 7254 	mov.w	r2, #848	; 0x350
9000e568:	4908      	ldr	r1, [pc, #32]	; (9000e58c <netif_set_up+0x2c>)
9000e56a:	4809      	ldr	r0, [pc, #36]	; (9000e590 <netif_set_up+0x30>)
9000e56c:	f01a bfb0 	b.w	900294d0 <iprintf>
  if (!(netif->flags & NETIF_FLAG_UP)) {
9000e570:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
9000e574:	07d1      	lsls	r1, r2, #31
9000e576:	d406      	bmi.n	9000e586 <netif_set_up+0x26>
    netif_set_flags(netif, NETIF_FLAG_UP);
9000e578:	f042 0201 	orr.w	r2, r2, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
9000e57c:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
9000e57e:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
9000e582:	f7ff bed1 	b.w	9000e328 <netif_issue_reports>
}
9000e586:	4770      	bx	lr
9000e588:	9002c89c 	.word	0x9002c89c
9000e58c:	9002c99d 	.word	0x9002c99d
9000e590:	9002a254 	.word	0x9002a254

9000e594 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
9000e594:	b930      	cbnz	r0, 9000e5a4 <netif_set_down+0x10>
9000e596:	4b0a      	ldr	r3, [pc, #40]	; (9000e5c0 <netif_set_down+0x2c>)
9000e598:	f240 329b 	movw	r2, #923	; 0x39b
9000e59c:	4909      	ldr	r1, [pc, #36]	; (9000e5c4 <netif_set_down+0x30>)
9000e59e:	480a      	ldr	r0, [pc, #40]	; (9000e5c8 <netif_set_down+0x34>)
9000e5a0:	f01a bf96 	b.w	900294d0 <iprintf>
  if (netif->flags & NETIF_FLAG_UP) {
9000e5a4:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
9000e5a8:	07d1      	lsls	r1, r2, #31
9000e5aa:	d507      	bpl.n	9000e5bc <netif_set_down+0x28>
    netif_clear_flags(netif, NETIF_FLAG_UP);
9000e5ac:	f022 0101 	bic.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
9000e5b0:	0713      	lsls	r3, r2, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
9000e5b2:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
    if (netif->flags & NETIF_FLAG_ETHARP) {
9000e5b6:	d501      	bpl.n	9000e5bc <netif_set_down+0x28>
      etharp_cleanup_netif(netif);
9000e5b8:	f7fe b9b2 	b.w	9000c920 <etharp_cleanup_netif>
}
9000e5bc:	4770      	bx	lr
9000e5be:	bf00      	nop
9000e5c0:	9002c89c 	.word	0x9002c89c
9000e5c4:	9002c9b9 	.word	0x9002c9b9
9000e5c8:	9002a254 	.word	0x9002a254

9000e5cc <netif_set_link_up>:
{
9000e5cc:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
9000e5ce:	4604      	mov	r4, r0
9000e5d0:	b940      	cbnz	r0, 9000e5e4 <netif_set_link_up+0x18>
9000e5d2:	4b0f      	ldr	r3, [pc, #60]	; (9000e610 <netif_set_link_up+0x44>)
9000e5d4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
9000e5d8:	490e      	ldr	r1, [pc, #56]	; (9000e614 <netif_set_link_up+0x48>)
9000e5da:	480f      	ldr	r0, [pc, #60]	; (9000e618 <netif_set_link_up+0x4c>)
}
9000e5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
9000e5e0:	f01a bf76 	b.w	900294d0 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
9000e5e4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
9000e5e8:	075a      	lsls	r2, r3, #29
9000e5ea:	d40f      	bmi.n	9000e60c <netif_set_link_up+0x40>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
9000e5ec:	f043 0304 	orr.w	r3, r3, #4
9000e5f0:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    dhcp_network_changed(netif);
9000e5f4:	f7fd fc24 	bl	9000be40 <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
9000e5f8:	2103      	movs	r1, #3
9000e5fa:	4620      	mov	r0, r4
9000e5fc:	f7ff fe94 	bl	9000e328 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
9000e600:	69e3      	ldr	r3, [r4, #28]
9000e602:	b11b      	cbz	r3, 9000e60c <netif_set_link_up+0x40>
9000e604:	4620      	mov	r0, r4
}
9000e606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
9000e60a:	4718      	bx	r3
}
9000e60c:	bd10      	pop	{r4, pc}
9000e60e:	bf00      	nop
9000e610:	9002c89c 	.word	0x9002c89c
9000e614:	9002c9d7 	.word	0x9002c9d7
9000e618:	9002a254 	.word	0x9002a254

9000e61c <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
9000e61c:	b930      	cbnz	r0, 9000e62c <netif_set_link_down+0x10>
9000e61e:	4b09      	ldr	r3, [pc, #36]	; (9000e644 <netif_set_link_down+0x28>)
9000e620:	f240 4206 	movw	r2, #1030	; 0x406
9000e624:	4908      	ldr	r1, [pc, #32]	; (9000e648 <netif_set_link_down+0x2c>)
9000e626:	4809      	ldr	r0, [pc, #36]	; (9000e64c <netif_set_link_down+0x30>)
9000e628:	f01a bf52 	b.w	900294d0 <iprintf>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
9000e62c:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
9000e630:	0751      	lsls	r1, r2, #29
9000e632:	d506      	bpl.n	9000e642 <netif_set_link_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
9000e634:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
9000e638:	69c3      	ldr	r3, [r0, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
9000e63a:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
9000e63e:	b103      	cbz	r3, 9000e642 <netif_set_link_down+0x26>
9000e640:	4718      	bx	r3
}
9000e642:	4770      	bx	lr
9000e644:	9002c89c 	.word	0x9002c89c
9000e648:	9002c9f8 	.word	0x9002c9f8
9000e64c:	9002a254 	.word	0x9002a254

9000e650 <netif_set_link_callback>:
  if (netif) {
9000e650:	b100      	cbz	r0, 9000e654 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
9000e652:	61c1      	str	r1, [r0, #28]
}
9000e654:	4770      	bx	lr
	...

9000e658 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
9000e658:	4603      	mov	r3, r0
9000e65a:	b158      	cbz	r0, 9000e674 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
9000e65c:	4a06      	ldr	r2, [pc, #24]	; (9000e678 <netif_get_by_index+0x20>)
9000e65e:	6810      	ldr	r0, [r2, #0]
9000e660:	b900      	cbnz	r0, 9000e664 <netif_get_by_index+0xc>
9000e662:	4770      	bx	lr
      if (idx == netif_get_index(netif)) {
9000e664:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
9000e668:	3201      	adds	r2, #1
9000e66a:	b2d2      	uxtb	r2, r2
9000e66c:	429a      	cmp	r2, r3
9000e66e:	d001      	beq.n	9000e674 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
9000e670:	6800      	ldr	r0, [r0, #0]
9000e672:	e7f5      	b.n	9000e660 <netif_get_by_index+0x8>
      }
    }
  }

  return NULL;
}
9000e674:	4770      	bx	lr
9000e676:	bf00      	nop
9000e678:	2002cb54 	.word	0x2002cb54

9000e67c <pbuf_skip_const>:
{
  u16_t offset_left = in_offset;
  const struct pbuf *q = in;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
9000e67c:	b110      	cbz	r0, 9000e684 <pbuf_skip_const+0x8>
9000e67e:	8943      	ldrh	r3, [r0, #10]
9000e680:	428b      	cmp	r3, r1
9000e682:	d902      	bls.n	9000e68a <pbuf_skip_const+0xe>
    offset_left = (u16_t)(offset_left - q->len);
    q = q->next;
  }
  if (out_offset != NULL) {
9000e684:	b102      	cbz	r2, 9000e688 <pbuf_skip_const+0xc>
    *out_offset = offset_left;
9000e686:	8011      	strh	r1, [r2, #0]
  }
  return q;
}
9000e688:	4770      	bx	lr
    offset_left = (u16_t)(offset_left - q->len);
9000e68a:	1ac9      	subs	r1, r1, r3
    q = q->next;
9000e68c:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
9000e68e:	b289      	uxth	r1, r1
    q = q->next;
9000e690:	e7f4      	b.n	9000e67c <pbuf_skip_const>
	...

9000e694 <pbuf_free_ooseq_callback>:
{
9000e694:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
9000e696:	f001 f9e9 	bl	9000fa6c <sys_arch_protect>
9000e69a:	4b08      	ldr	r3, [pc, #32]	; (9000e6bc <pbuf_free_ooseq_callback+0x28>)
9000e69c:	2200      	movs	r2, #0
9000e69e:	701a      	strb	r2, [r3, #0]
9000e6a0:	f001 f9f0 	bl	9000fa84 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
9000e6a4:	4b06      	ldr	r3, [pc, #24]	; (9000e6c0 <pbuf_free_ooseq_callback+0x2c>)
9000e6a6:	6818      	ldr	r0, [r3, #0]
9000e6a8:	b900      	cbnz	r0, 9000e6ac <pbuf_free_ooseq_callback+0x18>
}
9000e6aa:	bd08      	pop	{r3, pc}
    if (pcb->ooseq != NULL) {
9000e6ac:	6f43      	ldr	r3, [r0, #116]	; 0x74
9000e6ae:	b11b      	cbz	r3, 9000e6b8 <pbuf_free_ooseq_callback+0x24>
}
9000e6b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      tcp_free_ooseq(pcb);
9000e6b4:	f001 bc82 	b.w	9000ffbc <tcp_free_ooseq>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
9000e6b8:	68c0      	ldr	r0, [r0, #12]
9000e6ba:	e7f5      	b.n	9000e6a8 <pbuf_free_ooseq_callback+0x14>
9000e6bc:	2002cb5c 	.word	0x2002cb5c
9000e6c0:	2002cb6c 	.word	0x2002cb6c

9000e6c4 <pbuf_add_header_impl>:
{
9000e6c4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
9000e6c6:	b968      	cbnz	r0, 9000e6e4 <pbuf_add_header_impl+0x20>
9000e6c8:	4b14      	ldr	r3, [pc, #80]	; (9000e71c <pbuf_add_header_impl+0x58>)
9000e6ca:	f240 12df 	movw	r2, #479	; 0x1df
9000e6ce:	4914      	ldr	r1, [pc, #80]	; (9000e720 <pbuf_add_header_impl+0x5c>)
9000e6d0:	4814      	ldr	r0, [pc, #80]	; (9000e724 <pbuf_add_header_impl+0x60>)
9000e6d2:	f01a fefd 	bl	900294d0 <iprintf>
    return 1;
9000e6d6:	2001      	movs	r0, #1
9000e6d8:	e01f      	b.n	9000e71a <pbuf_add_header_impl+0x56>
    if (force) {
9000e6da:	2a00      	cmp	r2, #0
9000e6dc:	d0fb      	beq.n	9000e6d6 <pbuf_add_header_impl+0x12>
      payload = (u8_t *)p->payload - header_size_increment;
9000e6de:	6842      	ldr	r2, [r0, #4]
9000e6e0:	1a51      	subs	r1, r2, r1
9000e6e2:	e014      	b.n	9000e70e <pbuf_add_header_impl+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
9000e6e4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000e6e8:	d2f5      	bcs.n	9000e6d6 <pbuf_add_header_impl+0x12>
  if (header_size_increment == 0) {
9000e6ea:	b1a9      	cbz	r1, 9000e718 <pbuf_add_header_impl+0x54>
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
9000e6ec:	8903      	ldrh	r3, [r0, #8]
  increment_magnitude = (u16_t)header_size_increment;
9000e6ee:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
9000e6f0:	fa13 f381 	uxtah	r3, r3, r1
9000e6f4:	b29b      	uxth	r3, r3
9000e6f6:	429c      	cmp	r4, r3
9000e6f8:	d8ed      	bhi.n	9000e6d6 <pbuf_add_header_impl+0x12>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
9000e6fa:	f990 500c 	ldrsb.w	r5, [r0, #12]
9000e6fe:	2d00      	cmp	r5, #0
9000e700:	daeb      	bge.n	9000e6da <pbuf_add_header_impl+0x16>
    payload = (u8_t *)p->payload - header_size_increment;
9000e702:	6842      	ldr	r2, [r0, #4]
9000e704:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
9000e706:	f100 0210 	add.w	r2, r0, #16
9000e70a:	4291      	cmp	r1, r2
9000e70c:	d3e3      	bcc.n	9000e6d6 <pbuf_add_header_impl+0x12>
  p->len = (u16_t)(p->len + increment_magnitude);
9000e70e:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
9000e710:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
9000e712:	4414      	add	r4, r2
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
9000e714:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
9000e716:	8144      	strh	r4, [r0, #10]
  return 0;
9000e718:	2000      	movs	r0, #0
}
9000e71a:	bd38      	pop	{r3, r4, r5, pc}
9000e71c:	9002ca1b 	.word	0x9002ca1b
9000e720:	9002cb1d 	.word	0x9002cb1d
9000e724:	9002a254 	.word	0x9002a254

9000e728 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
9000e728:	f022 0340 	bic.w	r3, r2, #64	; 0x40
9000e72c:	2b01      	cmp	r3, #1
{
9000e72e:	b570      	push	{r4, r5, r6, lr}
9000e730:	4606      	mov	r6, r0
9000e732:	460d      	mov	r5, r1
9000e734:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
9000e736:	d006      	beq.n	9000e746 <pbuf_alloc_reference+0x1e>
9000e738:	4b0a      	ldr	r3, [pc, #40]	; (9000e764 <pbuf_alloc_reference+0x3c>)
9000e73a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
9000e73e:	490a      	ldr	r1, [pc, #40]	; (9000e768 <pbuf_alloc_reference+0x40>)
9000e740:	480a      	ldr	r0, [pc, #40]	; (9000e76c <pbuf_alloc_reference+0x44>)
9000e742:	f01a fec5 	bl	900294d0 <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
9000e746:	200c      	movs	r0, #12
9000e748:	f7ff fd5e 	bl	9000e208 <memp_malloc>
  if (p == NULL) {
9000e74c:	b140      	cbz	r0, 9000e760 <pbuf_alloc_reference+0x38>
  p->next = NULL;
9000e74e:	2300      	movs	r3, #0
  p->tot_len = tot_len;
9000e750:	8105      	strh	r5, [r0, #8]
  p->len = len;
9000e752:	8145      	strh	r5, [r0, #10]
  p->flags = flags;
9000e754:	7343      	strb	r3, [r0, #13]
  p->type_internal = (u8_t)type;
9000e756:	7304      	strb	r4, [r0, #12]
  p->payload = payload;
9000e758:	e9c0 3600 	strd	r3, r6, [r0]
  p->ref = 1;
9000e75c:	2301      	movs	r3, #1
9000e75e:	81c3      	strh	r3, [r0, #14]
}
9000e760:	bd70      	pop	{r4, r5, r6, pc}
9000e762:	bf00      	nop
9000e764:	9002ca1b 	.word	0x9002ca1b
9000e768:	9002ca7b 	.word	0x9002ca7b
9000e76c:	9002a254 	.word	0x9002a254

9000e770 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
9000e770:	3003      	adds	r0, #3
9000e772:	f020 0003 	bic.w	r0, r0, #3
{
9000e776:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
9000e778:	180e      	adds	r6, r1, r0
9000e77a:	f8bd 5014 	ldrh.w	r5, [sp, #20]
{
9000e77e:	9c04      	ldr	r4, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
9000e780:	42ae      	cmp	r6, r5
9000e782:	d80d      	bhi.n	9000e7a0 <pbuf_alloced_custom+0x30>
  if (payload_mem != NULL) {
9000e784:	b104      	cbz	r4, 9000e788 <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
9000e786:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
9000e788:	4618      	mov	r0, r3
  p->next = NULL;
9000e78a:	2300      	movs	r3, #0
  p->payload = payload;
9000e78c:	e9c0 3400 	strd	r3, r4, [r0]
  p->flags = flags;
9000e790:	2302      	movs	r3, #2
  p->tot_len = tot_len;
9000e792:	8101      	strh	r1, [r0, #8]
  p->len = len;
9000e794:	8141      	strh	r1, [r0, #10]
  p->flags = flags;
9000e796:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
9000e798:	2301      	movs	r3, #1
  p->type_internal = (u8_t)type;
9000e79a:	7302      	strb	r2, [r0, #12]
  p->ref = 1;
9000e79c:	81c3      	strh	r3, [r0, #14]
}
9000e79e:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
9000e7a0:	2000      	movs	r0, #0
9000e7a2:	e7fc      	b.n	9000e79e <pbuf_alloced_custom+0x2e>

9000e7a4 <pbuf_add_header>:
  return pbuf_add_header_impl(p, header_size_increment, 0);
9000e7a4:	2200      	movs	r2, #0
9000e7a6:	f7ff bf8d 	b.w	9000e6c4 <pbuf_add_header_impl>
	...

9000e7ac <pbuf_remove_header>:
{
9000e7ac:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
9000e7ae:	b990      	cbnz	r0, 9000e7d6 <pbuf_remove_header+0x2a>
9000e7b0:	4b10      	ldr	r3, [pc, #64]	; (9000e7f4 <pbuf_remove_header+0x48>)
9000e7b2:	f240 224b 	movw	r2, #587	; 0x24b
9000e7b6:	4910      	ldr	r1, [pc, #64]	; (9000e7f8 <pbuf_remove_header+0x4c>)
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
9000e7b8:	4810      	ldr	r0, [pc, #64]	; (9000e7fc <pbuf_remove_header+0x50>)
9000e7ba:	f01a fe89 	bl	900294d0 <iprintf>
    return 1;
9000e7be:	2001      	movs	r0, #1
9000e7c0:	e008      	b.n	9000e7d4 <pbuf_remove_header+0x28>
  p->len = (u16_t)(p->len - increment_magnitude);
9000e7c2:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
9000e7c4:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
9000e7c6:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
9000e7c8:	4421      	add	r1, r4
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
9000e7ca:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
9000e7cc:	6041      	str	r1, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
9000e7ce:	1a9b      	subs	r3, r3, r2
9000e7d0:	8103      	strh	r3, [r0, #8]
  return 0;
9000e7d2:	2000      	movs	r0, #0
}
9000e7d4:	bd10      	pop	{r4, pc}
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
9000e7d6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000e7da:	d2f0      	bcs.n	9000e7be <pbuf_remove_header+0x12>
  if (header_size_decrement == 0) {
9000e7dc:	2900      	cmp	r1, #0
9000e7de:	d0f8      	beq.n	9000e7d2 <pbuf_remove_header+0x26>
  increment_magnitude = (u16_t)header_size_decrement;
9000e7e0:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
9000e7e2:	8943      	ldrh	r3, [r0, #10]
9000e7e4:	4293      	cmp	r3, r2
9000e7e6:	d2ec      	bcs.n	9000e7c2 <pbuf_remove_header+0x16>
9000e7e8:	4b02      	ldr	r3, [pc, #8]	; (9000e7f4 <pbuf_remove_header+0x48>)
9000e7ea:	f240 2255 	movw	r2, #597	; 0x255
9000e7ee:	4904      	ldr	r1, [pc, #16]	; (9000e800 <pbuf_remove_header+0x54>)
9000e7f0:	e7e2      	b.n	9000e7b8 <pbuf_remove_header+0xc>
9000e7f2:	bf00      	nop
9000e7f4:	9002ca1b 	.word	0x9002ca1b
9000e7f8:	9002cb1d 	.word	0x9002cb1d
9000e7fc:	9002a254 	.word	0x9002a254
9000e800:	9002ca8d 	.word	0x9002ca8d

9000e804 <pbuf_header_force>:
  if (header_size_increment < 0) {
9000e804:	1e0b      	subs	r3, r1, #0
9000e806:	da02      	bge.n	9000e80e <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
9000e808:	4259      	negs	r1, r3
9000e80a:	f7ff bfcf 	b.w	9000e7ac <pbuf_remove_header>
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
9000e80e:	2201      	movs	r2, #1
9000e810:	f7ff bf58 	b.w	9000e6c4 <pbuf_add_header_impl>

9000e814 <pbuf_free>:
{
9000e814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (p == NULL) {
9000e818:	4604      	mov	r4, r0
9000e81a:	b950      	cbnz	r0, 9000e832 <pbuf_free+0x1e>
    return 0;
9000e81c:	4625      	mov	r5, r4
    LWIP_ASSERT("p != NULL", p != NULL);
9000e81e:	4b2b      	ldr	r3, [pc, #172]	; (9000e8cc <pbuf_free+0xb8>)
9000e820:	f44f 7237 	mov.w	r2, #732	; 0x2dc
9000e824:	492a      	ldr	r1, [pc, #168]	; (9000e8d0 <pbuf_free+0xbc>)
9000e826:	482b      	ldr	r0, [pc, #172]	; (9000e8d4 <pbuf_free+0xc0>)
9000e828:	f01a fe52 	bl	900294d0 <iprintf>
}
9000e82c:	4628      	mov	r0, r5
9000e82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  count = 0;
9000e832:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
9000e834:	4f25      	ldr	r7, [pc, #148]	; (9000e8cc <pbuf_free+0xb8>)
9000e836:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 9000e8e0 <pbuf_free+0xcc>
9000e83a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 9000e8d4 <pbuf_free+0xc0>
    SYS_ARCH_PROTECT(old_level);
9000e83e:	f001 f915 	bl	9000fa6c <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
9000e842:	7ba3      	ldrb	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
9000e844:	4681      	mov	r9, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
9000e846:	b933      	cbnz	r3, 9000e856 <pbuf_free+0x42>
9000e848:	463b      	mov	r3, r7
9000e84a:	f240 22f1 	movw	r2, #753	; 0x2f1
9000e84e:	4651      	mov	r1, sl
9000e850:	4640      	mov	r0, r8
9000e852:	f01a fe3d 	bl	900294d0 <iprintf>
    ref = --(p->ref);
9000e856:	7ba6      	ldrb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
9000e858:	4648      	mov	r0, r9
    ref = --(p->ref);
9000e85a:	3e01      	subs	r6, #1
9000e85c:	b2f6      	uxtb	r6, r6
9000e85e:	73a6      	strb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
9000e860:	f001 f910 	bl	9000fa84 <sys_arch_unprotect>
    if (ref == 0) {
9000e864:	2e00      	cmp	r6, #0
9000e866:	d1e1      	bne.n	9000e82c <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
9000e868:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
9000e86a:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
9000e86c:	079b      	lsls	r3, r3, #30
9000e86e:	d511      	bpl.n	9000e894 <pbuf_free+0x80>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
9000e870:	6923      	ldr	r3, [r4, #16]
9000e872:	b933      	cbnz	r3, 9000e882 <pbuf_free+0x6e>
9000e874:	463b      	mov	r3, r7
9000e876:	f240 22ff 	movw	r2, #767	; 0x2ff
9000e87a:	4917      	ldr	r1, [pc, #92]	; (9000e8d8 <pbuf_free+0xc4>)
9000e87c:	4640      	mov	r0, r8
9000e87e:	f01a fe27 	bl	900294d0 <iprintf>
        pc->custom_free_function(p);
9000e882:	6923      	ldr	r3, [r4, #16]
9000e884:	4620      	mov	r0, r4
9000e886:	4798      	blx	r3
      count++;
9000e888:	3501      	adds	r5, #1
9000e88a:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
9000e88c:	2e00      	cmp	r6, #0
9000e88e:	d0cd      	beq.n	9000e82c <pbuf_free+0x18>
9000e890:	4634      	mov	r4, r6
9000e892:	e7d4      	b.n	9000e83e <pbuf_free+0x2a>
      alloc_src = pbuf_get_allocsrc(p);
9000e894:	7b23      	ldrb	r3, [r4, #12]
9000e896:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
9000e89a:	2b02      	cmp	r3, #2
9000e89c:	d104      	bne.n	9000e8a8 <pbuf_free+0x94>
          memp_free(MEMP_PBUF_POOL, p);
9000e89e:	4621      	mov	r1, r4
9000e8a0:	200d      	movs	r0, #13
          memp_free(MEMP_PBUF, p);
9000e8a2:	f7ff fccd 	bl	9000e240 <memp_free>
9000e8a6:	e7ef      	b.n	9000e888 <pbuf_free+0x74>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
9000e8a8:	2b01      	cmp	r3, #1
9000e8aa:	d102      	bne.n	9000e8b2 <pbuf_free+0x9e>
          memp_free(MEMP_PBUF, p);
9000e8ac:	4621      	mov	r1, r4
9000e8ae:	200c      	movs	r0, #12
9000e8b0:	e7f7      	b.n	9000e8a2 <pbuf_free+0x8e>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
9000e8b2:	b91b      	cbnz	r3, 9000e8bc <pbuf_free+0xa8>
          mem_free(p);
9000e8b4:	4620      	mov	r0, r4
9000e8b6:	f7ff fa03 	bl	9000dcc0 <mem_free>
9000e8ba:	e7e5      	b.n	9000e888 <pbuf_free+0x74>
          LWIP_ASSERT("invalid pbuf type", 0);
9000e8bc:	463b      	mov	r3, r7
9000e8be:	f240 320f 	movw	r2, #783	; 0x30f
9000e8c2:	4906      	ldr	r1, [pc, #24]	; (9000e8dc <pbuf_free+0xc8>)
9000e8c4:	4640      	mov	r0, r8
9000e8c6:	f01a fe03 	bl	900294d0 <iprintf>
9000e8ca:	e7dd      	b.n	9000e888 <pbuf_free+0x74>
9000e8cc:	9002ca1b 	.word	0x9002ca1b
9000e8d0:	9002cb1d 	.word	0x9002cb1d
9000e8d4:	9002a254 	.word	0x9002a254
9000e8d8:	9002cac1 	.word	0x9002cac1
9000e8dc:	9002cae2 	.word	0x9002cae2
9000e8e0:	9002caab 	.word	0x9002caab

9000e8e4 <pbuf_alloc>:
  switch (type) {
9000e8e4:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
9000e8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000e8ec:	4606      	mov	r6, r0
9000e8ee:	460f      	mov	r7, r1
  u16_t offset = (u16_t)layer;
9000e8f0:	b284      	uxth	r4, r0
  switch (type) {
9000e8f2:	d014      	beq.n	9000e91e <pbuf_alloc+0x3a>
9000e8f4:	d808      	bhi.n	9000e908 <pbuf_alloc+0x24>
9000e8f6:	f022 0340 	bic.w	r3, r2, #64	; 0x40
9000e8fa:	2b01      	cmp	r3, #1
9000e8fc:	d107      	bne.n	9000e90e <pbuf_alloc+0x2a>
      p = pbuf_alloc_reference(NULL, length, type);
9000e8fe:	2000      	movs	r0, #0
}
9000e900:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
9000e904:	f7ff bf10 	b.w	9000e728 <pbuf_alloc_reference>
  switch (type) {
9000e908:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
9000e90c:	d04e      	beq.n	9000e9ac <pbuf_alloc+0xc8>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
9000e90e:	4b37      	ldr	r3, [pc, #220]	; (9000e9ec <pbuf_alloc+0x108>)
9000e910:	f240 1227 	movw	r2, #295	; 0x127
9000e914:	4936      	ldr	r1, [pc, #216]	; (9000e9f0 <pbuf_alloc+0x10c>)
9000e916:	4837      	ldr	r0, [pc, #220]	; (9000e9f4 <pbuf_alloc+0x110>)
9000e918:	f01a fdda 	bl	900294d0 <iprintf>
9000e91c:	e01f      	b.n	9000e95e <pbuf_alloc+0x7a>
  switch (type) {
9000e91e:	2600      	movs	r6, #0
  p->type_internal = (u8_t)type;
9000e920:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 9000ea04 <pbuf_alloc+0x120>
  switch (type) {
9000e924:	4635      	mov	r5, r6
  p->next = NULL;
9000e926:	46b0      	mov	r8, r6
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
9000e928:	200d      	movs	r0, #13
9000e92a:	46b2      	mov	sl, r6
9000e92c:	f7ff fc6c 	bl	9000e208 <memp_malloc>
        if (q == NULL) {
9000e930:	4606      	mov	r6, r0
9000e932:	b9d0      	cbnz	r0, 9000e96a <pbuf_alloc+0x86>
  queued = pbuf_free_ooseq_pending;
9000e934:	4c30      	ldr	r4, [pc, #192]	; (9000e9f8 <pbuf_alloc+0x114>)
  SYS_ARCH_PROTECT(old_level);
9000e936:	f001 f899 	bl	9000fa6c <sys_arch_protect>
  pbuf_free_ooseq_pending = 1;
9000e93a:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
9000e93c:	7827      	ldrb	r7, [r4, #0]
  pbuf_free_ooseq_pending = 1;
9000e93e:	7023      	strb	r3, [r4, #0]
  queued = pbuf_free_ooseq_pending;
9000e940:	b2ff      	uxtb	r7, r7
  SYS_ARCH_UNPROTECT(old_level);
9000e942:	f001 f89f 	bl	9000fa84 <sys_arch_unprotect>
  if (!queued) {
9000e946:	b94f      	cbnz	r7, 9000e95c <pbuf_alloc+0x78>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
9000e948:	4631      	mov	r1, r6
9000e94a:	482c      	ldr	r0, [pc, #176]	; (9000e9fc <pbuf_alloc+0x118>)
9000e94c:	f004 fe14 	bl	90013578 <tcpip_try_callback>
9000e950:	b120      	cbz	r0, 9000e95c <pbuf_alloc+0x78>
9000e952:	f001 f88b 	bl	9000fa6c <sys_arch_protect>
9000e956:	7026      	strb	r6, [r4, #0]
9000e958:	f001 f894 	bl	9000fa84 <sys_arch_unprotect>
          if (p) {
9000e95c:	b90d      	cbnz	r5, 9000e962 <pbuf_alloc+0x7e>
      return NULL;
9000e95e:	2500      	movs	r5, #0
9000e960:	e01f      	b.n	9000e9a2 <pbuf_alloc+0xbe>
            pbuf_free(p);
9000e962:	4628      	mov	r0, r5
9000e964:	f7ff ff56 	bl	9000e814 <pbuf_free>
9000e968:	e7f9      	b.n	9000e95e <pbuf_alloc+0x7a>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
9000e96a:	1ce3      	adds	r3, r4, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
9000e96c:	4404      	add	r4, r0
  p->next = NULL;
9000e96e:	f8c0 8000 	str.w	r8, [r0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
9000e972:	f023 0303 	bic.w	r3, r3, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
9000e976:	3413      	adds	r4, #19
  p->tot_len = tot_len;
9000e978:	8107      	strh	r7, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
9000e97a:	f5c3 7301 	rsb	r3, r3, #516	; 0x204
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
9000e97e:	f024 0403 	bic.w	r4, r4, #3
  p->type_internal = (u8_t)type;
9000e982:	f8c0 900c 	str.w	r9, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
9000e986:	b29b      	uxth	r3, r3
  p->payload = payload;
9000e988:	6044      	str	r4, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
9000e98a:	42bb      	cmp	r3, r7
9000e98c:	bf28      	it	cs
9000e98e:	463b      	movcs	r3, r7
  p->len = len;
9000e990:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
9000e992:	b14d      	cbz	r5, 9000e9a8 <pbuf_alloc+0xc4>
          last->next = q;
9000e994:	f8ca 0000 	str.w	r0, [sl]
        rem_len = (u16_t)(rem_len - qlen);
9000e998:	1afb      	subs	r3, r7, r3
        offset = 0;
9000e99a:	2400      	movs	r4, #0
        rem_len = (u16_t)(rem_len - qlen);
9000e99c:	b29f      	uxth	r7, r3
      } while (rem_len > 0);
9000e99e:	2f00      	cmp	r7, #0
9000e9a0:	d1c2      	bne.n	9000e928 <pbuf_alloc+0x44>
}
9000e9a2:	4628      	mov	r0, r5
9000e9a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000e9a8:	4605      	mov	r5, r0
9000e9aa:	e7f5      	b.n	9000e998 <pbuf_alloc+0xb4>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
9000e9ac:	3403      	adds	r4, #3
9000e9ae:	1ccb      	adds	r3, r1, #3
9000e9b0:	f024 0403 	bic.w	r4, r4, #3
9000e9b4:	f023 0303 	bic.w	r3, r3, #3
9000e9b8:	441c      	add	r4, r3
9000e9ba:	b2a4      	uxth	r4, r4
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
9000e9bc:	f104 0010 	add.w	r0, r4, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
9000e9c0:	429c      	cmp	r4, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
9000e9c2:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
9000e9c4:	d3cb      	bcc.n	9000e95e <pbuf_alloc+0x7a>
9000e9c6:	4283      	cmp	r3, r0
9000e9c8:	d8c9      	bhi.n	9000e95e <pbuf_alloc+0x7a>
      p = (struct pbuf *)mem_malloc(alloc_len);
9000e9ca:	f7ff fb11 	bl	9000dff0 <mem_malloc>
      if (p == NULL) {
9000e9ce:	4605      	mov	r5, r0
9000e9d0:	2800      	cmp	r0, #0
9000e9d2:	d0e6      	beq.n	9000e9a2 <pbuf_alloc+0xbe>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
9000e9d4:	4406      	add	r6, r0
  p->next = NULL;
9000e9d6:	2300      	movs	r3, #0
  p->tot_len = tot_len;
9000e9d8:	8107      	strh	r7, [r0, #8]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
9000e9da:	3613      	adds	r6, #19
  p->next = NULL;
9000e9dc:	6003      	str	r3, [r0, #0]
  p->type_internal = (u8_t)type;
9000e9de:	4b08      	ldr	r3, [pc, #32]	; (9000ea00 <pbuf_alloc+0x11c>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
9000e9e0:	f026 0603 	bic.w	r6, r6, #3
  p->len = len;
9000e9e4:	8147      	strh	r7, [r0, #10]
  p->type_internal = (u8_t)type;
9000e9e6:	60c3      	str	r3, [r0, #12]
  p->payload = payload;
9000e9e8:	6046      	str	r6, [r0, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
9000e9ea:	e7da      	b.n	9000e9a2 <pbuf_alloc+0xbe>
9000e9ec:	9002ca1b 	.word	0x9002ca1b
9000e9f0:	9002caf4 	.word	0x9002caf4
9000e9f4:	9002a254 	.word	0x9002a254
9000e9f8:	2002cb5c 	.word	0x2002cb5c
9000e9fc:	9000e695 	.word	0x9000e695
9000ea00:	00010080 	.word	0x00010080
9000ea04:	00010082 	.word	0x00010082

9000ea08 <pbuf_realloc>:
{
9000ea08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000ea0c:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
9000ea0e:	4604      	mov	r4, r0
9000ea10:	b930      	cbnz	r0, 9000ea20 <pbuf_realloc+0x18>
9000ea12:	4b24      	ldr	r3, [pc, #144]	; (9000eaa4 <pbuf_realloc+0x9c>)
9000ea14:	f44f 72cc 	mov.w	r2, #408	; 0x198
9000ea18:	4923      	ldr	r1, [pc, #140]	; (9000eaa8 <pbuf_realloc+0xa0>)
9000ea1a:	4824      	ldr	r0, [pc, #144]	; (9000eaac <pbuf_realloc+0xa4>)
9000ea1c:	f01a fd58 	bl	900294d0 <iprintf>
  if (new_len >= p->tot_len) {
9000ea20:	8927      	ldrh	r7, [r4, #8]
9000ea22:	42b7      	cmp	r7, r6
9000ea24:	d93c      	bls.n	9000eaa0 <pbuf_realloc+0x98>
9000ea26:	4635      	mov	r5, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
9000ea28:	f8df 8078 	ldr.w	r8, [pc, #120]	; 9000eaa4 <pbuf_realloc+0x9c>
9000ea2c:	f8df a084 	ldr.w	sl, [pc, #132]	; 9000eab4 <pbuf_realloc+0xac>
9000ea30:	f8df 9078 	ldr.w	r9, [pc, #120]	; 9000eaac <pbuf_realloc+0xa4>
  while (rem_len > q->len) {
9000ea34:	8962      	ldrh	r2, [r4, #10]
9000ea36:	42aa      	cmp	r2, r5
9000ea38:	d319      	bcc.n	9000ea6e <pbuf_realloc+0x66>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
9000ea3a:	7b23      	ldrb	r3, [r4, #12]
9000ea3c:	0719      	lsls	r1, r3, #28
9000ea3e:	d127      	bne.n	9000ea90 <pbuf_realloc+0x88>
9000ea40:	42aa      	cmp	r2, r5
9000ea42:	d025      	beq.n	9000ea90 <pbuf_realloc+0x88>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
9000ea44:	7b63      	ldrb	r3, [r4, #13]
9000ea46:	079b      	lsls	r3, r3, #30
9000ea48:	d422      	bmi.n	9000ea90 <pbuf_realloc+0x88>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
9000ea4a:	6861      	ldr	r1, [r4, #4]
9000ea4c:	4620      	mov	r0, r4
9000ea4e:	1b09      	subs	r1, r1, r4
9000ea50:	4429      	add	r1, r5
9000ea52:	b289      	uxth	r1, r1
9000ea54:	f7ff fa12 	bl	9000de7c <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
9000ea58:	4604      	mov	r4, r0
9000ea5a:	b9c8      	cbnz	r0, 9000ea90 <pbuf_realloc+0x88>
9000ea5c:	4b11      	ldr	r3, [pc, #68]	; (9000eaa4 <pbuf_realloc+0x9c>)
9000ea5e:	f240 12bd 	movw	r2, #445	; 0x1bd
9000ea62:	4913      	ldr	r1, [pc, #76]	; (9000eab0 <pbuf_realloc+0xa8>)
9000ea64:	4811      	ldr	r0, [pc, #68]	; (9000eaac <pbuf_realloc+0xa4>)
9000ea66:	f01a fd33 	bl	900294d0 <iprintf>
  q->len = rem_len;
9000ea6a:	8164      	strh	r4, [r4, #10]
9000ea6c:	deff      	udf	#255	; 0xff
    rem_len = (u16_t)(rem_len - q->len);
9000ea6e:	1aad      	subs	r5, r5, r2
    q->tot_len = (u16_t)(q->tot_len - shrink);
9000ea70:	1bf3      	subs	r3, r6, r7
9000ea72:	8922      	ldrh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
9000ea74:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
9000ea76:	4413      	add	r3, r2
9000ea78:	8123      	strh	r3, [r4, #8]
    q = q->next;
9000ea7a:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
9000ea7c:	2c00      	cmp	r4, #0
9000ea7e:	d1d9      	bne.n	9000ea34 <pbuf_realloc+0x2c>
9000ea80:	4643      	mov	r3, r8
9000ea82:	f240 12af 	movw	r2, #431	; 0x1af
9000ea86:	4651      	mov	r1, sl
9000ea88:	4648      	mov	r0, r9
9000ea8a:	f01a fd21 	bl	900294d0 <iprintf>
9000ea8e:	e7d1      	b.n	9000ea34 <pbuf_realloc+0x2c>
  if (q->next != NULL) {
9000ea90:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
9000ea92:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
9000ea94:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
9000ea96:	b108      	cbz	r0, 9000ea9c <pbuf_realloc+0x94>
    pbuf_free(q->next);
9000ea98:	f7ff febc 	bl	9000e814 <pbuf_free>
  q->next = NULL;
9000ea9c:	2300      	movs	r3, #0
9000ea9e:	6023      	str	r3, [r4, #0]
}
9000eaa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000eaa4:	9002ca1b 	.word	0x9002ca1b
9000eaa8:	9002cb0f 	.word	0x9002cb0f
9000eaac:	9002a254 	.word	0x9002a254
9000eab0:	9002cb3f 	.word	0x9002cb3f
9000eab4:	9002cb27 	.word	0x9002cb27

9000eab8 <pbuf_free_header>:
{
9000eab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000eaba:	460d      	mov	r5, r1
  struct pbuf *p = q;
9000eabc:	4604      	mov	r4, r0
      f->next = 0;
9000eabe:	2600      	movs	r6, #0
  while (free_left && p) {
9000eac0:	b185      	cbz	r5, 9000eae4 <pbuf_free_header+0x2c>
9000eac2:	b17c      	cbz	r4, 9000eae4 <pbuf_free_header+0x2c>
    if (free_left >= p->len) {
9000eac4:	8961      	ldrh	r1, [r4, #10]
9000eac6:	42a9      	cmp	r1, r5
9000eac8:	d808      	bhi.n	9000eadc <pbuf_free_header+0x24>
      p = p->next;
9000eaca:	6827      	ldr	r7, [r4, #0]
      free_left = (u16_t)(free_left - p->len);
9000eacc:	1a6d      	subs	r5, r5, r1
      pbuf_free(f);
9000eace:	4620      	mov	r0, r4
      f->next = 0;
9000ead0:	6026      	str	r6, [r4, #0]
      free_left = (u16_t)(free_left - p->len);
9000ead2:	b2ad      	uxth	r5, r5
      p = p->next;
9000ead4:	463c      	mov	r4, r7
      pbuf_free(f);
9000ead6:	f7ff fe9d 	bl	9000e814 <pbuf_free>
9000eada:	e7f1      	b.n	9000eac0 <pbuf_free_header+0x8>
      pbuf_remove_header(p, free_left);
9000eadc:	4629      	mov	r1, r5
9000eade:	4620      	mov	r0, r4
9000eae0:	f7ff fe64 	bl	9000e7ac <pbuf_remove_header>
}
9000eae4:	4620      	mov	r0, r4
9000eae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

9000eae8 <pbuf_clen>:
{
9000eae8:	4603      	mov	r3, r0
  while (p != NULL) {
9000eaea:	2200      	movs	r2, #0
9000eaec:	b290      	uxth	r0, r2
9000eaee:	3201      	adds	r2, #1
9000eaf0:	b903      	cbnz	r3, 9000eaf4 <pbuf_clen+0xc>
}
9000eaf2:	4770      	bx	lr
    p = p->next;
9000eaf4:	681b      	ldr	r3, [r3, #0]
9000eaf6:	e7f9      	b.n	9000eaec <pbuf_clen+0x4>

9000eaf8 <pbuf_ref>:
{
9000eaf8:	b510      	push	{r4, lr}
  if (p != NULL) {
9000eafa:	4604      	mov	r4, r0
9000eafc:	b188      	cbz	r0, 9000eb22 <pbuf_ref+0x2a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
9000eafe:	f000 ffb5 	bl	9000fa6c <sys_arch_protect>
9000eb02:	7ba3      	ldrb	r3, [r4, #14]
9000eb04:	3301      	adds	r3, #1
9000eb06:	73a3      	strb	r3, [r4, #14]
9000eb08:	f000 ffbc 	bl	9000fa84 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
9000eb0c:	7ba3      	ldrb	r3, [r4, #14]
9000eb0e:	b943      	cbnz	r3, 9000eb22 <pbuf_ref+0x2a>
9000eb10:	4b04      	ldr	r3, [pc, #16]	; (9000eb24 <pbuf_ref+0x2c>)
9000eb12:	f240 3242 	movw	r2, #834	; 0x342
9000eb16:	4904      	ldr	r1, [pc, #16]	; (9000eb28 <pbuf_ref+0x30>)
9000eb18:	4804      	ldr	r0, [pc, #16]	; (9000eb2c <pbuf_ref+0x34>)
}
9000eb1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
9000eb1e:	f01a bcd7 	b.w	900294d0 <iprintf>
}
9000eb22:	bd10      	pop	{r4, pc}
9000eb24:	9002ca1b 	.word	0x9002ca1b
9000eb28:	9002cb5b 	.word	0x9002cb5b
9000eb2c:	9002a254 	.word	0x9002a254

9000eb30 <pbuf_cat>:
{
9000eb30:	b570      	push	{r4, r5, r6, lr}
9000eb32:	460d      	mov	r5, r1
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
9000eb34:	4604      	mov	r4, r0
9000eb36:	b100      	cbz	r0, 9000eb3a <pbuf_cat+0xa>
9000eb38:	b961      	cbnz	r1, 9000eb54 <pbuf_cat+0x24>
9000eb3a:	4b15      	ldr	r3, [pc, #84]	; (9000eb90 <pbuf_cat+0x60>)
9000eb3c:	f240 3259 	movw	r2, #857	; 0x359
9000eb40:	4914      	ldr	r1, [pc, #80]	; (9000eb94 <pbuf_cat+0x64>)
9000eb42:	4815      	ldr	r0, [pc, #84]	; (9000eb98 <pbuf_cat+0x68>)
}
9000eb44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
9000eb48:	f01a bcc2 	b.w	900294d0 <iprintf>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
9000eb4c:	8929      	ldrh	r1, [r5, #8]
9000eb4e:	440b      	add	r3, r1
9000eb50:	8123      	strh	r3, [r4, #8]
9000eb52:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
9000eb54:	6822      	ldr	r2, [r4, #0]
9000eb56:	8923      	ldrh	r3, [r4, #8]
9000eb58:	2a00      	cmp	r2, #0
9000eb5a:	d1f7      	bne.n	9000eb4c <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
9000eb5c:	8962      	ldrh	r2, [r4, #10]
9000eb5e:	429a      	cmp	r2, r3
9000eb60:	d00f      	beq.n	9000eb82 <pbuf_cat+0x52>
9000eb62:	4b0b      	ldr	r3, [pc, #44]	; (9000eb90 <pbuf_cat+0x60>)
9000eb64:	f240 3262 	movw	r2, #866	; 0x362
9000eb68:	490c      	ldr	r1, [pc, #48]	; (9000eb9c <pbuf_cat+0x6c>)
9000eb6a:	480b      	ldr	r0, [pc, #44]	; (9000eb98 <pbuf_cat+0x68>)
9000eb6c:	f01a fcb0 	bl	900294d0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
9000eb70:	6823      	ldr	r3, [r4, #0]
9000eb72:	b133      	cbz	r3, 9000eb82 <pbuf_cat+0x52>
9000eb74:	4b06      	ldr	r3, [pc, #24]	; (9000eb90 <pbuf_cat+0x60>)
9000eb76:	f240 3263 	movw	r2, #867	; 0x363
9000eb7a:	4909      	ldr	r1, [pc, #36]	; (9000eba0 <pbuf_cat+0x70>)
9000eb7c:	4806      	ldr	r0, [pc, #24]	; (9000eb98 <pbuf_cat+0x68>)
9000eb7e:	f01a fca7 	bl	900294d0 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
9000eb82:	892a      	ldrh	r2, [r5, #8]
9000eb84:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
9000eb86:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
9000eb88:	4413      	add	r3, r2
9000eb8a:	8123      	strh	r3, [r4, #8]
}
9000eb8c:	bd70      	pop	{r4, r5, r6, pc}
9000eb8e:	bf00      	nop
9000eb90:	9002ca1b 	.word	0x9002ca1b
9000eb94:	9002cb6d 	.word	0x9002cb6d
9000eb98:	9002a254 	.word	0x9002a254
9000eb9c:	9002cba2 	.word	0x9002cba2
9000eba0:	9002cbcf 	.word	0x9002cbcf

9000eba4 <pbuf_chain>:
{
9000eba4:	b510      	push	{r4, lr}
9000eba6:	460c      	mov	r4, r1
  pbuf_cat(h, t);
9000eba8:	f7ff ffc2 	bl	9000eb30 <pbuf_cat>
  pbuf_ref(t);
9000ebac:	4620      	mov	r0, r4
}
9000ebae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
9000ebb2:	f7ff bfa1 	b.w	9000eaf8 <pbuf_ref>
	...

9000ebb8 <pbuf_copy>:
{
9000ebb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000ebbc:	460c      	mov	r4, r1
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
9000ebbe:	4605      	mov	r5, r0
9000ebc0:	b120      	cbz	r0, 9000ebcc <pbuf_copy+0x14>
9000ebc2:	b119      	cbz	r1, 9000ebcc <pbuf_copy+0x14>
9000ebc4:	8902      	ldrh	r2, [r0, #8]
9000ebc6:	890b      	ldrh	r3, [r1, #8]
9000ebc8:	429a      	cmp	r2, r3
9000ebca:	d20a      	bcs.n	9000ebe2 <pbuf_copy+0x2a>
9000ebcc:	4b34      	ldr	r3, [pc, #208]	; (9000eca0 <pbuf_copy+0xe8>)
9000ebce:	f240 32c9 	movw	r2, #969	; 0x3c9
9000ebd2:	4934      	ldr	r1, [pc, #208]	; (9000eca4 <pbuf_copy+0xec>)
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
9000ebd4:	4834      	ldr	r0, [pc, #208]	; (9000eca8 <pbuf_copy+0xf0>)
9000ebd6:	f01a fc7b 	bl	900294d0 <iprintf>
9000ebda:	f06f 000f 	mvn.w	r0, #15
}
9000ebde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t offset_to = 0, offset_from = 0, len;
9000ebe2:	2600      	movs	r6, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
9000ebe4:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 9000eca0 <pbuf_copy+0xe8>
9000ebe8:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 9000ecb8 <pbuf_copy+0x100>
  size_t offset_to = 0, offset_from = 0, len;
9000ebec:	4637      	mov	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
9000ebee:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 9000eca8 <pbuf_copy+0xf0>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
9000ebf2:	f8b5 800a 	ldrh.w	r8, [r5, #10]
9000ebf6:	8962      	ldrh	r2, [r4, #10]
9000ebf8:	eba8 0807 	sub.w	r8, r8, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
9000ebfc:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
9000ebfe:	1b92      	subs	r2, r2, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
9000ec00:	6861      	ldr	r1, [r4, #4]
9000ec02:	4438      	add	r0, r7
9000ec04:	4590      	cmp	r8, r2
9000ec06:	4431      	add	r1, r6
9000ec08:	bf28      	it	cs
9000ec0a:	4690      	movcs	r8, r2
9000ec0c:	4642      	mov	r2, r8
    offset_to += len;
9000ec0e:	4447      	add	r7, r8
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
9000ec10:	f01a f896 	bl	90028d40 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
9000ec14:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
9000ec16:	4446      	add	r6, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
9000ec18:	429f      	cmp	r7, r3
9000ec1a:	d906      	bls.n	9000ec2a <pbuf_copy+0x72>
9000ec1c:	465b      	mov	r3, fp
9000ec1e:	f240 32d9 	movw	r2, #985	; 0x3d9
9000ec22:	4651      	mov	r1, sl
9000ec24:	4648      	mov	r0, r9
9000ec26:	f01a fc53 	bl	900294d0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
9000ec2a:	8963      	ldrh	r3, [r4, #10]
9000ec2c:	429e      	cmp	r6, r3
9000ec2e:	d906      	bls.n	9000ec3e <pbuf_copy+0x86>
9000ec30:	465b      	mov	r3, fp
9000ec32:	f240 32da 	movw	r2, #986	; 0x3da
9000ec36:	491d      	ldr	r1, [pc, #116]	; (9000ecac <pbuf_copy+0xf4>)
9000ec38:	4648      	mov	r0, r9
9000ec3a:	f01a fc49 	bl	900294d0 <iprintf>
    if (offset_from >= p_from->len) {
9000ec3e:	8963      	ldrh	r3, [r4, #10]
9000ec40:	429e      	cmp	r6, r3
    if (offset_to == p_to->len) {
9000ec42:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
9000ec44:	bf24      	itt	cs
9000ec46:	6824      	ldrcs	r4, [r4, #0]
      offset_from = 0;
9000ec48:	2600      	movcs	r6, #0
    if (offset_to == p_to->len) {
9000ec4a:	429f      	cmp	r7, r3
9000ec4c:	d108      	bne.n	9000ec60 <pbuf_copy+0xa8>
      p_to = p_to->next;
9000ec4e:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
9000ec50:	b92d      	cbnz	r5, 9000ec5e <pbuf_copy+0xa6>
9000ec52:	b314      	cbz	r4, 9000ec9a <pbuf_copy+0xe2>
9000ec54:	4b12      	ldr	r3, [pc, #72]	; (9000eca0 <pbuf_copy+0xe8>)
9000ec56:	f44f 7279 	mov.w	r2, #996	; 0x3e4
9000ec5a:	4915      	ldr	r1, [pc, #84]	; (9000ecb0 <pbuf_copy+0xf8>)
9000ec5c:	e7ba      	b.n	9000ebd4 <pbuf_copy+0x1c>
      offset_to = 0;
9000ec5e:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
9000ec60:	b17c      	cbz	r4, 9000ec82 <pbuf_copy+0xca>
9000ec62:	8962      	ldrh	r2, [r4, #10]
9000ec64:	8923      	ldrh	r3, [r4, #8]
9000ec66:	429a      	cmp	r2, r3
9000ec68:	d10b      	bne.n	9000ec82 <pbuf_copy+0xca>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
9000ec6a:	6823      	ldr	r3, [r4, #0]
9000ec6c:	b14b      	cbz	r3, 9000ec82 <pbuf_copy+0xca>
9000ec6e:	4b0c      	ldr	r3, [pc, #48]	; (9000eca0 <pbuf_copy+0xe8>)
9000ec70:	f240 32e9 	movw	r2, #1001	; 0x3e9
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
9000ec74:	490f      	ldr	r1, [pc, #60]	; (9000ecb4 <pbuf_copy+0xfc>)
9000ec76:	480c      	ldr	r0, [pc, #48]	; (9000eca8 <pbuf_copy+0xf0>)
9000ec78:	f01a fc2a 	bl	900294d0 <iprintf>
9000ec7c:	f06f 0005 	mvn.w	r0, #5
9000ec80:	e7ad      	b.n	9000ebde <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
9000ec82:	896a      	ldrh	r2, [r5, #10]
9000ec84:	892b      	ldrh	r3, [r5, #8]
9000ec86:	429a      	cmp	r2, r3
9000ec88:	d105      	bne.n	9000ec96 <pbuf_copy+0xde>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
9000ec8a:	682b      	ldr	r3, [r5, #0]
9000ec8c:	b11b      	cbz	r3, 9000ec96 <pbuf_copy+0xde>
9000ec8e:	4b04      	ldr	r3, [pc, #16]	; (9000eca0 <pbuf_copy+0xe8>)
9000ec90:	f240 32ee 	movw	r2, #1006	; 0x3ee
9000ec94:	e7ee      	b.n	9000ec74 <pbuf_copy+0xbc>
  } while (p_from);
9000ec96:	2c00      	cmp	r4, #0
9000ec98:	d1ab      	bne.n	9000ebf2 <pbuf_copy+0x3a>
  return ERR_OK;
9000ec9a:	4620      	mov	r0, r4
9000ec9c:	e79f      	b.n	9000ebde <pbuf_copy+0x26>
9000ec9e:	bf00      	nop
9000eca0:	9002ca1b 	.word	0x9002ca1b
9000eca4:	9002cbdf 	.word	0x9002cbdf
9000eca8:	9002a254 	.word	0x9002a254
9000ecac:	9002cc26 	.word	0x9002cc26
9000ecb0:	9002cc41 	.word	0x9002cc41
9000ecb4:	9002cc4e 	.word	0x9002cc4e
9000ecb8:	9002cc0f 	.word	0x9002cc0f

9000ecbc <pbuf_copy_partial>:
{
9000ecbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000ecc0:	4688      	mov	r8, r1
9000ecc2:	4691      	mov	r9, r2
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
9000ecc4:	4606      	mov	r6, r0
9000ecc6:	b950      	cbnz	r0, 9000ecde <pbuf_copy_partial+0x22>
9000ecc8:	4637      	mov	r7, r6
9000ecca:	4b1b      	ldr	r3, [pc, #108]	; (9000ed38 <pbuf_copy_partial+0x7c>)
9000eccc:	f240 420a 	movw	r2, #1034	; 0x40a
9000ecd0:	491a      	ldr	r1, [pc, #104]	; (9000ed3c <pbuf_copy_partial+0x80>)
9000ecd2:	481b      	ldr	r0, [pc, #108]	; (9000ed40 <pbuf_copy_partial+0x84>)
9000ecd4:	f01a fbfc 	bl	900294d0 <iprintf>
}
9000ecd8:	4638      	mov	r0, r7
9000ecda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
9000ecde:	bb49      	cbnz	r1, 9000ed34 <pbuf_copy_partial+0x78>
9000ece0:	4b15      	ldr	r3, [pc, #84]	; (9000ed38 <pbuf_copy_partial+0x7c>)
9000ece2:	f240 420b 	movw	r2, #1035	; 0x40b
9000ece6:	4917      	ldr	r1, [pc, #92]	; (9000ed44 <pbuf_copy_partial+0x88>)
9000ece8:	4647      	mov	r7, r8
9000ecea:	4815      	ldr	r0, [pc, #84]	; (9000ed40 <pbuf_copy_partial+0x84>)
9000ecec:	f01a fbf0 	bl	900294d0 <iprintf>
9000ecf0:	e7f2      	b.n	9000ecd8 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
9000ecf2:	8975      	ldrh	r5, [r6, #10]
9000ecf4:	b153      	cbz	r3, 9000ed0c <pbuf_copy_partial+0x50>
9000ecf6:	42ab      	cmp	r3, r5
9000ecf8:	d308      	bcc.n	9000ed0c <pbuf_copy_partial+0x50>
      offset = (u16_t)(offset - p->len);
9000ecfa:	1b5b      	subs	r3, r3, r5
9000ecfc:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
9000ecfe:	6836      	ldr	r6, [r6, #0]
9000ed00:	f1b9 0f00 	cmp.w	r9, #0
9000ed04:	d0e8      	beq.n	9000ecd8 <pbuf_copy_partial+0x1c>
9000ed06:	2e00      	cmp	r6, #0
9000ed08:	d1f3      	bne.n	9000ecf2 <pbuf_copy_partial+0x36>
9000ed0a:	e7e5      	b.n	9000ecd8 <pbuf_copy_partial+0x1c>
      buf_copy_len = (u16_t)(p->len - offset);
9000ed0c:	1aec      	subs	r4, r5, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
9000ed0e:	6871      	ldr	r1, [r6, #4]
9000ed10:	eb08 0007 	add.w	r0, r8, r7
      buf_copy_len = (u16_t)(p->len - offset);
9000ed14:	b2a4      	uxth	r4, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
9000ed16:	4419      	add	r1, r3
9000ed18:	454c      	cmp	r4, r9
9000ed1a:	bf28      	it	cs
9000ed1c:	464c      	movcs	r4, r9
9000ed1e:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
9000ed20:	4427      	add	r7, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
9000ed22:	f01a f80d 	bl	90028d40 <memcpy>
      len = (u16_t)(len - buf_copy_len);
9000ed26:	eba9 0204 	sub.w	r2, r9, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
9000ed2a:	b2bf      	uxth	r7, r7
      offset = 0;
9000ed2c:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
9000ed2e:	fa1f f982 	uxth.w	r9, r2
      offset = 0;
9000ed32:	e7e4      	b.n	9000ecfe <pbuf_copy_partial+0x42>
  u16_t left = 0;
9000ed34:	2700      	movs	r7, #0
9000ed36:	e7e3      	b.n	9000ed00 <pbuf_copy_partial+0x44>
9000ed38:	9002ca1b 	.word	0x9002ca1b
9000ed3c:	9002cc78 	.word	0x9002cc78
9000ed40:	9002a254 	.word	0x9002a254
9000ed44:	9002cc97 	.word	0x9002cc97

9000ed48 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
9000ed48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000ed4c:	4689      	mov	r9, r1
9000ed4e:	4616      	mov	r6, r2
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
9000ed50:	4605      	mov	r5, r0
9000ed52:	b950      	cbnz	r0, 9000ed6a <pbuf_take+0x22>
9000ed54:	4b24      	ldr	r3, [pc, #144]	; (9000ede8 <pbuf_take+0xa0>)
9000ed56:	f240 42b3 	movw	r2, #1203	; 0x4b3
9000ed5a:	4924      	ldr	r1, [pc, #144]	; (9000edec <pbuf_take+0xa4>)
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
9000ed5c:	4824      	ldr	r0, [pc, #144]	; (9000edf0 <pbuf_take+0xa8>)
9000ed5e:	f01a fbb7 	bl	900294d0 <iprintf>
9000ed62:	f06f 000f 	mvn.w	r0, #15
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
  return ERR_OK;
}
9000ed66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
9000ed6a:	b921      	cbnz	r1, 9000ed76 <pbuf_take+0x2e>
9000ed6c:	4b1e      	ldr	r3, [pc, #120]	; (9000ede8 <pbuf_take+0xa0>)
9000ed6e:	f240 42b4 	movw	r2, #1204	; 0x4b4
9000ed72:	4920      	ldr	r1, [pc, #128]	; (9000edf4 <pbuf_take+0xac>)
9000ed74:	e7f2      	b.n	9000ed5c <pbuf_take+0x14>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
9000ed76:	8903      	ldrh	r3, [r0, #8]
9000ed78:	4293      	cmp	r3, r2
9000ed7a:	d22b      	bcs.n	9000edd4 <pbuf_take+0x8c>
9000ed7c:	4b1a      	ldr	r3, [pc, #104]	; (9000ede8 <pbuf_take+0xa0>)
9000ed7e:	f240 42b5 	movw	r2, #1205	; 0x4b5
9000ed82:	491d      	ldr	r1, [pc, #116]	; (9000edf8 <pbuf_take+0xb0>)
9000ed84:	481a      	ldr	r0, [pc, #104]	; (9000edf0 <pbuf_take+0xa8>)
9000ed86:	f01a fba3 	bl	900294d0 <iprintf>
9000ed8a:	f04f 30ff 	mov.w	r0, #4294967295
9000ed8e:	e7ea      	b.n	9000ed66 <pbuf_take+0x1e>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
9000ed90:	b92d      	cbnz	r5, 9000ed9e <pbuf_take+0x56>
9000ed92:	f240 42bd 	movw	r2, #1213	; 0x4bd
9000ed96:	4651      	mov	r1, sl
9000ed98:	4658      	mov	r0, fp
9000ed9a:	f01a fb99 	bl	900294d0 <iprintf>
    if (buf_copy_len > p->len) {
9000ed9e:	896f      	ldrh	r7, [r5, #10]
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
9000eda0:	eb09 0108 	add.w	r1, r9, r8
9000eda4:	6868      	ldr	r0, [r5, #4]
9000eda6:	42a7      	cmp	r7, r4
9000eda8:	bf28      	it	cs
9000edaa:	4627      	movcs	r7, r4
9000edac:	463a      	mov	r2, r7
    total_copy_len -= buf_copy_len;
9000edae:	1be4      	subs	r4, r4, r7
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
9000edb0:	f019 ffc6 	bl	90028d40 <memcpy>
    copied_total += buf_copy_len;
9000edb4:	44b8      	add	r8, r7
  for (p = buf; total_copy_len != 0; p = p->next) {
9000edb6:	682d      	ldr	r5, [r5, #0]
9000edb8:	4b0b      	ldr	r3, [pc, #44]	; (9000ede8 <pbuf_take+0xa0>)
9000edba:	2c00      	cmp	r4, #0
9000edbc:	d1e8      	bne.n	9000ed90 <pbuf_take+0x48>
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
9000edbe:	45b0      	cmp	r8, r6
9000edc0:	d006      	beq.n	9000edd0 <pbuf_take+0x88>
9000edc2:	4b09      	ldr	r3, [pc, #36]	; (9000ede8 <pbuf_take+0xa0>)
9000edc4:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
9000edc8:	490c      	ldr	r1, [pc, #48]	; (9000edfc <pbuf_take+0xb4>)
9000edca:	4809      	ldr	r0, [pc, #36]	; (9000edf0 <pbuf_take+0xa8>)
9000edcc:	f01a fb80 	bl	900294d0 <iprintf>
  return ERR_OK;
9000edd0:	4620      	mov	r0, r4
9000edd2:	e7c8      	b.n	9000ed66 <pbuf_take+0x1e>
  size_t total_copy_len = len;
9000edd4:	4614      	mov	r4, r2
  size_t copied_total = 0;
9000edd6:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
9000edda:	4b03      	ldr	r3, [pc, #12]	; (9000ede8 <pbuf_take+0xa0>)
9000eddc:	f8df a020 	ldr.w	sl, [pc, #32]	; 9000ee00 <pbuf_take+0xb8>
9000ede0:	f8df b00c 	ldr.w	fp, [pc, #12]	; 9000edf0 <pbuf_take+0xa8>
9000ede4:	e7e9      	b.n	9000edba <pbuf_take+0x72>
9000ede6:	bf00      	nop
9000ede8:	9002ca1b 	.word	0x9002ca1b
9000edec:	9002ccba 	.word	0x9002ccba
9000edf0:	9002a254 	.word	0x9002a254
9000edf4:	9002ccd1 	.word	0x9002ccd1
9000edf8:	9002ccec 	.word	0x9002ccec
9000edfc:	9002cd24 	.word	0x9002cd24
9000ee00:	9002cd0c 	.word	0x9002cd0c

9000ee04 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
9000ee04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
9000ee06:	460f      	mov	r7, r1
9000ee08:	4614      	mov	r4, r2
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
9000ee0a:	4619      	mov	r1, r3
9000ee0c:	f10d 0206 	add.w	r2, sp, #6
9000ee10:	f7ff fc34 	bl	9000e67c <pbuf_skip_const>
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
9000ee14:	4606      	mov	r6, r0
9000ee16:	b330      	cbz	r0, 9000ee66 <pbuf_take_at+0x62>
9000ee18:	f8bd 3006 	ldrh.w	r3, [sp, #6]
9000ee1c:	8901      	ldrh	r1, [r0, #8]
9000ee1e:	191a      	adds	r2, r3, r4
9000ee20:	4291      	cmp	r1, r2
9000ee22:	db20      	blt.n	9000ee66 <pbuf_take_at+0x62>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
9000ee24:	8942      	ldrh	r2, [r0, #10]
9000ee26:	429a      	cmp	r2, r3
9000ee28:	d806      	bhi.n	9000ee38 <pbuf_take_at+0x34>
9000ee2a:	4b11      	ldr	r3, [pc, #68]	; (9000ee70 <pbuf_take_at+0x6c>)
9000ee2c:	f240 42e3 	movw	r2, #1251	; 0x4e3
9000ee30:	4910      	ldr	r1, [pc, #64]	; (9000ee74 <pbuf_take_at+0x70>)
9000ee32:	4811      	ldr	r0, [pc, #68]	; (9000ee78 <pbuf_take_at+0x74>)
9000ee34:	f01a fb4c 	bl	900294d0 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
9000ee38:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
9000ee3c:	4639      	mov	r1, r7
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
9000ee3e:	8975      	ldrh	r5, [r6, #10]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
9000ee40:	6870      	ldr	r0, [r6, #4]
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
9000ee42:	1aed      	subs	r5, r5, r3
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
9000ee44:	4418      	add	r0, r3
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
9000ee46:	42ac      	cmp	r4, r5
9000ee48:	bfcc      	ite	gt
9000ee4a:	b2ad      	uxthgt	r5, r5
9000ee4c:	4625      	movle	r5, r4
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
9000ee4e:	462a      	mov	r2, r5
9000ee50:	f019 ff76 	bl	90028d40 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
9000ee54:	1b62      	subs	r2, r4, r5
9000ee56:	b292      	uxth	r2, r2
    src_ptr += first_copy_len;
    if (remaining_len > 0) {
9000ee58:	b142      	cbz	r2, 9000ee6c <pbuf_take_at+0x68>
      return pbuf_take(q->next, src_ptr, remaining_len);
9000ee5a:	1979      	adds	r1, r7, r5
9000ee5c:	6830      	ldr	r0, [r6, #0]
9000ee5e:	f7ff ff73 	bl	9000ed48 <pbuf_take>
    }
    return ERR_OK;
  }
  return ERR_MEM;
}
9000ee62:	b003      	add	sp, #12
9000ee64:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ERR_MEM;
9000ee66:	f04f 30ff 	mov.w	r0, #4294967295
9000ee6a:	e7fa      	b.n	9000ee62 <pbuf_take_at+0x5e>
    return ERR_OK;
9000ee6c:	4610      	mov	r0, r2
9000ee6e:	e7f8      	b.n	9000ee62 <pbuf_take_at+0x5e>
9000ee70:	9002ca1b 	.word	0x9002ca1b
9000ee74:	9002cd3a 	.word	0x9002cd3a
9000ee78:	9002a254 	.word	0x9002a254

9000ee7c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
9000ee7c:	b538      	push	{r3, r4, r5, lr}
9000ee7e:	4615      	mov	r5, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
9000ee80:	460a      	mov	r2, r1
9000ee82:	8929      	ldrh	r1, [r5, #8]
9000ee84:	f7ff fd2e 	bl	9000e8e4 <pbuf_alloc>
  if (q == NULL) {
9000ee88:	4604      	mov	r4, r0
9000ee8a:	b150      	cbz	r0, 9000eea2 <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
9000ee8c:	4629      	mov	r1, r5
9000ee8e:	f7ff fe93 	bl	9000ebb8 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
9000ee92:	b130      	cbz	r0, 9000eea2 <pbuf_clone+0x26>
9000ee94:	4b04      	ldr	r3, [pc, #16]	; (9000eea8 <pbuf_clone+0x2c>)
9000ee96:	f240 5224 	movw	r2, #1316	; 0x524
9000ee9a:	4904      	ldr	r1, [pc, #16]	; (9000eeac <pbuf_clone+0x30>)
9000ee9c:	4804      	ldr	r0, [pc, #16]	; (9000eeb0 <pbuf_clone+0x34>)
9000ee9e:	f01a fb17 	bl	900294d0 <iprintf>
  return q;
}
9000eea2:	4620      	mov	r0, r4
9000eea4:	bd38      	pop	{r3, r4, r5, pc}
9000eea6:	bf00      	nop
9000eea8:	9002ca1b 	.word	0x9002ca1b
9000eeac:	9002cd51 	.word	0x9002cd51
9000eeb0:	9002a254 	.word	0x9002a254

9000eeb4 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
9000eeb4:	b513      	push	{r0, r1, r4, lr}
9000eeb6:	4614      	mov	r4, r2
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
9000eeb8:	f10d 0206 	add.w	r2, sp, #6
9000eebc:	f7ff fbde 	bl	9000e67c <pbuf_skip_const>
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
9000eec0:	b130      	cbz	r0, 9000eed0 <pbuf_put_at+0x1c>
9000eec2:	8942      	ldrh	r2, [r0, #10]
9000eec4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
9000eec8:	429a      	cmp	r2, r3
    ((u8_t *)q->payload)[q_idx] = data;
9000eeca:	bf84      	itt	hi
9000eecc:	6842      	ldrhi	r2, [r0, #4]
9000eece:	54d4      	strbhi	r4, [r2, r3]
  }
}
9000eed0:	b002      	add	sp, #8
9000eed2:	bd10      	pop	{r4, pc}

9000eed4 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
9000eed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
    if (!sockets[i].conn) {
9000eed8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 9000ef50 <alloc_socket+0x7c>
{
9000eedc:	4607      	mov	r7, r0
9000eede:	460e      	mov	r6, r1
  for (i = 0; i < NUM_SOCKETS; ++i) {
9000eee0:	2500      	movs	r5, #0
9000eee2:	46c3      	mov	fp, r8
    if (!sockets[i].conn) {
9000eee4:	012c      	lsls	r4, r5, #4
    SYS_ARCH_PROTECT(lev);
9000eee6:	f000 fdc1 	bl	9000fa6c <sys_arch_protect>
    if (!sockets[i].conn) {
9000eeea:	f854 a008 	ldr.w	sl, [r4, r8]
9000eeee:	f1ba 0f00 	cmp.w	sl, #0
9000eef2:	d11f      	bne.n	9000ef34 <alloc_socket+0x60>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
9000eef4:	eb08 0904 	add.w	r9, r8, r4
9000eef8:	f848 7004 	str.w	r7, [r8, r4]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
9000eefc:	f000 fdc2 	bl	9000fa84 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
9000ef00:	f899 300e 	ldrb.w	r3, [r9, #14]
      sockets[i].lastdata.pbuf = NULL;
9000ef04:	f8c9 a004 	str.w	sl, [r9, #4]
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
9000ef08:	b133      	cbz	r3, 9000ef18 <alloc_socket+0x44>
9000ef0a:	4b0e      	ldr	r3, [pc, #56]	; (9000ef44 <alloc_socket+0x70>)
9000ef0c:	f240 220e 	movw	r2, #526	; 0x20e
9000ef10:	490d      	ldr	r1, [pc, #52]	; (9000ef48 <alloc_socket+0x74>)
9000ef12:	480e      	ldr	r0, [pc, #56]	; (9000ef4c <alloc_socket+0x78>)
9000ef14:	f01a fadc 	bl	900294d0 <iprintf>
      sockets[i].rcvevent   = 0;
9000ef18:	445c      	add	r4, fp
9000ef1a:	2200      	movs	r2, #0
9000ef1c:	8122      	strh	r2, [r4, #8]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
9000ef1e:	783b      	ldrb	r3, [r7, #0]
      sockets[i].errevent   = 0;
9000ef20:	81a2      	strh	r2, [r4, #12]
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
9000ef22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000ef26:	2b10      	cmp	r3, #16
9000ef28:	bf18      	it	ne
9000ef2a:	2601      	movne	r6, #1
9000ef2c:	8166      	strh	r6, [r4, #10]
      return i + LWIP_SOCKET_OFFSET;
    }
    SYS_ARCH_UNPROTECT(lev);
  }
  return -1;
}
9000ef2e:	4628      	mov	r0, r5
9000ef30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (i = 0; i < NUM_SOCKETS; ++i) {
9000ef34:	3501      	adds	r5, #1
    SYS_ARCH_UNPROTECT(lev);
9000ef36:	f000 fda5 	bl	9000fa84 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
9000ef3a:	2d04      	cmp	r5, #4
9000ef3c:	d1d2      	bne.n	9000eee4 <alloc_socket+0x10>
  return -1;
9000ef3e:	f04f 35ff 	mov.w	r5, #4294967295
9000ef42:	e7f4      	b.n	9000ef2e <alloc_socket+0x5a>
9000ef44:	9002cd62 	.word	0x9002cd62
9000ef48:	9002cdc4 	.word	0x9002cdc4
9000ef4c:	9002a254 	.word	0x9002a254
9000ef50:	20026c38 	.word	0x20026c38

9000ef54 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
9000ef54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u8_t apiflags = NETCONN_NOAUTORCVD;
  ssize_t recvd = 0;
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
9000ef58:	2a00      	cmp	r2, #0
{
9000ef5a:	b085      	sub	sp, #20
9000ef5c:	4699      	mov	r9, r3

  LWIP_ASSERT("no socket given", sock != NULL);
9000ef5e:	4606      	mov	r6, r0
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
9000ef60:	bfac      	ite	ge
9000ef62:	4614      	movge	r4, r2
9000ef64:	f06f 4400 	mvnlt.w	r4, #2147483648	; 0x80000000
{
9000ef68:	9101      	str	r1, [sp, #4]
  LWIP_ASSERT("no socket given", sock != NULL);
9000ef6a:	b930      	cbnz	r0, 9000ef7a <lwip_recv_tcp+0x26>
9000ef6c:	4b47      	ldr	r3, [pc, #284]	; (9000f08c <lwip_recv_tcp+0x138>)
9000ef6e:	f240 329e 	movw	r2, #926	; 0x39e
9000ef72:	4947      	ldr	r1, [pc, #284]	; (9000f090 <lwip_recv_tcp+0x13c>)
9000ef74:	4847      	ldr	r0, [pc, #284]	; (9000f094 <lwip_recv_tcp+0x140>)
9000ef76:	f01a faab 	bl	900294d0 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
9000ef7a:	6833      	ldr	r3, [r6, #0]
9000ef7c:	781b      	ldrb	r3, [r3, #0]
9000ef7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000ef82:	2b10      	cmp	r3, #16
9000ef84:	d006      	beq.n	9000ef94 <lwip_recv_tcp+0x40>
9000ef86:	4b41      	ldr	r3, [pc, #260]	; (9000f08c <lwip_recv_tcp+0x138>)
9000ef88:	f240 329f 	movw	r2, #927	; 0x39f
9000ef8c:	4942      	ldr	r1, [pc, #264]	; (9000f098 <lwip_recv_tcp+0x144>)
9000ef8e:	4841      	ldr	r0, [pc, #260]	; (9000f094 <lwip_recv_tcp+0x140>)
9000ef90:	f01a fa9e 	bl	900294d0 <iprintf>

  if (flags & MSG_DONTWAIT) {
    apiflags |= NETCONN_DONTBLOCK;
9000ef94:	f019 0f08 	tst.w	r9, #8
9000ef98:	f04f 0500 	mov.w	r5, #0
          return 0;
        } else {
          return -1;
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
9000ef9c:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 9000f08c <lwip_recv_tcp+0x138>
    apiflags |= NETCONN_DONTBLOCK;
9000efa0:	bf0c      	ite	eq
9000efa2:	2208      	moveq	r2, #8
9000efa4:	220c      	movne	r2, #12
      LWIP_ASSERT("p != NULL", p != NULL);
9000efa6:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 9000f094 <lwip_recv_tcp+0x140>
    if (sock->lastdata.pbuf) {
9000efaa:	6873      	ldr	r3, [r6, #4]
9000efac:	2b00      	cmp	r3, #0
9000efae:	d03c      	beq.n	9000f02a <lwip_recv_tcp+0xd6>
      p = sock->lastdata.pbuf;
9000efb0:	9303      	str	r3, [sp, #12]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
9000efb2:	9803      	ldr	r0, [sp, #12]
      copylen = (u16_t)(SSIZE_MAX - recvd);
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
9000efb4:	2300      	movs	r3, #0
9000efb6:	9901      	ldr	r1, [sp, #4]
    if (recv_left > p->tot_len) {
9000efb8:	8907      	ldrh	r7, [r0, #8]
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
9000efba:	4429      	add	r1, r5
    if (recv_left > p->tot_len) {
9000efbc:	42a7      	cmp	r7, r4
      copylen = (u16_t)recv_left;
9000efbe:	bfa8      	it	ge
9000efc0:	b2a7      	uxthge	r7, r4
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
9000efc2:	463a      	mov	r2, r7
    if (recvd + copylen < recvd) {
9000efc4:	eb07 0805 	add.w	r8, r7, r5
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
9000efc8:	f7ff fe78 	bl	9000ecbc <pbuf_copy_partial>

    recvd += copylen;

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
9000efcc:	42a7      	cmp	r7, r4
9000efce:	dd06      	ble.n	9000efde <lwip_recv_tcp+0x8a>
9000efd0:	4653      	mov	r3, sl
9000efd2:	f240 32dd 	movw	r2, #989	; 0x3dd
9000efd6:	4931      	ldr	r1, [pc, #196]	; (9000f09c <lwip_recv_tcp+0x148>)
9000efd8:	4658      	mov	r0, fp
9000efda:	f01a fa79 	bl	900294d0 <iprintf>
    recv_left -= copylen;

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
9000efde:	f019 0f01 	tst.w	r9, #1
9000efe2:	d14e      	bne.n	9000f082 <lwip_recv_tcp+0x12e>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
9000efe4:	9b03      	ldr	r3, [sp, #12]
9000efe6:	891b      	ldrh	r3, [r3, #8]
9000efe8:	42bb      	cmp	r3, r7
9000efea:	d206      	bcs.n	9000effa <lwip_recv_tcp+0xa6>
9000efec:	4653      	mov	r3, sl
9000efee:	f240 32e3 	movw	r2, #995	; 0x3e3
9000eff2:	492b      	ldr	r1, [pc, #172]	; (9000f0a0 <lwip_recv_tcp+0x14c>)
9000eff4:	4658      	mov	r0, fp
9000eff6:	f01a fa6b 	bl	900294d0 <iprintf>
      if (p->tot_len - copylen > 0) {
9000effa:	9803      	ldr	r0, [sp, #12]
9000effc:	8903      	ldrh	r3, [r0, #8]
9000effe:	1bdb      	subs	r3, r3, r7
9000f000:	2b00      	cmp	r3, #0
9000f002:	dd37      	ble.n	9000f074 <lwip_recv_tcp+0x120>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
9000f004:	4639      	mov	r1, r7
9000f006:	f7ff fd57 	bl	9000eab8 <pbuf_free_header>
9000f00a:	6070      	str	r0, [r6, #4]
    recv_left -= copylen;
9000f00c:	1be4      	subs	r4, r4, r7
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
9000f00e:	221c      	movs	r2, #28
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
9000f010:	2c00      	cmp	r4, #0
9000f012:	dc08      	bgt.n	9000f026 <lwip_recv_tcp+0xd2>
lwip_recv_tcp_done:
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
9000f014:	f1b8 0f00 	cmp.w	r8, #0
9000f018:	d036      	beq.n	9000f088 <lwip_recv_tcp+0x134>
9000f01a:	4645      	mov	r5, r8
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
9000f01c:	4629      	mov	r1, r5
9000f01e:	6830      	ldr	r0, [r6, #0]
9000f020:	f7fa fe4a 	bl	90009cb8 <netconn_tcp_recvd>
9000f024:	e00b      	b.n	9000f03e <lwip_recv_tcp+0xea>
    if (recvd + copylen < recvd) {
9000f026:	4645      	mov	r5, r8
9000f028:	e7bf      	b.n	9000efaa <lwip_recv_tcp+0x56>
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
9000f02a:	a903      	add	r1, sp, #12
9000f02c:	6830      	ldr	r0, [r6, #0]
9000f02e:	f7fb f859 	bl	9000a0e4 <netconn_recv_tcp_pbuf_flags>
      if (err != ERR_OK) {
9000f032:	4607      	mov	r7, r0
9000f034:	b190      	cbz	r0, 9000f05c <lwip_recv_tcp+0x108>
        if (recvd > 0) {
9000f036:	b135      	cbz	r5, 9000f046 <lwip_recv_tcp+0xf2>
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
9000f038:	f019 0f01 	tst.w	r9, #1
9000f03c:	d0ee      	beq.n	9000f01c <lwip_recv_tcp+0xc8>
  }
  sock_set_errno(sock, 0);
  return recvd;
}
9000f03e:	4628      	mov	r0, r5
9000f040:	b005      	add	sp, #20
9000f042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        sock_set_errno(sock, err_to_errno(err));
9000f046:	f7fd fb4d 	bl	9000c6e4 <err_to_errno>
9000f04a:	b108      	cbz	r0, 9000f050 <lwip_recv_tcp+0xfc>
9000f04c:	4b15      	ldr	r3, [pc, #84]	; (9000f0a4 <lwip_recv_tcp+0x150>)
9000f04e:	6018      	str	r0, [r3, #0]
        if (err == ERR_CLSD) {
9000f050:	f117 050f 	adds.w	r5, r7, #15
9000f054:	bf18      	it	ne
9000f056:	2501      	movne	r5, #1
9000f058:	426d      	negs	r5, r5
9000f05a:	e7f0      	b.n	9000f03e <lwip_recv_tcp+0xea>
      LWIP_ASSERT("p != NULL", p != NULL);
9000f05c:	9b03      	ldr	r3, [sp, #12]
9000f05e:	b933      	cbnz	r3, 9000f06e <lwip_recv_tcp+0x11a>
9000f060:	4653      	mov	r3, sl
9000f062:	f240 32c5 	movw	r2, #965	; 0x3c5
9000f066:	4910      	ldr	r1, [pc, #64]	; (9000f0a8 <lwip_recv_tcp+0x154>)
9000f068:	4658      	mov	r0, fp
9000f06a:	f01a fa31 	bl	900294d0 <iprintf>
      sock->lastdata.pbuf = p;
9000f06e:	9b03      	ldr	r3, [sp, #12]
9000f070:	6073      	str	r3, [r6, #4]
9000f072:	e79e      	b.n	9000efb2 <lwip_recv_tcp+0x5e>
        sock->lastdata.pbuf = NULL;
9000f074:	2300      	movs	r3, #0
9000f076:	6073      	str	r3, [r6, #4]
        pbuf_free(p);
9000f078:	f7ff fbcc 	bl	9000e814 <pbuf_free>
9000f07c:	e7c6      	b.n	9000f00c <lwip_recv_tcp+0xb8>
    if (recvd + copylen < recvd) {
9000f07e:	4645      	mov	r5, r8
9000f080:	e7dd      	b.n	9000f03e <lwip_recv_tcp+0xea>
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
9000f082:	f1b8 0f00 	cmp.w	r8, #0
9000f086:	d1fa      	bne.n	9000f07e <lwip_recv_tcp+0x12a>
9000f088:	2500      	movs	r5, #0
9000f08a:	e7d8      	b.n	9000f03e <lwip_recv_tcp+0xea>
9000f08c:	9002cd62 	.word	0x9002cd62
9000f090:	9002cde3 	.word	0x9002cde3
9000f094:	9002a254 	.word	0x9002a254
9000f098:	9002cdf3 	.word	0x9002cdf3
9000f09c:	9002ce15 	.word	0x9002ce15
9000f0a0:	9002ce3a 	.word	0x9002ce3a
9000f0a4:	2002cb60 	.word	0x2002cb60
9000f0a8:	9002cb1d 	.word	0x9002cb1d

9000f0ac <lwip_sock_make_addr.isra.0>:
#endif

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
9000f0ac:	b5f0      	push	{r4, r5, r6, r7, lr}
9000f0ae:	460f      	mov	r7, r1
9000f0b0:	b085      	sub	sp, #20
9000f0b2:	4616      	mov	r6, r2
9000f0b4:	461d      	mov	r5, r3
  int truncated = 0;
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
9000f0b6:	4604      	mov	r4, r0
9000f0b8:	b930      	cbnz	r0, 9000f0c8 <lwip_sock_make_addr.isra.0+0x1c>
9000f0ba:	4b1b      	ldr	r3, [pc, #108]	; (9000f128 <lwip_sock_make_addr.isra.0+0x7c>)
9000f0bc:	f240 4207 	movw	r2, #1031	; 0x407
9000f0c0:	491a      	ldr	r1, [pc, #104]	; (9000f12c <lwip_sock_make_addr.isra.0+0x80>)
9000f0c2:	481b      	ldr	r0, [pc, #108]	; (9000f130 <lwip_sock_make_addr.isra.0+0x84>)
9000f0c4:	f01a fa04 	bl	900294d0 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
9000f0c8:	b936      	cbnz	r6, 9000f0d8 <lwip_sock_make_addr.isra.0+0x2c>
9000f0ca:	4b17      	ldr	r3, [pc, #92]	; (9000f128 <lwip_sock_make_addr.isra.0+0x7c>)
9000f0cc:	f44f 6281 	mov.w	r2, #1032	; 0x408
9000f0d0:	4918      	ldr	r1, [pc, #96]	; (9000f134 <lwip_sock_make_addr.isra.0+0x88>)
9000f0d2:	4817      	ldr	r0, [pc, #92]	; (9000f130 <lwip_sock_make_addr.isra.0+0x84>)
9000f0d4:	f01a f9fc 	bl	900294d0 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
9000f0d8:	b935      	cbnz	r5, 9000f0e8 <lwip_sock_make_addr.isra.0+0x3c>
9000f0da:	4b13      	ldr	r3, [pc, #76]	; (9000f128 <lwip_sock_make_addr.isra.0+0x7c>)
9000f0dc:	f240 4209 	movw	r2, #1033	; 0x409
9000f0e0:	4915      	ldr	r1, [pc, #84]	; (9000f138 <lwip_sock_make_addr.isra.0+0x8c>)
9000f0e2:	4813      	ldr	r0, [pc, #76]	; (9000f130 <lwip_sock_make_addr.isra.0+0x84>)
9000f0e4:	f01a f9f4 	bl	900294d0 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
9000f0e8:	f44f 7304 	mov.w	r3, #528	; 0x210
9000f0ec:	4638      	mov	r0, r7
9000f0ee:	f8ad 3000 	strh.w	r3, [sp]
9000f0f2:	f7fc f807 	bl	9000b104 <lwip_htons>
9000f0f6:	6823      	ldr	r3, [r4, #0]
9000f0f8:	2400      	movs	r4, #0
9000f0fa:	f8ad 0002 	strh.w	r0, [sp, #2]
9000f0fe:	9301      	str	r3, [sp, #4]
  if (*fromlen < saddr.sa.sa_len) {
9000f100:	682b      	ldr	r3, [r5, #0]
9000f102:	2b0f      	cmp	r3, #15
  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
9000f104:	e9cd 4402 	strd	r4, r4, [sp, #8]
  if (*fromlen < saddr.sa.sa_len) {
9000f108:	d90b      	bls.n	9000f122 <lwip_sock_make_addr.isra.0+0x76>
    truncated = 1;
  } else if (*fromlen > saddr.sa.sa_len) {
9000f10a:	2b10      	cmp	r3, #16
9000f10c:	d001      	beq.n	9000f112 <lwip_sock_make_addr.isra.0+0x66>
    *fromlen = saddr.sa.sa_len;
9000f10e:	2310      	movs	r3, #16
9000f110:	602b      	str	r3, [r5, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
9000f112:	682a      	ldr	r2, [r5, #0]
9000f114:	4669      	mov	r1, sp
9000f116:	4630      	mov	r0, r6
9000f118:	f019 fe12 	bl	90028d40 <memcpy>
  return truncated;
}
9000f11c:	4620      	mov	r0, r4
9000f11e:	b005      	add	sp, #20
9000f120:	bdf0      	pop	{r4, r5, r6, r7, pc}
    truncated = 1;
9000f122:	2401      	movs	r4, #1
9000f124:	e7f5      	b.n	9000f112 <lwip_sock_make_addr.isra.0+0x66>
9000f126:	bf00      	nop
9000f128:	9002cd62 	.word	0x9002cd62
9000f12c:	9002ce4a 	.word	0x9002ce4a
9000f130:	9002a254 	.word	0x9002a254
9000f134:	9002ce5b 	.word	0x9002ce5b
9000f138:	9002ce68 	.word	0x9002ce68

9000f13c <free_socket>:
{
9000f13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000f13e:	4604      	mov	r4, r0
9000f140:	460e      	mov	r6, r1
  SYS_ARCH_PROTECT(lev);
9000f142:	f000 fc93 	bl	9000fa6c <sys_arch_protect>
  sock->lastdata.pbuf = NULL;
9000f146:	2300      	movs	r3, #0
  *lastdata = sock->lastdata;
9000f148:	6865      	ldr	r5, [r4, #4]
  *conn = sock->conn;
9000f14a:	6827      	ldr	r7, [r4, #0]
  sock->lastdata.pbuf = NULL;
9000f14c:	6063      	str	r3, [r4, #4]
  sock->conn = NULL;
9000f14e:	6023      	str	r3, [r4, #0]
  SYS_ARCH_UNPROTECT(lev);
9000f150:	f000 fc98 	bl	9000fa84 <sys_arch_unprotect>
  if (lastdata->pbuf != NULL) {
9000f154:	b11d      	cbz	r5, 9000f15e <free_socket+0x22>
      pbuf_free(lastdata->pbuf);
9000f156:	4628      	mov	r0, r5
    if (is_tcp) {
9000f158:	b13e      	cbz	r6, 9000f16a <free_socket+0x2e>
      pbuf_free(lastdata->pbuf);
9000f15a:	f7ff fb5b 	bl	9000e814 <pbuf_free>
  if (conn != NULL) {
9000f15e:	b13f      	cbz	r7, 9000f170 <free_socket+0x34>
    netconn_delete(conn);
9000f160:	4638      	mov	r0, r7
}
9000f162:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    netconn_delete(conn);
9000f166:	f7fa bd23 	b.w	90009bb0 <netconn_delete>
      netbuf_delete(lastdata->netbuf);
9000f16a:	f7ff f883 	bl	9000e274 <netbuf_delete>
9000f16e:	e7f6      	b.n	9000f15e <free_socket+0x22>
}
9000f170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9000f174 <lwip_recvfrom_udp_raw.isra.0>:

/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
9000f174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000f178:	4698      	mov	r8, r3
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
9000f17a:	6893      	ldr	r3, [r2, #8]
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
9000f17c:	4607      	mov	r7, r0
9000f17e:	460e      	mov	r6, r1
9000f180:	4614      	mov	r4, r2
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
9000f182:	b973      	cbnz	r3, 9000f1a2 <lwip_recvfrom_udp_raw.isra.0+0x2e>
9000f184:	68d3      	ldr	r3, [r2, #12]
9000f186:	2b00      	cmp	r3, #0
9000f188:	dd0b      	ble.n	9000f1a2 <lwip_recvfrom_udp_raw.isra.0+0x2e>
9000f18a:	4b32      	ldr	r3, [pc, #200]	; (9000f254 <lwip_recvfrom_udp_raw.isra.0+0xe0>)
9000f18c:	f240 4249 	movw	r2, #1097	; 0x449
9000f190:	4931      	ldr	r1, [pc, #196]	; (9000f258 <lwip_recvfrom_udp_raw.isra.0+0xe4>)
9000f192:	4832      	ldr	r0, [pc, #200]	; (9000f25c <lwip_recvfrom_udp_raw.isra.0+0xe8>)
9000f194:	f01a f99c 	bl	900294d0 <iprintf>
9000f198:	f06f 000f 	mvn.w	r0, #15
  }
  if (datagram_len) {
    *datagram_len = buflen;
  }
  return ERR_OK;
}
9000f19c:	b003      	add	sp, #12
9000f19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    apiflags = 0;
9000f1a2:	f016 0f08 	tst.w	r6, #8
  buf = sock->lastdata.netbuf;
9000f1a6:	687b      	ldr	r3, [r7, #4]
    apiflags = 0;
9000f1a8:	bf14      	ite	ne
9000f1aa:	2204      	movne	r2, #4
9000f1ac:	2200      	moveq	r2, #0
  buf = sock->lastdata.netbuf;
9000f1ae:	9301      	str	r3, [sp, #4]
  if (buf == NULL) {
9000f1b0:	b983      	cbnz	r3, 9000f1d4 <lwip_recvfrom_udp_raw.isra.0+0x60>
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
9000f1b2:	a901      	add	r1, sp, #4
9000f1b4:	6838      	ldr	r0, [r7, #0]
9000f1b6:	f7fa ff17 	bl	90009fe8 <netconn_recv_udp_raw_netbuf_flags>
    if (err != ERR_OK) {
9000f1ba:	2800      	cmp	r0, #0
9000f1bc:	d1ee      	bne.n	9000f19c <lwip_recvfrom_udp_raw.isra.0+0x28>
    LWIP_ASSERT("buf != NULL", buf != NULL);
9000f1be:	9b01      	ldr	r3, [sp, #4]
9000f1c0:	b933      	cbnz	r3, 9000f1d0 <lwip_recvfrom_udp_raw.isra.0+0x5c>
9000f1c2:	4b24      	ldr	r3, [pc, #144]	; (9000f254 <lwip_recvfrom_udp_raw.isra.0+0xe0>)
9000f1c4:	f240 425e 	movw	r2, #1118	; 0x45e
9000f1c8:	4925      	ldr	r1, [pc, #148]	; (9000f260 <lwip_recvfrom_udp_raw.isra.0+0xec>)
9000f1ca:	4824      	ldr	r0, [pc, #144]	; (9000f25c <lwip_recvfrom_udp_raw.isra.0+0xe8>)
9000f1cc:	f01a f980 	bl	900294d0 <iprintf>
    sock->lastdata.netbuf = buf;
9000f1d0:	9b01      	ldr	r3, [sp, #4]
9000f1d2:	607b      	str	r3, [r7, #4]
  buflen = buf->p->tot_len;
9000f1d4:	9b01      	ldr	r3, [sp, #4]
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
9000f1d6:	f04f 0900 	mov.w	r9, #0
  buflen = buf->p->tot_len;
9000f1da:	681b      	ldr	r3, [r3, #0]
  copied = 0;
9000f1dc:	46cb      	mov	fp, r9
  buflen = buf->p->tot_len;
9000f1de:	f8b3 a008 	ldrh.w	sl, [r3, #8]
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
9000f1e2:	68e3      	ldr	r3, [r4, #12]
9000f1e4:	4599      	cmp	r9, r3
9000f1e6:	da01      	bge.n	9000f1ec <lwip_recvfrom_udp_raw.isra.0+0x78>
9000f1e8:	45da      	cmp	sl, fp
9000f1ea:	d819      	bhi.n	9000f220 <lwip_recvfrom_udp_raw.isra.0+0xac>
  if (msg->msg_name && msg->msg_namelen)
9000f1ec:	6822      	ldr	r2, [r4, #0]
9000f1ee:	b13a      	cbz	r2, 9000f200 <lwip_recvfrom_udp_raw.isra.0+0x8c>
9000f1f0:	6863      	ldr	r3, [r4, #4]
9000f1f2:	b12b      	cbz	r3, 9000f200 <lwip_recvfrom_udp_raw.isra.0+0x8c>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
9000f1f4:	9801      	ldr	r0, [sp, #4]
9000f1f6:	1d23      	adds	r3, r4, #4
9000f1f8:	8981      	ldrh	r1, [r0, #12]
9000f1fa:	3008      	adds	r0, #8
9000f1fc:	f7ff ff56 	bl	9000f0ac <lwip_sock_make_addr.isra.0>
  msg->msg_flags = 0;
9000f200:	2300      	movs	r3, #0
  if (msg->msg_control) {
9000f202:	6922      	ldr	r2, [r4, #16]
  msg->msg_flags = 0;
9000f204:	61a3      	str	r3, [r4, #24]
  if (msg->msg_control) {
9000f206:	b102      	cbz	r2, 9000f20a <lwip_recvfrom_udp_raw.isra.0+0x96>
      msg->msg_controllen = 0;
9000f208:	6163      	str	r3, [r4, #20]
  if ((flags & MSG_PEEK) == 0) {
9000f20a:	f016 0601 	ands.w	r6, r6, #1
9000f20e:	d103      	bne.n	9000f218 <lwip_recvfrom_udp_raw.isra.0+0xa4>
    netbuf_delete(buf);
9000f210:	9801      	ldr	r0, [sp, #4]
    sock->lastdata.netbuf = NULL;
9000f212:	607e      	str	r6, [r7, #4]
    netbuf_delete(buf);
9000f214:	f7ff f82e 	bl	9000e274 <netbuf_delete>
  return ERR_OK;
9000f218:	2000      	movs	r0, #0
    *datagram_len = buflen;
9000f21a:	f8a8 a000 	strh.w	sl, [r8]
9000f21e:	e7bd      	b.n	9000f19c <lwip_recvfrom_udp_raw.isra.0+0x28>
    if (msg->msg_iov[i].iov_len > len_left) {
9000f220:	68a1      	ldr	r1, [r4, #8]
    u16_t len_left = (u16_t)(buflen - copied);
9000f222:	ebaa 050b 	sub.w	r5, sl, fp
    if (msg->msg_iov[i].iov_len > len_left) {
9000f226:	ea4f 00c9 	mov.w	r0, r9, lsl #3
9000f22a:	eb01 03c9 	add.w	r3, r1, r9, lsl #3
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
9000f22e:	f109 0901 	add.w	r9, r9, #1
    u16_t len_left = (u16_t)(buflen - copied);
9000f232:	b2ad      	uxth	r5, r5
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
9000f234:	5809      	ldr	r1, [r1, r0]
    if (msg->msg_iov[i].iov_len > len_left) {
9000f236:	685b      	ldr	r3, [r3, #4]
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
9000f238:	9801      	ldr	r0, [sp, #4]
    if (msg->msg_iov[i].iov_len > len_left) {
9000f23a:	42ab      	cmp	r3, r5
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
9000f23c:	6800      	ldr	r0, [r0, #0]
      copylen = (u16_t)msg->msg_iov[i].iov_len;
9000f23e:	bf98      	it	ls
9000f240:	b29d      	uxthls	r5, r3
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
9000f242:	465b      	mov	r3, fp
9000f244:	462a      	mov	r2, r5
    copied = (u16_t)(copied + copylen);
9000f246:	445d      	add	r5, fp
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
9000f248:	f7ff fd38 	bl	9000ecbc <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
9000f24c:	fa1f fb85 	uxth.w	fp, r5
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
9000f250:	e7c7      	b.n	9000f1e2 <lwip_recvfrom_udp_raw.isra.0+0x6e>
9000f252:	bf00      	nop
9000f254:	9002cd62 	.word	0x9002cd62
9000f258:	9002ce78 	.word	0x9002ce78
9000f25c:	9002a254 	.word	0x9002a254
9000f260:	9002b4fc 	.word	0x9002b4fc

9000f264 <get_socket>:
  if ((s < 0) || (s >= NUM_SOCKETS)) {
9000f264:	2803      	cmp	r0, #3
9000f266:	d805      	bhi.n	9000f274 <get_socket+0x10>
    if (sock->conn) {
9000f268:	4b05      	ldr	r3, [pc, #20]	; (9000f280 <get_socket+0x1c>)
9000f26a:	0102      	lsls	r2, r0, #4
9000f26c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
9000f270:	589b      	ldr	r3, [r3, r2]
9000f272:	b91b      	cbnz	r3, 9000f27c <get_socket+0x18>
    set_errno(EBADF);
9000f274:	4b03      	ldr	r3, [pc, #12]	; (9000f284 <get_socket+0x20>)
9000f276:	2209      	movs	r2, #9
    return NULL;
9000f278:	2000      	movs	r0, #0
    set_errno(EBADF);
9000f27a:	601a      	str	r2, [r3, #0]
}
9000f27c:	4770      	bx	lr
9000f27e:	bf00      	nop
9000f280:	20026c38 	.word	0x20026c38
9000f284:	2002cb60 	.word	0x2002cb60

9000f288 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
9000f288:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000f28c:	460f      	mov	r7, r1
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
9000f28e:	4604      	mov	r4, r0
9000f290:	2800      	cmp	r0, #0
9000f292:	d042      	beq.n	9000f31a <event_callback+0x92>
    s = conn->socket;
9000f294:	6985      	ldr	r5, [r0, #24]
    if (s < 0) {
9000f296:	2d00      	cmp	r5, #0
9000f298:	da0f      	bge.n	9000f2ba <event_callback+0x32>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
9000f29a:	f000 fbe7 	bl	9000fa6c <sys_arch_protect>
      if (conn->socket < 0) {
9000f29e:	69a5      	ldr	r5, [r4, #24]
      SYS_ARCH_PROTECT(lev);
9000f2a0:	4603      	mov	r3, r0
      if (conn->socket < 0) {
9000f2a2:	2d00      	cmp	r5, #0
9000f2a4:	da07      	bge.n	9000f2b6 <event_callback+0x2e>
        if (evt == NETCONN_EVT_RCVPLUS) {
9000f2a6:	b90f      	cbnz	r7, 9000f2ac <event_callback+0x24>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
9000f2a8:	3d01      	subs	r5, #1
9000f2aa:	61a5      	str	r5, [r4, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
9000f2ac:	4618      	mov	r0, r3
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
  } else {
    SYS_ARCH_UNPROTECT(lev);
  }
  done_socket(sock);
}
9000f2ae:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    SYS_ARCH_UNPROTECT(lev);
9000f2b2:	f000 bbe7 	b.w	9000fa84 <sys_arch_unprotect>
      SYS_ARCH_UNPROTECT(lev);
9000f2b6:	f000 fbe5 	bl	9000fa84 <sys_arch_unprotect>
    sock = get_socket(s);
9000f2ba:	4628      	mov	r0, r5
9000f2bc:	f7ff ffd2 	bl	9000f264 <get_socket>
    if (!sock) {
9000f2c0:	4604      	mov	r4, r0
9000f2c2:	b350      	cbz	r0, 9000f31a <event_callback+0x92>
  SYS_ARCH_PROTECT(lev);
9000f2c4:	f000 fbd2 	bl	9000fa6c <sys_arch_protect>
9000f2c8:	4606      	mov	r6, r0
  switch (evt) {
9000f2ca:	2f04      	cmp	r7, #4
9000f2cc:	d839      	bhi.n	9000f342 <event_callback+0xba>
9000f2ce:	e8df f007 	tbb	[pc, r7]
9000f2d2:	2603      	.short	0x2603
9000f2d4:	322b      	.short	0x322b
9000f2d6:	35          	.byte	0x35
9000f2d7:	00          	.byte	0x00
      sock->rcvevent++;
9000f2d8:	8923      	ldrh	r3, [r4, #8]
9000f2da:	3301      	adds	r3, #1
9000f2dc:	b21b      	sxth	r3, r3
      if (sock->rcvevent > 1) {
9000f2de:	2b01      	cmp	r3, #1
      sock->rcvevent++;
9000f2e0:	8123      	strh	r3, [r4, #8]
      if (sock->rcvevent > 1) {
9000f2e2:	bfcc      	ite	gt
9000f2e4:	2300      	movgt	r3, #0
9000f2e6:	2301      	movle	r3, #1
  if (sock->select_waiting && check_waiters) {
9000f2e8:	7ba2      	ldrb	r2, [r4, #14]
9000f2ea:	2a00      	cmp	r2, #0
9000f2ec:	d074      	beq.n	9000f3d8 <event_callback+0x150>
9000f2ee:	2b00      	cmp	r3, #0
9000f2f0:	d072      	beq.n	9000f3d8 <event_callback+0x150>
    SYS_ARCH_UNPROTECT(lev);
9000f2f2:	4630      	mov	r0, r6
    has_recvevent = sock->rcvevent > 0;
9000f2f4:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
    has_sendevent = sock->sendevent != 0;
9000f2f8:	f8b4 800a 	ldrh.w	r8, [r4, #10]
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
          if (scb->readset && FD_ISSET(s, scb->readset)) {
9000f2fc:	f005 061f 	and.w	r6, r5, #31
    has_errevent = sock->errevent != 0;
9000f300:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
          if (scb->readset && FD_ISSET(s, scb->readset)) {
9000f304:	f04f 0901 	mov.w	r9, #1
    SYS_ARCH_UNPROTECT(lev);
9000f308:	f000 fbbc 	bl	9000fa84 <sys_arch_unprotect>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
9000f30c:	4b33      	ldr	r3, [pc, #204]	; (9000f3dc <event_callback+0x154>)
          if (scb->readset && FD_ISSET(s, scb->readset)) {
9000f30e:	ea4f 1b55 	mov.w	fp, r5, lsr #5
9000f312:	fa09 f606 	lsl.w	r6, r9, r6
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
9000f316:	681c      	ldr	r4, [r3, #0]
9000f318:	b9e4      	cbnz	r4, 9000f354 <event_callback+0xcc>
}
9000f31a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      sock->rcvevent--;
9000f31e:	8923      	ldrh	r3, [r4, #8]
9000f320:	3b01      	subs	r3, #1
9000f322:	8123      	strh	r3, [r4, #8]
      check_waiters = 0;
9000f324:	2300      	movs	r3, #0
      break;
9000f326:	e7df      	b.n	9000f2e8 <event_callback+0x60>
      if (sock->sendevent) {
9000f328:	8963      	ldrh	r3, [r4, #10]
      sock->sendevent = 1;
9000f32a:	2201      	movs	r2, #1
      if (sock->sendevent) {
9000f32c:	fab3 f383 	clz	r3, r3
      sock->sendevent = 1;
9000f330:	8162      	strh	r2, [r4, #10]
      if (sock->sendevent) {
9000f332:	095b      	lsrs	r3, r3, #5
      break;
9000f334:	e7d8      	b.n	9000f2e8 <event_callback+0x60>
      sock->sendevent = 0;
9000f336:	2300      	movs	r3, #0
9000f338:	8163      	strh	r3, [r4, #10]
      break;
9000f33a:	e7d5      	b.n	9000f2e8 <event_callback+0x60>
      sock->errevent = 1;
9000f33c:	2301      	movs	r3, #1
9000f33e:	81a3      	strh	r3, [r4, #12]
      break;
9000f340:	e7d2      	b.n	9000f2e8 <event_callback+0x60>
      LWIP_ASSERT("unknown event", 0);
9000f342:	4b27      	ldr	r3, [pc, #156]	; (9000f3e0 <event_callback+0x158>)
9000f344:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
9000f348:	4926      	ldr	r1, [pc, #152]	; (9000f3e4 <event_callback+0x15c>)
9000f34a:	4827      	ldr	r0, [pc, #156]	; (9000f3e8 <event_callback+0x160>)
9000f34c:	f01a f8c0 	bl	900294d0 <iprintf>
  check_waiters = 1;
9000f350:	2301      	movs	r3, #1
      break;
9000f352:	e7c9      	b.n	9000f2e8 <event_callback+0x60>
    if (scb->sem_signalled == 0) {
9000f354:	69e3      	ldr	r3, [r4, #28]
9000f356:	b933      	cbnz	r3, 9000f366 <event_callback+0xde>
      if (scb->poll_fds != NULL) {
9000f358:	6960      	ldr	r0, [r4, #20]
9000f35a:	b1d8      	cbz	r0, 9000f394 <event_callback+0x10c>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
9000f35c:	f8d4 c018 	ldr.w	ip, [r4, #24]
9000f360:	4601      	mov	r1, r0
9000f362:	4563      	cmp	r3, ip
9000f364:	d101      	bne.n	9000f36a <event_callback+0xe2>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
9000f366:	6824      	ldr	r4, [r4, #0]
9000f368:	e7d6      	b.n	9000f318 <event_callback+0x90>
    if (pollfd->fd == fd) {
9000f36a:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
9000f36e:	4295      	cmp	r5, r2
9000f370:	d10d      	bne.n	9000f38e <event_callback+0x106>
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
9000f372:	2f00      	cmp	r7, #0
9000f374:	dd02      	ble.n	9000f37c <event_callback+0xf4>
9000f376:	888a      	ldrh	r2, [r1, #4]
9000f378:	07d2      	lsls	r2, r2, #31
9000f37a:	d426      	bmi.n	9000f3ca <event_callback+0x142>
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
9000f37c:	f1b8 0f00 	cmp.w	r8, #0
9000f380:	d002      	beq.n	9000f388 <event_callback+0x100>
9000f382:	888a      	ldrh	r2, [r1, #4]
9000f384:	0792      	lsls	r2, r2, #30
9000f386:	d420      	bmi.n	9000f3ca <event_callback+0x142>
      if (has_errevent) {
9000f388:	f1ba 0f00 	cmp.w	sl, #0
9000f38c:	d11d      	bne.n	9000f3ca <event_callback+0x142>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
9000f38e:	3301      	adds	r3, #1
9000f390:	3108      	adds	r1, #8
9000f392:	e7e6      	b.n	9000f362 <event_callback+0xda>
        if (has_recvevent) {
9000f394:	2f00      	cmp	r7, #0
9000f396:	dd05      	ble.n	9000f3a4 <event_callback+0x11c>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
9000f398:	68a3      	ldr	r3, [r4, #8]
9000f39a:	b11b      	cbz	r3, 9000f3a4 <event_callback+0x11c>
9000f39c:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
9000f3a0:	421e      	tst	r6, r3
9000f3a2:	d112      	bne.n	9000f3ca <event_callback+0x142>
            do_signal = 1;
          }
        }
        if (has_sendevent) {
9000f3a4:	f1b8 0f00 	cmp.w	r8, #0
9000f3a8:	d005      	beq.n	9000f3b6 <event_callback+0x12e>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
9000f3aa:	68e3      	ldr	r3, [r4, #12]
9000f3ac:	b11b      	cbz	r3, 9000f3b6 <event_callback+0x12e>
9000f3ae:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
9000f3b2:	421e      	tst	r6, r3
9000f3b4:	d109      	bne.n	9000f3ca <event_callback+0x142>
            do_signal = 1;
          }
        }
        if (has_errevent) {
9000f3b6:	f1ba 0f00 	cmp.w	sl, #0
9000f3ba:	d0d4      	beq.n	9000f366 <event_callback+0xde>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
9000f3bc:	6923      	ldr	r3, [r4, #16]
9000f3be:	2b00      	cmp	r3, #0
9000f3c0:	d0d1      	beq.n	9000f366 <event_callback+0xde>
9000f3c2:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
9000f3c6:	421e      	tst	r6, r3
9000f3c8:	d0cd      	beq.n	9000f366 <event_callback+0xde>
      if (do_signal) {
        scb->sem_signalled = 1;
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
9000f3ca:	f104 0020 	add.w	r0, r4, #32
        scb->sem_signalled = 1;
9000f3ce:	f8c4 901c 	str.w	r9, [r4, #28]
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
9000f3d2:	f000 fb08 	bl	9000f9e6 <sys_sem_signal>
9000f3d6:	e7c6      	b.n	9000f366 <event_callback+0xde>
    SYS_ARCH_UNPROTECT(lev);
9000f3d8:	4630      	mov	r0, r6
9000f3da:	e768      	b.n	9000f2ae <event_callback+0x26>
9000f3dc:	20026c34 	.word	0x20026c34
9000f3e0:	9002cd62 	.word	0x9002cd62
9000f3e4:	9002cea1 	.word	0x9002cea1
9000f3e8:	9002a254 	.word	0x9002a254

9000f3ec <lwip_accept>:
{
9000f3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  u16_t port = 0;
9000f3ee:	2300      	movs	r3, #0
{
9000f3f0:	b089      	sub	sp, #36	; 0x24
9000f3f2:	460f      	mov	r7, r1
9000f3f4:	4616      	mov	r6, r2
  u16_t port = 0;
9000f3f6:	f8ad 3006 	strh.w	r3, [sp, #6]
  sock = get_socket(s);
9000f3fa:	f7ff ff33 	bl	9000f264 <get_socket>
  if (!sock) {
9000f3fe:	4604      	mov	r4, r0
9000f400:	b920      	cbnz	r0, 9000f40c <lwip_accept+0x20>
    return -1;
9000f402:	f04f 34ff 	mov.w	r4, #4294967295
}
9000f406:	4620      	mov	r0, r4
9000f408:	b009      	add	sp, #36	; 0x24
9000f40a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  err = netconn_accept(sock->conn, &newconn);
9000f40c:	a902      	add	r1, sp, #8
9000f40e:	6800      	ldr	r0, [r0, #0]
9000f410:	f7fa fd1c 	bl	90009e4c <netconn_accept>
  if (err != ERR_OK) {
9000f414:	4603      	mov	r3, r0
9000f416:	b170      	cbz	r0, 9000f436 <lwip_accept+0x4a>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
9000f418:	6822      	ldr	r2, [r4, #0]
9000f41a:	7812      	ldrb	r2, [r2, #0]
9000f41c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
9000f420:	2a10      	cmp	r2, #16
9000f422:	d003      	beq.n	9000f42c <lwip_accept+0x40>
      sock_set_errno(sock, EOPNOTSUPP);
9000f424:	4b3d      	ldr	r3, [pc, #244]	; (9000f51c <lwip_accept+0x130>)
9000f426:	225f      	movs	r2, #95	; 0x5f
9000f428:	601a      	str	r2, [r3, #0]
9000f42a:	e7ea      	b.n	9000f402 <lwip_accept+0x16>
    } else if (err == ERR_CLSD) {
9000f42c:	330f      	adds	r3, #15
9000f42e:	d14d      	bne.n	9000f4cc <lwip_accept+0xe0>
      sock_set_errno(sock, EINVAL);
9000f430:	4b3a      	ldr	r3, [pc, #232]	; (9000f51c <lwip_accept+0x130>)
9000f432:	2216      	movs	r2, #22
9000f434:	e7f8      	b.n	9000f428 <lwip_accept+0x3c>
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
9000f436:	9b02      	ldr	r3, [sp, #8]
9000f438:	b933      	cbnz	r3, 9000f448 <lwip_accept+0x5c>
9000f43a:	4b39      	ldr	r3, [pc, #228]	; (9000f520 <lwip_accept+0x134>)
9000f43c:	f240 228b 	movw	r2, #651	; 0x28b
9000f440:	4938      	ldr	r1, [pc, #224]	; (9000f524 <lwip_accept+0x138>)
9000f442:	4839      	ldr	r0, [pc, #228]	; (9000f528 <lwip_accept+0x13c>)
9000f444:	f01a f844 	bl	900294d0 <iprintf>
  newsock = alloc_socket(newconn, 1);
9000f448:	2101      	movs	r1, #1
9000f44a:	9802      	ldr	r0, [sp, #8]
9000f44c:	f7ff fd42 	bl	9000eed4 <alloc_socket>
  if (newsock == -1) {
9000f450:	1c43      	adds	r3, r0, #1
  newsock = alloc_socket(newconn, 1);
9000f452:	4604      	mov	r4, r0
  if (newsock == -1) {
9000f454:	d106      	bne.n	9000f464 <lwip_accept+0x78>
    netconn_delete(newconn);
9000f456:	9802      	ldr	r0, [sp, #8]
9000f458:	f7fa fbaa 	bl	90009bb0 <netconn_delete>
    sock_set_errno(sock, ENFILE);
9000f45c:	4b2f      	ldr	r3, [pc, #188]	; (9000f51c <lwip_accept+0x130>)
9000f45e:	2217      	movs	r2, #23
9000f460:	601a      	str	r2, [r3, #0]
    return -1;
9000f462:	e7d0      	b.n	9000f406 <lwip_accept+0x1a>
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
9000f464:	2803      	cmp	r0, #3
9000f466:	d906      	bls.n	9000f476 <lwip_accept+0x8a>
9000f468:	4b2d      	ldr	r3, [pc, #180]	; (9000f520 <lwip_accept+0x134>)
9000f46a:	f44f 7225 	mov.w	r2, #660	; 0x294
9000f46e:	492f      	ldr	r1, [pc, #188]	; (9000f52c <lwip_accept+0x140>)
9000f470:	482d      	ldr	r0, [pc, #180]	; (9000f528 <lwip_accept+0x13c>)
9000f472:	f01a f82d 	bl	900294d0 <iprintf>
  SYS_ARCH_PROTECT(lev);
9000f476:	f000 faf9 	bl	9000fa6c <sys_arch_protect>
  recvevent = (s16_t)(-1 - newconn->socket);
9000f47a:	9b02      	ldr	r3, [sp, #8]
9000f47c:	699d      	ldr	r5, [r3, #24]
  newconn->socket = newsock;
9000f47e:	619c      	str	r4, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
9000f480:	f000 fb00 	bl	9000fa84 <sys_arch_unprotect>
  if (newconn->callback) {
9000f484:	9b02      	ldr	r3, [sp, #8]
9000f486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000f488:	b14b      	cbz	r3, 9000f49e <lwip_accept+0xb2>
  recvevent = (s16_t)(-1 - newconn->socket);
9000f48a:	43ed      	mvns	r5, r5
    LOCK_TCPIP_CORE();
9000f48c:	4828      	ldr	r0, [pc, #160]	; (9000f530 <lwip_accept+0x144>)
  recvevent = (s16_t)(-1 - newconn->socket);
9000f48e:	b22d      	sxth	r5, r5
    LOCK_TCPIP_CORE();
9000f490:	f000 facd 	bl	9000fa2e <sys_mutex_lock>
    while (recvevent > 0) {
9000f494:	2d00      	cmp	r5, #0
9000f496:	dc20      	bgt.n	9000f4da <lwip_accept+0xee>
    UNLOCK_TCPIP_CORE();
9000f498:	4825      	ldr	r0, [pc, #148]	; (9000f530 <lwip_accept+0x144>)
9000f49a:	f000 facd 	bl	9000fa38 <sys_mutex_unlock>
  if ((addr != NULL) && (addrlen != NULL)) {
9000f49e:	2f00      	cmp	r7, #0
9000f4a0:	d0b1      	beq.n	9000f406 <lwip_accept+0x1a>
9000f4a2:	2e00      	cmp	r6, #0
9000f4a4:	d0af      	beq.n	9000f406 <lwip_accept+0x1a>
    err = netconn_peer(newconn, &naddr, &port);
9000f4a6:	2300      	movs	r3, #0
9000f4a8:	f10d 0206 	add.w	r2, sp, #6
9000f4ac:	a903      	add	r1, sp, #12
9000f4ae:	9802      	ldr	r0, [sp, #8]
9000f4b0:	f7fa fb8c 	bl	90009bcc <netconn_getaddr>
    if (err != ERR_OK) {
9000f4b4:	4605      	mov	r5, r0
9000f4b6:	b1b8      	cbz	r0, 9000f4e8 <lwip_accept+0xfc>
      netconn_delete(newconn);
9000f4b8:	9802      	ldr	r0, [sp, #8]
9000f4ba:	f7fa fb79 	bl	90009bb0 <netconn_delete>
      free_socket(nsock, 1);
9000f4be:	481d      	ldr	r0, [pc, #116]	; (9000f534 <lwip_accept+0x148>)
9000f4c0:	2101      	movs	r1, #1
9000f4c2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
9000f4c6:	f7ff fe39 	bl	9000f13c <free_socket>
      sock_set_errno(sock, err_to_errno(err));
9000f4ca:	4628      	mov	r0, r5
9000f4cc:	f7fd f90a 	bl	9000c6e4 <err_to_errno>
9000f4d0:	2800      	cmp	r0, #0
9000f4d2:	d096      	beq.n	9000f402 <lwip_accept+0x16>
9000f4d4:	4b11      	ldr	r3, [pc, #68]	; (9000f51c <lwip_accept+0x130>)
9000f4d6:	6018      	str	r0, [r3, #0]
      return -1;
9000f4d8:	e793      	b.n	9000f402 <lwip_accept+0x16>
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
9000f4da:	9802      	ldr	r0, [sp, #8]
9000f4dc:	2200      	movs	r2, #0
      recvevent--;
9000f4de:	3d01      	subs	r5, #1
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
9000f4e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
9000f4e2:	4611      	mov	r1, r2
9000f4e4:	4798      	blx	r3
9000f4e6:	e7d5      	b.n	9000f494 <lwip_accept+0xa8>
    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
9000f4e8:	f44f 7304 	mov.w	r3, #528	; 0x210
9000f4ec:	f8bd 0006 	ldrh.w	r0, [sp, #6]
9000f4f0:	f8ad 3010 	strh.w	r3, [sp, #16]
9000f4f4:	f7fb fe06 	bl	9000b104 <lwip_htons>
9000f4f8:	9b03      	ldr	r3, [sp, #12]
    MEMCPY(addr, &tempaddr, *addrlen);
9000f4fa:	a904      	add	r1, sp, #16
    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
9000f4fc:	f8ad 0012 	strh.w	r0, [sp, #18]
    MEMCPY(addr, &tempaddr, *addrlen);
9000f500:	4638      	mov	r0, r7
    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
9000f502:	9507      	str	r5, [sp, #28]
9000f504:	e9cd 3505 	strd	r3, r5, [sp, #20]
    if (*addrlen > tempaddr.sa.sa_len) {
9000f508:	6833      	ldr	r3, [r6, #0]
9000f50a:	2b10      	cmp	r3, #16
      *addrlen = tempaddr.sa.sa_len;
9000f50c:	bf84      	itt	hi
9000f50e:	2310      	movhi	r3, #16
9000f510:	6033      	strhi	r3, [r6, #0]
    MEMCPY(addr, &tempaddr, *addrlen);
9000f512:	6832      	ldr	r2, [r6, #0]
9000f514:	f019 fc14 	bl	90028d40 <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
9000f518:	e775      	b.n	9000f406 <lwip_accept+0x1a>
9000f51a:	bf00      	nop
9000f51c:	2002cb60 	.word	0x2002cb60
9000f520:	9002cd62 	.word	0x9002cd62
9000f524:	9002ceaf 	.word	0x9002ceaf
9000f528:	9002a254 	.word	0x9002a254
9000f52c:	9002cebf 	.word	0x9002cebf
9000f530:	2002cb84 	.word	0x2002cb84
9000f534:	20026c38 	.word	0x20026c38

9000f538 <lwip_bind>:
{
9000f538:	b537      	push	{r0, r1, r2, r4, r5, lr}
9000f53a:	4615      	mov	r5, r2
  sock = get_socket(s);
9000f53c:	f7ff fe92 	bl	9000f264 <get_socket>
  if (!sock) {
9000f540:	4604      	mov	r4, r0
9000f542:	b910      	cbnz	r0, 9000f54a <lwip_bind+0x12>
    return -1;
9000f544:	f04f 30ff 	mov.w	r0, #4294967295
9000f548:	e022      	b.n	9000f590 <lwip_bind+0x58>
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
9000f54a:	2d10      	cmp	r5, #16
9000f54c:	d104      	bne.n	9000f558 <lwip_bind+0x20>
9000f54e:	784b      	ldrb	r3, [r1, #1]
9000f550:	2b02      	cmp	r3, #2
9000f552:	d101      	bne.n	9000f558 <lwip_bind+0x20>
9000f554:	078b      	lsls	r3, r1, #30
9000f556:	d00f      	beq.n	9000f578 <lwip_bind+0x40>
9000f558:	4b0e      	ldr	r3, [pc, #56]	; (9000f594 <lwip_bind+0x5c>)
9000f55a:	f240 22e2 	movw	r2, #738	; 0x2e2
9000f55e:	490e      	ldr	r1, [pc, #56]	; (9000f598 <lwip_bind+0x60>)
9000f560:	480e      	ldr	r0, [pc, #56]	; (9000f59c <lwip_bind+0x64>)
9000f562:	f019 ffb5 	bl	900294d0 <iprintf>
9000f566:	f06f 000f 	mvn.w	r0, #15
    sock_set_errno(sock, err_to_errno(err));
9000f56a:	f7fd f8bb 	bl	9000c6e4 <err_to_errno>
9000f56e:	2800      	cmp	r0, #0
9000f570:	d0e8      	beq.n	9000f544 <lwip_bind+0xc>
9000f572:	4b0b      	ldr	r3, [pc, #44]	; (9000f5a0 <lwip_bind+0x68>)
9000f574:	6018      	str	r0, [r3, #0]
9000f576:	e7e5      	b.n	9000f544 <lwip_bind+0xc>
  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
9000f578:	684b      	ldr	r3, [r1, #4]
9000f57a:	8848      	ldrh	r0, [r1, #2]
9000f57c:	9301      	str	r3, [sp, #4]
9000f57e:	f7fb fdc1 	bl	9000b104 <lwip_htons>
  err = netconn_bind(sock->conn, &local_addr, local_port);
9000f582:	a901      	add	r1, sp, #4
  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
9000f584:	4602      	mov	r2, r0
  err = netconn_bind(sock->conn, &local_addr, local_port);
9000f586:	6820      	ldr	r0, [r4, #0]
9000f588:	f7fa fb52 	bl	90009c30 <netconn_bind>
  if (err != ERR_OK) {
9000f58c:	2800      	cmp	r0, #0
9000f58e:	d1ec      	bne.n	9000f56a <lwip_bind+0x32>
}
9000f590:	b003      	add	sp, #12
9000f592:	bd30      	pop	{r4, r5, pc}
9000f594:	9002cd62 	.word	0x9002cd62
9000f598:	9002ced4 	.word	0x9002ced4
9000f59c:	9002a254 	.word	0x9002a254
9000f5a0:	2002cb60 	.word	0x2002cb60

9000f5a4 <lwip_close>:
{
9000f5a4:	b570      	push	{r4, r5, r6, lr}
  sock = get_socket(s);
9000f5a6:	f7ff fe5d 	bl	9000f264 <get_socket>
  if (!sock) {
9000f5aa:	4606      	mov	r6, r0
9000f5ac:	b910      	cbnz	r0, 9000f5b4 <lwip_close+0x10>
    return -1;
9000f5ae:	f04f 30ff 	mov.w	r0, #4294967295
}
9000f5b2:	bd70      	pop	{r4, r5, r6, pc}
  if (sock->conn != NULL) {
9000f5b4:	6805      	ldr	r5, [r0, #0]
9000f5b6:	b195      	cbz	r5, 9000f5de <lwip_close+0x3a>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
9000f5b8:	782c      	ldrb	r4, [r5, #0]
9000f5ba:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
9000f5be:	f1a4 0310 	sub.w	r3, r4, #16
9000f5c2:	425c      	negs	r4, r3
9000f5c4:	415c      	adcs	r4, r3
  err = netconn_prepare_delete(sock->conn);
9000f5c6:	6830      	ldr	r0, [r6, #0]
9000f5c8:	f7fa fae2 	bl	90009b90 <netconn_prepare_delete>
  if (err != ERR_OK) {
9000f5cc:	4605      	mov	r5, r0
9000f5ce:	b190      	cbz	r0, 9000f5f6 <lwip_close+0x52>
    sock_set_errno(sock, err_to_errno(err));
9000f5d0:	f7fd f888 	bl	9000c6e4 <err_to_errno>
9000f5d4:	2800      	cmp	r0, #0
9000f5d6:	d0ea      	beq.n	9000f5ae <lwip_close+0xa>
9000f5d8:	4b0a      	ldr	r3, [pc, #40]	; (9000f604 <lwip_close+0x60>)
9000f5da:	6018      	str	r0, [r3, #0]
9000f5dc:	e7e7      	b.n	9000f5ae <lwip_close+0xa>
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
9000f5de:	6844      	ldr	r4, [r0, #4]
9000f5e0:	2c00      	cmp	r4, #0
9000f5e2:	d0f0      	beq.n	9000f5c6 <lwip_close+0x22>
9000f5e4:	4b08      	ldr	r3, [pc, #32]	; (9000f608 <lwip_close+0x64>)
9000f5e6:	f44f 7245 	mov.w	r2, #788	; 0x314
9000f5ea:	4908      	ldr	r1, [pc, #32]	; (9000f60c <lwip_close+0x68>)
  int is_tcp = 0;
9000f5ec:	462c      	mov	r4, r5
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
9000f5ee:	4808      	ldr	r0, [pc, #32]	; (9000f610 <lwip_close+0x6c>)
9000f5f0:	f019 ff6e 	bl	900294d0 <iprintf>
9000f5f4:	e7e7      	b.n	9000f5c6 <lwip_close+0x22>
  free_socket(sock, is_tcp);
9000f5f6:	4630      	mov	r0, r6
9000f5f8:	4621      	mov	r1, r4
9000f5fa:	f7ff fd9f 	bl	9000f13c <free_socket>
  return 0;
9000f5fe:	4628      	mov	r0, r5
9000f600:	e7d7      	b.n	9000f5b2 <lwip_close+0xe>
9000f602:	bf00      	nop
9000f604:	2002cb60 	.word	0x2002cb60
9000f608:	9002cd62 	.word	0x9002cd62
9000f60c:	9002ceef 	.word	0x9002ceef
9000f610:	9002a254 	.word	0x9002a254

9000f614 <lwip_listen>:
{
9000f614:	b510      	push	{r4, lr}
  sock = get_socket(s);
9000f616:	f7ff fe25 	bl	9000f264 <get_socket>
  if (!sock) {
9000f61a:	4604      	mov	r4, r0
9000f61c:	b910      	cbnz	r0, 9000f624 <lwip_listen+0x10>
    return -1;
9000f61e:	f04f 30ff 	mov.w	r0, #4294967295
}
9000f622:	bd10      	pop	{r4, pc}
  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
9000f624:	f381 0108 	usat	r1, #8, r1
9000f628:	6800      	ldr	r0, [r0, #0]
9000f62a:	b2c9      	uxtb	r1, r1
9000f62c:	f7fa fb26 	bl	90009c7c <netconn_listen_with_backlog>
  if (err != ERR_OK) {
9000f630:	2800      	cmp	r0, #0
9000f632:	d0f6      	beq.n	9000f622 <lwip_listen+0xe>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
9000f634:	6823      	ldr	r3, [r4, #0]
9000f636:	781b      	ldrb	r3, [r3, #0]
9000f638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000f63c:	2b10      	cmp	r3, #16
9000f63e:	d003      	beq.n	9000f648 <lwip_listen+0x34>
      sock_set_errno(sock, EOPNOTSUPP);
9000f640:	4b05      	ldr	r3, [pc, #20]	; (9000f658 <lwip_listen+0x44>)
9000f642:	225f      	movs	r2, #95	; 0x5f
9000f644:	601a      	str	r2, [r3, #0]
9000f646:	e7ea      	b.n	9000f61e <lwip_listen+0xa>
      sock_set_errno(sock, err_to_errno(err));
9000f648:	f7fd f84c 	bl	9000c6e4 <err_to_errno>
9000f64c:	2800      	cmp	r0, #0
9000f64e:	d0e6      	beq.n	9000f61e <lwip_listen+0xa>
9000f650:	4b01      	ldr	r3, [pc, #4]	; (9000f658 <lwip_listen+0x44>)
9000f652:	6018      	str	r0, [r3, #0]
9000f654:	e7e3      	b.n	9000f61e <lwip_listen+0xa>
9000f656:	bf00      	nop
9000f658:	2002cb60 	.word	0x2002cb60

9000f65c <lwip_recvfrom>:
{
9000f65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000f660:	b08a      	sub	sp, #40	; 0x28
9000f662:	460c      	mov	r4, r1
9000f664:	4617      	mov	r7, r2
9000f666:	4619      	mov	r1, r3
9000f668:	e9dd 8510 	ldrd	r8, r5, [sp, #64]	; 0x40
  sock = get_socket(s);
9000f66c:	f7ff fdfa 	bl	9000f264 <get_socket>
  if (!sock) {
9000f670:	4606      	mov	r6, r0
9000f672:	2800      	cmp	r0, #0
9000f674:	d03d      	beq.n	9000f6f2 <lwip_recvfrom+0x96>
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
9000f676:	6803      	ldr	r3, [r0, #0]
9000f678:	781b      	ldrb	r3, [r3, #0]
9000f67a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000f67e:	2b10      	cmp	r3, #16
9000f680:	d11a      	bne.n	9000f6b8 <lwip_recvfrom+0x5c>
    ret = lwip_recv_tcp(sock, mem, len, flags);
9000f682:	460b      	mov	r3, r1
9000f684:	463a      	mov	r2, r7
9000f686:	4621      	mov	r1, r4
9000f688:	f7ff fc64 	bl	9000ef54 <lwip_recv_tcp>
9000f68c:	4604      	mov	r4, r0
  if (from && fromlen)
9000f68e:	f1b8 0f00 	cmp.w	r8, #0
9000f692:	d00d      	beq.n	9000f6b0 <lwip_recvfrom+0x54>
9000f694:	b165      	cbz	r5, 9000f6b0 <lwip_recvfrom+0x54>
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
9000f696:	2300      	movs	r3, #0
9000f698:	aa01      	add	r2, sp, #4
9000f69a:	a903      	add	r1, sp, #12
9000f69c:	6830      	ldr	r0, [r6, #0]
9000f69e:	f7fa fa95 	bl	90009bcc <netconn_getaddr>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
9000f6a2:	462b      	mov	r3, r5
9000f6a4:	4642      	mov	r2, r8
9000f6a6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
9000f6aa:	a803      	add	r0, sp, #12
9000f6ac:	f7ff fcfe 	bl	9000f0ac <lwip_sock_make_addr.isra.0>
}
9000f6b0:	4620      	mov	r0, r4
9000f6b2:	b00a      	add	sp, #40	; 0x28
9000f6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    u16_t datagram_len = 0;
9000f6b8:	2300      	movs	r3, #0
    msg.msg_name = from;
9000f6ba:	f8cd 800c 	str.w	r8, [sp, #12]
    u16_t datagram_len = 0;
9000f6be:	f8ad 3002 	strh.w	r3, [sp, #2]
    msg.msg_flags = 0;
9000f6c2:	9309      	str	r3, [sp, #36]	; 0x24
    msg.msg_controllen = 0;
9000f6c4:	e9cd 3307 	strd	r3, r3, [sp, #28]
    msg.msg_iov = &vec;
9000f6c8:	ab01      	add	r3, sp, #4
9000f6ca:	9305      	str	r3, [sp, #20]
    msg.msg_iovlen = 1;
9000f6cc:	2301      	movs	r3, #1
    vec.iov_len = len;
9000f6ce:	e9cd 4701 	strd	r4, r7, [sp, #4]
    msg.msg_iovlen = 1;
9000f6d2:	9306      	str	r3, [sp, #24]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
9000f6d4:	b185      	cbz	r5, 9000f6f8 <lwip_recvfrom+0x9c>
9000f6d6:	682b      	ldr	r3, [r5, #0]
9000f6d8:	9304      	str	r3, [sp, #16]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
9000f6da:	aa03      	add	r2, sp, #12
9000f6dc:	f10d 0302 	add.w	r3, sp, #2
9000f6e0:	4630      	mov	r0, r6
9000f6e2:	f7ff fd47 	bl	9000f174 <lwip_recvfrom_udp_raw.isra.0>
    if (err != ERR_OK) {
9000f6e6:	b148      	cbz	r0, 9000f6fc <lwip_recvfrom+0xa0>
      sock_set_errno(sock, err_to_errno(err));
9000f6e8:	f7fc fffc 	bl	9000c6e4 <err_to_errno>
9000f6ec:	b108      	cbz	r0, 9000f6f2 <lwip_recvfrom+0x96>
9000f6ee:	4b08      	ldr	r3, [pc, #32]	; (9000f710 <lwip_recvfrom+0xb4>)
9000f6f0:	6018      	str	r0, [r3, #0]
    return -1;
9000f6f2:	f04f 34ff 	mov.w	r4, #4294967295
9000f6f6:	e7db      	b.n	9000f6b0 <lwip_recvfrom+0x54>
    msg.msg_namelen = (fromlen ? *fromlen : 0);
9000f6f8:	462b      	mov	r3, r5
9000f6fa:	e7ed      	b.n	9000f6d8 <lwip_recvfrom+0x7c>
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
9000f6fc:	f8bd 4002 	ldrh.w	r4, [sp, #2]
9000f700:	42bc      	cmp	r4, r7
9000f702:	bf28      	it	cs
9000f704:	463c      	movcs	r4, r7
    if (fromlen) {
9000f706:	2d00      	cmp	r5, #0
9000f708:	d0d2      	beq.n	9000f6b0 <lwip_recvfrom+0x54>
      *fromlen = msg.msg_namelen;
9000f70a:	9b04      	ldr	r3, [sp, #16]
9000f70c:	602b      	str	r3, [r5, #0]
  return ret;
9000f70e:	e7cf      	b.n	9000f6b0 <lwip_recvfrom+0x54>
9000f710:	2002cb60 	.word	0x2002cb60

9000f714 <lwip_sendto>:
{
9000f714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000f718:	b086      	sub	sp, #24
9000f71a:	4607      	mov	r7, r0
9000f71c:	4615      	mov	r5, r2
9000f71e:	9101      	str	r1, [sp, #4]
9000f720:	9300      	str	r3, [sp, #0]
9000f722:	e9dd 480c 	ldrd	r4, r8, [sp, #48]	; 0x30
  sock = get_socket(s);
9000f726:	f7ff fd9d 	bl	9000f264 <get_socket>
  if (!sock) {
9000f72a:	4606      	mov	r6, r0
9000f72c:	e9dd 3100 	ldrd	r3, r1, [sp]
9000f730:	b910      	cbnz	r0, 9000f738 <lwip_sendto+0x24>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
9000f732:	f04f 30ff 	mov.w	r0, #4294967295
9000f736:	e009      	b.n	9000f74c <lwip_sendto+0x38>
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
9000f738:	6802      	ldr	r2, [r0, #0]
9000f73a:	7812      	ldrb	r2, [r2, #0]
9000f73c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
9000f740:	2a10      	cmp	r2, #16
9000f742:	d106      	bne.n	9000f752 <lwip_sendto+0x3e>
    return lwip_send(s, data, size, flags);
9000f744:	462a      	mov	r2, r5
9000f746:	4638      	mov	r0, r7
9000f748:	f000 f858 	bl	9000f7fc <lwip_send>
}
9000f74c:	b006      	add	sp, #24
9000f74e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
9000f752:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
9000f756:	d303      	bcc.n	9000f760 <lwip_sendto+0x4c>
    sock_set_errno(sock, EMSGSIZE);
9000f758:	4b24      	ldr	r3, [pc, #144]	; (9000f7ec <lwip_sendto+0xd8>)
9000f75a:	225a      	movs	r2, #90	; 0x5a
9000f75c:	601a      	str	r2, [r3, #0]
    return -1;
9000f75e:	e7e8      	b.n	9000f732 <lwip_sendto+0x1e>
  short_size = (u16_t)size;
9000f760:	b2aa      	uxth	r2, r5
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
9000f762:	bb5c      	cbnz	r4, 9000f7bc <lwip_sendto+0xa8>
9000f764:	f1b8 0f00 	cmp.w	r8, #0
9000f768:	d130      	bne.n	9000f7cc <lwip_sendto+0xb8>
  buf.p = buf.ptr = NULL;
9000f76a:	2300      	movs	r3, #0
9000f76c:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (to) {
9000f770:	b314      	cbz	r4, 9000f7b8 <lwip_sendto+0xa4>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
9000f772:	6863      	ldr	r3, [r4, #4]
9000f774:	8860      	ldrh	r0, [r4, #2]
9000f776:	9304      	str	r3, [sp, #16]
9000f778:	e9cd 2100 	strd	r2, r1, [sp]
9000f77c:	f7fb fcc2 	bl	9000b104 <lwip_htons>
9000f780:	4604      	mov	r4, r0
9000f782:	e9dd 2100 	ldrd	r2, r1, [sp]
  err = netbuf_ref(&buf, data, short_size);
9000f786:	a802      	add	r0, sp, #8
  netbuf_fromport(&buf) = remote_port;
9000f788:	f8ad 4014 	strh.w	r4, [sp, #20]
  err = netbuf_ref(&buf, data, short_size);
9000f78c:	f7fe fd9e 	bl	9000e2cc <netbuf_ref>
  if (err == ERR_OK) {
9000f790:	4604      	mov	r4, r0
9000f792:	b920      	cbnz	r0, 9000f79e <lwip_sendto+0x8a>
    err = netconn_send(sock->conn, &buf);
9000f794:	a902      	add	r1, sp, #8
9000f796:	6830      	ldr	r0, [r6, #0]
9000f798:	f7fa fab2 	bl	90009d00 <netconn_send>
9000f79c:	4604      	mov	r4, r0
  netbuf_free(&buf);
9000f79e:	a802      	add	r0, sp, #8
9000f7a0:	f7fe fd7a 	bl	9000e298 <netbuf_free>
  sock_set_errno(sock, err_to_errno(err));
9000f7a4:	4620      	mov	r0, r4
9000f7a6:	f7fc ff9d 	bl	9000c6e4 <err_to_errno>
9000f7aa:	b108      	cbz	r0, 9000f7b0 <lwip_sendto+0x9c>
9000f7ac:	4b0f      	ldr	r3, [pc, #60]	; (9000f7ec <lwip_sendto+0xd8>)
9000f7ae:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? short_size : -1);
9000f7b0:	2c00      	cmp	r4, #0
9000f7b2:	d1be      	bne.n	9000f732 <lwip_sendto+0x1e>
9000f7b4:	4628      	mov	r0, r5
9000f7b6:	e7c9      	b.n	9000f74c <lwip_sendto+0x38>
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
9000f7b8:	9404      	str	r4, [sp, #16]
9000f7ba:	e7e4      	b.n	9000f786 <lwip_sendto+0x72>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
9000f7bc:	f1b8 0f10 	cmp.w	r8, #16
9000f7c0:	d104      	bne.n	9000f7cc <lwip_sendto+0xb8>
9000f7c2:	7863      	ldrb	r3, [r4, #1]
9000f7c4:	2b02      	cmp	r3, #2
9000f7c6:	d101      	bne.n	9000f7cc <lwip_sendto+0xb8>
9000f7c8:	07a3      	lsls	r3, r4, #30
9000f7ca:	d0ce      	beq.n	9000f76a <lwip_sendto+0x56>
9000f7cc:	4b08      	ldr	r3, [pc, #32]	; (9000f7f0 <lwip_sendto+0xdc>)
9000f7ce:	f240 6252 	movw	r2, #1618	; 0x652
9000f7d2:	4908      	ldr	r1, [pc, #32]	; (9000f7f4 <lwip_sendto+0xe0>)
9000f7d4:	4808      	ldr	r0, [pc, #32]	; (9000f7f8 <lwip_sendto+0xe4>)
9000f7d6:	f019 fe7b 	bl	900294d0 <iprintf>
9000f7da:	f06f 000f 	mvn.w	r0, #15
9000f7de:	f7fc ff81 	bl	9000c6e4 <err_to_errno>
9000f7e2:	2800      	cmp	r0, #0
9000f7e4:	d0a5      	beq.n	9000f732 <lwip_sendto+0x1e>
9000f7e6:	4b01      	ldr	r3, [pc, #4]	; (9000f7ec <lwip_sendto+0xd8>)
9000f7e8:	6018      	str	r0, [r3, #0]
9000f7ea:	e7a2      	b.n	9000f732 <lwip_sendto+0x1e>
9000f7ec:	2002cb60 	.word	0x2002cb60
9000f7f0:	9002cd62 	.word	0x9002cd62
9000f7f4:	9002cf06 	.word	0x9002cf06
9000f7f8:	9002a254 	.word	0x9002a254

9000f7fc <lwip_send>:
{
9000f7fc:	b530      	push	{r4, r5, lr}
9000f7fe:	b087      	sub	sp, #28
9000f800:	4605      	mov	r5, r0
9000f802:	461c      	mov	r4, r3
9000f804:	9203      	str	r2, [sp, #12]
  sock = get_socket(s);
9000f806:	f7ff fd2d 	bl	9000f264 <get_socket>
  if (!sock) {
9000f80a:	9a03      	ldr	r2, [sp, #12]
9000f80c:	b918      	cbnz	r0, 9000f816 <lwip_send+0x1a>
    return -1;
9000f80e:	f04f 30ff 	mov.w	r0, #4294967295
}
9000f812:	b007      	add	sp, #28
9000f814:	bd30      	pop	{r4, r5, pc}
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
9000f816:	6800      	ldr	r0, [r0, #0]
9000f818:	7803      	ldrb	r3, [r0, #0]
9000f81a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
9000f81e:	2b10      	cmp	r3, #16
9000f820:	d007      	beq.n	9000f832 <lwip_send+0x36>
    return lwip_sendto(s, data, size, flags, NULL, 0);
9000f822:	2300      	movs	r3, #0
9000f824:	4628      	mov	r0, r5
9000f826:	e9cd 3300 	strd	r3, r3, [sp]
9000f82a:	4623      	mov	r3, r4
9000f82c:	f7ff ff72 	bl	9000f714 <lwip_sendto>
9000f830:	e7ef      	b.n	9000f812 <lwip_send+0x16>
  write_flags = (u8_t)(NETCONN_COPY |
9000f832:	f014 0f10 	tst.w	r4, #16
  written = 0;
9000f836:	f04f 0500 	mov.w	r5, #0
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
9000f83a:	ea4f 0464 	mov.w	r4, r4, asr #1
  write_flags = (u8_t)(NETCONN_COPY |
9000f83e:	bf14      	ite	ne
9000f840:	2303      	movne	r3, #3
9000f842:	2301      	moveq	r3, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
9000f844:	f004 0404 	and.w	r4, r4, #4
  written = 0;
9000f848:	9505      	str	r5, [sp, #20]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
9000f84a:	ad05      	add	r5, sp, #20
9000f84c:	4323      	orrs	r3, r4
9000f84e:	9500      	str	r5, [sp, #0]
9000f850:	f7fa fae0 	bl	90009e14 <netconn_write_partly>
9000f854:	4604      	mov	r4, r0
  sock_set_errno(sock, err_to_errno(err));
9000f856:	f7fc ff45 	bl	9000c6e4 <err_to_errno>
9000f85a:	b108      	cbz	r0, 9000f860 <lwip_send+0x64>
9000f85c:	4b02      	ldr	r3, [pc, #8]	; (9000f868 <lwip_send+0x6c>)
9000f85e:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? (ssize_t)written : -1);
9000f860:	2c00      	cmp	r4, #0
9000f862:	d1d4      	bne.n	9000f80e <lwip_send+0x12>
9000f864:	9805      	ldr	r0, [sp, #20]
9000f866:	e7d4      	b.n	9000f812 <lwip_send+0x16>
9000f868:	2002cb60 	.word	0x2002cb60

9000f86c <lwip_socket>:
  switch (type) {
9000f86c:	2902      	cmp	r1, #2
{
9000f86e:	b538      	push	{r3, r4, r5, lr}
9000f870:	4613      	mov	r3, r2
  switch (type) {
9000f872:	d011      	beq.n	9000f898 <lwip_socket+0x2c>
9000f874:	2903      	cmp	r1, #3
9000f876:	d005      	beq.n	9000f884 <lwip_socket+0x18>
9000f878:	2901      	cmp	r1, #1
9000f87a:	d115      	bne.n	9000f8a8 <lwip_socket+0x3c>
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
9000f87c:	4a15      	ldr	r2, [pc, #84]	; (9000f8d4 <lwip_socket+0x68>)
9000f87e:	2100      	movs	r1, #0
9000f880:	2010      	movs	r0, #16
9000f882:	e002      	b.n	9000f88a <lwip_socket+0x1e>
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
9000f884:	4a13      	ldr	r2, [pc, #76]	; (9000f8d4 <lwip_socket+0x68>)
9000f886:	b2d9      	uxtb	r1, r3
9000f888:	2040      	movs	r0, #64	; 0x40
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
9000f88a:	f7fa f927 	bl	90009adc <netconn_new_with_proto_and_callback>
9000f88e:	4604      	mov	r4, r0
  if (!conn) {
9000f890:	b988      	cbnz	r0, 9000f8b6 <lwip_socket+0x4a>
    set_errno(ENOBUFS);
9000f892:	4b11      	ldr	r3, [pc, #68]	; (9000f8d8 <lwip_socket+0x6c>)
9000f894:	2269      	movs	r2, #105	; 0x69
9000f896:	e009      	b.n	9000f8ac <lwip_socket+0x40>
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
9000f898:	2a88      	cmp	r2, #136	; 0x88
9000f89a:	f04f 0100 	mov.w	r1, #0
9000f89e:	4a0d      	ldr	r2, [pc, #52]	; (9000f8d4 <lwip_socket+0x68>)
9000f8a0:	bf0c      	ite	eq
9000f8a2:	2021      	moveq	r0, #33	; 0x21
9000f8a4:	2020      	movne	r0, #32
9000f8a6:	e7f0      	b.n	9000f88a <lwip_socket+0x1e>
      set_errno(EINVAL);
9000f8a8:	4b0b      	ldr	r3, [pc, #44]	; (9000f8d8 <lwip_socket+0x6c>)
9000f8aa:	2216      	movs	r2, #22
    return -1;
9000f8ac:	f04f 35ff 	mov.w	r5, #4294967295
    set_errno(ENOBUFS);
9000f8b0:	601a      	str	r2, [r3, #0]
}
9000f8b2:	4628      	mov	r0, r5
9000f8b4:	bd38      	pop	{r3, r4, r5, pc}
  i = alloc_socket(conn, 0);
9000f8b6:	2100      	movs	r1, #0
9000f8b8:	f7ff fb0c 	bl	9000eed4 <alloc_socket>
  if (i == -1) {
9000f8bc:	1c43      	adds	r3, r0, #1
  i = alloc_socket(conn, 0);
9000f8be:	4605      	mov	r5, r0
  if (i == -1) {
9000f8c0:	d106      	bne.n	9000f8d0 <lwip_socket+0x64>
    netconn_delete(conn);
9000f8c2:	4620      	mov	r0, r4
9000f8c4:	f7fa f974 	bl	90009bb0 <netconn_delete>
    set_errno(ENFILE);
9000f8c8:	4b03      	ldr	r3, [pc, #12]	; (9000f8d8 <lwip_socket+0x6c>)
9000f8ca:	2217      	movs	r2, #23
9000f8cc:	601a      	str	r2, [r3, #0]
    return -1;
9000f8ce:	e7f0      	b.n	9000f8b2 <lwip_socket+0x46>
  conn->socket = i;
9000f8d0:	61a0      	str	r0, [r4, #24]
  return i;
9000f8d2:	e7ee      	b.n	9000f8b2 <lwip_socket+0x46>
9000f8d4:	9000f289 	.word	0x9000f289
9000f8d8:	2002cb60 	.word	0x2002cb60

9000f8dc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
9000f8dc:	b510      	push	{r4, lr}
9000f8de:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
9000f8e0:	2200      	movs	r2, #0
{
9000f8e2:	4608      	mov	r0, r1
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
9000f8e4:	2104      	movs	r1, #4
9000f8e6:	f7f7 ff4d 	bl	90007784 <osMessageQueueNew>
9000f8ea:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
9000f8ec:	fab0 f080 	clz	r0, r0
9000f8f0:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
9000f8f2:	4240      	negs	r0, r0
9000f8f4:	bd10      	pop	{r4, pc}

9000f8f6 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
9000f8f6:	b510      	push	{r4, lr}
9000f8f8:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
9000f8fa:	6800      	ldr	r0, [r0, #0]
9000f8fc:	f7f8 f80a 	bl	90007914 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
9000f900:	6820      	ldr	r0, [r4, #0]
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
9000f902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageQueueDelete(*mbox);
9000f906:	f7f8 b807 	b.w	90007918 <osMessageQueueDelete>

9000f90a <sys_mbox_trypost>:
{
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
9000f90a:	2300      	movs	r3, #0
{
9000f90c:	b507      	push	{r0, r1, r2, lr}
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
9000f90e:	461a      	mov	r2, r3
{
9000f910:	9101      	str	r1, [sp, #4]
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
9000f912:	6800      	ldr	r0, [r0, #0]
9000f914:	a901      	add	r1, sp, #4
9000f916:	f7f7 ff7b 	bl	90007810 <osMessageQueuePut>
9000f91a:	3800      	subs	r0, #0
9000f91c:	bf18      	it	ne
9000f91e:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
9000f920:	4240      	negs	r0, r0
9000f922:	b003      	add	sp, #12
9000f924:	f85d fb04 	ldr.w	pc, [sp], #4

9000f928 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
9000f928:	b537      	push	{r0, r1, r2, r4, r5, lr}
9000f92a:	4605      	mov	r5, r0
9000f92c:	e9cd 2100 	strd	r2, r1, [sp]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
9000f930:	f7f7 fd02 	bl	90007338 <osKernelGetTickCount>
9000f934:	4604      	mov	r4, r0
#endif
  if(timeout != 0)
9000f936:	e9dd 2100 	ldrd	r2, r1, [sp]
9000f93a:	b152      	cbz	r2, 9000f952 <sys_arch_mbox_fetch+0x2a>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
9000f93c:	4613      	mov	r3, r2
9000f93e:	6828      	ldr	r0, [r5, #0]
9000f940:	2200      	movs	r2, #0
9000f942:	f7f7 ffa7 	bl	90007894 <osMessageQueueGet>
    if (status == osOK)
9000f946:	b950      	cbnz	r0, 9000f95e <sys_arch_mbox_fetch+0x36>
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
9000f948:	f7f7 fcf6 	bl	90007338 <osKernelGetTickCount>
9000f94c:	1b00      	subs	r0, r0, r4
#endif
  }
}
9000f94e:	b003      	add	sp, #12
9000f950:	bd30      	pop	{r4, r5, pc}
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
9000f952:	f04f 33ff 	mov.w	r3, #4294967295
9000f956:	6828      	ldr	r0, [r5, #0]
9000f958:	f7f7 ff9c 	bl	90007894 <osMessageQueueGet>
9000f95c:	e7f4      	b.n	9000f948 <sys_arch_mbox_fetch+0x20>
      return SYS_ARCH_TIMEOUT;
9000f95e:	f04f 30ff 	mov.w	r0, #4294967295
9000f962:	e7f4      	b.n	9000f94e <sys_arch_mbox_fetch+0x26>

9000f964 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
9000f964:	b508      	push	{r3, lr}

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
9000f966:	2300      	movs	r3, #0
9000f968:	6800      	ldr	r0, [r0, #0]
9000f96a:	461a      	mov	r2, r3
9000f96c:	f7f7 ff92 	bl	90007894 <osMessageQueueGet>
9000f970:	3800      	subs	r0, #0
9000f972:	bf18      	it	ne
9000f974:	2001      	movne	r0, #1
  }
  else
  {
    return SYS_MBOX_EMPTY;
  }
}
9000f976:	4240      	negs	r0, r0
9000f978:	bd08      	pop	{r3, pc}

9000f97a <sys_mbox_valid>:
9000f97a:	6800      	ldr	r0, [r0, #0]
9000f97c:	3800      	subs	r0, #0
9000f97e:	bf18      	it	ne
9000f980:	2001      	movne	r0, #1
9000f982:	4770      	bx	lr

9000f984 <sys_mbox_set_invalid>:
9000f984:	2300      	movs	r3, #0
9000f986:	6003      	str	r3, [r0, #0]
9000f988:	4770      	bx	lr

9000f98a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
9000f98a:	b538      	push	{r3, r4, r5, lr}
9000f98c:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
9000f98e:	2200      	movs	r2, #0
9000f990:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
9000f994:	460c      	mov	r4, r1
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
9000f996:	f7f7 fdf5 	bl	90007584 <osSemaphoreNew>
9000f99a:	6028      	str	r0, [r5, #0]
#endif

  if(*sem == NULL)
9000f99c:	b128      	cbz	r0, 9000f9aa <sys_sem_new+0x20>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
9000f99e:	b914      	cbnz	r4, 9000f9a6 <sys_sem_new+0x1c>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
9000f9a0:	4621      	mov	r1, r4
9000f9a2:	f7f7 fe45 	bl	90007630 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
9000f9a6:	2000      	movs	r0, #0
9000f9a8:	e001      	b.n	9000f9ae <sys_sem_new+0x24>
    return ERR_MEM;
9000f9aa:	f04f 30ff 	mov.w	r0, #4294967295
}
9000f9ae:	bd38      	pop	{r3, r4, r5, pc}

9000f9b0 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
9000f9b0:	b570      	push	{r4, r5, r6, lr}
9000f9b2:	460e      	mov	r6, r1
9000f9b4:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
9000f9b6:	f7f7 fcbf 	bl	90007338 <osKernelGetTickCount>
9000f9ba:	4604      	mov	r4, r0
#endif
  if(timeout != 0)
9000f9bc:	b146      	cbz	r6, 9000f9d0 <sys_arch_sem_wait+0x20>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
9000f9be:	4631      	mov	r1, r6
9000f9c0:	6828      	ldr	r0, [r5, #0]
9000f9c2:	f7f7 fe35 	bl	90007630 <osSemaphoreAcquire>
9000f9c6:	b958      	cbnz	r0, 9000f9e0 <sys_arch_sem_wait+0x30>
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
9000f9c8:	f7f7 fcb6 	bl	90007338 <osKernelGetTickCount>
9000f9cc:	1b00      	subs	r0, r0, r4
#endif
  }
}
9000f9ce:	bd70      	pop	{r4, r5, r6, pc}
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
9000f9d0:	f04f 31ff 	mov.w	r1, #4294967295
9000f9d4:	6828      	ldr	r0, [r5, #0]
9000f9d6:	f7f7 fe2b 	bl	90007630 <osSemaphoreAcquire>
9000f9da:	2800      	cmp	r0, #0
9000f9dc:	d1f8      	bne.n	9000f9d0 <sys_arch_sem_wait+0x20>
9000f9de:	e7f3      	b.n	9000f9c8 <sys_arch_sem_wait+0x18>
      return SYS_ARCH_TIMEOUT;
9000f9e0:	f04f 30ff 	mov.w	r0, #4294967295
9000f9e4:	e7f3      	b.n	9000f9ce <sys_arch_sem_wait+0x1e>

9000f9e6 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
9000f9e6:	6800      	ldr	r0, [r0, #0]
9000f9e8:	f7f7 be5c 	b.w	900076a4 <osSemaphoreRelease>

9000f9ec <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
9000f9ec:	6800      	ldr	r0, [r0, #0]
9000f9ee:	f7f7 bea7 	b.w	90007740 <osSemaphoreDelete>

9000f9f2 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
9000f9f2:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
9000f9f4:	3800      	subs	r0, #0
9000f9f6:	bf18      	it	ne
9000f9f8:	2001      	movne	r0, #1
9000f9fa:	4770      	bx	lr

9000f9fc <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
9000f9fc:	2300      	movs	r3, #0
9000f9fe:	6003      	str	r3, [r0, #0]
}
9000fa00:	4770      	bx	lr
	...

9000fa04 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
9000fa04:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
9000fa06:	2000      	movs	r0, #0
9000fa08:	f7f7 fd20 	bl	9000744c <osMutexNew>
9000fa0c:	4b01      	ldr	r3, [pc, #4]	; (9000fa14 <sys_init+0x10>)
9000fa0e:	6018      	str	r0, [r3, #0]
#endif
}
9000fa10:	bd08      	pop	{r3, pc}
9000fa12:	bf00      	nop
9000fa14:	2002cb64 	.word	0x2002cb64

9000fa18 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
9000fa18:	b510      	push	{r4, lr}
9000fa1a:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
9000fa1c:	2000      	movs	r0, #0
9000fa1e:	f7f7 fd15 	bl	9000744c <osMutexNew>
9000fa22:	6020      	str	r0, [r4, #0]
#endif

  if(*mutex == NULL)
9000fa24:	fab0 f080 	clz	r0, r0
9000fa28:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
9000fa2a:	4240      	negs	r0, r0
9000fa2c:	bd10      	pop	{r4, pc}

9000fa2e <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
9000fa2e:	f04f 31ff 	mov.w	r1, #4294967295
9000fa32:	6800      	ldr	r0, [r0, #0]
9000fa34:	f7f7 bd4c 	b.w	900074d0 <osMutexAcquire>

9000fa38 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
9000fa38:	6800      	ldr	r0, [r0, #0]
9000fa3a:	f7f7 bd79 	b.w	90007530 <osMutexRelease>

9000fa3e <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
9000fa3e:	b5f0      	push	{r4, r5, r6, r7, lr}
9000fa40:	b08b      	sub	sp, #44	; 0x2c
9000fa42:	4615      	mov	r5, r2
9000fa44:	4607      	mov	r7, r0
9000fa46:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
9000fa48:	2220      	movs	r2, #32
9000fa4a:	2100      	movs	r1, #0
9000fa4c:	a802      	add	r0, sp, #8
{
9000fa4e:	461e      	mov	r6, r3
  const osThreadAttr_t attributes = {
9000fa50:	f019 f99e 	bl	90028d90 <memset>
9000fa54:	9b10      	ldr	r3, [sp, #64]	; 0x40
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
9000fa56:	aa01      	add	r2, sp, #4
9000fa58:	4629      	mov	r1, r5
9000fa5a:	4620      	mov	r0, r4
  const osThreadAttr_t attributes = {
9000fa5c:	9701      	str	r7, [sp, #4]
9000fa5e:	9606      	str	r6, [sp, #24]
9000fa60:	9307      	str	r3, [sp, #28]
  return osThreadNew(thread, arg, &attributes);
9000fa62:	f7f7 fc7d 	bl	90007360 <osThreadNew>
#endif
}
9000fa66:	b00b      	add	sp, #44	; 0x2c
9000fa68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

9000fa6c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
9000fa6c:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
9000fa6e:	4b04      	ldr	r3, [pc, #16]	; (9000fa80 <sys_arch_protect+0x14>)
9000fa70:	f04f 31ff 	mov.w	r1, #4294967295
9000fa74:	6818      	ldr	r0, [r3, #0]
9000fa76:	f7f7 fd2b 	bl	900074d0 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
}
9000fa7a:	2001      	movs	r0, #1
9000fa7c:	bd08      	pop	{r3, pc}
9000fa7e:	bf00      	nop
9000fa80:	2002cb64 	.word	0x2002cb64

9000fa84 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
9000fa84:	4b01      	ldr	r3, [pc, #4]	; (9000fa8c <sys_arch_unprotect+0x8>)
9000fa86:	6818      	ldr	r0, [r3, #0]
9000fa88:	f7f7 bd52 	b.w	90007530 <osMutexRelease>
9000fa8c:	2002cb64 	.word	0x2002cb64

9000fa90 <tcp_new_port>:
 */
static u16_t
tcp_new_port(void)
{
  u8_t i;
  u16_t n = 0;
9000fa90:	4a12      	ldr	r2, [pc, #72]	; (9000fadc <tcp_new_port+0x4c>)
{
9000fa92:	f44f 4080 	mov.w	r0, #16384	; 0x4000
9000fa96:	b5f0      	push	{r4, r5, r6, r7, lr}
9000fa98:	8813      	ldrh	r3, [r2, #0]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
9000fa9a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  tcp_port++;
9000fa9e:	3301      	adds	r3, #1
9000faa0:	4d0f      	ldr	r5, [pc, #60]	; (9000fae0 <tcp_new_port+0x50>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
9000faa2:	2104      	movs	r1, #4
  tcp_port++;
9000faa4:	b29b      	uxth	r3, r3
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
9000faa6:	42b3      	cmp	r3, r6
9000faa8:	bf08      	it	eq
9000faaa:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
9000faae:	f855 4b04 	ldr.w	r4, [r5], #4
9000fab2:	6824      	ldr	r4, [r4, #0]
9000fab4:	b934      	cbnz	r4, 9000fac4 <tcp_new_port+0x34>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
9000fab6:	3901      	subs	r1, #1
9000fab8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
9000fabc:	d1f7      	bne.n	9000faae <tcp_new_port+0x1e>
        }
        goto again;
      }
    }
  }
  return tcp_port;
9000fabe:	4618      	mov	r0, r3
9000fac0:	8013      	strh	r3, [r2, #0]
9000fac2:	e007      	b.n	9000fad4 <tcp_new_port+0x44>
      if (pcb->local_port == tcp_port) {
9000fac4:	8ae7      	ldrh	r7, [r4, #22]
9000fac6:	429f      	cmp	r7, r3
9000fac8:	d105      	bne.n	9000fad6 <tcp_new_port+0x46>
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
9000faca:	3801      	subs	r0, #1
9000facc:	b280      	uxth	r0, r0
9000face:	2800      	cmp	r0, #0
9000fad0:	d1e5      	bne.n	9000fa9e <tcp_new_port+0xe>
9000fad2:	8013      	strh	r3, [r2, #0]
}
9000fad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
9000fad6:	68e4      	ldr	r4, [r4, #12]
9000fad8:	e7ec      	b.n	9000fab4 <tcp_new_port+0x24>
9000fada:	bf00      	nop
9000fadc:	2000004c 	.word	0x2000004c
9000fae0:	9002d584 	.word	0x9002d584

9000fae4 <tcp_close_shutdown_fin>:
{
9000fae4:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
9000fae6:	4604      	mov	r4, r0
9000fae8:	b930      	cbnz	r0, 9000faf8 <tcp_close_shutdown_fin+0x14>
9000faea:	4b13      	ldr	r3, [pc, #76]	; (9000fb38 <tcp_close_shutdown_fin+0x54>)
9000faec:	f44f 72ce 	mov.w	r2, #412	; 0x19c
9000faf0:	4912      	ldr	r1, [pc, #72]	; (9000fb3c <tcp_close_shutdown_fin+0x58>)
9000faf2:	4813      	ldr	r0, [pc, #76]	; (9000fb40 <tcp_close_shutdown_fin+0x5c>)
9000faf4:	f019 fcec 	bl	900294d0 <iprintf>
  switch (pcb->state) {
9000faf8:	7d23      	ldrb	r3, [r4, #20]
9000fafa:	2b04      	cmp	r3, #4
9000fafc:	d003      	beq.n	9000fb06 <tcp_close_shutdown_fin+0x22>
9000fafe:	2b07      	cmp	r3, #7
9000fb00:	d00c      	beq.n	9000fb1c <tcp_close_shutdown_fin+0x38>
9000fb02:	2b03      	cmp	r3, #3
9000fb04:	d108      	bne.n	9000fb18 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
9000fb06:	4620      	mov	r0, r4
9000fb08:	f003 f8c8 	bl	90012c9c <tcp_send_fin>
      if (err == ERR_OK) {
9000fb0c:	b960      	cbnz	r0, 9000fb28 <tcp_close_shutdown_fin+0x44>
        pcb->state = FIN_WAIT_1;
9000fb0e:	2305      	movs	r3, #5
    tcp_output(pcb);
9000fb10:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
9000fb12:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
9000fb14:	f003 fa22 	bl	90012f5c <tcp_output>
  switch (pcb->state) {
9000fb18:	2000      	movs	r0, #0
}
9000fb1a:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
9000fb1c:	4620      	mov	r0, r4
9000fb1e:	f003 f8bd 	bl	90012c9c <tcp_send_fin>
      if (err == ERR_OK) {
9000fb22:	b908      	cbnz	r0, 9000fb28 <tcp_close_shutdown_fin+0x44>
        pcb->state = LAST_ACK;
9000fb24:	2309      	movs	r3, #9
9000fb26:	e7f3      	b.n	9000fb10 <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
9000fb28:	1c43      	adds	r3, r0, #1
9000fb2a:	d1f6      	bne.n	9000fb1a <tcp_close_shutdown_fin+0x36>
    tcp_set_flags(pcb, TF_CLOSEPEND);
9000fb2c:	8b63      	ldrh	r3, [r4, #26]
9000fb2e:	f043 0308 	orr.w	r3, r3, #8
9000fb32:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
9000fb34:	e7f0      	b.n	9000fb18 <tcp_close_shutdown_fin+0x34>
9000fb36:	bf00      	nop
9000fb38:	9002cf23 	.word	0x9002cf23
9000fb3c:	9002cf82 	.word	0x9002cf82
9000fb40:	9002a254 	.word	0x9002a254

9000fb44 <tcp_init>:
{
9000fb44:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
9000fb46:	f019 fcdb 	bl	90029500 <rand>
9000fb4a:	ea6f 4080 	mvn.w	r0, r0, lsl #18
9000fb4e:	4b02      	ldr	r3, [pc, #8]	; (9000fb58 <tcp_init+0x14>)
9000fb50:	ea6f 4090 	mvn.w	r0, r0, lsr #18
9000fb54:	8018      	strh	r0, [r3, #0]
}
9000fb56:	bd08      	pop	{r3, pc}
9000fb58:	2000004c 	.word	0x2000004c

9000fb5c <tcp_free>:
{
9000fb5c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
9000fb5e:	7d03      	ldrb	r3, [r0, #20]
{
9000fb60:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
9000fb62:	2b01      	cmp	r3, #1
9000fb64:	d105      	bne.n	9000fb72 <tcp_free+0x16>
9000fb66:	4b06      	ldr	r3, [pc, #24]	; (9000fb80 <tcp_free+0x24>)
9000fb68:	22d4      	movs	r2, #212	; 0xd4
9000fb6a:	4906      	ldr	r1, [pc, #24]	; (9000fb84 <tcp_free+0x28>)
9000fb6c:	4806      	ldr	r0, [pc, #24]	; (9000fb88 <tcp_free+0x2c>)
9000fb6e:	f019 fcaf 	bl	900294d0 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
9000fb72:	4621      	mov	r1, r4
9000fb74:	2001      	movs	r0, #1
}
9000fb76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
9000fb7a:	f7fe bb61 	b.w	9000e240 <memp_free>
9000fb7e:	bf00      	nop
9000fb80:	9002cf23 	.word	0x9002cf23
9000fb84:	9002cf8e 	.word	0x9002cf8e
9000fb88:	9002a254 	.word	0x9002a254

9000fb8c <tcp_bind>:
{
9000fb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
9000fb8e:	4d23      	ldr	r5, [pc, #140]	; (9000fc1c <tcp_bind+0x90>)
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
9000fb90:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
9000fb92:	2900      	cmp	r1, #0
9000fb94:	bf18      	it	ne
9000fb96:	460d      	movne	r5, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
9000fb98:	b948      	cbnz	r0, 9000fbae <tcp_bind+0x22>
9000fb9a:	4b21      	ldr	r3, [pc, #132]	; (9000fc20 <tcp_bind+0x94>)
9000fb9c:	f240 22a9 	movw	r2, #681	; 0x2a9
9000fba0:	4920      	ldr	r1, [pc, #128]	; (9000fc24 <tcp_bind+0x98>)
9000fba2:	4821      	ldr	r0, [pc, #132]	; (9000fc28 <tcp_bind+0x9c>)
9000fba4:	f019 fc94 	bl	900294d0 <iprintf>
9000fba8:	f06f 000f 	mvn.w	r0, #15
}
9000fbac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
9000fbae:	7d03      	ldrb	r3, [r0, #20]
9000fbb0:	b14b      	cbz	r3, 9000fbc6 <tcp_bind+0x3a>
9000fbb2:	4b1b      	ldr	r3, [pc, #108]	; (9000fc20 <tcp_bind+0x94>)
9000fbb4:	f240 22ab 	movw	r2, #683	; 0x2ab
9000fbb8:	491c      	ldr	r1, [pc, #112]	; (9000fc2c <tcp_bind+0xa0>)
9000fbba:	481b      	ldr	r0, [pc, #108]	; (9000fc28 <tcp_bind+0x9c>)
9000fbbc:	f019 fc88 	bl	900294d0 <iprintf>
9000fbc0:	f06f 0005 	mvn.w	r0, #5
9000fbc4:	e7f2      	b.n	9000fbac <tcp_bind+0x20>
  if (port == 0) {
9000fbc6:	b932      	cbnz	r2, 9000fbd6 <tcp_bind+0x4a>
    port = tcp_new_port();
9000fbc8:	f7ff ff62 	bl	9000fa90 <tcp_new_port>
    if (port == 0) {
9000fbcc:	4602      	mov	r2, r0
9000fbce:	b950      	cbnz	r0, 9000fbe6 <tcp_bind+0x5a>
      return ERR_BUF;
9000fbd0:	f06f 0001 	mvn.w	r0, #1
9000fbd4:	e7ea      	b.n	9000fbac <tcp_bind+0x20>
9000fbd6:	4816      	ldr	r0, [pc, #88]	; (9000fc30 <tcp_bind+0xa4>)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
9000fbd8:	f850 1b04 	ldr.w	r1, [r0], #4
9000fbdc:	6809      	ldr	r1, [r1, #0]
9000fbde:	b971      	cbnz	r1, 9000fbfe <tcp_bind+0x72>
    for (i = 0; i < max_pcb_list; i++) {
9000fbe0:	3301      	adds	r3, #1
9000fbe2:	2b04      	cmp	r3, #4
9000fbe4:	d1f8      	bne.n	9000fbd8 <tcp_bind+0x4c>
  if (!ip_addr_isany(ipaddr)
9000fbe6:	682b      	ldr	r3, [r5, #0]
9000fbe8:	b103      	cbz	r3, 9000fbec <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
9000fbea:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
9000fbec:	4b11      	ldr	r3, [pc, #68]	; (9000fc34 <tcp_bind+0xa8>)
  pcb->local_port = port;
9000fbee:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
9000fbf0:	681a      	ldr	r2, [r3, #0]
9000fbf2:	601c      	str	r4, [r3, #0]
9000fbf4:	60e2      	str	r2, [r4, #12]
9000fbf6:	f003 fda5 	bl	90013744 <tcp_timer_needed>
  return ERR_OK;
9000fbfa:	2000      	movs	r0, #0
9000fbfc:	e7d6      	b.n	9000fbac <tcp_bind+0x20>
        if (cpcb->local_port == port) {
9000fbfe:	8ace      	ldrh	r6, [r1, #22]
9000fc00:	4296      	cmp	r6, r2
9000fc02:	d105      	bne.n	9000fc10 <tcp_bind+0x84>
                (ip_addr_isany(&cpcb->local_ip) ||
9000fc04:	680f      	ldr	r7, [r1, #0]
9000fc06:	b12f      	cbz	r7, 9000fc14 <tcp_bind+0x88>
                 ip_addr_isany(ipaddr) ||
9000fc08:	682e      	ldr	r6, [r5, #0]
9000fc0a:	b11e      	cbz	r6, 9000fc14 <tcp_bind+0x88>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
9000fc0c:	42b7      	cmp	r7, r6
9000fc0e:	d001      	beq.n	9000fc14 <tcp_bind+0x88>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
9000fc10:	68c9      	ldr	r1, [r1, #12]
9000fc12:	e7e4      	b.n	9000fbde <tcp_bind+0x52>
              return ERR_USE;
9000fc14:	f06f 0007 	mvn.w	r0, #7
9000fc18:	e7c8      	b.n	9000fbac <tcp_bind+0x20>
9000fc1a:	bf00      	nop
9000fc1c:	9002c1b0 	.word	0x9002c1b0
9000fc20:	9002cf23 	.word	0x9002cf23
9000fc24:	9002cf9f 	.word	0x9002cf9f
9000fc28:	9002a254 	.word	0x9002a254
9000fc2c:	9002cfb5 	.word	0x9002cfb5
9000fc30:	9002d584 	.word	0x9002d584
9000fc34:	2002cb78 	.word	0x2002cb78

9000fc38 <tcp_listen_with_backlog_and_err>:
{
9000fc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000fc3a:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
9000fc3c:	4605      	mov	r5, r0
9000fc3e:	b968      	cbnz	r0, 9000fc5c <tcp_listen_with_backlog_and_err+0x24>
9000fc40:	4b29      	ldr	r3, [pc, #164]	; (9000fce8 <tcp_listen_with_backlog_and_err+0xb0>)
9000fc42:	f240 3259 	movw	r2, #857	; 0x359
9000fc46:	4929      	ldr	r1, [pc, #164]	; (9000fcec <tcp_listen_with_backlog_and_err+0xb4>)
  struct tcp_pcb_listen *lpcb = NULL;
9000fc48:	462c      	mov	r4, r5
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
9000fc4a:	4829      	ldr	r0, [pc, #164]	; (9000fcf0 <tcp_listen_with_backlog_and_err+0xb8>)
9000fc4c:	f019 fc40 	bl	900294d0 <iprintf>
9000fc50:	f06f 030f 	mvn.w	r3, #15
  if (err != NULL) {
9000fc54:	b106      	cbz	r6, 9000fc58 <tcp_listen_with_backlog_and_err+0x20>
    *err = res;
9000fc56:	7033      	strb	r3, [r6, #0]
}
9000fc58:	4620      	mov	r0, r4
9000fc5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
9000fc5c:	7d07      	ldrb	r7, [r0, #20]
9000fc5e:	b157      	cbz	r7, 9000fc76 <tcp_listen_with_backlog_and_err+0x3e>
9000fc60:	4b21      	ldr	r3, [pc, #132]	; (9000fce8 <tcp_listen_with_backlog_and_err+0xb0>)
9000fc62:	f240 325a 	movw	r2, #858	; 0x35a
9000fc66:	4923      	ldr	r1, [pc, #140]	; (9000fcf4 <tcp_listen_with_backlog_and_err+0xbc>)
  struct tcp_pcb_listen *lpcb = NULL;
9000fc68:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
9000fc6a:	4821      	ldr	r0, [pc, #132]	; (9000fcf0 <tcp_listen_with_backlog_and_err+0xb8>)
9000fc6c:	f019 fc30 	bl	900294d0 <iprintf>
9000fc70:	f06f 030e 	mvn.w	r3, #14
9000fc74:	e7ee      	b.n	9000fc54 <tcp_listen_with_backlog_and_err+0x1c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
9000fc76:	2002      	movs	r0, #2
9000fc78:	f7fe fac6 	bl	9000e208 <memp_malloc>
  if (lpcb == NULL) {
9000fc7c:	4604      	mov	r4, r0
9000fc7e:	2800      	cmp	r0, #0
9000fc80:	d02f      	beq.n	9000fce2 <tcp_listen_with_backlog_and_err+0xaa>
  lpcb->callback_arg = pcb->callback_arg;
9000fc82:	692b      	ldr	r3, [r5, #16]
  lpcb->state = LISTEN;
9000fc84:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
9000fc86:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
9000fc88:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->state = LISTEN;
9000fc8a:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
9000fc8c:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
9000fc8e:	7d6a      	ldrb	r2, [r5, #21]
9000fc90:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
9000fc92:	7a6a      	ldrb	r2, [r5, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
9000fc94:	7207      	strb	r7, [r0, #8]
  lpcb->so_options = pcb->so_options;
9000fc96:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
9000fc98:	7aea      	ldrb	r2, [r5, #11]
9000fc9a:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
9000fc9c:	7aaa      	ldrb	r2, [r5, #10]
9000fc9e:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
9000fca0:	682a      	ldr	r2, [r5, #0]
9000fca2:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
9000fca4:	b13b      	cbz	r3, 9000fcb6 <tcp_listen_with_backlog_and_err+0x7e>
    TCP_RMV(&tcp_bound_pcbs, pcb);
9000fca6:	4a14      	ldr	r2, [pc, #80]	; (9000fcf8 <tcp_listen_with_backlog_and_err+0xc0>)
9000fca8:	6813      	ldr	r3, [r2, #0]
9000fcaa:	42ab      	cmp	r3, r5
9000fcac:	d111      	bne.n	9000fcd2 <tcp_listen_with_backlog_and_err+0x9a>
9000fcae:	68eb      	ldr	r3, [r5, #12]
9000fcb0:	6013      	str	r3, [r2, #0]
9000fcb2:	2300      	movs	r3, #0
9000fcb4:	60eb      	str	r3, [r5, #12]
  tcp_free(pcb);
9000fcb6:	4628      	mov	r0, r5
9000fcb8:	f7ff ff50 	bl	9000fb5c <tcp_free>
  lpcb->accept = tcp_accept_null;
9000fcbc:	4b0f      	ldr	r3, [pc, #60]	; (9000fcfc <tcp_listen_with_backlog_and_err+0xc4>)
9000fcbe:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
9000fcc0:	4b0f      	ldr	r3, [pc, #60]	; (9000fd00 <tcp_listen_with_backlog_and_err+0xc8>)
9000fcc2:	681a      	ldr	r2, [r3, #0]
9000fcc4:	601c      	str	r4, [r3, #0]
9000fcc6:	60e2      	str	r2, [r4, #12]
9000fcc8:	f003 fd3c 	bl	90013744 <tcp_timer_needed>
  res = ERR_OK;
9000fccc:	2300      	movs	r3, #0
9000fcce:	e7c1      	b.n	9000fc54 <tcp_listen_with_backlog_and_err+0x1c>
9000fcd0:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
9000fcd2:	2b00      	cmp	r3, #0
9000fcd4:	d0ed      	beq.n	9000fcb2 <tcp_listen_with_backlog_and_err+0x7a>
9000fcd6:	68da      	ldr	r2, [r3, #12]
9000fcd8:	42aa      	cmp	r2, r5
9000fcda:	d1f9      	bne.n	9000fcd0 <tcp_listen_with_backlog_and_err+0x98>
9000fcdc:	68ea      	ldr	r2, [r5, #12]
9000fcde:	60da      	str	r2, [r3, #12]
9000fce0:	e7e7      	b.n	9000fcb2 <tcp_listen_with_backlog_and_err+0x7a>
    res = ERR_MEM;
9000fce2:	f04f 33ff 	mov.w	r3, #4294967295
9000fce6:	e7b5      	b.n	9000fc54 <tcp_listen_with_backlog_and_err+0x1c>
9000fce8:	9002cf23 	.word	0x9002cf23
9000fcec:	9002cfdd 	.word	0x9002cfdd
9000fcf0:	9002a254 	.word	0x9002a254
9000fcf4:	9002d00a 	.word	0x9002d00a
9000fcf8:	2002cb78 	.word	0x2002cb78
9000fcfc:	9001020d 	.word	0x9001020d
9000fd00:	2002cb74 	.word	0x2002cb74

9000fd04 <tcp_update_rcv_ann_wnd>:
{
9000fd04:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
9000fd06:	4604      	mov	r4, r0
9000fd08:	b930      	cbnz	r0, 9000fd18 <tcp_update_rcv_ann_wnd+0x14>
9000fd0a:	4b15      	ldr	r3, [pc, #84]	; (9000fd60 <tcp_update_rcv_ann_wnd+0x5c>)
9000fd0c:	f240 32a6 	movw	r2, #934	; 0x3a6
9000fd10:	4914      	ldr	r1, [pc, #80]	; (9000fd64 <tcp_update_rcv_ann_wnd+0x60>)
9000fd12:	4815      	ldr	r0, [pc, #84]	; (9000fd68 <tcp_update_rcv_ann_wnd+0x64>)
9000fd14:	f019 fbdc 	bl	900294d0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
9000fd18:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
9000fd1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000fd1c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
9000fd1e:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
9000fd20:	1ac8      	subs	r0, r1, r3
9000fd22:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
9000fd26:	4428      	add	r0, r5
9000fd28:	bf94      	ite	ls
9000fd2a:	1a82      	subls	r2, r0, r2
9000fd2c:	f5a0 6280 	subhi.w	r2, r0, #1024	; 0x400
9000fd30:	2a00      	cmp	r2, #0
9000fd32:	db01      	blt.n	9000fd38 <tcp_update_rcv_ann_wnd+0x34>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
9000fd34:	8561      	strh	r1, [r4, #42]	; 0x2a
}
9000fd36:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
9000fd38:	1aea      	subs	r2, r5, r3
9000fd3a:	2a00      	cmp	r2, #0
9000fd3c:	dd02      	ble.n	9000fd44 <tcp_update_rcv_ann_wnd+0x40>
      pcb->rcv_ann_wnd = 0;
9000fd3e:	2000      	movs	r0, #0
9000fd40:	8560      	strh	r0, [r4, #42]	; 0x2a
9000fd42:	e7f8      	b.n	9000fd36 <tcp_update_rcv_ann_wnd+0x32>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
9000fd44:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
9000fd46:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
9000fd4a:	d306      	bcc.n	9000fd5a <tcp_update_rcv_ann_wnd+0x56>
9000fd4c:	4b04      	ldr	r3, [pc, #16]	; (9000fd60 <tcp_update_rcv_ann_wnd+0x5c>)
9000fd4e:	f240 32b6 	movw	r2, #950	; 0x3b6
9000fd52:	4906      	ldr	r1, [pc, #24]	; (9000fd6c <tcp_update_rcv_ann_wnd+0x68>)
9000fd54:	4804      	ldr	r0, [pc, #16]	; (9000fd68 <tcp_update_rcv_ann_wnd+0x64>)
9000fd56:	f019 fbbb 	bl	900294d0 <iprintf>
    return 0;
9000fd5a:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
9000fd5c:	8565      	strh	r5, [r4, #42]	; 0x2a
9000fd5e:	e7ea      	b.n	9000fd36 <tcp_update_rcv_ann_wnd+0x32>
9000fd60:	9002cf23 	.word	0x9002cf23
9000fd64:	9002d041 	.word	0x9002d041
9000fd68:	9002a254 	.word	0x9002a254
9000fd6c:	9002d065 	.word	0x9002d065

9000fd70 <tcp_recved>:
{
9000fd70:	b570      	push	{r4, r5, r6, lr}
9000fd72:	460c      	mov	r4, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
9000fd74:	4605      	mov	r5, r0
9000fd76:	b940      	cbnz	r0, 9000fd8a <tcp_recved+0x1a>
9000fd78:	4b18      	ldr	r3, [pc, #96]	; (9000fddc <tcp_recved+0x6c>)
9000fd7a:	f240 32cf 	movw	r2, #975	; 0x3cf
9000fd7e:	4918      	ldr	r1, [pc, #96]	; (9000fde0 <tcp_recved+0x70>)
9000fd80:	4818      	ldr	r0, [pc, #96]	; (9000fde4 <tcp_recved+0x74>)
}
9000fd82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
9000fd86:	f019 bba3 	b.w	900294d0 <iprintf>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
9000fd8a:	7d03      	ldrb	r3, [r0, #20]
9000fd8c:	2b01      	cmp	r3, #1
9000fd8e:	d106      	bne.n	9000fd9e <tcp_recved+0x2e>
9000fd90:	4b12      	ldr	r3, [pc, #72]	; (9000fddc <tcp_recved+0x6c>)
9000fd92:	f240 32d2 	movw	r2, #978	; 0x3d2
9000fd96:	4914      	ldr	r1, [pc, #80]	; (9000fde8 <tcp_recved+0x78>)
9000fd98:	4812      	ldr	r0, [pc, #72]	; (9000fde4 <tcp_recved+0x74>)
9000fd9a:	f019 fb99 	bl	900294d0 <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
9000fd9e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
9000fda0:	1919      	adds	r1, r3, r4
9000fda2:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
9000fda4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
9000fda8:	d813      	bhi.n	9000fdd2 <tcp_recved+0x62>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
9000fdaa:	428b      	cmp	r3, r1
9000fdac:	bf88      	it	hi
9000fdae:	f44f 6100 	movhi.w	r1, #2048	; 0x800
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
9000fdb2:	4628      	mov	r0, r5
9000fdb4:	8529      	strh	r1, [r5, #40]	; 0x28
9000fdb6:	f7ff ffa5 	bl	9000fd04 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
9000fdba:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
9000fdbe:	d30b      	bcc.n	9000fdd8 <tcp_recved+0x68>
    tcp_ack_now(pcb);
9000fdc0:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
9000fdc2:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
9000fdc4:	f043 0302 	orr.w	r3, r3, #2
9000fdc8:	836b      	strh	r3, [r5, #26]
}
9000fdca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
9000fdce:	f003 b8c5 	b.w	90012f5c <tcp_output>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
9000fdd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
9000fdd6:	e7ec      	b.n	9000fdb2 <tcp_recved+0x42>
}
9000fdd8:	bd70      	pop	{r4, r5, r6, pc}
9000fdda:	bf00      	nop
9000fddc:	9002cf23 	.word	0x9002cf23
9000fde0:	9002d07f 	.word	0x9002d07f
9000fde4:	9002a254 	.word	0x9002a254
9000fde8:	9002d097 	.word	0x9002d097

9000fdec <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
9000fdec:	b510      	push	{r4, lr}
  if (seg != NULL) {
9000fdee:	4604      	mov	r4, r0
9000fdf0:	b148      	cbz	r0, 9000fe06 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
9000fdf2:	6840      	ldr	r0, [r0, #4]
9000fdf4:	b108      	cbz	r0, 9000fdfa <tcp_seg_free+0xe>
      pbuf_free(seg->p);
9000fdf6:	f7fe fd0d 	bl	9000e814 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
9000fdfa:	4621      	mov	r1, r4
9000fdfc:	2003      	movs	r0, #3
  }
}
9000fdfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
9000fe02:	f7fe ba1d 	b.w	9000e240 <memp_free>
}
9000fe06:	bd10      	pop	{r4, pc}

9000fe08 <tcp_segs_free>:
{
9000fe08:	b510      	push	{r4, lr}
  while (seg != NULL) {
9000fe0a:	b900      	cbnz	r0, 9000fe0e <tcp_segs_free+0x6>
}
9000fe0c:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
9000fe0e:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
9000fe10:	f7ff ffec 	bl	9000fdec <tcp_seg_free>
    seg = next;
9000fe14:	4620      	mov	r0, r4
9000fe16:	e7f8      	b.n	9000fe0a <tcp_segs_free+0x2>

9000fe18 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
9000fe18:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
9000fe1a:	4604      	mov	r4, r0
9000fe1c:	b930      	cbnz	r0, 9000fe2c <tcp_seg_copy+0x14>
9000fe1e:	4b0d      	ldr	r3, [pc, #52]	; (9000fe54 <tcp_seg_copy+0x3c>)
9000fe20:	f240 6282 	movw	r2, #1666	; 0x682
9000fe24:	490c      	ldr	r1, [pc, #48]	; (9000fe58 <tcp_seg_copy+0x40>)
9000fe26:	480d      	ldr	r0, [pc, #52]	; (9000fe5c <tcp_seg_copy+0x44>)
9000fe28:	f019 fb52 	bl	900294d0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
9000fe2c:	2003      	movs	r0, #3
9000fe2e:	f7fe f9eb 	bl	9000e208 <memp_malloc>
  if (cseg == NULL) {
9000fe32:	4605      	mov	r5, r0
9000fe34:	b160      	cbz	r0, 9000fe50 <tcp_seg_copy+0x38>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
9000fe36:	4623      	mov	r3, r4
9000fe38:	4602      	mov	r2, r0
9000fe3a:	f104 0110 	add.w	r1, r4, #16
9000fe3e:	f853 0b04 	ldr.w	r0, [r3], #4
9000fe42:	428b      	cmp	r3, r1
9000fe44:	f842 0b04 	str.w	r0, [r2], #4
9000fe48:	d1f9      	bne.n	9000fe3e <tcp_seg_copy+0x26>
  pbuf_ref(cseg->p);
9000fe4a:	6868      	ldr	r0, [r5, #4]
9000fe4c:	f7fe fe54 	bl	9000eaf8 <pbuf_ref>
  return cseg;
}
9000fe50:	4628      	mov	r0, r5
9000fe52:	bd38      	pop	{r3, r4, r5, pc}
9000fe54:	9002cf23 	.word	0x9002cf23
9000fe58:	9002d0bd 	.word	0x9002d0bd
9000fe5c:	9002a254 	.word	0x9002a254

9000fe60 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
9000fe60:	b100      	cbz	r0, 9000fe64 <tcp_arg+0x4>
    pcb->callback_arg = arg;
9000fe62:	6101      	str	r1, [r0, #16]
  }
}
9000fe64:	4770      	bx	lr
	...

9000fe68 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
9000fe68:	b538      	push	{r3, r4, r5, lr}
9000fe6a:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
9000fe6c:	4604      	mov	r4, r0
9000fe6e:	b158      	cbz	r0, 9000fe88 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
9000fe70:	7d03      	ldrb	r3, [r0, #20]
9000fe72:	2b01      	cmp	r3, #1
9000fe74:	d106      	bne.n	9000fe84 <tcp_recv+0x1c>
9000fe76:	4b05      	ldr	r3, [pc, #20]	; (9000fe8c <tcp_recv+0x24>)
9000fe78:	f240 72df 	movw	r2, #2015	; 0x7df
9000fe7c:	4904      	ldr	r1, [pc, #16]	; (9000fe90 <tcp_recv+0x28>)
9000fe7e:	4805      	ldr	r0, [pc, #20]	; (9000fe94 <tcp_recv+0x2c>)
9000fe80:	f019 fb26 	bl	900294d0 <iprintf>
    pcb->recv = recv;
9000fe84:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  }
}
9000fe88:	bd38      	pop	{r3, r4, r5, pc}
9000fe8a:	bf00      	nop
9000fe8c:	9002cf23 	.word	0x9002cf23
9000fe90:	9002d0d7 	.word	0x9002d0d7
9000fe94:	9002a254 	.word	0x9002a254

9000fe98 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
9000fe98:	b538      	push	{r3, r4, r5, lr}
9000fe9a:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
9000fe9c:	4604      	mov	r4, r0
9000fe9e:	b158      	cbz	r0, 9000feb8 <tcp_sent+0x20>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
9000fea0:	7d03      	ldrb	r3, [r0, #20]
9000fea2:	2b01      	cmp	r3, #1
9000fea4:	d106      	bne.n	9000feb4 <tcp_sent+0x1c>
9000fea6:	4b05      	ldr	r3, [pc, #20]	; (9000febc <tcp_sent+0x24>)
9000fea8:	f240 72f3 	movw	r2, #2035	; 0x7f3
9000feac:	4904      	ldr	r1, [pc, #16]	; (9000fec0 <tcp_sent+0x28>)
9000feae:	4805      	ldr	r0, [pc, #20]	; (9000fec4 <tcp_sent+0x2c>)
9000feb0:	f019 fb0e 	bl	900294d0 <iprintf>
    pcb->sent = sent;
9000feb4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
9000feb8:	bd38      	pop	{r3, r4, r5, pc}
9000feba:	bf00      	nop
9000febc:	9002cf23 	.word	0x9002cf23
9000fec0:	9002d0fe 	.word	0x9002d0fe
9000fec4:	9002a254 	.word	0x9002a254

9000fec8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
9000fec8:	b538      	push	{r3, r4, r5, lr}
9000feca:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
9000fecc:	4604      	mov	r4, r0
9000fece:	b158      	cbz	r0, 9000fee8 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
9000fed0:	7d03      	ldrb	r3, [r0, #20]
9000fed2:	2b01      	cmp	r3, #1
9000fed4:	d106      	bne.n	9000fee4 <tcp_err+0x1c>
9000fed6:	4b05      	ldr	r3, [pc, #20]	; (9000feec <tcp_err+0x24>)
9000fed8:	f640 020d 	movw	r2, #2061	; 0x80d
9000fedc:	4904      	ldr	r1, [pc, #16]	; (9000fef0 <tcp_err+0x28>)
9000fede:	4805      	ldr	r0, [pc, #20]	; (9000fef4 <tcp_err+0x2c>)
9000fee0:	f019 faf6 	bl	900294d0 <iprintf>
    pcb->errf = err;
9000fee4:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  }
}
9000fee8:	bd38      	pop	{r3, r4, r5, pc}
9000feea:	bf00      	nop
9000feec:	9002cf23 	.word	0x9002cf23
9000fef0:	9002d125 	.word	0x9002d125
9000fef4:	9002a254 	.word	0x9002a254

9000fef8 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
9000fef8:	b118      	cbz	r0, 9000ff02 <tcp_accept+0xa>
9000fefa:	7d03      	ldrb	r3, [r0, #20]
9000fefc:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
9000fefe:	bf08      	it	eq
9000ff00:	6181      	streq	r1, [r0, #24]
  }
}
9000ff02:	4770      	bx	lr

9000ff04 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
9000ff04:	b570      	push	{r4, r5, r6, lr}
9000ff06:	460e      	mov	r6, r1
9000ff08:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
9000ff0a:	4604      	mov	r4, r0
9000ff0c:	b940      	cbnz	r0, 9000ff20 <tcp_poll+0x1c>
9000ff0e:	4b0b      	ldr	r3, [pc, #44]	; (9000ff3c <tcp_poll+0x38>)
9000ff10:	f640 023d 	movw	r2, #2109	; 0x83d
9000ff14:	490a      	ldr	r1, [pc, #40]	; (9000ff40 <tcp_poll+0x3c>)
9000ff16:	480b      	ldr	r0, [pc, #44]	; (9000ff44 <tcp_poll+0x40>)
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
}
9000ff18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
9000ff1c:	f019 bad8 	b.w	900294d0 <iprintf>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
9000ff20:	7d03      	ldrb	r3, [r0, #20]
9000ff22:	2b01      	cmp	r3, #1
9000ff24:	d106      	bne.n	9000ff34 <tcp_poll+0x30>
9000ff26:	4b05      	ldr	r3, [pc, #20]	; (9000ff3c <tcp_poll+0x38>)
9000ff28:	f640 023e 	movw	r2, #2110	; 0x83e
9000ff2c:	4906      	ldr	r1, [pc, #24]	; (9000ff48 <tcp_poll+0x44>)
9000ff2e:	4805      	ldr	r0, [pc, #20]	; (9000ff44 <tcp_poll+0x40>)
9000ff30:	f019 face 	bl	900294d0 <iprintf>
  pcb->poll = poll;
9000ff34:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
9000ff38:	7765      	strb	r5, [r4, #29]
}
9000ff3a:	bd70      	pop	{r4, r5, r6, pc}
9000ff3c:	9002cf23 	.word	0x9002cf23
9000ff40:	9002d14b 	.word	0x9002d14b
9000ff44:	9002a254 	.word	0x9002a254
9000ff48:	9002d161 	.word	0x9002d161

9000ff4c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
9000ff4c:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
9000ff4e:	b930      	cbnz	r0, 9000ff5e <tcp_next_iss+0x12>
9000ff50:	4b06      	ldr	r3, [pc, #24]	; (9000ff6c <tcp_next_iss+0x20>)
9000ff52:	f640 02af 	movw	r2, #2223	; 0x8af
9000ff56:	4906      	ldr	r1, [pc, #24]	; (9000ff70 <tcp_next_iss+0x24>)
9000ff58:	4806      	ldr	r0, [pc, #24]	; (9000ff74 <tcp_next_iss+0x28>)
9000ff5a:	f019 fab9 	bl	900294d0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
9000ff5e:	4b06      	ldr	r3, [pc, #24]	; (9000ff78 <tcp_next_iss+0x2c>)
9000ff60:	4a06      	ldr	r2, [pc, #24]	; (9000ff7c <tcp_next_iss+0x30>)
9000ff62:	6818      	ldr	r0, [r3, #0]
9000ff64:	6812      	ldr	r2, [r2, #0]
9000ff66:	4410      	add	r0, r2
9000ff68:	6018      	str	r0, [r3, #0]
  return iss;
#endif /* LWIP_HOOK_TCP_ISN */
}
9000ff6a:	bd08      	pop	{r3, pc}
9000ff6c:	9002cf23 	.word	0x9002cf23
9000ff70:	9002d17f 	.word	0x9002d17f
9000ff74:	9002a254 	.word	0x9002a254
9000ff78:	20000048 	.word	0x20000048
9000ff7c:	2002cb70 	.word	0x2002cb70

9000ff80 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
9000ff80:	b538      	push	{r3, r4, r5, lr}
9000ff82:	4604      	mov	r4, r0
9000ff84:	460d      	mov	r5, r1
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
9000ff86:	b932      	cbnz	r2, 9000ff96 <tcp_eff_send_mss_netif+0x16>
9000ff88:	4b09      	ldr	r3, [pc, #36]	; (9000ffb0 <tcp_eff_send_mss_netif+0x30>)
9000ff8a:	f640 02c5 	movw	r2, #2245	; 0x8c5
9000ff8e:	4909      	ldr	r1, [pc, #36]	; (9000ffb4 <tcp_eff_send_mss_netif+0x34>)
9000ff90:	4809      	ldr	r0, [pc, #36]	; (9000ffb8 <tcp_eff_send_mss_netif+0x38>)
9000ff92:	f019 fa9d 	bl	900294d0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
9000ff96:	b14d      	cbz	r5, 9000ffac <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
    }
    mtu = outif->mtu;
9000ff98:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
9000ff9a:	b13b      	cbz	r3, 9000ffac <tcp_eff_send_mss_netif+0x2c>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
9000ff9c:	2b28      	cmp	r3, #40	; 0x28
9000ff9e:	bf8a      	itet	hi
9000ffa0:	3b28      	subhi	r3, #40	; 0x28
9000ffa2:	2300      	movls	r3, #0
9000ffa4:	b29b      	uxthhi	r3, r3
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
9000ffa6:	429c      	cmp	r4, r3
9000ffa8:	bf28      	it	cs
9000ffaa:	461c      	movcs	r4, r3
  }
  return sendmss;
}
9000ffac:	4620      	mov	r0, r4
9000ffae:	bd38      	pop	{r3, r4, r5, pc}
9000ffb0:	9002cf23 	.word	0x9002cf23
9000ffb4:	9002d199 	.word	0x9002d199
9000ffb8:	9002a254 	.word	0x9002a254

9000ffbc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
9000ffbc:	b510      	push	{r4, lr}
9000ffbe:	4604      	mov	r4, r0
  if (pcb->ooseq) {
9000ffc0:	6f40      	ldr	r0, [r0, #116]	; 0x74
9000ffc2:	b118      	cbz	r0, 9000ffcc <tcp_free_ooseq+0x10>
    tcp_segs_free(pcb->ooseq);
9000ffc4:	f7ff ff20 	bl	9000fe08 <tcp_segs_free>
    pcb->ooseq = NULL;
9000ffc8:	2300      	movs	r3, #0
9000ffca:	6763      	str	r3, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
9000ffcc:	bd10      	pop	{r4, pc}
	...

9000ffd0 <tcp_pcb_purge>:
{
9000ffd0:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
9000ffd2:	4604      	mov	r4, r0
9000ffd4:	b940      	cbnz	r0, 9000ffe8 <tcp_pcb_purge+0x18>
9000ffd6:	4b14      	ldr	r3, [pc, #80]	; (90010028 <tcp_pcb_purge+0x58>)
9000ffd8:	f640 0251 	movw	r2, #2129	; 0x851
9000ffdc:	4913      	ldr	r1, [pc, #76]	; (9001002c <tcp_pcb_purge+0x5c>)
9000ffde:	4814      	ldr	r0, [pc, #80]	; (90010030 <tcp_pcb_purge+0x60>)
}
9000ffe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
9000ffe4:	f019 ba74 	b.w	900294d0 <iprintf>
  if (pcb->state != CLOSED &&
9000ffe8:	7d03      	ldrb	r3, [r0, #20]
9000ffea:	2b01      	cmp	r3, #1
9000ffec:	d91a      	bls.n	90010024 <tcp_pcb_purge+0x54>
9000ffee:	2b0a      	cmp	r3, #10
9000fff0:	d018      	beq.n	90010024 <tcp_pcb_purge+0x54>
    if (pcb->refused_data != NULL) {
9000fff2:	6f80      	ldr	r0, [r0, #120]	; 0x78
9000fff4:	b118      	cbz	r0, 9000fffe <tcp_pcb_purge+0x2e>
      pbuf_free(pcb->refused_data);
9000fff6:	f7fe fc0d 	bl	9000e814 <pbuf_free>
      pcb->refused_data = NULL;
9000fffa:	2300      	movs	r3, #0
9000fffc:	67a3      	str	r3, [r4, #120]	; 0x78
    if (pcb->ooseq != NULL) {
9000fffe:	6f63      	ldr	r3, [r4, #116]	; 0x74
90010000:	b113      	cbz	r3, 90010008 <tcp_pcb_purge+0x38>
      tcp_free_ooseq(pcb);
90010002:	4620      	mov	r0, r4
90010004:	f7ff ffda 	bl	9000ffbc <tcp_free_ooseq>
    pcb->rtime = -1;
90010008:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
9001000c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    pcb->rtime = -1;
9001000e:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
90010010:	f7ff fefa 	bl	9000fe08 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
90010014:	6f20      	ldr	r0, [r4, #112]	; 0x70
90010016:	f7ff fef7 	bl	9000fe08 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
9001001a:	2300      	movs	r3, #0
9001001c:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
    pcb->unsent_oversize = 0;
90010020:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
90010024:	bd10      	pop	{r4, pc}
90010026:	bf00      	nop
90010028:	9002cf23 	.word	0x9002cf23
9001002c:	9002d1c0 	.word	0x9002d1c0
90010030:	9002a254 	.word	0x9002a254

90010034 <tcp_pcb_remove>:
{
90010034:	b538      	push	{r3, r4, r5, lr}
90010036:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
90010038:	460c      	mov	r4, r1
9001003a:	b931      	cbnz	r1, 9001004a <tcp_pcb_remove+0x16>
9001003c:	4b29      	ldr	r3, [pc, #164]	; (900100e4 <tcp_pcb_remove+0xb0>)
9001003e:	f640 0283 	movw	r2, #2179	; 0x883
90010042:	4929      	ldr	r1, [pc, #164]	; (900100e8 <tcp_pcb_remove+0xb4>)
90010044:	4829      	ldr	r0, [pc, #164]	; (900100ec <tcp_pcb_remove+0xb8>)
90010046:	f019 fa43 	bl	900294d0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
9001004a:	b935      	cbnz	r5, 9001005a <tcp_pcb_remove+0x26>
9001004c:	4b25      	ldr	r3, [pc, #148]	; (900100e4 <tcp_pcb_remove+0xb0>)
9001004e:	f640 0284 	movw	r2, #2180	; 0x884
90010052:	4927      	ldr	r1, [pc, #156]	; (900100f0 <tcp_pcb_remove+0xbc>)
90010054:	4825      	ldr	r0, [pc, #148]	; (900100ec <tcp_pcb_remove+0xb8>)
90010056:	f019 fa3b 	bl	900294d0 <iprintf>
  TCP_RMV(pcblist, pcb);
9001005a:	682b      	ldr	r3, [r5, #0]
9001005c:	42a3      	cmp	r3, r4
9001005e:	d11f      	bne.n	900100a0 <tcp_pcb_remove+0x6c>
90010060:	68e3      	ldr	r3, [r4, #12]
90010062:	602b      	str	r3, [r5, #0]
90010064:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
90010066:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
90010068:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
9001006a:	f7ff ffb1 	bl	9000ffd0 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
9001006e:	7d23      	ldrb	r3, [r4, #20]
90010070:	2b0a      	cmp	r3, #10
90010072:	d11d      	bne.n	900100b0 <tcp_pcb_remove+0x7c>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
90010074:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
90010076:	bb6b      	cbnz	r3, 900100d4 <tcp_pcb_remove+0xa0>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
90010078:	6f23      	ldr	r3, [r4, #112]	; 0x70
9001007a:	b133      	cbz	r3, 9001008a <tcp_pcb_remove+0x56>
9001007c:	4b19      	ldr	r3, [pc, #100]	; (900100e4 <tcp_pcb_remove+0xb0>)
9001007e:	f640 0294 	movw	r2, #2196	; 0x894
90010082:	491c      	ldr	r1, [pc, #112]	; (900100f4 <tcp_pcb_remove+0xc0>)
90010084:	4819      	ldr	r0, [pc, #100]	; (900100ec <tcp_pcb_remove+0xb8>)
90010086:	f019 fa23 	bl	900294d0 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
9001008a:	6f63      	ldr	r3, [r4, #116]	; 0x74
9001008c:	b1f3      	cbz	r3, 900100cc <tcp_pcb_remove+0x98>
9001008e:	4b15      	ldr	r3, [pc, #84]	; (900100e4 <tcp_pcb_remove+0xb0>)
90010090:	f640 0296 	movw	r2, #2198	; 0x896
90010094:	4918      	ldr	r1, [pc, #96]	; (900100f8 <tcp_pcb_remove+0xc4>)
90010096:	4815      	ldr	r0, [pc, #84]	; (900100ec <tcp_pcb_remove+0xb8>)
90010098:	f019 fa1a 	bl	900294d0 <iprintf>
9001009c:	e016      	b.n	900100cc <tcp_pcb_remove+0x98>
9001009e:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
900100a0:	2b00      	cmp	r3, #0
900100a2:	d0df      	beq.n	90010064 <tcp_pcb_remove+0x30>
900100a4:	68da      	ldr	r2, [r3, #12]
900100a6:	42a2      	cmp	r2, r4
900100a8:	d1f9      	bne.n	9001009e <tcp_pcb_remove+0x6a>
900100aa:	68e2      	ldr	r2, [r4, #12]
900100ac:	60da      	str	r2, [r3, #12]
900100ae:	e7d9      	b.n	90010064 <tcp_pcb_remove+0x30>
  if ((pcb->state != TIME_WAIT) &&
900100b0:	2b01      	cmp	r3, #1
900100b2:	d00b      	beq.n	900100cc <tcp_pcb_remove+0x98>
      (pcb->flags & TF_ACK_DELAY)) {
900100b4:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
900100b6:	07da      	lsls	r2, r3, #31
900100b8:	d5dc      	bpl.n	90010074 <tcp_pcb_remove+0x40>
    tcp_ack_now(pcb);
900100ba:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
900100be:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
900100c0:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
900100c2:	f002 ff4b 	bl	90012f5c <tcp_output>
  if (pcb->state != LISTEN) {
900100c6:	7d23      	ldrb	r3, [r4, #20]
900100c8:	2b01      	cmp	r3, #1
900100ca:	d1d3      	bne.n	90010074 <tcp_pcb_remove+0x40>
  pcb->state = CLOSED;
900100cc:	2300      	movs	r3, #0
900100ce:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
900100d0:	82e3      	strh	r3, [r4, #22]
}
900100d2:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
900100d4:	4b03      	ldr	r3, [pc, #12]	; (900100e4 <tcp_pcb_remove+0xb0>)
900100d6:	f640 0293 	movw	r2, #2195	; 0x893
900100da:	4908      	ldr	r1, [pc, #32]	; (900100fc <tcp_pcb_remove+0xc8>)
900100dc:	4803      	ldr	r0, [pc, #12]	; (900100ec <tcp_pcb_remove+0xb8>)
900100de:	f019 f9f7 	bl	900294d0 <iprintf>
900100e2:	e7c9      	b.n	90010078 <tcp_pcb_remove+0x44>
900100e4:	9002cf23 	.word	0x9002cf23
900100e8:	9002d1db 	.word	0x9002d1db
900100ec:	9002a254 	.word	0x9002a254
900100f0:	9002d1f7 	.word	0x9002d1f7
900100f4:	9002d22f 	.word	0x9002d22f
900100f8:	9002d248 	.word	0x9002d248
900100fc:	9002d217 	.word	0x9002d217

90010100 <tcp_abandon>:
{
90010100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
90010104:	460e      	mov	r6, r1
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
90010106:	4604      	mov	r4, r0
90010108:	b948      	cbnz	r0, 9001011e <tcp_abandon+0x1e>
9001010a:	4b36      	ldr	r3, [pc, #216]	; (900101e4 <tcp_abandon+0xe4>)
9001010c:	f240 223d 	movw	r2, #573	; 0x23d
90010110:	4935      	ldr	r1, [pc, #212]	; (900101e8 <tcp_abandon+0xe8>)
90010112:	4836      	ldr	r0, [pc, #216]	; (900101ec <tcp_abandon+0xec>)
}
90010114:	b004      	add	sp, #16
90010116:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
9001011a:	f019 b9d9 	b.w	900294d0 <iprintf>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
9001011e:	7d03      	ldrb	r3, [r0, #20]
90010120:	2b01      	cmp	r3, #1
90010122:	d106      	bne.n	90010132 <tcp_abandon+0x32>
90010124:	4b2f      	ldr	r3, [pc, #188]	; (900101e4 <tcp_abandon+0xe4>)
90010126:	f44f 7210 	mov.w	r2, #576	; 0x240
9001012a:	4931      	ldr	r1, [pc, #196]	; (900101f0 <tcp_abandon+0xf0>)
9001012c:	482f      	ldr	r0, [pc, #188]	; (900101ec <tcp_abandon+0xec>)
9001012e:	f019 f9cf 	bl	900294d0 <iprintf>
  if (pcb->state == TIME_WAIT) {
90010132:	7d23      	ldrb	r3, [r4, #20]
90010134:	2b0a      	cmp	r3, #10
90010136:	d109      	bne.n	9001014c <tcp_abandon+0x4c>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
90010138:	4621      	mov	r1, r4
9001013a:	482e      	ldr	r0, [pc, #184]	; (900101f4 <tcp_abandon+0xf4>)
9001013c:	f7ff ff7a 	bl	90010034 <tcp_pcb_remove>
    tcp_free(pcb);
90010140:	4620      	mov	r0, r4
}
90010142:	b004      	add	sp, #16
90010144:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    tcp_free(pcb);
90010148:	f7ff bd08 	b.w	9000fb5c <tcp_free>
    seqno = pcb->snd_nxt;
9001014c:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
90010150:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
90010154:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
    errf_arg = pcb->callback_arg;
90010158:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (pcb->state == CLOSED) {
9001015c:	8ae5      	ldrh	r5, [r4, #22]
9001015e:	b99b      	cbnz	r3, 90010188 <tcp_abandon+0x88>
      if (pcb->local_port != 0) {
90010160:	b13d      	cbz	r5, 90010172 <tcp_abandon+0x72>
        TCP_RMV(&tcp_bound_pcbs, pcb);
90010162:	4a25      	ldr	r2, [pc, #148]	; (900101f8 <tcp_abandon+0xf8>)
90010164:	6813      	ldr	r3, [r2, #0]
90010166:	42a3      	cmp	r3, r4
90010168:	d106      	bne.n	90010178 <tcp_abandon+0x78>
9001016a:	68e3      	ldr	r3, [r4, #12]
9001016c:	6013      	str	r3, [r2, #0]
9001016e:	2500      	movs	r5, #0
90010170:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
90010172:	462e      	mov	r6, r5
90010174:	e00f      	b.n	90010196 <tcp_abandon+0x96>
90010176:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
90010178:	2b00      	cmp	r3, #0
9001017a:	d0f8      	beq.n	9001016e <tcp_abandon+0x6e>
9001017c:	68da      	ldr	r2, [r3, #12]
9001017e:	42a2      	cmp	r2, r4
90010180:	d1f9      	bne.n	90010176 <tcp_abandon+0x76>
90010182:	68e2      	ldr	r2, [r4, #12]
90010184:	60da      	str	r2, [r3, #12]
90010186:	e7f2      	b.n	9001016e <tcp_abandon+0x6e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
90010188:	4621      	mov	r1, r4
9001018a:	481c      	ldr	r0, [pc, #112]	; (900101fc <tcp_abandon+0xfc>)
9001018c:	f7ff ff52 	bl	90010034 <tcp_pcb_remove>
90010190:	4b1b      	ldr	r3, [pc, #108]	; (90010200 <tcp_abandon+0x100>)
90010192:	2201      	movs	r2, #1
90010194:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
90010196:	6f20      	ldr	r0, [r4, #112]	; 0x70
90010198:	b108      	cbz	r0, 9001019e <tcp_abandon+0x9e>
      tcp_segs_free(pcb->unacked);
9001019a:	f7ff fe35 	bl	9000fe08 <tcp_segs_free>
    if (pcb->unsent != NULL) {
9001019e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
900101a0:	b108      	cbz	r0, 900101a6 <tcp_abandon+0xa6>
      tcp_segs_free(pcb->unsent);
900101a2:	f7ff fe31 	bl	9000fe08 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
900101a6:	6f60      	ldr	r0, [r4, #116]	; 0x74
900101a8:	b108      	cbz	r0, 900101ae <tcp_abandon+0xae>
      tcp_segs_free(pcb->ooseq);
900101aa:	f7ff fe2d 	bl	9000fe08 <tcp_segs_free>
    if (send_rst) {
900101ae:	b156      	cbz	r6, 900101c6 <tcp_abandon+0xc6>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
900101b0:	8b23      	ldrh	r3, [r4, #24]
900101b2:	4652      	mov	r2, sl
900101b4:	4649      	mov	r1, r9
900101b6:	4620      	mov	r0, r4
900101b8:	e9cd 5301 	strd	r5, r3, [sp, #4]
900101bc:	1d23      	adds	r3, r4, #4
900101be:	9300      	str	r3, [sp, #0]
900101c0:	4623      	mov	r3, r4
900101c2:	f002 fe53 	bl	90012e6c <tcp_rst>
    tcp_free(pcb);
900101c6:	4620      	mov	r0, r4
900101c8:	f7ff fcc8 	bl	9000fb5c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
900101cc:	b13f      	cbz	r7, 900101de <tcp_abandon+0xde>
900101ce:	f06f 010c 	mvn.w	r1, #12
900101d2:	4640      	mov	r0, r8
900101d4:	463b      	mov	r3, r7
}
900101d6:	b004      	add	sp, #16
900101d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
900101dc:	4718      	bx	r3
}
900101de:	b004      	add	sp, #16
900101e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900101e4:	9002cf23 	.word	0x9002cf23
900101e8:	9002d25f 	.word	0x9002d25f
900101ec:	9002a254 	.word	0x9002a254
900101f0:	9002d278 	.word	0x9002d278
900101f4:	2002cb7c 	.word	0x2002cb7c
900101f8:	2002cb78 	.word	0x2002cb78
900101fc:	2002cb6c 	.word	0x2002cb6c
90010200:	2002cb68 	.word	0x2002cb68

90010204 <tcp_abort>:
  tcp_abandon(pcb, 1);
90010204:	2101      	movs	r1, #1
90010206:	f7ff bf7b 	b.w	90010100 <tcp_abandon>
	...

9001020c <tcp_accept_null>:
{
9001020c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
9001020e:	460c      	mov	r4, r1
90010210:	b931      	cbnz	r1, 90010220 <tcp_accept_null+0x14>
90010212:	4b06      	ldr	r3, [pc, #24]	; (9001022c <tcp_accept_null+0x20>)
90010214:	f240 320f 	movw	r2, #783	; 0x30f
90010218:	4905      	ldr	r1, [pc, #20]	; (90010230 <tcp_accept_null+0x24>)
9001021a:	4806      	ldr	r0, [pc, #24]	; (90010234 <tcp_accept_null+0x28>)
9001021c:	f019 f958 	bl	900294d0 <iprintf>
  tcp_abort(pcb);
90010220:	4620      	mov	r0, r4
90010222:	f7ff ffef 	bl	90010204 <tcp_abort>
}
90010226:	f06f 000c 	mvn.w	r0, #12
9001022a:	bd10      	pop	{r4, pc}
9001022c:	9002cf23 	.word	0x9002cf23
90010230:	9002d2a9 	.word	0x9002d2a9
90010234:	9002a254 	.word	0x9002a254

90010238 <tcp_netif_ip_addr_changed_pcblist>:
{
90010238:	b570      	push	{r4, r5, r6, lr}
9001023a:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
9001023c:	4605      	mov	r5, r0
9001023e:	b930      	cbnz	r0, 9001024e <tcp_netif_ip_addr_changed_pcblist+0x16>
90010240:	4b09      	ldr	r3, [pc, #36]	; (90010268 <tcp_netif_ip_addr_changed_pcblist+0x30>)
90010242:	f44f 6210 	mov.w	r2, #2304	; 0x900
90010246:	4909      	ldr	r1, [pc, #36]	; (9001026c <tcp_netif_ip_addr_changed_pcblist+0x34>)
90010248:	4809      	ldr	r0, [pc, #36]	; (90010270 <tcp_netif_ip_addr_changed_pcblist+0x38>)
9001024a:	f019 f941 	bl	900294d0 <iprintf>
  while (pcb != NULL) {
9001024e:	b904      	cbnz	r4, 90010252 <tcp_netif_ip_addr_changed_pcblist+0x1a>
}
90010250:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
90010252:	6822      	ldr	r2, [r4, #0]
90010254:	682b      	ldr	r3, [r5, #0]
90010256:	68e6      	ldr	r6, [r4, #12]
90010258:	429a      	cmp	r2, r3
9001025a:	d102      	bne.n	90010262 <tcp_netif_ip_addr_changed_pcblist+0x2a>
      tcp_abort(pcb);
9001025c:	4620      	mov	r0, r4
9001025e:	f7ff ffd1 	bl	90010204 <tcp_abort>
{
90010262:	4634      	mov	r4, r6
90010264:	e7f3      	b.n	9001024e <tcp_netif_ip_addr_changed_pcblist+0x16>
90010266:	bf00      	nop
90010268:	9002cf23 	.word	0x9002cf23
9001026c:	9002d2c6 	.word	0x9002d2c6
90010270:	9002a254 	.word	0x9002a254

90010274 <tcp_netif_ip_addr_changed>:
{
90010274:	b538      	push	{r3, r4, r5, lr}
90010276:	460d      	mov	r5, r1
  if (!ip_addr_isany(old_addr)) {
90010278:	4604      	mov	r4, r0
9001027a:	b180      	cbz	r0, 9001029e <tcp_netif_ip_addr_changed+0x2a>
9001027c:	6803      	ldr	r3, [r0, #0]
9001027e:	b173      	cbz	r3, 9001029e <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
90010280:	4b0b      	ldr	r3, [pc, #44]	; (900102b0 <tcp_netif_ip_addr_changed+0x3c>)
90010282:	6819      	ldr	r1, [r3, #0]
90010284:	f7ff ffd8 	bl	90010238 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
90010288:	4b0a      	ldr	r3, [pc, #40]	; (900102b4 <tcp_netif_ip_addr_changed+0x40>)
9001028a:	4620      	mov	r0, r4
9001028c:	6819      	ldr	r1, [r3, #0]
9001028e:	f7ff ffd3 	bl	90010238 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
90010292:	b125      	cbz	r5, 9001029e <tcp_netif_ip_addr_changed+0x2a>
90010294:	682b      	ldr	r3, [r5, #0]
90010296:	b113      	cbz	r3, 9001029e <tcp_netif_ip_addr_changed+0x2a>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
90010298:	4b07      	ldr	r3, [pc, #28]	; (900102b8 <tcp_netif_ip_addr_changed+0x44>)
9001029a:	681b      	ldr	r3, [r3, #0]
9001029c:	b903      	cbnz	r3, 900102a0 <tcp_netif_ip_addr_changed+0x2c>
}
9001029e:	bd38      	pop	{r3, r4, r5, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
900102a0:	6819      	ldr	r1, [r3, #0]
900102a2:	6822      	ldr	r2, [r4, #0]
900102a4:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
900102a6:	bf04      	itt	eq
900102a8:	682a      	ldreq	r2, [r5, #0]
900102aa:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
900102ac:	68db      	ldr	r3, [r3, #12]
900102ae:	e7f5      	b.n	9001029c <tcp_netif_ip_addr_changed+0x28>
900102b0:	2002cb6c 	.word	0x2002cb6c
900102b4:	2002cb78 	.word	0x2002cb78
900102b8:	2002cb74 	.word	0x2002cb74

900102bc <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
900102bc:	4b0c      	ldr	r3, [pc, #48]	; (900102f0 <tcp_kill_state+0x34>)
  inactivity = 0;
900102be:	2200      	movs	r2, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
900102c0:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
900102c2:	4b0c      	ldr	r3, [pc, #48]	; (900102f4 <tcp_kill_state+0x38>)
{
900102c4:	b430      	push	{r4, r5}
900102c6:	4604      	mov	r4, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
900102c8:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
900102ca:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
900102cc:	b919      	cbnz	r1, 900102d6 <tcp_kill_state+0x1a>
  if (inactive != NULL) {
900102ce:	b168      	cbz	r0, 900102ec <tcp_kill_state+0x30>
}
900102d0:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
900102d2:	f7ff bf15 	b.w	90010100 <tcp_abandon>
    if (pcb->state == state) {
900102d6:	7d0b      	ldrb	r3, [r1, #20]
900102d8:	42a3      	cmp	r3, r4
900102da:	d105      	bne.n	900102e8 <tcp_kill_state+0x2c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
900102dc:	6a0b      	ldr	r3, [r1, #32]
900102de:	1aeb      	subs	r3, r5, r3
900102e0:	4293      	cmp	r3, r2
900102e2:	bf24      	itt	cs
900102e4:	461a      	movcs	r2, r3
900102e6:	4608      	movcs	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
900102e8:	68c9      	ldr	r1, [r1, #12]
900102ea:	e7ef      	b.n	900102cc <tcp_kill_state+0x10>
}
900102ec:	bc30      	pop	{r4, r5}
900102ee:	4770      	bx	lr
900102f0:	2002cb6c 	.word	0x2002cb6c
900102f4:	2002cb70 	.word	0x2002cb70

900102f8 <tcp_alloc>:
{
900102f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900102fa:	4604      	mov	r4, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
900102fc:	2001      	movs	r0, #1
900102fe:	f7fd ff83 	bl	9000e208 <memp_malloc>
  if (pcb == NULL) {
90010302:	4603      	mov	r3, r0
90010304:	2800      	cmp	r0, #0
90010306:	d136      	bne.n	90010376 <tcp_alloc+0x7e>
  struct tcp_pcb *pcb = tcp_active_pcbs;
90010308:	4e3f      	ldr	r6, [pc, #252]	; (90010408 <tcp_alloc+0x110>)
9001030a:	6830      	ldr	r0, [r6, #0]
  while (pcb != NULL) {
9001030c:	2800      	cmp	r0, #0
9001030e:	d158      	bne.n	900103c2 <tcp_alloc+0xca>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
90010310:	4b3e      	ldr	r3, [pc, #248]	; (9001040c <tcp_alloc+0x114>)
  inactivity = 0;
90010312:	4601      	mov	r1, r0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
90010314:	4d3e      	ldr	r5, [pc, #248]	; (90010410 <tcp_alloc+0x118>)
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
90010316:	681b      	ldr	r3, [r3, #0]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
90010318:	682f      	ldr	r7, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
9001031a:	2b00      	cmp	r3, #0
9001031c:	d15c      	bne.n	900103d8 <tcp_alloc+0xe0>
  if (inactive != NULL) {
9001031e:	b108      	cbz	r0, 90010324 <tcp_alloc+0x2c>
    tcp_abort(inactive);
90010320:	f7ff ff70 	bl	90010204 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
90010324:	2001      	movs	r0, #1
90010326:	f7fd ff6f 	bl	9000e208 <memp_malloc>
    if (pcb == NULL) {
9001032a:	4603      	mov	r3, r0
9001032c:	bb18      	cbnz	r0, 90010376 <tcp_alloc+0x7e>
      tcp_kill_state(LAST_ACK);
9001032e:	2009      	movs	r0, #9
90010330:	f7ff ffc4 	bl	900102bc <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
90010334:	2001      	movs	r0, #1
90010336:	f7fd ff67 	bl	9000e208 <memp_malloc>
      if (pcb == NULL) {
9001033a:	4603      	mov	r3, r0
9001033c:	b9d8      	cbnz	r0, 90010376 <tcp_alloc+0x7e>
        tcp_kill_state(CLOSING);
9001033e:	2008      	movs	r0, #8
90010340:	f7ff ffbc 	bl	900102bc <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
90010344:	2001      	movs	r0, #1
90010346:	f7fd ff5f 	bl	9000e208 <memp_malloc>
        if (pcb == NULL) {
9001034a:	4603      	mov	r3, r0
9001034c:	b998      	cbnz	r0, 90010376 <tcp_alloc+0x7e>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
9001034e:	0622      	lsls	r2, r4, #24
90010350:	d44a      	bmi.n	900103e8 <tcp_alloc+0xf0>
  if (mprio == 0) {
90010352:	b15c      	cbz	r4, 9001036c <tcp_alloc+0x74>
90010354:	4621      	mov	r1, r4
  mprio--;
90010356:	3901      	subs	r1, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
90010358:	6832      	ldr	r2, [r6, #0]
  inactivity = 0;
9001035a:	2000      	movs	r0, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
9001035c:	682e      	ldr	r6, [r5, #0]
  mprio--;
9001035e:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
90010360:	2a00      	cmp	r2, #0
90010362:	d143      	bne.n	900103ec <tcp_alloc+0xf4>
  if (inactive != NULL) {
90010364:	b113      	cbz	r3, 9001036c <tcp_alloc+0x74>
    tcp_abort(inactive);
90010366:	4618      	mov	r0, r3
90010368:	f7ff ff4c 	bl	90010204 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
9001036c:	2001      	movs	r0, #1
9001036e:	f7fd ff4b 	bl	9000e208 <memp_malloc>
  if (pcb != NULL) {
90010372:	4603      	mov	r3, r0
90010374:	b318      	cbz	r0, 900103be <tcp_alloc+0xc6>
    memset(pcb, 0, sizeof(struct tcp_pcb));
90010376:	229c      	movs	r2, #156	; 0x9c
90010378:	4618      	mov	r0, r3
9001037a:	2100      	movs	r1, #0
9001037c:	f018 fd08 	bl	90028d90 <memset>
    pcb->snd_buf = TCP_SND_BUF;
90010380:	f44f 62e6 	mov.w	r2, #1840	; 0x730
    memset(pcb, 0, sizeof(struct tcp_pcb));
90010384:	4603      	mov	r3, r0
    pcb->prio = prio;
90010386:	7544      	strb	r4, [r0, #21]
    pcb->snd_buf = TCP_SND_BUF;
90010388:	f8a0 2064 	strh.w	r2, [r0, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
9001038c:	f04f 2208 	mov.w	r2, #134219776	; 0x8000800
90010390:	6282      	str	r2, [r0, #40]	; 0x28
    pcb->ttl = TCP_TTL;
90010392:	2280      	movs	r2, #128	; 0x80
90010394:	72c2      	strb	r2, [r0, #11]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
90010396:	2206      	movs	r2, #6
90010398:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
9001039c:	87c2      	strh	r2, [r0, #62]	; 0x3e
    pcb->rtime = -1;
9001039e:	4a1d      	ldr	r2, [pc, #116]	; (90010414 <tcp_alloc+0x11c>)
900103a0:	6302      	str	r2, [r0, #48]	; 0x30
    pcb->tmr = tcp_ticks;
900103a2:	4a1b      	ldr	r2, [pc, #108]	; (90010410 <tcp_alloc+0x118>)
900103a4:	6812      	ldr	r2, [r2, #0]
900103a6:	6202      	str	r2, [r0, #32]
    pcb->last_timer = tcp_timer_ctr;
900103a8:	4a1b      	ldr	r2, [pc, #108]	; (90010418 <tcp_alloc+0x120>)
900103aa:	7812      	ldrb	r2, [r2, #0]
900103ac:	7782      	strb	r2, [r0, #30]
    pcb->cwnd = 1;
900103ae:	4a1b      	ldr	r2, [pc, #108]	; (9001041c <tcp_alloc+0x124>)
900103b0:	6482      	str	r2, [r0, #72]	; 0x48
    pcb->recv = tcp_recv_null;
900103b2:	4a1b      	ldr	r2, [pc, #108]	; (90010420 <tcp_alloc+0x128>)
900103b4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
900103b8:	4a1a      	ldr	r2, [pc, #104]	; (90010424 <tcp_alloc+0x12c>)
900103ba:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
}
900103be:	4618      	mov	r0, r3
900103c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
900103c2:	8b43      	ldrh	r3, [r0, #26]
    struct tcp_pcb *next = pcb->next;
900103c4:	68c5      	ldr	r5, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
900103c6:	0719      	lsls	r1, r3, #28
900103c8:	d504      	bpl.n	900103d4 <tcp_alloc+0xdc>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
900103ca:	f023 0308 	bic.w	r3, r3, #8
900103ce:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
900103d0:	f7ff fb88 	bl	9000fae4 <tcp_close_shutdown_fin>
{
900103d4:	4628      	mov	r0, r5
900103d6:	e799      	b.n	9001030c <tcp_alloc+0x14>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
900103d8:	6a1a      	ldr	r2, [r3, #32]
900103da:	1aba      	subs	r2, r7, r2
900103dc:	428a      	cmp	r2, r1
900103de:	bf24      	itt	cs
900103e0:	4618      	movcs	r0, r3
900103e2:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
900103e4:	68db      	ldr	r3, [r3, #12]
900103e6:	e798      	b.n	9001031a <tcp_alloc+0x22>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
900103e8:	217f      	movs	r1, #127	; 0x7f
900103ea:	e7b4      	b.n	90010356 <tcp_alloc+0x5e>
    if ((pcb->prio < mprio) ||
900103ec:	7d57      	ldrb	r7, [r2, #21]
900103ee:	428f      	cmp	r7, r1
900103f0:	d304      	bcc.n	900103fc <tcp_alloc+0x104>
900103f2:	d107      	bne.n	90010404 <tcp_alloc+0x10c>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
900103f4:	6a15      	ldr	r5, [r2, #32]
900103f6:	1b75      	subs	r5, r6, r5
900103f8:	4285      	cmp	r5, r0
900103fa:	d303      	bcc.n	90010404 <tcp_alloc+0x10c>
      inactivity = tcp_ticks - pcb->tmr;
900103fc:	6a10      	ldr	r0, [r2, #32]
    if ((pcb->prio < mprio) ||
900103fe:	4639      	mov	r1, r7
      inactivity = tcp_ticks - pcb->tmr;
90010400:	4613      	mov	r3, r2
90010402:	1a30      	subs	r0, r6, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
90010404:	68d2      	ldr	r2, [r2, #12]
90010406:	e7ab      	b.n	90010360 <tcp_alloc+0x68>
90010408:	2002cb6c 	.word	0x2002cb6c
9001040c:	2002cb7c 	.word	0x2002cb7c
90010410:	2002cb70 	.word	0x2002cb70
90010414:	01ccffff 	.word	0x01ccffff
90010418:	20026c79 	.word	0x20026c79
9001041c:	07300001 	.word	0x07300001
90010420:	900105d1 	.word	0x900105d1
90010424:	006ddd00 	.word	0x006ddd00

90010428 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
90010428:	2040      	movs	r0, #64	; 0x40
9001042a:	f7ff bf65 	b.w	900102f8 <tcp_alloc>
	...

90010430 <tcp_close_shutdown>:
{
90010430:	b530      	push	{r4, r5, lr}
90010432:	460d      	mov	r5, r1
90010434:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
90010436:	4604      	mov	r4, r0
90010438:	b930      	cbnz	r0, 90010448 <tcp_close_shutdown+0x18>
9001043a:	4b4b      	ldr	r3, [pc, #300]	; (90010568 <tcp_close_shutdown+0x138>)
9001043c:	f44f 72af 	mov.w	r2, #350	; 0x15e
90010440:	494a      	ldr	r1, [pc, #296]	; (9001056c <tcp_close_shutdown+0x13c>)
90010442:	484b      	ldr	r0, [pc, #300]	; (90010570 <tcp_close_shutdown+0x140>)
90010444:	f019 f844 	bl	900294d0 <iprintf>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
90010448:	7d23      	ldrb	r3, [r4, #20]
9001044a:	2d00      	cmp	r5, #0
9001044c:	d03f      	beq.n	900104ce <tcp_close_shutdown+0x9e>
9001044e:	2b04      	cmp	r3, #4
90010450:	d001      	beq.n	90010456 <tcp_close_shutdown+0x26>
90010452:	2b07      	cmp	r3, #7
90010454:	d13b      	bne.n	900104ce <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
90010456:	6fa2      	ldr	r2, [r4, #120]	; 0x78
90010458:	b91a      	cbnz	r2, 90010462 <tcp_close_shutdown+0x32>
9001045a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
9001045c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
90010460:	d035      	beq.n	900104ce <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
90010462:	8b63      	ldrh	r3, [r4, #26]
90010464:	06db      	lsls	r3, r3, #27
90010466:	d406      	bmi.n	90010476 <tcp_close_shutdown+0x46>
90010468:	4b3f      	ldr	r3, [pc, #252]	; (90010568 <tcp_close_shutdown+0x138>)
9001046a:	f44f 72b2 	mov.w	r2, #356	; 0x164
9001046e:	4941      	ldr	r1, [pc, #260]	; (90010574 <tcp_close_shutdown+0x144>)
90010470:	483f      	ldr	r0, [pc, #252]	; (90010570 <tcp_close_shutdown+0x140>)
90010472:	f019 f82d 	bl	900294d0 <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
90010476:	8b23      	ldrh	r3, [r4, #24]
90010478:	4620      	mov	r0, r4
9001047a:	9302      	str	r3, [sp, #8]
9001047c:	8ae3      	ldrh	r3, [r4, #22]
9001047e:	9301      	str	r3, [sp, #4]
90010480:	1d23      	adds	r3, r4, #4
90010482:	9300      	str	r3, [sp, #0]
90010484:	4623      	mov	r3, r4
90010486:	6a62      	ldr	r2, [r4, #36]	; 0x24
90010488:	6d21      	ldr	r1, [r4, #80]	; 0x50
9001048a:	f002 fcef 	bl	90012e6c <tcp_rst>
      tcp_pcb_purge(pcb);
9001048e:	4620      	mov	r0, r4
90010490:	f7ff fd9e 	bl	9000ffd0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
90010494:	4a38      	ldr	r2, [pc, #224]	; (90010578 <tcp_close_shutdown+0x148>)
90010496:	6813      	ldr	r3, [r2, #0]
90010498:	42a3      	cmp	r3, r4
9001049a:	d110      	bne.n	900104be <tcp_close_shutdown+0x8e>
9001049c:	68e3      	ldr	r3, [r4, #12]
9001049e:	6013      	str	r3, [r2, #0]
900104a0:	2300      	movs	r3, #0
900104a2:	2201      	movs	r2, #1
900104a4:	60e3      	str	r3, [r4, #12]
900104a6:	4b35      	ldr	r3, [pc, #212]	; (9001057c <tcp_close_shutdown+0x14c>)
900104a8:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
900104aa:	4b35      	ldr	r3, [pc, #212]	; (90010580 <tcp_close_shutdown+0x150>)
900104ac:	681b      	ldr	r3, [r3, #0]
900104ae:	42a3      	cmp	r3, r4
900104b0:	d11d      	bne.n	900104ee <tcp_close_shutdown+0xbe>
        tcp_trigger_input_pcb_close();
900104b2:	f001 fe69 	bl	90012188 <tcp_trigger_input_pcb_close>
}
900104b6:	2000      	movs	r0, #0
900104b8:	b005      	add	sp, #20
900104ba:	bd30      	pop	{r4, r5, pc}
900104bc:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
900104be:	2b00      	cmp	r3, #0
900104c0:	d0ee      	beq.n	900104a0 <tcp_close_shutdown+0x70>
900104c2:	68da      	ldr	r2, [r3, #12]
900104c4:	42a2      	cmp	r2, r4
900104c6:	d1f9      	bne.n	900104bc <tcp_close_shutdown+0x8c>
900104c8:	68e2      	ldr	r2, [r4, #12]
900104ca:	60da      	str	r2, [r3, #12]
900104cc:	e7e8      	b.n	900104a0 <tcp_close_shutdown+0x70>
  switch (pcb->state) {
900104ce:	2b01      	cmp	r3, #1
900104d0:	d01a      	beq.n	90010508 <tcp_close_shutdown+0xd8>
900104d2:	2b02      	cmp	r3, #2
900104d4:	d039      	beq.n	9001054a <tcp_close_shutdown+0x11a>
900104d6:	2b00      	cmp	r3, #0
900104d8:	d13f      	bne.n	9001055a <tcp_close_shutdown+0x12a>
      if (pcb->local_port != 0) {
900104da:	8ae3      	ldrh	r3, [r4, #22]
900104dc:	b13b      	cbz	r3, 900104ee <tcp_close_shutdown+0xbe>
        TCP_RMV(&tcp_bound_pcbs, pcb);
900104de:	4a29      	ldr	r2, [pc, #164]	; (90010584 <tcp_close_shutdown+0x154>)
900104e0:	6813      	ldr	r3, [r2, #0]
900104e2:	42a3      	cmp	r3, r4
900104e4:	d108      	bne.n	900104f8 <tcp_close_shutdown+0xc8>
900104e6:	68e3      	ldr	r3, [r4, #12]
900104e8:	6013      	str	r3, [r2, #0]
900104ea:	2300      	movs	r3, #0
900104ec:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
900104ee:	4620      	mov	r0, r4
900104f0:	f7ff fb34 	bl	9000fb5c <tcp_free>
      break;
900104f4:	e7df      	b.n	900104b6 <tcp_close_shutdown+0x86>
900104f6:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
900104f8:	2b00      	cmp	r3, #0
900104fa:	d0f6      	beq.n	900104ea <tcp_close_shutdown+0xba>
900104fc:	68da      	ldr	r2, [r3, #12]
900104fe:	42a2      	cmp	r2, r4
90010500:	d1f9      	bne.n	900104f6 <tcp_close_shutdown+0xc6>
90010502:	68e2      	ldr	r2, [r4, #12]
90010504:	60da      	str	r2, [r3, #12]
90010506:	e7f0      	b.n	900104ea <tcp_close_shutdown+0xba>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
90010508:	491f      	ldr	r1, [pc, #124]	; (90010588 <tcp_close_shutdown+0x158>)
      pcb->listener = NULL;
9001050a:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
9001050c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
90010510:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
90010512:	b9a2      	cbnz	r2, 9001053e <tcp_close_shutdown+0x10e>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
90010514:	3301      	adds	r3, #1
90010516:	2b04      	cmp	r3, #4
90010518:	d1f8      	bne.n	9001050c <tcp_close_shutdown+0xdc>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
9001051a:	4621      	mov	r1, r4
9001051c:	481b      	ldr	r0, [pc, #108]	; (9001058c <tcp_close_shutdown+0x15c>)
9001051e:	f7ff fd89 	bl	90010034 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
90010522:	7d23      	ldrb	r3, [r4, #20]
90010524:	2b01      	cmp	r3, #1
90010526:	d105      	bne.n	90010534 <tcp_close_shutdown+0x104>
90010528:	4b0f      	ldr	r3, [pc, #60]	; (90010568 <tcp_close_shutdown+0x138>)
9001052a:	22df      	movs	r2, #223	; 0xdf
9001052c:	4918      	ldr	r1, [pc, #96]	; (90010590 <tcp_close_shutdown+0x160>)
9001052e:	4810      	ldr	r0, [pc, #64]	; (90010570 <tcp_close_shutdown+0x140>)
90010530:	f018 ffce 	bl	900294d0 <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
90010534:	4621      	mov	r1, r4
90010536:	2002      	movs	r0, #2
90010538:	f7fd fe82 	bl	9000e240 <memp_free>
}
9001053c:	e7bb      	b.n	900104b6 <tcp_close_shutdown+0x86>
    if (pcb->listener == lpcb) {
9001053e:	6fd5      	ldr	r5, [r2, #124]	; 0x7c
90010540:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
90010542:	bf08      	it	eq
90010544:	67d0      	streq	r0, [r2, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
90010546:	68d2      	ldr	r2, [r2, #12]
90010548:	e7e3      	b.n	90010512 <tcp_close_shutdown+0xe2>
      TCP_PCB_REMOVE_ACTIVE(pcb);
9001054a:	4621      	mov	r1, r4
9001054c:	480a      	ldr	r0, [pc, #40]	; (90010578 <tcp_close_shutdown+0x148>)
9001054e:	f7ff fd71 	bl	90010034 <tcp_pcb_remove>
90010552:	4b0a      	ldr	r3, [pc, #40]	; (9001057c <tcp_close_shutdown+0x14c>)
90010554:	2201      	movs	r2, #1
90010556:	701a      	strb	r2, [r3, #0]
90010558:	e7c9      	b.n	900104ee <tcp_close_shutdown+0xbe>
      return tcp_close_shutdown_fin(pcb);
9001055a:	4620      	mov	r0, r4
}
9001055c:	b005      	add	sp, #20
9001055e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
90010562:	f7ff babf 	b.w	9000fae4 <tcp_close_shutdown_fin>
90010566:	bf00      	nop
90010568:	9002cf23 	.word	0x9002cf23
9001056c:	9002d2fa 	.word	0x9002d2fa
90010570:	9002a254 	.word	0x9002a254
90010574:	9002d31a 	.word	0x9002d31a
90010578:	2002cb6c 	.word	0x2002cb6c
9001057c:	2002cb68 	.word	0x2002cb68
90010580:	2002cb80 	.word	0x2002cb80
90010584:	2002cb78 	.word	0x2002cb78
90010588:	9002d584 	.word	0x9002d584
9001058c:	2002cb74 	.word	0x2002cb74
90010590:	9002d333 	.word	0x9002d333

90010594 <tcp_close>:
{
90010594:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
90010596:	b158      	cbz	r0, 900105b0 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
90010598:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
9001059a:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
9001059c:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
9001059e:	bf1e      	ittt	ne
900105a0:	8b43      	ldrhne	r3, [r0, #26]
900105a2:	f043 0310 	orrne.w	r3, r3, #16
900105a6:	8343      	strhne	r3, [r0, #26]
}
900105a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
900105ac:	f7ff bf40 	b.w	90010430 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
900105b0:	4b04      	ldr	r3, [pc, #16]	; (900105c4 <tcp_close+0x30>)
900105b2:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
900105b6:	4904      	ldr	r1, [pc, #16]	; (900105c8 <tcp_close+0x34>)
900105b8:	4804      	ldr	r0, [pc, #16]	; (900105cc <tcp_close+0x38>)
900105ba:	f018 ff89 	bl	900294d0 <iprintf>
}
900105be:	f06f 000f 	mvn.w	r0, #15
900105c2:	bd08      	pop	{r3, pc}
900105c4:	9002cf23 	.word	0x9002cf23
900105c8:	9002d34c 	.word	0x9002d34c
900105cc:	9002a254 	.word	0x9002a254

900105d0 <tcp_recv_null>:
{
900105d0:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
900105d2:	4608      	mov	r0, r1
{
900105d4:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
900105d6:	b949      	cbnz	r1, 900105ec <tcp_recv_null+0x1c>
900105d8:	4b0c      	ldr	r3, [pc, #48]	; (9001060c <tcp_recv_null+0x3c>)
900105da:	f44f 62d3 	mov.w	r2, #1688	; 0x698
900105de:	490c      	ldr	r1, [pc, #48]	; (90010610 <tcp_recv_null+0x40>)
900105e0:	480c      	ldr	r0, [pc, #48]	; (90010614 <tcp_recv_null+0x44>)
900105e2:	f018 ff75 	bl	900294d0 <iprintf>
900105e6:	f06f 000f 	mvn.w	r0, #15
}
900105ea:	bd10      	pop	{r4, pc}
  if (p != NULL) {
900105ec:	b13a      	cbz	r2, 900105fe <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
900105ee:	8911      	ldrh	r1, [r2, #8]
900105f0:	f7ff fbbe 	bl	9000fd70 <tcp_recved>
    pbuf_free(p);
900105f4:	4620      	mov	r0, r4
900105f6:	f7fe f90d 	bl	9000e814 <pbuf_free>
  return ERR_OK;
900105fa:	2000      	movs	r0, #0
900105fc:	e7f5      	b.n	900105ea <tcp_recv_null+0x1a>
  } else if (err == ERR_OK) {
900105fe:	b91b      	cbnz	r3, 90010608 <tcp_recv_null+0x38>
}
90010600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
90010604:	f7ff bfc6 	b.w	90010594 <tcp_close>
  return ERR_OK;
90010608:	4610      	mov	r0, r2
9001060a:	e7ee      	b.n	900105ea <tcp_recv_null+0x1a>
9001060c:	9002cf23 	.word	0x9002cf23
90010610:	9002d363 	.word	0x9002d363
90010614:	9002a254 	.word	0x9002a254

90010618 <tcp_process_refused_data>:
{
90010618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
9001061a:	4604      	mov	r4, r0
9001061c:	b950      	cbnz	r0, 90010634 <tcp_process_refused_data+0x1c>
9001061e:	f06f 050f 	mvn.w	r5, #15
90010622:	4b1c      	ldr	r3, [pc, #112]	; (90010694 <tcp_process_refused_data+0x7c>)
90010624:	f240 6209 	movw	r2, #1545	; 0x609
90010628:	491b      	ldr	r1, [pc, #108]	; (90010698 <tcp_process_refused_data+0x80>)
9001062a:	481c      	ldr	r0, [pc, #112]	; (9001069c <tcp_process_refused_data+0x84>)
9001062c:	f018 ff50 	bl	900294d0 <iprintf>
}
90010630:	4628      	mov	r0, r5
90010632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    u8_t refused_flags = pcb->refused_data->flags;
90010634:	6f86      	ldr	r6, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
90010636:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
90010638:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
    u8_t refused_flags = pcb->refused_data->flags;
9001063c:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
9001063e:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
90010640:	b1dd      	cbz	r5, 9001067a <tcp_process_refused_data+0x62>
90010642:	4601      	mov	r1, r0
90010644:	4632      	mov	r2, r6
90010646:	6900      	ldr	r0, [r0, #16]
90010648:	47a8      	blx	r5
9001064a:	4605      	mov	r5, r0
    if (err == ERR_OK) {
9001064c:	b9e0      	cbnz	r0, 90010688 <tcp_process_refused_data+0x70>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
9001064e:	06bb      	lsls	r3, r7, #26
90010650:	d5ee      	bpl.n	90010630 <tcp_process_refused_data+0x18>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
90010652:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
90010654:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
90010658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
          pcb->rcv_wnd++;
9001065c:	bf1c      	itt	ne
9001065e:	3301      	addne	r3, #1
90010660:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
90010662:	2e00      	cmp	r6, #0
90010664:	d0e4      	beq.n	90010630 <tcp_process_refused_data+0x18>
90010666:	2300      	movs	r3, #0
90010668:	4621      	mov	r1, r4
9001066a:	6920      	ldr	r0, [r4, #16]
9001066c:	461a      	mov	r2, r3
9001066e:	47b0      	blx	r6
        if (err == ERR_ABRT) {
90010670:	300d      	adds	r0, #13
90010672:	d1dd      	bne.n	90010630 <tcp_process_refused_data+0x18>
          return ERR_ABRT;
90010674:	f06f 050c 	mvn.w	r5, #12
90010678:	e7da      	b.n	90010630 <tcp_process_refused_data+0x18>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
9001067a:	4601      	mov	r1, r0
9001067c:	462b      	mov	r3, r5
9001067e:	4632      	mov	r2, r6
90010680:	4628      	mov	r0, r5
90010682:	f7ff ffa5 	bl	900105d0 <tcp_recv_null>
90010686:	e7e0      	b.n	9001064a <tcp_process_refused_data+0x32>
    } else if (err == ERR_ABRT) {
90010688:	350d      	adds	r5, #13
9001068a:	d0f3      	beq.n	90010674 <tcp_process_refused_data+0x5c>
      return ERR_INPROGRESS;
9001068c:	f06f 0504 	mvn.w	r5, #4
      pcb->refused_data = refused_data;
90010690:	67a6      	str	r6, [r4, #120]	; 0x78
      return ERR_INPROGRESS;
90010692:	e7cd      	b.n	90010630 <tcp_process_refused_data+0x18>
90010694:	9002cf23 	.word	0x9002cf23
90010698:	9002d37e 	.word	0x9002d37e
9001069c:	9002a254 	.word	0x9002a254

900106a0 <tcp_fasttmr>:
{
900106a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
900106a4:	4d1b      	ldr	r5, [pc, #108]	; (90010714 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
900106a6:	4f1c      	ldr	r7, [pc, #112]	; (90010718 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
900106a8:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
900106aa:	4e1c      	ldr	r6, [pc, #112]	; (9001071c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
900106ac:	3301      	adds	r3, #1
900106ae:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
900106b0:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
900106b2:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
900106b6:	b90c      	cbnz	r4, 900106bc <tcp_fasttmr+0x1c>
}
900106b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
900106bc:	782b      	ldrb	r3, [r5, #0]
900106be:	7fa2      	ldrb	r2, [r4, #30]
900106c0:	429a      	cmp	r2, r3
900106c2:	d024      	beq.n	9001070e <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
900106c4:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
900106c6:	8b63      	ldrh	r3, [r4, #26]
900106c8:	07d9      	lsls	r1, r3, #31
900106ca:	d509      	bpl.n	900106e0 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
900106cc:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
900106d0:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
900106d2:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
900106d4:	f002 fc42 	bl	90012f5c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
900106d8:	8b63      	ldrh	r3, [r4, #26]
900106da:	f023 0303 	bic.w	r3, r3, #3
900106de:	8363      	strh	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
900106e0:	8b63      	ldrh	r3, [r4, #26]
900106e2:	071a      	lsls	r2, r3, #28
900106e4:	d505      	bpl.n	900106f2 <tcp_fasttmr+0x52>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
900106e6:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
900106ea:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
900106ec:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
900106ee:	f7ff f9f9 	bl	9000fae4 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
900106f2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
900106f4:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
900106f8:	b13b      	cbz	r3, 9001070a <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
900106fa:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
900106fc:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
90010700:	f7ff ff8a 	bl	90010618 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
90010704:	7833      	ldrb	r3, [r6, #0]
90010706:	2b00      	cmp	r3, #0
90010708:	d1d2      	bne.n	900106b0 <tcp_fasttmr+0x10>
{
9001070a:	464c      	mov	r4, r9
9001070c:	e7d3      	b.n	900106b6 <tcp_fasttmr+0x16>
      pcb = pcb->next;
9001070e:	f8d4 900c 	ldr.w	r9, [r4, #12]
90010712:	e7fa      	b.n	9001070a <tcp_fasttmr+0x6a>
90010714:	20026c79 	.word	0x20026c79
90010718:	2002cb6c 	.word	0x2002cb6c
9001071c:	2002cb68 	.word	0x2002cb68

90010720 <tcp_shutdown>:
{
90010720:	b538      	push	{r3, r4, r5, lr}
90010722:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
90010724:	4605      	mov	r5, r0
90010726:	b948      	cbnz	r0, 9001073c <tcp_shutdown+0x1c>
90010728:	4b16      	ldr	r3, [pc, #88]	; (90010784 <tcp_shutdown+0x64>)
9001072a:	f240 2207 	movw	r2, #519	; 0x207
9001072e:	4916      	ldr	r1, [pc, #88]	; (90010788 <tcp_shutdown+0x68>)
90010730:	4816      	ldr	r0, [pc, #88]	; (9001078c <tcp_shutdown+0x6c>)
90010732:	f018 fecd 	bl	900294d0 <iprintf>
90010736:	f06f 000f 	mvn.w	r0, #15
}
9001073a:	bd38      	pop	{r3, r4, r5, pc}
  if (pcb->state == LISTEN) {
9001073c:	7d03      	ldrb	r3, [r0, #20]
9001073e:	2b01      	cmp	r3, #1
90010740:	d018      	beq.n	90010774 <tcp_shutdown+0x54>
  if (shut_rx) {
90010742:	b189      	cbz	r1, 90010768 <tcp_shutdown+0x48>
    tcp_set_flags(pcb, TF_RXCLOSED);
90010744:	8b43      	ldrh	r3, [r0, #26]
90010746:	f043 0310 	orr.w	r3, r3, #16
9001074a:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
9001074c:	b122      	cbz	r2, 90010758 <tcp_shutdown+0x38>
      return tcp_close_shutdown(pcb, 1);
9001074e:	2101      	movs	r1, #1
}
90010750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
90010754:	f7ff be6c 	b.w	90010430 <tcp_close_shutdown>
    if (pcb->refused_data != NULL) {
90010758:	6f80      	ldr	r0, [r0, #120]	; 0x78
9001075a:	b908      	cbnz	r0, 90010760 <tcp_shutdown+0x40>
  return ERR_OK;
9001075c:	2000      	movs	r0, #0
9001075e:	e7ec      	b.n	9001073a <tcp_shutdown+0x1a>
      pbuf_free(pcb->refused_data);
90010760:	f7fe f858 	bl	9000e814 <pbuf_free>
      pcb->refused_data = NULL;
90010764:	67ac      	str	r4, [r5, #120]	; 0x78
90010766:	e7f9      	b.n	9001075c <tcp_shutdown+0x3c>
  if (shut_tx) {
90010768:	2a00      	cmp	r2, #0
9001076a:	d0f7      	beq.n	9001075c <tcp_shutdown+0x3c>
    switch (pcb->state) {
9001076c:	2b04      	cmp	r3, #4
9001076e:	d804      	bhi.n	9001077a <tcp_shutdown+0x5a>
90010770:	2b02      	cmp	r3, #2
90010772:	d804      	bhi.n	9001077e <tcp_shutdown+0x5e>
90010774:	f06f 000a 	mvn.w	r0, #10
90010778:	e7df      	b.n	9001073a <tcp_shutdown+0x1a>
9001077a:	2b07      	cmp	r3, #7
9001077c:	d1fa      	bne.n	90010774 <tcp_shutdown+0x54>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
9001077e:	2100      	movs	r1, #0
90010780:	4628      	mov	r0, r5
90010782:	e7e5      	b.n	90010750 <tcp_shutdown+0x30>
90010784:	9002cf23 	.word	0x9002cf23
90010788:	9002d3a4 	.word	0x9002d3a4
9001078c:	9002a254 	.word	0x9002a254

90010790 <tcp_slowtmr>:
{
90010790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
90010794:	4eb7      	ldr	r6, [pc, #732]	; (90010a74 <tcp_slowtmr+0x2e4>)
{
90010796:	b087      	sub	sp, #28
90010798:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 90010a80 <tcp_slowtmr+0x2f0>
  ++tcp_ticks;
9001079c:	6833      	ldr	r3, [r6, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
9001079e:	4fb6      	ldr	r7, [pc, #728]	; (90010a78 <tcp_slowtmr+0x2e8>)
  ++tcp_ticks;
900107a0:	3301      	adds	r3, #1
900107a2:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
900107a4:	4bb5      	ldr	r3, [pc, #724]	; (90010a7c <tcp_slowtmr+0x2ec>)
900107a6:	781a      	ldrb	r2, [r3, #0]
900107a8:	9304      	str	r3, [sp, #16]
900107aa:	3201      	adds	r2, #1
900107ac:	701a      	strb	r2, [r3, #0]
  pcb = tcp_active_pcbs;
900107ae:	4bb4      	ldr	r3, [pc, #720]	; (90010a80 <tcp_slowtmr+0x2f0>)
  prev = NULL;
900107b0:	f04f 0900 	mov.w	r9, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
900107b4:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 90010aac <tcp_slowtmr+0x31c>
  pcb = tcp_active_pcbs;
900107b8:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
900107ba:	b96c      	cbnz	r4, 900107d8 <tcp_slowtmr+0x48>
  pcb = tcp_tw_pcbs;
900107bc:	4fb1      	ldr	r7, [pc, #708]	; (90010a84 <tcp_slowtmr+0x2f4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
900107be:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 90010a78 <tcp_slowtmr+0x2e8>
  pcb = tcp_tw_pcbs;
900107c2:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
900107c4:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 90010ab0 <tcp_slowtmr+0x320>
900107c8:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 90010aac <tcp_slowtmr+0x31c>
  while (pcb != NULL) {
900107cc:	2d00      	cmp	r5, #0
900107ce:	f040 81bc 	bne.w	90010b4a <tcp_slowtmr+0x3ba>
}
900107d2:	b007      	add	sp, #28
900107d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
900107d8:	7d23      	ldrb	r3, [r4, #20]
900107da:	b933      	cbnz	r3, 900107ea <tcp_slowtmr+0x5a>
900107dc:	463b      	mov	r3, r7
900107de:	f240 42be 	movw	r2, #1214	; 0x4be
900107e2:	49a9      	ldr	r1, [pc, #676]	; (90010a88 <tcp_slowtmr+0x2f8>)
900107e4:	4640      	mov	r0, r8
900107e6:	f018 fe73 	bl	900294d0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
900107ea:	7d23      	ldrb	r3, [r4, #20]
900107ec:	2b01      	cmp	r3, #1
900107ee:	d106      	bne.n	900107fe <tcp_slowtmr+0x6e>
900107f0:	463b      	mov	r3, r7
900107f2:	f240 42bf 	movw	r2, #1215	; 0x4bf
900107f6:	49a5      	ldr	r1, [pc, #660]	; (90010a8c <tcp_slowtmr+0x2fc>)
900107f8:	4640      	mov	r0, r8
900107fa:	f018 fe69 	bl	900294d0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
900107fe:	7d23      	ldrb	r3, [r4, #20]
90010800:	2b0a      	cmp	r3, #10
90010802:	d106      	bne.n	90010812 <tcp_slowtmr+0x82>
90010804:	463b      	mov	r3, r7
90010806:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
9001080a:	49a1      	ldr	r1, [pc, #644]	; (90010a90 <tcp_slowtmr+0x300>)
9001080c:	4640      	mov	r0, r8
9001080e:	f018 fe5f 	bl	900294d0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
90010812:	9b04      	ldr	r3, [sp, #16]
90010814:	7fa2      	ldrb	r2, [r4, #30]
90010816:	781b      	ldrb	r3, [r3, #0]
90010818:	429a      	cmp	r2, r3
9001081a:	d103      	bne.n	90010824 <tcp_slowtmr+0x94>
      pcb = pcb->next;
9001081c:	68e5      	ldr	r5, [r4, #12]
      continue;
9001081e:	46a1      	mov	r9, r4
90010820:	462c      	mov	r4, r5
90010822:	e7ca      	b.n	900107ba <tcp_slowtmr+0x2a>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
90010824:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
90010826:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
90010828:	2a02      	cmp	r2, #2
9001082a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
9001082e:	f040 8089 	bne.w	90010944 <tcp_slowtmr+0x1b4>
90010832:	2b05      	cmp	r3, #5
90010834:	f240 8088 	bls.w	90010948 <tcp_slowtmr+0x1b8>
      ++pcb_remove;
90010838:	f04f 0b01 	mov.w	fp, #1
    if (pcb->state == FIN_WAIT_2) {
9001083c:	7d23      	ldrb	r3, [r4, #20]
9001083e:	2b06      	cmp	r3, #6
90010840:	d10b      	bne.n	9001085a <tcp_slowtmr+0xca>
      if (pcb->flags & TF_RXCLOSED) {
90010842:	8b62      	ldrh	r2, [r4, #26]
90010844:	06d2      	lsls	r2, r2, #27
90010846:	d508      	bpl.n	9001085a <tcp_slowtmr+0xca>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
90010848:	6832      	ldr	r2, [r6, #0]
9001084a:	6a21      	ldr	r1, [r4, #32]
9001084c:	1a52      	subs	r2, r2, r1
9001084e:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
90010850:	bf84      	itt	hi
90010852:	f10b 0b01 	addhi.w	fp, fp, #1
90010856:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
9001085a:	7a65      	ldrb	r5, [r4, #9]
9001085c:	f015 0508 	ands.w	r5, r5, #8
90010860:	d019      	beq.n	90010896 <tcp_slowtmr+0x106>
90010862:	2b04      	cmp	r3, #4
90010864:	d002      	beq.n	9001086c <tcp_slowtmr+0xdc>
        ((pcb->state == ESTABLISHED) ||
90010866:	2b07      	cmp	r3, #7
90010868:	f040 8136 	bne.w	90010ad8 <tcp_slowtmr+0x348>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
9001086c:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
90010870:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
90010874:	6831      	ldr	r1, [r6, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
90010876:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
      if ((u32_t)(tcp_ticks - pcb->tmr) >
9001087a:	6a23      	ldr	r3, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
9001087c:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
      if ((u32_t)(tcp_ticks - pcb->tmr) >
90010880:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
90010882:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
90010886:	4291      	cmp	r1, r2
90010888:	f240 8114 	bls.w	90010ab4 <tcp_slowtmr+0x324>
        ++pcb_remove;
9001088c:	f10b 0b01 	add.w	fp, fp, #1
        ++pcb_reset;
90010890:	2501      	movs	r5, #1
        ++pcb_remove;
90010892:	fa5f fb8b 	uxtb.w	fp, fp
    if (pcb->ooseq != NULL &&
90010896:	6f63      	ldr	r3, [r4, #116]	; 0x74
90010898:	b163      	cbz	r3, 900108b4 <tcp_slowtmr+0x124>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
9001089a:	6833      	ldr	r3, [r6, #0]
9001089c:	6a22      	ldr	r2, [r4, #32]
9001089e:	1a9a      	subs	r2, r3, r2
900108a0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
900108a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
900108a8:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
900108ac:	d302      	bcc.n	900108b4 <tcp_slowtmr+0x124>
      tcp_free_ooseq(pcb);
900108ae:	4620      	mov	r0, r4
900108b0:	f7ff fb84 	bl	9000ffbc <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
900108b4:	7d23      	ldrb	r3, [r4, #20]
900108b6:	2b03      	cmp	r3, #3
900108b8:	f040 8110 	bne.w	90010adc <tcp_slowtmr+0x34c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
900108bc:	6833      	ldr	r3, [r6, #0]
900108be:	6a22      	ldr	r2, [r4, #32]
900108c0:	1a9b      	subs	r3, r3, r2
900108c2:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
900108c4:	d803      	bhi.n	900108ce <tcp_slowtmr+0x13e>
    if (pcb_remove) {
900108c6:	f1bb 0f00 	cmp.w	fp, #0
900108ca:	f000 811c 	beq.w	90010b06 <tcp_slowtmr+0x376>
      tcp_pcb_purge(pcb);
900108ce:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
900108d0:	f8d4 b090 	ldr.w	fp, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
900108d4:	f7ff fb7c 	bl	9000ffd0 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
900108d8:	f8da 3000 	ldr.w	r3, [sl]
      if (prev != NULL) {
900108dc:	f1b9 0f00 	cmp.w	r9, #0
900108e0:	f000 8104 	beq.w	90010aec <tcp_slowtmr+0x35c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
900108e4:	42a3      	cmp	r3, r4
900108e6:	d106      	bne.n	900108f6 <tcp_slowtmr+0x166>
900108e8:	463b      	mov	r3, r7
900108ea:	f240 526d 	movw	r2, #1389	; 0x56d
900108ee:	4969      	ldr	r1, [pc, #420]	; (90010a94 <tcp_slowtmr+0x304>)
900108f0:	4640      	mov	r0, r8
900108f2:	f018 fded 	bl	900294d0 <iprintf>
        prev->next = pcb->next;
900108f6:	68e3      	ldr	r3, [r4, #12]
900108f8:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
900108fc:	b15d      	cbz	r5, 90010916 <tcp_slowtmr+0x186>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
900108fe:	8b23      	ldrh	r3, [r4, #24]
90010900:	4620      	mov	r0, r4
90010902:	9302      	str	r3, [sp, #8]
90010904:	8ae3      	ldrh	r3, [r4, #22]
90010906:	9301      	str	r3, [sp, #4]
90010908:	1d23      	adds	r3, r4, #4
9001090a:	9300      	str	r3, [sp, #0]
9001090c:	4623      	mov	r3, r4
9001090e:	6a62      	ldr	r2, [r4, #36]	; 0x24
90010910:	6d21      	ldr	r1, [r4, #80]	; 0x50
90010912:	f002 faab 	bl	90012e6c <tcp_rst>
      err_arg = pcb->callback_arg;
90010916:	6923      	ldr	r3, [r4, #16]
      tcp_free(pcb2);
90010918:	4620      	mov	r0, r4
      pcb = pcb->next;
9001091a:	68e5      	ldr	r5, [r4, #12]
      err_arg = pcb->callback_arg;
9001091c:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
9001091e:	f7ff f91d 	bl	9000fb5c <tcp_free>
      tcp_active_pcbs_changed = 0;
90010922:	4c5d      	ldr	r4, [pc, #372]	; (90010a98 <tcp_slowtmr+0x308>)
90010924:	2200      	movs	r2, #0
90010926:	7022      	strb	r2, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
90010928:	f1bb 0f00 	cmp.w	fp, #0
9001092c:	d008      	beq.n	90010940 <tcp_slowtmr+0x1b0>
9001092e:	9b05      	ldr	r3, [sp, #20]
90010930:	f06f 010c 	mvn.w	r1, #12
90010934:	4618      	mov	r0, r3
90010936:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
90010938:	7823      	ldrb	r3, [r4, #0]
9001093a:	2b00      	cmp	r3, #0
9001093c:	f47f af37 	bne.w	900107ae <tcp_slowtmr+0x1e>
90010940:	464c      	mov	r4, r9
90010942:	e76c      	b.n	9001081e <tcp_slowtmr+0x8e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
90010944:	2b0b      	cmp	r3, #11
90010946:	e775      	b.n	90010834 <tcp_slowtmr+0xa4>
      if (pcb->persist_backoff > 0) {
90010948:	f894 b099 	ldrb.w	fp, [r4, #153]	; 0x99
9001094c:	f1bb 0f00 	cmp.w	fp, #0
90010950:	d046      	beq.n	900109e0 <tcp_slowtmr+0x250>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
90010952:	6f23      	ldr	r3, [r4, #112]	; 0x70
90010954:	b133      	cbz	r3, 90010964 <tcp_slowtmr+0x1d4>
90010956:	463b      	mov	r3, r7
90010958:	f240 42d4 	movw	r2, #1236	; 0x4d4
9001095c:	494f      	ldr	r1, [pc, #316]	; (90010a9c <tcp_slowtmr+0x30c>)
9001095e:	4640      	mov	r0, r8
90010960:	f018 fdb6 	bl	900294d0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
90010964:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
90010966:	b933      	cbnz	r3, 90010976 <tcp_slowtmr+0x1e6>
90010968:	463b      	mov	r3, r7
9001096a:	f240 42d5 	movw	r2, #1237	; 0x4d5
9001096e:	494c      	ldr	r1, [pc, #304]	; (90010aa0 <tcp_slowtmr+0x310>)
90010970:	4640      	mov	r0, r8
90010972:	f018 fdad 	bl	900294d0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
90010976:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
9001097a:	2b0b      	cmp	r3, #11
9001097c:	f63f af5c 	bhi.w	90010838 <tcp_slowtmr+0xa8>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
90010980:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
90010984:	4b47      	ldr	r3, [pc, #284]	; (90010aa4 <tcp_slowtmr+0x314>)
90010986:	4413      	add	r3, r2
90010988:	f813 2c01 	ldrb.w	r2, [r3, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
9001098c:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
90010990:	4293      	cmp	r3, r2
90010992:	d30b      	bcc.n	900109ac <tcp_slowtmr+0x21c>
            if (pcb->snd_wnd == 0) {
90010994:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
90010998:	b189      	cbz	r1, 900109be <tcp_slowtmr+0x22e>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
9001099a:	4620      	mov	r0, r4
9001099c:	f002 f81e 	bl	900129dc <tcp_split_unsent_seg>
900109a0:	b990      	cbnz	r0, 900109c8 <tcp_slowtmr+0x238>
                if (tcp_output(pcb) == ERR_OK) {
900109a2:	4620      	mov	r0, r4
900109a4:	f002 fada 	bl	90012f5c <tcp_output>
900109a8:	b130      	cbz	r0, 900109b8 <tcp_slowtmr+0x228>
900109aa:	e00d      	b.n	900109c8 <tcp_slowtmr+0x238>
            pcb->persist_cnt++;
900109ac:	3301      	adds	r3, #1
900109ae:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
900109b0:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
900109b2:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
900109b6:	d2ed      	bcs.n	90010994 <tcp_slowtmr+0x204>
    pcb_remove = 0;
900109b8:	f04f 0b00 	mov.w	fp, #0
900109bc:	e73e      	b.n	9001083c <tcp_slowtmr+0xac>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
900109be:	4620      	mov	r0, r4
900109c0:	f002 fcd4 	bl	9001336c <tcp_zero_window_probe>
900109c4:	2800      	cmp	r0, #0
900109c6:	d1f7      	bne.n	900109b8 <tcp_slowtmr+0x228>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
900109c8:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
900109cc:	f04f 0b00 	mov.w	fp, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
900109d0:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
900109d2:	f884 b098 	strb.w	fp, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
900109d6:	d8ef      	bhi.n	900109b8 <tcp_slowtmr+0x228>
                pcb->persist_backoff++;
900109d8:	3301      	adds	r3, #1
900109da:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
900109de:	e72d      	b.n	9001083c <tcp_slowtmr+0xac>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
900109e0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
900109e2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
900109e6:	4293      	cmp	r3, r2
          ++pcb->rtime;
900109e8:	bf9c      	itt	ls
900109ea:	3301      	addls	r3, #1
900109ec:	8623      	strhls	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
900109ee:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
900109f2:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
900109f6:	429a      	cmp	r2, r3
900109f8:	dbde      	blt.n	900109b8 <tcp_slowtmr+0x228>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
900109fa:	4620      	mov	r0, r4
900109fc:	f002 f97e 	bl	90012cfc <tcp_rexmit_rto_prepare>
90010a00:	b128      	cbz	r0, 90010a0e <tcp_slowtmr+0x27e>
90010a02:	6f23      	ldr	r3, [r4, #112]	; 0x70
90010a04:	2b00      	cmp	r3, #0
90010a06:	d1d7      	bne.n	900109b8 <tcp_slowtmr+0x228>
90010a08:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
90010a0a:	2b00      	cmp	r3, #0
90010a0c:	d0d4      	beq.n	900109b8 <tcp_slowtmr+0x228>
            if (pcb->state != SYN_SENT) {
90010a0e:	7d23      	ldrb	r3, [r4, #20]
90010a10:	2b02      	cmp	r3, #2
90010a12:	d014      	beq.n	90010a3e <tcp_slowtmr+0x2ae>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
90010a14:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
90010a18:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
90010a1c:	4922      	ldr	r1, [pc, #136]	; (90010aa8 <tcp_slowtmr+0x318>)
90010a1e:	eb03 03e2 	add.w	r3, r3, r2, asr #3
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
90010a22:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
90010a26:	2a0c      	cmp	r2, #12
90010a28:	bf28      	it	cs
90010a2a:	220c      	movcs	r2, #12
90010a2c:	5c8a      	ldrb	r2, [r1, r2]
90010a2e:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
90010a30:	f647 72ff 	movw	r2, #32767	; 0x7fff
90010a34:	4293      	cmp	r3, r2
90010a36:	bfa8      	it	ge
90010a38:	4613      	movge	r3, r2
90010a3a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
90010a3e:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
            pcb->rtime = 0;
90010a42:	2000      	movs	r0, #0
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
90010a44:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
90010a48:	8e65      	ldrh	r5, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
90010a4a:	429a      	cmp	r2, r3
            pcb->rtime = 0;
90010a4c:	8620      	strh	r0, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
90010a4e:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
90010a52:	4620      	mov	r0, r4
            pcb->ssthresh = eff_wnd >> 1;
90010a54:	bf28      	it	cs
90010a56:	461a      	movcs	r2, r3
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
90010a58:	006b      	lsls	r3, r5, #1
            pcb->cwnd = pcb->mss;
90010a5a:	f8a4 5048 	strh.w	r5, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
90010a5e:	b29b      	uxth	r3, r3
            pcb->ssthresh = eff_wnd >> 1;
90010a60:	0851      	lsrs	r1, r2, #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
90010a62:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
90010a66:	bf98      	it	ls
90010a68:	460b      	movls	r3, r1
90010a6a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            tcp_rexmit_rto_commit(pcb);
90010a6e:	f002 fc1f 	bl	900132b0 <tcp_rexmit_rto_commit>
90010a72:	e6e3      	b.n	9001083c <tcp_slowtmr+0xac>
90010a74:	2002cb70 	.word	0x2002cb70
90010a78:	9002cf23 	.word	0x9002cf23
90010a7c:	20026c79 	.word	0x20026c79
90010a80:	2002cb6c 	.word	0x2002cb6c
90010a84:	2002cb7c 	.word	0x2002cb7c
90010a88:	9002d3be 	.word	0x9002d3be
90010a8c:	9002d3e8 	.word	0x9002d3e8
90010a90:	9002d412 	.word	0x9002d412
90010a94:	9002d4a6 	.word	0x9002d4a6
90010a98:	2002cb68 	.word	0x2002cb68
90010a9c:	9002d43f 	.word	0x9002d43f
90010aa0:	9002d471 	.word	0x9002d471
90010aa4:	9002d594 	.word	0x9002d594
90010aa8:	9002d577 	.word	0x9002d577
90010aac:	9002a254 	.word	0x9002a254
90010ab0:	9002d4fb 	.word	0x9002d4fb
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
90010ab4:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
90010ab8:	4a3f      	ldr	r2, [pc, #252]	; (90010bb8 <tcp_slowtmr+0x428>)
90010aba:	fb02 5303 	mla	r3, r2, r3, r5
                 / TCP_SLOW_INTERVAL) {
90010abe:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
90010ac2:	4299      	cmp	r1, r3
90010ac4:	d908      	bls.n	90010ad8 <tcp_slowtmr+0x348>
        err = tcp_keepalive(pcb);
90010ac6:	4620      	mov	r0, r4
90010ac8:	f002 fc28 	bl	9001331c <tcp_keepalive>
        if (err == ERR_OK) {
90010acc:	b920      	cbnz	r0, 90010ad8 <tcp_slowtmr+0x348>
          pcb->keep_cnt_sent++;
90010ace:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
90010ad2:	3301      	adds	r3, #1
90010ad4:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
90010ad8:	2500      	movs	r5, #0
90010ada:	e6dc      	b.n	90010896 <tcp_slowtmr+0x106>
    if (pcb->state == LAST_ACK) {
90010adc:	2b09      	cmp	r3, #9
90010ade:	f47f aef2 	bne.w	900108c6 <tcp_slowtmr+0x136>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
90010ae2:	6833      	ldr	r3, [r6, #0]
90010ae4:	6a22      	ldr	r2, [r4, #32]
90010ae6:	1a9b      	subs	r3, r3, r2
90010ae8:	2bf0      	cmp	r3, #240	; 0xf0
90010aea:	e6eb      	b.n	900108c4 <tcp_slowtmr+0x134>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
90010aec:	42a3      	cmp	r3, r4
90010aee:	d006      	beq.n	90010afe <tcp_slowtmr+0x36e>
90010af0:	463b      	mov	r3, r7
90010af2:	f240 5271 	movw	r2, #1393	; 0x571
90010af6:	4931      	ldr	r1, [pc, #196]	; (90010bbc <tcp_slowtmr+0x42c>)
90010af8:	4640      	mov	r0, r8
90010afa:	f018 fce9 	bl	900294d0 <iprintf>
        tcp_active_pcbs = pcb->next;
90010afe:	68e3      	ldr	r3, [r4, #12]
90010b00:	f8ca 3000 	str.w	r3, [sl]
90010b04:	e6fa      	b.n	900108fc <tcp_slowtmr+0x16c>
      ++prev->polltmr;
90010b06:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
90010b08:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
90010b0a:	3301      	adds	r3, #1
      pcb = pcb->next;
90010b0c:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
90010b0e:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
90010b10:	429a      	cmp	r2, r3
      ++prev->polltmr;
90010b12:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
90010b14:	f63f ae83 	bhi.w	9001081e <tcp_slowtmr+0x8e>
        tcp_active_pcbs_changed = 0;
90010b18:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 90010bc8 <tcp_slowtmr+0x438>
        TCP_EVENT_POLL(prev, err);
90010b1c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
90010b20:	f884 b01c 	strb.w	fp, [r4, #28]
        tcp_active_pcbs_changed = 0;
90010b24:	f889 b000 	strb.w	fp, [r9]
        TCP_EVENT_POLL(prev, err);
90010b28:	b91b      	cbnz	r3, 90010b32 <tcp_slowtmr+0x3a2>
          tcp_output(prev);
90010b2a:	4620      	mov	r0, r4
90010b2c:	f002 fa16 	bl	90012f5c <tcp_output>
90010b30:	e675      	b.n	9001081e <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
90010b32:	4621      	mov	r1, r4
90010b34:	6920      	ldr	r0, [r4, #16]
90010b36:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
90010b38:	f899 3000 	ldrb.w	r3, [r9]
90010b3c:	2b00      	cmp	r3, #0
90010b3e:	f47f ae36 	bne.w	900107ae <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
90010b42:	2800      	cmp	r0, #0
90010b44:	f47f ae6b 	bne.w	9001081e <tcp_slowtmr+0x8e>
90010b48:	e7ef      	b.n	90010b2a <tcp_slowtmr+0x39a>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
90010b4a:	7d2b      	ldrb	r3, [r5, #20]
90010b4c:	2b0a      	cmp	r3, #10
90010b4e:	d006      	beq.n	90010b5e <tcp_slowtmr+0x3ce>
90010b50:	4643      	mov	r3, r8
90010b52:	f240 52a1 	movw	r2, #1441	; 0x5a1
90010b56:	4651      	mov	r1, sl
90010b58:	4648      	mov	r0, r9
90010b5a:	f018 fcb9 	bl	900294d0 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
90010b5e:	6833      	ldr	r3, [r6, #0]
90010b60:	6a2a      	ldr	r2, [r5, #32]
90010b62:	1a9b      	subs	r3, r3, r2
90010b64:	2bf0      	cmp	r3, #240	; 0xf0
90010b66:	d910      	bls.n	90010b8a <tcp_slowtmr+0x3fa>
      tcp_pcb_purge(pcb);
90010b68:	4628      	mov	r0, r5
90010b6a:	f7ff fa31 	bl	9000ffd0 <tcp_pcb_purge>
      if (prev != NULL) {
90010b6e:	b97c      	cbnz	r4, 90010b90 <tcp_slowtmr+0x400>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
90010b70:	683b      	ldr	r3, [r7, #0]
90010b72:	42ab      	cmp	r3, r5
90010b74:	d006      	beq.n	90010b84 <tcp_slowtmr+0x3f4>
90010b76:	4643      	mov	r3, r8
90010b78:	f240 52b3 	movw	r2, #1459	; 0x5b3
90010b7c:	4910      	ldr	r1, [pc, #64]	; (90010bc0 <tcp_slowtmr+0x430>)
90010b7e:	4648      	mov	r0, r9
90010b80:	f018 fca6 	bl	900294d0 <iprintf>
        tcp_tw_pcbs = pcb->next;
90010b84:	68eb      	ldr	r3, [r5, #12]
90010b86:	603b      	str	r3, [r7, #0]
90010b88:	e00e      	b.n	90010ba8 <tcp_slowtmr+0x418>
      pcb = pcb->next;
90010b8a:	462c      	mov	r4, r5
90010b8c:	68ed      	ldr	r5, [r5, #12]
90010b8e:	e61d      	b.n	900107cc <tcp_slowtmr+0x3c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
90010b90:	683b      	ldr	r3, [r7, #0]
90010b92:	42ab      	cmp	r3, r5
90010b94:	d106      	bne.n	90010ba4 <tcp_slowtmr+0x414>
90010b96:	4643      	mov	r3, r8
90010b98:	f240 52af 	movw	r2, #1455	; 0x5af
90010b9c:	4909      	ldr	r1, [pc, #36]	; (90010bc4 <tcp_slowtmr+0x434>)
90010b9e:	4648      	mov	r0, r9
90010ba0:	f018 fc96 	bl	900294d0 <iprintf>
        prev->next = pcb->next;
90010ba4:	68eb      	ldr	r3, [r5, #12]
90010ba6:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
90010ba8:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      tcp_free(pcb2);
90010bac:	4628      	mov	r0, r5
90010bae:	f7fe ffd5 	bl	9000fb5c <tcp_free>
      pcb = pcb->next;
90010bb2:	465d      	mov	r5, fp
90010bb4:	e60a      	b.n	900107cc <tcp_slowtmr+0x3c>
90010bb6:	bf00      	nop
90010bb8:	000124f8 	.word	0x000124f8
90010bbc:	9002d4d1 	.word	0x9002d4d1
90010bc0:	9002d551 	.word	0x9002d551
90010bc4:	9002d52a 	.word	0x9002d52a
90010bc8:	2002cb68 	.word	0x2002cb68

90010bcc <tcp_tmr>:
{
90010bcc:	b508      	push	{r3, lr}
  tcp_fasttmr();
90010bce:	f7ff fd67 	bl	900106a0 <tcp_fasttmr>
  if (++tcp_timer & 1) {
90010bd2:	4a06      	ldr	r2, [pc, #24]	; (90010bec <tcp_tmr+0x20>)
90010bd4:	7813      	ldrb	r3, [r2, #0]
90010bd6:	3301      	adds	r3, #1
90010bd8:	b2db      	uxtb	r3, r3
90010bda:	7013      	strb	r3, [r2, #0]
90010bdc:	07db      	lsls	r3, r3, #31
90010bde:	d503      	bpl.n	90010be8 <tcp_tmr+0x1c>
}
90010be0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
90010be4:	f7ff bdd4 	b.w	90010790 <tcp_slowtmr>
}
90010be8:	bd08      	pop	{r3, pc}
90010bea:	bf00      	nop
90010bec:	20026c78 	.word	0x20026c78

90010bf0 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
90010bf0:	4a09      	ldr	r2, [pc, #36]	; (90010c18 <tcp_get_next_optbyte+0x28>)
90010bf2:	8813      	ldrh	r3, [r2, #0]
90010bf4:	1c59      	adds	r1, r3, #1
90010bf6:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
90010bf8:	4a08      	ldr	r2, [pc, #32]	; (90010c1c <tcp_get_next_optbyte+0x2c>)
90010bfa:	6812      	ldr	r2, [r2, #0]
90010bfc:	b11a      	cbz	r2, 90010c06 <tcp_get_next_optbyte+0x16>
90010bfe:	4908      	ldr	r1, [pc, #32]	; (90010c20 <tcp_get_next_optbyte+0x30>)
90010c00:	8809      	ldrh	r1, [r1, #0]
90010c02:	428b      	cmp	r3, r1
90010c04:	d204      	bcs.n	90010c10 <tcp_get_next_optbyte+0x20>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
90010c06:	4a07      	ldr	r2, [pc, #28]	; (90010c24 <tcp_get_next_optbyte+0x34>)
    return opts[optidx];
90010c08:	6812      	ldr	r2, [r2, #0]
90010c0a:	4413      	add	r3, r2
90010c0c:	7d18      	ldrb	r0, [r3, #20]
90010c0e:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
90010c10:	1a5b      	subs	r3, r3, r1
    return tcphdr_opt2[idx];
90010c12:	b2db      	uxtb	r3, r3
90010c14:	5cd0      	ldrb	r0, [r2, r3]
  }
}
90010c16:	4770      	bx	lr
90010c18:	20026ca4 	.word	0x20026ca4
90010c1c:	20026cb0 	.word	0x20026cb0
90010c20:	20026cac 	.word	0x20026cac
90010c24:	20026ca8 	.word	0x20026ca8

90010c28 <tcp_oos_insert_segment>:
{
90010c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90010c2a:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
90010c2c:	4605      	mov	r5, r0
90010c2e:	b930      	cbnz	r0, 90010c3e <tcp_oos_insert_segment+0x16>
90010c30:	4b1e      	ldr	r3, [pc, #120]	; (90010cac <tcp_oos_insert_segment+0x84>)
90010c32:	f240 421f 	movw	r2, #1055	; 0x41f
90010c36:	491e      	ldr	r1, [pc, #120]	; (90010cb0 <tcp_oos_insert_segment+0x88>)
90010c38:	481e      	ldr	r0, [pc, #120]	; (90010cb4 <tcp_oos_insert_segment+0x8c>)
90010c3a:	f018 fc49 	bl	900294d0 <iprintf>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
90010c3e:	68eb      	ldr	r3, [r5, #12]
90010c40:	8998      	ldrh	r0, [r3, #12]
90010c42:	f7fa fa5f 	bl	9000b104 <lwip_htons>
90010c46:	07c2      	lsls	r2, r0, #31
90010c48:	d414      	bmi.n	90010c74 <tcp_oos_insert_segment+0x4c>
           TCP_SEQ_GEQ((seqno + cseg->len),
90010c4a:	4e1b      	ldr	r6, [pc, #108]	; (90010cb8 <tcp_oos_insert_segment+0x90>)
90010c4c:	68e7      	ldr	r7, [r4, #12]
90010c4e:	6830      	ldr	r0, [r6, #0]
90010c50:	892b      	ldrh	r3, [r5, #8]
90010c52:	6879      	ldr	r1, [r7, #4]
90010c54:	8922      	ldrh	r2, [r4, #8]
90010c56:	4403      	add	r3, r0
90010c58:	440a      	add	r2, r1
90010c5a:	1a9a      	subs	r2, r3, r2
    while (next &&
90010c5c:	2a00      	cmp	r2, #0
90010c5e:	da0f      	bge.n	90010c80 <tcp_oos_insert_segment+0x58>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
90010c60:	1a5b      	subs	r3, r3, r1
    if (next &&
90010c62:	2b00      	cmp	r3, #0
90010c64:	dd0a      	ble.n	90010c7c <tcp_oos_insert_segment+0x54>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
90010c66:	1a09      	subs	r1, r1, r0
      pbuf_realloc(cseg->p, cseg->len);
90010c68:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
90010c6a:	b289      	uxth	r1, r1
90010c6c:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
90010c6e:	f7fd fecb 	bl	9000ea08 <pbuf_realloc>
90010c72:	e003      	b.n	90010c7c <tcp_oos_insert_segment+0x54>
    tcp_segs_free(next);
90010c74:	4620      	mov	r0, r4
    next = NULL;
90010c76:	2400      	movs	r4, #0
    tcp_segs_free(next);
90010c78:	f7ff f8c6 	bl	9000fe08 <tcp_segs_free>
  cseg->next = next;
90010c7c:	602c      	str	r4, [r5, #0]
}
90010c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
90010c80:	89b8      	ldrh	r0, [r7, #12]
90010c82:	f7fa fa3f 	bl	9000b104 <lwip_htons>
90010c86:	07c3      	lsls	r3, r0, #31
90010c88:	d507      	bpl.n	90010c9a <tcp_oos_insert_segment+0x72>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
90010c8a:	68eb      	ldr	r3, [r5, #12]
90010c8c:	2001      	movs	r0, #1
90010c8e:	899f      	ldrh	r7, [r3, #12]
90010c90:	f7fa fa38 	bl	9000b104 <lwip_htons>
90010c94:	68eb      	ldr	r3, [r5, #12]
90010c96:	4338      	orrs	r0, r7
90010c98:	8198      	strh	r0, [r3, #12]
      next = next->next;
90010c9a:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
90010c9c:	4620      	mov	r0, r4
90010c9e:	f7ff f8a5 	bl	9000fdec <tcp_seg_free>
    while (next &&
90010ca2:	463c      	mov	r4, r7
90010ca4:	2f00      	cmp	r7, #0
90010ca6:	d1d1      	bne.n	90010c4c <tcp_oos_insert_segment+0x24>
90010ca8:	e7e8      	b.n	90010c7c <tcp_oos_insert_segment+0x54>
90010caa:	bf00      	nop
90010cac:	9002d59b 	.word	0x9002d59b
90010cb0:	9002d5fd 	.word	0x9002d5fd
90010cb4:	9002a254 	.word	0x9002a254
90010cb8:	20026ca0 	.word	0x20026ca0

90010cbc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
90010cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
90010cbe:	4606      	mov	r6, r0
90010cc0:	b930      	cbnz	r0, 90010cd0 <tcp_parseopt+0x14>
90010cc2:	4b1d      	ldr	r3, [pc, #116]	; (90010d38 <tcp_parseopt+0x7c>)
90010cc4:	f240 727d 	movw	r2, #1917	; 0x77d
90010cc8:	491c      	ldr	r1, [pc, #112]	; (90010d3c <tcp_parseopt+0x80>)
90010cca:	481d      	ldr	r0, [pc, #116]	; (90010d40 <tcp_parseopt+0x84>)
90010ccc:	f018 fc00 	bl	900294d0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
90010cd0:	4b1c      	ldr	r3, [pc, #112]	; (90010d44 <tcp_parseopt+0x88>)
90010cd2:	881f      	ldrh	r7, [r3, #0]
90010cd4:	b167      	cbz	r7, 90010cf0 <tcp_parseopt+0x34>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
90010cd6:	4d1c      	ldr	r5, [pc, #112]	; (90010d48 <tcp_parseopt+0x8c>)
90010cd8:	2300      	movs	r3, #0
90010cda:	802b      	strh	r3, [r5, #0]
90010cdc:	882b      	ldrh	r3, [r5, #0]
90010cde:	42bb      	cmp	r3, r7
90010ce0:	d206      	bcs.n	90010cf0 <tcp_parseopt+0x34>
      u8_t opt = tcp_get_next_optbyte();
90010ce2:	f7ff ff85 	bl	90010bf0 <tcp_get_next_optbyte>
      switch (opt) {
90010ce6:	2801      	cmp	r0, #1
90010ce8:	d0f8      	beq.n	90010cdc <tcp_parseopt+0x20>
90010cea:	2802      	cmp	r0, #2
90010cec:	d001      	beq.n	90010cf2 <tcp_parseopt+0x36>
90010cee:	b9c8      	cbnz	r0, 90010d24 <tcp_parseopt+0x68>
             can skip past them. */
          tcp_optidx += data - 2;
      }
    }
  }
}
90010cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
90010cf2:	f7ff ff7d 	bl	90010bf0 <tcp_get_next_optbyte>
90010cf6:	2804      	cmp	r0, #4
90010cf8:	d1fa      	bne.n	90010cf0 <tcp_parseopt+0x34>
90010cfa:	882b      	ldrh	r3, [r5, #0]
90010cfc:	3301      	adds	r3, #1
90010cfe:	42bb      	cmp	r3, r7
90010d00:	daf6      	bge.n	90010cf0 <tcp_parseopt+0x34>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
90010d02:	f7ff ff75 	bl	90010bf0 <tcp_get_next_optbyte>
90010d06:	0204      	lsls	r4, r0, #8
          mss |= tcp_get_next_optbyte();
90010d08:	f7ff ff72 	bl	90010bf0 <tcp_get_next_optbyte>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
90010d0c:	b2a4      	uxth	r4, r4
          mss |= tcp_get_next_optbyte();
90010d0e:	ea44 0300 	orr.w	r3, r4, r0
90010d12:	b29b      	uxth	r3, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
90010d14:	1e5a      	subs	r2, r3, #1
90010d16:	f5b2 7fe6 	cmp.w	r2, #460	; 0x1cc
90010d1a:	bf28      	it	cs
90010d1c:	f44f 73e6 	movcs.w	r3, #460	; 0x1cc
90010d20:	8673      	strh	r3, [r6, #50]	; 0x32
          break;
90010d22:	e7db      	b.n	90010cdc <tcp_parseopt+0x20>
          data = tcp_get_next_optbyte();
90010d24:	f7ff ff64 	bl	90010bf0 <tcp_get_next_optbyte>
          if (data < 2) {
90010d28:	2801      	cmp	r0, #1
90010d2a:	d9e1      	bls.n	90010cf0 <tcp_parseopt+0x34>
          tcp_optidx += data - 2;
90010d2c:	882b      	ldrh	r3, [r5, #0]
90010d2e:	3b02      	subs	r3, #2
90010d30:	4418      	add	r0, r3
90010d32:	8028      	strh	r0, [r5, #0]
90010d34:	e7d2      	b.n	90010cdc <tcp_parseopt+0x20>
90010d36:	bf00      	nop
90010d38:	9002d59b 	.word	0x9002d59b
90010d3c:	9002d622 	.word	0x9002d622
90010d40:	9002a254 	.word	0x9002a254
90010d44:	20026cb4 	.word	0x20026cb4
90010d48:	20026ca4 	.word	0x20026ca4

90010d4c <tcp_input_delayed_close>:
{
90010d4c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
90010d4e:	4604      	mov	r4, r0
90010d50:	b930      	cbnz	r0, 90010d60 <tcp_input_delayed_close+0x14>
90010d52:	4b0f      	ldr	r3, [pc, #60]	; (90010d90 <tcp_input_delayed_close+0x44>)
90010d54:	f240 225a 	movw	r2, #602	; 0x25a
90010d58:	490e      	ldr	r1, [pc, #56]	; (90010d94 <tcp_input_delayed_close+0x48>)
90010d5a:	480f      	ldr	r0, [pc, #60]	; (90010d98 <tcp_input_delayed_close+0x4c>)
90010d5c:	f018 fbb8 	bl	900294d0 <iprintf>
  if (recv_flags & TF_CLOSED) {
90010d60:	4b0e      	ldr	r3, [pc, #56]	; (90010d9c <tcp_input_delayed_close+0x50>)
90010d62:	7818      	ldrb	r0, [r3, #0]
90010d64:	f010 0010 	ands.w	r0, r0, #16
90010d68:	d011      	beq.n	90010d8e <tcp_input_delayed_close+0x42>
    if (!(pcb->flags & TF_RXCLOSED)) {
90010d6a:	8b63      	ldrh	r3, [r4, #26]
90010d6c:	06db      	lsls	r3, r3, #27
90010d6e:	d406      	bmi.n	90010d7e <tcp_input_delayed_close+0x32>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
90010d70:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
90010d74:	b11b      	cbz	r3, 90010d7e <tcp_input_delayed_close+0x32>
90010d76:	f06f 010e 	mvn.w	r1, #14
90010d7a:	6920      	ldr	r0, [r4, #16]
90010d7c:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
90010d7e:	4621      	mov	r1, r4
90010d80:	4807      	ldr	r0, [pc, #28]	; (90010da0 <tcp_input_delayed_close+0x54>)
90010d82:	f7ff f957 	bl	90010034 <tcp_pcb_remove>
    tcp_free(pcb);
90010d86:	4620      	mov	r0, r4
90010d88:	f7fe fee8 	bl	9000fb5c <tcp_free>
90010d8c:	2001      	movs	r0, #1
}
90010d8e:	bd10      	pop	{r4, pc}
90010d90:	9002d59b 	.word	0x9002d59b
90010d94:	9002d63c 	.word	0x9002d63c
90010d98:	9002a254 	.word	0x9002a254
90010d9c:	20026c9c 	.word	0x20026c9c
90010da0:	2002cb6c 	.word	0x2002cb6c

90010da4 <tcp_free_acked_segments.isra.0>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
90010da4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90010da8:	4606      	mov	r6, r0
90010daa:	4617      	mov	r7, r2
    seg_list = seg_list->next;
90010dac:	460c      	mov	r4, r1
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
90010dae:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 90010e58 <tcp_free_acked_segments.isra.0+0xb4>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
90010db2:	f8df 909c 	ldr.w	r9, [pc, #156]	; 90010e50 <tcp_free_acked_segments.isra.0+0xac>
90010db6:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 90010e5c <tcp_free_acked_segments.isra.0+0xb8>
  while (seg_list != NULL &&
90010dba:	2c00      	cmp	r4, #0
90010dbc:	d036      	beq.n	90010e2c <tcp_free_acked_segments.isra.0+0x88>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
90010dbe:	68e3      	ldr	r3, [r4, #12]
90010dc0:	6858      	ldr	r0, [r3, #4]
90010dc2:	f7fa f9a2 	bl	9000b10a <lwip_htonl>
90010dc6:	68e3      	ldr	r3, [r4, #12]
90010dc8:	4683      	mov	fp, r0
90010dca:	8925      	ldrh	r5, [r4, #8]
90010dcc:	8998      	ldrh	r0, [r3, #12]
90010dce:	f7fa f999 	bl	9000b104 <lwip_htons>
90010dd2:	f8d8 3000 	ldr.w	r3, [r8]
90010dd6:	f010 0003 	ands.w	r0, r0, #3
90010dda:	eba5 0303 	sub.w	r3, r5, r3
90010dde:	bf18      	it	ne
90010de0:	2001      	movne	r0, #1
90010de2:	eb03 050b 	add.w	r5, r3, fp
90010de6:	4405      	add	r5, r0
  while (seg_list != NULL &&
90010de8:	2d00      	cmp	r5, #0
90010dea:	dc20      	bgt.n	90010e2e <tcp_free_acked_segments.isra.0+0x8a>
    clen = pbuf_clen(next->p);
90010dec:	e9d4 b000 	ldrd	fp, r0, [r4]
90010df0:	f7fd fe7a 	bl	9000eae8 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
90010df4:	8833      	ldrh	r3, [r6, #0]
    clen = pbuf_clen(next->p);
90010df6:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
90010df8:	4283      	cmp	r3, r0
90010dfa:	d206      	bcs.n	90010e0a <tcp_free_acked_segments.isra.0+0x66>
90010dfc:	464b      	mov	r3, r9
90010dfe:	f240 4257 	movw	r2, #1111	; 0x457
90010e02:	4651      	mov	r1, sl
90010e04:	4810      	ldr	r0, [pc, #64]	; (90010e48 <tcp_free_acked_segments.isra.0+0xa4>)
90010e06:	f018 fb63 	bl	900294d0 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
90010e0a:	8830      	ldrh	r0, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
90010e0c:	4a0f      	ldr	r2, [pc, #60]	; (90010e4c <tcp_free_acked_segments.isra.0+0xa8>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
90010e0e:	1b45      	subs	r5, r0, r5
    tcp_seg_free(next);
90010e10:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
90010e12:	8811      	ldrh	r1, [r2, #0]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
90010e14:	8035      	strh	r5, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
90010e16:	8923      	ldrh	r3, [r4, #8]
90010e18:	440b      	add	r3, r1
90010e1a:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
90010e1c:	f7fe ffe6 	bl	9000fdec <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
90010e20:	8833      	ldrh	r3, [r6, #0]
90010e22:	b17b      	cbz	r3, 90010e44 <tcp_free_acked_segments.isra.0+0xa0>
      LWIP_ASSERT("tcp_receive: valid queue length",
90010e24:	f1bb 0f00 	cmp.w	fp, #0
90010e28:	d10c      	bne.n	90010e44 <tcp_free_acked_segments.isra.0+0xa0>
90010e2a:	b11f      	cbz	r7, 90010e34 <tcp_free_acked_segments.isra.0+0x90>
    seg_list = seg_list->next;
90010e2c:	2400      	movs	r4, #0
}
90010e2e:	4620      	mov	r0, r4
90010e30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
90010e34:	4b06      	ldr	r3, [pc, #24]	; (90010e50 <tcp_free_acked_segments.isra.0+0xac>)
90010e36:	f240 4261 	movw	r2, #1121	; 0x461
90010e3a:	4906      	ldr	r1, [pc, #24]	; (90010e54 <tcp_free_acked_segments.isra.0+0xb0>)
90010e3c:	4802      	ldr	r0, [pc, #8]	; (90010e48 <tcp_free_acked_segments.isra.0+0xa4>)
90010e3e:	f018 fb47 	bl	900294d0 <iprintf>
  while (seg_list != NULL &&
90010e42:	e7f3      	b.n	90010e2c <tcp_free_acked_segments.isra.0+0x88>
    seg_list = seg_list->next;
90010e44:	465c      	mov	r4, fp
90010e46:	e7b8      	b.n	90010dba <tcp_free_acked_segments.isra.0+0x16>
90010e48:	9002a254 	.word	0x9002a254
90010e4c:	20026c94 	.word	0x20026c94
90010e50:	9002d59b 	.word	0x9002d59b
90010e54:	9002d689 	.word	0x9002d689
90010e58:	20026c7c 	.word	0x20026c7c
90010e5c:	9002d661 	.word	0x9002d661

90010e60 <tcp_receive>:
{
90010e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
90010e64:	4604      	mov	r4, r0
90010e66:	b930      	cbnz	r0, 90010e76 <tcp_receive+0x16>
90010e68:	4b3a      	ldr	r3, [pc, #232]	; (90010f54 <tcp_receive+0xf4>)
90010e6a:	f240 427b 	movw	r2, #1147	; 0x47b
90010e6e:	493a      	ldr	r1, [pc, #232]	; (90010f58 <tcp_receive+0xf8>)
90010e70:	483a      	ldr	r0, [pc, #232]	; (90010f5c <tcp_receive+0xfc>)
90010e72:	f018 fb2d 	bl	900294d0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
90010e76:	7d23      	ldrb	r3, [r4, #20]
90010e78:	2b03      	cmp	r3, #3
90010e7a:	d806      	bhi.n	90010e8a <tcp_receive+0x2a>
90010e7c:	4b35      	ldr	r3, [pc, #212]	; (90010f54 <tcp_receive+0xf4>)
90010e7e:	f240 427c 	movw	r2, #1148	; 0x47c
90010e82:	4937      	ldr	r1, [pc, #220]	; (90010f60 <tcp_receive+0x100>)
90010e84:	4835      	ldr	r0, [pc, #212]	; (90010f5c <tcp_receive+0xfc>)
90010e86:	f018 fb23 	bl	900294d0 <iprintf>
  if (flags & TCP_ACK) {
90010e8a:	4b36      	ldr	r3, [pc, #216]	; (90010f64 <tcp_receive+0x104>)
90010e8c:	4e36      	ldr	r6, [pc, #216]	; (90010f68 <tcp_receive+0x108>)
90010e8e:	781b      	ldrb	r3, [r3, #0]
90010e90:	4f36      	ldr	r7, [pc, #216]	; (90010f6c <tcp_receive+0x10c>)
90010e92:	f013 0f10 	tst.w	r3, #16
90010e96:	f000 809a 	beq.w	90010fce <tcp_receive+0x16e>
90010e9a:	6833      	ldr	r3, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
90010e9c:	4d34      	ldr	r5, [pc, #208]	; (90010f70 <tcp_receive+0x110>)
90010e9e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
90010ea2:	682a      	ldr	r2, [r5, #0]
90010ea4:	46a9      	mov	r9, r5
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
90010ea6:	e9d4 0c15 	ldrd	r0, ip, [r4, #84]	; 0x54
90010eaa:	eba0 0e03 	sub.w	lr, r0, r3
90010eae:	f1be 0f00 	cmp.w	lr, #0
90010eb2:	db0c      	blt.n	90010ece <tcp_receive+0x6e>
90010eb4:	4298      	cmp	r0, r3
90010eb6:	d103      	bne.n	90010ec0 <tcp_receive+0x60>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
90010eb8:	ebac 0002 	sub.w	r0, ip, r2
90010ebc:	2800      	cmp	r0, #0
90010ebe:	db06      	blt.n	90010ece <tcp_receive+0x6e>
90010ec0:	4594      	cmp	ip, r2
90010ec2:	d113      	bne.n	90010eec <tcp_receive+0x8c>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
90010ec4:	482b      	ldr	r0, [pc, #172]	; (90010f74 <tcp_receive+0x114>)
90010ec6:	6800      	ldr	r0, [r0, #0]
90010ec8:	89c0      	ldrh	r0, [r0, #14]
90010eca:	4288      	cmp	r0, r1
90010ecc:	d90e      	bls.n	90010eec <tcp_receive+0x8c>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
90010ece:	4829      	ldr	r0, [pc, #164]	; (90010f74 <tcp_receive+0x114>)
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
90010ed0:	f8b4 8062 	ldrh.w	r8, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
90010ed4:	6800      	ldr	r0, [r0, #0]
90010ed6:	89c0      	ldrh	r0, [r0, #14]
90010ed8:	fa1f fe80 	uxth.w	lr, r0
90010edc:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
90010ee0:	45f0      	cmp	r8, lr
      pcb->snd_wl2 = ackno;
90010ee2:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
90010ee6:	bf38      	it	cc
90010ee8:	f8a4 0062 	strhcc.w	r0, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
90010eec:	6c60      	ldr	r0, [r4, #68]	; 0x44
90010eee:	1a13      	subs	r3, r2, r0
90010ef0:	2b00      	cmp	r3, #0
90010ef2:	f300 8176 	bgt.w	900111e2 <tcp_receive+0x382>
      if (tcplen == 0) {
90010ef6:	883b      	ldrh	r3, [r7, #0]
90010ef8:	2b00      	cmp	r3, #0
90010efa:	f040 816e 	bne.w	900111da <tcp_receive+0x37a>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
90010efe:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
90010f02:	4461      	add	r1, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
90010f04:	6da5      	ldr	r5, [r4, #88]	; 0x58
90010f06:	442b      	add	r3, r5
90010f08:	428b      	cmp	r3, r1
90010f0a:	f040 8166 	bne.w	900111da <tcp_receive+0x37a>
          if (pcb->rtime >= 0) {
90010f0e:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
90010f12:	2b00      	cmp	r3, #0
90010f14:	f2c0 8161 	blt.w	900111da <tcp_receive+0x37a>
            if (pcb->lastack == ackno) {
90010f18:	4290      	cmp	r0, r2
90010f1a:	f040 815e 	bne.w	900111da <tcp_receive+0x37a>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
90010f1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
90010f22:	2bff      	cmp	r3, #255	; 0xff
                ++pcb->dupacks;
90010f24:	bf1c      	itt	ne
90010f26:	3301      	addne	r3, #1
90010f28:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
90010f2c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
90010f30:	2b03      	cmp	r3, #3
90010f32:	d921      	bls.n	90010f78 <tcp_receive+0x118>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
90010f34:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
90010f38:	f64f 71ff 	movw	r1, #65535	; 0xffff
90010f3c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
90010f3e:	4413      	add	r3, r2
90010f40:	b29b      	uxth	r3, r3
90010f42:	429a      	cmp	r2, r3
90010f44:	bf88      	it	hi
90010f46:	460b      	movhi	r3, r1
90010f48:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
90010f4c:	4620      	mov	r0, r4
90010f4e:	f001 ff59 	bl	90012e04 <tcp_rexmit_fast>
      if (!found_dupack) {
90010f52:	e012      	b.n	90010f7a <tcp_receive+0x11a>
90010f54:	9002d59b 	.word	0x9002d59b
90010f58:	9002d6a9 	.word	0x9002d6a9
90010f5c:	9002a254 	.word	0x9002a254
90010f60:	9002d6c2 	.word	0x9002d6c2
90010f64:	20026c80 	.word	0x20026c80
90010f68:	20026ca0 	.word	0x20026ca0
90010f6c:	20026cb6 	.word	0x20026cb6
90010f70:	20026c7c 	.word	0x20026c7c
90010f74:	20026ca8 	.word	0x20026ca8
              if (pcb->dupacks >= 3) {
90010f78:	d0e8      	beq.n	90010f4c <tcp_receive+0xec>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
90010f7a:	6b60      	ldr	r0, [r4, #52]	; 0x34
90010f7c:	b338      	cbz	r0, 90010fce <tcp_receive+0x16e>
90010f7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90010f80:	f8d9 2000 	ldr.w	r2, [r9]
90010f84:	1a9b      	subs	r3, r3, r2
90010f86:	2b00      	cmp	r3, #0
90010f88:	da21      	bge.n	90010fce <tcp_receive+0x16e>
      m = (s16_t)(tcp_ticks - pcb->rttest);
90010f8a:	4bb5      	ldr	r3, [pc, #724]	; (90011260 <tcp_receive+0x400>)
90010f8c:	b280      	uxth	r0, r0
      m = (s16_t)(m - (pcb->sa >> 3));
90010f8e:	f9b4 c03c 	ldrsh.w	ip, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
90010f92:	881a      	ldrh	r2, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
90010f94:	f3cc 05cf 	ubfx	r5, ip, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
90010f98:	1a11      	subs	r1, r2, r0
      m = (s16_t)(m - (pcb->sa >> 3));
90010f9a:	1b49      	subs	r1, r1, r5
90010f9c:	b20b      	sxth	r3, r1
      pcb->sa = (s16_t)(pcb->sa + m);
90010f9e:	fa1c f181 	uxtah	r1, ip, r1
      if (m < 0) {
90010fa2:	2b00      	cmp	r3, #0
      pcb->sa = (s16_t)(pcb->sa + m);
90010fa4:	b209      	sxth	r1, r1
        m = (s16_t) - m;
90010fa6:	bfb8      	it	lt
90010fa8:	1a80      	sublt	r0, r0, r2
      m = (s16_t)(m - (pcb->sv >> 2));
90010faa:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sa = (s16_t)(pcb->sa + m);
90010fae:	87a1      	strh	r1, [r4, #60]	; 0x3c
        m = (s16_t) - m;
90010fb0:	bfb8      	it	lt
90010fb2:	1940      	addlt	r0, r0, r5
      pcb->sv = (s16_t)(pcb->sv + m);
90010fb4:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
        m = (s16_t) - m;
90010fb8:	bfb8      	it	lt
90010fba:	b203      	sxthlt	r3, r0
      pcb->sv = (s16_t)(pcb->sv + m);
90010fbc:	4413      	add	r3, r2
90010fbe:	b29b      	uxth	r3, r3
90010fc0:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
90010fc2:	eb03 03e1 	add.w	r3, r3, r1, asr #3
90010fc6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
90010fca:	2300      	movs	r3, #0
90010fcc:	6363      	str	r3, [r4, #52]	; 0x34
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
90010fce:	8838      	ldrh	r0, [r7, #0]
90010fd0:	6833      	ldr	r3, [r6, #0]
90010fd2:	6a62      	ldr	r2, [r4, #36]	; 0x24
90010fd4:	2800      	cmp	r0, #0
90010fd6:	f000 835a 	beq.w	9001168e <tcp_receive+0x82e>
90010fda:	7d21      	ldrb	r1, [r4, #20]
90010fdc:	2906      	cmp	r1, #6
90010fde:	f200 8356 	bhi.w	9001168e <tcp_receive+0x82e>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
90010fe2:	1ad5      	subs	r5, r2, r3
90010fe4:	2d01      	cmp	r5, #1
90010fe6:	f100 81a7 	bmi.w	90011338 <tcp_receive+0x4d8>
90010fea:	f1c3 0101 	rsb	r1, r3, #1
90010fee:	1a09      	subs	r1, r1, r0
90010ff0:	4411      	add	r1, r2
90010ff2:	2900      	cmp	r1, #0
90010ff4:	f300 81a0 	bgt.w	90011338 <tcp_receive+0x4d8>
      struct pbuf *p = inseg.p;
90010ff8:	4b9a      	ldr	r3, [pc, #616]	; (90011264 <tcp_receive+0x404>)
90010ffa:	f8d3 9004 	ldr.w	r9, [r3, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
90010ffe:	4698      	mov	r8, r3
90011000:	f1b9 0f00 	cmp.w	r9, #0
90011004:	d106      	bne.n	90011014 <tcp_receive+0x1b4>
90011006:	4b98      	ldr	r3, [pc, #608]	; (90011268 <tcp_receive+0x408>)
90011008:	f240 5294 	movw	r2, #1428	; 0x594
9001100c:	4997      	ldr	r1, [pc, #604]	; (9001126c <tcp_receive+0x40c>)
9001100e:	4898      	ldr	r0, [pc, #608]	; (90011270 <tcp_receive+0x410>)
90011010:	f018 fa5e 	bl	900294d0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
90011014:	f64f 73fe 	movw	r3, #65534	; 0xfffe
90011018:	429d      	cmp	r5, r3
9001101a:	d906      	bls.n	9001102a <tcp_receive+0x1ca>
9001101c:	4b92      	ldr	r3, [pc, #584]	; (90011268 <tcp_receive+0x408>)
9001101e:	f240 5295 	movw	r2, #1429	; 0x595
90011022:	4994      	ldr	r1, [pc, #592]	; (90011274 <tcp_receive+0x414>)
90011024:	4892      	ldr	r0, [pc, #584]	; (90011270 <tcp_receive+0x410>)
90011026:	f018 fa53 	bl	900294d0 <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
9001102a:	f8d8 3004 	ldr.w	r3, [r8, #4]
      off = (u16_t)off32;
9001102e:	b2ad      	uxth	r5, r5
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
90011030:	891b      	ldrh	r3, [r3, #8]
90011032:	42ab      	cmp	r3, r5
90011034:	d206      	bcs.n	90011044 <tcp_receive+0x1e4>
90011036:	4b8c      	ldr	r3, [pc, #560]	; (90011268 <tcp_receive+0x408>)
90011038:	f240 5297 	movw	r2, #1431	; 0x597
9001103c:	498e      	ldr	r1, [pc, #568]	; (90011278 <tcp_receive+0x418>)
9001103e:	488c      	ldr	r0, [pc, #560]	; (90011270 <tcp_receive+0x410>)
90011040:	f018 fa46 	bl	900294d0 <iprintf>
      inseg.len -= off;
90011044:	f8b8 3008 	ldrh.w	r3, [r8, #8]
        p->len = 0;
90011048:	2100      	movs	r1, #0
      inseg.len -= off;
9001104a:	1b5b      	subs	r3, r3, r5
9001104c:	f8a8 3008 	strh.w	r3, [r8, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
90011050:	f8d8 3004 	ldr.w	r3, [r8, #4]
90011054:	891b      	ldrh	r3, [r3, #8]
90011056:	1b5b      	subs	r3, r3, r5
90011058:	b29b      	uxth	r3, r3
      while (p->len < off) {
9001105a:	f8b9 200a 	ldrh.w	r2, [r9, #10]
9001105e:	42aa      	cmp	r2, r5
90011060:	f0c0 8161 	bcc.w	90011326 <tcp_receive+0x4c6>
      pbuf_remove_header(p, off);
90011064:	4629      	mov	r1, r5
90011066:	4648      	mov	r0, r9
90011068:	f7fd fba0 	bl	9000e7ac <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
9001106c:	6a63      	ldr	r3, [r4, #36]	; 0x24
9001106e:	f8d8 200c 	ldr.w	r2, [r8, #12]
90011072:	6033      	str	r3, [r6, #0]
90011074:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
90011076:	6833      	ldr	r3, [r6, #0]
90011078:	6a62      	ldr	r2, [r4, #36]	; 0x24
9001107a:	1a99      	subs	r1, r3, r2
9001107c:	2900      	cmp	r1, #0
9001107e:	f2c0 822f 	blt.w	900114e0 <tcp_receive+0x680>
90011082:	1c58      	adds	r0, r3, #1
90011084:	8d25      	ldrh	r5, [r4, #40]	; 0x28
90011086:	1a81      	subs	r1, r0, r2
90011088:	1b49      	subs	r1, r1, r5
9001108a:	2900      	cmp	r1, #0
9001108c:	f300 8228 	bgt.w	900114e0 <tcp_receive+0x680>
      if (pcb->rcv_nxt == seqno) {
90011090:	4293      	cmp	r3, r2
90011092:	f040 821f 	bne.w	900114d4 <tcp_receive+0x674>
        tcplen = TCP_TCPLEN(&inseg);
90011096:	4d73      	ldr	r5, [pc, #460]	; (90011264 <tcp_receive+0x404>)
90011098:	68eb      	ldr	r3, [r5, #12]
9001109a:	f8b5 8008 	ldrh.w	r8, [r5, #8]
9001109e:	8998      	ldrh	r0, [r3, #12]
900110a0:	f7fa f830 	bl	9000b104 <lwip_htons>
900110a4:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
900110a8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
900110aa:	bf18      	it	ne
900110ac:	2001      	movne	r0, #1
900110ae:	4440      	add	r0, r8
900110b0:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
900110b2:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
900110b4:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
900110b6:	d241      	bcs.n	9001113c <tcp_receive+0x2dc>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
900110b8:	68eb      	ldr	r3, [r5, #12]
900110ba:	8998      	ldrh	r0, [r3, #12]
900110bc:	f7fa f822 	bl	9000b104 <lwip_htons>
900110c0:	07c2      	lsls	r2, r0, #31
900110c2:	d510      	bpl.n	900110e6 <tcp_receive+0x286>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
900110c4:	68eb      	ldr	r3, [r5, #12]
900110c6:	f8b3 800c 	ldrh.w	r8, [r3, #12]
900110ca:	4640      	mov	r0, r8
900110cc:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
900110d0:	f7fa f818 	bl	9000b104 <lwip_htons>
900110d4:	f000 003e 	and.w	r0, r0, #62	; 0x3e
900110d8:	f7fa f814 	bl	9000b104 <lwip_htons>
900110dc:	68eb      	ldr	r3, [r5, #12]
900110de:	ea48 0800 	orr.w	r8, r8, r0
900110e2:	f8a3 800c 	strh.w	r8, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
900110e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
900110e8:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
900110ea:	68eb      	ldr	r3, [r5, #12]
900110ec:	8998      	ldrh	r0, [r3, #12]
900110ee:	f7fa f809 	bl	9000b104 <lwip_htons>
900110f2:	0783      	lsls	r3, r0, #30
          pbuf_realloc(inseg.p, inseg.len);
900110f4:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
900110f6:	bf42      	ittt	mi
900110f8:	892b      	ldrhmi	r3, [r5, #8]
900110fa:	f103 33ff 	addmi.w	r3, r3, #4294967295
900110fe:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
90011100:	8929      	ldrh	r1, [r5, #8]
90011102:	f7fd fc81 	bl	9000ea08 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
90011106:	68eb      	ldr	r3, [r5, #12]
90011108:	f8b5 8008 	ldrh.w	r8, [r5, #8]
9001110c:	8998      	ldrh	r0, [r3, #12]
9001110e:	f7f9 fff9 	bl	9000b104 <lwip_htons>
90011112:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
90011116:	6833      	ldr	r3, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
90011118:	bf18      	it	ne
9001111a:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
9001111c:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
9001111e:	4440      	add	r0, r8
90011120:	b280      	uxth	r0, r0
90011122:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
90011124:	4418      	add	r0, r3
90011126:	8d23      	ldrh	r3, [r4, #40]	; 0x28
90011128:	4413      	add	r3, r2
9001112a:	4298      	cmp	r0, r3
9001112c:	d006      	beq.n	9001113c <tcp_receive+0x2dc>
9001112e:	4b4e      	ldr	r3, [pc, #312]	; (90011268 <tcp_receive+0x408>)
90011130:	f240 52cb 	movw	r2, #1483	; 0x5cb
90011134:	4951      	ldr	r1, [pc, #324]	; (9001127c <tcp_receive+0x41c>)
90011136:	484e      	ldr	r0, [pc, #312]	; (90011270 <tcp_receive+0x410>)
90011138:	f018 f9ca 	bl	900294d0 <iprintf>
        if (pcb->ooseq != NULL) {
9001113c:	6f63      	ldr	r3, [r4, #116]	; 0x74
9001113e:	2b00      	cmp	r3, #0
90011140:	f000 8109 	beq.w	90011356 <tcp_receive+0x4f6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
90011144:	68eb      	ldr	r3, [r5, #12]
90011146:	8998      	ldrh	r0, [r3, #12]
90011148:	f7f9 ffdc 	bl	9000b104 <lwip_htons>
9001114c:	07c0      	lsls	r0, r0, #31
9001114e:	f100 80ff 	bmi.w	90011350 <tcp_receive+0x4f0>
            struct tcp_seg *next = pcb->ooseq;
90011152:	f8d4 8074 	ldr.w	r8, [r4, #116]	; 0x74
            while (next &&
90011156:	6830      	ldr	r0, [r6, #0]
90011158:	883b      	ldrh	r3, [r7, #0]
9001115a:	4403      	add	r3, r0
9001115c:	f1b8 0f00 	cmp.w	r8, #0
90011160:	d038      	beq.n	900111d4 <tcp_receive+0x374>
                   TCP_SEQ_GEQ(seqno + tcplen,
90011162:	f8d8 c00c 	ldr.w	ip, [r8, #12]
90011166:	f8b8 1008 	ldrh.w	r1, [r8, #8]
9001116a:	f8dc 2004 	ldr.w	r2, [ip, #4]
9001116e:	4411      	add	r1, r2
90011170:	1a59      	subs	r1, r3, r1
            while (next &&
90011172:	2900      	cmp	r1, #0
90011174:	f280 811c 	bge.w	900113b0 <tcp_receive+0x550>
                TCP_SEQ_GT(seqno + tcplen,
90011178:	1a9b      	subs	r3, r3, r2
            if (next &&
9001117a:	2b00      	cmp	r3, #0
9001117c:	dd2a      	ble.n	900111d4 <tcp_receive+0x374>
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
9001117e:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
90011180:	1a12      	subs	r2, r2, r0
90011182:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
90011184:	8998      	ldrh	r0, [r3, #12]
90011186:	f7f9 ffbd 	bl	9000b104 <lwip_htons>
9001118a:	0783      	lsls	r3, r0, #30
              pbuf_realloc(inseg.p, inseg.len);
9001118c:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
9001118e:	bf42      	ittt	mi
90011190:	892b      	ldrhmi	r3, [r5, #8]
90011192:	f103 33ff 	addmi.w	r3, r3, #4294967295
90011196:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
90011198:	8929      	ldrh	r1, [r5, #8]
9001119a:	f7fd fc35 	bl	9000ea08 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
9001119e:	68eb      	ldr	r3, [r5, #12]
900111a0:	f8b5 9008 	ldrh.w	r9, [r5, #8]
900111a4:	8998      	ldrh	r0, [r3, #12]
900111a6:	f7f9 ffad 	bl	9000b104 <lwip_htons>
900111aa:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
900111ae:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
900111b0:	bf18      	it	ne
900111b2:	2001      	movne	r0, #1
900111b4:	4448      	add	r0, r9
900111b6:	b280      	uxth	r0, r0
900111b8:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
900111ba:	4418      	add	r0, r3
900111bc:	f8d8 300c 	ldr.w	r3, [r8, #12]
900111c0:	685b      	ldr	r3, [r3, #4]
900111c2:	4298      	cmp	r0, r3
900111c4:	d006      	beq.n	900111d4 <tcp_receive+0x374>
900111c6:	4b28      	ldr	r3, [pc, #160]	; (90011268 <tcp_receive+0x408>)
900111c8:	f240 52fc 	movw	r2, #1532	; 0x5fc
900111cc:	492c      	ldr	r1, [pc, #176]	; (90011280 <tcp_receive+0x420>)
900111ce:	4828      	ldr	r0, [pc, #160]	; (90011270 <tcp_receive+0x410>)
900111d0:	f018 f97e 	bl	900294d0 <iprintf>
            pcb->ooseq = next;
900111d4:	f8c4 8074 	str.w	r8, [r4, #116]	; 0x74
900111d8:	e0bd      	b.n	90011356 <tcp_receive+0x4f6>
        pcb->dupacks = 0;
900111da:	2300      	movs	r3, #0
900111dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
900111e0:	e6cb      	b.n	90010f7a <tcp_receive+0x11a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
900111e2:	6d21      	ldr	r1, [r4, #80]	; 0x50
900111e4:	1a51      	subs	r1, r2, r1
900111e6:	2900      	cmp	r1, #0
900111e8:	f300 8099 	bgt.w	9001131e <tcp_receive+0x4be>
      if (pcb->flags & TF_INFR) {
900111ec:	8b61      	ldrh	r1, [r4, #26]
900111ee:	0748      	lsls	r0, r1, #29
900111f0:	d509      	bpl.n	90011206 <tcp_receive+0x3a6>
        tcp_clear_flags(pcb, TF_INFR);
900111f2:	f021 0104 	bic.w	r1, r1, #4
900111f6:	8361      	strh	r1, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
900111f8:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
900111fc:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
90011200:	2100      	movs	r1, #0
90011202:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
90011206:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
9001120a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
9001120c:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
9001120e:	eb01 01e0 	add.w	r1, r1, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
90011212:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
90011214:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
90011218:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
9001121a:	f04f 0100 	mov.w	r1, #0
9001121e:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
90011222:	d939      	bls.n	90011298 <tcp_receive+0x438>
        if (pcb->cwnd < pcb->ssthresh) {
90011224:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
90011228:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
9001122a:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
9001122e:	428a      	cmp	r2, r1
90011230:	d928      	bls.n	90011284 <tcp_receive+0x424>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
90011232:	8b62      	ldrh	r2, [r4, #26]
90011234:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
90011238:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
9001123a:	bf14      	ite	ne
9001123c:	2001      	movne	r0, #1
9001123e:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
90011240:	fb12 f200 	smulbb	r2, r2, r0
90011244:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
90011246:	429a      	cmp	r2, r3
90011248:	bf94      	ite	ls
9001124a:	188b      	addls	r3, r1, r2
9001124c:	18cb      	addhi	r3, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
9001124e:	b29b      	uxth	r3, r3
90011250:	4299      	cmp	r1, r3
90011252:	d901      	bls.n	90011258 <tcp_receive+0x3f8>
          TCP_WND_INC(pcb->cwnd, increase);
90011254:	f64f 73ff 	movw	r3, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
90011258:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
9001125c:	e01c      	b.n	90011298 <tcp_receive+0x438>
9001125e:	bf00      	nop
90011260:	2002cb70 	.word	0x2002cb70
90011264:	20026c84 	.word	0x20026c84
90011268:	9002d59b 	.word	0x9002d59b
9001126c:	9002d6db 	.word	0x9002d6db
90011270:	9002a254 	.word	0x9002a254
90011274:	9002d6eb 	.word	0x9002d6eb
90011278:	9002d6fa 	.word	0x9002d6fa
9001127c:	9002d70a 	.word	0x9002d70a
90011280:	9002d741 	.word	0x9002d741
          TCP_WND_INC(pcb->bytes_acked, acked);
90011284:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
90011288:	4413      	add	r3, r2
9001128a:	b29b      	uxth	r3, r3
9001128c:	429a      	cmp	r2, r3
9001128e:	d82e      	bhi.n	900112ee <tcp_receive+0x48e>
          if (pcb->bytes_acked >= pcb->cwnd) {
90011290:	4299      	cmp	r1, r3
90011292:	d92e      	bls.n	900112f2 <tcp_receive+0x492>
90011294:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
90011298:	f104 0866 	add.w	r8, r4, #102	; 0x66
9001129c:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
900112a0:	4640      	mov	r0, r8
900112a2:	f7ff fd7f 	bl	90010da4 <tcp_free_acked_segments.isra.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
900112a6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
900112a8:	4602      	mov	r2, r0
900112aa:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
900112ac:	4640      	mov	r0, r8
900112ae:	f7ff fd79 	bl	90010da4 <tcp_free_acked_segments.isra.0>
      if (pcb->unacked == NULL) {
900112b2:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
900112b4:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
900112b6:	fab2 f382 	clz	r3, r2
900112ba:	095b      	lsrs	r3, r3, #5
900112bc:	425b      	negs	r3, r3
900112be:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
900112c0:	2300      	movs	r3, #0
900112c2:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
900112c4:	b908      	cbnz	r0, 900112ca <tcp_receive+0x46a>
        pcb->unsent_oversize = 0;
900112c6:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
900112ca:	49b2      	ldr	r1, [pc, #712]	; (90011594 <tcp_receive+0x734>)
900112cc:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
900112d0:	8809      	ldrh	r1, [r1, #0]
900112d2:	440b      	add	r3, r1
900112d4:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
900112d8:	8b63      	ldrh	r3, [r4, #26]
900112da:	0519      	lsls	r1, r3, #20
900112dc:	f57f ae4d 	bpl.w	90010f7a <tcp_receive+0x11a>
        if (pcb->unacked == NULL) {
900112e0:	b9ca      	cbnz	r2, 90011316 <tcp_receive+0x4b6>
          if ((pcb->unsent == NULL) ||
900112e2:	b960      	cbnz	r0, 900112fe <tcp_receive+0x49e>
          tcp_clear_flags(pcb, TF_RTO);
900112e4:	8b63      	ldrh	r3, [r4, #26]
900112e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
900112ea:	8363      	strh	r3, [r4, #26]
900112ec:	e645      	b.n	90010f7a <tcp_receive+0x11a>
          TCP_WND_INC(pcb->bytes_acked, acked);
900112ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
900112f2:	1a5b      	subs	r3, r3, r1
900112f4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
900112f8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
900112fa:	440b      	add	r3, r1
900112fc:	e7a7      	b.n	9001124e <tcp_receive+0x3ee>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
900112fe:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
90011302:	68c3      	ldr	r3, [r0, #12]
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
90011304:	6858      	ldr	r0, [r3, #4]
90011306:	f7f9 ff00 	bl	9000b10a <lwip_htonl>
9001130a:	eba8 0000 	sub.w	r0, r8, r0
9001130e:	2800      	cmp	r0, #0
90011310:	f73f ae33 	bgt.w	90010f7a <tcp_receive+0x11a>
90011314:	e7e6      	b.n	900112e4 <tcp_receive+0x484>
90011316:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
9001131a:	68d3      	ldr	r3, [r2, #12]
9001131c:	e7f2      	b.n	90011304 <tcp_receive+0x4a4>
      tcp_send_empty_ack(pcb);
9001131e:	4620      	mov	r0, r4
90011320:	f001 fdea 	bl	90012ef8 <tcp_send_empty_ack>
90011324:	e629      	b.n	90010f7a <tcp_receive+0x11a>
        off -= p->len;
90011326:	1aad      	subs	r5, r5, r2
        p->tot_len = new_tot_len;
90011328:	f8a9 3008 	strh.w	r3, [r9, #8]
        p->len = 0;
9001132c:	f8a9 100a 	strh.w	r1, [r9, #10]
        off -= p->len;
90011330:	b2ad      	uxth	r5, r5
        p = p->next;
90011332:	f8d9 9000 	ldr.w	r9, [r9]
90011336:	e690      	b.n	9001105a <tcp_receive+0x1fa>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
90011338:	1a9b      	subs	r3, r3, r2
9001133a:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
9001133c:	bfbe      	ittt	lt
9001133e:	8b63      	ldrhlt	r3, [r4, #26]
90011340:	f043 0302 	orrlt.w	r3, r3, #2
90011344:	8363      	strhlt	r3, [r4, #26]
90011346:	e696      	b.n	90011076 <tcp_receive+0x216>
              pcb->ooseq = pcb->ooseq->next;
90011348:	6803      	ldr	r3, [r0, #0]
9001134a:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
9001134c:	f7fe fd4e 	bl	9000fdec <tcp_seg_free>
            while (pcb->ooseq != NULL) {
90011350:	6f60      	ldr	r0, [r4, #116]	; 0x74
90011352:	2800      	cmp	r0, #0
90011354:	d1f8      	bne.n	90011348 <tcp_receive+0x4e8>
        pcb->rcv_nxt = seqno + tcplen;
90011356:	883a      	ldrh	r2, [r7, #0]
90011358:	6833      	ldr	r3, [r6, #0]
9001135a:	4413      	add	r3, r2
9001135c:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
9001135e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
90011360:	4293      	cmp	r3, r2
90011362:	d206      	bcs.n	90011372 <tcp_receive+0x512>
90011364:	4b8c      	ldr	r3, [pc, #560]	; (90011598 <tcp_receive+0x738>)
90011366:	f240 6207 	movw	r2, #1543	; 0x607
9001136a:	498c      	ldr	r1, [pc, #560]	; (9001159c <tcp_receive+0x73c>)
9001136c:	488c      	ldr	r0, [pc, #560]	; (900115a0 <tcp_receive+0x740>)
9001136e:	f018 f8af 	bl	900294d0 <iprintf>
        pcb->rcv_wnd -= tcplen;
90011372:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
90011374:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
90011376:	883a      	ldrh	r2, [r7, #0]
90011378:	1a9b      	subs	r3, r3, r2
9001137a:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
9001137c:	f7fe fcc2 	bl	9000fd04 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
90011380:	686b      	ldr	r3, [r5, #4]
90011382:	891a      	ldrh	r2, [r3, #8]
90011384:	b11a      	cbz	r2, 9001138e <tcp_receive+0x52e>
          recv_data = inseg.p;
90011386:	4a87      	ldr	r2, [pc, #540]	; (900115a4 <tcp_receive+0x744>)
90011388:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
9001138a:	2300      	movs	r3, #0
9001138c:	606b      	str	r3, [r5, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
9001138e:	68eb      	ldr	r3, [r5, #12]
90011390:	8998      	ldrh	r0, [r3, #12]
90011392:	f7f9 feb7 	bl	9000b104 <lwip_htons>
90011396:	07c5      	lsls	r5, r0, #31
90011398:	d504      	bpl.n	900113a4 <tcp_receive+0x544>
          recv_flags |= TF_GOT_FIN;
9001139a:	4a83      	ldr	r2, [pc, #524]	; (900115a8 <tcp_receive+0x748>)
9001139c:	7813      	ldrb	r3, [r2, #0]
9001139e:	f043 0320 	orr.w	r3, r3, #32
900113a2:	7013      	strb	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
900113a4:	4f7c      	ldr	r7, [pc, #496]	; (90011598 <tcp_receive+0x738>)
900113a6:	f8df 8208 	ldr.w	r8, [pc, #520]	; 900115b0 <tcp_receive+0x750>
900113aa:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 900115a0 <tcp_receive+0x740>
900113ae:	e07b      	b.n	900114a8 <tcp_receive+0x648>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
900113b0:	f8bc 000c 	ldrh.w	r0, [ip, #12]
900113b4:	f7f9 fea6 	bl	9000b104 <lwip_htons>
900113b8:	07c1      	lsls	r1, r0, #31
900113ba:	d51a      	bpl.n	900113f2 <tcp_receive+0x592>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
900113bc:	68eb      	ldr	r3, [r5, #12]
900113be:	8998      	ldrh	r0, [r3, #12]
900113c0:	f7f9 fea0 	bl	9000b104 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
900113c4:	0782      	lsls	r2, r0, #30
900113c6:	d414      	bmi.n	900113f2 <tcp_receive+0x592>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
900113c8:	68eb      	ldr	r3, [r5, #12]
900113ca:	2001      	movs	r0, #1
900113cc:	f8b3 900c 	ldrh.w	r9, [r3, #12]
900113d0:	f7f9 fe98 	bl	9000b104 <lwip_htons>
900113d4:	68eb      	ldr	r3, [r5, #12]
900113d6:	ea49 0000 	orr.w	r0, r9, r0
                tcplen = TCP_TCPLEN(&inseg);
900113da:	f8b5 9008 	ldrh.w	r9, [r5, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
900113de:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
900113e0:	b280      	uxth	r0, r0
900113e2:	f7f9 fe8f 	bl	9000b104 <lwip_htons>
900113e6:	f010 0003 	ands.w	r0, r0, #3
900113ea:	bf18      	it	ne
900113ec:	2001      	movne	r0, #1
900113ee:	4448      	add	r0, r9
900113f0:	8038      	strh	r0, [r7, #0]
              next = next->next;
900113f2:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(tmp);
900113f6:	4640      	mov	r0, r8
900113f8:	f7fe fcf8 	bl	9000fdec <tcp_seg_free>
              next = next->next;
900113fc:	46c8      	mov	r8, r9
900113fe:	e6aa      	b.n	90011156 <tcp_receive+0x2f6>
          seqno = pcb->ooseq->tcphdr->seqno;
90011400:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
90011402:	8990      	ldrh	r0, [r2, #12]
90011404:	f8b5 a008 	ldrh.w	sl, [r5, #8]
90011408:	f7f9 fe7c 	bl	9000b104 <lwip_htons>
9001140c:	6a63      	ldr	r3, [r4, #36]	; 0x24
9001140e:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
90011412:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
90011416:	bf18      	it	ne
90011418:	2001      	movne	r0, #1
9001141a:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
9001141c:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
9001141e:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
90011420:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
90011424:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
90011426:	8998      	ldrh	r0, [r3, #12]
90011428:	f7f9 fe6c 	bl	9000b104 <lwip_htons>
9001142c:	f010 0003 	ands.w	r0, r0, #3
90011430:	bf18      	it	ne
90011432:	2001      	movne	r0, #1
90011434:	4458      	add	r0, fp
90011436:	4582      	cmp	sl, r0
90011438:	d206      	bcs.n	90011448 <tcp_receive+0x5e8>
9001143a:	463b      	mov	r3, r7
9001143c:	f240 622b 	movw	r2, #1579	; 0x62b
90011440:	4641      	mov	r1, r8
90011442:	4648      	mov	r0, r9
90011444:	f018 f844 	bl	900294d0 <iprintf>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
90011448:	68eb      	ldr	r3, [r5, #12]
9001144a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
9001144e:	8998      	ldrh	r0, [r3, #12]
90011450:	f7f9 fe58 	bl	9000b104 <lwip_htons>
90011454:	f010 0003 	ands.w	r0, r0, #3
90011458:	8d23      	ldrh	r3, [r4, #40]	; 0x28
9001145a:	bf18      	it	ne
9001145c:	2001      	movne	r0, #1
9001145e:	4450      	add	r0, sl
90011460:	1a18      	subs	r0, r3, r0
90011462:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
90011464:	4620      	mov	r0, r4
90011466:	f7fe fc4d 	bl	9000fd04 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
9001146a:	6869      	ldr	r1, [r5, #4]
9001146c:	890b      	ldrh	r3, [r1, #8]
9001146e:	b133      	cbz	r3, 9001147e <tcp_receive+0x61e>
            if (recv_data) {
90011470:	4b4c      	ldr	r3, [pc, #304]	; (900115a4 <tcp_receive+0x744>)
90011472:	6818      	ldr	r0, [r3, #0]
90011474:	b338      	cbz	r0, 900114c6 <tcp_receive+0x666>
              pbuf_cat(recv_data, cseg->p);
90011476:	f7fd fb5b 	bl	9000eb30 <pbuf_cat>
            cseg->p = NULL;
9001147a:	2300      	movs	r3, #0
9001147c:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
9001147e:	68eb      	ldr	r3, [r5, #12]
90011480:	8998      	ldrh	r0, [r3, #12]
90011482:	f7f9 fe3f 	bl	9000b104 <lwip_htons>
90011486:	07c0      	lsls	r0, r0, #31
90011488:	d509      	bpl.n	9001149e <tcp_receive+0x63e>
            recv_flags |= TF_GOT_FIN;
9001148a:	4a47      	ldr	r2, [pc, #284]	; (900115a8 <tcp_receive+0x748>)
9001148c:	7813      	ldrb	r3, [r2, #0]
9001148e:	f043 0320 	orr.w	r3, r3, #32
90011492:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
90011494:	7d23      	ldrb	r3, [r4, #20]
90011496:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
90011498:	bf04      	itt	eq
9001149a:	2307      	moveq	r3, #7
9001149c:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
9001149e:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
900114a0:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
900114a2:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
900114a4:	f7fe fca2 	bl	9000fdec <tcp_seg_free>
        while (pcb->ooseq != NULL &&
900114a8:	6f65      	ldr	r5, [r4, #116]	; 0x74
900114aa:	b125      	cbz	r5, 900114b6 <tcp_receive+0x656>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
900114ac:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
900114ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
900114b0:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
900114b2:	428b      	cmp	r3, r1
900114b4:	d0a4      	beq.n	90011400 <tcp_receive+0x5a0>
        tcp_ack(pcb);
900114b6:	8b63      	ldrh	r3, [r4, #26]
900114b8:	07d9      	lsls	r1, r3, #31
900114ba:	d506      	bpl.n	900114ca <tcp_receive+0x66a>
900114bc:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
900114c0:	f043 0302 	orr.w	r3, r3, #2
900114c4:	e003      	b.n	900114ce <tcp_receive+0x66e>
              recv_data = cseg->p;
900114c6:	6019      	str	r1, [r3, #0]
900114c8:	e7d7      	b.n	9001147a <tcp_receive+0x61a>
        tcp_ack(pcb);
900114ca:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
900114ce:	8363      	strh	r3, [r4, #26]
}
900114d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (pcb->ooseq == NULL) {
900114d4:	6f65      	ldr	r5, [r4, #116]	; 0x74
900114d6:	b945      	cbnz	r5, 900114ea <tcp_receive+0x68a>
          pcb->ooseq = tcp_seg_copy(&inseg);
900114d8:	4834      	ldr	r0, [pc, #208]	; (900115ac <tcp_receive+0x74c>)
900114da:	f7fe fc9d 	bl	9000fe18 <tcp_seg_copy>
900114de:	6760      	str	r0, [r4, #116]	; 0x74
        tcp_send_empty_ack(pcb);
900114e0:	4620      	mov	r0, r4
}
900114e2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
900114e6:	f001 bd07 	b.w	90012ef8 <tcp_send_empty_ack>
          struct tcp_seg *next, *prev = NULL;
900114ea:	f04f 0800 	mov.w	r8, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
900114ee:	f103 3eff 	add.w	lr, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
900114f2:	f8d5 c00c 	ldr.w	ip, [r5, #12]
900114f6:	f8dc 2004 	ldr.w	r2, [ip, #4]
900114fa:	4293      	cmp	r3, r2
900114fc:	d115      	bne.n	9001152a <tcp_receive+0x6ca>
              if (inseg.len > next->len) {
900114fe:	482b      	ldr	r0, [pc, #172]	; (900115ac <tcp_receive+0x74c>)
90011500:	892b      	ldrh	r3, [r5, #8]
90011502:	8902      	ldrh	r2, [r0, #8]
90011504:	429a      	cmp	r2, r3
90011506:	d9eb      	bls.n	900114e0 <tcp_receive+0x680>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
90011508:	f7fe fc86 	bl	9000fe18 <tcp_seg_copy>
                if (cseg != NULL) {
9001150c:	2800      	cmp	r0, #0
9001150e:	d0e7      	beq.n	900114e0 <tcp_receive+0x680>
                  if (prev != NULL) {
90011510:	f1b8 0f00 	cmp.w	r8, #0
90011514:	d007      	beq.n	90011526 <tcp_receive+0x6c6>
                    prev->next = cseg;
90011516:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
9001151a:	4629      	mov	r1, r5
9001151c:	f7ff fb84 	bl	90010c28 <tcp_oos_insert_segment>
90011520:	e7de      	b.n	900114e0 <tcp_receive+0x680>
90011522:	460d      	mov	r5, r1
90011524:	e7e5      	b.n	900114f2 <tcp_receive+0x692>
                    pcb->ooseq = cseg;
90011526:	6760      	str	r0, [r4, #116]	; 0x74
                  tcp_oos_insert_segment(cseg, next);
90011528:	e7f7      	b.n	9001151a <tcp_receive+0x6ba>
              if (prev == NULL) {
9001152a:	f1b8 0f00 	cmp.w	r8, #0
9001152e:	d109      	bne.n	90011544 <tcp_receive+0x6e4>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
90011530:	1a99      	subs	r1, r3, r2
90011532:	2900      	cmp	r1, #0
90011534:	da3e      	bge.n	900115b4 <tcp_receive+0x754>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
90011536:	481d      	ldr	r0, [pc, #116]	; (900115ac <tcp_receive+0x74c>)
90011538:	f7fe fc6e 	bl	9000fe18 <tcp_seg_copy>
                  if (cseg != NULL) {
9001153c:	2800      	cmp	r0, #0
9001153e:	d0cf      	beq.n	900114e0 <tcp_receive+0x680>
                    pcb->ooseq = cseg;
90011540:	6760      	str	r0, [r4, #116]	; 0x74
90011542:	e7ea      	b.n	9001151a <tcp_receive+0x6ba>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
90011544:	f8d8 100c 	ldr.w	r1, [r8, #12]
90011548:	6849      	ldr	r1, [r1, #4]
9001154a:	ebae 0101 	sub.w	r1, lr, r1
9001154e:	2900      	cmp	r1, #0
90011550:	db30      	blt.n	900115b4 <tcp_receive+0x754>
90011552:	1a81      	subs	r1, r0, r2
90011554:	2900      	cmp	r1, #0
90011556:	dc2d      	bgt.n	900115b4 <tcp_receive+0x754>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
90011558:	4814      	ldr	r0, [pc, #80]	; (900115ac <tcp_receive+0x74c>)
9001155a:	f7fe fc5d 	bl	9000fe18 <tcp_seg_copy>
                  if (cseg != NULL) {
9001155e:	4607      	mov	r7, r0
90011560:	2800      	cmp	r0, #0
90011562:	d0bd      	beq.n	900114e0 <tcp_receive+0x680>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
90011564:	f8d8 300c 	ldr.w	r3, [r8, #12]
90011568:	6831      	ldr	r1, [r6, #0]
9001156a:	685a      	ldr	r2, [r3, #4]
9001156c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
90011570:	4413      	add	r3, r2
90011572:	1a5b      	subs	r3, r3, r1
90011574:	2b00      	cmp	r3, #0
90011576:	dd07      	ble.n	90011588 <tcp_receive+0x728>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
90011578:	1a89      	subs	r1, r1, r2
                      pbuf_realloc(prev->p, prev->len);
9001157a:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
9001157e:	b289      	uxth	r1, r1
90011580:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
90011584:	f7fd fa40 	bl	9000ea08 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
90011588:	4629      	mov	r1, r5
9001158a:	4638      	mov	r0, r7
                    prev->next = cseg;
9001158c:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
90011590:	e7c4      	b.n	9001151c <tcp_receive+0x6bc>
90011592:	bf00      	nop
90011594:	20026c94 	.word	0x20026c94
90011598:	9002d59b 	.word	0x9002d59b
9001159c:	9002d77c 	.word	0x9002d77c
900115a0:	9002a254 	.word	0x9002a254
900115a4:	20026c98 	.word	0x20026c98
900115a8:	20026c9c 	.word	0x20026c9c
900115ac:	20026c84 	.word	0x20026c84
900115b0:	9002d79b 	.word	0x9002d79b
              if (next->next == NULL &&
900115b4:	6829      	ldr	r1, [r5, #0]
900115b6:	46a8      	mov	r8, r5
900115b8:	2900      	cmp	r1, #0
900115ba:	d1b2      	bne.n	90011522 <tcp_receive+0x6c2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
900115bc:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
900115be:	2b00      	cmp	r3, #0
900115c0:	dd8e      	ble.n	900114e0 <tcp_receive+0x680>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
900115c2:	f8bc 000c 	ldrh.w	r0, [ip, #12]
900115c6:	f7f9 fd9d 	bl	9000b104 <lwip_htons>
900115ca:	07c2      	lsls	r2, r0, #31
900115cc:	d488      	bmi.n	900114e0 <tcp_receive+0x680>
                next->next = tcp_seg_copy(&inseg);
900115ce:	4836      	ldr	r0, [pc, #216]	; (900116a8 <tcp_receive+0x848>)
900115d0:	f7fe fc22 	bl	9000fe18 <tcp_seg_copy>
900115d4:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
900115d6:	2800      	cmp	r0, #0
900115d8:	d082      	beq.n	900114e0 <tcp_receive+0x680>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
900115da:	68eb      	ldr	r3, [r5, #12]
900115dc:	6831      	ldr	r1, [r6, #0]
900115de:	685a      	ldr	r2, [r3, #4]
900115e0:	892b      	ldrh	r3, [r5, #8]
900115e2:	4413      	add	r3, r2
900115e4:	1a5b      	subs	r3, r3, r1
900115e6:	2b00      	cmp	r3, #0
900115e8:	dd05      	ble.n	900115f6 <tcp_receive+0x796>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
900115ea:	1a89      	subs	r1, r1, r2
                    pbuf_realloc(next->p, next->len);
900115ec:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
900115ee:	b289      	uxth	r1, r1
900115f0:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
900115f2:	f7fd fa09 	bl	9000ea08 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
900115f6:	6832      	ldr	r2, [r6, #0]
900115f8:	883b      	ldrh	r3, [r7, #0]
900115fa:	4413      	add	r3, r2
900115fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
900115fe:	1a9b      	subs	r3, r3, r2
90011600:	8d22      	ldrh	r2, [r4, #40]	; 0x28
90011602:	1a9b      	subs	r3, r3, r2
90011604:	2b00      	cmp	r3, #0
90011606:	f77f af6b 	ble.w	900114e0 <tcp_receive+0x680>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
9001160a:	682b      	ldr	r3, [r5, #0]
9001160c:	68db      	ldr	r3, [r3, #12]
9001160e:	8998      	ldrh	r0, [r3, #12]
90011610:	f7f9 fd78 	bl	9000b104 <lwip_htons>
90011614:	07c3      	lsls	r3, r0, #31
90011616:	d512      	bpl.n	9001163e <tcp_receive+0x7de>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
90011618:	682b      	ldr	r3, [r5, #0]
9001161a:	68db      	ldr	r3, [r3, #12]
9001161c:	f8b3 800c 	ldrh.w	r8, [r3, #12]
90011620:	4640      	mov	r0, r8
90011622:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
90011626:	f7f9 fd6d 	bl	9000b104 <lwip_htons>
9001162a:	f000 003e 	and.w	r0, r0, #62	; 0x3e
9001162e:	f7f9 fd69 	bl	9000b104 <lwip_htons>
90011632:	682b      	ldr	r3, [r5, #0]
90011634:	ea48 0800 	orr.w	r8, r8, r0
90011638:	68db      	ldr	r3, [r3, #12]
9001163a:	f8a3 800c 	strh.w	r8, [r3, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
9001163e:	6832      	ldr	r2, [r6, #0]
90011640:	8d21      	ldrh	r1, [r4, #40]	; 0x28
90011642:	682b      	ldr	r3, [r5, #0]
90011644:	1a89      	subs	r1, r1, r2
90011646:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
90011648:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
9001164a:	4411      	add	r1, r2
9001164c:	b289      	uxth	r1, r1
9001164e:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
90011650:	f7fd f9da 	bl	9000ea08 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
90011654:	682b      	ldr	r3, [r5, #0]
90011656:	891d      	ldrh	r5, [r3, #8]
90011658:	68db      	ldr	r3, [r3, #12]
9001165a:	8998      	ldrh	r0, [r3, #12]
9001165c:	f7f9 fd52 	bl	9000b104 <lwip_htons>
90011660:	f010 0003 	ands.w	r0, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
90011664:	6833      	ldr	r3, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
90011666:	bf18      	it	ne
90011668:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
9001166a:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
9001166c:	4428      	add	r0, r5
9001166e:	b280      	uxth	r0, r0
90011670:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
90011672:	4418      	add	r0, r3
90011674:	8d23      	ldrh	r3, [r4, #40]	; 0x28
90011676:	4413      	add	r3, r2
90011678:	4298      	cmp	r0, r3
9001167a:	f43f af31 	beq.w	900114e0 <tcp_receive+0x680>
9001167e:	4b0b      	ldr	r3, [pc, #44]	; (900116ac <tcp_receive+0x84c>)
90011680:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
90011684:	490a      	ldr	r1, [pc, #40]	; (900116b0 <tcp_receive+0x850>)
90011686:	480b      	ldr	r0, [pc, #44]	; (900116b4 <tcp_receive+0x854>)
90011688:	f017 ff22 	bl	900294d0 <iprintf>
9001168c:	e728      	b.n	900114e0 <tcp_receive+0x680>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
9001168e:	1a99      	subs	r1, r3, r2
90011690:	2900      	cmp	r1, #0
90011692:	db06      	blt.n	900116a2 <tcp_receive+0x842>
90011694:	3301      	adds	r3, #1
90011696:	1a9b      	subs	r3, r3, r2
90011698:	8d22      	ldrh	r2, [r4, #40]	; 0x28
9001169a:	1a9b      	subs	r3, r3, r2
9001169c:	2b00      	cmp	r3, #0
9001169e:	f77f af17 	ble.w	900114d0 <tcp_receive+0x670>
      tcp_ack_now(pcb);
900116a2:	8b63      	ldrh	r3, [r4, #26]
900116a4:	e70c      	b.n	900114c0 <tcp_receive+0x660>
900116a6:	bf00      	nop
900116a8:	20026c84 	.word	0x20026c84
900116ac:	9002d59b 	.word	0x9002d59b
900116b0:	9002d70a 	.word	0x9002d70a
900116b4:	9002a254 	.word	0x9002a254

900116b8 <tcp_input>:
{
900116b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
900116bc:	4605      	mov	r5, r0
{
900116be:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
900116c0:	b928      	cbnz	r0, 900116ce <tcp_input+0x16>
900116c2:	4b64      	ldr	r3, [pc, #400]	; (90011854 <tcp_input+0x19c>)
900116c4:	2283      	movs	r2, #131	; 0x83
900116c6:	4964      	ldr	r1, [pc, #400]	; (90011858 <tcp_input+0x1a0>)
900116c8:	4864      	ldr	r0, [pc, #400]	; (9001185c <tcp_input+0x1a4>)
900116ca:	f017 ff01 	bl	900294d0 <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
900116ce:	686b      	ldr	r3, [r5, #4]
900116d0:	4e63      	ldr	r6, [pc, #396]	; (90011860 <tcp_input+0x1a8>)
900116d2:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
900116d4:	896b      	ldrh	r3, [r5, #10]
900116d6:	2b13      	cmp	r3, #19
900116d8:	f240 80b5 	bls.w	90011846 <tcp_input+0x18e>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
900116dc:	4f61      	ldr	r7, [pc, #388]	; (90011864 <tcp_input+0x1ac>)
900116de:	6839      	ldr	r1, [r7, #0]
900116e0:	6978      	ldr	r0, [r7, #20]
900116e2:	f7fb febe 	bl	9000d462 <ip4_addr_isbroadcast_u32>
900116e6:	4604      	mov	r4, r0
900116e8:	2800      	cmp	r0, #0
900116ea:	f040 80ac 	bne.w	90011846 <tcp_input+0x18e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
900116ee:	697b      	ldr	r3, [r7, #20]
900116f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
900116f4:	2be0      	cmp	r3, #224	; 0xe0
900116f6:	f000 80a6 	beq.w	90011846 <tcp_input+0x18e>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
900116fa:	6833      	ldr	r3, [r6, #0]
900116fc:	8998      	ldrh	r0, [r3, #12]
900116fe:	f7f9 fd01 	bl	9000b104 <lwip_htons>
90011702:	0a81      	lsrs	r1, r0, #10
90011704:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
90011708:	2913      	cmp	r1, #19
9001170a:	f240 809c 	bls.w	90011846 <tcp_input+0x18e>
9001170e:	892b      	ldrh	r3, [r5, #8]
90011710:	fa1f fc81 	uxth.w	ip, r1
90011714:	428b      	cmp	r3, r1
90011716:	f0c0 8096 	bcc.w	90011846 <tcp_input+0x18e>
  tcphdr_opt2 = NULL;
9001171a:	4a53      	ldr	r2, [pc, #332]	; (90011868 <tcp_input+0x1b0>)
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
9001171c:	f1ac 0314 	sub.w	r3, ip, #20
90011720:	4852      	ldr	r0, [pc, #328]	; (9001186c <tcp_input+0x1b4>)
  tcphdr_opt2 = NULL;
90011722:	6014      	str	r4, [r2, #0]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
90011724:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
90011726:	896c      	ldrh	r4, [r5, #10]
90011728:	4680      	mov	r8, r0
9001172a:	4691      	mov	r9, r2
9001172c:	f8df a160 	ldr.w	sl, [pc, #352]	; 90011890 <tcp_input+0x1d8>
90011730:	4564      	cmp	r4, ip
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
90011732:	8003      	strh	r3, [r0, #0]
  if (p->len >= hdrlen_bytes) {
90011734:	d345      	bcc.n	900117c2 <tcp_input+0x10a>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
90011736:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
90011738:	f8aa 3000 	strh.w	r3, [sl]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
9001173c:	f7fd f836 	bl	9000e7ac <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
90011740:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
90011742:	f8df b150 	ldr.w	fp, [pc, #336]	; 90011894 <tcp_input+0x1dc>
  tcphdr->src = lwip_ntohs(tcphdr->src);
90011746:	8820      	ldrh	r0, [r4, #0]
90011748:	f7f9 fcdc 	bl	9000b104 <lwip_htons>
9001174c:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
9001174e:	6834      	ldr	r4, [r6, #0]
90011750:	8860      	ldrh	r0, [r4, #2]
90011752:	f7f9 fcd7 	bl	9000b104 <lwip_htons>
90011756:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
90011758:	6834      	ldr	r4, [r6, #0]
9001175a:	6860      	ldr	r0, [r4, #4]
9001175c:	f7f9 fcd5 	bl	9000b10a <lwip_htonl>
90011760:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
90011762:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
90011764:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
90011768:	68a0      	ldr	r0, [r4, #8]
9001176a:	f7f9 fcce 	bl	9000b10a <lwip_htonl>
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
9001176e:	f8d6 9000 	ldr.w	r9, [r6]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
90011772:	60a0      	str	r0, [r4, #8]
90011774:	4c3e      	ldr	r4, [pc, #248]	; (90011870 <tcp_input+0x1b8>)
90011776:	6020      	str	r0, [r4, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
90011778:	46a2      	mov	sl, r4
9001177a:	f8b9 000e 	ldrh.w	r0, [r9, #14]
9001177e:	f7f9 fcc1 	bl	9000b104 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
90011782:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
90011784:	f8a9 000e 	strh.w	r0, [r9, #14]
  flags = TCPH_FLAGS(tcphdr);
90011788:	8998      	ldrh	r0, [r3, #12]
9001178a:	f7f9 fcbb 	bl	9000b104 <lwip_htons>
9001178e:	4b39      	ldr	r3, [pc, #228]	; (90011874 <tcp_input+0x1bc>)
90011790:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  if (flags & (TCP_FIN | TCP_SYN)) {
90011794:	f010 0f03 	tst.w	r0, #3
90011798:	9305      	str	r3, [sp, #20]
  flags = TCPH_FLAGS(tcphdr);
9001179a:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
9001179c:	892a      	ldrh	r2, [r5, #8]
  if (flags & (TCP_FIN | TCP_SYN)) {
9001179e:	d14c      	bne.n	9001183a <tcp_input+0x182>
  tcplen = p->tot_len;
900117a0:	4b35      	ldr	r3, [pc, #212]	; (90011878 <tcp_input+0x1c0>)
900117a2:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
900117a4:	4b35      	ldr	r3, [pc, #212]	; (9001187c <tcp_input+0x1c4>)
  prev = NULL;
900117a6:	2200      	movs	r2, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
900117a8:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 9001185c <tcp_input+0x1a4>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
900117ac:	681c      	ldr	r4, [r3, #0]
900117ae:	4698      	mov	r8, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
900117b0:	4b28      	ldr	r3, [pc, #160]	; (90011854 <tcp_input+0x19c>)
  prev = NULL;
900117b2:	9206      	str	r2, [sp, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
900117b4:	2c00      	cmp	r4, #0
900117b6:	d16f      	bne.n	90011898 <tcp_input+0x1e0>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
900117b8:	4b31      	ldr	r3, [pc, #196]	; (90011880 <tcp_input+0x1c8>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
900117ba:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 9001185c <tcp_input+0x1a4>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
900117be:	681c      	ldr	r4, [r3, #0]
900117c0:	e154      	b.n	90011a6c <tcp_input+0x3b4>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
900117c2:	682b      	ldr	r3, [r5, #0]
900117c4:	b92b      	cbnz	r3, 900117d2 <tcp_input+0x11a>
900117c6:	4b23      	ldr	r3, [pc, #140]	; (90011854 <tcp_input+0x19c>)
900117c8:	22c2      	movs	r2, #194	; 0xc2
900117ca:	492e      	ldr	r1, [pc, #184]	; (90011884 <tcp_input+0x1cc>)
900117cc:	4823      	ldr	r0, [pc, #140]	; (9001185c <tcp_input+0x1a4>)
900117ce:	f017 fe7f 	bl	900294d0 <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
900117d2:	2114      	movs	r1, #20
900117d4:	4628      	mov	r0, r5
900117d6:	f7fc ffe9 	bl	9000e7ac <pbuf_remove_header>
    tcphdr_opt1len = p->len;
900117da:	896c      	ldrh	r4, [r5, #10]
    pbuf_remove_header(p, tcphdr_opt1len);
900117dc:	4628      	mov	r0, r5
    tcphdr_opt1len = p->len;
900117de:	f8aa 4000 	strh.w	r4, [sl]
    pbuf_remove_header(p, tcphdr_opt1len);
900117e2:	4621      	mov	r1, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
900117e4:	f8b8 a000 	ldrh.w	sl, [r8]
    pbuf_remove_header(p, tcphdr_opt1len);
900117e8:	f7fc ffe0 	bl	9000e7ac <pbuf_remove_header>
    if (opt2len > p->next->len) {
900117ec:	6828      	ldr	r0, [r5, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
900117ee:	ebaa 0804 	sub.w	r8, sl, r4
    if (opt2len > p->next->len) {
900117f2:	8943      	ldrh	r3, [r0, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
900117f4:	fa1f f888 	uxth.w	r8, r8
    if (opt2len > p->next->len) {
900117f8:	4543      	cmp	r3, r8
900117fa:	d324      	bcc.n	90011846 <tcp_input+0x18e>
    tcphdr_opt2 = (u8_t *)p->next->payload;
900117fc:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
900117fe:	4641      	mov	r1, r8
    tcphdr_opt2 = (u8_t *)p->next->payload;
90011800:	f8c9 3000 	str.w	r3, [r9]
    pbuf_remove_header(p->next, opt2len);
90011804:	f7fc ffd2 	bl	9000e7ac <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
90011808:	892b      	ldrh	r3, [r5, #8]
9001180a:	441c      	add	r4, r3
    LWIP_ASSERT("p->len == 0", p->len == 0);
9001180c:	896b      	ldrh	r3, [r5, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
9001180e:	eba4 040a 	sub.w	r4, r4, sl
90011812:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
90011814:	b12b      	cbz	r3, 90011822 <tcp_input+0x16a>
90011816:	4b0f      	ldr	r3, [pc, #60]	; (90011854 <tcp_input+0x19c>)
90011818:	22df      	movs	r2, #223	; 0xdf
9001181a:	491b      	ldr	r1, [pc, #108]	; (90011888 <tcp_input+0x1d0>)
9001181c:	480f      	ldr	r0, [pc, #60]	; (9001185c <tcp_input+0x1a4>)
9001181e:	f017 fe57 	bl	900294d0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
90011822:	682b      	ldr	r3, [r5, #0]
90011824:	892a      	ldrh	r2, [r5, #8]
90011826:	891b      	ldrh	r3, [r3, #8]
90011828:	429a      	cmp	r2, r3
9001182a:	d089      	beq.n	90011740 <tcp_input+0x88>
9001182c:	4b09      	ldr	r3, [pc, #36]	; (90011854 <tcp_input+0x19c>)
9001182e:	22e0      	movs	r2, #224	; 0xe0
90011830:	4916      	ldr	r1, [pc, #88]	; (9001188c <tcp_input+0x1d4>)
90011832:	480a      	ldr	r0, [pc, #40]	; (9001185c <tcp_input+0x1a4>)
90011834:	f017 fe4c 	bl	900294d0 <iprintf>
90011838:	e782      	b.n	90011740 <tcp_input+0x88>
    tcplen++;
9001183a:	1c53      	adds	r3, r2, #1
9001183c:	490e      	ldr	r1, [pc, #56]	; (90011878 <tcp_input+0x1c0>)
9001183e:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
90011840:	429a      	cmp	r2, r3
    tcplen++;
90011842:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
90011844:	d9ae      	bls.n	900117a4 <tcp_input+0xec>
  pbuf_free(p);
90011846:	4628      	mov	r0, r5
}
90011848:	b009      	add	sp, #36	; 0x24
9001184a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
9001184e:	f7fc bfe1 	b.w	9000e814 <pbuf_free>
90011852:	bf00      	nop
90011854:	9002d59b 	.word	0x9002d59b
90011858:	9002d7c0 	.word	0x9002d7c0
9001185c:	9002a254 	.word	0x9002a254
90011860:	20026ca8 	.word	0x20026ca8
90011864:	20027358 	.word	0x20027358
90011868:	20026cb0 	.word	0x20026cb0
9001186c:	20026cb4 	.word	0x20026cb4
90011870:	20026c7c 	.word	0x20026c7c
90011874:	20026c80 	.word	0x20026c80
90011878:	20026cb6 	.word	0x20026cb6
9001187c:	2002cb6c 	.word	0x2002cb6c
90011880:	2002cb7c 	.word	0x2002cb7c
90011884:	9002d7d8 	.word	0x9002d7d8
90011888:	9002d7e8 	.word	0x9002d7e8
9001188c:	9002d7f4 	.word	0x9002d7f4
90011890:	20026cac 	.word	0x20026cac
90011894:	20026ca0 	.word	0x20026ca0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
90011898:	7d22      	ldrb	r2, [r4, #20]
9001189a:	b92a      	cbnz	r2, 900118a8 <tcp_input+0x1f0>
9001189c:	22fb      	movs	r2, #251	; 0xfb
9001189e:	499b      	ldr	r1, [pc, #620]	; (90011b0c <tcp_input+0x454>)
900118a0:	4648      	mov	r0, r9
900118a2:	f017 fe15 	bl	900294d0 <iprintf>
900118a6:	4b9a      	ldr	r3, [pc, #616]	; (90011b10 <tcp_input+0x458>)
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
900118a8:	7d22      	ldrb	r2, [r4, #20]
900118aa:	2a0a      	cmp	r2, #10
900118ac:	d105      	bne.n	900118ba <tcp_input+0x202>
900118ae:	22fc      	movs	r2, #252	; 0xfc
900118b0:	4998      	ldr	r1, [pc, #608]	; (90011b14 <tcp_input+0x45c>)
900118b2:	4648      	mov	r0, r9
900118b4:	f017 fe0c 	bl	900294d0 <iprintf>
900118b8:	4b95      	ldr	r3, [pc, #596]	; (90011b10 <tcp_input+0x458>)
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
900118ba:	7d22      	ldrb	r2, [r4, #20]
900118bc:	2a01      	cmp	r2, #1
900118be:	d105      	bne.n	900118cc <tcp_input+0x214>
900118c0:	22fd      	movs	r2, #253	; 0xfd
900118c2:	4995      	ldr	r1, [pc, #596]	; (90011b18 <tcp_input+0x460>)
900118c4:	4648      	mov	r0, r9
900118c6:	f017 fe03 	bl	900294d0 <iprintf>
900118ca:	4b91      	ldr	r3, [pc, #580]	; (90011b10 <tcp_input+0x458>)
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
900118cc:	7a20      	ldrb	r0, [r4, #8]
900118ce:	68e1      	ldr	r1, [r4, #12]
900118d0:	b130      	cbz	r0, 900118e0 <tcp_input+0x228>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
900118d2:	687a      	ldr	r2, [r7, #4]
900118d4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
900118d8:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
900118da:	b2d2      	uxtb	r2, r2
900118dc:	4290      	cmp	r0, r2
900118de:	d16f      	bne.n	900119c0 <tcp_input+0x308>
    if (pcb->remote_port == tcphdr->src &&
900118e0:	6832      	ldr	r2, [r6, #0]
900118e2:	f8b4 c018 	ldrh.w	ip, [r4, #24]
900118e6:	8810      	ldrh	r0, [r2, #0]
900118e8:	4584      	cmp	ip, r0
900118ea:	d169      	bne.n	900119c0 <tcp_input+0x308>
900118ec:	8ae0      	ldrh	r0, [r4, #22]
900118ee:	8852      	ldrh	r2, [r2, #2]
900118f0:	4290      	cmp	r0, r2
900118f2:	d165      	bne.n	900119c0 <tcp_input+0x308>
        pcb->local_port == tcphdr->dest &&
900118f4:	6860      	ldr	r0, [r4, #4]
900118f6:	693a      	ldr	r2, [r7, #16]
900118f8:	4290      	cmp	r0, r2
900118fa:	d161      	bne.n	900119c0 <tcp_input+0x308>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
900118fc:	6820      	ldr	r0, [r4, #0]
900118fe:	697a      	ldr	r2, [r7, #20]
90011900:	4290      	cmp	r0, r2
90011902:	d15d      	bne.n	900119c0 <tcp_input+0x308>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
90011904:	42a1      	cmp	r1, r4
90011906:	f040 8429 	bne.w	9001215c <tcp_input+0xaa4>
9001190a:	4b81      	ldr	r3, [pc, #516]	; (90011b10 <tcp_input+0x458>)
9001190c:	f240 120d 	movw	r2, #269	; 0x10d
90011910:	4982      	ldr	r1, [pc, #520]	; (90011b1c <tcp_input+0x464>)
90011912:	4883      	ldr	r0, [pc, #524]	; (90011b20 <tcp_input+0x468>)
90011914:	f017 fddc 	bl	900294d0 <iprintf>
      if (prev != NULL) {
90011918:	9b06      	ldr	r3, [sp, #24]
9001191a:	b13b      	cbz	r3, 9001192c <tcp_input+0x274>
        prev->next = pcb->next;
9001191c:	68e3      	ldr	r3, [r4, #12]
9001191e:	9a06      	ldr	r2, [sp, #24]
90011920:	60d3      	str	r3, [r2, #12]
        pcb->next = tcp_active_pcbs;
90011922:	f8d8 3000 	ldr.w	r3, [r8]
        tcp_active_pcbs = pcb;
90011926:	f8c8 4000 	str.w	r4, [r8]
        pcb->next = tcp_active_pcbs;
9001192a:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
9001192c:	68e3      	ldr	r3, [r4, #12]
9001192e:	42a3      	cmp	r3, r4
90011930:	d106      	bne.n	90011940 <tcp_input+0x288>
90011932:	4b77      	ldr	r3, [pc, #476]	; (90011b10 <tcp_input+0x458>)
90011934:	f240 1215 	movw	r2, #277	; 0x115
90011938:	497a      	ldr	r1, [pc, #488]	; (90011b24 <tcp_input+0x46c>)
9001193a:	4879      	ldr	r0, [pc, #484]	; (90011b20 <tcp_input+0x468>)
9001193c:	f017 fdc8 	bl	900294d0 <iprintf>
    inseg.next = NULL;
90011940:	4b79      	ldr	r3, [pc, #484]	; (90011b28 <tcp_input+0x470>)
90011942:	2200      	movs	r2, #0
    inseg.len = p->tot_len;
90011944:	8929      	ldrh	r1, [r5, #8]
    recv_acked = 0;
90011946:	4879      	ldr	r0, [pc, #484]	; (90011b2c <tcp_input+0x474>)
    inseg.len = p->tot_len;
90011948:	8119      	strh	r1, [r3, #8]
    inseg.tcphdr = tcphdr;
9001194a:	6831      	ldr	r1, [r6, #0]
    recv_flags = 0;
9001194c:	4f78      	ldr	r7, [pc, #480]	; (90011b30 <tcp_input+0x478>)
    inseg.tcphdr = tcphdr;
9001194e:	60d9      	str	r1, [r3, #12]
    recv_data = NULL;
90011950:	4978      	ldr	r1, [pc, #480]	; (90011b34 <tcp_input+0x47c>)
    inseg.next = NULL;
90011952:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
90011954:	600a      	str	r2, [r1, #0]
90011956:	4689      	mov	r9, r1
    recv_flags = 0;
90011958:	703a      	strb	r2, [r7, #0]
    recv_acked = 0;
9001195a:	8002      	strh	r2, [r0, #0]
    if (flags & TCP_PSH) {
9001195c:	9a05      	ldr	r2, [sp, #20]
    inseg.p = p;
9001195e:	605d      	str	r5, [r3, #4]
    if (flags & TCP_PSH) {
90011960:	7812      	ldrb	r2, [r2, #0]
90011962:	9006      	str	r0, [sp, #24]
90011964:	f012 0f08 	tst.w	r2, #8
90011968:	9307      	str	r3, [sp, #28]
9001196a:	d003      	beq.n	90011974 <tcp_input+0x2bc>
      p->flags |= PBUF_FLAG_PUSH;
9001196c:	7b6b      	ldrb	r3, [r5, #13]
9001196e:	f043 0301 	orr.w	r3, r3, #1
90011972:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
90011974:	6fa3      	ldr	r3, [r4, #120]	; 0x78
90011976:	4d70      	ldr	r5, [pc, #448]	; (90011b38 <tcp_input+0x480>)
90011978:	2b00      	cmp	r3, #0
9001197a:	f000 814b 	beq.w	90011c14 <tcp_input+0x55c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
9001197e:	4620      	mov	r0, r4
90011980:	f7fe fe4a 	bl	90010618 <tcp_process_refused_data>
90011984:	300d      	adds	r0, #13
90011986:	d008      	beq.n	9001199a <tcp_input+0x2e2>
90011988:	6fa3      	ldr	r3, [r4, #120]	; 0x78
9001198a:	2b00      	cmp	r3, #0
9001198c:	f000 8142 	beq.w	90011c14 <tcp_input+0x55c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
90011990:	4b6a      	ldr	r3, [pc, #424]	; (90011b3c <tcp_input+0x484>)
90011992:	881b      	ldrh	r3, [r3, #0]
90011994:	2b00      	cmp	r3, #0
90011996:	f000 813d 	beq.w	90011c14 <tcp_input+0x55c>
        if (pcb->rcv_ann_wnd == 0) {
9001199a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9001199c:	b913      	cbnz	r3, 900119a4 <tcp_input+0x2ec>
          tcp_send_empty_ack(pcb);
9001199e:	4620      	mov	r0, r4
900119a0:	f001 faaa 	bl	90012ef8 <tcp_send_empty_ack>
    if (inseg.p != NULL) {
900119a4:	9b07      	ldr	r3, [sp, #28]
    tcp_input_pcb = NULL;
900119a6:	2400      	movs	r4, #0
    if (inseg.p != NULL) {
900119a8:	6858      	ldr	r0, [r3, #4]
    tcp_input_pcb = NULL;
900119aa:	602c      	str	r4, [r5, #0]
    recv_data = NULL;
900119ac:	f8c9 4000 	str.w	r4, [r9]
    if (inseg.p != NULL) {
900119b0:	b118      	cbz	r0, 900119ba <tcp_input+0x302>
      pbuf_free(inseg.p);
900119b2:	f7fc ff2f 	bl	9000e814 <pbuf_free>
      inseg.p = NULL;
900119b6:	9b07      	ldr	r3, [sp, #28]
900119b8:	605c      	str	r4, [r3, #4]
}
900119ba:	b009      	add	sp, #36	; 0x24
900119bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
900119c0:	9406      	str	r4, [sp, #24]
900119c2:	460c      	mov	r4, r1
900119c4:	e6f6      	b.n	900117b4 <tcp_input+0xfc>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
900119c6:	7d23      	ldrb	r3, [r4, #20]
900119c8:	2b0a      	cmp	r3, #10
900119ca:	d006      	beq.n	900119da <tcp_input+0x322>
900119cc:	4b50      	ldr	r3, [pc, #320]	; (90011b10 <tcp_input+0x458>)
900119ce:	f240 121f 	movw	r2, #287	; 0x11f
900119d2:	495b      	ldr	r1, [pc, #364]	; (90011b40 <tcp_input+0x488>)
900119d4:	4648      	mov	r0, r9
900119d6:	f017 fd7b 	bl	900294d0 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
900119da:	7a22      	ldrb	r2, [r4, #8]
900119dc:	b132      	cbz	r2, 900119ec <tcp_input+0x334>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
900119de:	687b      	ldr	r3, [r7, #4]
900119e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
900119e4:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
900119e6:	b2db      	uxtb	r3, r3
900119e8:	429a      	cmp	r2, r3
900119ea:	d13e      	bne.n	90011a6a <tcp_input+0x3b2>
      if (pcb->remote_port == tcphdr->src &&
900119ec:	6833      	ldr	r3, [r6, #0]
900119ee:	8b20      	ldrh	r0, [r4, #24]
900119f0:	881a      	ldrh	r2, [r3, #0]
900119f2:	4290      	cmp	r0, r2
900119f4:	d139      	bne.n	90011a6a <tcp_input+0x3b2>
          pcb->local_port == tcphdr->dest &&
900119f6:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
900119f8:	8ae1      	ldrh	r1, [r4, #22]
900119fa:	4299      	cmp	r1, r3
900119fc:	d135      	bne.n	90011a6a <tcp_input+0x3b2>
          pcb->local_port == tcphdr->dest &&
900119fe:	6862      	ldr	r2, [r4, #4]
90011a00:	693b      	ldr	r3, [r7, #16]
90011a02:	429a      	cmp	r2, r3
90011a04:	d131      	bne.n	90011a6a <tcp_input+0x3b2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
90011a06:	6822      	ldr	r2, [r4, #0]
90011a08:	697b      	ldr	r3, [r7, #20]
90011a0a:	429a      	cmp	r2, r3
90011a0c:	d12d      	bne.n	90011a6a <tcp_input+0x3b2>
  if (flags & TCP_RST) {
90011a0e:	9b05      	ldr	r3, [sp, #20]
90011a10:	781b      	ldrb	r3, [r3, #0]
90011a12:	075e      	lsls	r6, r3, #29
90011a14:	f53f af17 	bmi.w	90011846 <tcp_input+0x18e>
  if (flags & TCP_SYN) {
90011a18:	4a48      	ldr	r2, [pc, #288]	; (90011b3c <tcp_input+0x484>)
90011a1a:	8816      	ldrh	r6, [r2, #0]
90011a1c:	079a      	lsls	r2, r3, #30
90011a1e:	d514      	bpl.n	90011a4a <tcp_input+0x392>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
90011a20:	f8db 2000 	ldr.w	r2, [fp]
90011a24:	6a63      	ldr	r3, [r4, #36]	; 0x24
90011a26:	1ad3      	subs	r3, r2, r3
90011a28:	d414      	bmi.n	90011a54 <tcp_input+0x39c>
90011a2a:	8d27      	ldrh	r7, [r4, #40]	; 0x28
90011a2c:	1bdb      	subs	r3, r3, r7
90011a2e:	2b00      	cmp	r3, #0
90011a30:	dc10      	bgt.n	90011a54 <tcp_input+0x39c>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
90011a32:	4b44      	ldr	r3, [pc, #272]	; (90011b44 <tcp_input+0x48c>)
90011a34:	4432      	add	r2, r6
90011a36:	e9cd 1001 	strd	r1, r0, [sp, #4]
90011a3a:	9300      	str	r3, [sp, #0]
90011a3c:	4620      	mov	r0, r4
90011a3e:	3304      	adds	r3, #4
90011a40:	f8da 1000 	ldr.w	r1, [sl]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
90011a44:	f001 fa12 	bl	90012e6c <tcp_rst>
90011a48:	e6fd      	b.n	90011846 <tcp_input+0x18e>
  } else if (flags & TCP_FIN) {
90011a4a:	07df      	lsls	r7, r3, #31
    pcb->tmr = tcp_ticks;
90011a4c:	bf42      	ittt	mi
90011a4e:	4b3e      	ldrmi	r3, [pc, #248]	; (90011b48 <tcp_input+0x490>)
90011a50:	681b      	ldrmi	r3, [r3, #0]
90011a52:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
90011a54:	2e00      	cmp	r6, #0
90011a56:	f43f aef6 	beq.w	90011846 <tcp_input+0x18e>
    tcp_ack_now(pcb);
90011a5a:	8b63      	ldrh	r3, [r4, #26]
    tcp_output(pcb);
90011a5c:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
90011a5e:	f043 0302 	orr.w	r3, r3, #2
90011a62:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
90011a64:	f001 fa7a 	bl	90012f5c <tcp_output>
        pbuf_free(p);
90011a68:	e6ed      	b.n	90011846 <tcp_input+0x18e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
90011a6a:	68e4      	ldr	r4, [r4, #12]
90011a6c:	2c00      	cmp	r4, #0
90011a6e:	d1aa      	bne.n	900119c6 <tcp_input+0x30e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
90011a70:	4b36      	ldr	r3, [pc, #216]	; (90011b4c <tcp_input+0x494>)
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
90011a72:	f8d7 c004 	ldr.w	ip, [r7, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
90011a76:	681a      	ldr	r2, [r3, #0]
      if (lpcb->local_port == tcphdr->dest) {
90011a78:	6831      	ldr	r1, [r6, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
90011a7a:	f8d7 e014 	ldr.w	lr, [r7, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
90011a7e:	4691      	mov	r9, r2
90011a80:	f1b9 0f00 	cmp.w	r9, #0
90011a84:	d113      	bne.n	90011aae <tcp_input+0x3f6>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
90011a86:	8988      	ldrh	r0, [r1, #12]
90011a88:	f7f9 fb3c 	bl	9000b104 <lwip_htons>
90011a8c:	0743      	lsls	r3, r0, #29
90011a8e:	f53f aeda 	bmi.w	90011846 <tcp_input+0x18e>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
90011a92:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
90011a94:	4a29      	ldr	r2, [pc, #164]	; (90011b3c <tcp_input+0x484>)
90011a96:	8818      	ldrh	r0, [r3, #0]
90011a98:	8811      	ldrh	r1, [r2, #0]
90011a9a:	9002      	str	r0, [sp, #8]
90011a9c:	885b      	ldrh	r3, [r3, #2]
90011a9e:	f8db 2000 	ldr.w	r2, [fp]
90011aa2:	9301      	str	r3, [sp, #4]
90011aa4:	4b27      	ldr	r3, [pc, #156]	; (90011b44 <tcp_input+0x48c>)
90011aa6:	440a      	add	r2, r1
90011aa8:	9300      	str	r3, [sp, #0]
90011aaa:	3304      	adds	r3, #4
90011aac:	e352      	b.n	90012154 <tcp_input+0xa9c>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
90011aae:	f899 0008 	ldrb.w	r0, [r9, #8]
90011ab2:	b128      	cbz	r0, 90011ac0 <tcp_input+0x408>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
90011ab4:	f89c 3034 	ldrb.w	r3, [ip, #52]	; 0x34
90011ab8:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
90011aba:	b2db      	uxtb	r3, r3
90011abc:	4298      	cmp	r0, r3
90011abe:	d10c      	bne.n	90011ada <tcp_input+0x422>
      if (lpcb->local_port == tcphdr->dest) {
90011ac0:	8848      	ldrh	r0, [r1, #2]
90011ac2:	f8b9 3016 	ldrh.w	r3, [r9, #22]
90011ac6:	4283      	cmp	r3, r0
90011ac8:	d107      	bne.n	90011ada <tcp_input+0x422>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
90011aca:	f8d9 3000 	ldr.w	r3, [r9]
90011ace:	4573      	cmp	r3, lr
90011ad0:	f000 8323 	beq.w	9001211a <tcp_input+0xa62>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
90011ad4:	2b00      	cmp	r3, #0
90011ad6:	f000 8320 	beq.w	9001211a <tcp_input+0xa62>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
90011ada:	464c      	mov	r4, r9
90011adc:	f8d9 900c 	ldr.w	r9, [r9, #12]
90011ae0:	e7ce      	b.n	90011a80 <tcp_input+0x3c8>
  } else if (flags & TCP_SYN) {
90011ae2:	0798      	lsls	r0, r3, #30
90011ae4:	f57f aeaf 	bpl.w	90011846 <tcp_input+0x18e>
    npcb = tcp_alloc(pcb->prio);
90011ae8:	f899 0015 	ldrb.w	r0, [r9, #21]
90011aec:	f7fe fc04 	bl	900102f8 <tcp_alloc>
    if (npcb == NULL) {
90011af0:	4682      	mov	sl, r0
90011af2:	bb68      	cbnz	r0, 90011b50 <tcp_input+0x498>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
90011af4:	f8d9 3018 	ldr.w	r3, [r9, #24]
90011af8:	2b00      	cmp	r3, #0
90011afa:	f43f aea4 	beq.w	90011846 <tcp_input+0x18e>
90011afe:	4601      	mov	r1, r0
90011b00:	f04f 32ff 	mov.w	r2, #4294967295
90011b04:	f8d9 0010 	ldr.w	r0, [r9, #16]
90011b08:	4798      	blx	r3
90011b0a:	e69c      	b.n	90011846 <tcp_input+0x18e>
90011b0c:	9002d813 	.word	0x9002d813
90011b10:	9002d59b 	.word	0x9002d59b
90011b14:	9002d83a 	.word	0x9002d83a
90011b18:	9002d864 	.word	0x9002d864
90011b1c:	9002d88b 	.word	0x9002d88b
90011b20:	9002a254 	.word	0x9002a254
90011b24:	9002d8b6 	.word	0x9002d8b6
90011b28:	20026c84 	.word	0x20026c84
90011b2c:	20026c94 	.word	0x20026c94
90011b30:	20026c9c 	.word	0x20026c9c
90011b34:	20026c98 	.word	0x20026c98
90011b38:	2002cb80 	.word	0x2002cb80
90011b3c:	20026cb6 	.word	0x20026cb6
90011b40:	9002d8e0 	.word	0x9002d8e0
90011b44:	20027368 	.word	0x20027368
90011b48:	2002cb70 	.word	0x2002cb70
90011b4c:	2002cb74 	.word	0x2002cb74
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
90011b50:	697b      	ldr	r3, [r7, #20]
    npcb->remote_port = tcphdr->src;
90011b52:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
90011b54:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
90011b56:	693b      	ldr	r3, [r7, #16]
90011b58:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
90011b5a:	f8b9 3016 	ldrh.w	r3, [r9, #22]
90011b5e:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
90011b60:	7813      	ldrb	r3, [r2, #0]
90011b62:	7852      	ldrb	r2, [r2, #1]
90011b64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
90011b68:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
90011b6a:	2303      	movs	r3, #3
90011b6c:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
90011b6e:	f8db 3000 	ldr.w	r3, [fp]
90011b72:	3301      	adds	r3, #1
90011b74:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
90011b76:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
90011b78:	f7fe f9e8 	bl	9000ff4c <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
90011b7c:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
90011b80:	f8ca 0058 	str.w	r0, [sl, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
90011b84:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
90011b86:	f8ca 0050 	str.w	r0, [sl, #80]	; 0x50
    npcb->lastack = iss;
90011b8a:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
90011b8e:	f8ca 3054 	str.w	r3, [sl, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
90011b92:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->snd_lbb = iss;
90011b96:	f8ca 005c 	str.w	r0, [sl, #92]	; 0x5c
    npcb->callback_arg = pcb->callback_arg;
90011b9a:	f8ca 3010 	str.w	r3, [sl, #16]
    npcb->listener = pcb;
90011b9e:	f8ca 907c 	str.w	r9, [sl, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
90011ba2:	f899 3009 	ldrb.w	r3, [r9, #9]
90011ba6:	f003 030c 	and.w	r3, r3, #12
90011baa:	f88a 3009 	strb.w	r3, [sl, #9]
    npcb->netif_idx = pcb->netif_idx;
90011bae:	f899 3008 	ldrb.w	r3, [r9, #8]
90011bb2:	f88a 3008 	strb.w	r3, [sl, #8]
    TCP_REG_ACTIVE(npcb);
90011bb6:	f8d8 3000 	ldr.w	r3, [r8]
90011bba:	f8c8 a000 	str.w	sl, [r8]
90011bbe:	f8ca 300c 	str.w	r3, [sl, #12]
90011bc2:	f001 fdbf 	bl	90013744 <tcp_timer_needed>
90011bc6:	4ba4      	ldr	r3, [pc, #656]	; (90011e58 <tcp_input+0x7a0>)
90011bc8:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
90011bca:	4650      	mov	r0, sl
    TCP_REG_ACTIVE(npcb);
90011bcc:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
90011bce:	f7ff f875 	bl	90010cbc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
90011bd2:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
90011bd4:	f10a 0204 	add.w	r2, sl, #4
90011bd8:	f8ba 6032 	ldrh.w	r6, [sl, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
90011bdc:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
90011bde:	4610      	mov	r0, r2
90011be0:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
90011be2:	f8aa 3060 	strh.w	r3, [sl, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
90011be6:	f8aa 3062 	strh.w	r3, [sl, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
90011bea:	f7fb fabd 	bl	9000d168 <ip4_route>
90011bee:	9a05      	ldr	r2, [sp, #20]
90011bf0:	4601      	mov	r1, r0
90011bf2:	4630      	mov	r0, r6
90011bf4:	f7fe f9c4 	bl	9000ff80 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
90011bf8:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
90011bfa:	f8aa 0032 	strh.w	r0, [sl, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
90011bfe:	4650      	mov	r0, sl
90011c00:	f000 ffb8 	bl	90012b74 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
90011c04:	b120      	cbz	r0, 90011c10 <tcp_input+0x558>
      tcp_abandon(npcb, 0);
90011c06:	4621      	mov	r1, r4
90011c08:	4650      	mov	r0, sl
90011c0a:	f7fe fa79 	bl	90010100 <tcp_abandon>
      return;
90011c0e:	e61a      	b.n	90011846 <tcp_input+0x18e>
    tcp_output(npcb);
90011c10:	4650      	mov	r0, sl
90011c12:	e727      	b.n	90011a64 <tcp_input+0x3ac>
  if (flags & TCP_RST) {
90011c14:	9b05      	ldr	r3, [sp, #20]
    tcp_input_pcb = pcb;
90011c16:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
90011c18:	781a      	ldrb	r2, [r3, #0]
90011c1a:	0751      	lsls	r1, r2, #29
90011c1c:	d539      	bpl.n	90011c92 <tcp_input+0x5da>
    if (pcb->state == SYN_SENT) {
90011c1e:	7d21      	ldrb	r1, [r4, #20]
90011c20:	2902      	cmp	r1, #2
90011c22:	d11f      	bne.n	90011c64 <tcp_input+0x5ac>
      if (ackno == pcb->snd_nxt) {
90011c24:	6d22      	ldr	r2, [r4, #80]	; 0x50
90011c26:	f8da 3000 	ldr.w	r3, [sl]
90011c2a:	429a      	cmp	r2, r3
90011c2c:	d107      	bne.n	90011c3e <tcp_input+0x586>
      recv_flags |= TF_RESET;
90011c2e:	783b      	ldrb	r3, [r7, #0]
90011c30:	f043 0308 	orr.w	r3, r3, #8
90011c34:	703b      	strb	r3, [r7, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
90011c36:	8b63      	ldrh	r3, [r4, #26]
90011c38:	f023 0301 	bic.w	r3, r3, #1
        tcp_ack_now(pcb);
90011c3c:	8363      	strh	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
90011c3e:	783b      	ldrb	r3, [r7, #0]
90011c40:	0719      	lsls	r1, r3, #28
90011c42:	f140 8204 	bpl.w	9001204e <tcp_input+0x996>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
90011c46:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
90011c4a:	b11b      	cbz	r3, 90011c54 <tcp_input+0x59c>
90011c4c:	f06f 010d 	mvn.w	r1, #13
90011c50:	6920      	ldr	r0, [r4, #16]
90011c52:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
90011c54:	4621      	mov	r1, r4
90011c56:	4881      	ldr	r0, [pc, #516]	; (90011e5c <tcp_input+0x7a4>)
90011c58:	f7fe f9ec 	bl	90010034 <tcp_pcb_remove>
        tcp_free(pcb);
90011c5c:	4620      	mov	r0, r4
90011c5e:	f7fd ff7d 	bl	9000fb5c <tcp_free>
90011c62:	e69f      	b.n	900119a4 <tcp_input+0x2ec>
      if (seqno == pcb->rcv_nxt) {
90011c64:	6a62      	ldr	r2, [r4, #36]	; 0x24
90011c66:	f8db 3000 	ldr.w	r3, [fp]
90011c6a:	429a      	cmp	r2, r3
90011c6c:	d007      	beq.n	90011c7e <tcp_input+0x5c6>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
90011c6e:	1a9b      	subs	r3, r3, r2
90011c70:	d4e5      	bmi.n	90011c3e <tcp_input+0x586>
90011c72:	8d22      	ldrh	r2, [r4, #40]	; 0x28
90011c74:	1a9b      	subs	r3, r3, r2
90011c76:	2b00      	cmp	r3, #0
90011c78:	dce1      	bgt.n	90011c3e <tcp_input+0x586>
        tcp_ack_now(pcb);
90011c7a:	8b63      	ldrh	r3, [r4, #26]
90011c7c:	e010      	b.n	90011ca0 <tcp_input+0x5e8>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
90011c7e:	2900      	cmp	r1, #0
90011c80:	d1d5      	bne.n	90011c2e <tcp_input+0x576>
90011c82:	4b77      	ldr	r3, [pc, #476]	; (90011e60 <tcp_input+0x7a8>)
90011c84:	f44f 724e 	mov.w	r2, #824	; 0x338
90011c88:	4976      	ldr	r1, [pc, #472]	; (90011e64 <tcp_input+0x7ac>)
90011c8a:	4877      	ldr	r0, [pc, #476]	; (90011e68 <tcp_input+0x7b0>)
90011c8c:	f017 fc20 	bl	900294d0 <iprintf>
90011c90:	e7cd      	b.n	90011c2e <tcp_input+0x576>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
90011c92:	0792      	lsls	r2, r2, #30
90011c94:	8b63      	ldrh	r3, [r4, #26]
90011c96:	d506      	bpl.n	90011ca6 <tcp_input+0x5ee>
90011c98:	7d22      	ldrb	r2, [r4, #20]
90011c9a:	3a02      	subs	r2, #2
90011c9c:	2a01      	cmp	r2, #1
90011c9e:	d902      	bls.n	90011ca6 <tcp_input+0x5ee>
        tcp_ack_now(pcb);
90011ca0:	f043 0302 	orr.w	r3, r3, #2
90011ca4:	e7ca      	b.n	90011c3c <tcp_input+0x584>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
90011ca6:	06d8      	lsls	r0, r3, #27
  tcp_parseopt(pcb);
90011ca8:	4620      	mov	r0, r4
    pcb->tmr = tcp_ticks;
90011caa:	bf5e      	ittt	pl
90011cac:	4b6f      	ldrpl	r3, [pc, #444]	; (90011e6c <tcp_input+0x7b4>)
90011cae:	681b      	ldrpl	r3, [r3, #0]
90011cb0:	6223      	strpl	r3, [r4, #32]
  pcb->persist_probe = 0;
90011cb2:	2300      	movs	r3, #0
90011cb4:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
  tcp_parseopt(pcb);
90011cb8:	f7ff f800 	bl	90010cbc <tcp_parseopt>
  switch (pcb->state) {
90011cbc:	7d23      	ldrb	r3, [r4, #20]
90011cbe:	3b02      	subs	r3, #2
90011cc0:	2b07      	cmp	r3, #7
90011cc2:	d8bc      	bhi.n	90011c3e <tcp_input+0x586>
90011cc4:	e8df f013 	tbh	[pc, r3, lsl #1]
90011cc8:	009b0008 	.word	0x009b0008
90011ccc:	01280124 	.word	0x01280124
90011cd0:	01240173 	.word	0x01240173
90011cd4:	01ac018c 	.word	0x01ac018c
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
90011cd8:	9b05      	ldr	r3, [sp, #20]
90011cda:	781b      	ldrb	r3, [r3, #0]
90011cdc:	f003 0212 	and.w	r2, r3, #18
90011ce0:	2a12      	cmp	r2, #18
90011ce2:	d16c      	bne.n	90011dbe <tcp_input+0x706>
          && (ackno == pcb->lastack + 1)) {
90011ce4:	6c62      	ldr	r2, [r4, #68]	; 0x44
90011ce6:	f8da 1000 	ldr.w	r1, [sl]
90011cea:	3201      	adds	r2, #1
90011cec:	428a      	cmp	r2, r1
90011cee:	d166      	bne.n	90011dbe <tcp_input+0x706>
        pcb->rcv_nxt = seqno + 1;
90011cf0:	f8db 3000 	ldr.w	r3, [fp]
        pcb->lastack = ackno;
90011cf4:	6462      	str	r2, [r4, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
90011cf6:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
90011cf8:	6832      	ldr	r2, [r6, #0]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
90011cfa:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
90011cfc:	8e66      	ldrh	r6, [r4, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
90011cfe:	6261      	str	r1, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
90011d00:	62e1      	str	r1, [r4, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
90011d02:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
90011d04:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
90011d06:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
90011d08:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
90011d0c:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
90011d10:	18e2      	adds	r2, r4, r3
        pcb->state = ESTABLISHED;
90011d12:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
90011d14:	4610      	mov	r0, r2
90011d16:	9205      	str	r2, [sp, #20]
90011d18:	f7fb fa26 	bl	9000d168 <ip4_route>
90011d1c:	9a05      	ldr	r2, [sp, #20]
90011d1e:	4601      	mov	r1, r0
90011d20:	4630      	mov	r0, r6
90011d22:	f7fe f92d 	bl	9000ff80 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
90011d26:	f241 131c 	movw	r3, #4380	; 0x111c
90011d2a:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
90011d2c:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
90011d2e:	0081      	lsls	r1, r0, #2
90011d30:	429a      	cmp	r2, r3
90011d32:	4616      	mov	r6, r2
90011d34:	bf38      	it	cc
90011d36:	461e      	movcc	r6, r3
90011d38:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
90011d3c:	d933      	bls.n	90011da6 <tcp_input+0x6ee>
90011d3e:	b28b      	uxth	r3, r1
90011d40:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
90011d44:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
90011d48:	b933      	cbnz	r3, 90011d58 <tcp_input+0x6a0>
90011d4a:	4b45      	ldr	r3, [pc, #276]	; (90011e60 <tcp_input+0x7a8>)
90011d4c:	f44f 725b 	mov.w	r2, #876	; 0x36c
90011d50:	4947      	ldr	r1, [pc, #284]	; (90011e70 <tcp_input+0x7b8>)
90011d52:	4845      	ldr	r0, [pc, #276]	; (90011e68 <tcp_input+0x7b0>)
90011d54:	f017 fbbc 	bl	900294d0 <iprintf>
        --pcb->snd_queuelen;
90011d58:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
90011d5c:	6f26      	ldr	r6, [r4, #112]	; 0x70
        --pcb->snd_queuelen;
90011d5e:	3b01      	subs	r3, #1
90011d60:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        if (rseg == NULL) {
90011d64:	bb1e      	cbnz	r6, 90011dae <tcp_input+0x6f6>
          rseg = pcb->unsent;
90011d66:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
90011d68:	b936      	cbnz	r6, 90011d78 <tcp_input+0x6c0>
90011d6a:	4b3d      	ldr	r3, [pc, #244]	; (90011e60 <tcp_input+0x7a8>)
90011d6c:	f44f 725d 	mov.w	r2, #884	; 0x374
90011d70:	4940      	ldr	r1, [pc, #256]	; (90011e74 <tcp_input+0x7bc>)
90011d72:	483d      	ldr	r0, [pc, #244]	; (90011e68 <tcp_input+0x7b0>)
90011d74:	f017 fbac 	bl	900294d0 <iprintf>
          pcb->unsent = rseg->next;
90011d78:	6833      	ldr	r3, [r6, #0]
90011d7a:	66e3      	str	r3, [r4, #108]	; 0x6c
        tcp_seg_free(rseg);
90011d7c:	4630      	mov	r0, r6
90011d7e:	f7fe f835 	bl	9000fdec <tcp_seg_free>
        if (pcb->unacked == NULL) {
90011d82:	6f23      	ldr	r3, [r4, #112]	; 0x70
90011d84:	b9b3      	cbnz	r3, 90011db4 <tcp_input+0x6fc>
          pcb->rtime = -1;
90011d86:	f64f 73ff 	movw	r3, #65535	; 0xffff
90011d8a:	8623      	strh	r3, [r4, #48]	; 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
90011d8c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
90011d90:	2b00      	cmp	r3, #0
90011d92:	f43f af72 	beq.w	90011c7a <tcp_input+0x5c2>
90011d96:	2200      	movs	r2, #0
90011d98:	4621      	mov	r1, r4
90011d9a:	6920      	ldr	r0, [r4, #16]
90011d9c:	4798      	blx	r3
        if (err == ERR_ABRT) {
90011d9e:	300d      	adds	r0, #13
90011da0:	f47f af6b 	bne.w	90011c7a <tcp_input+0x5c2>
90011da4:	e5fe      	b.n	900119a4 <tcp_input+0x2ec>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
90011da6:	429a      	cmp	r2, r3
90011da8:	bf88      	it	hi
90011daa:	b293      	uxthhi	r3, r2
90011dac:	e7c8      	b.n	90011d40 <tcp_input+0x688>
          pcb->unacked = rseg->next;
90011dae:	6833      	ldr	r3, [r6, #0]
90011db0:	6723      	str	r3, [r4, #112]	; 0x70
90011db2:	e7e3      	b.n	90011d7c <tcp_input+0x6c4>
          pcb->rtime = 0;
90011db4:	2300      	movs	r3, #0
90011db6:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
90011db8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
90011dbc:	e7e6      	b.n	90011d8c <tcp_input+0x6d4>
      else if (flags & TCP_ACK) {
90011dbe:	06d9      	lsls	r1, r3, #27
90011dc0:	f57f af3d 	bpl.w	90011c3e <tcp_input+0x586>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
90011dc4:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
90011dc6:	4a2c      	ldr	r2, [pc, #176]	; (90011e78 <tcp_input+0x7c0>)
90011dc8:	8818      	ldrh	r0, [r3, #0]
90011dca:	8811      	ldrh	r1, [r2, #0]
90011dcc:	9002      	str	r0, [sp, #8]
90011dce:	4620      	mov	r0, r4
90011dd0:	885b      	ldrh	r3, [r3, #2]
90011dd2:	f8db 2000 	ldr.w	r2, [fp]
90011dd6:	9301      	str	r3, [sp, #4]
90011dd8:	4b28      	ldr	r3, [pc, #160]	; (90011e7c <tcp_input+0x7c4>)
90011dda:	440a      	add	r2, r1
90011ddc:	9300      	str	r3, [sp, #0]
90011dde:	3304      	adds	r3, #4
90011de0:	f8da 1000 	ldr.w	r1, [sl]
90011de4:	f001 f842 	bl	90012e6c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
90011de8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
90011dec:	2b05      	cmp	r3, #5
90011dee:	f63f af26 	bhi.w	90011c3e <tcp_input+0x586>
          pcb->rtime = 0;
90011df2:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
90011df4:	4620      	mov	r0, r4
          pcb->rtime = 0;
90011df6:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
90011df8:	f001 fa76 	bl	900132e8 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
90011dfc:	e71f      	b.n	90011c3e <tcp_input+0x586>
      if (flags & TCP_ACK) {
90011dfe:	9b05      	ldr	r3, [sp, #20]
90011e00:	781b      	ldrb	r3, [r3, #0]
90011e02:	06da      	lsls	r2, r3, #27
90011e04:	d576      	bpl.n	90011ef4 <tcp_input+0x83c>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
90011e06:	6c63      	ldr	r3, [r4, #68]	; 0x44
90011e08:	f8da 1000 	ldr.w	r1, [sl]
90011e0c:	43db      	mvns	r3, r3
90011e0e:	42cb      	cmn	r3, r1
90011e10:	d45f      	bmi.n	90011ed2 <tcp_input+0x81a>
90011e12:	6d23      	ldr	r3, [r4, #80]	; 0x50
90011e14:	1acb      	subs	r3, r1, r3
90011e16:	2b00      	cmp	r3, #0
90011e18:	dc5b      	bgt.n	90011ed2 <tcp_input+0x81a>
          pcb->state = ESTABLISHED;
90011e1a:	2304      	movs	r3, #4
90011e1c:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
90011e1e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
90011e20:	b91b      	cbnz	r3, 90011e2a <tcp_input+0x772>
            tcp_abort(pcb);
90011e22:	4620      	mov	r0, r4
90011e24:	f7fe f9ee 	bl	90010204 <tcp_abort>
            goto aborted;
90011e28:	e5bc      	b.n	900119a4 <tcp_input+0x2ec>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
90011e2a:	699b      	ldr	r3, [r3, #24]
90011e2c:	b933      	cbnz	r3, 90011e3c <tcp_input+0x784>
90011e2e:	4b0c      	ldr	r3, [pc, #48]	; (90011e60 <tcp_input+0x7a8>)
90011e30:	f44f 726a 	mov.w	r2, #936	; 0x3a8
90011e34:	4912      	ldr	r1, [pc, #72]	; (90011e80 <tcp_input+0x7c8>)
90011e36:	480c      	ldr	r0, [pc, #48]	; (90011e68 <tcp_input+0x7b0>)
90011e38:	f017 fb4a 	bl	900294d0 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
90011e3c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
90011e3e:	699b      	ldr	r3, [r3, #24]
90011e40:	2b00      	cmp	r3, #0
90011e42:	d0ee      	beq.n	90011e22 <tcp_input+0x76a>
90011e44:	2200      	movs	r2, #0
90011e46:	4621      	mov	r1, r4
90011e48:	6920      	ldr	r0, [r4, #16]
90011e4a:	4798      	blx	r3
          if (err != ERR_OK) {
90011e4c:	b1d0      	cbz	r0, 90011e84 <tcp_input+0x7cc>
            if (err != ERR_ABRT) {
90011e4e:	300d      	adds	r0, #13
90011e50:	f43f ada8 	beq.w	900119a4 <tcp_input+0x2ec>
90011e54:	e7e5      	b.n	90011e22 <tcp_input+0x76a>
90011e56:	bf00      	nop
90011e58:	2002cb68 	.word	0x2002cb68
90011e5c:	2002cb6c 	.word	0x2002cb6c
90011e60:	9002d59b 	.word	0x9002d59b
90011e64:	9002d90d 	.word	0x9002d90d
90011e68:	9002a254 	.word	0x9002a254
90011e6c:	2002cb70 	.word	0x2002cb70
90011e70:	9002d92d 	.word	0x9002d92d
90011e74:	9002d943 	.word	0x9002d943
90011e78:	20026cb6 	.word	0x20026cb6
90011e7c:	20027368 	.word	0x20027368
90011e80:	9002d956 	.word	0x9002d956
          tcp_receive(pcb);
90011e84:	4620      	mov	r0, r4
90011e86:	f7fe ffeb 	bl	90010e60 <tcp_receive>
          if (recv_acked != 0) {
90011e8a:	9b06      	ldr	r3, [sp, #24]
90011e8c:	881b      	ldrh	r3, [r3, #0]
90011e8e:	b113      	cbz	r3, 90011e96 <tcp_input+0x7de>
            recv_acked--;
90011e90:	3b01      	subs	r3, #1
90011e92:	9a06      	ldr	r2, [sp, #24]
90011e94:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
90011e96:	8e61      	ldrh	r1, [r4, #50]	; 0x32
90011e98:	f241 131c 	movw	r3, #4380	; 0x111c
90011e9c:	004a      	lsls	r2, r1, #1
90011e9e:	0088      	lsls	r0, r1, #2
90011ea0:	429a      	cmp	r2, r3
90011ea2:	4616      	mov	r6, r2
90011ea4:	bf38      	it	cc
90011ea6:	461e      	movcc	r6, r3
90011ea8:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
90011eac:	d90d      	bls.n	90011eca <tcp_input+0x812>
90011eae:	b283      	uxth	r3, r0
90011eb0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (recv_flags & TF_GOT_FIN) { /* passive close */
90011eb4:	783b      	ldrb	r3, [r7, #0]
90011eb6:	0699      	lsls	r1, r3, #26
90011eb8:	f57f aec1 	bpl.w	90011c3e <tcp_input+0x586>
        tcp_ack_now(pcb);
90011ebc:	8b63      	ldrh	r3, [r4, #26]
90011ebe:	f043 0302 	orr.w	r3, r3, #2
90011ec2:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
90011ec4:	2307      	movs	r3, #7
        pcb->state = FIN_WAIT_2;
90011ec6:	7523      	strb	r3, [r4, #20]
    if (err != ERR_ABRT) {
90011ec8:	e6b9      	b.n	90011c3e <tcp_input+0x586>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
90011eca:	429a      	cmp	r2, r3
90011ecc:	bf88      	it	hi
90011ece:	b293      	uxthhi	r3, r2
90011ed0:	e7ee      	b.n	90011eb0 <tcp_input+0x7f8>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
90011ed2:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
90011ed4:	4aa4      	ldr	r2, [pc, #656]	; (90012168 <tcp_input+0xab0>)
90011ed6:	881e      	ldrh	r6, [r3, #0]
90011ed8:	8810      	ldrh	r0, [r2, #0]
90011eda:	9602      	str	r6, [sp, #8]
90011edc:	885b      	ldrh	r3, [r3, #2]
90011ede:	f8db 2000 	ldr.w	r2, [fp]
90011ee2:	9301      	str	r3, [sp, #4]
90011ee4:	4ba1      	ldr	r3, [pc, #644]	; (9001216c <tcp_input+0xab4>)
90011ee6:	4402      	add	r2, r0
90011ee8:	4620      	mov	r0, r4
90011eea:	9300      	str	r3, [sp, #0]
90011eec:	3304      	adds	r3, #4
90011eee:	f000 ffbd 	bl	90012e6c <tcp_rst>
    if (err != ERR_ABRT) {
90011ef2:	e6a4      	b.n	90011c3e <tcp_input+0x586>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
90011ef4:	0798      	lsls	r0, r3, #30
90011ef6:	f57f aea2 	bpl.w	90011c3e <tcp_input+0x586>
90011efa:	6a63      	ldr	r3, [r4, #36]	; 0x24
90011efc:	f8db 2000 	ldr.w	r2, [fp]
90011f00:	3b01      	subs	r3, #1
90011f02:	4293      	cmp	r3, r2
90011f04:	f47f ae9b 	bne.w	90011c3e <tcp_input+0x586>
        tcp_rexmit(pcb);
90011f08:	4620      	mov	r0, r4
90011f0a:	f000 ff3b 	bl	90012d84 <tcp_rexmit>
    if (err != ERR_ABRT) {
90011f0e:	e696      	b.n	90011c3e <tcp_input+0x586>
      tcp_receive(pcb);
90011f10:	4620      	mov	r0, r4
90011f12:	f7fe ffa5 	bl	90010e60 <tcp_receive>
90011f16:	e7cd      	b.n	90011eb4 <tcp_input+0x7fc>
      tcp_receive(pcb);
90011f18:	4620      	mov	r0, r4
90011f1a:	f7fe ffa1 	bl	90010e60 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
90011f1e:	783b      	ldrb	r3, [r7, #0]
90011f20:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
90011f24:	9b05      	ldr	r3, [sp, #20]
90011f26:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
90011f28:	d032      	beq.n	90011f90 <tcp_input+0x8d8>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
90011f2a:	f013 0f10 	tst.w	r3, #16
90011f2e:	8b63      	ldrh	r3, [r4, #26]
90011f30:	d029      	beq.n	90011f86 <tcp_input+0x8ce>
90011f32:	6d21      	ldr	r1, [r4, #80]	; 0x50
90011f34:	f8da 2000 	ldr.w	r2, [sl]
90011f38:	4291      	cmp	r1, r2
90011f3a:	d124      	bne.n	90011f86 <tcp_input+0x8ce>
90011f3c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
90011f3e:	bb12      	cbnz	r2, 90011f86 <tcp_input+0x8ce>
          tcp_ack_now(pcb);
90011f40:	f043 0302 	orr.w	r3, r3, #2
          tcp_pcb_purge(pcb);
90011f44:	4620      	mov	r0, r4
          tcp_ack_now(pcb);
90011f46:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
90011f48:	f7fe f842 	bl	9000ffd0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
90011f4c:	f8d8 3000 	ldr.w	r3, [r8]
90011f50:	429c      	cmp	r4, r3
90011f52:	d10a      	bne.n	90011f6a <tcp_input+0x8b2>
        TCP_RMV_ACTIVE(pcb);
90011f54:	68e3      	ldr	r3, [r4, #12]
90011f56:	f8c8 3000 	str.w	r3, [r8]
90011f5a:	e008      	b.n	90011f6e <tcp_input+0x8b6>
          TCP_RMV_ACTIVE(pcb);
90011f5c:	68da      	ldr	r2, [r3, #12]
90011f5e:	4294      	cmp	r4, r2
90011f60:	d102      	bne.n	90011f68 <tcp_input+0x8b0>
        TCP_RMV_ACTIVE(pcb);
90011f62:	68e2      	ldr	r2, [r4, #12]
90011f64:	60da      	str	r2, [r3, #12]
90011f66:	e002      	b.n	90011f6e <tcp_input+0x8b6>
90011f68:	4613      	mov	r3, r2
          TCP_RMV_ACTIVE(pcb);
90011f6a:	2b00      	cmp	r3, #0
90011f6c:	d1f6      	bne.n	90011f5c <tcp_input+0x8a4>
        TCP_RMV_ACTIVE(pcb);
90011f6e:	4b80      	ldr	r3, [pc, #512]	; (90012170 <tcp_input+0xab8>)
90011f70:	2201      	movs	r2, #1
90011f72:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
90011f74:	230a      	movs	r3, #10
90011f76:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
90011f78:	4b7e      	ldr	r3, [pc, #504]	; (90012174 <tcp_input+0xabc>)
90011f7a:	681a      	ldr	r2, [r3, #0]
90011f7c:	601c      	str	r4, [r3, #0]
90011f7e:	60e2      	str	r2, [r4, #12]
90011f80:	f001 fbe0 	bl	90013744 <tcp_timer_needed>
    if (err != ERR_ABRT) {
90011f84:	e65b      	b.n	90011c3e <tcp_input+0x586>
          tcp_ack_now(pcb);
90011f86:	f043 0302 	orr.w	r3, r3, #2
90011f8a:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
90011f8c:	2308      	movs	r3, #8
90011f8e:	e79a      	b.n	90011ec6 <tcp_input+0x80e>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
90011f90:	06da      	lsls	r2, r3, #27
90011f92:	f57f ae54 	bpl.w	90011c3e <tcp_input+0x586>
90011f96:	6d22      	ldr	r2, [r4, #80]	; 0x50
90011f98:	f8da 3000 	ldr.w	r3, [sl]
90011f9c:	429a      	cmp	r2, r3
90011f9e:	f47f ae4e 	bne.w	90011c3e <tcp_input+0x586>
90011fa2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
90011fa4:	2b00      	cmp	r3, #0
90011fa6:	f47f ae4a 	bne.w	90011c3e <tcp_input+0x586>
        pcb->state = FIN_WAIT_2;
90011faa:	2306      	movs	r3, #6
90011fac:	e78b      	b.n	90011ec6 <tcp_input+0x80e>
      tcp_receive(pcb);
90011fae:	4620      	mov	r0, r4
90011fb0:	f7fe ff56 	bl	90010e60 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
90011fb4:	783b      	ldrb	r3, [r7, #0]
90011fb6:	069b      	lsls	r3, r3, #26
90011fb8:	f57f ae41 	bpl.w	90011c3e <tcp_input+0x586>
        tcp_ack_now(pcb);
90011fbc:	8b63      	ldrh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
90011fbe:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
90011fc0:	f043 0302 	orr.w	r3, r3, #2
90011fc4:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
90011fc6:	f7fe f803 	bl	9000ffd0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
90011fca:	f8d8 3000 	ldr.w	r3, [r8]
90011fce:	429c      	cmp	r4, r3
90011fd0:	d0c0      	beq.n	90011f54 <tcp_input+0x89c>
90011fd2:	2b00      	cmp	r3, #0
90011fd4:	d0cb      	beq.n	90011f6e <tcp_input+0x8b6>
90011fd6:	68da      	ldr	r2, [r3, #12]
90011fd8:	4294      	cmp	r4, r2
90011fda:	d0c2      	beq.n	90011f62 <tcp_input+0x8aa>
90011fdc:	4613      	mov	r3, r2
90011fde:	e7f8      	b.n	90011fd2 <tcp_input+0x91a>
      tcp_receive(pcb);
90011fe0:	4620      	mov	r0, r4
90011fe2:	f7fe ff3d 	bl	90010e60 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
90011fe6:	9b05      	ldr	r3, [sp, #20]
90011fe8:	781b      	ldrb	r3, [r3, #0]
90011fea:	06de      	lsls	r6, r3, #27
90011fec:	f57f ae27 	bpl.w	90011c3e <tcp_input+0x586>
90011ff0:	6d22      	ldr	r2, [r4, #80]	; 0x50
90011ff2:	f8da 3000 	ldr.w	r3, [sl]
90011ff6:	429a      	cmp	r2, r3
90011ff8:	f47f ae21 	bne.w	90011c3e <tcp_input+0x586>
90011ffc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
90011ffe:	2b00      	cmp	r3, #0
90012000:	f47f ae1d 	bne.w	90011c3e <tcp_input+0x586>
        tcp_pcb_purge(pcb);
90012004:	4620      	mov	r0, r4
90012006:	f7fd ffe3 	bl	9000ffd0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
9001200a:	f8d8 3000 	ldr.w	r3, [r8]
9001200e:	429c      	cmp	r4, r3
90012010:	d0a0      	beq.n	90011f54 <tcp_input+0x89c>
90012012:	2b00      	cmp	r3, #0
90012014:	d0ab      	beq.n	90011f6e <tcp_input+0x8b6>
90012016:	68da      	ldr	r2, [r3, #12]
90012018:	4294      	cmp	r4, r2
9001201a:	d0a2      	beq.n	90011f62 <tcp_input+0x8aa>
9001201c:	4613      	mov	r3, r2
9001201e:	e7f8      	b.n	90012012 <tcp_input+0x95a>
      tcp_receive(pcb);
90012020:	4620      	mov	r0, r4
90012022:	f7fe ff1d 	bl	90010e60 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
90012026:	9b05      	ldr	r3, [sp, #20]
90012028:	781b      	ldrb	r3, [r3, #0]
9001202a:	06d8      	lsls	r0, r3, #27
9001202c:	f57f ae07 	bpl.w	90011c3e <tcp_input+0x586>
90012030:	6d22      	ldr	r2, [r4, #80]	; 0x50
90012032:	f8da 3000 	ldr.w	r3, [sl]
90012036:	429a      	cmp	r2, r3
90012038:	f47f ae01 	bne.w	90011c3e <tcp_input+0x586>
9001203c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
9001203e:	2b00      	cmp	r3, #0
90012040:	f47f adfd 	bne.w	90011c3e <tcp_input+0x586>
        recv_flags |= TF_CLOSED;
90012044:	783b      	ldrb	r3, [r7, #0]
90012046:	f043 0310 	orr.w	r3, r3, #16
9001204a:	703b      	strb	r3, [r7, #0]
    if (err != ERR_ABRT) {
9001204c:	e5f7      	b.n	90011c3e <tcp_input+0x586>
        if (recv_acked > 0) {
9001204e:	9b06      	ldr	r3, [sp, #24]
90012050:	881a      	ldrh	r2, [r3, #0]
90012052:	b12a      	cbz	r2, 90012060 <tcp_input+0x9a8>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
90012054:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
90012058:	b9f3      	cbnz	r3, 90012098 <tcp_input+0x9e0>
          recv_acked = 0;
9001205a:	2300      	movs	r3, #0
9001205c:	9a06      	ldr	r2, [sp, #24]
9001205e:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
90012060:	4620      	mov	r0, r4
90012062:	f7fe fe73 	bl	90010d4c <tcp_input_delayed_close>
90012066:	2800      	cmp	r0, #0
90012068:	f47f ac9c 	bne.w	900119a4 <tcp_input+0x2ec>
        if (recv_data != NULL) {
9001206c:	f8d9 3000 	ldr.w	r3, [r9]
90012070:	b333      	cbz	r3, 900120c0 <tcp_input+0xa08>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
90012072:	6fa3      	ldr	r3, [r4, #120]	; 0x78
90012074:	b133      	cbz	r3, 90012084 <tcp_input+0x9cc>
90012076:	4b40      	ldr	r3, [pc, #256]	; (90012178 <tcp_input+0xac0>)
90012078:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
9001207c:	493f      	ldr	r1, [pc, #252]	; (9001217c <tcp_input+0xac4>)
9001207e:	4840      	ldr	r0, [pc, #256]	; (90012180 <tcp_input+0xac8>)
90012080:	f017 fa26 	bl	900294d0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
90012084:	8b63      	ldrh	r3, [r4, #26]
90012086:	f8d9 2000 	ldr.w	r2, [r9]
9001208a:	f013 0310 	ands.w	r3, r3, #16
9001208e:	d009      	beq.n	900120a4 <tcp_input+0x9ec>
            pbuf_free(recv_data);
90012090:	4610      	mov	r0, r2
90012092:	f7fc fbbf 	bl	9000e814 <pbuf_free>
90012096:	e6c4      	b.n	90011e22 <tcp_input+0x76a>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
90012098:	4621      	mov	r1, r4
9001209a:	6920      	ldr	r0, [r4, #16]
9001209c:	4798      	blx	r3
            if (err == ERR_ABRT) {
9001209e:	300d      	adds	r0, #13
900120a0:	d1db      	bne.n	9001205a <tcp_input+0x9a2>
900120a2:	e47f      	b.n	900119a4 <tcp_input+0x2ec>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
900120a4:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
900120a8:	b1fe      	cbz	r6, 900120ea <tcp_input+0xa32>
900120aa:	4621      	mov	r1, r4
900120ac:	6920      	ldr	r0, [r4, #16]
900120ae:	47b0      	blx	r6
          if (err == ERR_ABRT) {
900120b0:	f110 0f0d 	cmn.w	r0, #13
900120b4:	f43f ac76 	beq.w	900119a4 <tcp_input+0x2ec>
          if (err != ERR_OK) {
900120b8:	b110      	cbz	r0, 900120c0 <tcp_input+0xa08>
            pcb->refused_data = recv_data;
900120ba:	f8d9 3000 	ldr.w	r3, [r9]
900120be:	67a3      	str	r3, [r4, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
900120c0:	783b      	ldrb	r3, [r7, #0]
900120c2:	069a      	lsls	r2, r3, #26
900120c4:	d505      	bpl.n	900120d2 <tcp_input+0xa1a>
          if (pcb->refused_data != NULL) {
900120c6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
900120c8:	b1ab      	cbz	r3, 900120f6 <tcp_input+0xa3e>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
900120ca:	7b5a      	ldrb	r2, [r3, #13]
900120cc:	f042 0220 	orr.w	r2, r2, #32
900120d0:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
900120d2:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
900120d4:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
900120d6:	602b      	str	r3, [r5, #0]
        if (tcp_input_delayed_close(pcb)) {
900120d8:	f7fe fe38 	bl	90010d4c <tcp_input_delayed_close>
900120dc:	2800      	cmp	r0, #0
900120de:	f47f ac61 	bne.w	900119a4 <tcp_input+0x2ec>
        tcp_output(pcb);
900120e2:	4620      	mov	r0, r4
900120e4:	f000 ff3a 	bl	90012f5c <tcp_output>
900120e8:	e45c      	b.n	900119a4 <tcp_input+0x2ec>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
900120ea:	4633      	mov	r3, r6
900120ec:	4621      	mov	r1, r4
900120ee:	4630      	mov	r0, r6
900120f0:	f7fe fa6e 	bl	900105d0 <tcp_recv_null>
900120f4:	e7dc      	b.n	900120b0 <tcp_input+0x9f8>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
900120f6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
900120f8:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
900120fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
              pcb->rcv_wnd++;
90012100:	bf1c      	itt	ne
90012102:	3301      	addne	r3, #1
90012104:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
90012106:	2e00      	cmp	r6, #0
90012108:	d0e3      	beq.n	900120d2 <tcp_input+0xa1a>
9001210a:	2300      	movs	r3, #0
9001210c:	4621      	mov	r1, r4
9001210e:	6920      	ldr	r0, [r4, #16]
90012110:	461a      	mov	r2, r3
90012112:	47b0      	blx	r6
            if (err == ERR_ABRT) {
90012114:	300d      	adds	r0, #13
90012116:	d1dc      	bne.n	900120d2 <tcp_input+0xa1a>
90012118:	e444      	b.n	900119a4 <tcp_input+0x2ec>
      if (prev != NULL) {
9001211a:	b13c      	cbz	r4, 9001212c <tcp_input+0xa74>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
9001211c:	f8d9 300c 	ldr.w	r3, [r9, #12]
90012120:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
90012122:	4b18      	ldr	r3, [pc, #96]	; (90012184 <tcp_input+0xacc>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
90012124:	f8c9 200c 	str.w	r2, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
90012128:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
9001212c:	9b05      	ldr	r3, [sp, #20]
9001212e:	781b      	ldrb	r3, [r3, #0]
90012130:	075c      	lsls	r4, r3, #29
90012132:	f53f ab88 	bmi.w	90011846 <tcp_input+0x18e>
  if (flags & TCP_ACK) {
90012136:	f013 0410 	ands.w	r4, r3, #16
9001213a:	f43f acd2 	beq.w	90011ae2 <tcp_input+0x42a>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9001213e:	4b0a      	ldr	r3, [pc, #40]	; (90012168 <tcp_input+0xab0>)
90012140:	f8db 2000 	ldr.w	r2, [fp]
90012144:	881c      	ldrh	r4, [r3, #0]
90012146:	880b      	ldrh	r3, [r1, #0]
90012148:	4422      	add	r2, r4
9001214a:	e9cd 0301 	strd	r0, r3, [sp, #4]
9001214e:	4b07      	ldr	r3, [pc, #28]	; (9001216c <tcp_input+0xab4>)
90012150:	9300      	str	r3, [sp, #0]
90012152:	3304      	adds	r3, #4
90012154:	f8da 1000 	ldr.w	r1, [sl]
90012158:	4648      	mov	r0, r9
9001215a:	e473      	b.n	90011a44 <tcp_input+0x38c>
      if (prev != NULL) {
9001215c:	9b06      	ldr	r3, [sp, #24]
9001215e:	2b00      	cmp	r3, #0
90012160:	f47f abdc 	bne.w	9001191c <tcp_input+0x264>
90012164:	f7ff bbec 	b.w	90011940 <tcp_input+0x288>
90012168:	20026cb6 	.word	0x20026cb6
9001216c:	20027368 	.word	0x20027368
90012170:	2002cb68 	.word	0x2002cb68
90012174:	2002cb7c 	.word	0x2002cb7c
90012178:	9002d59b 	.word	0x9002d59b
9001217c:	9002d974 	.word	0x9002d974
90012180:	9002a254 	.word	0x9002a254
90012184:	2002cb74 	.word	0x2002cb74

90012188 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
90012188:	4a02      	ldr	r2, [pc, #8]	; (90012194 <tcp_trigger_input_pcb_close+0xc>)
9001218a:	7813      	ldrb	r3, [r2, #0]
9001218c:	f043 0310 	orr.w	r3, r3, #16
90012190:	7013      	strb	r3, [r2, #0]
}
90012192:	4770      	bx	lr
90012194:	20026c9c 	.word	0x20026c9c

90012198 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
90012198:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
9001219a:	4604      	mov	r4, r0
9001219c:	b930      	cbnz	r0, 900121ac <tcp_output_segment_busy+0x14>
9001219e:	4b06      	ldr	r3, [pc, #24]	; (900121b8 <tcp_output_segment_busy+0x20>)
900121a0:	f240 529a 	movw	r2, #1434	; 0x59a
900121a4:	4905      	ldr	r1, [pc, #20]	; (900121bc <tcp_output_segment_busy+0x24>)
900121a6:	4806      	ldr	r0, [pc, #24]	; (900121c0 <tcp_output_segment_busy+0x28>)
900121a8:	f017 f992 	bl	900294d0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
900121ac:	6863      	ldr	r3, [r4, #4]
900121ae:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
900121b0:	3801      	subs	r0, #1
900121b2:	bf18      	it	ne
900121b4:	2001      	movne	r0, #1
900121b6:	bd10      	pop	{r4, pc}
900121b8:	9002d98e 	.word	0x9002d98e
900121bc:	9002d9f1 	.word	0x9002d9f1
900121c0:	9002a254 	.word	0x9002a254

900121c4 <tcp_pbuf_prealloc>:
{
900121c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
900121c8:	9d08      	ldr	r5, [sp, #32]
900121ca:	4680      	mov	r8, r0
900121cc:	460c      	mov	r4, r1
900121ce:	4617      	mov	r7, r2
900121d0:	461e      	mov	r6, r3
900121d2:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
900121d6:	b92d      	cbnz	r5, 900121e4 <tcp_pbuf_prealloc+0x20>
900121d8:	4b1c      	ldr	r3, [pc, #112]	; (9001224c <tcp_pbuf_prealloc+0x88>)
900121da:	22e9      	movs	r2, #233	; 0xe9
900121dc:	491c      	ldr	r1, [pc, #112]	; (90012250 <tcp_pbuf_prealloc+0x8c>)
900121de:	481d      	ldr	r0, [pc, #116]	; (90012254 <tcp_pbuf_prealloc+0x90>)
900121e0:	f017 f976 	bl	900294d0 <iprintf>
  if (length < max_length) {
900121e4:	42bc      	cmp	r4, r7
900121e6:	d22e      	bcs.n	90012246 <tcp_pbuf_prealloc+0x82>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
900121e8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
900121ec:	079a      	lsls	r2, r3, #30
900121ee:	d409      	bmi.n	90012204 <tcp_pbuf_prealloc+0x40>
900121f0:	8b6b      	ldrh	r3, [r5, #26]
900121f2:	065b      	lsls	r3, r3, #25
900121f4:	d427      	bmi.n	90012246 <tcp_pbuf_prealloc+0x82>
        (!(pcb->flags & TF_NODELAY) &&
900121f6:	f1b9 0f00 	cmp.w	r9, #0
900121fa:	d003      	beq.n	90012204 <tcp_pbuf_prealloc+0x40>
         (!first_seg ||
900121fc:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
900121fe:	b90b      	cbnz	r3, 90012204 <tcp_pbuf_prealloc+0x40>
          pcb->unsent != NULL ||
90012200:	6f2b      	ldr	r3, [r5, #112]	; 0x70
90012202:	b303      	cbz	r3, 90012246 <tcp_pbuf_prealloc+0x82>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
90012204:	f204 15cf 	addw	r5, r4, #463	; 0x1cf
90012208:	f025 0103 	bic.w	r1, r5, #3
9001220c:	42b9      	cmp	r1, r7
9001220e:	460a      	mov	r2, r1
90012210:	bf28      	it	cs
90012212:	463a      	movcs	r2, r7
90012214:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
90012216:	f44f 7220 	mov.w	r2, #640	; 0x280
9001221a:	4640      	mov	r0, r8
9001221c:	f7fc fb62 	bl	9000e8e4 <pbuf_alloc>
  if (p == NULL) {
90012220:	4605      	mov	r5, r0
90012222:	b168      	cbz	r0, 90012240 <tcp_pbuf_prealloc+0x7c>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
90012224:	6803      	ldr	r3, [r0, #0]
90012226:	b133      	cbz	r3, 90012236 <tcp_pbuf_prealloc+0x72>
90012228:	4b08      	ldr	r3, [pc, #32]	; (9001224c <tcp_pbuf_prealloc+0x88>)
9001222a:	f240 120b 	movw	r2, #267	; 0x10b
9001222e:	490a      	ldr	r1, [pc, #40]	; (90012258 <tcp_pbuf_prealloc+0x94>)
90012230:	4808      	ldr	r0, [pc, #32]	; (90012254 <tcp_pbuf_prealloc+0x90>)
90012232:	f017 f94d 	bl	900294d0 <iprintf>
  *oversize = p->len - length;
90012236:	896b      	ldrh	r3, [r5, #10]
90012238:	1b1b      	subs	r3, r3, r4
9001223a:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
9001223c:	812c      	strh	r4, [r5, #8]
9001223e:	816c      	strh	r4, [r5, #10]
}
90012240:	4628      	mov	r0, r5
90012242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90012246:	4621      	mov	r1, r4
90012248:	e7e5      	b.n	90012216 <tcp_pbuf_prealloc+0x52>
9001224a:	bf00      	nop
9001224c:	9002d98e 	.word	0x9002d98e
90012250:	9002da16 	.word	0x9002da16
90012254:	9002a254 	.word	0x9002a254
90012258:	9002da35 	.word	0x9002da35

9001225c <tcp_create_segment>:
{
9001225c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90012260:	460e      	mov	r6, r1
90012262:	4690      	mov	r8, r2
90012264:	4699      	mov	r9, r3
90012266:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
9001226a:	4607      	mov	r7, r0
9001226c:	b928      	cbnz	r0, 9001227a <tcp_create_segment+0x1e>
9001226e:	4b2e      	ldr	r3, [pc, #184]	; (90012328 <tcp_create_segment+0xcc>)
90012270:	22a3      	movs	r2, #163	; 0xa3
90012272:	492e      	ldr	r1, [pc, #184]	; (9001232c <tcp_create_segment+0xd0>)
90012274:	482e      	ldr	r0, [pc, #184]	; (90012330 <tcp_create_segment+0xd4>)
90012276:	f017 f92b 	bl	900294d0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
9001227a:	b92e      	cbnz	r6, 90012288 <tcp_create_segment+0x2c>
9001227c:	4b2a      	ldr	r3, [pc, #168]	; (90012328 <tcp_create_segment+0xcc>)
9001227e:	22a4      	movs	r2, #164	; 0xa4
90012280:	492c      	ldr	r1, [pc, #176]	; (90012334 <tcp_create_segment+0xd8>)
90012282:	482b      	ldr	r0, [pc, #172]	; (90012330 <tcp_create_segment+0xd4>)
90012284:	f017 f924 	bl	900294d0 <iprintf>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
90012288:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
9001228c:	2003      	movs	r0, #3
9001228e:	f7fb ffbb 	bl	9000e208 <memp_malloc>
90012292:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
90012294:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
90012298:	b928      	cbnz	r0, 900122a6 <tcp_create_segment+0x4a>
    pbuf_free(p);
9001229a:	4630      	mov	r0, r6
9001229c:	f7fc faba 	bl	9000e814 <pbuf_free>
}
900122a0:	4620      	mov	r0, r4
900122a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
900122a6:	2300      	movs	r3, #0
  seg->flags = optflags;
900122a8:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
900122ac:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
900122b0:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
900122b4:	8933      	ldrh	r3, [r6, #8]
900122b6:	42ab      	cmp	r3, r5
900122b8:	d205      	bcs.n	900122c6 <tcp_create_segment+0x6a>
900122ba:	4b1b      	ldr	r3, [pc, #108]	; (90012328 <tcp_create_segment+0xcc>)
900122bc:	22b0      	movs	r2, #176	; 0xb0
900122be:	491e      	ldr	r1, [pc, #120]	; (90012338 <tcp_create_segment+0xdc>)
900122c0:	481b      	ldr	r0, [pc, #108]	; (90012330 <tcp_create_segment+0xd4>)
900122c2:	f017 f905 	bl	900294d0 <iprintf>
  seg->len = p->tot_len - optlen;
900122c6:	8933      	ldrh	r3, [r6, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
900122c8:	4630      	mov	r0, r6
900122ca:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
900122cc:	eba3 030a 	sub.w	r3, r3, sl
900122d0:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
900122d2:	f7fc fa67 	bl	9000e7a4 <pbuf_add_header>
900122d6:	4606      	mov	r6, r0
900122d8:	b120      	cbz	r0, 900122e4 <tcp_create_segment+0x88>
    tcp_seg_free(seg);
900122da:	4620      	mov	r0, r4
    return NULL;
900122dc:	2400      	movs	r4, #0
    tcp_seg_free(seg);
900122de:	f7fd fd85 	bl	9000fdec <tcp_seg_free>
    return NULL;
900122e2:	e7dd      	b.n	900122a0 <tcp_create_segment+0x44>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
900122e4:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
900122e6:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
900122e8:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
900122ea:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
900122ee:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
900122f0:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
900122f4:	f7f8 ff06 	bl	9000b104 <lwip_htons>
900122f8:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
900122fc:	f8d4 a00c 	ldr.w	sl, [r4, #12]
90012300:	8b38      	ldrh	r0, [r7, #24]
90012302:	f7f8 feff 	bl	9000b104 <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
90012306:	68e7      	ldr	r7, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
90012308:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
9001230c:	4648      	mov	r0, r9
9001230e:	f7f8 fefc 	bl	9000b10a <lwip_htonl>
90012312:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
90012314:	ea48 3005 	orr.w	r0, r8, r5, lsl #12
90012318:	68e7      	ldr	r7, [r4, #12]
9001231a:	f7f8 fef3 	bl	9000b104 <lwip_htons>
  seg->tcphdr->urgp = 0;
9001231e:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
90012320:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
90012322:	749e      	strb	r6, [r3, #18]
90012324:	74de      	strb	r6, [r3, #19]
  return seg;
90012326:	e7bb      	b.n	900122a0 <tcp_create_segment+0x44>
90012328:	9002d98e 	.word	0x9002d98e
9001232c:	9002da49 	.word	0x9002da49
90012330:	9002a254 	.word	0x9002a254
90012334:	9002da69 	.word	0x9002da69
90012338:	9002da8a 	.word	0x9002da8a

9001233c <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
9001233c:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
9001233e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
90012342:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
90012344:	4606      	mov	r6, r0
90012346:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
90012348:	2022      	movs	r0, #34	; 0x22
9001234a:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
9001234e:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
90012350:	f7fc fac8 	bl	9000e8e4 <pbuf_alloc>
  if (p != NULL) {
90012354:	4605      	mov	r5, r0
90012356:	b348      	cbz	r0, 900123ac <tcp_output_alloc_header_common.constprop.0+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
90012358:	8943      	ldrh	r3, [r0, #10]
9001235a:	2b13      	cmp	r3, #19
9001235c:	d806      	bhi.n	9001236c <tcp_output_alloc_header_common.constprop.0+0x30>
9001235e:	4b15      	ldr	r3, [pc, #84]	; (900123b4 <tcp_output_alloc_header_common.constprop.0+0x78>)
90012360:	f240 7223 	movw	r2, #1827	; 0x723
90012364:	4914      	ldr	r1, [pc, #80]	; (900123b8 <tcp_output_alloc_header_common.constprop.0+0x7c>)
90012366:	4815      	ldr	r0, [pc, #84]	; (900123bc <tcp_output_alloc_header_common.constprop.0+0x80>)
90012368:	f017 f8b2 	bl	900294d0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
9001236c:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
9001236e:	4640      	mov	r0, r8
90012370:	f7f8 fec8 	bl	9000b104 <lwip_htons>
90012374:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
90012376:	f8bd 0018 	ldrh.w	r0, [sp, #24]
9001237a:	f7f8 fec3 	bl	9000b104 <lwip_htons>
    tcphdr->seqno = seqno_be;
9001237e:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
90012380:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
90012382:	4630      	mov	r0, r6
90012384:	f7f8 fec1 	bl	9000b10a <lwip_htonl>
90012388:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
9001238a:	f89d 001c 	ldrb.w	r0, [sp, #28]
9001238e:	f440 40a0 	orr.w	r0, r0, #20480	; 0x5000
90012392:	f7f8 feb7 	bl	9000b104 <lwip_htons>
90012396:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
90012398:	f8bd 0020 	ldrh.w	r0, [sp, #32]
9001239c:	f7f8 feb2 	bl	9000b104 <lwip_htons>
    tcphdr->chksum = 0;
900123a0:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
900123a2:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
900123a4:	7423      	strb	r3, [r4, #16]
900123a6:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
900123a8:	74a3      	strb	r3, [r4, #18]
900123aa:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
900123ac:	4628      	mov	r0, r5
900123ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900123b2:	bf00      	nop
900123b4:	9002d98e 	.word	0x9002d98e
900123b8:	9002da9f 	.word	0x9002da9f
900123bc:	9002a254 	.word	0x9002a254

900123c0 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
900123c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
900123c2:	460d      	mov	r5, r1
900123c4:	4616      	mov	r6, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
900123c6:	4604      	mov	r4, r0
900123c8:	b930      	cbnz	r0, 900123d8 <tcp_output_alloc_header.constprop.0+0x18>
900123ca:	4b0d      	ldr	r3, [pc, #52]	; (90012400 <tcp_output_alloc_header.constprop.0+0x40>)
900123cc:	f240 7242 	movw	r2, #1858	; 0x742
900123d0:	490c      	ldr	r1, [pc, #48]	; (90012404 <tcp_output_alloc_header.constprop.0+0x44>)
900123d2:	480d      	ldr	r0, [pc, #52]	; (90012408 <tcp_output_alloc_header.constprop.0+0x48>)
900123d4:	f017 f87c 	bl	900294d0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
900123d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
900123da:	4632      	mov	r2, r6
900123dc:	4629      	mov	r1, r5
900123de:	9302      	str	r3, [sp, #8]
900123e0:	2310      	movs	r3, #16
900123e2:	9301      	str	r3, [sp, #4]
900123e4:	8b23      	ldrh	r3, [r4, #24]
900123e6:	9300      	str	r3, [sp, #0]
900123e8:	8ae3      	ldrh	r3, [r4, #22]
900123ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
900123ec:	f7ff ffa6 	bl	9001233c <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
900123f0:	b118      	cbz	r0, 900123fa <tcp_output_alloc_header.constprop.0+0x3a>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
900123f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
900123f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
900123f6:	4413      	add	r3, r2
900123f8:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
900123fa:	b004      	add	sp, #16
900123fc:	bd70      	pop	{r4, r5, r6, pc}
900123fe:	bf00      	nop
90012400:	9002d98e 	.word	0x9002d98e
90012404:	9002dacd 	.word	0x9002dacd
90012408:	9002a254 	.word	0x9002a254

9001240c <tcp_output_fill_options.isra.0.constprop.0>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
9001240c:	b930      	cbnz	r0, 9001241c <tcp_output_fill_options.isra.0.constprop.0+0x10>
9001240e:	4b04      	ldr	r3, [pc, #16]	; (90012420 <tcp_output_fill_options.isra.0.constprop.0+0x14>)
90012410:	f240 7256 	movw	r2, #1878	; 0x756
90012414:	4903      	ldr	r1, [pc, #12]	; (90012424 <tcp_output_fill_options.isra.0.constprop.0+0x18>)
90012416:	4804      	ldr	r0, [pc, #16]	; (90012428 <tcp_output_fill_options.isra.0.constprop.0+0x1c>)
90012418:	f017 b85a 	b.w	900294d0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
9001241c:	4770      	bx	lr
9001241e:	bf00      	nop
90012420:	9002d98e 	.word	0x9002d98e
90012424:	9002daf2 	.word	0x9002daf2
90012428:	9002a254 	.word	0x9002a254

9001242c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
9001242c:	b5f0      	push	{r4, r5, r6, r7, lr}
9001242e:	4604      	mov	r4, r0
90012430:	b085      	sub	sp, #20
90012432:	4617      	mov	r7, r2
90012434:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
90012436:	460d      	mov	r5, r1
90012438:	b931      	cbnz	r1, 90012448 <tcp_output_control_segment+0x1c>
9001243a:	4b15      	ldr	r3, [pc, #84]	; (90012490 <tcp_output_control_segment+0x64>)
9001243c:	f240 7287 	movw	r2, #1927	; 0x787
90012440:	4914      	ldr	r1, [pc, #80]	; (90012494 <tcp_output_control_segment+0x68>)
90012442:	4815      	ldr	r0, [pc, #84]	; (90012498 <tcp_output_control_segment+0x6c>)
90012444:	f017 f844 	bl	900294d0 <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
90012448:	b164      	cbz	r4, 90012464 <tcp_output_control_segment+0x38>
9001244a:	7a20      	ldrb	r0, [r4, #8]
9001244c:	b150      	cbz	r0, 90012464 <tcp_output_control_segment+0x38>
    return netif_get_by_index(pcb->netif_idx);
9001244e:	f7fc f903 	bl	9000e658 <netif_get_by_index>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
90012452:	b968      	cbnz	r0, 90012470 <tcp_output_control_segment+0x44>
    err = ERR_RTE;
90012454:	f06f 0403 	mvn.w	r4, #3
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
90012458:	4628      	mov	r0, r5
9001245a:	f7fc f9db 	bl	9000e814 <pbuf_free>
  return err;
}
9001245e:	4620      	mov	r0, r4
90012460:	b005      	add	sp, #20
90012462:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ip_route(src, dst);
90012464:	4630      	mov	r0, r6
90012466:	f7fa fe7f 	bl	9000d168 <ip4_route>
  if (netif == NULL) {
9001246a:	2800      	cmp	r0, #0
9001246c:	d0f2      	beq.n	90012454 <tcp_output_control_segment+0x28>
    if (pcb != NULL) {
9001246e:	b164      	cbz	r4, 9001248a <tcp_output_control_segment+0x5e>
      ttl = pcb->ttl;
90012470:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
90012472:	7aa4      	ldrb	r4, [r4, #10]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
90012474:	2206      	movs	r2, #6
90012476:	9002      	str	r0, [sp, #8]
90012478:	4639      	mov	r1, r7
9001247a:	4628      	mov	r0, r5
9001247c:	e9cd 4200 	strd	r4, r2, [sp]
90012480:	4632      	mov	r2, r6
90012482:	f7fa ffdd 	bl	9000d440 <ip4_output_if>
90012486:	4604      	mov	r4, r0
90012488:	e7e6      	b.n	90012458 <tcp_output_control_segment+0x2c>
      ttl = TCP_TTL;
9001248a:	2380      	movs	r3, #128	; 0x80
9001248c:	e7f2      	b.n	90012474 <tcp_output_control_segment+0x48>
9001248e:	bf00      	nop
90012490:	9002d98e 	.word	0x9002d98e
90012494:	9002db18 	.word	0x9002db18
90012498:	9002a254 	.word	0x9002a254

9001249c <tcp_write>:
{
9001249c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900124a0:	ed2d 8b02 	vpush	{d8}
900124a4:	b08f      	sub	sp, #60	; 0x3c
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
900124a6:	4604      	mov	r4, r0
{
900124a8:	9308      	str	r3, [sp, #32]
  u16_t oversize = 0;
900124aa:	2300      	movs	r3, #0
{
900124ac:	9107      	str	r1, [sp, #28]
900124ae:	9204      	str	r2, [sp, #16]
  u16_t oversize = 0;
900124b0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
900124b4:	b968      	cbnz	r0, 900124d2 <tcp_write+0x36>
900124b6:	4bab      	ldr	r3, [pc, #684]	; (90012764 <tcp_write+0x2c8>)
900124b8:	f44f 72cf 	mov.w	r2, #414	; 0x19e
900124bc:	49aa      	ldr	r1, [pc, #680]	; (90012768 <tcp_write+0x2cc>)
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
900124be:	48ab      	ldr	r0, [pc, #684]	; (9001276c <tcp_write+0x2d0>)
900124c0:	f017 f806 	bl	900294d0 <iprintf>
900124c4:	f06f 000f 	mvn.w	r0, #15
}
900124c8:	b00f      	add	sp, #60	; 0x3c
900124ca:	ecbd 8b02 	vpop	{d8}
900124ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
900124d2:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
900124d6:	8e42      	ldrh	r2, [r0, #50]	; 0x32
900124d8:	085b      	lsrs	r3, r3, #1
900124da:	4293      	cmp	r3, r2
900124dc:	bf28      	it	cs
900124de:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
900124e0:	2b00      	cmp	r3, #0
900124e2:	bf08      	it	eq
900124e4:	4613      	moveq	r3, r2
900124e6:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
900124e8:	9b07      	ldr	r3, [sp, #28]
900124ea:	b923      	cbnz	r3, 900124f6 <tcp_write+0x5a>
900124ec:	4b9d      	ldr	r3, [pc, #628]	; (90012764 <tcp_write+0x2c8>)
900124ee:	f240 12ad 	movw	r2, #429	; 0x1ad
900124f2:	499f      	ldr	r1, [pc, #636]	; (90012770 <tcp_write+0x2d4>)
900124f4:	e7e3      	b.n	900124be <tcp_write+0x22>
  if ((pcb->state != ESTABLISHED) &&
900124f6:	7d03      	ldrb	r3, [r0, #20]
900124f8:	2b07      	cmp	r3, #7
900124fa:	d003      	beq.n	90012504 <tcp_write+0x68>
      (pcb->state != CLOSE_WAIT) &&
900124fc:	3b02      	subs	r3, #2
900124fe:	2b02      	cmp	r3, #2
90012500:	f200 825b 	bhi.w	900129ba <tcp_write+0x51e>
  } else if (len == 0) {
90012504:	9b04      	ldr	r3, [sp, #16]
90012506:	b1db      	cbz	r3, 90012540 <tcp_write+0xa4>
  if (len > pcb->snd_buf) {
90012508:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
9001250c:	9a04      	ldr	r2, [sp, #16]
9001250e:	4293      	cmp	r3, r2
90012510:	d206      	bcs.n	90012520 <tcp_write+0x84>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
90012512:	8b63      	ldrh	r3, [r4, #26]
90012514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90012518:	8363      	strh	r3, [r4, #26]
  return ERR_MEM;
9001251a:	f04f 30ff 	mov.w	r0, #4294967295
9001251e:	e7d3      	b.n	900124c8 <tcp_write+0x2c>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
90012520:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
90012524:	2a0f      	cmp	r2, #15
90012526:	d8f4      	bhi.n	90012512 <tcp_write+0x76>
  if (pcb->snd_queuelen != 0) {
90012528:	6f23      	ldr	r3, [r4, #112]	; 0x70
9001252a:	b302      	cbz	r2, 9001256e <tcp_write+0xd2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
9001252c:	b943      	cbnz	r3, 90012540 <tcp_write+0xa4>
9001252e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
90012530:	b933      	cbnz	r3, 90012540 <tcp_write+0xa4>
90012532:	4b8c      	ldr	r3, [pc, #560]	; (90012764 <tcp_write+0x2c8>)
90012534:	f240 1255 	movw	r2, #341	; 0x155
90012538:	498e      	ldr	r1, [pc, #568]	; (90012774 <tcp_write+0x2d8>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
9001253a:	488c      	ldr	r0, [pc, #560]	; (9001276c <tcp_write+0x2d0>)
9001253c:	f016 ffc8 	bl	900294d0 <iprintf>
  queuelen = pcb->snd_queuelen;
90012540:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
  if (pcb->unsent != NULL) {
90012544:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  queuelen = pcb->snd_queuelen;
90012546:	9305      	str	r3, [sp, #20]
  if (pcb->unsent != NULL) {
90012548:	b9de      	cbnz	r6, 90012582 <tcp_write+0xe6>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
9001254a:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
9001254e:	2f00      	cmp	r7, #0
90012550:	f000 81bc 	beq.w	900128cc <tcp_write+0x430>
90012554:	4b83      	ldr	r3, [pc, #524]	; (90012764 <tcp_write+0x2c8>)
90012556:	f240 224a 	movw	r2, #586	; 0x24a
9001255a:	4987      	ldr	r1, [pc, #540]	; (90012778 <tcp_write+0x2dc>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
9001255c:	46b0      	mov	r8, r6
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
9001255e:	4883      	ldr	r0, [pc, #524]	; (9001276c <tcp_write+0x2d0>)
  struct pbuf *concat_p = NULL;
90012560:	46b2      	mov	sl, r6
  u16_t extendlen = 0;
90012562:	46b1      	mov	r9, r6
  u16_t oversize_used = 0;
90012564:	4635      	mov	r5, r6
  u16_t pos = 0; /* position in 'arg' data */
90012566:	4637      	mov	r7, r6
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
90012568:	f016 ffb2 	bl	900294d0 <iprintf>
9001256c:	e089      	b.n	90012682 <tcp_write+0x1e6>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
9001256e:	b913      	cbnz	r3, 90012576 <tcp_write+0xda>
90012570:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
90012572:	2b00      	cmp	r3, #0
90012574:	d0e4      	beq.n	90012540 <tcp_write+0xa4>
90012576:	4b7b      	ldr	r3, [pc, #492]	; (90012764 <tcp_write+0x2c8>)
90012578:	f44f 72ac 	mov.w	r2, #344	; 0x158
9001257c:	497f      	ldr	r1, [pc, #508]	; (9001277c <tcp_write+0x2e0>)
9001257e:	e7dc      	b.n	9001253a <tcp_write+0x9e>
90012580:	4656      	mov	r6, sl
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
90012582:	f8d6 a000 	ldr.w	sl, [r6]
90012586:	46b0      	mov	r8, r6
90012588:	f1ba 0f00 	cmp.w	sl, #0
9001258c:	d1f8      	bne.n	90012580 <tcp_write+0xe4>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
9001258e:	7ab5      	ldrb	r5, [r6, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
90012590:	8933      	ldrh	r3, [r6, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
90012592:	00ad      	lsls	r5, r5, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
90012594:	9a06      	ldr	r2, [sp, #24]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
90012596:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
9001259a:	442b      	add	r3, r5
9001259c:	429a      	cmp	r2, r3
9001259e:	da06      	bge.n	900125ae <tcp_write+0x112>
900125a0:	4b70      	ldr	r3, [pc, #448]	; (90012764 <tcp_write+0x2c8>)
900125a2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
900125a6:	4976      	ldr	r1, [pc, #472]	; (90012780 <tcp_write+0x2e4>)
900125a8:	4870      	ldr	r0, [pc, #448]	; (9001276c <tcp_write+0x2d0>)
900125aa:	f016 ff91 	bl	900294d0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
900125ae:	8937      	ldrh	r7, [r6, #8]
900125b0:	9b06      	ldr	r3, [sp, #24]
900125b2:	1bdf      	subs	r7, r3, r7
900125b4:	1b7f      	subs	r7, r7, r5
    oversize = pcb->unsent_oversize;
900125b6:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
900125ba:	b2bf      	uxth	r7, r7
    oversize = pcb->unsent_oversize;
900125bc:	f8ad 5036 	strh.w	r5, [sp, #54]	; 0x36
    if (oversize > 0) {
900125c0:	2d00      	cmp	r5, #0
900125c2:	d067      	beq.n	90012694 <tcp_write+0x1f8>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
900125c4:	42bd      	cmp	r5, r7
900125c6:	d906      	bls.n	900125d6 <tcp_write+0x13a>
900125c8:	4b66      	ldr	r3, [pc, #408]	; (90012764 <tcp_write+0x2c8>)
900125ca:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
900125ce:	496d      	ldr	r1, [pc, #436]	; (90012784 <tcp_write+0x2e8>)
900125d0:	4866      	ldr	r0, [pc, #408]	; (9001276c <tcp_write+0x2d0>)
900125d2:	f016 ff7d 	bl	900294d0 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
900125d6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
900125da:	9a04      	ldr	r2, [sp, #16]
900125dc:	429a      	cmp	r2, r3
900125de:	bf28      	it	cs
900125e0:	461a      	movcs	r2, r3
900125e2:	42ba      	cmp	r2, r7
900125e4:	4615      	mov	r5, r2
900125e6:	bf28      	it	cs
900125e8:	463d      	movcs	r5, r7
      oversize -= oversize_used;
900125ea:	1b5b      	subs	r3, r3, r5
      space -= oversize_used;
900125ec:	1b7f      	subs	r7, r7, r5
      oversize -= oversize_used;
900125ee:	b29b      	uxth	r3, r3
      space -= oversize_used;
900125f0:	b2bf      	uxth	r7, r7
      oversize -= oversize_used;
900125f2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
900125f6:	b153      	cbz	r3, 9001260e <tcp_write+0x172>
900125f8:	9b04      	ldr	r3, [sp, #16]
900125fa:	42ab      	cmp	r3, r5
900125fc:	f000 816b 	beq.w	900128d6 <tcp_write+0x43a>
90012600:	4b58      	ldr	r3, [pc, #352]	; (90012764 <tcp_write+0x2c8>)
90012602:	f44f 7200 	mov.w	r2, #512	; 0x200
90012606:	4960      	ldr	r1, [pc, #384]	; (90012788 <tcp_write+0x2ec>)
90012608:	4858      	ldr	r0, [pc, #352]	; (9001276c <tcp_write+0x2d0>)
9001260a:	f016 ff61 	bl	900294d0 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
9001260e:	9b04      	ldr	r3, [sp, #16]
90012610:	429d      	cmp	r5, r3
90012612:	f080 8160 	bcs.w	900128d6 <tcp_write+0x43a>
90012616:	2f00      	cmp	r7, #0
90012618:	f000 8155 	beq.w	900128c6 <tcp_write+0x42a>
9001261c:	f8b8 9008 	ldrh.w	r9, [r8, #8]
90012620:	f1b9 0f00 	cmp.w	r9, #0
90012624:	f000 8150 	beq.w	900128c8 <tcp_write+0x42c>
      u16_t seglen = LWIP_MIN(space, len - pos);
90012628:	eba3 0905 	sub.w	r9, r3, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
9001262c:	9b08      	ldr	r3, [sp, #32]
      u16_t seglen = LWIP_MIN(space, len - pos);
9001262e:	45b9      	cmp	r9, r7
90012630:	bfa8      	it	ge
90012632:	46b9      	movge	r9, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
90012634:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
90012636:	fa1f f689 	uxth.w	r6, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
9001263a:	d52d      	bpl.n	90012698 <tcp_write+0x1fc>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
9001263c:	2301      	movs	r3, #1
9001263e:	463a      	mov	r2, r7
90012640:	4631      	mov	r1, r6
90012642:	2000      	movs	r0, #0
90012644:	9302      	str	r3, [sp, #8]
90012646:	9b08      	ldr	r3, [sp, #32]
90012648:	e9cd 4300 	strd	r4, r3, [sp]
9001264c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
90012650:	f7ff fdb8 	bl	900121c4 <tcp_pbuf_prealloc>
90012654:	4683      	mov	fp, r0
90012656:	2800      	cmp	r0, #0
90012658:	f000 81ac 	beq.w	900129b4 <tcp_write+0x518>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
9001265c:	9b07      	ldr	r3, [sp, #28]
9001265e:	4632      	mov	r2, r6
90012660:	6840      	ldr	r0, [r0, #4]
90012662:	1959      	adds	r1, r3, r5
90012664:	f016 fb6c 	bl	90028d40 <memcpy>
        queuelen += pbuf_clen(concat_p);
90012668:	4658      	mov	r0, fp
          queuelen += pbuf_clen(concat_p);
9001266a:	f7fc fa3d 	bl	9000eae8 <pbuf_clen>
9001266e:	9b05      	ldr	r3, [sp, #20]
  u16_t extendlen = 0;
90012670:	f04f 0900 	mov.w	r9, #0
          queuelen += pbuf_clen(concat_p);
90012674:	4403      	add	r3, r0
90012676:	b29b      	uxth	r3, r3
90012678:	9305      	str	r3, [sp, #20]
      pos += seglen;
9001267a:	19af      	adds	r7, r5, r6
9001267c:	46da      	mov	sl, fp
9001267e:	4646      	mov	r6, r8
90012680:	b2bf      	uxth	r7, r7
    if (apiflags & TCP_WRITE_FLAG_COPY) {
90012682:	9b08      	ldr	r3, [sp, #32]
  struct pbuf *concat_p = NULL;
90012684:	f04f 0b00 	mov.w	fp, #0
    if (apiflags & TCP_WRITE_FLAG_COPY) {
90012688:	f003 0301 	and.w	r3, r3, #1
  struct pbuf *concat_p = NULL;
9001268c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
90012690:	930a      	str	r3, [sp, #40]	; 0x28
90012692:	e0e7      	b.n	90012864 <tcp_write+0x3c8>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
90012694:	462e      	mov	r6, r5
90012696:	e7ba      	b.n	9001260e <tcp_write+0x172>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
90012698:	f8d8 b004 	ldr.w	fp, [r8, #4]
9001269c:	465a      	mov	r2, fp
9001269e:	f8db b000 	ldr.w	fp, [fp]
900126a2:	f1bb 0f00 	cmp.w	fp, #0
900126a6:	d1f9      	bne.n	9001269c <tcp_write+0x200>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
900126a8:	7b13      	ldrb	r3, [r2, #12]
900126aa:	f013 0fc0 	tst.w	r3, #192	; 0xc0
900126ae:	d10f      	bne.n	900126d0 <tcp_write+0x234>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
900126b0:	8951      	ldrh	r1, [r2, #10]
900126b2:	6853      	ldr	r3, [r2, #4]
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
900126b4:	9a07      	ldr	r2, [sp, #28]
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
900126b6:	440b      	add	r3, r1
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
900126b8:	429a      	cmp	r2, r3
900126ba:	d109      	bne.n	900126d0 <tcp_write+0x234>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
900126bc:	b135      	cbz	r5, 900126cc <tcp_write+0x230>
900126be:	4b29      	ldr	r3, [pc, #164]	; (90012764 <tcp_write+0x2c8>)
900126c0:	f240 2231 	movw	r2, #561	; 0x231
900126c4:	4931      	ldr	r1, [pc, #196]	; (9001278c <tcp_write+0x2f0>)
900126c6:	4829      	ldr	r0, [pc, #164]	; (9001276c <tcp_write+0x2d0>)
900126c8:	f016 ff02 	bl	900294d0 <iprintf>
          extendlen = seglen;
900126cc:	46b1      	mov	r9, r6
900126ce:	e7d4      	b.n	9001267a <tcp_write+0x1de>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
900126d0:	2201      	movs	r2, #1
900126d2:	4631      	mov	r1, r6
900126d4:	2000      	movs	r0, #0
900126d6:	f7fc f905 	bl	9000e8e4 <pbuf_alloc>
900126da:	4683      	mov	fp, r0
900126dc:	2800      	cmp	r0, #0
900126de:	f000 8169 	beq.w	900129b4 <tcp_write+0x518>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
900126e2:	9b07      	ldr	r3, [sp, #28]
900126e4:	442b      	add	r3, r5
900126e6:	6043      	str	r3, [r0, #4]
900126e8:	e7bf      	b.n	9001266a <tcp_write+0x1ce>
    u16_t left = len - pos;
900126ea:	9b04      	ldr	r3, [sp, #16]
    u16_t seglen = LWIP_MIN(left, max_len);
900126ec:	9a06      	ldr	r2, [sp, #24]
    u16_t left = len - pos;
900126ee:	1bdb      	subs	r3, r3, r7
    u16_t seglen = LWIP_MIN(left, max_len);
900126f0:	b29b      	uxth	r3, r3
900126f2:	4293      	cmp	r3, r2
900126f4:	bf28      	it	cs
900126f6:	4613      	movcs	r3, r2
900126f8:	b29b      	uxth	r3, r3
900126fa:	ee08 3a10 	vmov	s16, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
900126fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90012700:	2b00      	cmp	r3, #0
90012702:	d047      	beq.n	90012794 <tcp_write+0x2f8>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
90012704:	fabb f38b 	clz	r3, fp
90012708:	ee18 1a10 	vmov	r1, s16
9001270c:	2036      	movs	r0, #54	; 0x36
9001270e:	095b      	lsrs	r3, r3, #5
90012710:	9302      	str	r3, [sp, #8]
90012712:	9b08      	ldr	r3, [sp, #32]
90012714:	e9cd 4300 	strd	r4, r3, [sp]
90012718:	f10d 0336 	add.w	r3, sp, #54	; 0x36
9001271c:	f7ff fd52 	bl	900121c4 <tcp_pbuf_prealloc>
90012720:	4606      	mov	r6, r0
90012722:	2800      	cmp	r0, #0
90012724:	d057      	beq.n	900127d6 <tcp_write+0x33a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
90012726:	8943      	ldrh	r3, [r0, #10]
90012728:	ee18 2a10 	vmov	r2, s16
9001272c:	4293      	cmp	r3, r2
9001272e:	d206      	bcs.n	9001273e <tcp_write+0x2a2>
90012730:	4b0c      	ldr	r3, [pc, #48]	; (90012764 <tcp_write+0x2c8>)
90012732:	f240 2266 	movw	r2, #614	; 0x266
90012736:	4916      	ldr	r1, [pc, #88]	; (90012790 <tcp_write+0x2f4>)
90012738:	480c      	ldr	r0, [pc, #48]	; (9001276c <tcp_write+0x2d0>)
9001273a:	f016 fec9 	bl	900294d0 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
9001273e:	9b07      	ldr	r3, [sp, #28]
90012740:	ee18 2a10 	vmov	r2, s16
90012744:	6870      	ldr	r0, [r6, #4]
90012746:	19d9      	adds	r1, r3, r7
90012748:	f016 fafa 	bl	90028d40 <memcpy>
    queuelen += pbuf_clen(p);
9001274c:	4630      	mov	r0, r6
9001274e:	f7fc f9cb 	bl	9000eae8 <pbuf_clen>
90012752:	9b05      	ldr	r3, [sp, #20]
90012754:	4403      	add	r3, r0
90012756:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
90012758:	2b10      	cmp	r3, #16
    queuelen += pbuf_clen(p);
9001275a:	9305      	str	r3, [sp, #20]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
9001275c:	d964      	bls.n	90012828 <tcp_write+0x38c>
      pbuf_free(p);
9001275e:	4630      	mov	r0, r6
90012760:	e037      	b.n	900127d2 <tcp_write+0x336>
90012762:	bf00      	nop
90012764:	9002d98e 	.word	0x9002d98e
90012768:	9002db41 	.word	0x9002db41
9001276c:	9002a254 	.word	0x9002a254
90012770:	9002db58 	.word	0x9002db58
90012774:	9002db89 	.word	0x9002db89
90012778:	9002dc73 	.word	0x9002dc73
9001277c:	9002dbc3 	.word	0x9002dbc3
90012780:	9002dbf5 	.word	0x9002dbf5
90012784:	9002dc0c 	.word	0x9002dc0c
90012788:	9002dc2c 	.word	0x9002dc2c
9001278c:	9002dc4a 	.word	0x9002dc4a
90012790:	9002dca2 	.word	0x9002dca2
      LWIP_ASSERT("oversize == 0", oversize == 0);
90012794:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
90012798:	b133      	cbz	r3, 900127a8 <tcp_write+0x30c>
9001279a:	4b89      	ldr	r3, [pc, #548]	; (900129c0 <tcp_write+0x524>)
9001279c:	f240 2271 	movw	r2, #625	; 0x271
900127a0:	4988      	ldr	r1, [pc, #544]	; (900129c4 <tcp_write+0x528>)
900127a2:	4889      	ldr	r0, [pc, #548]	; (900129c8 <tcp_write+0x52c>)
900127a4:	f016 fe94 	bl	900294d0 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
900127a8:	2201      	movs	r2, #1
900127aa:	ee18 1a10 	vmov	r1, s16
900127ae:	2036      	movs	r0, #54	; 0x36
900127b0:	f7fc f898 	bl	9000e8e4 <pbuf_alloc>
900127b4:	b178      	cbz	r0, 900127d6 <tcp_write+0x33a>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
900127b6:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
900127b8:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
900127ba:	900b      	str	r0, [sp, #44]	; 0x2c
900127bc:	443a      	add	r2, r7
900127be:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
900127c0:	f44f 7220 	mov.w	r2, #640	; 0x280
900127c4:	2036      	movs	r0, #54	; 0x36
900127c6:	f7fc f88d 	bl	9000e8e4 <pbuf_alloc>
900127ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
900127cc:	4606      	mov	r6, r0
900127ce:	bb38      	cbnz	r0, 90012820 <tcp_write+0x384>
        pbuf_free(p2);
900127d0:	4618      	mov	r0, r3
      pbuf_free(p);
900127d2:	f7fc f81f 	bl	9000e814 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
900127d6:	8b63      	ldrh	r3, [r4, #26]
900127d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900127dc:	8363      	strh	r3, [r4, #26]
  if (concat_p != NULL) {
900127de:	f1ba 0f00 	cmp.w	sl, #0
900127e2:	d002      	beq.n	900127ea <tcp_write+0x34e>
    pbuf_free(concat_p);
900127e4:	4650      	mov	r0, sl
900127e6:	f7fc f815 	bl	9000e814 <pbuf_free>
  if (queue != NULL) {
900127ea:	f1bb 0f00 	cmp.w	fp, #0
900127ee:	d002      	beq.n	900127f6 <tcp_write+0x35a>
    tcp_segs_free(queue);
900127f0:	4658      	mov	r0, fp
900127f2:	f7fd fb09 	bl	9000fe08 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
900127f6:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
900127fa:	2b00      	cmp	r3, #0
900127fc:	f43f ae8d 	beq.w	9001251a <tcp_write+0x7e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
90012800:	6f23      	ldr	r3, [r4, #112]	; 0x70
90012802:	2b00      	cmp	r3, #0
90012804:	f47f ae89 	bne.w	9001251a <tcp_write+0x7e>
90012808:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
9001280a:	2b00      	cmp	r3, #0
9001280c:	f47f ae85 	bne.w	9001251a <tcp_write+0x7e>
90012810:	4b6b      	ldr	r3, [pc, #428]	; (900129c0 <tcp_write+0x524>)
90012812:	f240 3227 	movw	r2, #807	; 0x327
90012816:	496d      	ldr	r1, [pc, #436]	; (900129cc <tcp_write+0x530>)
90012818:	486b      	ldr	r0, [pc, #428]	; (900129c8 <tcp_write+0x52c>)
9001281a:	f016 fe59 	bl	900294d0 <iprintf>
9001281e:	e67c      	b.n	9001251a <tcp_write+0x7e>
      pbuf_cat(p/*header*/, p2/*data*/);
90012820:	4619      	mov	r1, r3
90012822:	f7fc f985 	bl	9000eb30 <pbuf_cat>
90012826:	e791      	b.n	9001274c <tcp_write+0x2b0>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
90012828:	6de3      	ldr	r3, [r4, #92]	; 0x5c
9001282a:	2200      	movs	r2, #0
9001282c:	4631      	mov	r1, r6
9001282e:	4620      	mov	r0, r4
90012830:	443b      	add	r3, r7
90012832:	9200      	str	r2, [sp, #0]
90012834:	f7ff fd12 	bl	9001225c <tcp_create_segment>
90012838:	4606      	mov	r6, r0
9001283a:	2800      	cmp	r0, #0
9001283c:	d0cb      	beq.n	900127d6 <tcp_write+0x33a>
    if (queue == NULL) {
9001283e:	f1bb 0f00 	cmp.w	fp, #0
90012842:	d03e      	beq.n	900128c2 <tcp_write+0x426>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
90012844:	9b09      	ldr	r3, [sp, #36]	; 0x24
90012846:	b933      	cbnz	r3, 90012856 <tcp_write+0x3ba>
90012848:	4b5d      	ldr	r3, [pc, #372]	; (900129c0 <tcp_write+0x524>)
9001284a:	f240 22ab 	movw	r2, #683	; 0x2ab
9001284e:	4960      	ldr	r1, [pc, #384]	; (900129d0 <tcp_write+0x534>)
90012850:	485d      	ldr	r0, [pc, #372]	; (900129c8 <tcp_write+0x52c>)
90012852:	f016 fe3d 	bl	900294d0 <iprintf>
      prev_seg->next = seg;
90012856:	9b09      	ldr	r3, [sp, #36]	; 0x24
90012858:	601e      	str	r6, [r3, #0]
    pos += seglen;
9001285a:	ee18 3a10 	vmov	r3, s16
9001285e:	9609      	str	r6, [sp, #36]	; 0x24
90012860:	441f      	add	r7, r3
90012862:	b2bf      	uxth	r7, r7
  while (pos < len) {
90012864:	9b04      	ldr	r3, [sp, #16]
90012866:	429f      	cmp	r7, r3
90012868:	f4ff af3f 	bcc.w	900126ea <tcp_write+0x24e>
9001286c:	4657      	mov	r7, sl
9001286e:	46da      	mov	sl, fp
  if (oversize_used > 0) {
90012870:	b14d      	cbz	r5, 90012886 <tcp_write+0x3ea>
    for (p = last_unsent->p; p; p = p->next) {
90012872:	f8d8 b004 	ldr.w	fp, [r8, #4]
90012876:	f1bb 0f00 	cmp.w	fp, #0
9001287a:	d12f      	bne.n	900128dc <tcp_write+0x440>
    last_unsent->len += oversize_used;
9001287c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
90012880:	441d      	add	r5, r3
90012882:	f8a8 5008 	strh.w	r5, [r8, #8]
  pcb->unsent_oversize = oversize;
90012886:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
9001288a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (concat_p != NULL) {
9001288e:	2f00      	cmp	r7, #0
90012890:	d03d      	beq.n	9001290e <tcp_write+0x472>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
90012892:	f1b8 0f00 	cmp.w	r8, #0
90012896:	d106      	bne.n	900128a6 <tcp_write+0x40a>
90012898:	4b49      	ldr	r3, [pc, #292]	; (900129c0 <tcp_write+0x524>)
9001289a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
9001289e:	494d      	ldr	r1, [pc, #308]	; (900129d4 <tcp_write+0x538>)
900128a0:	4849      	ldr	r0, [pc, #292]	; (900129c8 <tcp_write+0x52c>)
900128a2:	f016 fe15 	bl	900294d0 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
900128a6:	4639      	mov	r1, r7
900128a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
900128ac:	f7fc f940 	bl	9000eb30 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
900128b0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
900128b4:	893a      	ldrh	r2, [r7, #8]
900128b6:	4413      	add	r3, r2
900128b8:	f8a8 3008 	strh.w	r3, [r8, #8]
    last_unsent->next = queue;
900128bc:	f8c8 a000 	str.w	sl, [r8]
900128c0:	e04d      	b.n	9001295e <tcp_write+0x4c2>
900128c2:	4683      	mov	fp, r0
900128c4:	e7c9      	b.n	9001285a <tcp_write+0x3be>
  u16_t extendlen = 0;
900128c6:	46b9      	mov	r9, r7
900128c8:	462f      	mov	r7, r5
900128ca:	e6da      	b.n	90012682 <tcp_write+0x1e6>
900128cc:	46b9      	mov	r9, r7
  u16_t oversize_used = 0;
900128ce:	463d      	mov	r5, r7
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
900128d0:	46b8      	mov	r8, r7
  struct pbuf *concat_p = NULL;
900128d2:	46ba      	mov	sl, r7
900128d4:	e6d5      	b.n	90012682 <tcp_write+0x1e6>
900128d6:	2700      	movs	r7, #0
  u16_t extendlen = 0;
900128d8:	46b9      	mov	r9, r7
900128da:	e7c9      	b.n	90012870 <tcp_write+0x3d4>
      p->tot_len += oversize_used;
900128dc:	f8bb 3008 	ldrh.w	r3, [fp, #8]
900128e0:	442b      	add	r3, r5
900128e2:	f8ab 3008 	strh.w	r3, [fp, #8]
      if (p->next == NULL) {
900128e6:	f8db 3000 	ldr.w	r3, [fp]
900128ea:	b96b      	cbnz	r3, 90012908 <tcp_write+0x46c>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
900128ec:	f8db 3004 	ldr.w	r3, [fp, #4]
900128f0:	462a      	mov	r2, r5
900128f2:	f8bb 000a 	ldrh.w	r0, [fp, #10]
900128f6:	9907      	ldr	r1, [sp, #28]
900128f8:	4418      	add	r0, r3
900128fa:	f016 fa21 	bl	90028d40 <memcpy>
        p->len += oversize_used;
900128fe:	f8bb 300a 	ldrh.w	r3, [fp, #10]
90012902:	442b      	add	r3, r5
90012904:	f8ab 300a 	strh.w	r3, [fp, #10]
    for (p = last_unsent->p; p; p = p->next) {
90012908:	f8db b000 	ldr.w	fp, [fp]
9001290c:	e7b3      	b.n	90012876 <tcp_write+0x3da>
  } else if (extendlen > 0) {
9001290e:	f1b9 0f00 	cmp.w	r9, #0
90012912:	d01f      	beq.n	90012954 <tcp_write+0x4b8>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
90012914:	f1b8 0f00 	cmp.w	r8, #0
90012918:	d002      	beq.n	90012920 <tcp_write+0x484>
9001291a:	f8d8 3004 	ldr.w	r3, [r8, #4]
9001291e:	b933      	cbnz	r3, 9001292e <tcp_write+0x492>
90012920:	4b27      	ldr	r3, [pc, #156]	; (900129c0 <tcp_write+0x524>)
90012922:	f240 22e6 	movw	r2, #742	; 0x2e6
90012926:	492c      	ldr	r1, [pc, #176]	; (900129d8 <tcp_write+0x53c>)
90012928:	4827      	ldr	r0, [pc, #156]	; (900129c8 <tcp_write+0x52c>)
9001292a:	f016 fdd1 	bl	900294d0 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
9001292e:	f8d8 3004 	ldr.w	r3, [r8, #4]
90012932:	891a      	ldrh	r2, [r3, #8]
90012934:	6819      	ldr	r1, [r3, #0]
90012936:	444a      	add	r2, r9
90012938:	b292      	uxth	r2, r2
      p->tot_len += extendlen;
9001293a:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
9001293c:	b941      	cbnz	r1, 90012950 <tcp_write+0x4b4>
    p->len += extendlen;
9001293e:	895a      	ldrh	r2, [r3, #10]
90012940:	444a      	add	r2, r9
90012942:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
90012944:	f8b8 3008 	ldrh.w	r3, [r8, #8]
90012948:	4499      	add	r9, r3
9001294a:	f8a8 9008 	strh.w	r9, [r8, #8]
9001294e:	e7b5      	b.n	900128bc <tcp_write+0x420>
      p->tot_len += extendlen;
90012950:	460b      	mov	r3, r1
90012952:	e7ee      	b.n	90012932 <tcp_write+0x496>
  if (last_unsent == NULL) {
90012954:	f1b8 0f00 	cmp.w	r8, #0
90012958:	d1b0      	bne.n	900128bc <tcp_write+0x420>
    pcb->unsent = queue;
9001295a:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
  pcb->snd_lbb += len;
9001295e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
90012960:	9a04      	ldr	r2, [sp, #16]
90012962:	4413      	add	r3, r2
  pcb->snd_buf -= len;
90012964:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
  pcb->snd_lbb += len;
90012968:	65e3      	str	r3, [r4, #92]	; 0x5c
  pcb->snd_buf -= len;
9001296a:	9b04      	ldr	r3, [sp, #16]
9001296c:	1ad2      	subs	r2, r2, r3
  pcb->snd_queuelen = queuelen;
9001296e:	9b05      	ldr	r3, [sp, #20]
  pcb->snd_buf -= len;
90012970:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
90012974:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
90012978:	b153      	cbz	r3, 90012990 <tcp_write+0x4f4>
    LWIP_ASSERT("tcp_write: valid queue length",
9001297a:	6f23      	ldr	r3, [r4, #112]	; 0x70
9001297c:	b943      	cbnz	r3, 90012990 <tcp_write+0x4f4>
9001297e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
90012980:	b933      	cbnz	r3, 90012990 <tcp_write+0x4f4>
90012982:	4b0f      	ldr	r3, [pc, #60]	; (900129c0 <tcp_write+0x524>)
90012984:	f240 3212 	movw	r2, #786	; 0x312
90012988:	4910      	ldr	r1, [pc, #64]	; (900129cc <tcp_write+0x530>)
9001298a:	480f      	ldr	r0, [pc, #60]	; (900129c8 <tcp_write+0x52c>)
9001298c:	f016 fda0 	bl	900294d0 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
90012990:	b176      	cbz	r6, 900129b0 <tcp_write+0x514>
90012992:	68f0      	ldr	r0, [r6, #12]
90012994:	2800      	cmp	r0, #0
90012996:	f43f ad97 	beq.w	900124c8 <tcp_write+0x2c>
9001299a:	9b08      	ldr	r3, [sp, #32]
9001299c:	f013 0402 	ands.w	r4, r3, #2
900129a0:	d106      	bne.n	900129b0 <tcp_write+0x514>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
900129a2:	8985      	ldrh	r5, [r0, #12]
900129a4:	2008      	movs	r0, #8
900129a6:	f7f8 fbad 	bl	9000b104 <lwip_htons>
900129aa:	68f3      	ldr	r3, [r6, #12]
900129ac:	4328      	orrs	r0, r5
900129ae:	8198      	strh	r0, [r3, #12]
  return ERR_OK;
900129b0:	2000      	movs	r0, #0
900129b2:	e589      	b.n	900124c8 <tcp_write+0x2c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
900129b4:	f04f 0b00 	mov.w	fp, #0
900129b8:	e70d      	b.n	900127d6 <tcp_write+0x33a>
    return ERR_CONN;
900129ba:	f06f 000a 	mvn.w	r0, #10
900129be:	e583      	b.n	900124c8 <tcp_write+0x2c>
900129c0:	9002d98e 	.word	0x9002d98e
900129c4:	9002dce0 	.word	0x9002dce0
900129c8:	9002a254 	.word	0x9002a254
900129cc:	9002dd6c 	.word	0x9002dd6c
900129d0:	9002dcee 	.word	0x9002dcee
900129d4:	9002dcff 	.word	0x9002dcff
900129d8:	9002dd37 	.word	0x9002dd37

900129dc <tcp_split_unsent_seg>:
{
900129dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
900129e0:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
900129e2:	4606      	mov	r6, r0
900129e4:	b930      	cbnz	r0, 900129f4 <tcp_split_unsent_seg+0x18>
900129e6:	4b5d      	ldr	r3, [pc, #372]	; (90012b5c <tcp_split_unsent_seg+0x180>)
900129e8:	f240 324b 	movw	r2, #843	; 0x34b
900129ec:	495c      	ldr	r1, [pc, #368]	; (90012b60 <tcp_split_unsent_seg+0x184>)
900129ee:	485d      	ldr	r0, [pc, #372]	; (90012b64 <tcp_split_unsent_seg+0x188>)
900129f0:	f016 fd6e 	bl	900294d0 <iprintf>
  useg = pcb->unsent;
900129f4:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
  if (useg == NULL) {
900129f6:	b914      	cbnz	r4, 900129fe <tcp_split_unsent_seg+0x22>
  return ERR_MEM;
900129f8:	f04f 30ff 	mov.w	r0, #4294967295
900129fc:	e009      	b.n	90012a12 <tcp_split_unsent_seg+0x36>
  if (split == 0) {
900129fe:	b95d      	cbnz	r5, 90012a18 <tcp_split_unsent_seg+0x3c>
    LWIP_ASSERT("Can't split segment into length 0", 0);
90012a00:	4b56      	ldr	r3, [pc, #344]	; (90012b5c <tcp_split_unsent_seg+0x180>)
90012a02:	f240 3253 	movw	r2, #851	; 0x353
90012a06:	4958      	ldr	r1, [pc, #352]	; (90012b68 <tcp_split_unsent_seg+0x18c>)
90012a08:	4856      	ldr	r0, [pc, #344]	; (90012b64 <tcp_split_unsent_seg+0x188>)
90012a0a:	f016 fd61 	bl	900294d0 <iprintf>
    return ERR_VAL;
90012a0e:	f06f 0005 	mvn.w	r0, #5
}
90012a12:	b003      	add	sp, #12
90012a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
90012a18:	8923      	ldrh	r3, [r4, #8]
90012a1a:	42ab      	cmp	r3, r5
90012a1c:	d801      	bhi.n	90012a22 <tcp_split_unsent_seg+0x46>
    return ERR_OK;
90012a1e:	2000      	movs	r0, #0
90012a20:	e7f7      	b.n	90012a12 <tcp_split_unsent_seg+0x36>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
90012a22:	8e73      	ldrh	r3, [r6, #50]	; 0x32
90012a24:	42ab      	cmp	r3, r5
90012a26:	d206      	bcs.n	90012a36 <tcp_split_unsent_seg+0x5a>
90012a28:	4b4c      	ldr	r3, [pc, #304]	; (90012b5c <tcp_split_unsent_seg+0x180>)
90012a2a:	f240 325b 	movw	r2, #859	; 0x35b
90012a2e:	494f      	ldr	r1, [pc, #316]	; (90012b6c <tcp_split_unsent_seg+0x190>)
90012a30:	484c      	ldr	r0, [pc, #304]	; (90012b64 <tcp_split_unsent_seg+0x188>)
90012a32:	f016 fd4d 	bl	900294d0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
90012a36:	8923      	ldrh	r3, [r4, #8]
90012a38:	b933      	cbnz	r3, 90012a48 <tcp_split_unsent_seg+0x6c>
90012a3a:	4b48      	ldr	r3, [pc, #288]	; (90012b5c <tcp_split_unsent_seg+0x180>)
90012a3c:	f44f 7257 	mov.w	r2, #860	; 0x35c
90012a40:	494b      	ldr	r1, [pc, #300]	; (90012b70 <tcp_split_unsent_seg+0x194>)
90012a42:	4848      	ldr	r0, [pc, #288]	; (90012b64 <tcp_split_unsent_seg+0x188>)
90012a44:	f016 fd44 	bl	900294d0 <iprintf>
  optflags = useg->flags;
90012a48:	f894 b00a 	ldrb.w	fp, [r4, #10]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
90012a4c:	f44f 7220 	mov.w	r2, #640	; 0x280
  remainder = useg->len - split;
90012a50:	f8b4 a008 	ldrh.w	sl, [r4, #8]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
90012a54:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
90012a56:	ea4f 078b 	mov.w	r7, fp, lsl #2
  remainder = useg->len - split;
90012a5a:	ebaa 0105 	sub.w	r1, sl, r5
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
90012a5e:	f007 0704 	and.w	r7, r7, #4
  remainder = useg->len - split;
90012a62:	fa1f f881 	uxth.w	r8, r1
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
90012a66:	fa17 f181 	uxtah	r1, r7, r1
90012a6a:	b289      	uxth	r1, r1
90012a6c:	f7fb ff3a 	bl	9000e8e4 <pbuf_alloc>
  if (p == NULL) {
90012a70:	4681      	mov	r9, r0
90012a72:	2800      	cmp	r0, #0
90012a74:	d0c0      	beq.n	900129f8 <tcp_split_unsent_seg+0x1c>
  offset = useg->p->tot_len - useg->len + split;
90012a76:	6860      	ldr	r0, [r4, #4]
90012a78:	8922      	ldrh	r2, [r4, #8]
90012a7a:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
90012a7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
  offset = useg->p->tot_len - useg->len + split;
90012a80:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
90012a82:	4642      	mov	r2, r8
90012a84:	4439      	add	r1, r7
  offset = useg->p->tot_len - useg->len + split;
90012a86:	442b      	add	r3, r5
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
90012a88:	b29b      	uxth	r3, r3
90012a8a:	f7fc f917 	bl	9000ecbc <pbuf_copy_partial>
90012a8e:	4540      	cmp	r0, r8
90012a90:	d160      	bne.n	90012b54 <tcp_split_unsent_seg+0x178>
  split_flags = TCPH_FLAGS(useg->tcphdr);
90012a92:	68e3      	ldr	r3, [r4, #12]
90012a94:	8998      	ldrh	r0, [r3, #12]
90012a96:	f7f8 fb35 	bl	9000b104 <lwip_htons>
  if (split_flags & TCP_PSH) {
90012a9a:	f010 0808 	ands.w	r8, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
90012a9e:	b2c7      	uxtb	r7, r0
    remainder_flags |= TCP_PSH;
90012aa0:	bf16      	itet	ne
90012aa2:	f04f 0808 	movne.w	r8, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
90012aa6:	f007 073f 	andeq.w	r7, r7, #63	; 0x3f
    split_flags &= ~TCP_PSH;
90012aaa:	f007 0737 	andne.w	r7, r7, #55	; 0x37
  if (split_flags & TCP_FIN) {
90012aae:	07fb      	lsls	r3, r7, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
90012ab0:	68e3      	ldr	r3, [r4, #12]
    remainder_flags |= TCP_FIN;
90012ab2:	bf48      	it	mi
90012ab4:	f048 0801 	orrmi.w	r8, r8, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
90012ab8:	6858      	ldr	r0, [r3, #4]
    split_flags &= ~TCP_FIN;
90012aba:	bf48      	it	mi
90012abc:	f007 07fe 	andmi.w	r7, r7, #254	; 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
90012ac0:	f7f8 fb23 	bl	9000b10a <lwip_htonl>
90012ac4:	4642      	mov	r2, r8
90012ac6:	182b      	adds	r3, r5, r0
90012ac8:	4649      	mov	r1, r9
90012aca:	4630      	mov	r0, r6
90012acc:	f8cd b000 	str.w	fp, [sp]
90012ad0:	f7ff fbc4 	bl	9001225c <tcp_create_segment>
  if (seg == NULL) {
90012ad4:	4680      	mov	r8, r0
90012ad6:	2800      	cmp	r0, #0
90012ad8:	d03c      	beq.n	90012b54 <tcp_split_unsent_seg+0x178>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
90012ada:	6860      	ldr	r0, [r4, #4]
90012adc:	eba5 050a 	sub.w	r5, r5, sl
90012ae0:	f7fc f802 	bl	9000eae8 <pbuf_clen>
90012ae4:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
90012ae8:	fa1f f985 	uxth.w	r9, r5
90012aec:	1a18      	subs	r0, r3, r0
90012aee:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
90012af2:	6860      	ldr	r0, [r4, #4]
90012af4:	8901      	ldrh	r1, [r0, #8]
90012af6:	fa11 f185 	uxtah	r1, r1, r5
90012afa:	b289      	uxth	r1, r1
90012afc:	f7fb ff84 	bl	9000ea08 <pbuf_realloc>
  useg->len -= remainder;
90012b00:	8923      	ldrh	r3, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
90012b02:	4638      	mov	r0, r7
  useg->len -= remainder;
90012b04:	4499      	add	r9, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
90012b06:	68e3      	ldr	r3, [r4, #12]
  useg->len -= remainder;
90012b08:	f8a4 9008 	strh.w	r9, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
90012b0c:	899d      	ldrh	r5, [r3, #12]
90012b0e:	f7f8 faf9 	bl	9000b104 <lwip_htons>
90012b12:	68e3      	ldr	r3, [r4, #12]
90012b14:	4328      	orrs	r0, r5
90012b16:	8198      	strh	r0, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
90012b18:	6860      	ldr	r0, [r4, #4]
90012b1a:	f7fb ffe5 	bl	9000eae8 <pbuf_clen>
90012b1e:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
90012b22:	4418      	add	r0, r3
90012b24:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
90012b28:	f8d8 0004 	ldr.w	r0, [r8, #4]
90012b2c:	f7fb ffdc 	bl	9000eae8 <pbuf_clen>
90012b30:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
90012b34:	4418      	add	r0, r3
  seg->next = useg->next;
90012b36:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
90012b38:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  seg->next = useg->next;
90012b3c:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
90012b40:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
90012b44:	f8d8 0000 	ldr.w	r0, [r8]
90012b48:	2800      	cmp	r0, #0
90012b4a:	f47f af68 	bne.w	90012a1e <tcp_split_unsent_seg+0x42>
    pcb->unsent_oversize = 0;
90012b4e:	f8a6 0068 	strh.w	r0, [r6, #104]	; 0x68
90012b52:	e75e      	b.n	90012a12 <tcp_split_unsent_seg+0x36>
    pbuf_free(p);
90012b54:	4648      	mov	r0, r9
90012b56:	f7fb fe5d 	bl	9000e814 <pbuf_free>
90012b5a:	e74d      	b.n	900129f8 <tcp_split_unsent_seg+0x1c>
90012b5c:	9002d98e 	.word	0x9002d98e
90012b60:	9002dd8a 	.word	0x9002dd8a
90012b64:	9002a254 	.word	0x9002a254
90012b68:	9002ddac 	.word	0x9002ddac
90012b6c:	9002ddce 	.word	0x9002ddce
90012b70:	9002dddb 	.word	0x9002dddb

90012b74 <tcp_enqueue_flags>:
{
90012b74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
90012b78:	f011 0803 	ands.w	r8, r1, #3
{
90012b7c:	4604      	mov	r4, r0
90012b7e:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
90012b80:	d106      	bne.n	90012b90 <tcp_enqueue_flags+0x1c>
90012b82:	4b3e      	ldr	r3, [pc, #248]	; (90012c7c <tcp_enqueue_flags+0x108>)
90012b84:	f240 4211 	movw	r2, #1041	; 0x411
90012b88:	493d      	ldr	r1, [pc, #244]	; (90012c80 <tcp_enqueue_flags+0x10c>)
90012b8a:	483e      	ldr	r0, [pc, #248]	; (90012c84 <tcp_enqueue_flags+0x110>)
90012b8c:	f016 fca0 	bl	900294d0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
90012b90:	b934      	cbnz	r4, 90012ba0 <tcp_enqueue_flags+0x2c>
90012b92:	4b3a      	ldr	r3, [pc, #232]	; (90012c7c <tcp_enqueue_flags+0x108>)
90012b94:	f240 4213 	movw	r2, #1043	; 0x413
90012b98:	493b      	ldr	r1, [pc, #236]	; (90012c88 <tcp_enqueue_flags+0x114>)
90012b9a:	483a      	ldr	r0, [pc, #232]	; (90012c84 <tcp_enqueue_flags+0x110>)
90012b9c:	f016 fc98 	bl	900294d0 <iprintf>
  if (flags & TCP_SYN) {
90012ba0:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
90012ba4:	f44f 7220 	mov.w	r2, #640	; 0x280
90012ba8:	2036      	movs	r0, #54	; 0x36
90012baa:	ea4f 0987 	mov.w	r9, r7, lsl #2
90012bae:	4649      	mov	r1, r9
90012bb0:	f7fb fe98 	bl	9000e8e4 <pbuf_alloc>
90012bb4:	4605      	mov	r5, r0
90012bb6:	b940      	cbnz	r0, 90012bca <tcp_enqueue_flags+0x56>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
90012bb8:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
90012bba:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
90012bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90012bc2:	8363      	strh	r3, [r4, #26]
}
90012bc4:	b003      	add	sp, #12
90012bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
90012bca:	8943      	ldrh	r3, [r0, #10]
90012bcc:	454b      	cmp	r3, r9
90012bce:	d206      	bcs.n	90012bde <tcp_enqueue_flags+0x6a>
90012bd0:	4b2a      	ldr	r3, [pc, #168]	; (90012c7c <tcp_enqueue_flags+0x108>)
90012bd2:	f240 4239 	movw	r2, #1081	; 0x439
90012bd6:	492d      	ldr	r1, [pc, #180]	; (90012c8c <tcp_enqueue_flags+0x118>)
90012bd8:	482a      	ldr	r0, [pc, #168]	; (90012c84 <tcp_enqueue_flags+0x110>)
90012bda:	f016 fc79 	bl	900294d0 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
90012bde:	4629      	mov	r1, r5
90012be0:	9700      	str	r7, [sp, #0]
90012be2:	4632      	mov	r2, r6
90012be4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
90012be6:	4620      	mov	r0, r4
90012be8:	f7ff fb38 	bl	9001225c <tcp_create_segment>
90012bec:	4605      	mov	r5, r0
90012bee:	2800      	cmp	r0, #0
90012bf0:	d0e2      	beq.n	90012bb8 <tcp_enqueue_flags+0x44>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
90012bf2:	68c3      	ldr	r3, [r0, #12]
90012bf4:	079a      	lsls	r2, r3, #30
90012bf6:	d006      	beq.n	90012c06 <tcp_enqueue_flags+0x92>
90012bf8:	4b20      	ldr	r3, [pc, #128]	; (90012c7c <tcp_enqueue_flags+0x108>)
90012bfa:	f240 4242 	movw	r2, #1090	; 0x442
90012bfe:	4924      	ldr	r1, [pc, #144]	; (90012c90 <tcp_enqueue_flags+0x11c>)
90012c00:	4820      	ldr	r0, [pc, #128]	; (90012c84 <tcp_enqueue_flags+0x110>)
90012c02:	f016 fc65 	bl	900294d0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
90012c06:	892b      	ldrh	r3, [r5, #8]
90012c08:	b133      	cbz	r3, 90012c18 <tcp_enqueue_flags+0xa4>
90012c0a:	4b1c      	ldr	r3, [pc, #112]	; (90012c7c <tcp_enqueue_flags+0x108>)
90012c0c:	f240 4243 	movw	r2, #1091	; 0x443
90012c10:	4920      	ldr	r1, [pc, #128]	; (90012c94 <tcp_enqueue_flags+0x120>)
90012c12:	481c      	ldr	r0, [pc, #112]	; (90012c84 <tcp_enqueue_flags+0x110>)
90012c14:	f016 fc5c 	bl	900294d0 <iprintf>
  if (pcb->unsent == NULL) {
90012c18:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
90012c1a:	bb43      	cbnz	r3, 90012c6e <tcp_enqueue_flags+0xfa>
    pcb->unsent = seg;
90012c1c:	66e5      	str	r5, [r4, #108]	; 0x6c
  pcb->unsent_oversize = 0;
90012c1e:	2300      	movs	r3, #0
90012c20:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
90012c24:	f1b8 0f00 	cmp.w	r8, #0
90012c28:	d002      	beq.n	90012c30 <tcp_enqueue_flags+0xbc>
    pcb->snd_lbb++;
90012c2a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
90012c2c:	3301      	adds	r3, #1
90012c2e:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
90012c30:	07f3      	lsls	r3, r6, #31
  pcb->snd_queuelen += pbuf_clen(seg->p);
90012c32:	6868      	ldr	r0, [r5, #4]
    tcp_set_flags(pcb, TF_FIN);
90012c34:	bf42      	ittt	mi
90012c36:	8b63      	ldrhmi	r3, [r4, #26]
90012c38:	f043 0320 	orrmi.w	r3, r3, #32
90012c3c:	8363      	strhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
90012c3e:	f7fb ff53 	bl	9000eae8 <pbuf_clen>
90012c42:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
90012c46:	4418      	add	r0, r3
90012c48:	b280      	uxth	r0, r0
90012c4a:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
90012c4e:	2800      	cmp	r0, #0
90012c50:	d0b8      	beq.n	90012bc4 <tcp_enqueue_flags+0x50>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
90012c52:	6f20      	ldr	r0, [r4, #112]	; 0x70
90012c54:	b948      	cbnz	r0, 90012c6a <tcp_enqueue_flags+0xf6>
90012c56:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
90012c58:	2c00      	cmp	r4, #0
90012c5a:	d1b3      	bne.n	90012bc4 <tcp_enqueue_flags+0x50>
90012c5c:	4b07      	ldr	r3, [pc, #28]	; (90012c7c <tcp_enqueue_flags+0x108>)
90012c5e:	f240 4265 	movw	r2, #1125	; 0x465
90012c62:	490d      	ldr	r1, [pc, #52]	; (90012c98 <tcp_enqueue_flags+0x124>)
90012c64:	4807      	ldr	r0, [pc, #28]	; (90012c84 <tcp_enqueue_flags+0x110>)
90012c66:	f016 fc33 	bl	900294d0 <iprintf>
  return ERR_OK;
90012c6a:	2000      	movs	r0, #0
90012c6c:	e7aa      	b.n	90012bc4 <tcp_enqueue_flags+0x50>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
90012c6e:	461a      	mov	r2, r3
90012c70:	681b      	ldr	r3, [r3, #0]
90012c72:	2b00      	cmp	r3, #0
90012c74:	d1fb      	bne.n	90012c6e <tcp_enqueue_flags+0xfa>
    useg->next = seg;
90012c76:	6015      	str	r5, [r2, #0]
90012c78:	e7d1      	b.n	90012c1e <tcp_enqueue_flags+0xaa>
90012c7a:	bf00      	nop
90012c7c:	9002d98e 	.word	0x9002d98e
90012c80:	9002dde9 	.word	0x9002dde9
90012c84:	9002a254 	.word	0x9002a254
90012c88:	9002de3e 	.word	0x9002de3e
90012c8c:	9002de5d 	.word	0x9002de5d
90012c90:	9002de96 	.word	0x9002de96
90012c94:	9002deae 	.word	0x9002deae
90012c98:	9002ded8 	.word	0x9002ded8

90012c9c <tcp_send_fin>:
{
90012c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
90012c9e:	4604      	mov	r4, r0
90012ca0:	b930      	cbnz	r0, 90012cb0 <tcp_send_fin+0x14>
90012ca2:	4b13      	ldr	r3, [pc, #76]	; (90012cf0 <tcp_send_fin+0x54>)
90012ca4:	f240 32eb 	movw	r2, #1003	; 0x3eb
90012ca8:	4912      	ldr	r1, [pc, #72]	; (90012cf4 <tcp_send_fin+0x58>)
90012caa:	4813      	ldr	r0, [pc, #76]	; (90012cf8 <tcp_send_fin+0x5c>)
90012cac:	f016 fc10 	bl	900294d0 <iprintf>
  if (pcb->unsent != NULL) {
90012cb0:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
90012cb2:	b14d      	cbz	r5, 90012cc8 <tcp_send_fin+0x2c>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
90012cb4:	462f      	mov	r7, r5
90012cb6:	682d      	ldr	r5, [r5, #0]
90012cb8:	2d00      	cmp	r5, #0
90012cba:	d1fb      	bne.n	90012cb4 <tcp_send_fin+0x18>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
90012cbc:	68fb      	ldr	r3, [r7, #12]
90012cbe:	8998      	ldrh	r0, [r3, #12]
90012cc0:	f7f8 fa20 	bl	9000b104 <lwip_htons>
90012cc4:	0743      	lsls	r3, r0, #29
90012cc6:	d005      	beq.n	90012cd4 <tcp_send_fin+0x38>
  return tcp_enqueue_flags(pcb, TCP_FIN);
90012cc8:	4620      	mov	r0, r4
90012cca:	2101      	movs	r1, #1
}
90012ccc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
90012cd0:	f7ff bf50 	b.w	90012b74 <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
90012cd4:	68fb      	ldr	r3, [r7, #12]
90012cd6:	2001      	movs	r0, #1
90012cd8:	899e      	ldrh	r6, [r3, #12]
90012cda:	f7f8 fa13 	bl	9000b104 <lwip_htons>
90012cde:	68fb      	ldr	r3, [r7, #12]
90012ce0:	4330      	orrs	r0, r6
90012ce2:	8198      	strh	r0, [r3, #12]
}
90012ce4:	4628      	mov	r0, r5
      tcp_set_flags(pcb, TF_FIN);
90012ce6:	8b63      	ldrh	r3, [r4, #26]
90012ce8:	f043 0320 	orr.w	r3, r3, #32
90012cec:	8363      	strh	r3, [r4, #26]
}
90012cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90012cf0:	9002d98e 	.word	0x9002d98e
90012cf4:	9002df00 	.word	0x9002df00
90012cf8:	9002a254 	.word	0x9002a254

90012cfc <tcp_rexmit_rto_prepare>:
{
90012cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
90012d00:	4604      	mov	r4, r0
90012d02:	b930      	cbnz	r0, 90012d12 <tcp_rexmit_rto_prepare+0x16>
90012d04:	4b1c      	ldr	r3, [pc, #112]	; (90012d78 <tcp_rexmit_rto_prepare+0x7c>)
90012d06:	f240 6263 	movw	r2, #1635	; 0x663
90012d0a:	491c      	ldr	r1, [pc, #112]	; (90012d7c <tcp_rexmit_rto_prepare+0x80>)
90012d0c:	481c      	ldr	r0, [pc, #112]	; (90012d80 <tcp_rexmit_rto_prepare+0x84>)
90012d0e:	f016 fbdf 	bl	900294d0 <iprintf>
  if (pcb->unacked == NULL) {
90012d12:	6f25      	ldr	r5, [r4, #112]	; 0x70
90012d14:	b945      	cbnz	r5, 90012d28 <tcp_rexmit_rto_prepare+0x2c>
    return ERR_VAL;
90012d16:	f06f 0005 	mvn.w	r0, #5
}
90012d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
90012d1e:	f7ff fa3b 	bl	90012198 <tcp_output_segment_busy>
90012d22:	2800      	cmp	r0, #0
90012d24:	d1f7      	bne.n	90012d16 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
90012d26:	682d      	ldr	r5, [r5, #0]
90012d28:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
90012d2a:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
90012d2c:	2b00      	cmp	r3, #0
90012d2e:	d1f6      	bne.n	90012d1e <tcp_rexmit_rto_prepare+0x22>
  if (tcp_output_segment_busy(seg)) {
90012d30:	f7ff fa32 	bl	90012198 <tcp_output_segment_busy>
90012d34:	4606      	mov	r6, r0
90012d36:	2800      	cmp	r0, #0
90012d38:	d1ed      	bne.n	90012d16 <tcp_rexmit_rto_prepare+0x1a>
  seg->next = pcb->unsent;
90012d3a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
90012d3c:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
90012d3e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  pcb->unacked = NULL;
90012d40:	e9c4 301b 	strd	r3, r0, [r4, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
90012d44:	8b63      	ldrh	r3, [r4, #26]
90012d46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
90012d4a:	8363      	strh	r3, [r4, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
90012d4c:	68eb      	ldr	r3, [r5, #12]
90012d4e:	6858      	ldr	r0, [r3, #4]
90012d50:	f7f8 f9db 	bl	9000b10a <lwip_htonl>
90012d54:	68eb      	ldr	r3, [r5, #12]
90012d56:	4607      	mov	r7, r0
90012d58:	f8b5 8008 	ldrh.w	r8, [r5, #8]
90012d5c:	8998      	ldrh	r0, [r3, #12]
90012d5e:	f7f8 f9d1 	bl	9000b104 <lwip_htons>
90012d62:	f010 0303 	ands.w	r3, r0, #3
90012d66:	4447      	add	r7, r8
  return ERR_OK;
90012d68:	4630      	mov	r0, r6
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
90012d6a:	bf18      	it	ne
90012d6c:	2301      	movne	r3, #1
  pcb->rttest = 0;
90012d6e:	6366      	str	r6, [r4, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
90012d70:	443b      	add	r3, r7
90012d72:	64e3      	str	r3, [r4, #76]	; 0x4c
  return ERR_OK;
90012d74:	e7d1      	b.n	90012d1a <tcp_rexmit_rto_prepare+0x1e>
90012d76:	bf00      	nop
90012d78:	9002d98e 	.word	0x9002d98e
90012d7c:	9002df1a 	.word	0x9002df1a
90012d80:	9002a254 	.word	0x9002a254

90012d84 <tcp_rexmit>:
{
90012d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
90012d86:	4604      	mov	r4, r0
90012d88:	b930      	cbnz	r0, 90012d98 <tcp_rexmit+0x14>
90012d8a:	4b1b      	ldr	r3, [pc, #108]	; (90012df8 <tcp_rexmit+0x74>)
90012d8c:	f240 62c1 	movw	r2, #1729	; 0x6c1
90012d90:	491a      	ldr	r1, [pc, #104]	; (90012dfc <tcp_rexmit+0x78>)
90012d92:	481b      	ldr	r0, [pc, #108]	; (90012e00 <tcp_rexmit+0x7c>)
90012d94:	f016 fb9c 	bl	900294d0 <iprintf>
  if (pcb->unacked == NULL) {
90012d98:	6f25      	ldr	r5, [r4, #112]	; 0x70
90012d9a:	b915      	cbnz	r5, 90012da2 <tcp_rexmit+0x1e>
    return ERR_VAL;
90012d9c:	f06f 0005 	mvn.w	r0, #5
}
90012da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
90012da2:	4628      	mov	r0, r5
90012da4:	f7ff f9f8 	bl	90012198 <tcp_output_segment_busy>
90012da8:	2800      	cmp	r0, #0
90012daa:	d1f7      	bne.n	90012d9c <tcp_rexmit+0x18>
  pcb->unacked = seg->next;
90012dac:	682b      	ldr	r3, [r5, #0]
  cur_seg = &(pcb->unsent);
90012dae:	f104 066c 	add.w	r6, r4, #108	; 0x6c
  pcb->unacked = seg->next;
90012db2:	6723      	str	r3, [r4, #112]	; 0x70
  while (*cur_seg &&
90012db4:	6833      	ldr	r3, [r6, #0]
90012db6:	b983      	cbnz	r3, 90012dda <tcp_rexmit+0x56>
  seg->next = *cur_seg;
90012db8:	6833      	ldr	r3, [r6, #0]
90012dba:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
90012dbc:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
90012dbe:	682b      	ldr	r3, [r5, #0]
90012dc0:	b90b      	cbnz	r3, 90012dc6 <tcp_rexmit+0x42>
    pcb->unsent_oversize = 0;
90012dc2:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
90012dc6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  pcb->rttest = 0;
90012dca:	2000      	movs	r0, #0
  if (pcb->nrtx < 0xFF) {
90012dcc:	2bff      	cmp	r3, #255	; 0xff
  pcb->rttest = 0;
90012dce:	6360      	str	r0, [r4, #52]	; 0x34
    ++pcb->nrtx;
90012dd0:	bf1c      	itt	ne
90012dd2:	3301      	addne	r3, #1
90012dd4:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  return ERR_OK;
90012dd8:	e7e2      	b.n	90012da0 <tcp_rexmit+0x1c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
90012dda:	68db      	ldr	r3, [r3, #12]
90012ddc:	6858      	ldr	r0, [r3, #4]
90012dde:	f7f8 f994 	bl	9000b10a <lwip_htonl>
90012de2:	68eb      	ldr	r3, [r5, #12]
90012de4:	4607      	mov	r7, r0
90012de6:	6858      	ldr	r0, [r3, #4]
90012de8:	f7f8 f98f 	bl	9000b10a <lwip_htonl>
90012dec:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
90012dee:	2800      	cmp	r0, #0
90012df0:	dae2      	bge.n	90012db8 <tcp_rexmit+0x34>
    cur_seg = &((*cur_seg)->next );
90012df2:	6836      	ldr	r6, [r6, #0]
90012df4:	e7de      	b.n	90012db4 <tcp_rexmit+0x30>
90012df6:	bf00      	nop
90012df8:	9002d98e 	.word	0x9002d98e
90012dfc:	9002df3e 	.word	0x9002df3e
90012e00:	9002a254 	.word	0x9002a254

90012e04 <tcp_rexmit_fast>:
{
90012e04:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
90012e06:	4604      	mov	r4, r0
90012e08:	b930      	cbnz	r0, 90012e18 <tcp_rexmit_fast+0x14>
90012e0a:	4b15      	ldr	r3, [pc, #84]	; (90012e60 <tcp_rexmit_fast+0x5c>)
90012e0c:	f240 62f9 	movw	r2, #1785	; 0x6f9
90012e10:	4914      	ldr	r1, [pc, #80]	; (90012e64 <tcp_rexmit_fast+0x60>)
90012e12:	4815      	ldr	r0, [pc, #84]	; (90012e68 <tcp_rexmit_fast+0x64>)
90012e14:	f016 fb5c 	bl	900294d0 <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
90012e18:	6f23      	ldr	r3, [r4, #112]	; 0x70
90012e1a:	b1fb      	cbz	r3, 90012e5c <tcp_rexmit_fast+0x58>
90012e1c:	8b63      	ldrh	r3, [r4, #26]
90012e1e:	075b      	lsls	r3, r3, #29
90012e20:	d41c      	bmi.n	90012e5c <tcp_rexmit_fast+0x58>
    if (tcp_rexmit(pcb) == ERR_OK) {
90012e22:	4620      	mov	r0, r4
90012e24:	f7ff ffae 	bl	90012d84 <tcp_rexmit>
90012e28:	b9c0      	cbnz	r0, 90012e5c <tcp_rexmit_fast+0x58>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
90012e2a:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
90012e2e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      pcb->rtime = 0;
90012e32:	8620      	strh	r0, [r4, #48]	; 0x30
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
90012e34:	4299      	cmp	r1, r3
90012e36:	bf28      	it	cs
90012e38:	4619      	movcs	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
90012e3a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
90012e3c:	005d      	lsls	r5, r3, #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
90012e3e:	104a      	asrs	r2, r1, #1
        pcb->ssthresh = 2 * pcb->mss;
90012e40:	ebb5 0f51 	cmp.w	r5, r1, lsr #1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
90012e44:	442b      	add	r3, r5
        pcb->ssthresh = 2 * pcb->mss;
90012e46:	bf88      	it	hi
90012e48:	462a      	movhi	r2, r5
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
90012e4a:	4413      	add	r3, r2
        pcb->ssthresh = 2 * pcb->mss;
90012e4c:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
90012e50:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
90012e54:	8b63      	ldrh	r3, [r4, #26]
90012e56:	f043 0304 	orr.w	r3, r3, #4
90012e5a:	8363      	strh	r3, [r4, #26]
}
90012e5c:	bd38      	pop	{r3, r4, r5, pc}
90012e5e:	bf00      	nop
90012e60:	9002d98e 	.word	0x9002d98e
90012e64:	9002df56 	.word	0x9002df56
90012e68:	9002a254 	.word	0x9002a254

90012e6c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
90012e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
90012e70:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
90012e74:	4606      	mov	r6, r0
90012e76:	460f      	mov	r7, r1
90012e78:	4614      	mov	r4, r2
90012e7a:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
90012e7e:	461d      	mov	r5, r3
{
90012e80:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
90012e84:	b933      	cbnz	r3, 90012e94 <tcp_rst+0x28>
90012e86:	4b18      	ldr	r3, [pc, #96]	; (90012ee8 <tcp_rst+0x7c>)
90012e88:	f240 72c4 	movw	r2, #1988	; 0x7c4
90012e8c:	4917      	ldr	r1, [pc, #92]	; (90012eec <tcp_rst+0x80>)
90012e8e:	4818      	ldr	r0, [pc, #96]	; (90012ef0 <tcp_rst+0x84>)
90012e90:	f016 fb1e 	bl	900294d0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
90012e94:	f1b8 0f00 	cmp.w	r8, #0
90012e98:	d106      	bne.n	90012ea8 <tcp_rst+0x3c>
90012e9a:	4b13      	ldr	r3, [pc, #76]	; (90012ee8 <tcp_rst+0x7c>)
90012e9c:	f240 72c5 	movw	r2, #1989	; 0x7c5
90012ea0:	4914      	ldr	r1, [pc, #80]	; (90012ef4 <tcp_rst+0x88>)
90012ea2:	4813      	ldr	r0, [pc, #76]	; (90012ef0 <tcp_rst+0x84>)
90012ea4:	f016 fb14 	bl	900294d0 <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
90012ea8:	4638      	mov	r0, r7
90012eaa:	f7f8 f92e 	bl	9000b10a <lwip_htonl>
90012eae:	2314      	movs	r3, #20
90012eb0:	2108      	movs	r1, #8
90012eb2:	4602      	mov	r2, r0
90012eb4:	f8cd a000 	str.w	sl, [sp]
90012eb8:	4620      	mov	r0, r4
90012eba:	e9cd 3101 	strd	r3, r1, [sp, #4]
90012ebe:	464b      	mov	r3, r9
90012ec0:	2100      	movs	r1, #0
90012ec2:	f7ff fa3b 	bl	9001233c <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
90012ec6:	4604      	mov	r4, r0
90012ec8:	b150      	cbz	r0, 90012ee0 <tcp_rst+0x74>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
90012eca:	f7ff fa9f 	bl	9001240c <tcp_output_fill_options.isra.0.constprop.0>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
90012ece:	4643      	mov	r3, r8
90012ed0:	462a      	mov	r2, r5
90012ed2:	4621      	mov	r1, r4
90012ed4:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
90012ed6:	b004      	add	sp, #16
90012ed8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
90012edc:	f7ff baa6 	b.w	9001242c <tcp_output_control_segment>
}
90012ee0:	b004      	add	sp, #16
90012ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90012ee6:	bf00      	nop
90012ee8:	9002d98e 	.word	0x9002d98e
90012eec:	9002df73 	.word	0x9002df73
90012ef0:	9002a254 	.word	0x9002a254
90012ef4:	9002df8d 	.word	0x9002df8d

90012ef8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
90012ef8:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
90012efa:	4604      	mov	r4, r0
90012efc:	b930      	cbnz	r0, 90012f0c <tcp_send_empty_ack+0x14>
90012efe:	4b14      	ldr	r3, [pc, #80]	; (90012f50 <tcp_send_empty_ack+0x58>)
90012f00:	f240 72ea 	movw	r2, #2026	; 0x7ea
90012f04:	4913      	ldr	r1, [pc, #76]	; (90012f54 <tcp_send_empty_ack+0x5c>)
90012f06:	4814      	ldr	r0, [pc, #80]	; (90012f58 <tcp_send_empty_ack+0x60>)
90012f08:	f016 fae2 	bl	900294d0 <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
90012f0c:	6d20      	ldr	r0, [r4, #80]	; 0x50
90012f0e:	f7f8 f8fc 	bl	9000b10a <lwip_htonl>
90012f12:	2100      	movs	r1, #0
90012f14:	4602      	mov	r2, r0
90012f16:	4620      	mov	r0, r4
90012f18:	f7ff fa52 	bl	900123c0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
90012f1c:	4605      	mov	r5, r0
90012f1e:	b930      	cbnz	r0, 90012f2e <tcp_send_empty_ack+0x36>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
90012f20:	8b63      	ldrh	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
90012f22:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
90012f26:	f043 0303 	orr.w	r3, r3, #3
90012f2a:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
90012f2c:	bd38      	pop	{r3, r4, r5, pc}
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
90012f2e:	f7ff fa6d 	bl	9001240c <tcp_output_fill_options.isra.0.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
90012f32:	1d23      	adds	r3, r4, #4
90012f34:	4622      	mov	r2, r4
90012f36:	4629      	mov	r1, r5
90012f38:	4620      	mov	r0, r4
90012f3a:	f7ff fa77 	bl	9001242c <tcp_output_control_segment>
  if (err != ERR_OK) {
90012f3e:	8b63      	ldrh	r3, [r4, #26]
90012f40:	b118      	cbz	r0, 90012f4a <tcp_send_empty_ack+0x52>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
90012f42:	f043 0303 	orr.w	r3, r3, #3
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
90012f46:	8363      	strh	r3, [r4, #26]
90012f48:	e7f0      	b.n	90012f2c <tcp_send_empty_ack+0x34>
90012f4a:	f023 0303 	bic.w	r3, r3, #3
90012f4e:	e7fa      	b.n	90012f46 <tcp_send_empty_ack+0x4e>
90012f50:	9002d98e 	.word	0x9002d98e
90012f54:	9002dfa8 	.word	0x9002dfa8
90012f58:	9002a254 	.word	0x9002a254

90012f5c <tcp_output>:
{
90012f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
90012f60:	4604      	mov	r4, r0
{
90012f62:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
90012f64:	b930      	cbnz	r0, 90012f74 <tcp_output+0x18>
90012f66:	4b8f      	ldr	r3, [pc, #572]	; (900131a4 <tcp_output+0x248>)
90012f68:	f240 42e1 	movw	r2, #1249	; 0x4e1
90012f6c:	498e      	ldr	r1, [pc, #568]	; (900131a8 <tcp_output+0x24c>)
90012f6e:	488f      	ldr	r0, [pc, #572]	; (900131ac <tcp_output+0x250>)
90012f70:	f016 faae 	bl	900294d0 <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
90012f74:	7d23      	ldrb	r3, [r4, #20]
90012f76:	2b01      	cmp	r3, #1
90012f78:	d106      	bne.n	90012f88 <tcp_output+0x2c>
90012f7a:	4b8a      	ldr	r3, [pc, #552]	; (900131a4 <tcp_output+0x248>)
90012f7c:	f240 42e3 	movw	r2, #1251	; 0x4e3
90012f80:	498b      	ldr	r1, [pc, #556]	; (900131b0 <tcp_output+0x254>)
90012f82:	488a      	ldr	r0, [pc, #552]	; (900131ac <tcp_output+0x250>)
90012f84:	f016 faa4 	bl	900294d0 <iprintf>
  if (tcp_input_pcb == pcb) {
90012f88:	4b8a      	ldr	r3, [pc, #552]	; (900131b4 <tcp_output+0x258>)
90012f8a:	681b      	ldr	r3, [r3, #0]
90012f8c:	42a3      	cmp	r3, r4
90012f8e:	f000 8171 	beq.w	90013274 <tcp_output+0x318>
  seg = pcb->unsent;
90012f92:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
90012f94:	b94d      	cbnz	r5, 90012faa <tcp_output+0x4e>
    if (pcb->flags & TF_ACK_NOW) {
90012f96:	8b63      	ldrh	r3, [r4, #26]
90012f98:	0798      	lsls	r0, r3, #30
90012f9a:	f140 8167 	bpl.w	9001326c <tcp_output+0x310>
      return tcp_send_empty_ack(pcb);
90012f9e:	4620      	mov	r0, r4
}
90012fa0:	b007      	add	sp, #28
90012fa2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
90012fa6:	f7ff bfa7 	b.w	90012ef8 <tcp_send_empty_ack>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
90012faa:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
90012fac:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
90012fb0:	f8b4 8048 	ldrh.w	r8, [r4, #72]	; 0x48
90012fb4:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
90012fb8:	b340      	cbz	r0, 9001300c <tcp_output+0xb0>
    return netif_get_by_index(pcb->netif_idx);
90012fba:	f7fb fb4d 	bl	9000e658 <netif_get_by_index>
    return ip_route(src, dst);
90012fbe:	4607      	mov	r7, r0
  if (netif == NULL) {
90012fc0:	2800      	cmp	r0, #0
90012fc2:	f000 8170 	beq.w	900132a6 <tcp_output+0x34a>
  if (ip_addr_isany(&pcb->local_ip)) {
90012fc6:	6823      	ldr	r3, [r4, #0]
90012fc8:	b90b      	cbnz	r3, 90012fce <tcp_output+0x72>
    ip_addr_copy(pcb->local_ip, *local_ip);
90012fca:	6843      	ldr	r3, [r0, #4]
90012fcc:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
90012fce:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
90012fd0:	45b0      	cmp	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
90012fd2:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
90012fd4:	bf28      	it	cs
90012fd6:	46b0      	movcs	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
90012fd8:	f7f8 f897 	bl	9000b10a <lwip_htonl>
90012fdc:	892b      	ldrh	r3, [r5, #8]
90012fde:	6c62      	ldr	r2, [r4, #68]	; 0x44
90012fe0:	1a9b      	subs	r3, r3, r2
90012fe2:	4418      	add	r0, r3
90012fe4:	4540      	cmp	r0, r8
90012fe6:	d915      	bls.n	90013014 <tcp_output+0xb8>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
90012fe8:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
90012fec:	4543      	cmp	r3, r8
90012fee:	d1d2      	bne.n	90012f96 <tcp_output+0x3a>
90012ff0:	6f23      	ldr	r3, [r4, #112]	; 0x70
90012ff2:	2b00      	cmp	r3, #0
90012ff4:	d1cf      	bne.n	90012f96 <tcp_output+0x3a>
90012ff6:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
90012ffa:	2b00      	cmp	r3, #0
90012ffc:	d1cb      	bne.n	90012f96 <tcp_output+0x3a>
      pcb->persist_cnt = 0;
90012ffe:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
90013002:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
90013006:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
9001300a:	e7c4      	b.n	90012f96 <tcp_output+0x3a>
    return ip_route(src, dst);
9001300c:	4648      	mov	r0, r9
9001300e:	f7fa f8ab 	bl	9000d168 <ip4_route>
90013012:	e7d4      	b.n	90012fbe <tcp_output+0x62>
  pcb->persist_backoff = 0;
90013014:	2300      	movs	r3, #0
  useg = pcb->unacked;
90013016:	6f26      	ldr	r6, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
90013018:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  if (useg != NULL) {
9001301c:	b126      	cbz	r6, 90013028 <tcp_output+0xcc>
    for (; useg->next != NULL; useg = useg->next);
9001301e:	4633      	mov	r3, r6
90013020:	6836      	ldr	r6, [r6, #0]
90013022:	2e00      	cmp	r6, #0
90013024:	d1fb      	bne.n	9001301e <tcp_output+0xc2>
90013026:	461e      	mov	r6, r3
    LWIP_ASSERT("RST not expected here!",
90013028:	f8df a178 	ldr.w	sl, [pc, #376]	; 900131a4 <tcp_output+0x248>
9001302c:	f8df b17c 	ldr.w	fp, [pc, #380]	; 900131ac <tcp_output+0x250>
90013030:	e0de      	b.n	900131f0 <tcp_output+0x294>
    if (pcb->state != SYN_SENT) {
90013032:	7d23      	ldrb	r3, [r4, #20]
90013034:	2b02      	cmp	r3, #2
90013036:	d009      	beq.n	9001304c <tcp_output+0xf0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
90013038:	68eb      	ldr	r3, [r5, #12]
9001303a:	2010      	movs	r0, #16
9001303c:	899b      	ldrh	r3, [r3, #12]
9001303e:	9304      	str	r3, [sp, #16]
90013040:	f7f8 f860 	bl	9000b104 <lwip_htons>
90013044:	9b04      	ldr	r3, [sp, #16]
90013046:	68ea      	ldr	r2, [r5, #12]
90013048:	4318      	orrs	r0, r3
9001304a:	8190      	strh	r0, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
9001304c:	4628      	mov	r0, r5
9001304e:	f7ff f8a3 	bl	90012198 <tcp_output_segment_busy>
90013052:	2800      	cmp	r0, #0
90013054:	d16f      	bne.n	90013136 <tcp_output+0x1da>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
90013056:	68eb      	ldr	r3, [r5, #12]
90013058:	6a60      	ldr	r0, [r4, #36]	; 0x24
9001305a:	9304      	str	r3, [sp, #16]
9001305c:	f7f8 f855 	bl	9000b10a <lwip_htonl>
90013060:	9b04      	ldr	r3, [sp, #16]
90013062:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
90013064:	68eb      	ldr	r3, [r5, #12]
90013066:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
90013068:	9304      	str	r3, [sp, #16]
9001306a:	f7f8 f84b 	bl	9000b104 <lwip_htons>
9001306e:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
90013070:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
90013072:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
90013074:	6a63      	ldr	r3, [r4, #36]	; 0x24
90013076:	4413      	add	r3, r2
90013078:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
9001307a:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
9001307c:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
9001307e:	07d2      	lsls	r2, r2, #31
90013080:	d449      	bmi.n	90013116 <tcp_output+0x1ba>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
90013082:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
90013086:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
9001308a:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
9001308c:	bfbc      	itt	lt
9001308e:	2300      	movlt	r3, #0
90013090:	8623      	strhlt	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
90013092:	6b63      	ldr	r3, [r4, #52]	; 0x34
90013094:	b94b      	cbnz	r3, 900130aa <tcp_output+0x14e>
    pcb->rttest = tcp_ticks;
90013096:	4948      	ldr	r1, [pc, #288]	; (900131b8 <tcp_output+0x25c>)
90013098:	68eb      	ldr	r3, [r5, #12]
9001309a:	6809      	ldr	r1, [r1, #0]
9001309c:	9204      	str	r2, [sp, #16]
9001309e:	6361      	str	r1, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
900130a0:	6858      	ldr	r0, [r3, #4]
900130a2:	f7f8 f832 	bl	9000b10a <lwip_htonl>
900130a6:	9a04      	ldr	r2, [sp, #16]
900130a8:	63a0      	str	r0, [r4, #56]	; 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
900130aa:	6869      	ldr	r1, [r5, #4]
900130ac:	68eb      	ldr	r3, [r5, #12]
900130ae:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
900130b0:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
900130b4:	1a18      	subs	r0, r3, r0
  seg->p->payload = seg->tcphdr;
900130b6:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
900130b8:	b280      	uxth	r0, r0
  seg->p->len -= len;
900130ba:	ebac 0c00 	sub.w	ip, ip, r0
900130be:	f8a1 c00a 	strh.w	ip, [r1, #10]
  seg->p->tot_len -= len;
900130c2:	f8b1 c008 	ldrh.w	ip, [r1, #8]
900130c6:	ebac 0000 	sub.w	r0, ip, r0
900130ca:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
900130cc:	2100      	movs	r1, #0
900130ce:	7419      	strb	r1, [r3, #16]
900130d0:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
900130d2:	7aa9      	ldrb	r1, [r5, #10]
900130d4:	0089      	lsls	r1, r1, #2
900130d6:	f001 0104 	and.w	r1, r1, #4
900130da:	3114      	adds	r1, #20
900130dc:	440b      	add	r3, r1
900130de:	429a      	cmp	r2, r3
900130e0:	d006      	beq.n	900130f0 <tcp_output+0x194>
900130e2:	4653      	mov	r3, sl
900130e4:	f240 621c 	movw	r2, #1564	; 0x61c
900130e8:	4934      	ldr	r1, [pc, #208]	; (900131bc <tcp_output+0x260>)
900130ea:	4658      	mov	r0, fp
900130ec:	f016 f9f0 	bl	900294d0 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
900130f0:	2306      	movs	r3, #6
900130f2:	9702      	str	r7, [sp, #8]
900130f4:	464a      	mov	r2, r9
900130f6:	4621      	mov	r1, r4
900130f8:	9301      	str	r3, [sp, #4]
900130fa:	7aa3      	ldrb	r3, [r4, #10]
900130fc:	9300      	str	r3, [sp, #0]
900130fe:	7ae3      	ldrb	r3, [r4, #11]
90013100:	6868      	ldr	r0, [r5, #4]
90013102:	f7fa f99d 	bl	9000d440 <ip4_output_if>
    if (err != ERR_OK) {
90013106:	b1b0      	cbz	r0, 90013136 <tcp_output+0x1da>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
90013108:	8b63      	ldrh	r3, [r4, #26]
9001310a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9001310e:	8363      	strh	r3, [r4, #26]
}
90013110:	b007      	add	sp, #28
90013112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
90013116:	464a      	mov	r2, r9
90013118:	4639      	mov	r1, r7
9001311a:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
9001311e:	9304      	str	r3, [sp, #16]
90013120:	f7fc ff2e 	bl	9000ff80 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
90013124:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
90013128:	f7f7 ffef 	bl	9000b10a <lwip_htonl>
9001312c:	9b04      	ldr	r3, [sp, #16]
    opts += 1;
9001312e:	f103 0218 	add.w	r2, r3, #24
    *opts = TCP_BUILD_MSS_OPTION(mss);
90013132:	6158      	str	r0, [r3, #20]
    opts += 1;
90013134:	e7a7      	b.n	90013086 <tcp_output+0x12a>
    pcb->unsent = seg->next;
90013136:	682b      	ldr	r3, [r5, #0]
90013138:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
9001313a:	7d23      	ldrb	r3, [r4, #20]
9001313c:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
9001313e:	bf1e      	ittt	ne
90013140:	8b63      	ldrhne	r3, [r4, #26]
90013142:	f023 0303 	bicne.w	r3, r3, #3
90013146:	8363      	strhne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
90013148:	68eb      	ldr	r3, [r5, #12]
9001314a:	6858      	ldr	r0, [r3, #4]
9001314c:	f7f7 ffdd 	bl	9000b10a <lwip_htonl>
90013150:	8929      	ldrh	r1, [r5, #8]
90013152:	68eb      	ldr	r3, [r5, #12]
90013154:	9104      	str	r1, [sp, #16]
90013156:	9005      	str	r0, [sp, #20]
90013158:	8998      	ldrh	r0, [r3, #12]
9001315a:	f7f7 ffd3 	bl	9000b104 <lwip_htons>
9001315e:	f010 0303 	ands.w	r3, r0, #3
90013162:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
90013166:	bf18      	it	ne
90013168:	2301      	movne	r3, #1
9001316a:	440a      	add	r2, r1
9001316c:	4413      	add	r3, r2
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
9001316e:	6d22      	ldr	r2, [r4, #80]	; 0x50
90013170:	1ad2      	subs	r2, r2, r3
90013172:	2a00      	cmp	r2, #0
    if (TCP_TCPLEN(seg) > 0) {
90013174:	68ea      	ldr	r2, [r5, #12]
      pcb->snd_nxt = snd_nxt;
90013176:	bfb8      	it	lt
90013178:	6523      	strlt	r3, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
9001317a:	892b      	ldrh	r3, [r5, #8]
9001317c:	9304      	str	r3, [sp, #16]
9001317e:	8990      	ldrh	r0, [r2, #12]
90013180:	f7f7 ffc0 	bl	9000b104 <lwip_htons>
90013184:	f010 0003 	ands.w	r0, r0, #3
90013188:	9b04      	ldr	r3, [sp, #16]
9001318a:	bf18      	it	ne
9001318c:	2001      	movne	r0, #1
9001318e:	42d8      	cmn	r0, r3
90013190:	f000 8085 	beq.w	9001329e <tcp_output+0x342>
      seg->next = NULL;
90013194:	2300      	movs	r3, #0
90013196:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
90013198:	6f23      	ldr	r3, [r4, #112]	; 0x70
9001319a:	b98b      	cbnz	r3, 900131c0 <tcp_output+0x264>
        pcb->unacked = seg;
9001319c:	6725      	str	r5, [r4, #112]	; 0x70
          useg->next = seg;
9001319e:	462e      	mov	r6, r5
900131a0:	e023      	b.n	900131ea <tcp_output+0x28e>
900131a2:	bf00      	nop
900131a4:	9002d98e 	.word	0x9002d98e
900131a8:	9002dfc8 	.word	0x9002dfc8
900131ac:	9002a254 	.word	0x9002a254
900131b0:	9002dfe0 	.word	0x9002dfe0
900131b4:	2002cb80 	.word	0x2002cb80
900131b8:	2002cb70 	.word	0x2002cb70
900131bc:	9002e01d 	.word	0x9002e01d
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
900131c0:	68eb      	ldr	r3, [r5, #12]
900131c2:	6858      	ldr	r0, [r3, #4]
900131c4:	f7f7 ffa1 	bl	9000b10a <lwip_htonl>
900131c8:	68f2      	ldr	r2, [r6, #12]
900131ca:	9004      	str	r0, [sp, #16]
900131cc:	6850      	ldr	r0, [r2, #4]
900131ce:	f7f7 ff9c 	bl	9000b10a <lwip_htonl>
900131d2:	9b04      	ldr	r3, [sp, #16]
900131d4:	1a18      	subs	r0, r3, r0
900131d6:	2800      	cmp	r0, #0
900131d8:	da5f      	bge.n	9001329a <tcp_output+0x33e>
          struct tcp_seg **cur_seg = &(pcb->unacked);
900131da:	f104 0370 	add.w	r3, r4, #112	; 0x70
          while (*cur_seg &&
900131de:	681a      	ldr	r2, [r3, #0]
900131e0:	2a00      	cmp	r2, #0
900131e2:	d149      	bne.n	90013278 <tcp_output+0x31c>
          seg->next = (*cur_seg);
900131e4:	681a      	ldr	r2, [r3, #0]
900131e6:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
900131e8:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
900131ea:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
900131ec:	2d00      	cmp	r5, #0
900131ee:	d03a      	beq.n	90013266 <tcp_output+0x30a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
900131f0:	68eb      	ldr	r3, [r5, #12]
900131f2:	6858      	ldr	r0, [r3, #4]
900131f4:	f7f7 ff89 	bl	9000b10a <lwip_htonl>
900131f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
900131fa:	1ac0      	subs	r0, r0, r3
900131fc:	892b      	ldrh	r3, [r5, #8]
900131fe:	4418      	add	r0, r3
  while (seg != NULL &&
90013200:	4540      	cmp	r0, r8
90013202:	d82e      	bhi.n	90013262 <tcp_output+0x306>
    LWIP_ASSERT("RST not expected here!",
90013204:	68eb      	ldr	r3, [r5, #12]
90013206:	8998      	ldrh	r0, [r3, #12]
90013208:	f7f7 ff7c 	bl	9000b104 <lwip_htons>
9001320c:	0741      	lsls	r1, r0, #29
9001320e:	d506      	bpl.n	9001321e <tcp_output+0x2c2>
90013210:	4653      	mov	r3, sl
90013212:	f240 5236 	movw	r2, #1334	; 0x536
90013216:	4925      	ldr	r1, [pc, #148]	; (900132ac <tcp_output+0x350>)
90013218:	4658      	mov	r0, fp
9001321a:	f016 f959 	bl	900294d0 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
9001321e:	6f23      	ldr	r3, [r4, #112]	; 0x70
90013220:	2b00      	cmp	r3, #0
90013222:	f43f af06 	beq.w	90013032 <tcp_output+0xd6>
90013226:	8b62      	ldrh	r2, [r4, #26]
90013228:	f012 0f44 	tst.w	r2, #68	; 0x44
9001322c:	f47f af01 	bne.w	90013032 <tcp_output+0xd6>
90013230:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
90013232:	b143      	cbz	r3, 90013246 <tcp_output+0x2ea>
90013234:	6819      	ldr	r1, [r3, #0]
90013236:	2900      	cmp	r1, #0
90013238:	f47f aefb 	bne.w	90013032 <tcp_output+0xd6>
9001323c:	8919      	ldrh	r1, [r3, #8]
9001323e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
90013240:	4299      	cmp	r1, r3
90013242:	f4bf aef6 	bcs.w	90013032 <tcp_output+0xd6>
90013246:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
9001324a:	2b00      	cmp	r3, #0
9001324c:	f43f aef1 	beq.w	90013032 <tcp_output+0xd6>
90013250:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
90013254:	2b0f      	cmp	r3, #15
90013256:	f63f aeec 	bhi.w	90013032 <tcp_output+0xd6>
9001325a:	f012 0fa0 	tst.w	r2, #160	; 0xa0
9001325e:	f47f aee8 	bne.w	90013032 <tcp_output+0xd6>
  if (pcb->unsent == NULL) {
90013262:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
90013264:	b913      	cbnz	r3, 9001326c <tcp_output+0x310>
    pcb->unsent_oversize = 0;
90013266:	2300      	movs	r3, #0
90013268:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
9001326c:	8b63      	ldrh	r3, [r4, #26]
9001326e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90013272:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
90013274:	2000      	movs	r0, #0
90013276:	e74b      	b.n	90013110 <tcp_output+0x1b4>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
90013278:	68d2      	ldr	r2, [r2, #12]
9001327a:	9305      	str	r3, [sp, #20]
9001327c:	6850      	ldr	r0, [r2, #4]
9001327e:	f7f7 ff44 	bl	9000b10a <lwip_htonl>
90013282:	68e9      	ldr	r1, [r5, #12]
90013284:	9004      	str	r0, [sp, #16]
90013286:	6848      	ldr	r0, [r1, #4]
90013288:	f7f7 ff3f 	bl	9000b10a <lwip_htonl>
9001328c:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
9001328e:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
90013290:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
90013292:	2800      	cmp	r0, #0
90013294:	daa6      	bge.n	900131e4 <tcp_output+0x288>
            cur_seg = &((*cur_seg)->next );
90013296:	681b      	ldr	r3, [r3, #0]
90013298:	e7a1      	b.n	900131de <tcp_output+0x282>
          useg->next = seg;
9001329a:	6035      	str	r5, [r6, #0]
9001329c:	e77f      	b.n	9001319e <tcp_output+0x242>
      tcp_seg_free(seg);
9001329e:	4628      	mov	r0, r5
900132a0:	f7fc fda4 	bl	9000fdec <tcp_seg_free>
900132a4:	e7a1      	b.n	900131ea <tcp_output+0x28e>
    return ERR_RTE;
900132a6:	f06f 0003 	mvn.w	r0, #3
900132aa:	e731      	b.n	90013110 <tcp_output+0x1b4>
900132ac:	9002e006 	.word	0x9002e006

900132b0 <tcp_rexmit_rto_commit>:
{
900132b0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
900132b2:	4604      	mov	r4, r0
900132b4:	b930      	cbnz	r0, 900132c4 <tcp_rexmit_rto_commit+0x14>
900132b6:	4b09      	ldr	r3, [pc, #36]	; (900132dc <tcp_rexmit_rto_commit+0x2c>)
900132b8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
900132bc:	4908      	ldr	r1, [pc, #32]	; (900132e0 <tcp_rexmit_rto_commit+0x30>)
900132be:	4809      	ldr	r0, [pc, #36]	; (900132e4 <tcp_rexmit_rto_commit+0x34>)
900132c0:	f016 f906 	bl	900294d0 <iprintf>
  if (pcb->nrtx < 0xFF) {
900132c4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
900132c8:	4620      	mov	r0, r4
  if (pcb->nrtx < 0xFF) {
900132ca:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
900132cc:	bf1c      	itt	ne
900132ce:	3301      	addne	r3, #1
900132d0:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
}
900132d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
900132d8:	f7ff be40 	b.w	90012f5c <tcp_output>
900132dc:	9002d98e 	.word	0x9002d98e
900132e0:	9002e030 	.word	0x9002e030
900132e4:	9002a254 	.word	0x9002a254

900132e8 <tcp_rexmit_rto>:
{
900132e8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
900132ea:	4604      	mov	r4, r0
900132ec:	b930      	cbnz	r0, 900132fc <tcp_rexmit_rto+0x14>
900132ee:	4b08      	ldr	r3, [pc, #32]	; (90013310 <tcp_rexmit_rto+0x28>)
900132f0:	f240 62ad 	movw	r2, #1709	; 0x6ad
900132f4:	4907      	ldr	r1, [pc, #28]	; (90013314 <tcp_rexmit_rto+0x2c>)
900132f6:	4808      	ldr	r0, [pc, #32]	; (90013318 <tcp_rexmit_rto+0x30>)
900132f8:	f016 f8ea 	bl	900294d0 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
900132fc:	4620      	mov	r0, r4
900132fe:	f7ff fcfd 	bl	90012cfc <tcp_rexmit_rto_prepare>
90013302:	b920      	cbnz	r0, 9001330e <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
90013304:	4620      	mov	r0, r4
}
90013306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
9001330a:	f7ff bfd1 	b.w	900132b0 <tcp_rexmit_rto_commit>
}
9001330e:	bd10      	pop	{r4, pc}
90013310:	9002d98e 	.word	0x9002d98e
90013314:	9002e053 	.word	0x9002e053
90013318:	9002a254 	.word	0x9002a254

9001331c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
9001331c:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
9001331e:	4604      	mov	r4, r0
90013320:	b930      	cbnz	r0, 90013330 <tcp_keepalive+0x14>
90013322:	4b0f      	ldr	r3, [pc, #60]	; (90013360 <tcp_keepalive+0x44>)
90013324:	f640 0224 	movw	r2, #2084	; 0x824
90013328:	490e      	ldr	r1, [pc, #56]	; (90013364 <tcp_keepalive+0x48>)
9001332a:	480f      	ldr	r0, [pc, #60]	; (90013368 <tcp_keepalive+0x4c>)
9001332c:	f016 f8d0 	bl	900294d0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
90013330:	6d20      	ldr	r0, [r4, #80]	; 0x50
90013332:	3801      	subs	r0, #1
90013334:	f7f7 fee9 	bl	9000b10a <lwip_htonl>
90013338:	2100      	movs	r1, #0
9001333a:	4602      	mov	r2, r0
9001333c:	4620      	mov	r0, r4
9001333e:	f7ff f83f 	bl	900123c0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
90013342:	4605      	mov	r5, r0
90013344:	b148      	cbz	r0, 9001335a <tcp_keepalive+0x3e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
90013346:	f7ff f861 	bl	9001240c <tcp_output_fill_options.isra.0.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
9001334a:	1d23      	adds	r3, r4, #4
9001334c:	4622      	mov	r2, r4
9001334e:	4629      	mov	r1, r5
90013350:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
90013352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
90013356:	f7ff b869 	b.w	9001242c <tcp_output_control_segment>
}
9001335a:	f04f 30ff 	mov.w	r0, #4294967295
9001335e:	bd70      	pop	{r4, r5, r6, pc}
90013360:	9002d98e 	.word	0x9002d98e
90013364:	9002e06f 	.word	0x9002e06f
90013368:	9002a254 	.word	0x9002a254

9001336c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
9001336c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
90013370:	4606      	mov	r6, r0
90013372:	b930      	cbnz	r0, 90013382 <tcp_zero_window_probe+0x16>
90013374:	4b2c      	ldr	r3, [pc, #176]	; (90013428 <tcp_zero_window_probe+0xbc>)
90013376:	f640 024f 	movw	r2, #2127	; 0x84f
9001337a:	492c      	ldr	r1, [pc, #176]	; (9001342c <tcp_zero_window_probe+0xc0>)
9001337c:	482c      	ldr	r0, [pc, #176]	; (90013430 <tcp_zero_window_probe+0xc4>)
9001337e:	f016 f8a7 	bl	900294d0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
90013382:	6ef5      	ldr	r5, [r6, #108]	; 0x6c
  if (seg == NULL) {
90013384:	2d00      	cmp	r5, #0
90013386:	d048      	beq.n	9001341a <tcp_zero_window_probe+0xae>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
90013388:	f896 309a 	ldrb.w	r3, [r6, #154]	; 0x9a
9001338c:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
9001338e:	bf1c      	itt	ne
90013390:	3301      	addne	r3, #1
90013392:	f886 309a 	strbne.w	r3, [r6, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
90013396:	68eb      	ldr	r3, [r5, #12]
90013398:	8998      	ldrh	r0, [r3, #12]
9001339a:	f7f7 feb3 	bl	9000b104 <lwip_htons>
9001339e:	f010 0401 	ands.w	r4, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
900133a2:	68eb      	ldr	r3, [r5, #12]
900133a4:	4630      	mov	r0, r6
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
900133a6:	bf18      	it	ne
900133a8:	892c      	ldrhne	r4, [r5, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
900133aa:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
900133ac:	bf1c      	itt	ne
900133ae:	fab4 f484 	clzne	r4, r4
900133b2:	0964      	lsrne	r4, r4, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
900133b4:	f084 0101 	eor.w	r1, r4, #1
900133b8:	f7ff f802 	bl	900123c0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
900133bc:	4607      	mov	r7, r0
900133be:	b378      	cbz	r0, 90013420 <tcp_zero_window_probe+0xb4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
900133c0:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
900133c4:	b1f4      	cbz	r4, 90013404 <tcp_zero_window_probe+0x98>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
900133c6:	f9b8 400c 	ldrsh.w	r4, [r8, #12]
900133ca:	2011      	movs	r0, #17
900133cc:	f7f7 fe9a 	bl	9000b104 <lwip_htons>
900133d0:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
900133d4:	4320      	orrs	r0, r4
900133d6:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
900133da:	68eb      	ldr	r3, [r5, #12]
900133dc:	6858      	ldr	r0, [r3, #4]
900133de:	f7f7 fe94 	bl	9000b10a <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
900133e2:	6d33      	ldr	r3, [r6, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
900133e4:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
900133e6:	1a1b      	subs	r3, r3, r0
900133e8:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
900133ea:	bfb8      	it	lt
900133ec:	6530      	strlt	r0, [r6, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
900133ee:	4638      	mov	r0, r7
900133f0:	f7ff f80c 	bl	9001240c <tcp_output_fill_options.isra.0.constprop.0>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
900133f4:	1d33      	adds	r3, r6, #4
900133f6:	4632      	mov	r2, r6
900133f8:	4639      	mov	r1, r7
900133fa:	4630      	mov	r0, r6

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
900133fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
90013400:	f7ff b814 	b.w	9001242c <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
90013404:	6868      	ldr	r0, [r5, #4]
90013406:	f108 0114 	add.w	r1, r8, #20
9001340a:	892a      	ldrh	r2, [r5, #8]
9001340c:	8903      	ldrh	r3, [r0, #8]
9001340e:	1a9b      	subs	r3, r3, r2
90013410:	2201      	movs	r2, #1
90013412:	b29b      	uxth	r3, r3
90013414:	f7fb fc52 	bl	9000ecbc <pbuf_copy_partial>
90013418:	e7df      	b.n	900133da <tcp_zero_window_probe+0x6e>
    return ERR_OK;
9001341a:	4628      	mov	r0, r5
}
9001341c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
90013420:	f04f 30ff 	mov.w	r0, #4294967295
90013424:	e7fa      	b.n	9001341c <tcp_zero_window_probe+0xb0>
90013426:	bf00      	nop
90013428:	9002d98e 	.word	0x9002d98e
9001342c:	9002e08a 	.word	0x9002e08a
90013430:	9002a254 	.word	0x9002a254

90013434 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
90013434:	b583      	push	{r0, r1, r7, lr}
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
90013436:	482c      	ldr	r0, [pc, #176]	; (900134e8 <tcpip_thread+0xb4>)
90013438:	f7fc faf9 	bl	9000fa2e <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
9001343c:	4b2b      	ldr	r3, [pc, #172]	; (900134ec <tcpip_thread+0xb8>)
9001343e:	681b      	ldr	r3, [r3, #0]
90013440:	b113      	cbz	r3, 90013448 <tcpip_thread+0x14>
    tcpip_init_done(tcpip_init_done_arg);
90013442:	4a2b      	ldr	r2, [pc, #172]	; (900134f0 <tcpip_thread+0xbc>)
90013444:	6810      	ldr	r0, [r2, #0]
90013446:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
90013448:	4d27      	ldr	r5, [pc, #156]	; (900134e8 <tcpip_thread+0xb4>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
9001344a:	4f2a      	ldr	r7, [pc, #168]	; (900134f4 <tcpip_thread+0xc0>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
9001344c:	4e2a      	ldr	r6, [pc, #168]	; (900134f8 <tcpip_thread+0xc4>)
  sleeptime = sys_timeouts_sleeptime();
9001344e:	f000 f9e3 	bl	90013818 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
90013452:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
90013454:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
90013456:	d113      	bne.n	90013480 <tcpip_thread+0x4c>
    UNLOCK_TCPIP_CORE();
90013458:	4628      	mov	r0, r5
9001345a:	f7fc faed 	bl	9000fa38 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
9001345e:	2200      	movs	r2, #0
90013460:	a901      	add	r1, sp, #4
90013462:	4638      	mov	r0, r7
90013464:	f7fc fa60 	bl	9000f928 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
90013468:	4628      	mov	r0, r5
9001346a:	f7fc fae0 	bl	9000fa2e <sys_mutex_lock>
    if (msg == NULL) {
9001346e:	9c01      	ldr	r4, [sp, #4]
90013470:	b9cc      	cbnz	r4, 900134a6 <tcpip_thread+0x72>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
90013472:	4633      	mov	r3, r6
90013474:	2291      	movs	r2, #145	; 0x91
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
90013476:	4921      	ldr	r1, [pc, #132]	; (900134fc <tcpip_thread+0xc8>)
90013478:	4821      	ldr	r0, [pc, #132]	; (90013500 <tcpip_thread+0xcc>)
9001347a:	f016 f829 	bl	900294d0 <iprintf>
      break;
9001347e:	e7e6      	b.n	9001344e <tcpip_thread+0x1a>
  } else if (sleeptime == 0) {
90013480:	b910      	cbnz	r0, 90013488 <tcpip_thread+0x54>
    sys_check_timeouts();
90013482:	f000 f9a7 	bl	900137d4 <sys_check_timeouts>
    goto again;
90013486:	e7e2      	b.n	9001344e <tcpip_thread+0x1a>
  UNLOCK_TCPIP_CORE();
90013488:	4628      	mov	r0, r5
9001348a:	f7fc fad5 	bl	9000fa38 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
9001348e:	4622      	mov	r2, r4
90013490:	a901      	add	r1, sp, #4
90013492:	4638      	mov	r0, r7
90013494:	f7fc fa48 	bl	9000f928 <sys_arch_mbox_fetch>
90013498:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
9001349a:	4628      	mov	r0, r5
9001349c:	f7fc fac7 	bl	9000fa2e <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
900134a0:	3401      	adds	r4, #1
900134a2:	d0ee      	beq.n	90013482 <tcpip_thread+0x4e>
900134a4:	e7e3      	b.n	9001346e <tcpip_thread+0x3a>
  switch (msg->type) {
900134a6:	7823      	ldrb	r3, [r4, #0]
900134a8:	2b01      	cmp	r3, #1
900134aa:	d00f      	beq.n	900134cc <tcpip_thread+0x98>
900134ac:	2b02      	cmp	r3, #2
900134ae:	d013      	beq.n	900134d8 <tcpip_thread+0xa4>
900134b0:	b9b3      	cbnz	r3, 900134e0 <tcpip_thread+0xac>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
900134b2:	6860      	ldr	r0, [r4, #4]
900134b4:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
900134b8:	4798      	blx	r3
900134ba:	b110      	cbz	r0, 900134c2 <tcpip_thread+0x8e>
        pbuf_free(msg->msg.inp.p);
900134bc:	6860      	ldr	r0, [r4, #4]
900134be:	f7fb f9a9 	bl	9000e814 <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
900134c2:	4621      	mov	r1, r4
900134c4:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
900134c6:	f7fa febb 	bl	9000e240 <memp_free>
      break;
900134ca:	e7c0      	b.n	9001344e <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
900134cc:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
900134d0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
900134d2:	4621      	mov	r1, r4
900134d4:	2008      	movs	r0, #8
900134d6:	e7f6      	b.n	900134c6 <tcpip_thread+0x92>
      msg->msg.cb.function(msg->msg.cb.ctx);
900134d8:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
900134dc:	4798      	blx	r3
      break;
900134de:	e7b6      	b.n	9001344e <tcpip_thread+0x1a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
900134e0:	4633      	mov	r3, r6
900134e2:	22cf      	movs	r2, #207	; 0xcf
900134e4:	e7c7      	b.n	90013476 <tcpip_thread+0x42>
900134e6:	bf00      	nop
900134e8:	2002cb84 	.word	0x2002cb84
900134ec:	20026cb8 	.word	0x20026cb8
900134f0:	20026cbc 	.word	0x20026cbc
900134f4:	20026cc0 	.word	0x20026cc0
900134f8:	9002e0ad 	.word	0x9002e0ad
900134fc:	9002e10d 	.word	0x9002e10d
90013500:	9002a254 	.word	0x9002a254

90013504 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
90013504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90013506:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
90013508:	4810      	ldr	r0, [pc, #64]	; (9001354c <tcpip_inpkt+0x48>)
{
9001350a:	460e      	mov	r6, r1
9001350c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
9001350e:	f7fc fa34 	bl	9000f97a <sys_mbox_valid>
90013512:	b928      	cbnz	r0, 90013520 <tcpip_inpkt+0x1c>
90013514:	4b0e      	ldr	r3, [pc, #56]	; (90013550 <tcpip_inpkt+0x4c>)
90013516:	22fc      	movs	r2, #252	; 0xfc
90013518:	490e      	ldr	r1, [pc, #56]	; (90013554 <tcpip_inpkt+0x50>)
9001351a:	480f      	ldr	r0, [pc, #60]	; (90013558 <tcpip_inpkt+0x54>)
9001351c:	f015 ffd8 	bl	900294d0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
90013520:	2009      	movs	r0, #9
90013522:	f7fa fe71 	bl	9000e208 <memp_malloc>
  if (msg == NULL) {
90013526:	4604      	mov	r4, r0
90013528:	b168      	cbz	r0, 90013546 <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
9001352a:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
9001352c:	4601      	mov	r1, r0
  msg->msg.inp.input_fn = input_fn;
9001352e:	60c5      	str	r5, [r0, #12]
  msg->type = TCPIP_MSG_INPKT;
90013530:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
90013532:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
90013536:	4805      	ldr	r0, [pc, #20]	; (9001354c <tcpip_inpkt+0x48>)
90013538:	f7fc f9e7 	bl	9000f90a <sys_mbox_trypost>
9001353c:	b128      	cbz	r0, 9001354a <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
9001353e:	4621      	mov	r1, r4
90013540:	2009      	movs	r0, #9
90013542:	f7fa fe7d 	bl	9000e240 <memp_free>
    return ERR_MEM;
90013546:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
9001354a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9001354c:	20026cc0 	.word	0x20026cc0
90013550:	9002e0ad 	.word	0x9002e0ad
90013554:	9002e12b 	.word	0x9002e12b
90013558:	9002a254 	.word	0x9002a254

9001355c <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
9001355c:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
90013560:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
90013564:	bf14      	ite	ne
90013566:	4a02      	ldrne	r2, [pc, #8]	; (90013570 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
90013568:	4a02      	ldreq	r2, [pc, #8]	; (90013574 <tcpip_input+0x18>)
9001356a:	f7ff bfcb 	b.w	90013504 <tcpip_inpkt>
9001356e:	bf00      	nop
90013570:	9000ce2d 	.word	0x9000ce2d
90013574:	9000d1c5 	.word	0x9000d1c5

90013578 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
90013578:	b570      	push	{r4, r5, r6, lr}
9001357a:	4606      	mov	r6, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
9001357c:	4810      	ldr	r0, [pc, #64]	; (900135c0 <tcpip_try_callback+0x48>)
{
9001357e:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
90013580:	f7fc f9fb 	bl	9000f97a <sys_mbox_valid>
90013584:	b930      	cbnz	r0, 90013594 <tcpip_try_callback+0x1c>
90013586:	4b0f      	ldr	r3, [pc, #60]	; (900135c4 <tcpip_try_callback+0x4c>)
90013588:	f240 125d 	movw	r2, #349	; 0x15d
9001358c:	490e      	ldr	r1, [pc, #56]	; (900135c8 <tcpip_try_callback+0x50>)
9001358e:	480f      	ldr	r0, [pc, #60]	; (900135cc <tcpip_try_callback+0x54>)
90013590:	f015 ff9e 	bl	900294d0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
90013594:	2008      	movs	r0, #8
90013596:	f7fa fe37 	bl	9000e208 <memp_malloc>
  if (msg == NULL) {
9001359a:	4604      	mov	r4, r0
9001359c:	b160      	cbz	r0, 900135b8 <tcpip_try_callback+0x40>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
9001359e:	2301      	movs	r3, #1
  msg->msg.cb.function = function;
  msg->msg.cb.ctx = ctx;

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
900135a0:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_CALLBACK;
900135a2:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.ctx = ctx;
900135a4:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
900135a8:	4805      	ldr	r0, [pc, #20]	; (900135c0 <tcpip_try_callback+0x48>)
900135aa:	f7fc f9ae 	bl	9000f90a <sys_mbox_trypost>
900135ae:	b128      	cbz	r0, 900135bc <tcpip_try_callback+0x44>
    memp_free(MEMP_TCPIP_MSG_API, msg);
900135b0:	4621      	mov	r1, r4
900135b2:	2008      	movs	r0, #8
900135b4:	f7fa fe44 	bl	9000e240 <memp_free>
    return ERR_MEM;
900135b8:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
}
900135bc:	bd70      	pop	{r4, r5, r6, pc}
900135be:	bf00      	nop
900135c0:	20026cc0 	.word	0x20026cc0
900135c4:	9002e0ad 	.word	0x9002e0ad
900135c8:	9002e12b 	.word	0x9002e12b
900135cc:	9002a254 	.word	0x9002a254

900135d0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
900135d0:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
900135d2:	4e06      	ldr	r6, [pc, #24]	; (900135ec <tcpip_send_msg_wait_sem+0x1c>)
{
900135d4:	460d      	mov	r5, r1
900135d6:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
900135d8:	4630      	mov	r0, r6
900135da:	f7fc fa28 	bl	9000fa2e <sys_mutex_lock>
  fn(apimsg);
900135de:	4628      	mov	r0, r5
900135e0:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
900135e2:	4630      	mov	r0, r6
900135e4:	f7fc fa28 	bl	9000fa38 <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
900135e8:	2000      	movs	r0, #0
900135ea:	bd70      	pop	{r4, r5, r6, pc}
900135ec:	2002cb84 	.word	0x2002cb84

900135f0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
900135f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
900135f2:	4605      	mov	r5, r0
900135f4:	460c      	mov	r4, r1
  lwip_init();
900135f6:	f7f9 fd89 	bl	9000d10c <lwip_init>

  tcpip_init_done = initfunc;
900135fa:	4b13      	ldr	r3, [pc, #76]	; (90013648 <tcpip_init+0x58>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
900135fc:	2106      	movs	r1, #6
900135fe:	4813      	ldr	r0, [pc, #76]	; (9001364c <tcpip_init+0x5c>)
  tcpip_init_done = initfunc;
90013600:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
90013602:	4b13      	ldr	r3, [pc, #76]	; (90013650 <tcpip_init+0x60>)
90013604:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
90013606:	f7fc f969 	bl	9000f8dc <sys_mbox_new>
9001360a:	b130      	cbz	r0, 9001361a <tcpip_init+0x2a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
9001360c:	4b11      	ldr	r3, [pc, #68]	; (90013654 <tcpip_init+0x64>)
9001360e:	f240 2261 	movw	r2, #609	; 0x261
90013612:	4911      	ldr	r1, [pc, #68]	; (90013658 <tcpip_init+0x68>)
90013614:	4811      	ldr	r0, [pc, #68]	; (9001365c <tcpip_init+0x6c>)
90013616:	f015 ff5b 	bl	900294d0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
9001361a:	4811      	ldr	r0, [pc, #68]	; (90013660 <tcpip_init+0x70>)
9001361c:	f7fc f9fc 	bl	9000fa18 <sys_mutex_new>
90013620:	b130      	cbz	r0, 90013630 <tcpip_init+0x40>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
90013622:	4b0c      	ldr	r3, [pc, #48]	; (90013654 <tcpip_init+0x64>)
90013624:	f240 2265 	movw	r2, #613	; 0x265
90013628:	490e      	ldr	r1, [pc, #56]	; (90013664 <tcpip_init+0x74>)
9001362a:	480c      	ldr	r0, [pc, #48]	; (9001365c <tcpip_init+0x6c>)
9001362c:	f015 ff50 	bl	900294d0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
90013630:	2318      	movs	r3, #24
90013632:	2200      	movs	r2, #0
90013634:	490c      	ldr	r1, [pc, #48]	; (90013668 <tcpip_init+0x78>)
90013636:	9300      	str	r3, [sp, #0]
90013638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
9001363c:	480b      	ldr	r0, [pc, #44]	; (9001366c <tcpip_init+0x7c>)
9001363e:	f7fc f9fe 	bl	9000fa3e <sys_thread_new>
}
90013642:	b003      	add	sp, #12
90013644:	bd30      	pop	{r4, r5, pc}
90013646:	bf00      	nop
90013648:	20026cb8 	.word	0x20026cb8
9001364c:	20026cc0 	.word	0x20026cc0
90013650:	20026cbc 	.word	0x20026cbc
90013654:	9002e0ad 	.word	0x9002e0ad
90013658:	9002e138 	.word	0x9002e138
9001365c:	9002a254 	.word	0x9002a254
90013660:	2002cb84 	.word	0x2002cb84
90013664:	9002e15b 	.word	0x9002e15b
90013668:	90013435 	.word	0x90013435
9001366c:	9002e17c 	.word	0x9002e17c

90013670 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
90013670:	b570      	push	{r4, r5, r6, lr}
90013672:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
90013674:	200a      	movs	r0, #10
{
90013676:	460e      	mov	r6, r1
90013678:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
9001367a:	f7fa fdc5 	bl	9000e208 <memp_malloc>
  if (timeout == NULL) {
9001367e:	b938      	cbnz	r0, 90013690 <sys_timeout_abs+0x20>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
90013680:	4b10      	ldr	r3, [pc, #64]	; (900136c4 <sys_timeout_abs+0x54>)
90013682:	22be      	movs	r2, #190	; 0xbe
90013684:	4910      	ldr	r1, [pc, #64]	; (900136c8 <sys_timeout_abs+0x58>)
90013686:	4811      	ldr	r0, [pc, #68]	; (900136cc <sys_timeout_abs+0x5c>)
        t->next = timeout;
        break;
      }
    }
  }
}
90013688:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
9001368c:	f015 bf20 	b.w	900294d0 <iprintf>
  timeout->next = NULL;
90013690:	2300      	movs	r3, #0
  if (next_timeout == NULL) {
90013692:	4a0f      	ldr	r2, [pc, #60]	; (900136d0 <sys_timeout_abs+0x60>)
  timeout->time = abs_time;
90013694:	6044      	str	r4, [r0, #4]
  timeout->next = NULL;
90013696:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
90013698:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
9001369a:	e9c0 6502 	strd	r6, r5, [r0, #8]
  if (next_timeout == NULL) {
9001369e:	b90b      	cbnz	r3, 900136a4 <sys_timeout_abs+0x34>
    next_timeout = timeout;
900136a0:	6010      	str	r0, [r2, #0]
}
900136a2:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
900136a4:	6859      	ldr	r1, [r3, #4]
900136a6:	1a61      	subs	r1, r4, r1
900136a8:	2900      	cmp	r1, #0
900136aa:	da01      	bge.n	900136b0 <sys_timeout_abs+0x40>
    timeout->next = next_timeout;
900136ac:	6003      	str	r3, [r0, #0]
900136ae:	e7f7      	b.n	900136a0 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
900136b0:	4619      	mov	r1, r3
900136b2:	681b      	ldr	r3, [r3, #0]
900136b4:	b11b      	cbz	r3, 900136be <sys_timeout_abs+0x4e>
900136b6:	685a      	ldr	r2, [r3, #4]
900136b8:	1aa2      	subs	r2, r4, r2
900136ba:	2a00      	cmp	r2, #0
900136bc:	daf8      	bge.n	900136b0 <sys_timeout_abs+0x40>
        timeout->next = t->next;
900136be:	6003      	str	r3, [r0, #0]
        t->next = timeout;
900136c0:	6008      	str	r0, [r1, #0]
        break;
900136c2:	e7ee      	b.n	900136a2 <sys_timeout_abs+0x32>
900136c4:	9002e189 	.word	0x9002e189
900136c8:	9002e1ed 	.word	0x9002e1ed
900136cc:	9002a254 	.word	0x9002a254
900136d0:	20026cc8 	.word	0x20026cc8

900136d4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
900136d4:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
900136d6:	6843      	ldr	r3, [r0, #4]
{
900136d8:	4604      	mov	r4, r0
  cyclic->handler();
900136da:	4798      	blx	r3

  now = sys_now();
900136dc:	f7ed fbfc 	bl	90000ed8 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
900136e0:	4b07      	ldr	r3, [pc, #28]	; (90013700 <lwip_cyclic_timer+0x2c>)
900136e2:	6825      	ldr	r5, [r4, #0]
900136e4:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
900136e6:	4907      	ldr	r1, [pc, #28]	; (90013704 <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
900136e8:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
900136ea:	1a1a      	subs	r2, r3, r0
900136ec:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
900136ee:	4622      	mov	r2, r4
900136f0:	bfb4      	ite	lt
900136f2:	1940      	addlt	r0, r0, r5
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
900136f4:	4618      	movge	r0, r3
#endif
  }
}
900136f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
900136fa:	f7ff bfb9 	b.w	90013670 <sys_timeout_abs>
900136fe:	bf00      	nop
90013700:	20026cc4 	.word	0x20026cc4
90013704:	900136d5 	.word	0x900136d5

90013708 <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
90013708:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
9001370c:	b570      	push	{r4, r5, r6, lr}
9001370e:	4604      	mov	r4, r0
90013710:	460d      	mov	r5, r1
90013712:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
90013714:	d306      	bcc.n	90013724 <sys_timeout+0x1c>
90013716:	4b08      	ldr	r3, [pc, #32]	; (90013738 <sys_timeout+0x30>)
90013718:	f240 1229 	movw	r2, #297	; 0x129
9001371c:	4907      	ldr	r1, [pc, #28]	; (9001373c <sys_timeout+0x34>)
9001371e:	4808      	ldr	r0, [pc, #32]	; (90013740 <sys_timeout+0x38>)
90013720:	f015 fed6 	bl	900294d0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
90013724:	f7ed fbd8 	bl	90000ed8 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
90013728:	4632      	mov	r2, r6
9001372a:	4629      	mov	r1, r5
9001372c:	4420      	add	r0, r4
#endif
}
9001372e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
90013732:	f7ff bf9d 	b.w	90013670 <sys_timeout_abs>
90013736:	bf00      	nop
90013738:	9002e189 	.word	0x9002e189
9001373c:	9002e22a 	.word	0x9002e22a
90013740:	9002a254 	.word	0x9002a254

90013744 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
90013744:	4b08      	ldr	r3, [pc, #32]	; (90013768 <tcp_timer_needed+0x24>)
90013746:	681a      	ldr	r2, [r3, #0]
90013748:	b962      	cbnz	r2, 90013764 <tcp_timer_needed+0x20>
9001374a:	4a08      	ldr	r2, [pc, #32]	; (9001376c <tcp_timer_needed+0x28>)
9001374c:	6812      	ldr	r2, [r2, #0]
9001374e:	b912      	cbnz	r2, 90013756 <tcp_timer_needed+0x12>
90013750:	4a07      	ldr	r2, [pc, #28]	; (90013770 <tcp_timer_needed+0x2c>)
90013752:	6812      	ldr	r2, [r2, #0]
90013754:	b132      	cbz	r2, 90013764 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
90013756:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
90013758:	4906      	ldr	r1, [pc, #24]	; (90013774 <tcp_timer_needed+0x30>)
9001375a:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
9001375c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
9001375e:	2200      	movs	r2, #0
90013760:	f7ff bfd2 	b.w	90013708 <sys_timeout>
}
90013764:	4770      	bx	lr
90013766:	bf00      	nop
90013768:	20026ccc 	.word	0x20026ccc
9001376c:	2002cb6c 	.word	0x2002cb6c
90013770:	2002cb7c 	.word	0x2002cb7c
90013774:	90013779 	.word	0x90013779

90013778 <tcpip_tcp_timer>:
{
90013778:	b508      	push	{r3, lr}
  tcp_tmr();
9001377a:	f7fd fa27 	bl	90010bcc <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
9001377e:	4b08      	ldr	r3, [pc, #32]	; (900137a0 <tcpip_tcp_timer+0x28>)
90013780:	681b      	ldr	r3, [r3, #0]
90013782:	b913      	cbnz	r3, 9001378a <tcpip_tcp_timer+0x12>
90013784:	4b07      	ldr	r3, [pc, #28]	; (900137a4 <tcpip_tcp_timer+0x2c>)
90013786:	681b      	ldr	r3, [r3, #0]
90013788:	b133      	cbz	r3, 90013798 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
9001378a:	2200      	movs	r2, #0
9001378c:	4906      	ldr	r1, [pc, #24]	; (900137a8 <tcpip_tcp_timer+0x30>)
9001378e:	20fa      	movs	r0, #250	; 0xfa
}
90013790:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
90013794:	f7ff bfb8 	b.w	90013708 <sys_timeout>
    tcpip_tcp_timer_active = 0;
90013798:	4a04      	ldr	r2, [pc, #16]	; (900137ac <tcpip_tcp_timer+0x34>)
9001379a:	6013      	str	r3, [r2, #0]
}
9001379c:	bd08      	pop	{r3, pc}
9001379e:	bf00      	nop
900137a0:	2002cb6c 	.word	0x2002cb6c
900137a4:	2002cb7c 	.word	0x2002cb7c
900137a8:	90013779 	.word	0x90013779
900137ac:	20026ccc 	.word	0x20026ccc

900137b0 <sys_timeouts_init>:
{
900137b0:	b570      	push	{r4, r5, r6, lr}
900137b2:	4d06      	ldr	r5, [pc, #24]	; (900137cc <sys_timeouts_init+0x1c>)
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
900137b4:	2401      	movs	r4, #1
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
900137b6:	4e06      	ldr	r6, [pc, #24]	; (900137d0 <sys_timeouts_init+0x20>)
900137b8:	f855 0f08 	ldr.w	r0, [r5, #8]!
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
900137bc:	3401      	adds	r4, #1
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
900137be:	4631      	mov	r1, r6
900137c0:	462a      	mov	r2, r5
900137c2:	f7ff ffa1 	bl	90013708 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
900137c6:	2c06      	cmp	r4, #6
900137c8:	d1f6      	bne.n	900137b8 <sys_timeouts_init+0x8>
}
900137ca:	bd70      	pop	{r4, r5, r6, pc}
900137cc:	9002e260 	.word	0x9002e260
900137d0:	900136d5 	.word	0x900136d5

900137d4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
900137d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
900137d8:	f7ed fb7e 	bl	90000ed8 <sys_now>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
900137dc:	4e0c      	ldr	r6, [pc, #48]	; (90013810 <sys_check_timeouts+0x3c>)
  now = sys_now();
900137de:	4604      	mov	r4, r0

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
900137e0:	f8df 8030 	ldr.w	r8, [pc, #48]	; 90013814 <sys_check_timeouts+0x40>
    tmptimeout = next_timeout;
900137e4:	6831      	ldr	r1, [r6, #0]
    if (tmptimeout == NULL) {
900137e6:	b189      	cbz	r1, 9001380c <sys_check_timeouts+0x38>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
900137e8:	684b      	ldr	r3, [r1, #4]
900137ea:	1ae2      	subs	r2, r4, r3
900137ec:	2a00      	cmp	r2, #0
900137ee:	db0d      	blt.n	9001380c <sys_check_timeouts+0x38>
    next_timeout = tmptimeout->next;
900137f0:	680a      	ldr	r2, [r1, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
900137f2:	200a      	movs	r0, #10
    current_timeout_due_time = tmptimeout->time;
900137f4:	f8c8 3000 	str.w	r3, [r8]
    next_timeout = tmptimeout->next;
900137f8:	6032      	str	r2, [r6, #0]
    arg = tmptimeout->arg;
900137fa:	e9d1 5702 	ldrd	r5, r7, [r1, #8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
900137fe:	f7fa fd1f 	bl	9000e240 <memp_free>
    if (handler != NULL) {
90013802:	2d00      	cmp	r5, #0
90013804:	d0ee      	beq.n	900137e4 <sys_check_timeouts+0x10>
      handler(arg);
90013806:	4638      	mov	r0, r7
90013808:	47a8      	blx	r5
9001380a:	e7eb      	b.n	900137e4 <sys_check_timeouts+0x10>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
9001380c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90013810:	20026cc8 	.word	0x20026cc8
90013814:	20026cc4 	.word	0x20026cc4

90013818 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
90013818:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
9001381a:	4c07      	ldr	r4, [pc, #28]	; (90013838 <sys_timeouts_sleeptime+0x20>)
9001381c:	6823      	ldr	r3, [r4, #0]
9001381e:	b13b      	cbz	r3, 90013830 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
90013820:	f7ed fb5a 	bl	90000ed8 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
90013824:	6823      	ldr	r3, [r4, #0]
90013826:	685b      	ldr	r3, [r3, #4]
90013828:	1a18      	subs	r0, r3, r0
    return 0;
9001382a:	bf48      	it	mi
9001382c:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
9001382e:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
90013830:	f04f 30ff 	mov.w	r0, #4294967295
90013834:	e7fb      	b.n	9001382e <sys_timeouts_sleeptime+0x16>
90013836:	bf00      	nop
90013838:	20026cc8 	.word	0x20026cc8

9001383c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
9001383c:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
9001383e:	f015 fe5f 	bl	90029500 <rand>
90013842:	ea6f 4080 	mvn.w	r0, r0, lsl #18
90013846:	4b02      	ldr	r3, [pc, #8]	; (90013850 <udp_init+0x14>)
90013848:	ea6f 4090 	mvn.w	r0, r0, lsr #18
9001384c:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
9001384e:	bd08      	pop	{r3, pc}
90013850:	2000004e 	.word	0x2000004e

90013854 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
90013854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013858:	4688      	mov	r8, r1
9001385a:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
9001385c:	4607      	mov	r7, r0
9001385e:	b928      	cbnz	r0, 9001386c <udp_input+0x18>
90013860:	4b5f      	ldr	r3, [pc, #380]	; (900139e0 <udp_input+0x18c>)
90013862:	22cf      	movs	r2, #207	; 0xcf
90013864:	495f      	ldr	r1, [pc, #380]	; (900139e4 <udp_input+0x190>)
90013866:	4860      	ldr	r0, [pc, #384]	; (900139e8 <udp_input+0x194>)
90013868:	f015 fe32 	bl	900294d0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
9001386c:	f1b8 0f00 	cmp.w	r8, #0
90013870:	d105      	bne.n	9001387e <udp_input+0x2a>
90013872:	4b5b      	ldr	r3, [pc, #364]	; (900139e0 <udp_input+0x18c>)
90013874:	22d0      	movs	r2, #208	; 0xd0
90013876:	495d      	ldr	r1, [pc, #372]	; (900139ec <udp_input+0x198>)
90013878:	485b      	ldr	r0, [pc, #364]	; (900139e8 <udp_input+0x194>)
9001387a:	f015 fe29 	bl	900294d0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
9001387e:	897b      	ldrh	r3, [r7, #10]
90013880:	2b07      	cmp	r3, #7
90013882:	d805      	bhi.n	90013890 <udp_input+0x3c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
90013884:	4638      	mov	r0, r7
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
90013886:	b005      	add	sp, #20
90013888:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
9001388c:	f7fa bfc2 	b.w	9000e814 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
90013890:	4e57      	ldr	r6, [pc, #348]	; (900139f0 <udp_input+0x19c>)
  uncon_pcb = NULL;
90013892:	2500      	movs	r5, #0
  udphdr = (struct udp_hdr *)p->payload;
90013894:	687c      	ldr	r4, [r7, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
90013896:	6831      	ldr	r1, [r6, #0]
  prev = NULL;
90013898:	46ab      	mov	fp, r5
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
9001389a:	6970      	ldr	r0, [r6, #20]
9001389c:	f7f9 fde1 	bl	9000d462 <ip4_addr_isbroadcast_u32>
900138a0:	4681      	mov	r9, r0
  src = lwip_ntohs(udphdr->src);
900138a2:	8820      	ldrh	r0, [r4, #0]
900138a4:	f7f7 fc2e 	bl	9000b104 <lwip_htons>
900138a8:	9002      	str	r0, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
900138aa:	8860      	ldrh	r0, [r4, #2]
900138ac:	f7f7 fc2a 	bl	9000b104 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
900138b0:	4b50      	ldr	r3, [pc, #320]	; (900139f4 <udp_input+0x1a0>)
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
900138b2:	f8df c12c 	ldr.w	ip, [pc, #300]	; 900139e0 <udp_input+0x18c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
900138b6:	681c      	ldr	r4, [r3, #0]
900138b8:	469a      	mov	sl, r3
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
900138ba:	494f      	ldr	r1, [pc, #316]	; (900139f8 <udp_input+0x1a4>)
  dest = lwip_ntohs(udphdr->dest);
900138bc:	9003      	str	r0, [sp, #12]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
900138be:	b99c      	cbnz	r4, 900138e8 <udp_input+0x94>
  if (pcb != NULL) {
900138c0:	b925      	cbnz	r5, 900138cc <udp_input+0x78>
  if (for_us) {
900138c2:	f8d8 2004 	ldr.w	r2, [r8, #4]
900138c6:	6973      	ldr	r3, [r6, #20]
900138c8:	429a      	cmp	r2, r3
900138ca:	d1db      	bne.n	90013884 <udp_input+0x30>
    if (pbuf_remove_header(p, UDP_HLEN)) {
900138cc:	2108      	movs	r1, #8
900138ce:	4638      	mov	r0, r7
900138d0:	f7fa ff6c 	bl	9000e7ac <pbuf_remove_header>
900138d4:	2800      	cmp	r0, #0
900138d6:	d05e      	beq.n	90013996 <udp_input+0x142>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
900138d8:	4b41      	ldr	r3, [pc, #260]	; (900139e0 <udp_input+0x18c>)
900138da:	f44f 72b8 	mov.w	r2, #368	; 0x170
900138de:	4947      	ldr	r1, [pc, #284]	; (900139fc <udp_input+0x1a8>)
900138e0:	4841      	ldr	r0, [pc, #260]	; (900139e8 <udp_input+0x194>)
900138e2:	f015 fdf5 	bl	900294d0 <iprintf>
900138e6:	e7cd      	b.n	90013884 <udp_input+0x30>
    if ((pcb->local_port == dest) &&
900138e8:	8a62      	ldrh	r2, [r4, #18]
900138ea:	9803      	ldr	r0, [sp, #12]
900138ec:	4282      	cmp	r2, r0
900138ee:	d14d      	bne.n	9001398c <udp_input+0x138>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
900138f0:	f1b8 0f00 	cmp.w	r8, #0
900138f4:	d107      	bne.n	90013906 <udp_input+0xb2>
900138f6:	4663      	mov	r3, ip
900138f8:	2288      	movs	r2, #136	; 0x88
900138fa:	483b      	ldr	r0, [pc, #236]	; (900139e8 <udp_input+0x194>)
900138fc:	f015 fde8 	bl	900294d0 <iprintf>
90013900:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 900139e0 <udp_input+0x18c>
90013904:	493c      	ldr	r1, [pc, #240]	; (900139f8 <udp_input+0x1a4>)
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
90013906:	7a20      	ldrb	r0, [r4, #8]
90013908:	b130      	cbz	r0, 90013918 <udp_input+0xc4>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
9001390a:	6872      	ldr	r2, [r6, #4]
9001390c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
90013910:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
90013912:	b2d2      	uxtb	r2, r2
90013914:	4290      	cmp	r0, r2
90013916:	d139      	bne.n	9001398c <udp_input+0x138>
    if (broadcast != 0) {
90013918:	6822      	ldr	r2, [r4, #0]
9001391a:	f1b9 0f00 	cmp.w	r9, #0
9001391e:	d030      	beq.n	90013982 <udp_input+0x12e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
90013920:	b13a      	cbz	r2, 90013932 <udp_input+0xde>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
90013922:	6970      	ldr	r0, [r6, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
90013924:	1c43      	adds	r3, r0, #1
90013926:	d004      	beq.n	90013932 <udp_input+0xde>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
90013928:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
9001392a:	f8d8 3008 	ldr.w	r3, [r8, #8]
9001392e:	4218      	tst	r0, r3
90013930:	d12c      	bne.n	9001398c <udp_input+0x138>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
90013932:	7c20      	ldrb	r0, [r4, #16]
90013934:	0743      	lsls	r3, r0, #29
90013936:	d40e      	bmi.n	90013956 <udp_input+0x102>
        if (uncon_pcb == NULL) {
90013938:	b35d      	cbz	r5, 90013992 <udp_input+0x13e>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
9001393a:	f1b9 0f00 	cmp.w	r9, #0
9001393e:	d00a      	beq.n	90013956 <udp_input+0x102>
90013940:	6970      	ldr	r0, [r6, #20]
90013942:	3001      	adds	r0, #1
90013944:	d107      	bne.n	90013956 <udp_input+0x102>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
90013946:	f8d8 0004 	ldr.w	r0, [r8, #4]
9001394a:	682b      	ldr	r3, [r5, #0]
9001394c:	4283      	cmp	r3, r0
9001394e:	d002      	beq.n	90013956 <udp_input+0x102>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
90013950:	4290      	cmp	r0, r2
90013952:	bf08      	it	eq
90013954:	4625      	moveq	r5, r4
      if ((pcb->remote_port == src) &&
90013956:	8aa2      	ldrh	r2, [r4, #20]
90013958:	9b02      	ldr	r3, [sp, #8]
9001395a:	429a      	cmp	r2, r3
9001395c:	d116      	bne.n	9001398c <udp_input+0x138>
          (ip_addr_isany_val(pcb->remote_ip) ||
9001395e:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
90013960:	b112      	cbz	r2, 90013968 <udp_input+0x114>
          (ip_addr_isany_val(pcb->remote_ip) ||
90013962:	6930      	ldr	r0, [r6, #16]
90013964:	4282      	cmp	r2, r0
90013966:	d111      	bne.n	9001398c <udp_input+0x138>
        if (prev != NULL) {
90013968:	f1bb 0f00 	cmp.w	fp, #0
9001396c:	d007      	beq.n	9001397e <udp_input+0x12a>
          prev->next = pcb->next;
9001396e:	68e3      	ldr	r3, [r4, #12]
90013970:	f8cb 300c 	str.w	r3, [fp, #12]
          pcb->next = udp_pcbs;
90013974:	f8da 3000 	ldr.w	r3, [sl]
          udp_pcbs = pcb;
90013978:	f8ca 4000 	str.w	r4, [sl]
          pcb->next = udp_pcbs;
9001397c:	60e3      	str	r3, [r4, #12]
          udp_pcbs = pcb;
9001397e:	4625      	mov	r5, r4
90013980:	e7a4      	b.n	900138cc <udp_input+0x78>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
90013982:	2a00      	cmp	r2, #0
90013984:	d0d5      	beq.n	90013932 <udp_input+0xde>
90013986:	6970      	ldr	r0, [r6, #20]
90013988:	4290      	cmp	r0, r2
9001398a:	d0d2      	beq.n	90013932 <udp_input+0xde>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
9001398c:	46a3      	mov	fp, r4
9001398e:	68e4      	ldr	r4, [r4, #12]
90013990:	e795      	b.n	900138be <udp_input+0x6a>
90013992:	4625      	mov	r5, r4
90013994:	e7df      	b.n	90013956 <udp_input+0x102>
    if (pcb != NULL) {
90013996:	b16d      	cbz	r5, 900139b4 <udp_input+0x160>
      if (pcb->recv != NULL) {
90013998:	69ac      	ldr	r4, [r5, #24]
9001399a:	2c00      	cmp	r4, #0
9001399c:	f43f af72 	beq.w	90013884 <udp_input+0x30>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
900139a0:	9b02      	ldr	r3, [sp, #8]
900139a2:	463a      	mov	r2, r7
900139a4:	4629      	mov	r1, r5
900139a6:	9300      	str	r3, [sp, #0]
900139a8:	4b15      	ldr	r3, [pc, #84]	; (90013a00 <udp_input+0x1ac>)
900139aa:	69e8      	ldr	r0, [r5, #28]
900139ac:	47a0      	blx	r4
}
900139ae:	b005      	add	sp, #20
900139b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
900139b4:	f1b9 0f00 	cmp.w	r9, #0
900139b8:	f47f af64 	bne.w	90013884 <udp_input+0x30>
900139bc:	6973      	ldr	r3, [r6, #20]
900139be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
900139c2:	2be0      	cmp	r3, #224	; 0xe0
900139c4:	f43f af5e 	beq.w	90013884 <udp_input+0x30>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
900139c8:	89b1      	ldrh	r1, [r6, #12]
900139ca:	4638      	mov	r0, r7
900139cc:	3108      	adds	r1, #8
900139ce:	b209      	sxth	r1, r1
900139d0:	f7fa ff18 	bl	9000e804 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
900139d4:	2103      	movs	r1, #3
900139d6:	4638      	mov	r0, r7
900139d8:	f7f9 fb8e 	bl	9000d0f8 <icmp_dest_unreach>
900139dc:	e752      	b.n	90013884 <udp_input+0x30>
900139de:	bf00      	nop
900139e0:	9002e290 	.word	0x9002e290
900139e4:	9002e2ef 	.word	0x9002e2ef
900139e8:	9002a254 	.word	0x9002a254
900139ec:	9002e307 	.word	0x9002e307
900139f0:	20027358 	.word	0x20027358
900139f4:	2002cb88 	.word	0x2002cb88
900139f8:	9002e320 	.word	0x9002e320
900139fc:	9002e345 	.word	0x9002e345
90013a00:	20027368 	.word	0x20027368

90013a04 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
90013a04:	4b2d      	ldr	r3, [pc, #180]	; (90013abc <udp_bind+0xb8>)
{
90013a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
90013a0a:	2900      	cmp	r1, #0
90013a0c:	bf08      	it	eq
90013a0e:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
90013a10:	b950      	cbnz	r0, 90013a28 <udp_bind+0x24>
90013a12:	4b2b      	ldr	r3, [pc, #172]	; (90013ac0 <udp_bind+0xbc>)
90013a14:	f240 32b7 	movw	r2, #951	; 0x3b7
90013a18:	492a      	ldr	r1, [pc, #168]	; (90013ac4 <udp_bind+0xc0>)
90013a1a:	482b      	ldr	r0, [pc, #172]	; (90013ac8 <udp_bind+0xc4>)
90013a1c:	f015 fd58 	bl	900294d0 <iprintf>
90013a20:	f06f 000f 	mvn.w	r0, #15
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
90013a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
90013a28:	4f28      	ldr	r7, [pc, #160]	; (90013acc <udp_bind+0xc8>)
90013a2a:	683e      	ldr	r6, [r7, #0]
90013a2c:	4635      	mov	r5, r6
90013a2e:	b9d5      	cbnz	r5, 90013a66 <udp_bind+0x62>
  if (port == 0) {
90013a30:	2a00      	cmp	r2, #0
90013a32:	d140      	bne.n	90013ab6 <udp_bind+0xb2>
90013a34:	4b26      	ldr	r3, [pc, #152]	; (90013ad0 <udp_bind+0xcc>)
90013a36:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
90013a3a:	f64f 7eff 	movw	lr, #65535	; 0xffff
90013a3e:	881a      	ldrh	r2, [r3, #0]
90013a40:	4572      	cmp	r2, lr
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
90013a42:	46b4      	mov	ip, r6
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
90013a44:	bf16      	itet	ne
90013a46:	3201      	addne	r2, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
90013a48:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
90013a4c:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
90013a4e:	f1bc 0f00 	cmp.w	ip, #0
90013a52:	d10e      	bne.n	90013a72 <udp_bind+0x6e>
90013a54:	801a      	strh	r2, [r3, #0]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
90013a56:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
90013a58:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
90013a5a:	6003      	str	r3, [r0, #0]
  if (rebind == 0) {
90013a5c:	b90d      	cbnz	r5, 90013a62 <udp_bind+0x5e>
    pcb->next = udp_pcbs;
90013a5e:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
90013a60:	6038      	str	r0, [r7, #0]
  return ERR_OK;
90013a62:	2000      	movs	r0, #0
90013a64:	e7de      	b.n	90013a24 <udp_bind+0x20>
    if (pcb == ipcb) {
90013a66:	4285      	cmp	r5, r0
90013a68:	d001      	beq.n	90013a6e <udp_bind+0x6a>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
90013a6a:	68ed      	ldr	r5, [r5, #12]
90013a6c:	e7df      	b.n	90013a2e <udp_bind+0x2a>
      rebind = 1;
90013a6e:	2501      	movs	r5, #1
90013a70:	e7de      	b.n	90013a30 <udp_bind+0x2c>
    if (pcb->local_port == udp_port) {
90013a72:	f8bc 8012 	ldrh.w	r8, [ip, #18]
90013a76:	4590      	cmp	r8, r2
90013a78:	d107      	bne.n	90013a8a <udp_bind+0x86>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
90013a7a:	3c01      	subs	r4, #1
90013a7c:	b2a4      	uxth	r4, r4
90013a7e:	2c00      	cmp	r4, #0
90013a80:	d1de      	bne.n	90013a40 <udp_bind+0x3c>
90013a82:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
90013a84:	f06f 0007 	mvn.w	r0, #7
90013a88:	e7cc      	b.n	90013a24 <udp_bind+0x20>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
90013a8a:	f8dc c00c 	ldr.w	ip, [ip, #12]
90013a8e:	e7de      	b.n	90013a4e <udp_bind+0x4a>
      if (pcb != ipcb) {
90013a90:	4283      	cmp	r3, r0
90013a92:	d00c      	beq.n	90013aae <udp_bind+0xaa>
          if ((ipcb->local_port == port) &&
90013a94:	8a5c      	ldrh	r4, [r3, #18]
90013a96:	4294      	cmp	r4, r2
90013a98:	d109      	bne.n	90013aae <udp_bind+0xaa>
90013a9a:	f8d1 c000 	ldr.w	ip, [r1]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
90013a9e:	681c      	ldr	r4, [r3, #0]
          if ((ipcb->local_port == port) &&
90013aa0:	4564      	cmp	r4, ip
90013aa2:	d0ef      	beq.n	90013a84 <udp_bind+0x80>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
90013aa4:	f1bc 0f00 	cmp.w	ip, #0
90013aa8:	d0ec      	beq.n	90013a84 <udp_bind+0x80>
              ip_addr_isany(&ipcb->local_ip))) {
90013aaa:	2c00      	cmp	r4, #0
90013aac:	d0ea      	beq.n	90013a84 <udp_bind+0x80>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
90013aae:	68db      	ldr	r3, [r3, #12]
90013ab0:	2b00      	cmp	r3, #0
90013ab2:	d1ed      	bne.n	90013a90 <udp_bind+0x8c>
90013ab4:	e7cf      	b.n	90013a56 <udp_bind+0x52>
90013ab6:	4633      	mov	r3, r6
90013ab8:	e7fa      	b.n	90013ab0 <udp_bind+0xac>
90013aba:	bf00      	nop
90013abc:	9002c1b0 	.word	0x9002c1b0
90013ac0:	9002e290 	.word	0x9002e290
90013ac4:	9002e360 	.word	0x9002e360
90013ac8:	9002a254 	.word	0x9002a254
90013acc:	2002cb88 	.word	0x2002cb88
90013ad0:	2000004e 	.word	0x2000004e

90013ad4 <udp_sendto_if_src>:
{
90013ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013ad8:	b085      	sub	sp, #20
90013ada:	460e      	mov	r6, r1
90013adc:	4690      	mov	r8, r2
90013ade:	4699      	mov	r9, r3
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
90013ae0:	4607      	mov	r7, r0
{
90013ae2:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
90013ae6:	b960      	cbnz	r0, 90013b02 <udp_sendto_if_src+0x2e>
90013ae8:	4b3e      	ldr	r3, [pc, #248]	; (90013be4 <udp_sendto_if_src+0x110>)
90013aea:	f240 22d1 	movw	r2, #721	; 0x2d1
90013aee:	493e      	ldr	r1, [pc, #248]	; (90013be8 <udp_sendto_if_src+0x114>)
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
90013af0:	f06f 040f 	mvn.w	r4, #15
90013af4:	483d      	ldr	r0, [pc, #244]	; (90013bec <udp_sendto_if_src+0x118>)
90013af6:	f015 fceb 	bl	900294d0 <iprintf>
}
90013afa:	4620      	mov	r0, r4
90013afc:	b005      	add	sp, #20
90013afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
90013b02:	b921      	cbnz	r1, 90013b0e <udp_sendto_if_src+0x3a>
90013b04:	4b37      	ldr	r3, [pc, #220]	; (90013be4 <udp_sendto_if_src+0x110>)
90013b06:	f240 22d2 	movw	r2, #722	; 0x2d2
90013b0a:	4939      	ldr	r1, [pc, #228]	; (90013bf0 <udp_sendto_if_src+0x11c>)
90013b0c:	e7f0      	b.n	90013af0 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
90013b0e:	b922      	cbnz	r2, 90013b1a <udp_sendto_if_src+0x46>
90013b10:	4b34      	ldr	r3, [pc, #208]	; (90013be4 <udp_sendto_if_src+0x110>)
90013b12:	f240 22d3 	movw	r2, #723	; 0x2d3
90013b16:	4937      	ldr	r1, [pc, #220]	; (90013bf4 <udp_sendto_if_src+0x120>)
90013b18:	e7ea      	b.n	90013af0 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
90013b1a:	f1ba 0f00 	cmp.w	sl, #0
90013b1e:	d104      	bne.n	90013b2a <udp_sendto_if_src+0x56>
90013b20:	4b30      	ldr	r3, [pc, #192]	; (90013be4 <udp_sendto_if_src+0x110>)
90013b22:	f44f 7235 	mov.w	r2, #724	; 0x2d4
90013b26:	4934      	ldr	r1, [pc, #208]	; (90013bf8 <udp_sendto_if_src+0x124>)
90013b28:	e7e2      	b.n	90013af0 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
90013b2a:	f1bb 0f00 	cmp.w	fp, #0
90013b2e:	d104      	bne.n	90013b3a <udp_sendto_if_src+0x66>
90013b30:	4b2c      	ldr	r3, [pc, #176]	; (90013be4 <udp_sendto_if_src+0x110>)
90013b32:	f240 22d5 	movw	r2, #725	; 0x2d5
90013b36:	4931      	ldr	r1, [pc, #196]	; (90013bfc <udp_sendto_if_src+0x128>)
90013b38:	e7da      	b.n	90013af0 <udp_sendto_if_src+0x1c>
  if (pcb->local_port == 0) {
90013b3a:	8a42      	ldrh	r2, [r0, #18]
90013b3c:	b13a      	cbz	r2, 90013b4e <udp_sendto_if_src+0x7a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
90013b3e:	8932      	ldrh	r2, [r6, #8]
90013b40:	f64f 73f7 	movw	r3, #65527	; 0xfff7
90013b44:	429a      	cmp	r2, r3
90013b46:	d909      	bls.n	90013b5c <udp_sendto_if_src+0x88>
    return ERR_MEM;
90013b48:	f04f 34ff 	mov.w	r4, #4294967295
90013b4c:	e7d5      	b.n	90013afa <udp_sendto_if_src+0x26>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
90013b4e:	4601      	mov	r1, r0
90013b50:	f7ff ff58 	bl	90013a04 <udp_bind>
    if (err != ERR_OK) {
90013b54:	4604      	mov	r4, r0
90013b56:	2800      	cmp	r0, #0
90013b58:	d0f1      	beq.n	90013b3e <udp_sendto_if_src+0x6a>
90013b5a:	e7ce      	b.n	90013afa <udp_sendto_if_src+0x26>
  if (pbuf_add_header(p, UDP_HLEN)) {
90013b5c:	2108      	movs	r1, #8
90013b5e:	4630      	mov	r0, r6
90013b60:	f7fa fe20 	bl	9000e7a4 <pbuf_add_header>
90013b64:	2800      	cmp	r0, #0
90013b66:	d03a      	beq.n	90013bde <udp_sendto_if_src+0x10a>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
90013b68:	f44f 7220 	mov.w	r2, #640	; 0x280
90013b6c:	2108      	movs	r1, #8
90013b6e:	2022      	movs	r0, #34	; 0x22
90013b70:	f7fa feb8 	bl	9000e8e4 <pbuf_alloc>
    if (q == NULL) {
90013b74:	4605      	mov	r5, r0
90013b76:	2800      	cmp	r0, #0
90013b78:	d0e6      	beq.n	90013b48 <udp_sendto_if_src+0x74>
    if (p->tot_len != 0) {
90013b7a:	8933      	ldrh	r3, [r6, #8]
90013b7c:	b113      	cbz	r3, 90013b84 <udp_sendto_if_src+0xb0>
      pbuf_chain(q, p);
90013b7e:	4631      	mov	r1, r6
90013b80:	f7fb f810 	bl	9000eba4 <pbuf_chain>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
90013b84:	896b      	ldrh	r3, [r5, #10]
90013b86:	2b07      	cmp	r3, #7
90013b88:	d806      	bhi.n	90013b98 <udp_sendto_if_src+0xc4>
90013b8a:	4b16      	ldr	r3, [pc, #88]	; (90013be4 <udp_sendto_if_src+0x110>)
90013b8c:	f240 320d 	movw	r2, #781	; 0x30d
90013b90:	491b      	ldr	r1, [pc, #108]	; (90013c00 <udp_sendto_if_src+0x12c>)
90013b92:	4816      	ldr	r0, [pc, #88]	; (90013bec <udp_sendto_if_src+0x118>)
90013b94:	f015 fc9c 	bl	900294d0 <iprintf>
  udphdr = (struct udp_hdr *)q->payload;
90013b98:	686c      	ldr	r4, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
90013b9a:	8a78      	ldrh	r0, [r7, #18]
90013b9c:	f7f7 fab2 	bl	9000b104 <lwip_htons>
90013ba0:	8020      	strh	r0, [r4, #0]
  udphdr->dest = lwip_htons(dst_port);
90013ba2:	4648      	mov	r0, r9
90013ba4:	f7f7 faae 	bl	9000b104 <lwip_htons>
  udphdr->chksum = 0x0000;
90013ba8:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
90013baa:	8060      	strh	r0, [r4, #2]
  udphdr->chksum = 0x0000;
90013bac:	71a3      	strb	r3, [r4, #6]
90013bae:	71e3      	strb	r3, [r4, #7]
    udphdr->len = lwip_htons(q->tot_len);
90013bb0:	8928      	ldrh	r0, [r5, #8]
90013bb2:	f7f7 faa7 	bl	9000b104 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
90013bb6:	2311      	movs	r3, #17
    udphdr->len = lwip_htons(q->tot_len);
90013bb8:	80a0      	strh	r0, [r4, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
90013bba:	4642      	mov	r2, r8
90013bbc:	f8cd b008 	str.w	fp, [sp, #8]
90013bc0:	4651      	mov	r1, sl
90013bc2:	9301      	str	r3, [sp, #4]
90013bc4:	4628      	mov	r0, r5
90013bc6:	7abb      	ldrb	r3, [r7, #10]
90013bc8:	9300      	str	r3, [sp, #0]
90013bca:	7afb      	ldrb	r3, [r7, #11]
90013bcc:	f7f9 fbbe 	bl	9000d34c <ip4_output_if_src>
  if (q != p) {
90013bd0:	42b5      	cmp	r5, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
90013bd2:	4604      	mov	r4, r0
  if (q != p) {
90013bd4:	d091      	beq.n	90013afa <udp_sendto_if_src+0x26>
    pbuf_free(q);
90013bd6:	4628      	mov	r0, r5
90013bd8:	f7fa fe1c 	bl	9000e814 <pbuf_free>
    q = NULL;
90013bdc:	e78d      	b.n	90013afa <udp_sendto_if_src+0x26>
90013bde:	4635      	mov	r5, r6
90013be0:	e7d0      	b.n	90013b84 <udp_sendto_if_src+0xb0>
90013be2:	bf00      	nop
90013be4:	9002e290 	.word	0x9002e290
90013be8:	9002e376 	.word	0x9002e376
90013bec:	9002a254 	.word	0x9002a254
90013bf0:	9002e395 	.word	0x9002e395
90013bf4:	9002e3b5 	.word	0x9002e3b5
90013bf8:	9002e3d7 	.word	0x9002e3d7
90013bfc:	9002e3f9 	.word	0x9002e3f9
90013c00:	9002e41a 	.word	0x9002e41a

90013c04 <udp_sendto_if>:
{
90013c04:	b573      	push	{r0, r1, r4, r5, r6, lr}
90013c06:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
90013c08:	b950      	cbnz	r0, 90013c20 <udp_sendto_if+0x1c>
90013c0a:	4b18      	ldr	r3, [pc, #96]	; (90013c6c <udp_sendto_if+0x68>)
90013c0c:	f44f 7220 	mov.w	r2, #640	; 0x280
90013c10:	4917      	ldr	r1, [pc, #92]	; (90013c70 <udp_sendto_if+0x6c>)
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
90013c12:	4818      	ldr	r0, [pc, #96]	; (90013c74 <udp_sendto_if+0x70>)
90013c14:	f015 fc5c 	bl	900294d0 <iprintf>
90013c18:	f06f 000f 	mvn.w	r0, #15
}
90013c1c:	b002      	add	sp, #8
90013c1e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
90013c20:	b921      	cbnz	r1, 90013c2c <udp_sendto_if+0x28>
90013c22:	4b12      	ldr	r3, [pc, #72]	; (90013c6c <udp_sendto_if+0x68>)
90013c24:	f240 2281 	movw	r2, #641	; 0x281
90013c28:	4913      	ldr	r1, [pc, #76]	; (90013c78 <udp_sendto_if+0x74>)
90013c2a:	e7f2      	b.n	90013c12 <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
90013c2c:	b922      	cbnz	r2, 90013c38 <udp_sendto_if+0x34>
90013c2e:	4b0f      	ldr	r3, [pc, #60]	; (90013c6c <udp_sendto_if+0x68>)
90013c30:	f240 2282 	movw	r2, #642	; 0x282
90013c34:	4911      	ldr	r1, [pc, #68]	; (90013c7c <udp_sendto_if+0x78>)
90013c36:	e7ec      	b.n	90013c12 <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
90013c38:	b924      	cbnz	r4, 90013c44 <udp_sendto_if+0x40>
90013c3a:	4b0c      	ldr	r3, [pc, #48]	; (90013c6c <udp_sendto_if+0x68>)
90013c3c:	f240 2283 	movw	r2, #643	; 0x283
90013c40:	490f      	ldr	r1, [pc, #60]	; (90013c80 <udp_sendto_if+0x7c>)
90013c42:	e7e6      	b.n	90013c12 <udp_sendto_if+0xe>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
90013c44:	6805      	ldr	r5, [r0, #0]
90013c46:	b11d      	cbz	r5, 90013c50 <udp_sendto_if+0x4c>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
90013c48:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
90013c4c:	2ee0      	cmp	r6, #224	; 0xe0
90013c4e:	d105      	bne.n	90013c5c <udp_sendto_if+0x58>
      src_ip = netif_ip_addr4(netif);
90013c50:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
90013c52:	e9cd 4500 	strd	r4, r5, [sp]
90013c56:	f7ff ff3d 	bl	90013ad4 <udp_sendto_if_src>
90013c5a:	e7df      	b.n	90013c1c <udp_sendto_if+0x18>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
90013c5c:	6866      	ldr	r6, [r4, #4]
90013c5e:	42b5      	cmp	r5, r6
90013c60:	d101      	bne.n	90013c66 <udp_sendto_if+0x62>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
90013c62:	4605      	mov	r5, r0
90013c64:	e7f5      	b.n	90013c52 <udp_sendto_if+0x4e>
        return ERR_RTE;
90013c66:	f06f 0003 	mvn.w	r0, #3
90013c6a:	e7d7      	b.n	90013c1c <udp_sendto_if+0x18>
90013c6c:	9002e290 	.word	0x9002e290
90013c70:	9002e448 	.word	0x9002e448
90013c74:	9002a254 	.word	0x9002a254
90013c78:	9002e463 	.word	0x9002e463
90013c7c:	9002e47f 	.word	0x9002e47f
90013c80:	9002e49d 	.word	0x9002e49d

90013c84 <udp_sendto>:
{
90013c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
90013c86:	460e      	mov	r6, r1
90013c88:	4615      	mov	r5, r2
90013c8a:	461f      	mov	r7, r3
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
90013c8c:	4604      	mov	r4, r0
90013c8e:	b950      	cbnz	r0, 90013ca6 <udp_sendto+0x22>
90013c90:	4b15      	ldr	r3, [pc, #84]	; (90013ce8 <udp_sendto+0x64>)
90013c92:	f44f 7206 	mov.w	r2, #536	; 0x218
90013c96:	4915      	ldr	r1, [pc, #84]	; (90013cec <udp_sendto+0x68>)
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
90013c98:	4815      	ldr	r0, [pc, #84]	; (90013cf0 <udp_sendto+0x6c>)
90013c9a:	f015 fc19 	bl	900294d0 <iprintf>
90013c9e:	f06f 000f 	mvn.w	r0, #15
}
90013ca2:	b003      	add	sp, #12
90013ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
90013ca6:	b921      	cbnz	r1, 90013cb2 <udp_sendto+0x2e>
90013ca8:	4b0f      	ldr	r3, [pc, #60]	; (90013ce8 <udp_sendto+0x64>)
90013caa:	f240 2219 	movw	r2, #537	; 0x219
90013cae:	4911      	ldr	r1, [pc, #68]	; (90013cf4 <udp_sendto+0x70>)
90013cb0:	e7f2      	b.n	90013c98 <udp_sendto+0x14>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
90013cb2:	b922      	cbnz	r2, 90013cbe <udp_sendto+0x3a>
90013cb4:	4b0c      	ldr	r3, [pc, #48]	; (90013ce8 <udp_sendto+0x64>)
90013cb6:	f240 221a 	movw	r2, #538	; 0x21a
90013cba:	490f      	ldr	r1, [pc, #60]	; (90013cf8 <udp_sendto+0x74>)
90013cbc:	e7ec      	b.n	90013c98 <udp_sendto+0x14>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
90013cbe:	7a00      	ldrb	r0, [r0, #8]
90013cc0:	b150      	cbz	r0, 90013cd8 <udp_sendto+0x54>
    netif = netif_get_by_index(pcb->netif_idx);
90013cc2:	f7fa fcc9 	bl	9000e658 <netif_get_by_index>
  if (netif == NULL) {
90013cc6:	b158      	cbz	r0, 90013ce0 <udp_sendto+0x5c>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
90013cc8:	9000      	str	r0, [sp, #0]
90013cca:	463b      	mov	r3, r7
90013ccc:	462a      	mov	r2, r5
90013cce:	4631      	mov	r1, r6
90013cd0:	4620      	mov	r0, r4
90013cd2:	f7ff ff97 	bl	90013c04 <udp_sendto_if>
90013cd6:	e7e4      	b.n	90013ca2 <udp_sendto+0x1e>
      netif = ip_route(&pcb->local_ip, dst_ip);
90013cd8:	4610      	mov	r0, r2
90013cda:	f7f9 fa45 	bl	9000d168 <ip4_route>
90013cde:	e7f2      	b.n	90013cc6 <udp_sendto+0x42>
    return ERR_RTE;
90013ce0:	f06f 0003 	mvn.w	r0, #3
90013ce4:	e7dd      	b.n	90013ca2 <udp_sendto+0x1e>
90013ce6:	bf00      	nop
90013ce8:	9002e290 	.word	0x9002e290
90013cec:	9002e4ba 	.word	0x9002e4ba
90013cf0:	9002a254 	.word	0x9002a254
90013cf4:	9002e4d2 	.word	0x9002e4d2
90013cf8:	9002e4eb 	.word	0x9002e4eb

90013cfc <udp_send>:
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
90013cfc:	4602      	mov	r2, r0
{
90013cfe:	b510      	push	{r4, lr}
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
90013d00:	b948      	cbnz	r0, 90013d16 <udp_send+0x1a>
90013d02:	4b0b      	ldr	r3, [pc, #44]	; (90013d30 <udp_send+0x34>)
90013d04:	f240 12d5 	movw	r2, #469	; 0x1d5
90013d08:	490a      	ldr	r1, [pc, #40]	; (90013d34 <udp_send+0x38>)
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
90013d0a:	480b      	ldr	r0, [pc, #44]	; (90013d38 <udp_send+0x3c>)
90013d0c:	f015 fbe0 	bl	900294d0 <iprintf>
}
90013d10:	f06f 000f 	mvn.w	r0, #15
90013d14:	bd10      	pop	{r4, pc}
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
90013d16:	b921      	cbnz	r1, 90013d22 <udp_send+0x26>
90013d18:	4b05      	ldr	r3, [pc, #20]	; (90013d30 <udp_send+0x34>)
90013d1a:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
90013d1e:	4907      	ldr	r1, [pc, #28]	; (90013d3c <udp_send+0x40>)
90013d20:	e7f3      	b.n	90013d0a <udp_send+0xe>
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
90013d22:	8a83      	ldrh	r3, [r0, #20]
90013d24:	3204      	adds	r2, #4
}
90013d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
90013d2a:	f7ff bfab 	b.w	90013c84 <udp_sendto>
90013d2e:	bf00      	nop
90013d30:	9002e290 	.word	0x9002e290
90013d34:	9002e506 	.word	0x9002e506
90013d38:	9002a254 	.word	0x9002a254
90013d3c:	9002e51c 	.word	0x9002e51c

90013d40 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
90013d40:	b570      	push	{r4, r5, r6, lr}
90013d42:	460d      	mov	r5, r1
90013d44:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
90013d46:	4604      	mov	r4, r0
90013d48:	b948      	cbnz	r0, 90013d5e <udp_connect+0x1e>
90013d4a:	4b16      	ldr	r3, [pc, #88]	; (90013da4 <udp_connect+0x64>)
90013d4c:	f240 4235 	movw	r2, #1077	; 0x435
90013d50:	4915      	ldr	r1, [pc, #84]	; (90013da8 <udp_connect+0x68>)
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
90013d52:	4816      	ldr	r0, [pc, #88]	; (90013dac <udp_connect+0x6c>)
90013d54:	f015 fbbc 	bl	900294d0 <iprintf>
90013d58:	f06f 000f 	mvn.w	r0, #15
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
}
90013d5c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
90013d5e:	b921      	cbnz	r1, 90013d6a <udp_connect+0x2a>
90013d60:	4b10      	ldr	r3, [pc, #64]	; (90013da4 <udp_connect+0x64>)
90013d62:	f240 4236 	movw	r2, #1078	; 0x436
90013d66:	4912      	ldr	r1, [pc, #72]	; (90013db0 <udp_connect+0x70>)
90013d68:	e7f3      	b.n	90013d52 <udp_connect+0x12>
  if (pcb->local_port == 0) {
90013d6a:	8a42      	ldrh	r2, [r0, #18]
90013d6c:	b16a      	cbz	r2, 90013d8a <udp_connect+0x4a>
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
90013d6e:	682b      	ldr	r3, [r5, #0]
  pcb->remote_port = port;
90013d70:	82a6      	strh	r6, [r4, #20]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
90013d72:	6063      	str	r3, [r4, #4]
  pcb->flags |= UDP_FLAGS_CONNECTED;
90013d74:	7c23      	ldrb	r3, [r4, #16]
90013d76:	f043 0304 	orr.w	r3, r3, #4
90013d7a:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
90013d7c:	4b0d      	ldr	r3, [pc, #52]	; (90013db4 <udp_connect+0x74>)
90013d7e:	681a      	ldr	r2, [r3, #0]
90013d80:	4610      	mov	r0, r2
90013d82:	b940      	cbnz	r0, 90013d96 <udp_connect+0x56>
  pcb->next = udp_pcbs;
90013d84:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
90013d86:	601c      	str	r4, [r3, #0]
  return ERR_OK;
90013d88:	e7e8      	b.n	90013d5c <udp_connect+0x1c>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
90013d8a:	4601      	mov	r1, r0
90013d8c:	f7ff fe3a 	bl	90013a04 <udp_bind>
    if (err != ERR_OK) {
90013d90:	2800      	cmp	r0, #0
90013d92:	d0ec      	beq.n	90013d6e <udp_connect+0x2e>
90013d94:	e7e2      	b.n	90013d5c <udp_connect+0x1c>
    if (pcb == ipcb) {
90013d96:	42a0      	cmp	r0, r4
90013d98:	d001      	beq.n	90013d9e <udp_connect+0x5e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
90013d9a:	68c0      	ldr	r0, [r0, #12]
90013d9c:	e7f1      	b.n	90013d82 <udp_connect+0x42>
      return ERR_OK;
90013d9e:	2000      	movs	r0, #0
90013da0:	e7dc      	b.n	90013d5c <udp_connect+0x1c>
90013da2:	bf00      	nop
90013da4:	9002e290 	.word	0x9002e290
90013da8:	9002e533 	.word	0x9002e533
90013dac:	9002a254 	.word	0x9002a254
90013db0:	9002e54c 	.word	0x9002e54c
90013db4:	2002cb88 	.word	0x2002cb88

90013db8 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
90013db8:	b930      	cbnz	r0, 90013dc8 <udp_recv+0x10>
90013dba:	4b05      	ldr	r3, [pc, #20]	; (90013dd0 <udp_recv+0x18>)
90013dbc:	f240 428a 	movw	r2, #1162	; 0x48a
90013dc0:	4904      	ldr	r1, [pc, #16]	; (90013dd4 <udp_recv+0x1c>)
90013dc2:	4805      	ldr	r0, [pc, #20]	; (90013dd8 <udp_recv+0x20>)
90013dc4:	f015 bb84 	b.w	900294d0 <iprintf>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
90013dc8:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
90013dcc:	4770      	bx	lr
90013dce:	bf00      	nop
90013dd0:	9002e290 	.word	0x9002e290
90013dd4:	9002e568 	.word	0x9002e568
90013dd8:	9002a254 	.word	0x9002a254

90013ddc <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
90013ddc:	4601      	mov	r1, r0
90013dde:	b930      	cbnz	r0, 90013dee <udp_remove+0x12>
90013de0:	4b0d      	ldr	r3, [pc, #52]	; (90013e18 <udp_remove+0x3c>)
90013de2:	f240 42a1 	movw	r2, #1185	; 0x4a1
90013de6:	490d      	ldr	r1, [pc, #52]	; (90013e1c <udp_remove+0x40>)
90013de8:	480d      	ldr	r0, [pc, #52]	; (90013e20 <udp_remove+0x44>)
90013dea:	f015 bb71 	b.w	900294d0 <iprintf>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
90013dee:	4a0d      	ldr	r2, [pc, #52]	; (90013e24 <udp_remove+0x48>)
90013df0:	6813      	ldr	r3, [r2, #0]
90013df2:	4283      	cmp	r3, r0
90013df4:	d105      	bne.n	90013e02 <udp_remove+0x26>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
90013df6:	68c3      	ldr	r3, [r0, #12]
90013df8:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
90013dfa:	2000      	movs	r0, #0
90013dfc:	f7fa ba20 	b.w	9000e240 <memp_free>
90013e00:	4613      	mov	r3, r2
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
90013e02:	2b00      	cmp	r3, #0
90013e04:	d0f9      	beq.n	90013dfa <udp_remove+0x1e>
      if (pcb2->next != NULL && pcb2->next == pcb) {
90013e06:	68da      	ldr	r2, [r3, #12]
90013e08:	2a00      	cmp	r2, #0
90013e0a:	d0f6      	beq.n	90013dfa <udp_remove+0x1e>
90013e0c:	428a      	cmp	r2, r1
90013e0e:	d1f7      	bne.n	90013e00 <udp_remove+0x24>
        pcb2->next = pcb->next;
90013e10:	68ca      	ldr	r2, [r1, #12]
90013e12:	60da      	str	r2, [r3, #12]
        break;
90013e14:	e7f1      	b.n	90013dfa <udp_remove+0x1e>
90013e16:	bf00      	nop
90013e18:	9002e290 	.word	0x9002e290
90013e1c:	9002e57e 	.word	0x9002e57e
90013e20:	9002a254 	.word	0x9002a254
90013e24:	2002cb88 	.word	0x2002cb88

90013e28 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
90013e28:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
90013e2a:	2000      	movs	r0, #0
90013e2c:	f7fa f9ec 	bl	9000e208 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
90013e30:	4604      	mov	r4, r0
90013e32:	b128      	cbz	r0, 90013e40 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
90013e34:	2220      	movs	r2, #32
90013e36:	2100      	movs	r1, #0
90013e38:	f014 ffaa 	bl	90028d90 <memset>
    pcb->ttl = UDP_TTL;
90013e3c:	2380      	movs	r3, #128	; 0x80
90013e3e:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
90013e40:	4620      	mov	r0, r4
90013e42:	bd10      	pop	{r4, pc}

90013e44 <udp_new_ip_type>:
{
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
90013e44:	f7ff bff0 	b.w	90013e28 <udp_new>

90013e48 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
90013e48:	b510      	push	{r4, lr}
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
90013e4a:	b138      	cbz	r0, 90013e5c <udp_netif_ip_addr_changed+0x14>
90013e4c:	6803      	ldr	r3, [r0, #0]
90013e4e:	b12b      	cbz	r3, 90013e5c <udp_netif_ip_addr_changed+0x14>
90013e50:	b121      	cbz	r1, 90013e5c <udp_netif_ip_addr_changed+0x14>
90013e52:	680b      	ldr	r3, [r1, #0]
90013e54:	b113      	cbz	r3, 90013e5c <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
90013e56:	4b06      	ldr	r3, [pc, #24]	; (90013e70 <udp_netif_ip_addr_changed+0x28>)
90013e58:	681b      	ldr	r3, [r3, #0]
90013e5a:	b903      	cbnz	r3, 90013e5e <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
90013e5c:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
90013e5e:	681c      	ldr	r4, [r3, #0]
90013e60:	6802      	ldr	r2, [r0, #0]
90013e62:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
90013e64:	bf04      	itt	eq
90013e66:	680a      	ldreq	r2, [r1, #0]
90013e68:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
90013e6a:	68db      	ldr	r3, [r3, #12]
90013e6c:	e7f5      	b.n	90013e5a <udp_netif_ip_addr_changed+0x12>
90013e6e:	bf00      	nop
90013e70:	2002cb88 	.word	0x2002cb88

90013e74 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
90013e74:	8880      	ldrh	r0, [r0, #4]
90013e76:	4770      	bx	lr

90013e78 <_ZN8touchgfx17AbstractPartition5clearEv>:
90013e78:	2300      	movs	r3, #0
90013e7a:	8083      	strh	r3, [r0, #4]
90013e7c:	4770      	bx	lr
	...

90013e80 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
90013e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90013e82:	6803      	ldr	r3, [r0, #0]
90013e84:	460e      	mov	r6, r1
90013e86:	2100      	movs	r1, #0
90013e88:	4605      	mov	r5, r0
90013e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90013e8c:	4798      	blx	r3
90013e8e:	4604      	mov	r4, r0
90013e90:	682b      	ldr	r3, [r5, #0]
90013e92:	4628      	mov	r0, r5
90013e94:	1b34      	subs	r4, r6, r4
90013e96:	6a1b      	ldr	r3, [r3, #32]
90013e98:	b2a4      	uxth	r4, r4
90013e9a:	4798      	blx	r3
90013e9c:	88ab      	ldrh	r3, [r5, #4]
90013e9e:	fbb4 f4f0 	udiv	r4, r4, r0
90013ea2:	42a3      	cmp	r3, r4
90013ea4:	d805      	bhi.n	90013eb2 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
90013ea6:	4b0e      	ldr	r3, [pc, #56]	; (90013ee0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
90013ea8:	2120      	movs	r1, #32
90013eaa:	4a0e      	ldr	r2, [pc, #56]	; (90013ee4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
90013eac:	480e      	ldr	r0, [pc, #56]	; (90013ee8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
90013eae:	f014 fec1 	bl	90028c34 <__assert_func>
90013eb2:	682b      	ldr	r3, [r5, #0]
90013eb4:	2100      	movs	r1, #0
90013eb6:	4628      	mov	r0, r5
90013eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90013eba:	4798      	blx	r3
90013ebc:	682b      	ldr	r3, [r5, #0]
90013ebe:	4607      	mov	r7, r0
90013ec0:	4628      	mov	r0, r5
90013ec2:	6a1b      	ldr	r3, [r3, #32]
90013ec4:	4798      	blx	r3
90013ec6:	1bf3      	subs	r3, r6, r7
90013ec8:	b29b      	uxth	r3, r3
90013eca:	fbb3 f2f0 	udiv	r2, r3, r0
90013ece:	fb02 3010 	mls	r0, r2, r0, r3
90013ed2:	b118      	cbz	r0, 90013edc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
90013ed4:	4b05      	ldr	r3, [pc, #20]	; (90013eec <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
90013ed6:	2121      	movs	r1, #33	; 0x21
90013ed8:	4a02      	ldr	r2, [pc, #8]	; (90013ee4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
90013eda:	e7e7      	b.n	90013eac <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
90013edc:	4620      	mov	r0, r4
90013ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90013ee0:	9002e596 	.word	0x9002e596
90013ee4:	9002e702 	.word	0x9002e702
90013ee8:	9002e5ab 	.word	0x9002e5ab
90013eec:	9002e5d9 	.word	0x9002e5d9

90013ef0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
90013ef0:	b538      	push	{r3, r4, r5, lr}
90013ef2:	6803      	ldr	r3, [r0, #0]
90013ef4:	460d      	mov	r5, r1
90013ef6:	4604      	mov	r4, r0
90013ef8:	6a1b      	ldr	r3, [r3, #32]
90013efa:	4798      	blx	r3
90013efc:	4285      	cmp	r5, r0
90013efe:	d905      	bls.n	90013f0c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
90013f00:	4b0c      	ldr	r3, [pc, #48]	; (90013f34 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
90013f02:	2132      	movs	r1, #50	; 0x32
90013f04:	4a0c      	ldr	r2, [pc, #48]	; (90013f38 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
90013f06:	480d      	ldr	r0, [pc, #52]	; (90013f3c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
90013f08:	f014 fe94 	bl	90028c34 <__assert_func>
90013f0c:	6823      	ldr	r3, [r4, #0]
90013f0e:	4620      	mov	r0, r4
90013f10:	88a5      	ldrh	r5, [r4, #4]
90013f12:	69db      	ldr	r3, [r3, #28]
90013f14:	4798      	blx	r3
90013f16:	4285      	cmp	r5, r0
90013f18:	d303      	bcc.n	90013f22 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
90013f1a:	4b09      	ldr	r3, [pc, #36]	; (90013f40 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
90013f1c:	2133      	movs	r1, #51	; 0x33
90013f1e:	4a06      	ldr	r2, [pc, #24]	; (90013f38 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
90013f20:	e7f1      	b.n	90013f06 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
90013f22:	6823      	ldr	r3, [r4, #0]
90013f24:	4620      	mov	r0, r4
90013f26:	88a1      	ldrh	r1, [r4, #4]
90013f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90013f2a:	4798      	blx	r3
90013f2c:	88a3      	ldrh	r3, [r4, #4]
90013f2e:	3301      	adds	r3, #1
90013f30:	80a3      	strh	r3, [r4, #4]
90013f32:	bd38      	pop	{r3, r4, r5, pc}
90013f34:	9002e653 	.word	0x9002e653
90013f38:	9002e745 	.word	0x9002e745
90013f3c:	9002e5ab 	.word	0x9002e5ab
90013f40:	9002e66a 	.word	0x9002e66a

90013f44 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
90013f44:	b570      	push	{r4, r5, r6, lr}
90013f46:	6803      	ldr	r3, [r0, #0]
90013f48:	4616      	mov	r6, r2
90013f4a:	4604      	mov	r4, r0
90013f4c:	460d      	mov	r5, r1
90013f4e:	6a1b      	ldr	r3, [r3, #32]
90013f50:	4798      	blx	r3
90013f52:	4286      	cmp	r6, r0
90013f54:	d905      	bls.n	90013f62 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
90013f56:	4b06      	ldr	r3, [pc, #24]	; (90013f70 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
90013f58:	213c      	movs	r1, #60	; 0x3c
90013f5a:	4a06      	ldr	r2, [pc, #24]	; (90013f74 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
90013f5c:	4806      	ldr	r0, [pc, #24]	; (90013f78 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
90013f5e:	f014 fe69 	bl	90028c34 <__assert_func>
90013f62:	6823      	ldr	r3, [r4, #0]
90013f64:	4629      	mov	r1, r5
90013f66:	4620      	mov	r0, r4
90013f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90013f6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90013f6e:	4718      	bx	r3
90013f70:	9002e653 	.word	0x9002e653
90013f74:	9002e6b8 	.word	0x9002e6b8
90013f78:	9002e5ab 	.word	0x9002e5ab

90013f7c <_ZN8touchgfx17AbstractPartitionD1Ev>:
90013f7c:	4770      	bx	lr
	...

90013f80 <_ZN8touchgfx17AbstractPartitionC1Ev>:
90013f80:	4a02      	ldr	r2, [pc, #8]	; (90013f8c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
90013f82:	6002      	str	r2, [r0, #0]
90013f84:	2200      	movs	r2, #0
90013f86:	8082      	strh	r2, [r0, #4]
90013f88:	4770      	bx	lr
90013f8a:	bf00      	nop
90013f8c:	9002e68c 	.word	0x9002e68c

90013f90 <_ZN8touchgfx9Container13getFirstChildEv>:
90013f90:	6a80      	ldr	r0, [r0, #40]	; 0x28
90013f92:	4770      	bx	lr

90013f94 <_ZNK8touchgfx11ModalWindow18getBackgroundWidthEv>:
90013f94:	f8b0 008c 	ldrh.w	r0, [r0, #140]	; 0x8c
90013f98:	4770      	bx	lr

90013f9a <_ZNK8touchgfx11ModalWindow19getBackgroundHeightEv>:
90013f9a:	f8b0 008e 	ldrh.w	r0, [r0, #142]	; 0x8e
90013f9e:	4770      	bx	lr

90013fa0 <_ZNK8touchgfx11ModalWindow13getShadeAlphaEv>:
90013fa0:	f890 0052 	ldrb.w	r0, [r0, #82]	; 0x52
90013fa4:	4770      	bx	lr

90013fa6 <_ZNK8touchgfx11ModalWindow13getShadeColorEv>:
90013fa6:	6d40      	ldr	r0, [r0, #84]	; 0x54
90013fa8:	4770      	bx	lr

90013faa <_ZN8touchgfx11ModalWindow4showEv>:
90013faa:	2201      	movs	r2, #1
90013fac:	6803      	ldr	r3, [r0, #0]
90013fae:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
90013fb2:	695b      	ldr	r3, [r3, #20]
90013fb4:	4718      	bx	r3

90013fb6 <_ZN8touchgfx11ModalWindow4hideEv>:
90013fb6:	2200      	movs	r2, #0
90013fb8:	6803      	ldr	r3, [r0, #0]
90013fba:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
90013fbe:	695b      	ldr	r3, [r3, #20]
90013fc0:	4718      	bx	r3

90013fc2 <_ZN8touchgfx11ModalWindowD1Ev>:
90013fc2:	4770      	bx	lr

90013fc4 <_ZN8touchgfx11ModalWindow3addERNS_8DrawableE>:
90013fc4:	3058      	adds	r0, #88	; 0x58
90013fc6:	f000 b999 	b.w	900142fc <_ZN8touchgfx9Container3addERNS_8DrawableE>

90013fca <_ZN8touchgfx11ModalWindow13setShadeColorENS_9colortypeE>:
90013fca:	6541      	str	r1, [r0, #84]	; 0x54
90013fcc:	302c      	adds	r0, #44	; 0x2c
90013fce:	f005 bf91 	b.w	90019ef4 <_ZNK8touchgfx8Drawable10invalidateEv>

90013fd2 <_ZN8touchgfx11ModalWindow13setShadeAlphaEh>:
90013fd2:	f880 1052 	strb.w	r1, [r0, #82]	; 0x52
90013fd6:	302c      	adds	r0, #44	; 0x2c
90013fd8:	f005 bf8c 	b.w	90019ef4 <_ZNK8touchgfx8Drawable10invalidateEv>

90013fdc <_ZN8touchgfx11ModalWindow6removeERNS_8DrawableE>:
90013fdc:	3058      	adds	r0, #88	; 0x58
90013fde:	f000 b95b 	b.w	90014298 <_ZN8touchgfx9Container6removeERNS_8DrawableE>

90013fe2 <_ZN8touchgfx11ModalWindowD0Ev>:
90013fe2:	b510      	push	{r4, lr}
90013fe4:	4604      	mov	r4, r0
90013fe6:	21b0      	movs	r1, #176	; 0xb0
90013fe8:	f014 f848 	bl	9002807c <_ZdlPvj>
90013fec:	4620      	mov	r0, r4
90013fee:	bd10      	pop	{r4, pc}

90013ff0 <_ZN8touchgfx11ModalWindow13setBackgroundERKtss>:
90013ff0:	b570      	push	{r4, r5, r6, lr}
90013ff2:	4604      	mov	r4, r0
90013ff4:	461e      	mov	r6, r3
90013ff6:	4615      	mov	r5, r2
90013ff8:	f854 3b58 	ldr.w	r3, [r4], #88
90013ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90014000:	4798      	blx	r3
90014002:	4632      	mov	r2, r6
90014004:	4629      	mov	r1, r5
90014006:	4620      	mov	r0, r4
90014008:	f7ee fdd2 	bl	90002bb0 <_ZN8touchgfx8Drawable5setXYEss>
9001400c:	bd70      	pop	{r4, r5, r6, pc}

9001400e <_ZN8touchgfx8Drawable14setWidthHeightEss>:
9001400e:	b570      	push	{r4, r5, r6, lr}
90014010:	6803      	ldr	r3, [r0, #0]
90014012:	4604      	mov	r4, r0
90014014:	4615      	mov	r5, r2
90014016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90014018:	4798      	blx	r3
9001401a:	6823      	ldr	r3, [r4, #0]
9001401c:	4629      	mov	r1, r5
9001401e:	4620      	mov	r0, r4
90014020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90014022:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90014026:	4718      	bx	r3

90014028 <_ZN8touchgfx11ModalWindow13setBackgroundERKt>:
90014028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
9001402a:	f100 0584 	add.w	r5, r0, #132	; 0x84
9001402e:	880b      	ldrh	r3, [r1, #0]
90014030:	a902      	add	r1, sp, #8
90014032:	4604      	mov	r4, r0
90014034:	4628      	mov	r0, r5
90014036:	f821 3d04 	strh.w	r3, [r1, #-4]!
9001403a:	f003 fa19 	bl	90017470 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
9001403e:	2200      	movs	r2, #0
90014040:	4628      	mov	r0, r5
90014042:	f104 0558 	add.w	r5, r4, #88	; 0x58
90014046:	4611      	mov	r1, r2
90014048:	f7ee fdb2 	bl	90002bb0 <_ZN8touchgfx8Drawable5setXYEss>
9001404c:	f9b4 608c 	ldrsh.w	r6, [r4, #140]	; 0x8c
90014050:	f9b4 708e 	ldrsh.w	r7, [r4, #142]	; 0x8e
90014054:	2302      	movs	r3, #2
90014056:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
9001405a:	4628      	mov	r0, r5
9001405c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
90014060:	1bd2      	subs	r2, r2, r7
90014062:	1b89      	subs	r1, r1, r6
90014064:	fb92 f2f3 	sdiv	r2, r2, r3
90014068:	fb91 f1f3 	sdiv	r1, r1, r3
9001406c:	b212      	sxth	r2, r2
9001406e:	b209      	sxth	r1, r1
90014070:	f7ee fd9e 	bl	90002bb0 <_ZN8touchgfx8Drawable5setXYEss>
90014074:	463a      	mov	r2, r7
90014076:	4631      	mov	r1, r6
90014078:	4628      	mov	r0, r5
9001407a:	f7ff ffc8 	bl	9001400e <_ZN8touchgfx8Drawable14setWidthHeightEss>
9001407e:	6823      	ldr	r3, [r4, #0]
90014080:	4620      	mov	r0, r4
90014082:	695b      	ldr	r3, [r3, #20]
90014084:	4798      	blx	r3
90014086:	b003      	add	sp, #12
90014088:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

9001408c <_ZN8touchgfx11ModalWindowC1Ev>:
9001408c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
90014090:	4604      	mov	r4, r0
90014092:	2600      	movs	r6, #0
90014094:	f7ee fd7c 	bl	90002b90 <_ZN8touchgfx8DrawableC1Ev>
90014098:	4b3e      	ldr	r3, [pc, #248]	; (90014194 <_ZN8touchgfx11ModalWindowC1Ev+0x108>)
9001409a:	4625      	mov	r5, r4
9001409c:	2226      	movs	r2, #38	; 0x26
9001409e:	4631      	mov	r1, r6
900140a0:	62a6      	str	r6, [r4, #40]	; 0x28
900140a2:	f845 3b2c 	str.w	r3, [r5], #44
900140a6:	4628      	mov	r0, r5
900140a8:	f014 fe72 	bl	90028d90 <memset>
900140ac:	4628      	mov	r0, r5
900140ae:	f7ee fd6f 	bl	90002b90 <_ZN8touchgfx8DrawableC1Ev>
900140b2:	4b39      	ldr	r3, [pc, #228]	; (90014198 <_ZN8touchgfx11ModalWindowC1Ev+0x10c>)
900140b4:	f104 0858 	add.w	r8, r4, #88	; 0x58
900140b8:	6566      	str	r6, [r4, #84]	; 0x54
900140ba:	62e3      	str	r3, [r4, #44]	; 0x2c
900140bc:	23ff      	movs	r3, #255	; 0xff
900140be:	4640      	mov	r0, r8
900140c0:	f104 0784 	add.w	r7, r4, #132	; 0x84
900140c4:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
900140c8:	f64f 7aff 	movw	sl, #65535	; 0xffff
900140cc:	f7ee fd60 	bl	90002b90 <_ZN8touchgfx8DrawableC1Ev>
900140d0:	4b32      	ldr	r3, [pc, #200]	; (9001419c <_ZN8touchgfx11ModalWindowC1Ev+0x110>)
900140d2:	f10d 0908 	add.w	r9, sp, #8
900140d6:	2226      	movs	r2, #38	; 0x26
900140d8:	65a3      	str	r3, [r4, #88]	; 0x58
900140da:	4631      	mov	r1, r6
900140dc:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
900140e0:	4638      	mov	r0, r7
900140e2:	f829 ad04 	strh.w	sl, [r9, #-4]!
900140e6:	f014 fe53 	bl	90028d90 <memset>
900140ea:	4638      	mov	r0, r7
900140ec:	f7ee fd50 	bl	90002b90 <_ZN8touchgfx8DrawableC1Ev>
900140f0:	4b2b      	ldr	r3, [pc, #172]	; (900141a0 <_ZN8touchgfx11ModalWindowC1Ev+0x114>)
900140f2:	4649      	mov	r1, r9
900140f4:	4638      	mov	r0, r7
900140f6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
900140fa:	f8a4 a0aa 	strh.w	sl, [r4, #170]	; 0xaa
900140fe:	f884 a0ac 	strb.w	sl, [r4, #172]	; 0xac
90014102:	f003 f9b5 	bl	90017470 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90014106:	4b27      	ldr	r3, [pc, #156]	; (900141a4 <_ZN8touchgfx11ModalWindowC1Ev+0x118>)
90014108:	4620      	mov	r0, r4
9001410a:	f9b3 2000 	ldrsh.w	r2, [r3]
9001410e:	4b26      	ldr	r3, [pc, #152]	; (900141a8 <_ZN8touchgfx11ModalWindowC1Ev+0x11c>)
90014110:	f9b3 1000 	ldrsh.w	r1, [r3]
90014114:	f7ff ff7b 	bl	9001400e <_ZN8touchgfx8Drawable14setWidthHeightEss>
90014118:	4b24      	ldr	r3, [pc, #144]	; (900141ac <_ZN8touchgfx11ModalWindowC1Ev+0x120>)
9001411a:	681b      	ldr	r3, [r3, #0]
9001411c:	b92b      	cbnz	r3, 9001412a <_ZN8touchgfx11ModalWindowC1Ev+0x9e>
9001411e:	4b24      	ldr	r3, [pc, #144]	; (900141b0 <_ZN8touchgfx11ModalWindowC1Ev+0x124>)
90014120:	2135      	movs	r1, #53	; 0x35
90014122:	4a24      	ldr	r2, [pc, #144]	; (900141b4 <_ZN8touchgfx11ModalWindowC1Ev+0x128>)
90014124:	4824      	ldr	r0, [pc, #144]	; (900141b8 <_ZN8touchgfx11ModalWindowC1Ev+0x12c>)
90014126:	f014 fd85 	bl	90028c34 <__assert_func>
9001412a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
9001412e:	b10a      	cbz	r2, 90014134 <_ZN8touchgfx11ModalWindowC1Ev+0xa8>
90014130:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90014132:	b900      	cbnz	r0, 90014136 <_ZN8touchgfx11ModalWindowC1Ev+0xaa>
90014134:	6898      	ldr	r0, [r3, #8]
90014136:	6803      	ldr	r3, [r0, #0]
90014138:	6a9e      	ldr	r6, [r3, #40]	; 0x28
9001413a:	2300      	movs	r3, #0
9001413c:	461a      	mov	r2, r3
9001413e:	4619      	mov	r1, r3
90014140:	47b0      	blx	r6
90014142:	2200      	movs	r2, #0
90014144:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
90014148:	4606      	mov	r6, r0
9001414a:	f9b4 a00a 	ldrsh.w	sl, [r4, #10]
9001414e:	4611      	mov	r1, r2
90014150:	4628      	mov	r0, r5
90014152:	f7ee fd2d 	bl	90002bb0 <_ZN8touchgfx8Drawable5setXYEss>
90014156:	4652      	mov	r2, sl
90014158:	4649      	mov	r1, r9
9001415a:	4628      	mov	r0, r5
9001415c:	f7ff ff57 	bl	9001400e <_ZN8touchgfx8Drawable14setWidthHeightEss>
90014160:	2301      	movs	r3, #1
90014162:	4628      	mov	r0, r5
90014164:	6566      	str	r6, [r4, #84]	; 0x54
90014166:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
9001416a:	2360      	movs	r3, #96	; 0x60
9001416c:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
90014170:	f005 fec0 	bl	90019ef4 <_ZNK8touchgfx8Drawable10invalidateEv>
90014174:	4629      	mov	r1, r5
90014176:	4620      	mov	r0, r4
90014178:	f000 f8c0 	bl	900142fc <_ZN8touchgfx9Container3addERNS_8DrawableE>
9001417c:	4641      	mov	r1, r8
9001417e:	4620      	mov	r0, r4
90014180:	f000 f8bc 	bl	900142fc <_ZN8touchgfx9Container3addERNS_8DrawableE>
90014184:	4640      	mov	r0, r8
90014186:	4639      	mov	r1, r7
90014188:	f000 f8b8 	bl	900142fc <_ZN8touchgfx9Container3addERNS_8DrawableE>
9001418c:	4620      	mov	r0, r4
9001418e:	b002      	add	sp, #8
90014190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90014194:	9002e78c 	.word	0x9002e78c
90014198:	9002f5e0 	.word	0x9002f5e0
9001419c:	9002e960 	.word	0x9002e960
900141a0:	9002f804 	.word	0x9002f804
900141a4:	20026cd2 	.word	0x20026cd2
900141a8:	20026cd0 	.word	0x20026cd0
900141ac:	20026cdc 	.word	0x20026cdc
900141b0:	9002ae59 	.word	0x9002ae59
900141b4:	9002e834 	.word	0x9002e834
900141b8:	9002af16 	.word	0x9002af16

900141bc <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
900141bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
900141be:	2000      	movs	r0, #0
900141c0:	b12b      	cbz	r3, 900141ce <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
900141c2:	b920      	cbnz	r0, 900141ce <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
900141c4:	1a5a      	subs	r2, r3, r1
900141c6:	699b      	ldr	r3, [r3, #24]
900141c8:	4250      	negs	r0, r2
900141ca:	4150      	adcs	r0, r2
900141cc:	e7f8      	b.n	900141c0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
900141ce:	4770      	bx	lr

900141d0 <_ZN8touchgfx9Container9removeAllEv>:
900141d0:	2200      	movs	r2, #0
900141d2:	6a83      	ldr	r3, [r0, #40]	; 0x28
900141d4:	b123      	cbz	r3, 900141e0 <_ZN8touchgfx9Container9removeAllEv+0x10>
900141d6:	6999      	ldr	r1, [r3, #24]
900141d8:	6281      	str	r1, [r0, #40]	; 0x28
900141da:	e9c3 2205 	strd	r2, r2, [r3, #20]
900141de:	e7f8      	b.n	900141d2 <_ZN8touchgfx9Container9removeAllEv+0x2>
900141e0:	4770      	bx	lr

900141e2 <_ZN8touchgfx9Container6unlinkEv>:
900141e2:	2300      	movs	r3, #0
900141e4:	6283      	str	r3, [r0, #40]	; 0x28
900141e6:	4770      	bx	lr

900141e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
900141e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900141ec:	461f      	mov	r7, r3
900141ee:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
900141f2:	460d      	mov	r5, r1
900141f4:	4616      	mov	r6, r2
900141f6:	b103      	cbz	r3, 900141fa <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
900141f8:	6038      	str	r0, [r7, #0]
900141fa:	6a84      	ldr	r4, [r0, #40]	; 0x28
900141fc:	b314      	cbz	r4, 90014244 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
900141fe:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
90014202:	b1eb      	cbz	r3, 90014240 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90014204:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90014208:	428d      	cmp	r5, r1
9001420a:	db19      	blt.n	90014240 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
9001420c:	b289      	uxth	r1, r1
9001420e:	8923      	ldrh	r3, [r4, #8]
90014210:	440b      	add	r3, r1
90014212:	b21b      	sxth	r3, r3
90014214:	429d      	cmp	r5, r3
90014216:	da13      	bge.n	90014240 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90014218:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
9001421c:	4296      	cmp	r6, r2
9001421e:	db0f      	blt.n	90014240 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90014220:	b292      	uxth	r2, r2
90014222:	8963      	ldrh	r3, [r4, #10]
90014224:	4413      	add	r3, r2
90014226:	b21b      	sxth	r3, r3
90014228:	429e      	cmp	r6, r3
9001422a:	da09      	bge.n	90014240 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
9001422c:	6823      	ldr	r3, [r4, #0]
9001422e:	1ab2      	subs	r2, r6, r2
90014230:	1a69      	subs	r1, r5, r1
90014232:	4620      	mov	r0, r4
90014234:	f8d3 8020 	ldr.w	r8, [r3, #32]
90014238:	b212      	sxth	r2, r2
9001423a:	463b      	mov	r3, r7
9001423c:	b209      	sxth	r1, r1
9001423e:	47c0      	blx	r8
90014240:	69a4      	ldr	r4, [r4, #24]
90014242:	e7db      	b.n	900141fc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
90014244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90014248 <_ZNK8touchgfx9Container12getSolidRectEv>:
90014248:	2200      	movs	r2, #0
9001424a:	8002      	strh	r2, [r0, #0]
9001424c:	8042      	strh	r2, [r0, #2]
9001424e:	8082      	strh	r2, [r0, #4]
90014250:	80c2      	strh	r2, [r0, #6]
90014252:	4770      	bx	lr

90014254 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
90014254:	b570      	push	{r4, r5, r6, lr}
90014256:	460d      	mov	r5, r1
90014258:	4616      	mov	r6, r2
9001425a:	6a84      	ldr	r4, [r0, #40]	; 0x28
9001425c:	b13c      	cbz	r4, 9001426e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
9001425e:	6823      	ldr	r3, [r4, #0]
90014260:	4620      	mov	r0, r4
90014262:	4632      	mov	r2, r6
90014264:	4629      	mov	r1, r5
90014266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90014268:	4798      	blx	r3
9001426a:	69a4      	ldr	r4, [r4, #24]
9001426c:	e7f6      	b.n	9001425c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
9001426e:	bd70      	pop	{r4, r5, r6, pc}

90014270 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
90014270:	b538      	push	{r3, r4, r5, lr}
90014272:	460d      	mov	r5, r1
90014274:	6a84      	ldr	r4, [r0, #40]	; 0x28
90014276:	b134      	cbz	r4, 90014286 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
90014278:	682b      	ldr	r3, [r5, #0]
9001427a:	4621      	mov	r1, r4
9001427c:	4628      	mov	r0, r5
9001427e:	689b      	ldr	r3, [r3, #8]
90014280:	4798      	blx	r3
90014282:	69a4      	ldr	r4, [r4, #24]
90014284:	e7f7      	b.n	90014276 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
90014286:	bd38      	pop	{r3, r4, r5, pc}

90014288 <_ZN8touchgfx9ContainerD1Ev>:
90014288:	4770      	bx	lr

9001428a <_ZN8touchgfx9ContainerD0Ev>:
9001428a:	b510      	push	{r4, lr}
9001428c:	4604      	mov	r4, r0
9001428e:	212c      	movs	r1, #44	; 0x2c
90014290:	f013 fef4 	bl	9002807c <_ZdlPvj>
90014294:	4620      	mov	r0, r4
90014296:	bd10      	pop	{r4, pc}

90014298 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
90014298:	6a83      	ldr	r3, [r0, #40]	; 0x28
9001429a:	b19b      	cbz	r3, 900142c4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
9001429c:	428b      	cmp	r3, r1
9001429e:	d109      	bne.n	900142b4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
900142a0:	699a      	ldr	r2, [r3, #24]
900142a2:	2100      	movs	r1, #0
900142a4:	6159      	str	r1, [r3, #20]
900142a6:	6282      	str	r2, [r0, #40]	; 0x28
900142a8:	b902      	cbnz	r2, 900142ac <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
900142aa:	4770      	bx	lr
900142ac:	6199      	str	r1, [r3, #24]
900142ae:	4770      	bx	lr
900142b0:	4613      	mov	r3, r2
900142b2:	b13a      	cbz	r2, 900142c4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
900142b4:	699a      	ldr	r2, [r3, #24]
900142b6:	428a      	cmp	r2, r1
900142b8:	d1fa      	bne.n	900142b0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
900142ba:	698a      	ldr	r2, [r1, #24]
900142bc:	619a      	str	r2, [r3, #24]
900142be:	2300      	movs	r3, #0
900142c0:	e9c1 3305 	strd	r3, r3, [r1, #20]
900142c4:	4770      	bx	lr

900142c6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
900142c6:	b410      	push	{r4}
900142c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
900142ca:	4604      	mov	r4, r0
900142cc:	b92b      	cbnz	r3, 900142da <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
900142ce:	6803      	ldr	r3, [r0, #0]
900142d0:	4611      	mov	r1, r2
900142d2:	f85d 4b04 	ldr.w	r4, [sp], #4
900142d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900142d8:	4718      	bx	r3
900142da:	b941      	cbnz	r1, 900142ee <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
900142dc:	6193      	str	r3, [r2, #24]
900142de:	6282      	str	r2, [r0, #40]	; 0x28
900142e0:	6154      	str	r4, [r2, #20]
900142e2:	f85d 4b04 	ldr.w	r4, [sp], #4
900142e6:	4770      	bx	lr
900142e8:	4603      	mov	r3, r0
900142ea:	2800      	cmp	r0, #0
900142ec:	d0f9      	beq.n	900142e2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
900142ee:	4299      	cmp	r1, r3
900142f0:	6998      	ldr	r0, [r3, #24]
900142f2:	d1f9      	bne.n	900142e8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
900142f4:	6190      	str	r0, [r2, #24]
900142f6:	618a      	str	r2, [r1, #24]
900142f8:	e7f2      	b.n	900142e0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

900142fc <_ZN8touchgfx9Container3addERNS_8DrawableE>:
900142fc:	4288      	cmp	r0, r1
900142fe:	b508      	push	{r3, lr}
90014300:	d105      	bne.n	9001430e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
90014302:	4b11      	ldr	r3, [pc, #68]	; (90014348 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
90014304:	2123      	movs	r1, #35	; 0x23
90014306:	4a11      	ldr	r2, [pc, #68]	; (9001434c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
90014308:	4811      	ldr	r0, [pc, #68]	; (90014350 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
9001430a:	f014 fc93 	bl	90028c34 <__assert_func>
9001430e:	694b      	ldr	r3, [r1, #20]
90014310:	b11b      	cbz	r3, 9001431a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
90014312:	4b10      	ldr	r3, [pc, #64]	; (90014354 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
90014314:	2124      	movs	r1, #36	; 0x24
90014316:	4a0d      	ldr	r2, [pc, #52]	; (9001434c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
90014318:	e7f6      	b.n	90014308 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
9001431a:	e9c1 0305 	strd	r0, r3, [r1, #20]
9001431e:	6a83      	ldr	r3, [r0, #40]	; 0x28
90014320:	b913      	cbnz	r3, 90014328 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
90014322:	6281      	str	r1, [r0, #40]	; 0x28
90014324:	bd08      	pop	{r3, pc}
90014326:	4613      	mov	r3, r2
90014328:	699a      	ldr	r2, [r3, #24]
9001432a:	b12a      	cbz	r2, 90014338 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
9001432c:	428b      	cmp	r3, r1
9001432e:	d1fa      	bne.n	90014326 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
90014330:	4b09      	ldr	r3, [pc, #36]	; (90014358 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
90014332:	2135      	movs	r1, #53	; 0x35
90014334:	4a05      	ldr	r2, [pc, #20]	; (9001434c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
90014336:	e7e7      	b.n	90014308 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
90014338:	428b      	cmp	r3, r1
9001433a:	d103      	bne.n	90014344 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
9001433c:	4b06      	ldr	r3, [pc, #24]	; (90014358 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
9001433e:	2138      	movs	r1, #56	; 0x38
90014340:	4a02      	ldr	r2, [pc, #8]	; (9001434c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
90014342:	e7e1      	b.n	90014308 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
90014344:	6199      	str	r1, [r3, #24]
90014346:	e7ed      	b.n	90014324 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
90014348:	9002e890 	.word	0x9002e890
9001434c:	9002e9e0 	.word	0x9002e9e0
90014350:	9002e8bc 	.word	0x9002e8bc
90014354:	9002e8ef 	.word	0x9002e8ef
90014358:	9002e925 	.word	0x9002e925

9001435c <_ZN8touchgfx4RectaNERKS0_>:
9001435c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90014360:	f9b1 7000 	ldrsh.w	r7, [r1]
90014364:	888c      	ldrh	r4, [r1, #4]
90014366:	f9b0 9000 	ldrsh.w	r9, [r0]
9001436a:	443c      	add	r4, r7
9001436c:	b2a4      	uxth	r4, r4
9001436e:	fa0f f884 	sxth.w	r8, r4
90014372:	45c1      	cmp	r9, r8
90014374:	da2f      	bge.n	900143d6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
90014376:	8882      	ldrh	r2, [r0, #4]
90014378:	444a      	add	r2, r9
9001437a:	b292      	uxth	r2, r2
9001437c:	fa0f fe82 	sxth.w	lr, r2
90014380:	4577      	cmp	r7, lr
90014382:	da28      	bge.n	900143d6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
90014384:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
90014388:	88cb      	ldrh	r3, [r1, #6]
9001438a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
9001438e:	442b      	add	r3, r5
90014390:	b21b      	sxth	r3, r3
90014392:	429e      	cmp	r6, r3
90014394:	da1f      	bge.n	900143d6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
90014396:	88c3      	ldrh	r3, [r0, #6]
90014398:	4433      	add	r3, r6
9001439a:	b29b      	uxth	r3, r3
9001439c:	fa0f fc83 	sxth.w	ip, r3
900143a0:	4565      	cmp	r5, ip
900143a2:	da18      	bge.n	900143d6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
900143a4:	454f      	cmp	r7, r9
900143a6:	bfb8      	it	lt
900143a8:	464f      	movlt	r7, r9
900143aa:	42b5      	cmp	r5, r6
900143ac:	bfb8      	it	lt
900143ae:	4635      	movlt	r5, r6
900143b0:	45f0      	cmp	r8, lr
900143b2:	bfd8      	it	le
900143b4:	4622      	movle	r2, r4
900143b6:	1bd2      	subs	r2, r2, r7
900143b8:	8082      	strh	r2, [r0, #4]
900143ba:	884a      	ldrh	r2, [r1, #2]
900143bc:	88c9      	ldrh	r1, [r1, #6]
900143be:	8007      	strh	r7, [r0, #0]
900143c0:	440a      	add	r2, r1
900143c2:	8045      	strh	r5, [r0, #2]
900143c4:	b292      	uxth	r2, r2
900143c6:	b211      	sxth	r1, r2
900143c8:	458c      	cmp	ip, r1
900143ca:	bfa8      	it	ge
900143cc:	4613      	movge	r3, r2
900143ce:	1b5b      	subs	r3, r3, r5
900143d0:	80c3      	strh	r3, [r0, #6]
900143d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900143d6:	2300      	movs	r3, #0
900143d8:	8003      	strh	r3, [r0, #0]
900143da:	8043      	strh	r3, [r0, #2]
900143dc:	8083      	strh	r3, [r0, #4]
900143de:	80c3      	strh	r3, [r0, #6]
900143e0:	e7f7      	b.n	900143d2 <_ZN8touchgfx4RectaNERKS0_+0x76>

900143e2 <_ZNK8touchgfx4Rect7isEmptyEv>:
900143e2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
900143e6:	2b00      	cmp	r3, #0
900143e8:	dd06      	ble.n	900143f8 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
900143ea:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
900143ee:	2800      	cmp	r0, #0
900143f0:	bfcc      	ite	gt
900143f2:	2000      	movgt	r0, #0
900143f4:	2001      	movle	r0, #1
900143f6:	4770      	bx	lr
900143f8:	2001      	movs	r0, #1
900143fa:	4770      	bx	lr

900143fc <_ZNK8touchgfx9Container16getContainedAreaEv>:
900143fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90014400:	2300      	movs	r3, #0
90014402:	4604      	mov	r4, r0
90014404:	6a8d      	ldr	r5, [r1, #40]	; 0x28
90014406:	8003      	strh	r3, [r0, #0]
90014408:	8043      	strh	r3, [r0, #2]
9001440a:	8083      	strh	r3, [r0, #4]
9001440c:	80c3      	strh	r3, [r0, #6]
9001440e:	2d00      	cmp	r5, #0
90014410:	d040      	beq.n	90014494 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
90014412:	1d28      	adds	r0, r5, #4
90014414:	f7ff ffe5 	bl	900143e2 <_ZNK8touchgfx4Rect7isEmptyEv>
90014418:	b988      	cbnz	r0, 9001443e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
9001441a:	4620      	mov	r0, r4
9001441c:	f7ff ffe1 	bl	900143e2 <_ZNK8touchgfx4Rect7isEmptyEv>
90014420:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
90014424:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
90014428:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
9001442c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
90014430:	b138      	cbz	r0, 90014442 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
90014432:	8022      	strh	r2, [r4, #0]
90014434:	8063      	strh	r3, [r4, #2]
90014436:	f8a4 e004 	strh.w	lr, [r4, #4]
9001443a:	f8a4 c006 	strh.w	ip, [r4, #6]
9001443e:	69ad      	ldr	r5, [r5, #24]
90014440:	e7e5      	b.n	9001440e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
90014442:	f9b4 0000 	ldrsh.w	r0, [r4]
90014446:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
9001444a:	4290      	cmp	r0, r2
9001444c:	4607      	mov	r7, r0
9001444e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
90014452:	460e      	mov	r6, r1
90014454:	bfa8      	it	ge
90014456:	4617      	movge	r7, r2
90014458:	4299      	cmp	r1, r3
9001445a:	4472      	add	r2, lr
9001445c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
90014460:	bfa8      	it	ge
90014462:	461e      	movge	r6, r3
90014464:	4440      	add	r0, r8
90014466:	4471      	add	r1, lr
90014468:	4463      	add	r3, ip
9001446a:	b200      	sxth	r0, r0
9001446c:	8027      	strh	r7, [r4, #0]
9001446e:	b212      	sxth	r2, r2
90014470:	8066      	strh	r6, [r4, #2]
90014472:	b209      	sxth	r1, r1
90014474:	b21b      	sxth	r3, r3
90014476:	4290      	cmp	r0, r2
90014478:	bfac      	ite	ge
9001447a:	ebc7 0200 	rsbge	r2, r7, r0
9001447e:	ebc7 0202 	rsblt	r2, r7, r2
90014482:	4299      	cmp	r1, r3
90014484:	bfac      	ite	ge
90014486:	ebc6 0301 	rsbge	r3, r6, r1
9001448a:	ebc6 0303 	rsblt	r3, r6, r3
9001448e:	80a2      	strh	r2, [r4, #4]
90014490:	80e3      	strh	r3, [r4, #6]
90014492:	e7d4      	b.n	9001443e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
90014494:	4620      	mov	r0, r4
90014496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

9001449a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
9001449a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
9001449e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
900144a2:	b383      	cbz	r3, 90014506 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
900144a4:	6a84      	ldr	r4, [r0, #40]	; 0x28
900144a6:	b374      	cbz	r4, 90014506 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
900144a8:	f9b1 5000 	ldrsh.w	r5, [r1]
900144ac:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
900144b0:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
900144b4:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
900144b8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
900144bc:	b303      	cbz	r3, 90014500 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
900144be:	4668      	mov	r0, sp
900144c0:	1d21      	adds	r1, r4, #4
900144c2:	f8ad 5000 	strh.w	r5, [sp]
900144c6:	f8ad 6002 	strh.w	r6, [sp, #2]
900144ca:	f8ad 7004 	strh.w	r7, [sp, #4]
900144ce:	f8ad 8006 	strh.w	r8, [sp, #6]
900144d2:	f7ff ff43 	bl	9001435c <_ZN8touchgfx4RectaNERKS0_>
900144d6:	4668      	mov	r0, sp
900144d8:	f7ff ff83 	bl	900143e2 <_ZNK8touchgfx4Rect7isEmptyEv>
900144dc:	b980      	cbnz	r0, 90014500 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
900144de:	f8bd 3000 	ldrh.w	r3, [sp]
900144e2:	4669      	mov	r1, sp
900144e4:	88a2      	ldrh	r2, [r4, #4]
900144e6:	4620      	mov	r0, r4
900144e8:	1a9b      	subs	r3, r3, r2
900144ea:	88e2      	ldrh	r2, [r4, #6]
900144ec:	f8ad 3000 	strh.w	r3, [sp]
900144f0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
900144f4:	1a9b      	subs	r3, r3, r2
900144f6:	f8ad 3002 	strh.w	r3, [sp, #2]
900144fa:	6823      	ldr	r3, [r4, #0]
900144fc:	689b      	ldr	r3, [r3, #8]
900144fe:	4798      	blx	r3
90014500:	69a4      	ldr	r4, [r4, #24]
90014502:	2c00      	cmp	r4, #0
90014504:	d1d8      	bne.n	900144b8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
90014506:	b002      	add	sp, #8
90014508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

9001450c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
9001450c:	b573      	push	{r0, r1, r4, r5, r6, lr}
9001450e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
90014512:	460d      	mov	r5, r1
90014514:	4616      	mov	r6, r2
90014516:	b323      	cbz	r3, 90014562 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
90014518:	6a84      	ldr	r4, [r0, #40]	; 0x28
9001451a:	b314      	cbz	r4, 90014562 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
9001451c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
90014520:	b1eb      	cbz	r3, 9001455e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
90014522:	6828      	ldr	r0, [r5, #0]
90014524:	466b      	mov	r3, sp
90014526:	6869      	ldr	r1, [r5, #4]
90014528:	c303      	stmia	r3!, {r0, r1}
9001452a:	4668      	mov	r0, sp
9001452c:	1d21      	adds	r1, r4, #4
9001452e:	f7ff ff15 	bl	9001435c <_ZN8touchgfx4RectaNERKS0_>
90014532:	4668      	mov	r0, sp
90014534:	f7ff ff55 	bl	900143e2 <_ZNK8touchgfx4Rect7isEmptyEv>
90014538:	b988      	cbnz	r0, 9001455e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
9001453a:	f8bd 3000 	ldrh.w	r3, [sp]
9001453e:	4669      	mov	r1, sp
90014540:	88a2      	ldrh	r2, [r4, #4]
90014542:	4620      	mov	r0, r4
90014544:	1a9b      	subs	r3, r3, r2
90014546:	88e2      	ldrh	r2, [r4, #6]
90014548:	f8ad 3000 	strh.w	r3, [sp]
9001454c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90014550:	1a9b      	subs	r3, r3, r2
90014552:	4632      	mov	r2, r6
90014554:	f8ad 3002 	strh.w	r3, [sp, #2]
90014558:	6823      	ldr	r3, [r4, #0]
9001455a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9001455c:	4798      	blx	r3
9001455e:	69a4      	ldr	r4, [r4, #24]
90014560:	e7db      	b.n	9001451a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
90014562:	b002      	add	sp, #8
90014564:	bd70      	pop	{r4, r5, r6, pc}

90014566 <_ZN8touchgfx14SwipeContainer14setSwipeCutoffEt>:
90014566:	8601      	strh	r1, [r0, #48]	; 0x30
90014568:	4770      	bx	lr

9001456a <_ZN8touchgfx14SwipeContainer13PageIndicatorD1Ev>:
9001456a:	4770      	bx	lr

9001456c <_ZN8touchgfx14SwipeContainer13PageIndicatorD0Ev>:
9001456c:	b510      	push	{r4, lr}
9001456e:	4604      	mov	r4, r0
90014570:	218c      	movs	r1, #140	; 0x8c
90014572:	f013 fd83 	bl	9002807c <_ZdlPvj>
90014576:	4620      	mov	r0, r4
90014578:	bd10      	pop	{r4, pc}
	...

9001457c <_ZN8touchgfx14SwipeContainerD1Ev>:
9001457c:	4b05      	ldr	r3, [pc, #20]	; (90014594 <_ZN8touchgfx14SwipeContainerD1Ev+0x18>)
9001457e:	b510      	push	{r4, lr}
90014580:	4604      	mov	r4, r0
90014582:	6003      	str	r3, [r0, #0]
90014584:	f004 fd10 	bl	90018fa8 <_ZN8touchgfx11Application11getInstanceEv>
90014588:	4621      	mov	r1, r4
9001458a:	f004 fd45 	bl	90019018 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
9001458e:	4620      	mov	r0, r4
90014590:	bd10      	pop	{r4, pc}
90014592:	bf00      	nop
90014594:	9002eb78 	.word	0x9002eb78

90014598 <_ZN8touchgfx14SwipeContainerD0Ev>:
90014598:	b510      	push	{r4, lr}
9001459a:	4604      	mov	r4, r0
9001459c:	f7ff ffee 	bl	9001457c <_ZN8touchgfx14SwipeContainerD1Ev>
900145a0:	21f8      	movs	r1, #248	; 0xf8
900145a2:	4620      	mov	r0, r4
900145a4:	f013 fd6a 	bl	9002807c <_ZdlPvj>
900145a8:	4620      	mov	r0, r4
900145aa:	bd10      	pop	{r4, pc}

900145ac <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE>:
900145ac:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
900145b0:	2b04      	cmp	r3, #4
900145b2:	d118      	bne.n	900145e6 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
900145b4:	790b      	ldrb	r3, [r1, #4]
900145b6:	2b01      	cmp	r3, #1
900145b8:	d115      	bne.n	900145e6 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
900145ba:	f9b0 3032 	ldrsh.w	r3, [r0, #50]	; 0x32
900145be:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
900145c2:	2b00      	cmp	r3, #0
900145c4:	8683      	strh	r3, [r0, #52]	; 0x34
900145c6:	86c2      	strh	r2, [r0, #54]	; 0x36
900145c8:	da10      	bge.n	900145ec <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x40>
900145ca:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
900145ce:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
900145d2:	3a01      	subs	r2, #1
900145d4:	4291      	cmp	r1, r2
900145d6:	d007      	beq.n	900145e8 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3c>
900145d8:	8e02      	ldrh	r2, [r0, #48]	; 0x30
900145da:	4252      	negs	r2, r2
900145dc:	4293      	cmp	r3, r2
900145de:	dc03      	bgt.n	900145e8 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3c>
900145e0:	2302      	movs	r3, #2
900145e2:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
900145e6:	4770      	bx	lr
900145e8:	2300      	movs	r3, #0
900145ea:	e7fa      	b.n	900145e2 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x36>
900145ec:	d0fb      	beq.n	900145e6 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
900145ee:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
900145f2:	b112      	cbz	r2, 900145fa <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x4e>
900145f4:	8e02      	ldrh	r2, [r0, #48]	; 0x30
900145f6:	4293      	cmp	r3, r2
900145f8:	da01      	bge.n	900145fe <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x52>
900145fa:	2301      	movs	r3, #1
900145fc:	e7f1      	b.n	900145e2 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x36>
900145fe:	2303      	movs	r3, #3
90014600:	e7ef      	b.n	900145e2 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x36>

90014602 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE>:
90014602:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90014606:	2b04      	cmp	r3, #4
90014608:	d114      	bne.n	90014634 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
9001460a:	790b      	ldrb	r3, [r1, #4]
9001460c:	b993      	cbnz	r3, 90014634 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
9001460e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
90014610:	8683      	strh	r3, [r0, #52]	; 0x34
90014612:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
90014616:	86c3      	strh	r3, [r0, #54]	; 0x36
90014618:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
9001461c:	2b00      	cmp	r3, #0
9001461e:	da0a      	bge.n	90014636 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x34>
90014620:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
90014624:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
90014628:	3b01      	subs	r3, #1
9001462a:	429a      	cmp	r2, r3
9001462c:	da02      	bge.n	90014634 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
9001462e:	2302      	movs	r3, #2
90014630:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
90014634:	4770      	bx	lr
90014636:	d0fd      	beq.n	90014634 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
90014638:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
9001463c:	2b00      	cmp	r3, #0
9001463e:	d0f9      	beq.n	90014634 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
90014640:	2303      	movs	r3, #3
90014642:	e7f5      	b.n	90014630 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x2e>

90014644 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
90014644:	b538      	push	{r3, r4, r5, lr}
90014646:	4604      	mov	r4, r0
90014648:	2226      	movs	r2, #38	; 0x26
9001464a:	460d      	mov	r5, r1
9001464c:	2100      	movs	r1, #0
9001464e:	f014 fb9f 	bl	90028d90 <memset>
90014652:	4620      	mov	r0, r4
90014654:	f7ee fa9c 	bl	90002b90 <_ZN8touchgfx8DrawableC1Ev>
90014658:	4b06      	ldr	r3, [pc, #24]	; (90014674 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
9001465a:	4620      	mov	r0, r4
9001465c:	4629      	mov	r1, r5
9001465e:	6023      	str	r3, [r4, #0]
90014660:	f64f 73ff 	movw	r3, #65535	; 0xffff
90014664:	84e3      	strh	r3, [r4, #38]	; 0x26
90014666:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
9001466a:	f002 ff01 	bl	90017470 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
9001466e:	4620      	mov	r0, r4
90014670:	bd38      	pop	{r3, r4, r5, pc}
90014672:	bf00      	nop
90014674:	9002f804 	.word	0x9002f804

90014678 <_ZN8touchgfx14SwipeContainer23setEndSwipeElasticWidthEt>:
90014678:	8741      	strh	r1, [r0, #58]	; 0x3a
9001467a:	4770      	bx	lr

9001467c <_ZN8touchgfx14SwipeContainer18setPageIndicatorXYEss>:
9001467c:	b508      	push	{r3, lr}
9001467e:	306c      	adds	r0, #108	; 0x6c
90014680:	f7ee fa96 	bl	90002bb0 <_ZN8touchgfx8Drawable5setXYEss>
90014684:	bd08      	pop	{r3, pc}

90014686 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>:
90014686:	b508      	push	{r3, lr}
90014688:	8e42      	ldrh	r2, [r0, #50]	; 0x32
9001468a:	303c      	adds	r0, #60	; 0x3c
9001468c:	f810 1c04 	ldrb.w	r1, [r0, #-4]
90014690:	f930 3c34 	ldrsh.w	r3, [r0, #-52]
90014694:	fb03 2111 	mls	r1, r3, r1, r2
90014698:	2200      	movs	r2, #0
9001469a:	b209      	sxth	r1, r1
9001469c:	f7ee fa1f 	bl	90002ade <_ZN8touchgfx8Drawable6moveToEss>
900146a0:	bd08      	pop	{r3, pc}

900146a2 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE>:
900146a2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
900146a6:	2b04      	cmp	r3, #4
900146a8:	d119      	bne.n	900146de <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x3c>
900146aa:	88ca      	ldrh	r2, [r1, #6]
900146ac:	8e43      	ldrh	r3, [r0, #50]	; 0x32
900146ae:	1a9b      	subs	r3, r3, r2
900146b0:	894a      	ldrh	r2, [r1, #10]
900146b2:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
900146b6:	4413      	add	r3, r2
900146b8:	b21b      	sxth	r3, r3
900146ba:	8643      	strh	r3, [r0, #50]	; 0x32
900146bc:	b921      	cbnz	r1, 900146c8 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x26>
900146be:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
900146c0:	4293      	cmp	r3, r2
900146c2:	dd01      	ble.n	900146c8 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x26>
900146c4:	8642      	strh	r2, [r0, #50]	; 0x32
900146c6:	e008      	b.n	900146da <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x38>
900146c8:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
900146cc:	3a01      	subs	r2, #1
900146ce:	4291      	cmp	r1, r2
900146d0:	d103      	bne.n	900146da <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x38>
900146d2:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
900146d4:	4252      	negs	r2, r2
900146d6:	4293      	cmp	r3, r2
900146d8:	dbf4      	blt.n	900146c4 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x22>
900146da:	f7ff bfd4 	b.w	90014686 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
900146de:	4770      	bx	lr

900146e0 <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv>:
900146e0:	b538      	push	{r3, r4, r5, lr}
900146e2:	f890 502e 	ldrb.w	r5, [r0, #46]	; 0x2e
900146e6:	4604      	mov	r4, r0
900146e8:	2d0e      	cmp	r5, #14
900146ea:	d813      	bhi.n	90014714 <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv+0x34>
900146ec:	8e82      	ldrh	r2, [r0, #52]	; 0x34
900146ee:	230e      	movs	r3, #14
900146f0:	2100      	movs	r1, #0
900146f2:	4628      	mov	r0, r5
900146f4:	4252      	negs	r2, r2
900146f6:	b212      	sxth	r2, r2
900146f8:	f006 f8ea 	bl	9001a8d0 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>
900146fc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
900146fe:	4418      	add	r0, r3
90014700:	8660      	strh	r0, [r4, #50]	; 0x32
90014702:	4620      	mov	r0, r4
90014704:	f7ff ffbf 	bl	90014686 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
90014708:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
9001470c:	3301      	adds	r3, #1
9001470e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
90014712:	bd38      	pop	{r3, r4, r5, pc}
90014714:	2304      	movs	r3, #4
90014716:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
9001471a:	2300      	movs	r3, #0
9001471c:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
90014720:	8643      	strh	r3, [r0, #50]	; 0x32
90014722:	e7ef      	b.n	90014704 <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv+0x24>

90014724 <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv>:
90014724:	b538      	push	{r3, r4, r5, lr}
90014726:	f890 502e 	ldrb.w	r5, [r0, #46]	; 0x2e
9001472a:	4604      	mov	r4, r0
9001472c:	2d0e      	cmp	r5, #14
9001472e:	d812      	bhi.n	90014756 <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv+0x32>
90014730:	230e      	movs	r3, #14
90014732:	f9b0 2034 	ldrsh.w	r2, [r0, #52]	; 0x34
90014736:	2100      	movs	r1, #0
90014738:	4628      	mov	r0, r5
9001473a:	f006 f8c9 	bl	9001a8d0 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>
9001473e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
90014740:	1a18      	subs	r0, r3, r0
90014742:	8660      	strh	r0, [r4, #50]	; 0x32
90014744:	4620      	mov	r0, r4
90014746:	f7ff ff9e 	bl	90014686 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
9001474a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
9001474e:	3301      	adds	r3, #1
90014750:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
90014754:	bd38      	pop	{r3, r4, r5, pc}
90014756:	2304      	movs	r3, #4
90014758:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
9001475c:	2300      	movs	r3, #0
9001475e:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
90014762:	8643      	strh	r3, [r0, #50]	; 0x32
90014764:	e7ef      	b.n	90014746 <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv+0x22>
	...

90014768 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev>:
90014768:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
9001476c:	4604      	mov	r4, r0
9001476e:	2500      	movs	r5, #0
90014770:	f7ee fa0e 	bl	90002b90 <_ZN8touchgfx8DrawableC1Ev>
90014774:	af02      	add	r7, sp, #8
90014776:	4626      	mov	r6, r4
90014778:	4b18      	ldr	r3, [pc, #96]	; (900147dc <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev+0x74>)
9001477a:	f64f 79ff 	movw	r9, #65535	; 0xffff
9001477e:	62a5      	str	r5, [r4, #40]	; 0x28
90014780:	f846 3b2c 	str.w	r3, [r6], #44
90014784:	4630      	mov	r0, r6
90014786:	f827 9d04 	strh.w	r9, [r7, #-4]!
9001478a:	4639      	mov	r1, r7
9001478c:	f7ff ff5a 	bl	90014644 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
90014790:	f104 085c 	add.w	r8, r4, #92	; 0x5c
90014794:	4b12      	ldr	r3, [pc, #72]	; (900147e0 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev+0x78>)
90014796:	4639      	mov	r1, r7
90014798:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
9001479c:	4640      	mov	r0, r8
9001479e:	62e3      	str	r3, [r4, #44]	; 0x2c
900147a0:	f8a4 5058 	strh.w	r5, [r4, #88]	; 0x58
900147a4:	f8ad 9004 	strh.w	r9, [sp, #4]
900147a8:	f7ff ff4c 	bl	90014644 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
900147ac:	462a      	mov	r2, r5
900147ae:	4629      	mov	r1, r5
900147b0:	4630      	mov	r0, r6
900147b2:	f8a4 5088 	strh.w	r5, [r4, #136]	; 0x88
900147b6:	f7ee f9fb 	bl	90002bb0 <_ZN8touchgfx8Drawable5setXYEss>
900147ba:	462a      	mov	r2, r5
900147bc:	4629      	mov	r1, r5
900147be:	4640      	mov	r0, r8
900147c0:	f7ee f9f6 	bl	90002bb0 <_ZN8touchgfx8Drawable5setXYEss>
900147c4:	4631      	mov	r1, r6
900147c6:	4620      	mov	r0, r4
900147c8:	f7ff fd98 	bl	900142fc <_ZN8touchgfx9Container3addERNS_8DrawableE>
900147cc:	4620      	mov	r0, r4
900147ce:	4641      	mov	r1, r8
900147d0:	f7ff fd94 	bl	900142fc <_ZN8touchgfx9Container3addERNS_8DrawableE>
900147d4:	4620      	mov	r0, r4
900147d6:	b003      	add	sp, #12
900147d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900147dc:	9002ea24 	.word	0x9002ea24
900147e0:	9002f644 	.word	0x9002f644

900147e4 <_ZN8touchgfx14SwipeContainerC1Ev>:
900147e4:	b570      	push	{r4, r5, r6, lr}
900147e6:	4604      	mov	r4, r0
900147e8:	f7ee f9d2 	bl	90002b90 <_ZN8touchgfx8DrawableC1Ev>
900147ec:	4b1a      	ldr	r3, [pc, #104]	; (90014858 <_ZN8touchgfx14SwipeContainerC1Ev+0x74>)
900147ee:	2500      	movs	r5, #0
900147f0:	f104 063c 	add.w	r6, r4, #60	; 0x3c
900147f4:	6023      	str	r3, [r4, #0]
900147f6:	2304      	movs	r3, #4
900147f8:	62a5      	str	r5, [r4, #40]	; 0x28
900147fa:	4630      	mov	r0, r6
900147fc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
90014800:	2350      	movs	r3, #80	; 0x50
90014802:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
90014806:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
9001480a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
9001480e:	e9c4 350c 	strd	r3, r5, [r4, #48]	; 0x30
90014812:	231e      	movs	r3, #30
90014814:	8763      	strh	r3, [r4, #58]	; 0x3a
90014816:	f7ee f9bb 	bl	90002b90 <_ZN8touchgfx8DrawableC1Ev>
9001481a:	4b10      	ldr	r3, [pc, #64]	; (9001485c <_ZN8touchgfx14SwipeContainerC1Ev+0x78>)
9001481c:	6665      	str	r5, [r4, #100]	; 0x64
9001481e:	63e3      	str	r3, [r4, #60]	; 0x3c
90014820:	2302      	movs	r3, #2
90014822:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
90014826:	f104 056c 	add.w	r5, r4, #108	; 0x6c
9001482a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
9001482e:	4628      	mov	r0, r5
90014830:	f7ff ff9a 	bl	90014768 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev>
90014834:	f004 fbb8 	bl	90018fa8 <_ZN8touchgfx11Application11getInstanceEv>
90014838:	4621      	mov	r1, r4
9001483a:	f004 fbbb 	bl	90018fb4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
9001483e:	2301      	movs	r3, #1
90014840:	4631      	mov	r1, r6
90014842:	4620      	mov	r0, r4
90014844:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
90014848:	f7ff fd58 	bl	900142fc <_ZN8touchgfx9Container3addERNS_8DrawableE>
9001484c:	4620      	mov	r0, r4
9001484e:	4629      	mov	r1, r5
90014850:	f7ff fd54 	bl	900142fc <_ZN8touchgfx9Container3addERNS_8DrawableE>
90014854:	4620      	mov	r0, r4
90014856:	bd70      	pop	{r4, r5, r6, pc}
90014858:	9002eb78 	.word	0x9002eb78
9001485c:	9002ed24 	.word	0x9002ed24

90014860 <_ZN8touchgfx14SwipeContainer13PageIndicator20setHighlightPositionEh>:
90014860:	b537      	push	{r0, r1, r2, r4, r5, lr}
90014862:	4604      	mov	r4, r0
90014864:	460d      	mov	r5, r1
90014866:	f884 1089 	strb.w	r1, [r4, #137]	; 0x89
9001486a:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
9001486e:	428b      	cmp	r3, r1
90014870:	d90a      	bls.n	90014888 <_ZN8touchgfx14SwipeContainer13PageIndicator20setHighlightPositionEh+0x28>
90014872:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
90014876:	a802      	add	r0, sp, #8
90014878:	f820 3d04 	strh.w	r3, [r0, #-4]!
9001487c:	f007 fdda 	bl	9001c434 <_ZNK8touchgfx6Bitmap8getWidthEv>
90014880:	fb15 f500 	smulbb	r5, r5, r0
90014884:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
90014888:	6823      	ldr	r3, [r4, #0]
9001488a:	4620      	mov	r0, r4
9001488c:	695b      	ldr	r3, [r3, #20]
9001488e:	4798      	blx	r3
90014890:	b003      	add	sp, #12
90014892:	bd30      	pop	{r4, r5, pc}

90014894 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>:
90014894:	b510      	push	{r4, lr}
90014896:	4604      	mov	r4, r0
90014898:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
9001489c:	306c      	adds	r0, #108	; 0x6c
9001489e:	f7ff ffdf 	bl	90014860 <_ZN8touchgfx14SwipeContainer13PageIndicator20setHighlightPositionEh>
900148a2:	4620      	mov	r0, r4
900148a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900148a8:	f7ff beed 	b.w	90014686 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>

900148ac <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>:
900148ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
900148ae:	4604      	mov	r4, r0
900148b0:	460d      	mov	r5, r1
900148b2:	f884 1088 	strb.w	r1, [r4, #136]	; 0x88
900148b6:	b931      	cbnz	r1, 900148c6 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x1a>
900148b8:	4b17      	ldr	r3, [pc, #92]	; (90014918 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x6c>)
900148ba:	f44f 71b0 	mov.w	r1, #352	; 0x160
900148be:	4a17      	ldr	r2, [pc, #92]	; (9001491c <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x70>)
900148c0:	4817      	ldr	r0, [pc, #92]	; (90014920 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x74>)
900148c2:	f014 f9b7 	bl	90028c34 <__assert_func>
900148c6:	4b17      	ldr	r3, [pc, #92]	; (90014924 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x78>)
900148c8:	681b      	ldr	r3, [r3, #0]
900148ca:	b923      	cbnz	r3, 900148d6 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x2a>
900148cc:	4b16      	ldr	r3, [pc, #88]	; (90014928 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x7c>)
900148ce:	218b      	movs	r1, #139	; 0x8b
900148d0:	4a16      	ldr	r2, [pc, #88]	; (9001492c <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x80>)
900148d2:	4817      	ldr	r0, [pc, #92]	; (90014930 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x84>)
900148d4:	e7f5      	b.n	900148c2 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x16>
900148d6:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
900148da:	f64f 72ff 	movw	r2, #65535	; 0xffff
900148de:	4293      	cmp	r3, r2
900148e0:	d017      	beq.n	90014912 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x66>
900148e2:	a802      	add	r0, sp, #8
900148e4:	f820 3d04 	strh.w	r3, [r0, #-4]!
900148e8:	f007 fda4 	bl	9001c434 <_ZNK8touchgfx6Bitmap8getWidthEv>
900148ec:	fb15 f100 	smulbb	r1, r5, r0
900148f0:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
900148f4:	4620      	mov	r0, r4
900148f6:	b209      	sxth	r1, r1
900148f8:	86a1      	strh	r1, [r4, #52]	; 0x34
900148fa:	f7ff fb88 	bl	9001400e <_ZN8touchgfx8Drawable14setWidthHeightEss>
900148fe:	2100      	movs	r1, #0
90014900:	4620      	mov	r0, r4
90014902:	f884 1089 	strb.w	r1, [r4, #137]	; 0x89
90014906:	f7ff ffab 	bl	90014860 <_ZN8touchgfx14SwipeContainer13PageIndicator20setHighlightPositionEh>
9001490a:	6823      	ldr	r3, [r4, #0]
9001490c:	4620      	mov	r0, r4
9001490e:	695b      	ldr	r3, [r3, #20]
90014910:	4798      	blx	r3
90014912:	b003      	add	sp, #12
90014914:	bd30      	pop	{r4, r5, pc}
90014916:	bf00      	nop
90014918:	9002eaa4 	.word	0x9002eaa4
9001491c:	9002ebfc 	.word	0x9002ebfc
90014920:	9002ead6 	.word	0x9002ead6
90014924:	20026d64 	.word	0x20026d64
90014928:	9002eb0e 	.word	0x9002eb0e
9001492c:	9002ec44 	.word	0x9002ec44
90014930:	9002eb4a 	.word	0x9002eb4a

90014934 <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>:
90014934:	b538      	push	{r3, r4, r5, lr}
90014936:	4604      	mov	r4, r0
90014938:	303c      	adds	r0, #60	; 0x3c
9001493a:	460d      	mov	r5, r1
9001493c:	f000 fa08 	bl	90014d50 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>
90014940:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
90014944:	f104 006c 	add.w	r0, r4, #108	; 0x6c
90014948:	3101      	adds	r1, #1
9001494a:	b2c9      	uxtb	r1, r1
9001494c:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
90014950:	f7ff ffac 	bl	900148ac <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>
90014954:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
90014958:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
9001495c:	4620      	mov	r0, r4
9001495e:	f7ff fb56 	bl	9001400e <_ZN8touchgfx8Drawable14setWidthHeightEss>
90014962:	bd38      	pop	{r3, r4, r5, pc}

90014964 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE>:
90014964:	b510      	push	{r4, lr}
90014966:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
9001496a:	4604      	mov	r4, r0
9001496c:	b19b      	cbz	r3, 90014996 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x32>
9001496e:	6e43      	ldr	r3, [r0, #100]	; 0x64
90014970:	b18b      	cbz	r3, 90014996 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x32>
90014972:	428b      	cmp	r3, r1
90014974:	d116      	bne.n	900149a4 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x40>
90014976:	4619      	mov	r1, r3
90014978:	f104 003c 	add.w	r0, r4, #60	; 0x3c
9001497c:	f000 fa68 	bl	90014e50 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>
90014980:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
90014984:	3a01      	subs	r2, #1
90014986:	b2d2      	uxtb	r2, r2
90014988:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
9001498c:	4611      	mov	r1, r2
9001498e:	b91a      	cbnz	r2, 90014998 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x34>
90014990:	4620      	mov	r0, r4
90014992:	f7ff fb3c 	bl	9001400e <_ZN8touchgfx8Drawable14setWidthHeightEss>
90014996:	bd10      	pop	{r4, pc}
90014998:	f104 006c 	add.w	r0, r4, #108	; 0x6c
9001499c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900149a0:	f7ff bf84 	b.w	900148ac <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>
900149a4:	699b      	ldr	r3, [r3, #24]
900149a6:	e7e3      	b.n	90014970 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0xc>

900149a8 <_ZN8touchgfx14SwipeContainer13PageIndicator10setBitmapsERKNS_6BitmapES4_>:
900149a8:	b538      	push	{r3, r4, r5, lr}
900149aa:	4604      	mov	r4, r0
900149ac:	460d      	mov	r5, r1
900149ae:	305c      	adds	r0, #92	; 0x5c
900149b0:	4611      	mov	r1, r2
900149b2:	f002 fd5d 	bl	90017470 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
900149b6:	4629      	mov	r1, r5
900149b8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
900149bc:	f002 f93c 	bl	90016c38 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
900149c0:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
900149c4:	b121      	cbz	r1, 900149d0 <_ZN8touchgfx14SwipeContainer13PageIndicator10setBitmapsERKNS_6BitmapES4_+0x28>
900149c6:	4620      	mov	r0, r4
900149c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
900149cc:	f7ff bf6e 	b.w	900148ac <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>
900149d0:	bd38      	pop	{r3, r4, r5, pc}

900149d2 <_ZN8touchgfx14SwipeContainer23setPageIndicatorBitmapsERKNS_6BitmapES3_>:
900149d2:	306c      	adds	r0, #108	; 0x6c
900149d4:	f7ff bfe8 	b.w	900149a8 <_ZN8touchgfx14SwipeContainer13PageIndicator10setBitmapsERKNS_6BitmapES4_>

900149d8 <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>:
900149d8:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
900149dc:	b410      	push	{r4}
900149de:	1c4b      	adds	r3, r1, #1
900149e0:	f890 4088 	ldrb.w	r4, [r0, #136]	; 0x88
900149e4:	fb93 f1f4 	sdiv	r1, r3, r4
900149e8:	fb04 3111 	mls	r1, r4, r1, r3
900149ec:	f85d 4b04 	ldr.w	r4, [sp], #4
900149f0:	b2c9      	uxtb	r1, r1
900149f2:	f880 1089 	strb.w	r1, [r0, #137]	; 0x89
900149f6:	f7ff bf33 	b.w	90014860 <_ZN8touchgfx14SwipeContainer13PageIndicator20setHighlightPositionEh>

900149fa <_ZN8touchgfx14SwipeContainer11animateLeftEv>:
900149fa:	b538      	push	{r3, r4, r5, lr}
900149fc:	f890 502e 	ldrb.w	r5, [r0, #46]	; 0x2e
90014a00:	4604      	mov	r4, r0
90014a02:	2d0a      	cmp	r5, #10
90014a04:	d814      	bhi.n	90014a30 <_ZN8touchgfx14SwipeContainer11animateLeftEv+0x36>
90014a06:	8e83      	ldrh	r3, [r0, #52]	; 0x34
90014a08:	2100      	movs	r1, #0
90014a0a:	8902      	ldrh	r2, [r0, #8]
90014a0c:	4628      	mov	r0, r5
90014a0e:	441a      	add	r2, r3
90014a10:	230a      	movs	r3, #10
90014a12:	b212      	sxth	r2, r2
90014a14:	f005 ff9c 	bl	9001a950 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
90014a18:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
90014a1a:	1a18      	subs	r0, r3, r0
90014a1c:	8660      	strh	r0, [r4, #50]	; 0x32
90014a1e:	4620      	mov	r0, r4
90014a20:	f7ff fe31 	bl	90014686 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
90014a24:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
90014a28:	3301      	adds	r3, #1
90014a2a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
90014a2e:	bd38      	pop	{r3, r4, r5, pc}
90014a30:	2304      	movs	r3, #4
90014a32:	2200      	movs	r2, #0
90014a34:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
90014a38:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
90014a3c:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
90014a40:	3301      	adds	r3, #1
90014a42:	8642      	strh	r2, [r0, #50]	; 0x32
90014a44:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
90014a48:	f7ff fe1d 	bl	90014686 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
90014a4c:	f104 006c 	add.w	r0, r4, #108	; 0x6c
90014a50:	f7ff ffc2 	bl	900149d8 <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>
90014a54:	e7e6      	b.n	90014a24 <_ZN8touchgfx14SwipeContainer11animateLeftEv+0x2a>

90014a56 <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>:
90014a56:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
90014a5a:	b410      	push	{r4}
90014a5c:	f890 4088 	ldrb.w	r4, [r0, #136]	; 0x88
90014a60:	1919      	adds	r1, r3, r4
90014a62:	1e4b      	subs	r3, r1, #1
90014a64:	fb93 f1f4 	sdiv	r1, r3, r4
90014a68:	fb04 3111 	mls	r1, r4, r1, r3
90014a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
90014a70:	b2c9      	uxtb	r1, r1
90014a72:	f880 1089 	strb.w	r1, [r0, #137]	; 0x89
90014a76:	f7ff bef3 	b.w	90014860 <_ZN8touchgfx14SwipeContainer13PageIndicator20setHighlightPositionEh>

90014a7a <_ZN8touchgfx14SwipeContainer12animateRightEv>:
90014a7a:	b538      	push	{r3, r4, r5, lr}
90014a7c:	f890 502e 	ldrb.w	r5, [r0, #46]	; 0x2e
90014a80:	4604      	mov	r4, r0
90014a82:	2d0a      	cmp	r5, #10
90014a84:	d814      	bhi.n	90014ab0 <_ZN8touchgfx14SwipeContainer12animateRightEv+0x36>
90014a86:	8e83      	ldrh	r3, [r0, #52]	; 0x34
90014a88:	2100      	movs	r1, #0
90014a8a:	8902      	ldrh	r2, [r0, #8]
90014a8c:	4628      	mov	r0, r5
90014a8e:	1ad2      	subs	r2, r2, r3
90014a90:	230a      	movs	r3, #10
90014a92:	b212      	sxth	r2, r2
90014a94:	f005 ff5c 	bl	9001a950 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
90014a98:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
90014a9a:	4418      	add	r0, r3
90014a9c:	8660      	strh	r0, [r4, #50]	; 0x32
90014a9e:	4620      	mov	r0, r4
90014aa0:	f7ff fdf1 	bl	90014686 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
90014aa4:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
90014aa8:	3301      	adds	r3, #1
90014aaa:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
90014aae:	bd38      	pop	{r3, r4, r5, pc}
90014ab0:	2304      	movs	r3, #4
90014ab2:	2200      	movs	r2, #0
90014ab4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
90014ab8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
90014abc:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
90014ac0:	3b01      	subs	r3, #1
90014ac2:	8642      	strh	r2, [r0, #50]	; 0x32
90014ac4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
90014ac8:	f7ff fddd 	bl	90014686 <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
90014acc:	f104 006c 	add.w	r0, r4, #108	; 0x6c
90014ad0:	f7ff ffc1 	bl	90014a56 <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>
90014ad4:	e7e6      	b.n	90014aa4 <_ZN8touchgfx14SwipeContainer12animateRightEv+0x2a>

90014ad6 <_ZN8touchgfx14SwipeContainer15handleTickEventEv>:
90014ad6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90014ada:	b90b      	cbnz	r3, 90014ae0 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0xa>
90014adc:	f7ff be00 	b.w	900146e0 <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv>
90014ae0:	2b01      	cmp	r3, #1
90014ae2:	d101      	bne.n	90014ae8 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x12>
90014ae4:	f7ff be1e 	b.w	90014724 <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv>
90014ae8:	2b02      	cmp	r3, #2
90014aea:	d101      	bne.n	90014af0 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x1a>
90014aec:	f7ff bf85 	b.w	900149fa <_ZN8touchgfx14SwipeContainer11animateLeftEv>
90014af0:	2b03      	cmp	r3, #3
90014af2:	d101      	bne.n	90014af8 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x22>
90014af4:	f7ff bfc1 	b.w	90014a7a <_ZN8touchgfx14SwipeContainer12animateRightEv>
90014af8:	4770      	bx	lr

90014afa <_ZNK8touchgfx10ListLayout12getDirectionEv>:
90014afa:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
90014afe:	4770      	bx	lr

90014b00 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE>:
90014b00:	b538      	push	{r3, r4, r5, lr}
90014b02:	7882      	ldrb	r2, [r0, #2]
90014b04:	4604      	mov	r4, r0
90014b06:	460d      	mov	r5, r1
90014b08:	6843      	ldr	r3, [r0, #4]
90014b0a:	b98a      	cbnz	r2, 90014b30 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x30>
90014b0c:	4299      	cmp	r1, r3
90014b0e:	d101      	bne.n	90014b14 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
90014b10:	2301      	movs	r3, #1
90014b12:	7083      	strb	r3, [r0, #2]
90014b14:	6863      	ldr	r3, [r4, #4]
90014b16:	42ab      	cmp	r3, r5
90014b18:	d009      	beq.n	90014b2e <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
90014b1a:	7a23      	ldrb	r3, [r4, #8]
90014b1c:	2b01      	cmp	r3, #1
90014b1e:	d11b      	bne.n	90014b58 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x58>
90014b20:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
90014b24:	f9b4 2000 	ldrsh.w	r2, [r4]
90014b28:	429a      	cmp	r2, r3
90014b2a:	bfb8      	it	lt
90014b2c:	8023      	strhlt	r3, [r4, #0]
90014b2e:	bd38      	pop	{r3, r4, r5, pc}
90014b30:	7a02      	ldrb	r2, [r0, #8]
90014b32:	2a01      	cmp	r2, #1
90014b34:	d108      	bne.n	90014b48 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x48>
90014b36:	895b      	ldrh	r3, [r3, #10]
90014b38:	88c9      	ldrh	r1, [r1, #6]
90014b3a:	1ac9      	subs	r1, r1, r3
90014b3c:	682b      	ldr	r3, [r5, #0]
90014b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90014b40:	b209      	sxth	r1, r1
90014b42:	4628      	mov	r0, r5
90014b44:	4798      	blx	r3
90014b46:	e7e5      	b.n	90014b14 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
90014b48:	2a02      	cmp	r2, #2
90014b4a:	d1e3      	bne.n	90014b14 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
90014b4c:	891b      	ldrh	r3, [r3, #8]
90014b4e:	8889      	ldrh	r1, [r1, #4]
90014b50:	1ac9      	subs	r1, r1, r3
90014b52:	682b      	ldr	r3, [r5, #0]
90014b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90014b56:	e7f3      	b.n	90014b40 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x40>
90014b58:	2b02      	cmp	r3, #2
90014b5a:	d1e8      	bne.n	90014b2e <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
90014b5c:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
90014b60:	e7e0      	b.n	90014b24 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x24>

90014b62 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED1Ev>:
90014b62:	4770      	bx	lr

90014b64 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED1Ev>:
90014b64:	4770      	bx	lr

90014b66 <_ZN8touchgfx10ListLayoutD1Ev>:
90014b66:	4770      	bx	lr

90014b68 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7executeES3_>:
90014b68:	b430      	push	{r4, r5}
90014b6a:	68c5      	ldr	r5, [r0, #12]
90014b6c:	4603      	mov	r3, r0
90014b6e:	6844      	ldr	r4, [r0, #4]
90014b70:	106a      	asrs	r2, r5, #1
90014b72:	07ed      	lsls	r5, r5, #31
90014b74:	689b      	ldr	r3, [r3, #8]
90014b76:	eb04 0002 	add.w	r0, r4, r2
90014b7a:	bf48      	it	mi
90014b7c:	58a2      	ldrmi	r2, [r4, r2]
90014b7e:	bc30      	pop	{r4, r5}
90014b80:	bf48      	it	mi
90014b82:	58d3      	ldrmi	r3, [r2, r3]
90014b84:	4718      	bx	r3

90014b86 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv>:
90014b86:	6843      	ldr	r3, [r0, #4]
90014b88:	b12b      	cbz	r3, 90014b96 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x10>
90014b8a:	6883      	ldr	r3, [r0, #8]
90014b8c:	b92b      	cbnz	r3, 90014b9a <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x14>
90014b8e:	68c0      	ldr	r0, [r0, #12]
90014b90:	f000 0001 	and.w	r0, r0, #1
90014b94:	4770      	bx	lr
90014b96:	4618      	mov	r0, r3
90014b98:	4770      	bx	lr
90014b9a:	2001      	movs	r0, #1
90014b9c:	4770      	bx	lr

90014b9e <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7executeES3_>:
90014b9e:	b430      	push	{r4, r5}
90014ba0:	68c5      	ldr	r5, [r0, #12]
90014ba2:	4603      	mov	r3, r0
90014ba4:	6844      	ldr	r4, [r0, #4]
90014ba6:	106a      	asrs	r2, r5, #1
90014ba8:	07ed      	lsls	r5, r5, #31
90014baa:	689b      	ldr	r3, [r3, #8]
90014bac:	eb04 0002 	add.w	r0, r4, r2
90014bb0:	bf48      	it	mi
90014bb2:	58a2      	ldrmi	r2, [r4, r2]
90014bb4:	bc30      	pop	{r4, r5}
90014bb6:	bf48      	it	mi
90014bb8:	58d3      	ldrmi	r3, [r2, r3]
90014bba:	4718      	bx	r3

90014bbc <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv>:
90014bbc:	6843      	ldr	r3, [r0, #4]
90014bbe:	b12b      	cbz	r3, 90014bcc <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x10>
90014bc0:	6883      	ldr	r3, [r0, #8]
90014bc2:	b92b      	cbnz	r3, 90014bd0 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x14>
90014bc4:	68c0      	ldr	r0, [r0, #12]
90014bc6:	f000 0001 	and.w	r0, r0, #1
90014bca:	4770      	bx	lr
90014bcc:	4618      	mov	r0, r3
90014bce:	4770      	bx	lr
90014bd0:	2001      	movs	r0, #1
90014bd2:	4770      	bx	lr

90014bd4 <_ZN8touchgfx10ListLayoutD0Ev>:
90014bd4:	b510      	push	{r4, lr}
90014bd6:	4604      	mov	r4, r0
90014bd8:	2130      	movs	r1, #48	; 0x30
90014bda:	f013 fa4f 	bl	9002807c <_ZdlPvj>
90014bde:	4620      	mov	r0, r4
90014be0:	bd10      	pop	{r4, pc}

90014be2 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED0Ev>:
90014be2:	b510      	push	{r4, lr}
90014be4:	4604      	mov	r4, r0
90014be6:	2110      	movs	r1, #16
90014be8:	f013 fa48 	bl	9002807c <_ZdlPvj>
90014bec:	4620      	mov	r0, r4
90014bee:	bd10      	pop	{r4, pc}

90014bf0 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED0Ev>:
90014bf0:	b510      	push	{r4, lr}
90014bf2:	4604      	mov	r4, r0
90014bf4:	2110      	movs	r1, #16
90014bf6:	f013 fa41 	bl	9002807c <_ZdlPvj>
90014bfa:	4620      	mov	r0, r4
90014bfc:	bd10      	pop	{r4, pc}

90014bfe <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE>:
90014bfe:	4603      	mov	r3, r0
90014c00:	4608      	mov	r0, r1
90014c02:	789a      	ldrb	r2, [r3, #2]
90014c04:	b992      	cbnz	r2, 90014c2c <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x2e>
90014c06:	685a      	ldr	r2, [r3, #4]
90014c08:	428a      	cmp	r2, r1
90014c0a:	d102      	bne.n	90014c12 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x14>
90014c0c:	2201      	movs	r2, #1
90014c0e:	709a      	strb	r2, [r3, #2]
90014c10:	4770      	bx	lr
90014c12:	7a1a      	ldrb	r2, [r3, #8]
90014c14:	2a01      	cmp	r2, #1
90014c16:	d104      	bne.n	90014c22 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x24>
90014c18:	88ca      	ldrh	r2, [r1, #6]
90014c1a:	8949      	ldrh	r1, [r1, #10]
90014c1c:	440a      	add	r2, r1
90014c1e:	801a      	strh	r2, [r3, #0]
90014c20:	4770      	bx	lr
90014c22:	2a02      	cmp	r2, #2
90014c24:	d116      	bne.n	90014c54 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
90014c26:	888a      	ldrh	r2, [r1, #4]
90014c28:	8909      	ldrh	r1, [r1, #8]
90014c2a:	e7f7      	b.n	90014c1c <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x1e>
90014c2c:	7a1a      	ldrb	r2, [r3, #8]
90014c2e:	2a01      	cmp	r2, #1
90014c30:	d107      	bne.n	90014c42 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x44>
90014c32:	685b      	ldr	r3, [r3, #4]
90014c34:	8959      	ldrh	r1, [r3, #10]
90014c36:	88c3      	ldrh	r3, [r0, #6]
90014c38:	4419      	add	r1, r3
90014c3a:	6803      	ldr	r3, [r0, #0]
90014c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90014c3e:	b209      	sxth	r1, r1
90014c40:	4718      	bx	r3
90014c42:	2a02      	cmp	r2, #2
90014c44:	d106      	bne.n	90014c54 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
90014c46:	685b      	ldr	r3, [r3, #4]
90014c48:	8919      	ldrh	r1, [r3, #8]
90014c4a:	8883      	ldrh	r3, [r0, #4]
90014c4c:	4419      	add	r1, r3
90014c4e:	6803      	ldr	r3, [r0, #0]
90014c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90014c52:	e7f4      	b.n	90014c3e <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x40>
90014c54:	4770      	bx	lr

90014c56 <_ZN8touchgfx10ListLayout9removeAllEv>:
90014c56:	2200      	movs	r2, #0
90014c58:	b510      	push	{r4, lr}
90014c5a:	4604      	mov	r4, r0
90014c5c:	85c2      	strh	r2, [r0, #46]	; 0x2e
90014c5e:	4611      	mov	r1, r2
90014c60:	f7ff f9d5 	bl	9001400e <_ZN8touchgfx8Drawable14setWidthHeightEss>
90014c64:	4620      	mov	r0, r4
90014c66:	f7ff fab3 	bl	900141d0 <_ZN8touchgfx9Container9removeAllEv>
90014c6a:	6960      	ldr	r0, [r4, #20]
90014c6c:	b120      	cbz	r0, 90014c78 <_ZN8touchgfx10ListLayout9removeAllEv+0x22>
90014c6e:	6803      	ldr	r3, [r0, #0]
90014c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90014c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90014c76:	4718      	bx	r3
90014c78:	bd10      	pop	{r4, pc}
	...

90014c7c <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE>:
90014c7c:	1e4b      	subs	r3, r1, #1
90014c7e:	2b01      	cmp	r3, #1
90014c80:	b530      	push	{r4, r5, lr}
90014c82:	4604      	mov	r4, r0
90014c84:	b085      	sub	sp, #20
90014c86:	d905      	bls.n	90014c94 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x18>
90014c88:	4b11      	ldr	r3, [pc, #68]	; (90014cd0 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x54>)
90014c8a:	21b2      	movs	r1, #178	; 0xb2
90014c8c:	4a11      	ldr	r2, [pc, #68]	; (90014cd4 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x58>)
90014c8e:	4812      	ldr	r0, [pc, #72]	; (90014cd8 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x5c>)
90014c90:	f013 ffd0 	bl	90028c34 <__assert_func>
90014c94:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90014c98:	428b      	cmp	r3, r1
90014c9a:	d017      	beq.n	90014ccc <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x50>
90014c9c:	2500      	movs	r5, #0
90014c9e:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
90014ca2:	85c5      	strh	r5, [r0, #46]	; 0x2e
90014ca4:	462a      	mov	r2, r5
90014ca6:	4629      	mov	r1, r5
90014ca8:	f7ff f9b1 	bl	9001400e <_ZN8touchgfx8Drawable14setWidthHeightEss>
90014cac:	4b0b      	ldr	r3, [pc, #44]	; (90014cdc <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x60>)
90014cae:	4620      	mov	r0, r4
90014cb0:	4669      	mov	r1, sp
90014cb2:	e9cd 3400 	strd	r3, r4, [sp]
90014cb6:	4b0a      	ldr	r3, [pc, #40]	; (90014ce0 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x64>)
90014cb8:	e9cd 3502 	strd	r3, r5, [sp, #8]
90014cbc:	6823      	ldr	r3, [r4, #0]
90014cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90014cc0:	4798      	blx	r3
90014cc2:	6960      	ldr	r0, [r4, #20]
90014cc4:	b110      	cbz	r0, 90014ccc <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x50>
90014cc6:	6803      	ldr	r3, [r0, #0]
90014cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90014cca:	4798      	blx	r3
90014ccc:	b005      	add	sp, #20
90014cce:	bd30      	pop	{r4, r5, pc}
90014cd0:	9002eca8 	.word	0x9002eca8
90014cd4:	9002edac 	.word	0x9002edac
90014cd8:	9002ece6 	.word	0x9002ece6
90014cdc:	9002ec80 	.word	0x9002ec80
90014ce0:	90014d49 	.word	0x90014d49

90014ce4 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>:
90014ce4:	b538      	push	{r3, r4, r5, lr}
90014ce6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90014cea:	460d      	mov	r5, r1
90014cec:	4604      	mov	r4, r0
90014cee:	4611      	mov	r1, r2
90014cf0:	2b01      	cmp	r3, #1
90014cf2:	d002      	beq.n	90014cfa <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x16>
90014cf4:	2b02      	cmp	r3, #2
90014cf6:	d015      	beq.n	90014d24 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x40>
90014cf8:	bd38      	pop	{r3, r4, r5, pc}
90014cfa:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
90014cfe:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
90014d02:	429a      	cmp	r2, r3
90014d04:	bfb8      	it	lt
90014d06:	8103      	strhlt	r3, [r0, #8]
90014d08:	8943      	ldrh	r3, [r0, #10]
90014d0a:	896a      	ldrh	r2, [r5, #10]
90014d0c:	4413      	add	r3, r2
90014d0e:	460a      	mov	r2, r1
90014d10:	2100      	movs	r1, #0
90014d12:	8143      	strh	r3, [r0, #10]
90014d14:	4628      	mov	r0, r5
90014d16:	f7ed ff4b 	bl	90002bb0 <_ZN8touchgfx8Drawable5setXYEss>
90014d1a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
90014d1c:	896a      	ldrh	r2, [r5, #10]
90014d1e:	4413      	add	r3, r2
90014d20:	85e3      	strh	r3, [r4, #46]	; 0x2e
90014d22:	e7e9      	b.n	90014cf8 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x14>
90014d24:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
90014d28:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90014d2c:	429a      	cmp	r2, r3
90014d2e:	bfb8      	it	lt
90014d30:	8143      	strhlt	r3, [r0, #10]
90014d32:	8903      	ldrh	r3, [r0, #8]
90014d34:	892a      	ldrh	r2, [r5, #8]
90014d36:	4413      	add	r3, r2
90014d38:	2200      	movs	r2, #0
90014d3a:	8103      	strh	r3, [r0, #8]
90014d3c:	4628      	mov	r0, r5
90014d3e:	f7ed ff37 	bl	90002bb0 <_ZN8touchgfx8Drawable5setXYEss>
90014d42:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
90014d44:	892a      	ldrh	r2, [r5, #8]
90014d46:	e7ea      	b.n	90014d1e <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x3a>

90014d48 <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>:
90014d48:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
90014d4c:	f7ff bfca 	b.w	90014ce4 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>

90014d50 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>:
90014d50:	b570      	push	{r4, r5, r6, lr}
90014d52:	4604      	mov	r4, r0
90014d54:	460d      	mov	r5, r1
90014d56:	f7ff fff7 	bl	90014d48 <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>
90014d5a:	4620      	mov	r0, r4
90014d5c:	4629      	mov	r1, r5
90014d5e:	f7ff facd 	bl	900142fc <_ZN8touchgfx9Container3addERNS_8DrawableE>
90014d62:	6960      	ldr	r0, [r4, #20]
90014d64:	b120      	cbz	r0, 90014d70 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE+0x20>
90014d66:	6803      	ldr	r3, [r0, #0]
90014d68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90014d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90014d6e:	4718      	bx	r3
90014d70:	bd70      	pop	{r4, r5, r6, pc}
	...

90014d74 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_>:
90014d74:	b530      	push	{r4, r5, lr}
90014d76:	6a83      	ldr	r3, [r0, #40]	; 0x28
90014d78:	b089      	sub	sp, #36	; 0x24
90014d7a:	4604      	mov	r4, r0
90014d7c:	4615      	mov	r5, r2
90014d7e:	b92b      	cbnz	r3, 90014d8c <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x18>
90014d80:	6803      	ldr	r3, [r0, #0]
90014d82:	4611      	mov	r1, r2
90014d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90014d86:	4798      	blx	r3
90014d88:	b009      	add	sp, #36	; 0x24
90014d8a:	bd30      	pop	{r4, r5, pc}
90014d8c:	f7ff fa9b 	bl	900142c6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>
90014d90:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
90014d94:	2300      	movs	r3, #0
90014d96:	a904      	add	r1, sp, #16
90014d98:	f88d 200c 	strb.w	r2, [sp, #12]
90014d9c:	4620      	mov	r0, r4
90014d9e:	4a0e      	ldr	r2, [pc, #56]	; (90014dd8 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x64>)
90014da0:	f8ad 3004 	strh.w	r3, [sp, #4]
90014da4:	9204      	str	r2, [sp, #16]
90014da6:	aa01      	add	r2, sp, #4
90014da8:	f88d 3006 	strb.w	r3, [sp, #6]
90014dac:	9205      	str	r2, [sp, #20]
90014dae:	4a0b      	ldr	r2, [pc, #44]	; (90014ddc <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x68>)
90014db0:	9502      	str	r5, [sp, #8]
90014db2:	e9cd 2306 	strd	r2, r3, [sp, #24]
90014db6:	6823      	ldr	r3, [r4, #0]
90014db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90014dba:	4798      	blx	r3
90014dbc:	4620      	mov	r0, r4
90014dbe:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
90014dc2:	4629      	mov	r1, r5
90014dc4:	f7ff ff8e 	bl	90014ce4 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>
90014dc8:	6960      	ldr	r0, [r4, #20]
90014dca:	2800      	cmp	r0, #0
90014dcc:	d0dc      	beq.n	90014d88 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
90014dce:	6803      	ldr	r3, [r0, #0]
90014dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90014dd2:	4798      	blx	r3
90014dd4:	e7d8      	b.n	90014d88 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
90014dd6:	bf00      	nop
90014dd8:	9002ec98 	.word	0x9002ec98
90014ddc:	90014bff 	.word	0x90014bff

90014de0 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>:
90014de0:	b538      	push	{r3, r4, r5, lr}
90014de2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90014de6:	4604      	mov	r4, r0
90014de8:	460d      	mov	r5, r1
90014dea:	2b01      	cmp	r3, #1
90014dec:	d002      	beq.n	90014df4 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x14>
90014dee:	2b02      	cmp	r3, #2
90014df0:	d018      	beq.n	90014e24 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x44>
90014df2:	bd38      	pop	{r3, r4, r5, pc}
90014df4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
90014df8:	4293      	cmp	r3, r2
90014dfa:	8943      	ldrh	r3, [r0, #10]
90014dfc:	bfc8      	it	gt
90014dfe:	8102      	strhgt	r2, [r0, #8]
90014e00:	894a      	ldrh	r2, [r1, #10]
90014e02:	1a9b      	subs	r3, r3, r2
90014e04:	8143      	strh	r3, [r0, #10]
90014e06:	4628      	mov	r0, r5
90014e08:	680b      	ldr	r3, [r1, #0]
90014e0a:	2100      	movs	r1, #0
90014e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90014e0e:	4798      	blx	r3
90014e10:	682b      	ldr	r3, [r5, #0]
90014e12:	2100      	movs	r1, #0
90014e14:	4628      	mov	r0, r5
90014e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90014e18:	4798      	blx	r3
90014e1a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
90014e1c:	896a      	ldrh	r2, [r5, #10]
90014e1e:	1a9b      	subs	r3, r3, r2
90014e20:	85e3      	strh	r3, [r4, #46]	; 0x2e
90014e22:	e7e6      	b.n	90014df2 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x12>
90014e24:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
90014e28:	4293      	cmp	r3, r2
90014e2a:	8903      	ldrh	r3, [r0, #8]
90014e2c:	bfc8      	it	gt
90014e2e:	8142      	strhgt	r2, [r0, #10]
90014e30:	890a      	ldrh	r2, [r1, #8]
90014e32:	1a9b      	subs	r3, r3, r2
90014e34:	8103      	strh	r3, [r0, #8]
90014e36:	4628      	mov	r0, r5
90014e38:	680b      	ldr	r3, [r1, #0]
90014e3a:	2100      	movs	r1, #0
90014e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90014e3e:	4798      	blx	r3
90014e40:	682b      	ldr	r3, [r5, #0]
90014e42:	2100      	movs	r1, #0
90014e44:	4628      	mov	r0, r5
90014e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90014e48:	4798      	blx	r3
90014e4a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
90014e4c:	892a      	ldrh	r2, [r5, #8]
90014e4e:	e7e6      	b.n	90014e1e <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x3e>

90014e50 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>:
90014e50:	b530      	push	{r4, r5, lr}
90014e52:	b089      	sub	sp, #36	; 0x24
90014e54:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
90014e58:	2300      	movs	r3, #0
90014e5a:	460d      	mov	r5, r1
90014e5c:	f88d 200c 	strb.w	r2, [sp, #12]
90014e60:	4604      	mov	r4, r0
90014e62:	4a12      	ldr	r2, [pc, #72]	; (90014eac <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x5c>)
90014e64:	f8ad 3004 	strh.w	r3, [sp, #4]
90014e68:	9204      	str	r2, [sp, #16]
90014e6a:	aa01      	add	r2, sp, #4
90014e6c:	f88d 3006 	strb.w	r3, [sp, #6]
90014e70:	9205      	str	r2, [sp, #20]
90014e72:	4a0f      	ldr	r2, [pc, #60]	; (90014eb0 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x60>)
90014e74:	9102      	str	r1, [sp, #8]
90014e76:	a904      	add	r1, sp, #16
90014e78:	e9cd 2306 	strd	r2, r3, [sp, #24]
90014e7c:	6803      	ldr	r3, [r0, #0]
90014e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90014e80:	4798      	blx	r3
90014e82:	f89d 3006 	ldrb.w	r3, [sp, #6]
90014e86:	b14b      	cbz	r3, 90014e9c <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x4c>
90014e88:	4629      	mov	r1, r5
90014e8a:	4620      	mov	r0, r4
90014e8c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
90014e90:	f7ff ffa6 	bl	90014de0 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>
90014e94:	4629      	mov	r1, r5
90014e96:	4620      	mov	r0, r4
90014e98:	f7ff f9fe 	bl	90014298 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
90014e9c:	6960      	ldr	r0, [r4, #20]
90014e9e:	b110      	cbz	r0, 90014ea6 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x56>
90014ea0:	6803      	ldr	r3, [r0, #0]
90014ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90014ea4:	4798      	blx	r3
90014ea6:	b009      	add	sp, #36	; 0x24
90014ea8:	bd30      	pop	{r4, r5, pc}
90014eaa:	bf00      	nop
90014eac:	9002ec98 	.word	0x9002ec98
90014eb0:	90014b01 	.word	0x90014b01

90014eb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
90014eb4:	6803      	ldr	r3, [r0, #0]
90014eb6:	b513      	push	{r0, r1, r4, lr}
90014eb8:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
90014ebc:	2300      	movs	r3, #0
90014ebe:	e9cd 3300 	strd	r3, r3, [sp]
90014ec2:	466b      	mov	r3, sp
90014ec4:	47a0      	blx	r4
90014ec6:	b002      	add	sp, #8
90014ec8:	bd10      	pop	{r4, pc}

90014eca <_ZN8touchgfx3HAL16flushFrameBufferEv>:
90014eca:	2301      	movs	r3, #1
90014ecc:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
90014ed0:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
90014ed4:	4770      	bx	lr

90014ed6 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
90014ed6:	2301      	movs	r3, #1
90014ed8:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
90014edc:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
90014ee0:	4770      	bx	lr

90014ee2 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
90014ee2:	6843      	ldr	r3, [r0, #4]
90014ee4:	2201      	movs	r2, #1
90014ee6:	725a      	strb	r2, [r3, #9]
90014ee8:	6840      	ldr	r0, [r0, #4]
90014eea:	6803      	ldr	r3, [r0, #0]
90014eec:	691b      	ldr	r3, [r3, #16]
90014eee:	4718      	bx	r3

90014ef0 <_ZN8touchgfx3HAL8flushDMAEv>:
90014ef0:	6840      	ldr	r0, [r0, #4]
90014ef2:	6803      	ldr	r3, [r0, #0]
90014ef4:	689b      	ldr	r3, [r3, #8]
90014ef6:	4718      	bx	r3

90014ef8 <_ZN8touchgfx3HAL10beginFrameEv>:
90014ef8:	4b04      	ldr	r3, [pc, #16]	; (90014f0c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
90014efa:	781b      	ldrb	r3, [r3, #0]
90014efc:	b123      	cbz	r3, 90014f08 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
90014efe:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
90014f02:	f080 0001 	eor.w	r0, r0, #1
90014f06:	4770      	bx	lr
90014f08:	2001      	movs	r0, #1
90014f0a:	4770      	bx	lr
90014f0c:	20026cda 	.word	0x20026cda

90014f10 <_ZN8touchgfx3HAL8endFrameEv>:
90014f10:	b510      	push	{r4, lr}
90014f12:	4604      	mov	r4, r0
90014f14:	6840      	ldr	r0, [r0, #4]
90014f16:	6803      	ldr	r3, [r0, #0]
90014f18:	689b      	ldr	r3, [r3, #8]
90014f1a:	4798      	blx	r3
90014f1c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
90014f20:	b113      	cbz	r3, 90014f28 <_ZN8touchgfx3HAL8endFrameEv+0x18>
90014f22:	2301      	movs	r3, #1
90014f24:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
90014f28:	bd10      	pop	{r4, pc}
	...

90014f2c <_ZN8touchgfx3HAL4tickEv>:
90014f2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
90014f2e:	6803      	ldr	r3, [r0, #0]
90014f30:	4604      	mov	r4, r0
90014f32:	4d5c      	ldr	r5, [pc, #368]	; (900150a4 <_ZN8touchgfx3HAL4tickEv+0x178>)
90014f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
90014f38:	4798      	blx	r3
90014f3a:	2800      	cmp	r0, #0
90014f3c:	f000 8097 	beq.w	9001506e <_ZN8touchgfx3HAL4tickEv+0x142>
90014f40:	2001      	movs	r0, #1
90014f42:	2600      	movs	r6, #0
90014f44:	f7ec f8bf 	bl	900010c6 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
90014f48:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
90014f4c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
90014f50:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
90014f54:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
90014f58:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
90014f5c:	b133      	cbz	r3, 90014f6c <_ZN8touchgfx3HAL4tickEv+0x40>
90014f5e:	6823      	ldr	r3, [r4, #0]
90014f60:	4620      	mov	r0, r4
90014f62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
90014f66:	4798      	blx	r3
90014f68:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
90014f6c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
90014f70:	2601      	movs	r6, #1
90014f72:	6862      	ldr	r2, [r4, #4]
90014f74:	f083 0301 	eor.w	r3, r3, #1
90014f78:	702e      	strb	r6, [r5, #0]
90014f7a:	7253      	strb	r3, [r2, #9]
90014f7c:	f004 f814 	bl	90018fa8 <_ZN8touchgfx11Application11getInstanceEv>
90014f80:	6803      	ldr	r3, [r0, #0]
90014f82:	4631      	mov	r1, r6
90014f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90014f86:	4798      	blx	r3
90014f88:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
90014f8c:	b90b      	cbnz	r3, 90014f92 <_ZN8touchgfx3HAL4tickEv+0x66>
90014f8e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
90014f92:	f004 f809 	bl	90018fa8 <_ZN8touchgfx11Application11getInstanceEv>
90014f96:	6803      	ldr	r3, [r0, #0]
90014f98:	695b      	ldr	r3, [r3, #20]
90014f9a:	4798      	blx	r3
90014f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
90014f9e:	6803      	ldr	r3, [r0, #0]
90014fa0:	691b      	ldr	r3, [r3, #16]
90014fa2:	4798      	blx	r3
90014fa4:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
90014fa8:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
90014fac:	3b01      	subs	r3, #1
90014fae:	b2db      	uxtb	r3, r3
90014fb0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
90014fb4:	b10a      	cbz	r2, 90014fba <_ZN8touchgfx3HAL4tickEv+0x8e>
90014fb6:	2b00      	cmp	r3, #0
90014fb8:	d1eb      	bne.n	90014f92 <_ZN8touchgfx3HAL4tickEv+0x66>
90014fba:	4a3b      	ldr	r2, [pc, #236]	; (900150a8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
90014fbc:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
90014fc0:	7813      	ldrb	r3, [r2, #0]
90014fc2:	3301      	adds	r3, #1
90014fc4:	b25b      	sxtb	r3, r3
90014fc6:	4299      	cmp	r1, r3
90014fc8:	7013      	strb	r3, [r2, #0]
90014fca:	dc10      	bgt.n	90014fee <_ZN8touchgfx3HAL4tickEv+0xc2>
90014fcc:	2300      	movs	r3, #0
90014fce:	68e0      	ldr	r0, [r4, #12]
90014fd0:	a902      	add	r1, sp, #8
90014fd2:	7013      	strb	r3, [r2, #0]
90014fd4:	aa03      	add	r2, sp, #12
90014fd6:	6803      	ldr	r3, [r0, #0]
90014fd8:	68db      	ldr	r3, [r3, #12]
90014fda:	4798      	blx	r3
90014fdc:	6823      	ldr	r3, [r4, #0]
90014fde:	2800      	cmp	r0, #0
90014fe0:	d051      	beq.n	90015086 <_ZN8touchgfx3HAL4tickEv+0x15a>
90014fe2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
90014fe6:	4620      	mov	r0, r4
90014fe8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
90014fec:	4798      	blx	r3
90014fee:	2300      	movs	r3, #0
90014ff0:	6960      	ldr	r0, [r4, #20]
90014ff2:	f88d 3007 	strb.w	r3, [sp, #7]
90014ff6:	b158      	cbz	r0, 90015010 <_ZN8touchgfx3HAL4tickEv+0xe4>
90014ff8:	6803      	ldr	r3, [r0, #0]
90014ffa:	f10d 0107 	add.w	r1, sp, #7
90014ffe:	68db      	ldr	r3, [r3, #12]
90015000:	4798      	blx	r3
90015002:	b128      	cbz	r0, 90015010 <_ZN8touchgfx3HAL4tickEv+0xe4>
90015004:	6da0      	ldr	r0, [r4, #88]	; 0x58
90015006:	f89d 1007 	ldrb.w	r1, [sp, #7]
9001500a:	6803      	ldr	r3, [r0, #0]
9001500c:	68db      	ldr	r3, [r3, #12]
9001500e:	4798      	blx	r3
90015010:	f104 001c 	add.w	r0, r4, #28
90015014:	f012 ff5a 	bl	90027ecc <_ZN8touchgfx8Gestures4tickEv>
90015018:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
9001501c:	b30b      	cbz	r3, 90015062 <_ZN8touchgfx3HAL4tickEv+0x136>
9001501e:	6920      	ldr	r0, [r4, #16]
90015020:	6803      	ldr	r3, [r0, #0]
90015022:	691b      	ldr	r3, [r3, #16]
90015024:	4798      	blx	r3
90015026:	6f23      	ldr	r3, [r4, #112]	; 0x70
90015028:	4606      	mov	r6, r0
9001502a:	b903      	cbnz	r3, 9001502e <_ZN8touchgfx3HAL4tickEv+0x102>
9001502c:	6720      	str	r0, [r4, #112]	; 0x70
9001502e:	6f23      	ldr	r3, [r4, #112]	; 0x70
90015030:	4a1e      	ldr	r2, [pc, #120]	; (900150ac <_ZN8touchgfx3HAL4tickEv+0x180>)
90015032:	1af3      	subs	r3, r6, r3
90015034:	4293      	cmp	r3, r2
90015036:	d914      	bls.n	90015062 <_ZN8touchgfx3HAL4tickEv+0x136>
90015038:	6920      	ldr	r0, [r4, #16]
9001503a:	6803      	ldr	r3, [r0, #0]
9001503c:	699b      	ldr	r3, [r3, #24]
9001503e:	4798      	blx	r3
90015040:	6f23      	ldr	r3, [r4, #112]	; 0x70
90015042:	2264      	movs	r2, #100	; 0x64
90015044:	1af3      	subs	r3, r6, r3
90015046:	fbb3 f3f2 	udiv	r3, r3, r2
9001504a:	fbb0 f0f3 	udiv	r0, r0, r3
9001504e:	2800      	cmp	r0, #0
90015050:	dc1e      	bgt.n	90015090 <_ZN8touchgfx3HAL4tickEv+0x164>
90015052:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
90015056:	6920      	ldr	r0, [r4, #16]
90015058:	2100      	movs	r1, #0
9001505a:	6803      	ldr	r3, [r0, #0]
9001505c:	69db      	ldr	r3, [r3, #28]
9001505e:	4798      	blx	r3
90015060:	6726      	str	r6, [r4, #112]	; 0x70
90015062:	f003 ffa1 	bl	90018fa8 <_ZN8touchgfx11Application11getInstanceEv>
90015066:	6803      	ldr	r3, [r0, #0]
90015068:	2100      	movs	r1, #0
9001506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001506c:	4798      	blx	r3
9001506e:	6823      	ldr	r3, [r4, #0]
90015070:	4620      	mov	r0, r4
90015072:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
90015076:	4798      	blx	r3
90015078:	2001      	movs	r0, #1
9001507a:	f7ec f825 	bl	900010c8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
9001507e:	2300      	movs	r3, #0
90015080:	702b      	strb	r3, [r5, #0]
90015082:	b004      	add	sp, #16
90015084:	bd70      	pop	{r4, r5, r6, pc}
90015086:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
9001508a:	4620      	mov	r0, r4
9001508c:	4798      	blx	r3
9001508e:	e7ae      	b.n	90014fee <_ZN8touchgfx3HAL4tickEv+0xc2>
90015090:	2863      	cmp	r0, #99	; 0x63
90015092:	bfcb      	itete	gt
90015094:	2300      	movgt	r3, #0
90015096:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
9001509a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
9001509e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
900150a2:	e7d8      	b.n	90015056 <_ZN8touchgfx3HAL4tickEv+0x12a>
900150a4:	20026ce0 	.word	0x20026ce0
900150a8:	20026ce1 	.word	0x20026ce1
900150ac:	05f5e100 	.word	0x05f5e100

900150b0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
900150b0:	f7ec b93c 	b.w	9000132c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

900150b4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
900150b4:	6581      	str	r1, [r0, #88]	; 0x58
900150b6:	301c      	adds	r0, #28
900150b8:	f012 bf06 	b.w	90027ec8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

900150bc <_ZN8touchgfx3HAL5touchEll>:
900150bc:	b530      	push	{r4, r5, lr}
900150be:	b087      	sub	sp, #28
900150c0:	4604      	mov	r4, r0
900150c2:	a804      	add	r0, sp, #16
900150c4:	e9cd 1204 	strd	r1, r2, [sp, #16]
900150c8:	f003 fd12 	bl	90018af0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
900150cc:	9b04      	ldr	r3, [sp, #16]
900150ce:	a906      	add	r1, sp, #24
900150d0:	a803      	add	r0, sp, #12
900150d2:	f8ad 300c 	strh.w	r3, [sp, #12]
900150d6:	9b05      	ldr	r3, [sp, #20]
900150d8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
900150dc:	f003 fd46 	bl	90018b6c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
900150e0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
900150e4:	f104 001c 	add.w	r0, r4, #28
900150e8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
900150ec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
900150f0:	b189      	cbz	r1, 90015116 <_ZN8touchgfx3HAL5touchEll+0x5a>
900150f2:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
900150f6:	9300      	str	r3, [sp, #0]
900150f8:	4613      	mov	r3, r2
900150fa:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
900150fe:	462a      	mov	r2, r5
90015100:	f012 fef2 	bl	90027ee8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
90015104:	b128      	cbz	r0, 90015112 <_ZN8touchgfx3HAL5touchEll+0x56>
90015106:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001510a:	65e3      	str	r3, [r4, #92]	; 0x5c
9001510c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
90015110:	6623      	str	r3, [r4, #96]	; 0x60
90015112:	b007      	add	sp, #28
90015114:	bd30      	pop	{r4, r5, pc}
90015116:	f012 ff2b 	bl	90027f70 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
9001511a:	2301      	movs	r3, #1
9001511c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
90015120:	e7f1      	b.n	90015106 <_ZN8touchgfx3HAL5touchEll+0x4a>

90015122 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
90015122:	b570      	push	{r4, r5, r6, lr}
90015124:	2b00      	cmp	r3, #0
90015126:	d050      	beq.n	900151ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
90015128:	ea81 0002 	eor.w	r0, r1, r2
9001512c:	07c6      	lsls	r6, r0, #31
9001512e:	d508      	bpl.n	90015142 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
90015130:	3a01      	subs	r2, #1
90015132:	18cc      	adds	r4, r1, r3
90015134:	42a1      	cmp	r1, r4
90015136:	d048      	beq.n	900151ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
90015138:	f812 0f01 	ldrb.w	r0, [r2, #1]!
9001513c:	f801 0b01 	strb.w	r0, [r1], #1
90015140:	e7f8      	b.n	90015134 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
90015142:	07d5      	lsls	r5, r2, #31
90015144:	bf42      	ittt	mi
90015146:	f812 0b01 	ldrbmi.w	r0, [r2], #1
9001514a:	f103 33ff 	addmi.w	r3, r3, #4294967295
9001514e:	f801 0b01 	strbmi.w	r0, [r1], #1
90015152:	2b01      	cmp	r3, #1
90015154:	d915      	bls.n	90015182 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
90015156:	ea82 0001 	eor.w	r0, r2, r1
9001515a:	0784      	lsls	r4, r0, #30
9001515c:	d02d      	beq.n	900151ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
9001515e:	1e94      	subs	r4, r2, #2
90015160:	4608      	mov	r0, r1
90015162:	18ce      	adds	r6, r1, r3
90015164:	f834 5f02 	ldrh.w	r5, [r4, #2]!
90015168:	f820 5b02 	strh.w	r5, [r0], #2
9001516c:	1a35      	subs	r5, r6, r0
9001516e:	2d01      	cmp	r5, #1
90015170:	d8f8      	bhi.n	90015164 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
90015172:	1e98      	subs	r0, r3, #2
90015174:	f003 0301 	and.w	r3, r3, #1
90015178:	f020 0001 	bic.w	r0, r0, #1
9001517c:	3002      	adds	r0, #2
9001517e:	4401      	add	r1, r0
90015180:	4402      	add	r2, r0
90015182:	1f14      	subs	r4, r2, #4
90015184:	4608      	mov	r0, r1
90015186:	18ce      	adds	r6, r1, r3
90015188:	1a35      	subs	r5, r6, r0
9001518a:	2d03      	cmp	r5, #3
9001518c:	d810      	bhi.n	900151b0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
9001518e:	089c      	lsrs	r4, r3, #2
90015190:	00a0      	lsls	r0, r4, #2
90015192:	4401      	add	r1, r0
90015194:	3801      	subs	r0, #1
90015196:	4402      	add	r2, r0
90015198:	f06f 0003 	mvn.w	r0, #3
9001519c:	fb00 3404 	mla	r4, r0, r4, r3
900151a0:	440c      	add	r4, r1
900151a2:	42a1      	cmp	r1, r4
900151a4:	d011      	beq.n	900151ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
900151a6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
900151aa:	f801 3b01 	strb.w	r3, [r1], #1
900151ae:	e7f8      	b.n	900151a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
900151b0:	f854 5f04 	ldr.w	r5, [r4, #4]!
900151b4:	f840 5b04 	str.w	r5, [r0], #4
900151b8:	e7e6      	b.n	90015188 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
900151ba:	0790      	lsls	r0, r2, #30
900151bc:	d0e1      	beq.n	90015182 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
900151be:	f832 0b02 	ldrh.w	r0, [r2], #2
900151c2:	3b02      	subs	r3, #2
900151c4:	f821 0b02 	strh.w	r0, [r1], #2
900151c8:	e7db      	b.n	90015182 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
900151ca:	2001      	movs	r0, #1
900151cc:	bd70      	pop	{r4, r5, r6, pc}

900151ce <_ZN8touchgfx3HAL7noTouchEv>:
900151ce:	b510      	push	{r4, lr}
900151d0:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
900151d4:	4604      	mov	r4, r0
900151d6:	b153      	cbz	r3, 900151ee <_ZN8touchgfx3HAL7noTouchEv+0x20>
900151d8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
900151dc:	2101      	movs	r1, #1
900151de:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
900151e2:	301c      	adds	r0, #28
900151e4:	f012 fec4 	bl	90027f70 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
900151e8:	2300      	movs	r3, #0
900151ea:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
900151ee:	bd10      	pop	{r4, pc}

900151f0 <_ZN8touchgfx3HAL3lcdEv>:
900151f0:	4b04      	ldr	r3, [pc, #16]	; (90015204 <_ZN8touchgfx3HAL3lcdEv+0x14>)
900151f2:	681b      	ldr	r3, [r3, #0]
900151f4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
900151f8:	b10a      	cbz	r2, 900151fe <_ZN8touchgfx3HAL3lcdEv+0xe>
900151fa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
900151fc:	b900      	cbnz	r0, 90015200 <_ZN8touchgfx3HAL3lcdEv+0x10>
900151fe:	6898      	ldr	r0, [r3, #8]
90015200:	4770      	bx	lr
90015202:	bf00      	nop
90015204:	20026cdc 	.word	0x20026cdc

90015208 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
90015208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001520c:	4604      	mov	r4, r0
9001520e:	6980      	ldr	r0, [r0, #24]
90015210:	b085      	sub	sp, #20
90015212:	460f      	mov	r7, r1
90015214:	4690      	mov	r8, r2
90015216:	4699      	mov	r9, r3
90015218:	b930      	cbnz	r0, 90015228 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
9001521a:	4b1c      	ldr	r3, [pc, #112]	; (9001528c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
9001521c:	f44f 71a1 	mov.w	r1, #322	; 0x142
90015220:	4a1b      	ldr	r2, [pc, #108]	; (90015290 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
90015222:	481c      	ldr	r0, [pc, #112]	; (90015294 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
90015224:	f013 fd06 	bl	90028c34 <__assert_func>
90015228:	ad04      	add	r5, sp, #16
9001522a:	2600      	movs	r6, #0
9001522c:	f845 6d04 	str.w	r6, [r5, #-4]!
90015230:	6806      	ldr	r6, [r0, #0]
90015232:	9501      	str	r5, [sp, #4]
90015234:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
90015238:	9500      	str	r5, [sp, #0]
9001523a:	6835      	ldr	r5, [r6, #0]
9001523c:	47a8      	blx	r5
9001523e:	4d16      	ldr	r5, [pc, #88]	; (90015298 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
90015240:	4606      	mov	r6, r0
90015242:	f8a5 9000 	strh.w	r9, [r5]
90015246:	f7ff ffd3 	bl	900151f0 <_ZN8touchgfx3HAL3lcdEv>
9001524a:	6803      	ldr	r3, [r0, #0]
9001524c:	6a1b      	ldr	r3, [r3, #32]
9001524e:	4798      	blx	r3
90015250:	2801      	cmp	r0, #1
90015252:	d012      	beq.n	9001527a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
90015254:	d306      	bcc.n	90015264 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
90015256:	280d      	cmp	r0, #13
90015258:	d80b      	bhi.n	90015272 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
9001525a:	4b10      	ldr	r3, [pc, #64]	; (9001529c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
9001525c:	f44f 71b0 	mov.w	r1, #352	; 0x160
90015260:	4a0b      	ldr	r2, [pc, #44]	; (90015290 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
90015262:	e7de      	b.n	90015222 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
90015264:	882b      	ldrh	r3, [r5, #0]
90015266:	fb08 7203 	mla	r2, r8, r3, r7
9001526a:	9b03      	ldr	r3, [sp, #12]
9001526c:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
90015270:	63e3      	str	r3, [r4, #60]	; 0x3c
90015272:	4630      	mov	r0, r6
90015274:	b005      	add	sp, #20
90015276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001527a:	882a      	ldrh	r2, [r5, #0]
9001527c:	9b03      	ldr	r3, [sp, #12]
9001527e:	fb08 7202 	mla	r2, r8, r2, r7
90015282:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90015286:	1a9a      	subs	r2, r3, r2
90015288:	63e2      	str	r2, [r4, #60]	; 0x3c
9001528a:	e7f2      	b.n	90015272 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
9001528c:	9002ee5f 	.word	0x9002ee5f
90015290:	9002f0b9 	.word	0x9002f0b9
90015294:	9002eea4 	.word	0x9002eea4
90015298:	20026cd6 	.word	0x20026cd6
9001529c:	9002eeca 	.word	0x9002eeca

900152a0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
900152a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900152a4:	4698      	mov	r8, r3
900152a6:	6803      	ldr	r3, [r0, #0]
900152a8:	b087      	sub	sp, #28
900152aa:	460e      	mov	r6, r1
900152ac:	6c5d      	ldr	r5, [r3, #68]	; 0x44
900152ae:	4617      	mov	r7, r2
900152b0:	4b0d      	ldr	r3, [pc, #52]	; (900152e8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
900152b2:	4604      	mov	r4, r0
900152b4:	f8b3 9000 	ldrh.w	r9, [r3]
900152b8:	f7ff ff9a 	bl	900151f0 <_ZN8touchgfx3HAL3lcdEv>
900152bc:	6803      	ldr	r3, [r0, #0]
900152be:	6a1b      	ldr	r3, [r3, #32]
900152c0:	4798      	blx	r3
900152c2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
900152c6:	463a      	mov	r2, r7
900152c8:	4631      	mov	r1, r6
900152ca:	9302      	str	r3, [sp, #8]
900152cc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
900152d0:	9301      	str	r3, [sp, #4]
900152d2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
900152d6:	e9cd 9003 	strd	r9, r0, [sp, #12]
900152da:	9300      	str	r3, [sp, #0]
900152dc:	4620      	mov	r0, r4
900152de:	4643      	mov	r3, r8
900152e0:	47a8      	blx	r5
900152e2:	b007      	add	sp, #28
900152e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900152e8:	20026cd6 	.word	0x20026cd6

900152ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
900152ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900152f0:	4604      	mov	r4, r0
900152f2:	b08b      	sub	sp, #44	; 0x2c
900152f4:	4610      	mov	r0, r2
900152f6:	460d      	mov	r5, r1
900152f8:	4691      	mov	r9, r2
900152fa:	461e      	mov	r6, r3
900152fc:	f006 ffe0 	bl	9001c2c0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
90015300:	2800      	cmp	r0, #0
90015302:	f000 80a0 	beq.w	90015446 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
90015306:	6823      	ldr	r3, [r4, #0]
90015308:	4620      	mov	r0, r4
9001530a:	f8df b170 	ldr.w	fp, [pc, #368]	; 9001547c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>
9001530e:	af0a      	add	r7, sp, #40	; 0x28
90015310:	6a1b      	ldr	r3, [r3, #32]
90015312:	4798      	blx	r3
90015314:	6823      	ldr	r3, [r4, #0]
90015316:	4620      	mov	r0, r4
90015318:	f8df a164 	ldr.w	sl, [pc, #356]	; 90015480 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>
9001531c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001531e:	4798      	blx	r3
90015320:	f8bb 3000 	ldrh.w	r3, [fp]
90015324:	f827 9d0c 	strh.w	r9, [r7, #-12]!
90015328:	4638      	mov	r0, r7
9001532a:	9301      	str	r3, [sp, #4]
9001532c:	f8ba 3000 	ldrh.w	r3, [sl]
90015330:	9302      	str	r3, [sp, #8]
90015332:	4b4f      	ldr	r3, [pc, #316]	; (90015470 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
90015334:	881a      	ldrh	r2, [r3, #0]
90015336:	4698      	mov	r8, r3
90015338:	9203      	str	r2, [sp, #12]
9001533a:	4a4e      	ldr	r2, [pc, #312]	; (90015474 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
9001533c:	8812      	ldrh	r2, [r2, #0]
9001533e:	9204      	str	r2, [sp, #16]
90015340:	4a4d      	ldr	r2, [pc, #308]	; (90015478 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x18c>)
90015342:	7812      	ldrb	r2, [r2, #0]
90015344:	2a00      	cmp	r2, #0
90015346:	f040 8081 	bne.w	9001544c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x160>
9001534a:	f007 f873 	bl	9001c434 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001534e:	f8ab 0000 	strh.w	r0, [fp]
90015352:	4638      	mov	r0, r7
90015354:	f007 f8a8 	bl	9001c4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
90015358:	f8aa 0000 	strh.w	r0, [sl]
9001535c:	4638      	mov	r0, r7
9001535e:	f007 f869 	bl	9001c434 <_ZNK8touchgfx6Bitmap8getWidthEv>
90015362:	f8a8 0000 	strh.w	r0, [r8]
90015366:	4638      	mov	r0, r7
90015368:	f007 f89e 	bl	9001c4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001536c:	4b41      	ldr	r3, [pc, #260]	; (90015474 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
9001536e:	8018      	strh	r0, [r3, #0]
90015370:	4648      	mov	r0, r9
90015372:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
90015376:	f006 ffa3 	bl	9001c2c0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
9001537a:	2200      	movs	r2, #0
9001537c:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
90015380:	4611      	mov	r1, r2
90015382:	4628      	mov	r0, r5
90015384:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
90015388:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
9001538c:	f7ed fc10 	bl	90002bb0 <_ZN8touchgfx8Drawable5setXYEss>
90015390:	2301      	movs	r3, #1
90015392:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
90015396:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
9001539a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
9001539e:	2b00      	cmp	r3, #0
900153a0:	dd5c      	ble.n	9001545c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
900153a2:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
900153a6:	2b00      	cmp	r3, #0
900153a8:	dd58      	ble.n	9001545c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
900153aa:	462a      	mov	r2, r5
900153ac:	ab08      	add	r3, sp, #32
900153ae:	f852 0f04 	ldr.w	r0, [r2, #4]!
900153b2:	6851      	ldr	r1, [r2, #4]
900153b4:	c303      	stmia	r3!, {r0, r1}
900153b6:	4631      	mov	r1, r6
900153b8:	a808      	add	r0, sp, #32
900153ba:	f7fe ffcf 	bl	9001435c <_ZN8touchgfx4RectaNERKS0_>
900153be:	a807      	add	r0, sp, #28
900153c0:	f007 f9ca 	bl	9001c758 <_ZNK8touchgfx6Bitmap9getFormatEv>
900153c4:	4606      	mov	r6, r0
900153c6:	f7ff ff13 	bl	900151f0 <_ZN8touchgfx3HAL3lcdEv>
900153ca:	6803      	ldr	r3, [r0, #0]
900153cc:	6a1b      	ldr	r3, [r3, #32]
900153ce:	4798      	blx	r3
900153d0:	4286      	cmp	r6, r0
900153d2:	d04a      	beq.n	9001546a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x17e>
900153d4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
900153d6:	b150      	cbz	r0, 900153ee <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
900153d8:	a807      	add	r0, sp, #28
900153da:	f007 f9bd 	bl	9001c758 <_ZNK8touchgfx6Bitmap9getFormatEv>
900153de:	4606      	mov	r6, r0
900153e0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
900153e2:	6803      	ldr	r3, [r0, #0]
900153e4:	6a1b      	ldr	r3, [r3, #32]
900153e6:	4798      	blx	r3
900153e8:	1a33      	subs	r3, r6, r0
900153ea:	4258      	negs	r0, r3
900153ec:	4158      	adcs	r0, r3
900153ee:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
900153f2:	2600      	movs	r6, #0
900153f4:	696b      	ldr	r3, [r5, #20]
900153f6:	a908      	add	r1, sp, #32
900153f8:	682a      	ldr	r2, [r5, #0]
900153fa:	4628      	mov	r0, r5
900153fc:	9305      	str	r3, [sp, #20]
900153fe:	616e      	str	r6, [r5, #20]
90015400:	6892      	ldr	r2, [r2, #8]
90015402:	4790      	blx	r2
90015404:	9b05      	ldr	r3, [sp, #20]
90015406:	4652      	mov	r2, sl
90015408:	4649      	mov	r1, r9
9001540a:	616b      	str	r3, [r5, #20]
9001540c:	4628      	mov	r0, r5
9001540e:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
90015412:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
90015416:	f7ed fbcb 	bl	90002bb0 <_ZN8touchgfx8Drawable5setXYEss>
9001541a:	9a01      	ldr	r2, [sp, #4]
9001541c:	4b17      	ldr	r3, [pc, #92]	; (9001547c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>)
9001541e:	4620      	mov	r0, r4
90015420:	801a      	strh	r2, [r3, #0]
90015422:	9a02      	ldr	r2, [sp, #8]
90015424:	4b16      	ldr	r3, [pc, #88]	; (90015480 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>)
90015426:	801a      	strh	r2, [r3, #0]
90015428:	9a03      	ldr	r2, [sp, #12]
9001542a:	4b11      	ldr	r3, [pc, #68]	; (90015470 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
9001542c:	801a      	strh	r2, [r3, #0]
9001542e:	4b11      	ldr	r3, [pc, #68]	; (90015474 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
90015430:	9a04      	ldr	r2, [sp, #16]
90015432:	801a      	strh	r2, [r3, #0]
90015434:	6823      	ldr	r3, [r4, #0]
90015436:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
9001543a:	6a1b      	ldr	r3, [r3, #32]
9001543c:	4798      	blx	r3
9001543e:	6823      	ldr	r3, [r4, #0]
90015440:	4620      	mov	r0, r4
90015442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90015444:	4798      	blx	r3
90015446:	b00b      	add	sp, #44	; 0x2c
90015448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001544c:	f007 f82c 	bl	9001c4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
90015450:	f8ab 0000 	strh.w	r0, [fp]
90015454:	4638      	mov	r0, r7
90015456:	f006 ffed 	bl	9001c434 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001545a:	e77d      	b.n	90015358 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x6c>
9001545c:	462a      	mov	r2, r5
9001545e:	ab08      	add	r3, sp, #32
90015460:	f852 0f04 	ldr.w	r0, [r2, #4]!
90015464:	6851      	ldr	r1, [r2, #4]
90015466:	c303      	stmia	r3!, {r0, r1}
90015468:	e7a9      	b.n	900153be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xd2>
9001546a:	2000      	movs	r0, #0
9001546c:	e7bf      	b.n	900153ee <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
9001546e:	bf00      	nop
90015470:	20026cd0 	.word	0x20026cd0
90015474:	20026cd2 	.word	0x20026cd2
90015478:	20026cd4 	.word	0x20026cd4
9001547c:	20026cd6 	.word	0x20026cd6
90015480:	20026cd8 	.word	0x20026cd8

90015484 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
90015484:	4b07      	ldr	r3, [pc, #28]	; (900154a4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
90015486:	b510      	push	{r4, lr}
90015488:	781b      	ldrb	r3, [r3, #0]
9001548a:	4604      	mov	r4, r0
9001548c:	b13b      	cbz	r3, 9001549e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
9001548e:	6803      	ldr	r3, [r0, #0]
90015490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90015492:	4798      	blx	r3
90015494:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90015496:	4283      	cmp	r3, r0
90015498:	d101      	bne.n	9001549e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
9001549a:	6c20      	ldr	r0, [r4, #64]	; 0x40
9001549c:	bd10      	pop	{r4, pc}
9001549e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
900154a0:	e7fc      	b.n	9001549c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
900154a2:	bf00      	nop
900154a4:	20026cda 	.word	0x20026cda

900154a8 <_ZN8touchgfx3HAL10initializeEv>:
900154a8:	b510      	push	{r4, lr}
900154aa:	4604      	mov	r4, r0
900154ac:	f7eb ff0e 	bl	900012cc <_ZN8touchgfx10OSWrappers10initializeEv>
900154b0:	6860      	ldr	r0, [r4, #4]
900154b2:	6803      	ldr	r3, [r0, #0]
900154b4:	68db      	ldr	r3, [r3, #12]
900154b6:	4798      	blx	r3
900154b8:	68e0      	ldr	r0, [r4, #12]
900154ba:	6803      	ldr	r3, [r0, #0]
900154bc:	689b      	ldr	r3, [r3, #8]
900154be:	4798      	blx	r3
900154c0:	6823      	ldr	r3, [r4, #0]
900154c2:	4620      	mov	r0, r4
900154c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900154c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900154ca:	4718      	bx	r3

900154cc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
900154cc:	b508      	push	{r3, lr}
900154ce:	290d      	cmp	r1, #13
900154d0:	d817      	bhi.n	90015502 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
900154d2:	e8df f001 	tbb	[pc, r1]
900154d6:	090b      	.short	0x090b
900154d8:	0d0d0d07 	.word	0x0d0d0d07
900154dc:	1414140d 	.word	0x1414140d
900154e0:	0d0d1414 	.word	0x0d0d1414
900154e4:	2020      	movs	r0, #32
900154e6:	bd08      	pop	{r3, pc}
900154e8:	2018      	movs	r0, #24
900154ea:	e7fc      	b.n	900154e6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
900154ec:	2010      	movs	r0, #16
900154ee:	e7fa      	b.n	900154e6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
900154f0:	4b05      	ldr	r3, [pc, #20]	; (90015508 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
900154f2:	f44f 7111 	mov.w	r1, #580	; 0x244
900154f6:	4a05      	ldr	r2, [pc, #20]	; (9001550c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
900154f8:	4805      	ldr	r0, [pc, #20]	; (90015510 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
900154fa:	f013 fb9b 	bl	90028c34 <__assert_func>
900154fe:	2008      	movs	r0, #8
90015500:	e7f1      	b.n	900154e6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
90015502:	2000      	movs	r0, #0
90015504:	e7ef      	b.n	900154e6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
90015506:	bf00      	nop
90015508:	9002ef9d 	.word	0x9002ef9d
9001550c:	9002f27b 	.word	0x9002f27b
90015510:	9002eea4 	.word	0x9002eea4

90015514 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
90015514:	b570      	push	{r4, r5, r6, lr}
90015516:	460d      	mov	r5, r1
90015518:	f89d 1014 	ldrb.w	r1, [sp, #20]
9001551c:	4616      	mov	r6, r2
9001551e:	461c      	mov	r4, r3
90015520:	f7ff ffd4 	bl	900154cc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
90015524:	f8bd 1010 	ldrh.w	r1, [sp, #16]
90015528:	10c0      	asrs	r0, r0, #3
9001552a:	fb06 5101 	mla	r1, r6, r1, r5
9001552e:	fb00 4001 	mla	r0, r0, r1, r4
90015532:	bd70      	pop	{r4, r5, r6, pc}

90015534 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
90015534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90015538:	b08a      	sub	sp, #40	; 0x28
9001553a:	f04f 0c00 	mov.w	ip, #0
9001553e:	4604      	mov	r4, r0
90015540:	469a      	mov	sl, r3
90015542:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
90015546:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
9001554a:	f1b8 0f02 	cmp.w	r8, #2
9001554e:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
90015552:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
90015556:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
9001555a:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
9001555e:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
90015562:	f8cd c020 	str.w	ip, [sp, #32]
90015566:	d030      	beq.n	900155ca <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
90015568:	2bff      	cmp	r3, #255	; 0xff
9001556a:	d12c      	bne.n	900155c6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
9001556c:	4560      	cmp	r0, ip
9001556e:	bf14      	ite	ne
90015570:	2004      	movne	r0, #4
90015572:	2001      	moveq	r0, #1
90015574:	9204      	str	r2, [sp, #16]
90015576:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
9001557a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
9001557e:	f8ad 201c 	strh.w	r2, [sp, #28]
90015582:	f8ad 6018 	strh.w	r6, [sp, #24]
90015586:	f8ad 501a 	strh.w	r5, [sp, #26]
9001558a:	e9cd 0102 	strd	r0, r1, [sp, #8]
9001558e:	4620      	mov	r0, r4
90015590:	f7ff ff78 	bl	90015484 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90015594:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
90015598:	4603      	mov	r3, r0
9001559a:	4651      	mov	r1, sl
9001559c:	4620      	mov	r0, r4
9001559e:	e9cd 9700 	strd	r9, r7, [sp]
900155a2:	f7ff ffb7 	bl	90015514 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
900155a6:	f8ad 901e 	strh.w	r9, [sp, #30]
900155aa:	9005      	str	r0, [sp, #20]
900155ac:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
900155b0:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
900155b4:	b106      	cbz	r6, 900155b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
900155b6:	b98d      	cbnz	r5, 900155dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
900155b8:	4b12      	ldr	r3, [pc, #72]	; (90015604 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
900155ba:	f240 11c3 	movw	r1, #451	; 0x1c3
900155be:	4a12      	ldr	r2, [pc, #72]	; (90015608 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
900155c0:	4812      	ldr	r0, [pc, #72]	; (9001560c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
900155c2:	f013 fb37 	bl	90028c34 <__assert_func>
900155c6:	2004      	movs	r0, #4
900155c8:	e7d4      	b.n	90015574 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
900155ca:	2bff      	cmp	r3, #255	; 0xff
900155cc:	d104      	bne.n	900155d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
900155ce:	2800      	cmp	r0, #0
900155d0:	bf14      	ite	ne
900155d2:	2040      	movne	r0, #64	; 0x40
900155d4:	2020      	moveq	r0, #32
900155d6:	e7cd      	b.n	90015574 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
900155d8:	2040      	movs	r0, #64	; 0x40
900155da:	e7cb      	b.n	90015574 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
900155dc:	6823      	ldr	r3, [r4, #0]
900155de:	4620      	mov	r0, r4
900155e0:	9d02      	ldr	r5, [sp, #8]
900155e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900155e4:	4798      	blx	r3
900155e6:	4228      	tst	r0, r5
900155e8:	d104      	bne.n	900155f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
900155ea:	4b09      	ldr	r3, [pc, #36]	; (90015610 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
900155ec:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
900155f0:	4a05      	ldr	r2, [pc, #20]	; (90015608 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
900155f2:	e7e5      	b.n	900155c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
900155f4:	6860      	ldr	r0, [r4, #4]
900155f6:	a902      	add	r1, sp, #8
900155f8:	6803      	ldr	r3, [r0, #0]
900155fa:	685b      	ldr	r3, [r3, #4]
900155fc:	4798      	blx	r3
900155fe:	b00a      	add	sp, #40	; 0x28
90015600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90015604:	9002ef20 	.word	0x9002ef20
90015608:	9002f11d 	.word	0x9002f11d
9001560c:	9002eea4 	.word	0x9002eea4
90015610:	9002ef58 	.word	0x9002ef58

90015614 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
90015614:	b510      	push	{r4, lr}
90015616:	b08a      	sub	sp, #40	; 0x28
90015618:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
9001561c:	9408      	str	r4, [sp, #32]
9001561e:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
90015622:	9407      	str	r4, [sp, #28]
90015624:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
90015628:	9406      	str	r4, [sp, #24]
9001562a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
9001562e:	9405      	str	r4, [sp, #20]
90015630:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
90015634:	9404      	str	r4, [sp, #16]
90015636:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
9001563a:	9403      	str	r4, [sp, #12]
9001563c:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
90015640:	9402      	str	r4, [sp, #8]
90015642:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
90015646:	e9cd 3400 	strd	r3, r4, [sp]
9001564a:	4613      	mov	r3, r2
9001564c:	2200      	movs	r2, #0
9001564e:	f7ff ff71 	bl	90015534 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
90015652:	b00a      	add	sp, #40	; 0x28
90015654:	bd10      	pop	{r4, pc}
	...

90015658 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
90015658:	b5f0      	push	{r4, r5, r6, r7, lr}
9001565a:	b08b      	sub	sp, #44	; 0x2c
9001565c:	4616      	mov	r6, r2
9001565e:	460d      	mov	r5, r1
90015660:	461f      	mov	r7, r3
90015662:	4604      	mov	r4, r0
90015664:	f7ff fdc4 	bl	900151f0 <_ZN8touchgfx3HAL3lcdEv>
90015668:	6803      	ldr	r3, [r0, #0]
9001566a:	6a1b      	ldr	r3, [r3, #32]
9001566c:	4798      	blx	r3
9001566e:	4b0e      	ldr	r3, [pc, #56]	; (900156a8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
90015670:	2200      	movs	r2, #0
90015672:	4629      	mov	r1, r5
90015674:	e9cd 0007 	strd	r0, r0, [sp, #28]
90015678:	881b      	ldrh	r3, [r3, #0]
9001567a:	4620      	mov	r0, r4
9001567c:	9306      	str	r3, [sp, #24]
9001567e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
90015682:	9305      	str	r3, [sp, #20]
90015684:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
90015688:	9304      	str	r3, [sp, #16]
9001568a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
9001568e:	9303      	str	r3, [sp, #12]
90015690:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90015694:	9302      	str	r3, [sp, #8]
90015696:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
9001569a:	e9cd 7300 	strd	r7, r3, [sp]
9001569e:	4633      	mov	r3, r6
900156a0:	f7ff ff48 	bl	90015534 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
900156a4:	b00b      	add	sp, #44	; 0x2c
900156a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
900156a8:	20026cd6 	.word	0x20026cd6

900156ac <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
900156ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900156b0:	461f      	mov	r7, r3
900156b2:	4b14      	ldr	r3, [pc, #80]	; (90015704 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
900156b4:	b08a      	sub	sp, #40	; 0x28
900156b6:	4616      	mov	r6, r2
900156b8:	f8b3 8000 	ldrh.w	r8, [r3]
900156bc:	460d      	mov	r5, r1
900156be:	4604      	mov	r4, r0
900156c0:	f7ff fd96 	bl	900151f0 <_ZN8touchgfx3HAL3lcdEv>
900156c4:	6803      	ldr	r3, [r0, #0]
900156c6:	6a1b      	ldr	r3, [r3, #32]
900156c8:	4798      	blx	r3
900156ca:	2302      	movs	r3, #2
900156cc:	9008      	str	r0, [sp, #32]
900156ce:	2200      	movs	r2, #0
900156d0:	4629      	mov	r1, r5
900156d2:	4620      	mov	r0, r4
900156d4:	e9cd 8306 	strd	r8, r3, [sp, #24]
900156d8:	2301      	movs	r3, #1
900156da:	9305      	str	r3, [sp, #20]
900156dc:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
900156e0:	9304      	str	r3, [sp, #16]
900156e2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
900156e6:	9303      	str	r3, [sp, #12]
900156e8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
900156ec:	9302      	str	r3, [sp, #8]
900156ee:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
900156f2:	e9cd 7300 	strd	r7, r3, [sp]
900156f6:	4633      	mov	r3, r6
900156f8:	f7ff ff1c 	bl	90015534 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
900156fc:	b00a      	add	sp, #40	; 0x28
900156fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90015702:	bf00      	nop
90015704:	20026cd6 	.word	0x20026cd6

90015708 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
90015708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001570c:	b08b      	sub	sp, #44	; 0x2c
9001570e:	469b      	mov	fp, r3
90015710:	4604      	mov	r4, r0
90015712:	4692      	mov	sl, r2
90015714:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
90015718:	2600      	movs	r6, #0
9001571a:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
9001571e:	4689      	mov	r9, r1
90015720:	2fff      	cmp	r7, #255	; 0xff
90015722:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
90015726:	9608      	str	r6, [sp, #32]
90015728:	bf14      	ite	ne
9001572a:	2308      	movne	r3, #8
9001572c:	2302      	moveq	r3, #2
9001572e:	e9cd 3602 	strd	r3, r6, [sp, #8]
90015732:	f7ff fea7 	bl	90015484 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90015736:	465a      	mov	r2, fp
90015738:	4603      	mov	r3, r0
9001573a:	4651      	mov	r1, sl
9001573c:	4620      	mov	r0, r4
9001573e:	e9cd 8500 	strd	r8, r5, [sp]
90015742:	f7ff fee7 	bl	90015514 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
90015746:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
9001574a:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
9001574e:	f8ad 3018 	strh.w	r3, [sp, #24]
90015752:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
90015756:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
9001575a:	f8ad 301a 	strh.w	r3, [sp, #26]
9001575e:	6823      	ldr	r3, [r4, #0]
90015760:	9d02      	ldr	r5, [sp, #8]
90015762:	9005      	str	r0, [sp, #20]
90015764:	4620      	mov	r0, r4
90015766:	f8ad 601c 	strh.w	r6, [sp, #28]
9001576a:	f8ad 801e 	strh.w	r8, [sp, #30]
9001576e:	f8cd 9020 	str.w	r9, [sp, #32]
90015772:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
90015776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90015778:	4798      	blx	r3
9001577a:	4228      	tst	r0, r5
9001577c:	d106      	bne.n	9001578c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
9001577e:	4b07      	ldr	r3, [pc, #28]	; (9001579c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
90015780:	f240 11fb 	movw	r1, #507	; 0x1fb
90015784:	4a06      	ldr	r2, [pc, #24]	; (900157a0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
90015786:	4807      	ldr	r0, [pc, #28]	; (900157a4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
90015788:	f013 fa54 	bl	90028c34 <__assert_func>
9001578c:	6860      	ldr	r0, [r4, #4]
9001578e:	a902      	add	r1, sp, #8
90015790:	6803      	ldr	r3, [r0, #0]
90015792:	685b      	ldr	r3, [r3, #4]
90015794:	4798      	blx	r3
90015796:	b00b      	add	sp, #44	; 0x2c
90015798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001579c:	9002ef58 	.word	0x9002ef58
900157a0:	9002f1e6 	.word	0x9002f1e6
900157a4:	9002eea4 	.word	0x9002eea4

900157a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
900157a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
900157ac:	461f      	mov	r7, r3
900157ae:	4b0b      	ldr	r3, [pc, #44]	; (900157dc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
900157b0:	460d      	mov	r5, r1
900157b2:	4616      	mov	r6, r2
900157b4:	f8b3 8000 	ldrh.w	r8, [r3]
900157b8:	4604      	mov	r4, r0
900157ba:	f7ff fd19 	bl	900151f0 <_ZN8touchgfx3HAL3lcdEv>
900157be:	6803      	ldr	r3, [r0, #0]
900157c0:	6a1b      	ldr	r3, [r3, #32]
900157c2:	4798      	blx	r3
900157c4:	463b      	mov	r3, r7
900157c6:	4632      	mov	r2, r6
900157c8:	4629      	mov	r1, r5
900157ca:	e9cd 8000 	strd	r8, r0, [sp]
900157ce:	4620      	mov	r0, r4
900157d0:	f7ff fea0 	bl	90015514 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
900157d4:	b002      	add	sp, #8
900157d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900157da:	bf00      	nop
900157dc:	20026cd6 	.word	0x20026cd6

900157e0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
900157e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900157e4:	4698      	mov	r8, r3
900157e6:	b088      	sub	sp, #32
900157e8:	2300      	movs	r3, #0
900157ea:	4617      	mov	r7, r2
900157ec:	4604      	mov	r4, r0
900157ee:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
900157f2:	9306      	str	r3, [sp, #24]
900157f4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
900157f8:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
900157fc:	f8ad 6010 	strh.w	r6, [sp, #16]
90015800:	f8ad 5012 	strh.w	r5, [sp, #18]
90015804:	e9cd 3100 	strd	r3, r1, [sp]
90015808:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
9001580c:	f8ad 3014 	strh.w	r3, [sp, #20]
90015810:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
90015814:	f88d 301c 	strb.w	r3, [sp, #28]
90015818:	f7ff fe34 	bl	90015484 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
9001581c:	4642      	mov	r2, r8
9001581e:	4603      	mov	r3, r0
90015820:	4639      	mov	r1, r7
90015822:	4620      	mov	r0, r4
90015824:	f7ff ffc0 	bl	900157a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90015828:	4b16      	ldr	r3, [pc, #88]	; (90015884 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
9001582a:	9003      	str	r0, [sp, #12]
9001582c:	881b      	ldrh	r3, [r3, #0]
9001582e:	f8ad 3016 	strh.w	r3, [sp, #22]
90015832:	f7ff fcdd 	bl	900151f0 <_ZN8touchgfx3HAL3lcdEv>
90015836:	6803      	ldr	r3, [r0, #0]
90015838:	6a1b      	ldr	r3, [r3, #32]
9001583a:	4798      	blx	r3
9001583c:	f88d 001e 	strb.w	r0, [sp, #30]
90015840:	f88d 001d 	strb.w	r0, [sp, #29]
90015844:	b106      	cbz	r6, 90015848 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
90015846:	b935      	cbnz	r5, 90015856 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
90015848:	4b0f      	ldr	r3, [pc, #60]	; (90015888 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
9001584a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
9001584e:	4a0f      	ldr	r2, [pc, #60]	; (9001588c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
90015850:	480f      	ldr	r0, [pc, #60]	; (90015890 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
90015852:	f013 f9ef 	bl	90028c34 <__assert_func>
90015856:	6823      	ldr	r3, [r4, #0]
90015858:	4620      	mov	r0, r4
9001585a:	9d00      	ldr	r5, [sp, #0]
9001585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001585e:	4798      	blx	r3
90015860:	4228      	tst	r0, r5
90015862:	d104      	bne.n	9001586e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
90015864:	4b0b      	ldr	r3, [pc, #44]	; (90015894 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
90015866:	f240 11e1 	movw	r1, #481	; 0x1e1
9001586a:	4a08      	ldr	r2, [pc, #32]	; (9001588c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
9001586c:	e7f0      	b.n	90015850 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
9001586e:	9b11      	ldr	r3, [sp, #68]	; 0x44
90015870:	4669      	mov	r1, sp
90015872:	6860      	ldr	r0, [r4, #4]
90015874:	9306      	str	r3, [sp, #24]
90015876:	6803      	ldr	r3, [r0, #0]
90015878:	685b      	ldr	r3, [r3, #4]
9001587a:	4798      	blx	r3
9001587c:	b008      	add	sp, #32
9001587e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90015882:	bf00      	nop
90015884:	20026cd6 	.word	0x20026cd6
90015888:	9002ef20 	.word	0x9002ef20
9001588c:	9002efcf 	.word	0x9002efcf
90015890:	9002eea4 	.word	0x9002eea4
90015894:	9002ef58 	.word	0x9002ef58

90015898 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
90015898:	b570      	push	{r4, r5, r6, lr}
9001589a:	b08a      	sub	sp, #40	; 0x28
9001589c:	4604      	mov	r4, r0
9001589e:	466b      	mov	r3, sp
900158a0:	e883 0006 	stmia.w	r3, {r1, r2}
900158a4:	4b1f      	ldr	r3, [pc, #124]	; (90015924 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
900158a6:	781b      	ldrb	r3, [r3, #0]
900158a8:	b933      	cbnz	r3, 900158b8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
900158aa:	4b1f      	ldr	r3, [pc, #124]	; (90015928 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
900158ac:	f44f 7103 	mov.w	r1, #524	; 0x20c
900158b0:	4a1e      	ldr	r2, [pc, #120]	; (9001592c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
900158b2:	481f      	ldr	r0, [pc, #124]	; (90015930 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
900158b4:	f013 f9be 	bl	90028c34 <__assert_func>
900158b8:	2300      	movs	r3, #0
900158ba:	f8bd 5000 	ldrh.w	r5, [sp]
900158be:	f8bd 6002 	ldrh.w	r6, [sp, #2]
900158c2:	9308      	str	r3, [sp, #32]
900158c4:	2301      	movs	r3, #1
900158c6:	9302      	str	r3, [sp, #8]
900158c8:	6803      	ldr	r3, [r0, #0]
900158ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900158cc:	4798      	blx	r3
900158ce:	4632      	mov	r2, r6
900158d0:	4629      	mov	r1, r5
900158d2:	4603      	mov	r3, r0
900158d4:	4620      	mov	r0, r4
900158d6:	f7ff ff67 	bl	900157a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
900158da:	6c63      	ldr	r3, [r4, #68]	; 0x44
900158dc:	9003      	str	r0, [sp, #12]
900158de:	9305      	str	r3, [sp, #20]
900158e0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
900158e4:	f8ad 3018 	strh.w	r3, [sp, #24]
900158e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
900158ec:	f8ad 301a 	strh.w	r3, [sp, #26]
900158f0:	4b10      	ldr	r3, [pc, #64]	; (90015934 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
900158f2:	881b      	ldrh	r3, [r3, #0]
900158f4:	f8ad 301c 	strh.w	r3, [sp, #28]
900158f8:	f8ad 301e 	strh.w	r3, [sp, #30]
900158fc:	f7ff fc78 	bl	900151f0 <_ZN8touchgfx3HAL3lcdEv>
90015900:	6803      	ldr	r3, [r0, #0]
90015902:	6a1b      	ldr	r3, [r3, #32]
90015904:	4798      	blx	r3
90015906:	23ff      	movs	r3, #255	; 0xff
90015908:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
9001590c:	a902      	add	r1, sp, #8
9001590e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
90015912:	6860      	ldr	r0, [r4, #4]
90015914:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
90015918:	6803      	ldr	r3, [r0, #0]
9001591a:	685b      	ldr	r3, [r3, #4]
9001591c:	4798      	blx	r3
9001591e:	6c60      	ldr	r0, [r4, #68]	; 0x44
90015920:	b00a      	add	sp, #40	; 0x28
90015922:	bd70      	pop	{r4, r5, r6, pc}
90015924:	20026cdb 	.word	0x20026cdb
90015928:	9002edf1 	.word	0x9002edf1
9001592c:	9002f073 	.word	0x9002f073
90015930:	9002eea4 	.word	0x9002eea4
90015934:	20026cd6 	.word	0x20026cd6

90015938 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
90015938:	b5f0      	push	{r4, r5, r6, r7, lr}
9001593a:	b08b      	sub	sp, #44	; 0x2c
9001593c:	4604      	mov	r4, r0
9001593e:	466d      	mov	r5, sp
90015940:	e885 0006 	stmia.w	r5, {r1, r2}
90015944:	461d      	mov	r5, r3
90015946:	2300      	movs	r3, #0
90015948:	f8bd 6000 	ldrh.w	r6, [sp]
9001594c:	9308      	str	r3, [sp, #32]
9001594e:	2301      	movs	r3, #1
90015950:	f8bd 7002 	ldrh.w	r7, [sp, #2]
90015954:	9302      	str	r3, [sp, #8]
90015956:	6803      	ldr	r3, [r0, #0]
90015958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001595a:	4798      	blx	r3
9001595c:	463a      	mov	r2, r7
9001595e:	4631      	mov	r1, r6
90015960:	4603      	mov	r3, r0
90015962:	4620      	mov	r0, r4
90015964:	f7ff ff20 	bl	900157a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90015968:	f8bd 3004 	ldrh.w	r3, [sp, #4]
9001596c:	9003      	str	r0, [sp, #12]
9001596e:	f8ad 3018 	strh.w	r3, [sp, #24]
90015972:	f8bd 3006 	ldrh.w	r3, [sp, #6]
90015976:	9505      	str	r5, [sp, #20]
90015978:	f8ad 301a 	strh.w	r3, [sp, #26]
9001597c:	4b0d      	ldr	r3, [pc, #52]	; (900159b4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
9001597e:	881b      	ldrh	r3, [r3, #0]
90015980:	f8ad 301c 	strh.w	r3, [sp, #28]
90015984:	9b10      	ldr	r3, [sp, #64]	; 0x40
90015986:	f8ad 301e 	strh.w	r3, [sp, #30]
9001598a:	f7ff fc31 	bl	900151f0 <_ZN8touchgfx3HAL3lcdEv>
9001598e:	6803      	ldr	r3, [r0, #0]
90015990:	6a1b      	ldr	r3, [r3, #32]
90015992:	4798      	blx	r3
90015994:	23ff      	movs	r3, #255	; 0xff
90015996:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
9001599a:	a902      	add	r1, sp, #8
9001599c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
900159a0:	6860      	ldr	r0, [r4, #4]
900159a2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
900159a6:	6803      	ldr	r3, [r0, #0]
900159a8:	685b      	ldr	r3, [r3, #4]
900159aa:	4798      	blx	r3
900159ac:	4628      	mov	r0, r5
900159ae:	b00b      	add	sp, #44	; 0x2c
900159b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
900159b2:	bf00      	nop
900159b4:	20026cd6 	.word	0x20026cd6

900159b8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
900159b8:	b570      	push	{r4, r5, r6, lr}
900159ba:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
900159be:	4604      	mov	r4, r0
900159c0:	b19b      	cbz	r3, 900159ea <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
900159c2:	2002      	movs	r0, #2
900159c4:	f7eb fb81 	bl	900010ca <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
900159c8:	2300      	movs	r3, #0
900159ca:	4620      	mov	r0, r4
900159cc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
900159d0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
900159d4:	6823      	ldr	r3, [r4, #0]
900159d6:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
900159da:	f7ff fd53 	bl	90015484 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
900159de:	4601      	mov	r1, r0
900159e0:	4620      	mov	r0, r4
900159e2:	462b      	mov	r3, r5
900159e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900159e8:	4718      	bx	r3
900159ea:	bd70      	pop	{r4, r5, r6, pc}

900159ec <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>:
900159ec:	b538      	push	{r3, r4, r5, lr}
900159ee:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
900159f2:	4604      	mov	r4, r0
900159f4:	460d      	mov	r5, r1
900159f6:	428a      	cmp	r2, r1
900159f8:	d008      	beq.n	90015a0c <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x20>
900159fa:	2a01      	cmp	r2, #1
900159fc:	6803      	ldr	r3, [r0, #0]
900159fe:	d106      	bne.n	90015a0e <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
90015a00:	b929      	cbnz	r1, 90015a0e <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
90015a02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
90015a06:	4798      	blx	r3
90015a08:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
90015a0c:	bd38      	pop	{r3, r4, r5, pc}
90015a0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90015a12:	4620      	mov	r0, r4
90015a14:	e7f7      	b.n	90015a06 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x1a>
	...

90015a18 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
90015a18:	4b0d      	ldr	r3, [pc, #52]	; (90015a50 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
90015a1a:	b510      	push	{r4, lr}
90015a1c:	781b      	ldrb	r3, [r3, #0]
90015a1e:	4604      	mov	r4, r0
90015a20:	b95b      	cbnz	r3, 90015a3a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
90015a22:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
90015a26:	2b02      	cmp	r3, #2
90015a28:	d007      	beq.n	90015a3a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
90015a2a:	6840      	ldr	r0, [r0, #4]
90015a2c:	f000 f934 	bl	90015c98 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
90015a30:	b118      	cbz	r0, 90015a3a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
90015a32:	6862      	ldr	r2, [r4, #4]
90015a34:	7a53      	ldrb	r3, [r2, #9]
90015a36:	2b00      	cmp	r3, #0
90015a38:	d0fc      	beq.n	90015a34 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
90015a3a:	f7eb fc6f 	bl	9000131c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
90015a3e:	4620      	mov	r0, r4
90015a40:	2100      	movs	r1, #0
90015a42:	f7ff ffd3 	bl	900159ec <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
90015a46:	4620      	mov	r0, r4
90015a48:	f7ff fd1c 	bl	90015484 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90015a4c:	bd10      	pop	{r4, pc}
90015a4e:	bf00      	nop
90015a50:	20026cda 	.word	0x20026cda

90015a54 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
90015a54:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
90015a58:	1a13      	subs	r3, r2, r0
90015a5a:	4258      	negs	r0, r3
90015a5c:	4158      	adcs	r0, r3
90015a5e:	4770      	bx	lr

90015a60 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
90015a60:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
90015a64:	1a9b      	subs	r3, r3, r2
90015a66:	2b00      	cmp	r3, #0
90015a68:	bfdc      	itt	le
90015a6a:	6882      	ldrle	r2, [r0, #8]
90015a6c:	189b      	addle	r3, r3, r2
90015a6e:	2b01      	cmp	r3, #1
90015a70:	bfcc      	ite	gt
90015a72:	2000      	movgt	r0, #0
90015a74:	2001      	movle	r0, #1
90015a76:	4770      	bx	lr

90015a78 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
90015a78:	6902      	ldr	r2, [r0, #16]
90015a7a:	6840      	ldr	r0, [r0, #4]
90015a7c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
90015a80:	4770      	bx	lr

90015a82 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
90015a82:	6803      	ldr	r3, [r0, #0]
90015a84:	691b      	ldr	r3, [r3, #16]
90015a86:	4718      	bx	r3

90015a88 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
90015a88:	4770      	bx	lr

90015a8a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
90015a8a:	4770      	bx	lr

90015a8c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
90015a8c:	4770      	bx	lr
	...

90015a90 <_ZN8touchgfx13DMA_Interface7executeEv>:
90015a90:	2301      	movs	r3, #1
90015a92:	b570      	push	{r4, r5, r6, lr}
90015a94:	7203      	strb	r3, [r0, #8]
90015a96:	4604      	mov	r4, r0
90015a98:	6840      	ldr	r0, [r0, #4]
90015a9a:	6803      	ldr	r3, [r0, #0]
90015a9c:	699b      	ldr	r3, [r3, #24]
90015a9e:	4798      	blx	r3
90015aa0:	6803      	ldr	r3, [r0, #0]
90015aa2:	4605      	mov	r5, r0
90015aa4:	2b08      	cmp	r3, #8
90015aa6:	d01e      	beq.n	90015ae6 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
90015aa8:	d80b      	bhi.n	90015ac2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90015aaa:	2b02      	cmp	r3, #2
90015aac:	d027      	beq.n	90015afe <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
90015aae:	2b04      	cmp	r3, #4
90015ab0:	d011      	beq.n	90015ad6 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
90015ab2:	2b01      	cmp	r3, #1
90015ab4:	d028      	beq.n	90015b08 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
90015ab6:	4b17      	ldr	r3, [pc, #92]	; (90015b14 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
90015ab8:	218c      	movs	r1, #140	; 0x8c
90015aba:	4a17      	ldr	r2, [pc, #92]	; (90015b18 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
90015abc:	4817      	ldr	r0, [pc, #92]	; (90015b1c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
90015abe:	f013 f8b9 	bl	90028c34 <__assert_func>
90015ac2:	2b40      	cmp	r3, #64	; 0x40
90015ac4:	d020      	beq.n	90015b08 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
90015ac6:	d801      	bhi.n	90015acc <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
90015ac8:	2b20      	cmp	r3, #32
90015aca:	e7f3      	b.n	90015ab4 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
90015acc:	2b80      	cmp	r3, #128	; 0x80
90015ace:	d01b      	beq.n	90015b08 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
90015ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90015ad4:	e7ee      	b.n	90015ab4 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
90015ad6:	6823      	ldr	r3, [r4, #0]
90015ad8:	7f01      	ldrb	r1, [r0, #28]
90015ada:	4620      	mov	r0, r4
90015adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90015ade:	4798      	blx	r3
90015ae0:	6823      	ldr	r3, [r4, #0]
90015ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90015ae4:	e006      	b.n	90015af4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
90015ae6:	6823      	ldr	r3, [r4, #0]
90015ae8:	7f01      	ldrb	r1, [r0, #28]
90015aea:	4620      	mov	r0, r4
90015aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90015aee:	4798      	blx	r3
90015af0:	6823      	ldr	r3, [r4, #0]
90015af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90015af4:	4629      	mov	r1, r5
90015af6:	4620      	mov	r0, r4
90015af8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90015afc:	4718      	bx	r3
90015afe:	6823      	ldr	r3, [r4, #0]
90015b00:	4620      	mov	r0, r4
90015b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90015b04:	4798      	blx	r3
90015b06:	e7f3      	b.n	90015af0 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
90015b08:	6823      	ldr	r3, [r4, #0]
90015b0a:	4620      	mov	r0, r4
90015b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90015b0e:	4798      	blx	r3
90015b10:	e7e6      	b.n	90015ae0 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
90015b12:	bf00      	nop
90015b14:	9002f2c4 	.word	0x9002f2c4
90015b18:	9002f384 	.word	0x9002f384
90015b1c:	9002f2e9 	.word	0x9002f2e9

90015b20 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
90015b20:	b570      	push	{r4, r5, r6, lr}
90015b22:	4604      	mov	r4, r0
90015b24:	460e      	mov	r6, r1
90015b26:	6860      	ldr	r0, [r4, #4]
90015b28:	6803      	ldr	r3, [r0, #0]
90015b2a:	685b      	ldr	r3, [r3, #4]
90015b2c:	4798      	blx	r3
90015b2e:	2800      	cmp	r0, #0
90015b30:	d1f9      	bne.n	90015b26 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
90015b32:	4d0d      	ldr	r5, [pc, #52]	; (90015b68 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
90015b34:	6828      	ldr	r0, [r5, #0]
90015b36:	6803      	ldr	r3, [r0, #0]
90015b38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90015b3a:	4798      	blx	r3
90015b3c:	f7eb fbfc 	bl	90001338 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
90015b40:	6828      	ldr	r0, [r5, #0]
90015b42:	2101      	movs	r1, #1
90015b44:	f7ff ff52 	bl	900159ec <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
90015b48:	6860      	ldr	r0, [r4, #4]
90015b4a:	4631      	mov	r1, r6
90015b4c:	6803      	ldr	r3, [r0, #0]
90015b4e:	689b      	ldr	r3, [r3, #8]
90015b50:	4798      	blx	r3
90015b52:	6823      	ldr	r3, [r4, #0]
90015b54:	4620      	mov	r0, r4
90015b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90015b58:	4798      	blx	r3
90015b5a:	6828      	ldr	r0, [r5, #0]
90015b5c:	6803      	ldr	r3, [r0, #0]
90015b5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90015b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90015b64:	4718      	bx	r3
90015b66:	bf00      	nop
90015b68:	20026cdc 	.word	0x20026cdc

90015b6c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
90015b6c:	b508      	push	{r3, lr}
90015b6e:	f7eb fbd5 	bl	9000131c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
90015b72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
90015b76:	f7eb bbd9 	b.w	9000132c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

90015b7a <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
90015b7a:	b510      	push	{r4, lr}
90015b7c:	4604      	mov	r4, r0
90015b7e:	2114      	movs	r1, #20
90015b80:	f012 fa7c 	bl	9002807c <_ZdlPvj>
90015b84:	4620      	mov	r0, r4
90015b86:	bd10      	pop	{r4, pc}

90015b88 <_ZN8touchgfx13DMA_Interface5startEv>:
90015b88:	b510      	push	{r4, lr}
90015b8a:	4604      	mov	r4, r0
90015b8c:	6840      	ldr	r0, [r0, #4]
90015b8e:	6803      	ldr	r3, [r0, #0]
90015b90:	681b      	ldr	r3, [r3, #0]
90015b92:	4798      	blx	r3
90015b94:	b948      	cbnz	r0, 90015baa <_ZN8touchgfx13DMA_Interface5startEv+0x22>
90015b96:	7a63      	ldrb	r3, [r4, #9]
90015b98:	b13b      	cbz	r3, 90015baa <_ZN8touchgfx13DMA_Interface5startEv+0x22>
90015b9a:	7a23      	ldrb	r3, [r4, #8]
90015b9c:	b92b      	cbnz	r3, 90015baa <_ZN8touchgfx13DMA_Interface5startEv+0x22>
90015b9e:	6823      	ldr	r3, [r4, #0]
90015ba0:	4620      	mov	r0, r4
90015ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90015ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90015ba8:	4718      	bx	r3
90015baa:	bd10      	pop	{r4, pc}

90015bac <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
90015bac:	b510      	push	{r4, lr}
90015bae:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
90015bb2:	1b12      	subs	r2, r2, r4
90015bb4:	2a00      	cmp	r2, #0
90015bb6:	bfdc      	itt	le
90015bb8:	6883      	ldrle	r3, [r0, #8]
90015bba:	18d2      	addle	r2, r2, r3
90015bbc:	2a01      	cmp	r2, #1
90015bbe:	dd18      	ble.n	90015bf2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
90015bc0:	6843      	ldr	r3, [r0, #4]
90015bc2:	f101 021c 	add.w	r2, r1, #28
90015bc6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
90015bca:	f851 4b04 	ldr.w	r4, [r1], #4
90015bce:	4291      	cmp	r1, r2
90015bd0:	f843 4b04 	str.w	r4, [r3], #4
90015bd4:	d1f9      	bne.n	90015bca <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
90015bd6:	880a      	ldrh	r2, [r1, #0]
90015bd8:	801a      	strh	r2, [r3, #0]
90015bda:	788a      	ldrb	r2, [r1, #2]
90015bdc:	709a      	strb	r2, [r3, #2]
90015bde:	68c3      	ldr	r3, [r0, #12]
90015be0:	6882      	ldr	r2, [r0, #8]
90015be2:	f3bf 8f5b 	dmb	ish
90015be6:	3301      	adds	r3, #1
90015be8:	429a      	cmp	r2, r3
90015bea:	bfd8      	it	le
90015bec:	1a9b      	suble	r3, r3, r2
90015bee:	60c3      	str	r3, [r0, #12]
90015bf0:	bd10      	pop	{r4, pc}
90015bf2:	4b03      	ldr	r3, [pc, #12]	; (90015c00 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
90015bf4:	2139      	movs	r1, #57	; 0x39
90015bf6:	4a03      	ldr	r2, [pc, #12]	; (90015c04 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
90015bf8:	4803      	ldr	r0, [pc, #12]	; (90015c08 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
90015bfa:	f013 f81b 	bl	90028c34 <__assert_func>
90015bfe:	bf00      	nop
90015c00:	9002f30f 	.word	0x9002f30f
90015c04:	9002f3b4 	.word	0x9002f3b4
90015c08:	9002f2e9 	.word	0x9002f2e9

90015c0c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
90015c0c:	b510      	push	{r4, lr}
90015c0e:	6803      	ldr	r3, [r0, #0]
90015c10:	4604      	mov	r4, r0
90015c12:	681b      	ldr	r3, [r3, #0]
90015c14:	4798      	blx	r3
90015c16:	b128      	cbz	r0, 90015c24 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
90015c18:	4b07      	ldr	r3, [pc, #28]	; (90015c38 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
90015c1a:	213f      	movs	r1, #63	; 0x3f
90015c1c:	4a07      	ldr	r2, [pc, #28]	; (90015c3c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
90015c1e:	4808      	ldr	r0, [pc, #32]	; (90015c40 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
90015c20:	f013 f808 	bl	90028c34 <__assert_func>
90015c24:	6923      	ldr	r3, [r4, #16]
90015c26:	68a2      	ldr	r2, [r4, #8]
90015c28:	f3bf 8f5b 	dmb	ish
90015c2c:	3301      	adds	r3, #1
90015c2e:	429a      	cmp	r2, r3
90015c30:	bfd8      	it	le
90015c32:	1a9b      	suble	r3, r3, r2
90015c34:	6123      	str	r3, [r4, #16]
90015c36:	bd10      	pop	{r4, pc}
90015c38:	9002f332 	.word	0x9002f332
90015c3c:	9002f402 	.word	0x9002f402
90015c40:	9002f2e9 	.word	0x9002f2e9

90015c44 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
90015c44:	b570      	push	{r4, r5, r6, lr}
90015c46:	4604      	mov	r4, r0
90015c48:	6840      	ldr	r0, [r0, #4]
90015c4a:	6803      	ldr	r3, [r0, #0]
90015c4c:	681b      	ldr	r3, [r3, #0]
90015c4e:	4798      	blx	r3
90015c50:	4605      	mov	r5, r0
90015c52:	b930      	cbnz	r0, 90015c62 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
90015c54:	7a23      	ldrb	r3, [r4, #8]
90015c56:	b123      	cbz	r3, 90015c62 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
90015c58:	6860      	ldr	r0, [r4, #4]
90015c5a:	6803      	ldr	r3, [r0, #0]
90015c5c:	695b      	ldr	r3, [r3, #20]
90015c5e:	4798      	blx	r3
90015c60:	7225      	strb	r5, [r4, #8]
90015c62:	6860      	ldr	r0, [r4, #4]
90015c64:	6803      	ldr	r3, [r0, #0]
90015c66:	681b      	ldr	r3, [r3, #0]
90015c68:	4798      	blx	r3
90015c6a:	b928      	cbnz	r0, 90015c78 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
90015c6c:	6823      	ldr	r3, [r4, #0]
90015c6e:	4620      	mov	r0, r4
90015c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90015c72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90015c76:	4718      	bx	r3
90015c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90015c7c:	f7eb bb64 	b.w	90001348 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

90015c80 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
90015c80:	b510      	push	{r4, lr}
90015c82:	6082      	str	r2, [r0, #8]
90015c84:	2200      	movs	r2, #0
90015c86:	4c03      	ldr	r4, [pc, #12]	; (90015c94 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
90015c88:	e9c0 2203 	strd	r2, r2, [r0, #12]
90015c8c:	e9c0 4100 	strd	r4, r1, [r0]
90015c90:	bd10      	pop	{r4, pc}
90015c92:	bf00      	nop
90015c94:	9002f368 	.word	0x9002f368

90015c98 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
90015c98:	6840      	ldr	r0, [r0, #4]
90015c9a:	6803      	ldr	r3, [r0, #0]
90015c9c:	681b      	ldr	r3, [r3, #0]
90015c9e:	4718      	bx	r3

90015ca0 <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>:
90015ca0:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
90015ca4:	4770      	bx	lr

90015ca6 <_ZNK8touchgfx13TextureMapper21getRenderingAlgorithmEv>:
90015ca6:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
90015caa:	4770      	bx	lr

90015cac <_ZN8touchgfx13TextureMapper12updateXAngleEf>:
90015cac:	6802      	ldr	r2, [r0, #0]
90015cae:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
90015cb2:	6e92      	ldr	r2, [r2, #104]	; 0x68
90015cb4:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
90015cb8:	4710      	bx	r2

90015cba <_ZN8touchgfx13TextureMapper12updateYAngleEf>:
90015cba:	6802      	ldr	r2, [r0, #0]
90015cbc:	eef0 0a40 	vmov.f32	s1, s0
90015cc0:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
90015cc4:	6e92      	ldr	r2, [r2, #104]	; 0x68
90015cc6:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
90015cca:	4710      	bx	r2

90015ccc <_ZN8touchgfx13TextureMapper12updateZAngleEf>:
90015ccc:	6802      	ldr	r2, [r0, #0]
90015cce:	eeb0 1a40 	vmov.f32	s2, s0
90015cd2:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
90015cd6:	6e92      	ldr	r2, [r2, #104]	; 0x68
90015cd8:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
90015cdc:	4710      	bx	r2

90015cde <_ZNK8touchgfx13TextureMapper9getXAngleEv>:
90015cde:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
90015ce2:	4770      	bx	lr

90015ce4 <_ZNK8touchgfx13TextureMapper9getYAngleEv>:
90015ce4:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
90015ce8:	4770      	bx	lr

90015cea <_ZNK8touchgfx13TextureMapper9getZAngleEv>:
90015cea:	ed90 0a0f 	vldr	s0, [r0, #60]	; 0x3c
90015cee:	4770      	bx	lr

90015cf0 <_ZNK8touchgfx13TextureMapper8getScaleEv>:
90015cf0:	ed90 0a10 	vldr	s0, [r0, #64]	; 0x40
90015cf4:	4770      	bx	lr

90015cf6 <_ZNK8touchgfx13TextureMapper9getOrigoXEv>:
90015cf6:	ed90 0a11 	vldr	s0, [r0, #68]	; 0x44
90015cfa:	4770      	bx	lr

90015cfc <_ZNK8touchgfx13TextureMapper9getOrigoYEv>:
90015cfc:	ed90 0a12 	vldr	s0, [r0, #72]	; 0x48
90015d00:	4770      	bx	lr

90015d02 <_ZNK8touchgfx13TextureMapper9getOrigoZEv>:
90015d02:	ed90 0a13 	vldr	s0, [r0, #76]	; 0x4c
90015d06:	4770      	bx	lr

90015d08 <_ZNK8touchgfx13TextureMapper10getCameraXEv>:
90015d08:	ed90 0a14 	vldr	s0, [r0, #80]	; 0x50
90015d0c:	4770      	bx	lr

90015d0e <_ZNK8touchgfx13TextureMapper10getCameraYEv>:
90015d0e:	ed90 0a15 	vldr	s0, [r0, #84]	; 0x54
90015d12:	4770      	bx	lr

90015d14 <_ZNK8touchgfx13TextureMapper17getCameraDistanceEv>:
90015d14:	ed90 0a16 	vldr	s0, [r0, #88]	; 0x58
90015d18:	4770      	bx	lr

90015d1a <_ZN8touchgfx13TextureMapper17setBitmapPositionEii>:
90015d1a:	ee07 2a90 	vmov	s15, r2
90015d1e:	6803      	ldr	r3, [r0, #0]
90015d20:	eef8 0ae7 	vcvt.f32.s32	s1, s15
90015d24:	ee07 1a90 	vmov	s15, r1
90015d28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
90015d2c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
90015d30:	4718      	bx	r3

90015d32 <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>:
90015d32:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
90015d36:	4770      	bx	lr

90015d38 <_ZNK8touchgfx13TextureMapper18getBitmapPositionYEv>:
90015d38:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
90015d3c:	4770      	bx	lr

90015d3e <_ZNK8touchgfx13TextureMapper5getX0Ev>:
90015d3e:	ed90 0a17 	vldr	s0, [r0, #92]	; 0x5c
90015d42:	4770      	bx	lr

90015d44 <_ZNK8touchgfx13TextureMapper5getX1Ev>:
90015d44:	ed90 0a1a 	vldr	s0, [r0, #104]	; 0x68
90015d48:	4770      	bx	lr

90015d4a <_ZNK8touchgfx13TextureMapper5getX2Ev>:
90015d4a:	ed90 0a1d 	vldr	s0, [r0, #116]	; 0x74
90015d4e:	4770      	bx	lr

90015d50 <_ZNK8touchgfx13TextureMapper5getX3Ev>:
90015d50:	ed90 0a20 	vldr	s0, [r0, #128]	; 0x80
90015d54:	4770      	bx	lr

90015d56 <_ZNK8touchgfx13TextureMapper5getY0Ev>:
90015d56:	ed90 0a18 	vldr	s0, [r0, #96]	; 0x60
90015d5a:	4770      	bx	lr

90015d5c <_ZNK8touchgfx13TextureMapper5getY1Ev>:
90015d5c:	ed90 0a1b 	vldr	s0, [r0, #108]	; 0x6c
90015d60:	4770      	bx	lr

90015d62 <_ZNK8touchgfx13TextureMapper5getY2Ev>:
90015d62:	ed90 0a1e 	vldr	s0, [r0, #120]	; 0x78
90015d66:	4770      	bx	lr

90015d68 <_ZNK8touchgfx13TextureMapper5getY3Ev>:
90015d68:	ed90 0a21 	vldr	s0, [r0, #132]	; 0x84
90015d6c:	4770      	bx	lr

90015d6e <_ZNK8touchgfx13TextureMapper5getZ0Ev>:
90015d6e:	ed90 0a19 	vldr	s0, [r0, #100]	; 0x64
90015d72:	4770      	bx	lr

90015d74 <_ZNK8touchgfx13TextureMapper5getZ1Ev>:
90015d74:	ed90 0a1c 	vldr	s0, [r0, #112]	; 0x70
90015d78:	4770      	bx	lr

90015d7a <_ZNK8touchgfx13TextureMapper5getZ2Ev>:
90015d7a:	ed90 0a1f 	vldr	s0, [r0, #124]	; 0x7c
90015d7e:	4770      	bx	lr

90015d80 <_ZNK8touchgfx13TextureMapper5getZ3Ev>:
90015d80:	ed90 0a22 	vldr	s0, [r0, #136]	; 0x88
90015d84:	4770      	bx	lr

90015d86 <_ZNK8touchgfx13TextureMapper12getSolidRectEv>:
90015d86:	2200      	movs	r2, #0
90015d88:	8002      	strh	r2, [r0, #0]
90015d8a:	8042      	strh	r2, [r0, #2]
90015d8c:	8082      	strh	r2, [r0, #4]
90015d8e:	80c2      	strh	r2, [r0, #6]
90015d90:	4770      	bx	lr

90015d92 <_ZN8touchgfx13TextureMapperD1Ev>:
90015d92:	4770      	bx	lr

90015d94 <_ZN8touchgfx13TextureMapperD0Ev>:
90015d94:	b510      	push	{r4, lr}
90015d96:	4604      	mov	r4, r0
90015d98:	2190      	movs	r1, #144	; 0x90
90015d9a:	f012 f96f 	bl	9002807c <_ZdlPvj>
90015d9e:	4620      	mov	r0, r4
90015da0:	bd10      	pop	{r4, pc}
	...

90015da4 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>:
90015da4:	b538      	push	{r3, r4, r5, lr}
90015da6:	2301      	movs	r3, #1
90015da8:	2500      	movs	r5, #0
90015daa:	4604      	mov	r4, r0
90015dac:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
90015db0:	4b1e      	ldr	r3, [pc, #120]	; (90015e2c <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x88>)
90015db2:	8085      	strh	r5, [r0, #4]
90015db4:	6003      	str	r3, [r0, #0]
90015db6:	f64f 73ff 	movw	r3, #65535	; 0xffff
90015dba:	80c5      	strh	r5, [r0, #6]
90015dbc:	8105      	strh	r5, [r0, #8]
90015dbe:	8145      	strh	r5, [r0, #10]
90015dc0:	8185      	strh	r5, [r0, #12]
90015dc2:	81c5      	strh	r5, [r0, #14]
90015dc4:	8205      	strh	r5, [r0, #16]
90015dc6:	8245      	strh	r5, [r0, #18]
90015dc8:	61c5      	str	r5, [r0, #28]
90015dca:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
90015dce:	84c3      	strh	r3, [r0, #38]	; 0x26
90015dd0:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
90015dd4:	e9c0 5505 	strd	r5, r5, [r0, #20]
90015dd8:	f001 fb4a 	bl	90017470 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90015ddc:	4b14      	ldr	r3, [pc, #80]	; (90015e30 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x8c>)
90015dde:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
90015de2:	4914      	ldr	r1, [pc, #80]	; (90015e34 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x90>)
90015de4:	6023      	str	r3, [r4, #0]
90015de6:	2300      	movs	r3, #0
90015de8:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
90015dec:	4620      	mov	r0, r4
90015dee:	62e3      	str	r3, [r4, #44]	; 0x2c
90015df0:	6323      	str	r3, [r4, #48]	; 0x30
90015df2:	6363      	str	r3, [r4, #52]	; 0x34
90015df4:	63a3      	str	r3, [r4, #56]	; 0x38
90015df6:	63e3      	str	r3, [r4, #60]	; 0x3c
90015df8:	6463      	str	r3, [r4, #68]	; 0x44
90015dfa:	64a3      	str	r3, [r4, #72]	; 0x48
90015dfc:	6523      	str	r3, [r4, #80]	; 0x50
90015dfe:	6563      	str	r3, [r4, #84]	; 0x54
90015e00:	65e3      	str	r3, [r4, #92]	; 0x5c
90015e02:	6623      	str	r3, [r4, #96]	; 0x60
90015e04:	66a3      	str	r3, [r4, #104]	; 0x68
90015e06:	66e3      	str	r3, [r4, #108]	; 0x6c
90015e08:	6763      	str	r3, [r4, #116]	; 0x74
90015e0a:	67a3      	str	r3, [r4, #120]	; 0x78
90015e0c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
90015e10:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
90015e14:	230c      	movs	r3, #12
90015e16:	6422      	str	r2, [r4, #64]	; 0x40
90015e18:	64e1      	str	r1, [r4, #76]	; 0x4c
90015e1a:	65a1      	str	r1, [r4, #88]	; 0x58
90015e1c:	6662      	str	r2, [r4, #100]	; 0x64
90015e1e:	6722      	str	r2, [r4, #112]	; 0x70
90015e20:	67e2      	str	r2, [r4, #124]	; 0x7c
90015e22:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
90015e26:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
90015e2a:	bd38      	pop	{r3, r4, r5, pc}
90015e2c:	9002f804 	.word	0x9002f804
90015e30:	9002f43c 	.word	0x9002f43c
90015e34:	447a0000 	.word	0x447a0000

90015e38 <_ZN8touchgfx13TextureMapper19applyTransformationEv>:
90015e38:	b570      	push	{r4, r5, r6, lr}
90015e3a:	ed2d 8b04 	vpush	{d8-d9}
90015e3e:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
90015e42:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
90015e44:	4604      	mov	r4, r0
90015e46:	add0      	add	r5, sp, #832	; 0x340
90015e48:	f825 3d40 	strh.w	r3, [r5, #-64]!
90015e4c:	4628      	mov	r0, r5
90015e4e:	f006 faf1 	bl	9001c434 <_ZNK8touchgfx6Bitmap8getWidthEv>
90015e52:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
90015e54:	4606      	mov	r6, r0
90015e56:	4628      	mov	r0, r5
90015e58:	f8ad 3300 	strh.w	r3, [sp, #768]	; 0x300
90015e5c:	f006 fb24 	bl	9001c4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
90015e60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90015e64:	1c72      	adds	r2, r6, #1
90015e66:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
90015e6a:	3001      	adds	r0, #1
90015e6c:	ee07 2a90 	vmov	s15, r2
90015e70:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
90015e74:	ee76 5ac7 	vsub.f32	s11, s13, s14
90015e78:	ee06 0a90 	vmov	s13, r0
90015e7c:	ee36 6a47 	vsub.f32	s12, s12, s14
90015e80:	6da3      	ldr	r3, [r4, #88]	; 0x58
90015e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90015e86:	ed94 9a11 	vldr	s18, [r4, #68]	; 0x44
90015e8a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
90015e8e:	9312      	str	r3, [sp, #72]	; 0x48
90015e90:	9316      	str	r3, [sp, #88]	; 0x58
90015e92:	a830      	add	r0, sp, #192	; 0xc0
90015e94:	ee77 7a86 	vadd.f32	s15, s15, s12
90015e98:	931a      	str	r3, [sp, #104]	; 0x68
90015e9a:	ee76 6aa5 	vadd.f32	s13, s13, s11
90015e9e:	931e      	str	r3, [sp, #120]	; 0x78
90015ea0:	2300      	movs	r3, #0
90015ea2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90015ea6:	edcd 5a11 	vstr	s11, [sp, #68]	; 0x44
90015eaa:	ae70      	add	r6, sp, #448	; 0x1c0
90015eac:	9320      	str	r3, [sp, #128]	; 0x80
90015eae:	9321      	str	r3, [sp, #132]	; 0x84
90015eb0:	9322      	str	r3, [sp, #136]	; 0x88
90015eb2:	9324      	str	r3, [sp, #144]	; 0x90
90015eb4:	9325      	str	r3, [sp, #148]	; 0x94
90015eb6:	9326      	str	r3, [sp, #152]	; 0x98
90015eb8:	9328      	str	r3, [sp, #160]	; 0xa0
90015eba:	9329      	str	r3, [sp, #164]	; 0xa4
90015ebc:	932a      	str	r3, [sp, #168]	; 0xa8
90015ebe:	932c      	str	r3, [sp, #176]	; 0xb0
90015ec0:	932d      	str	r3, [sp, #180]	; 0xb4
90015ec2:	932e      	str	r3, [sp, #184]	; 0xb8
90015ec4:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
90015ec8:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
90015ecc:	edcd 5a15 	vstr	s11, [sp, #84]	; 0x54
90015ed0:	ed8d 7a17 	vstr	s14, [sp, #92]	; 0x5c
90015ed4:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
90015ed8:	edcd 6a19 	vstr	s13, [sp, #100]	; 0x64
90015edc:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
90015ee0:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
90015ee4:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
90015ee8:	ed8d 7a1f 	vstr	s14, [sp, #124]	; 0x7c
90015eec:	edd4 8a12 	vldr	s17, [r4, #72]	; 0x48
90015ef0:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
90015ef4:	f005 fb12 	bl	9001b51c <_ZN8touchgfx9Matrix4x4C1Ev>
90015ef8:	eeb1 0a49 	vneg.f32	s0, s18
90015efc:	a830      	add	r0, sp, #192	; 0xc0
90015efe:	f005 fbdd 	bl	9001b6bc <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
90015f02:	eeb1 0a68 	vneg.f32	s0, s17
90015f06:	f005 fbe7 	bl	9001b6d8 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
90015f0a:	eeb1 0a48 	vneg.f32	s0, s16
90015f0e:	f005 fbf2 	bl	9001b6f6 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
90015f12:	a840      	add	r0, sp, #256	; 0x100
90015f14:	f005 fb02 	bl	9001b51c <_ZN8touchgfx9Matrix4x4C1Ev>
90015f18:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
90015f1c:	a840      	add	r0, sp, #256	; 0x100
90015f1e:	f005 fb51 	bl	9001b5c4 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>
90015f22:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
90015f26:	f005 fb77 	bl	9001b618 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>
90015f2a:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
90015f2e:	f005 fb9c 	bl	9001b66a <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>
90015f32:	a850      	add	r0, sp, #320	; 0x140
90015f34:	f005 faf2 	bl	9001b51c <_ZN8touchgfx9Matrix4x4C1Ev>
90015f38:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
90015f3c:	a850      	add	r0, sp, #320	; 0x140
90015f3e:	f005 fbe9 	bl	9001b714 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>
90015f42:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
90015f46:	f005 fbf1 	bl	9001b72c <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>
90015f4a:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
90015f4e:	f005 fbfa 	bl	9001b746 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>
90015f52:	a860      	add	r0, sp, #384	; 0x180
90015f54:	f005 fae2 	bl	9001b51c <_ZN8touchgfx9Matrix4x4C1Ev>
90015f58:	eeb0 0a49 	vmov.f32	s0, s18
90015f5c:	a860      	add	r0, sp, #384	; 0x180
90015f5e:	f005 fbad 	bl	9001b6bc <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
90015f62:	eeb0 0a68 	vmov.f32	s0, s17
90015f66:	f005 fbb7 	bl	9001b6d8 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
90015f6a:	eeb0 0a48 	vmov.f32	s0, s16
90015f6e:	f005 fbc2 	bl	9001b6f6 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
90015f72:	aa50      	add	r2, sp, #320	; 0x140
90015f74:	a960      	add	r1, sp, #384	; 0x180
90015f76:	a8b0      	add	r0, sp, #704	; 0x2c0
90015f78:	f005 fae8 	bl	9001b54c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
90015f7c:	4628      	mov	r0, r5
90015f7e:	aa40      	add	r2, sp, #256	; 0x100
90015f80:	a9b0      	add	r1, sp, #704	; 0x2c0
90015f82:	f005 fae3 	bl	9001b54c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
90015f86:	4629      	mov	r1, r5
90015f88:	aa30      	add	r2, sp, #192	; 0xc0
90015f8a:	a870      	add	r0, sp, #448	; 0x1c0
90015f8c:	f005 fade 	bl	9001b54c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
90015f90:	a880      	add	r0, sp, #512	; 0x200
90015f92:	f005 fac3 	bl	9001b51c <_ZN8touchgfx9Matrix4x4C1Ev>
90015f96:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
90015f9a:	a880      	add	r0, sp, #512	; 0x200
90015f9c:	eeb1 0a40 	vneg.f32	s0, s0
90015fa0:	f005 fb8c 	bl	9001b6bc <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
90015fa4:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
90015fa8:	a880      	add	r0, sp, #512	; 0x200
90015faa:	eeb1 0a40 	vneg.f32	s0, s0
90015fae:	f005 fb93 	bl	9001b6d8 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
90015fb2:	a890      	add	r0, sp, #576	; 0x240
90015fb4:	f005 fab2 	bl	9001b51c <_ZN8touchgfx9Matrix4x4C1Ev>
90015fb8:	ed94 0a16 	vldr	s0, [r4, #88]	; 0x58
90015fbc:	a890      	add	r0, sp, #576	; 0x240
90015fbe:	f005 faf1 	bl	9001b5a4 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>
90015fc2:	a8a0      	add	r0, sp, #640	; 0x280
90015fc4:	f005 faaa 	bl	9001b51c <_ZN8touchgfx9Matrix4x4C1Ev>
90015fc8:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
90015fcc:	a8a0      	add	r0, sp, #640	; 0x280
90015fce:	f005 fb75 	bl	9001b6bc <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
90015fd2:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
90015fd6:	f005 fb7f 	bl	9001b6d8 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
90015fda:	aa90      	add	r2, sp, #576	; 0x240
90015fdc:	a9a0      	add	r1, sp, #640	; 0x280
90015fde:	a8b0      	add	r0, sp, #704	; 0x2c0
90015fe0:	f005 fab4 	bl	9001b54c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
90015fe4:	4628      	mov	r0, r5
90015fe6:	aa80      	add	r2, sp, #512	; 0x200
90015fe8:	a9b0      	add	r1, sp, #704	; 0x2c0
90015fea:	f005 faaf 	bl	9001b54c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
90015fee:	4629      	mov	r1, r5
90015ff0:	466d      	mov	r5, sp
90015ff2:	aa70      	add	r2, sp, #448	; 0x1c0
90015ff4:	4668      	mov	r0, sp
90015ff6:	f005 faa9 	bl	9001b54c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
90015ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90015ffc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
90015ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90016000:	c60f      	stmia	r6!, {r0, r1, r2, r3}
90016002:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90016004:	c60f      	stmia	r6!, {r0, r1, r2, r3}
90016006:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
9001600a:	2500      	movs	r5, #0
9001600c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
90016010:	0129      	lsls	r1, r5, #4
90016012:	ab20      	add	r3, sp, #128	; 0x80
90016014:	3501      	adds	r5, #1
90016016:	a870      	add	r0, sp, #448	; 0x1c0
90016018:	185e      	adds	r6, r3, r1
9001601a:	ab10      	add	r3, sp, #64	; 0x40
9001601c:	4419      	add	r1, r3
9001601e:	f005 fa4d 	bl	9001b4bc <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>
90016022:	2d04      	cmp	r5, #4
90016024:	ed86 0a00 	vstr	s0, [r6]
90016028:	edc6 0a01 	vstr	s1, [r6, #4]
9001602c:	ed86 1a02 	vstr	s2, [r6, #8]
90016030:	edc6 1a03 	vstr	s3, [r6, #12]
90016034:	d1ec      	bne.n	90016010 <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x1d8>
90016036:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
9001603a:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
9001603e:	ed9d 7a22 	vldr	s14, [sp, #136]	; 0x88
90016042:	ee67 6aa6 	vmul.f32	s13, s15, s13
90016046:	ed84 7a19 	vstr	s14, [r4, #100]	; 0x64
9001604a:	ee86 6a87 	vdiv.f32	s12, s13, s14
9001604e:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
90016052:	ee67 6aa6 	vmul.f32	s13, s15, s13
90016056:	ed84 6a17 	vstr	s12, [r4, #92]	; 0x5c
9001605a:	ee86 6a87 	vdiv.f32	s12, s13, s14
9001605e:	eddd 6a24 	vldr	s13, [sp, #144]	; 0x90
90016062:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
90016066:	ed84 7a1c 	vstr	s14, [r4, #112]	; 0x70
9001606a:	ee67 6aa6 	vmul.f32	s13, s15, s13
9001606e:	ed84 6a18 	vstr	s12, [r4, #96]	; 0x60
90016072:	ee86 6a87 	vdiv.f32	s12, s13, s14
90016076:	eddd 6a25 	vldr	s13, [sp, #148]	; 0x94
9001607a:	ee67 6aa6 	vmul.f32	s13, s15, s13
9001607e:	ed84 6a1a 	vstr	s12, [r4, #104]	; 0x68
90016082:	ee86 6a87 	vdiv.f32	s12, s13, s14
90016086:	eddd 6a28 	vldr	s13, [sp, #160]	; 0xa0
9001608a:	ed9d 7a2a 	vldr	s14, [sp, #168]	; 0xa8
9001608e:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
90016092:	ee67 6aa6 	vmul.f32	s13, s15, s13
90016096:	ed84 6a1b 	vstr	s12, [r4, #108]	; 0x6c
9001609a:	ee86 6a87 	vdiv.f32	s12, s13, s14
9001609e:	eddd 6a29 	vldr	s13, [sp, #164]	; 0xa4
900160a2:	ee67 6aa6 	vmul.f32	s13, s15, s13
900160a6:	ed84 6a1d 	vstr	s12, [r4, #116]	; 0x74
900160aa:	ee86 6a87 	vdiv.f32	s12, s13, s14
900160ae:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
900160b2:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
900160b6:	ed84 7a22 	vstr	s14, [r4, #136]	; 0x88
900160ba:	ee67 6aa6 	vmul.f32	s13, s15, s13
900160be:	ed84 6a1e 	vstr	s12, [r4, #120]	; 0x78
900160c2:	ee86 6a87 	vdiv.f32	s12, s13, s14
900160c6:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
900160ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
900160ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
900160d2:	ed84 6a20 	vstr	s12, [r4, #128]	; 0x80
900160d6:	edc4 6a21 	vstr	s13, [r4, #132]	; 0x84
900160da:	f50d 7d50 	add.w	sp, sp, #832	; 0x340
900160de:	ecbd 8b04 	vpop	{d8-d9}
900160e2:	bd70      	pop	{r4, r5, r6, pc}

900160e4 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>:
900160e4:	b510      	push	{r4, lr}
900160e6:	4604      	mov	r4, r0
900160e8:	f001 f9c2 	bl	90017470 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
900160ec:	4620      	mov	r0, r4
900160ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900160f2:	f7ff bea1 	b.w	90015e38 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

900160f6 <_ZN8touchgfx13TextureMapper8setScaleEf>:
900160f6:	ed80 0a10 	vstr	s0, [r0, #64]	; 0x40
900160fa:	f7ff be9d 	b.w	90015e38 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

900160fe <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>:
900160fe:	ed80 0a0b 	vstr	s0, [r0, #44]	; 0x2c
90016102:	edc0 0a0c 	vstr	s1, [r0, #48]	; 0x30
90016106:	f7ff be97 	b.w	90015e38 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

9001610a <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>:
9001610a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
9001610e:	eeb4 0ae7 	vcmpe.f32	s0, s15
90016112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016116:	fe30 0a27 	vselgt.f32	s0, s0, s15
9001611a:	ed80 0a16 	vstr	s0, [r0, #88]	; 0x58
9001611e:	f7ff be8b 	b.w	90015e38 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

90016122 <_ZN8touchgfx13TextureMapper9setCameraEff>:
90016122:	ed80 0a14 	vstr	s0, [r0, #80]	; 0x50
90016126:	edc0 0a15 	vstr	s1, [r0, #84]	; 0x54
9001612a:	f7ff be85 	b.w	90015e38 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

9001612e <_ZN8touchgfx13TextureMapper8setOrigoEff>:
9001612e:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
90016132:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
90016136:	f7ff be7f 	b.w	90015e38 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

9001613a <_ZN8touchgfx13TextureMapper8setOrigoEfff>:
9001613a:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
9001613e:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
90016142:	ed80 1a13 	vstr	s2, [r0, #76]	; 0x4c
90016146:	f7ff be77 	b.w	90015e38 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

9001614a <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>:
9001614a:	b510      	push	{r4, lr}
9001614c:	edd1 5a1a 	vldr	s11, [r1, #104]	; 0x68
90016150:	edd1 7a17 	vldr	s15, [r1, #92]	; 0x5c
90016154:	ed91 6a1d 	vldr	s12, [r1, #116]	; 0x74
90016158:	eef4 7ae5 	vcmpe.f32	s15, s11
9001615c:	edd1 6a20 	vldr	s13, [r1, #128]	; 0x80
90016160:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
90016164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016168:	bf54      	ite	pl
9001616a:	eeb0 7a65 	vmovpl.f32	s14, s11
9001616e:	eeb0 7a67 	vmovmi.f32	s14, s15
90016172:	eeb4 6ac7 	vcmpe.f32	s12, s14
90016176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001617a:	fe37 7a06 	vselgt.f32	s14, s14, s12
9001617e:	eef4 6ac7 	vcmpe.f32	s13, s14
90016182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016186:	fe37 7a26 	vselgt.f32	s14, s14, s13
9001618a:	febb 7a47 	vrintm.f32	s14, s14
9001618e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
90016192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016196:	eef4 7ae5 	vcmpe.f32	s15, s11
9001619a:	bf56      	itet	pl
9001619c:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
900161a0:	2200      	movmi	r2, #0
900161a2:	ee17 3a10 	vmovpl	r3, s14
900161a6:	ee07 4a10 	vmov	s14, r4
900161aa:	bf58      	it	pl
900161ac:	b21a      	sxthpl	r2, r3
900161ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900161b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900161b6:	8002      	strh	r2, [r0, #0]
900161b8:	fe77 7aa5 	vselgt.f32	s15, s15, s11
900161bc:	eeb4 6ae7 	vcmpe.f32	s12, s15
900161c0:	edd1 5a1b 	vldr	s11, [r1, #108]	; 0x6c
900161c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900161c8:	bf58      	it	pl
900161ca:	eef0 7a46 	vmovpl.f32	s15, s12
900161ce:	ed91 6a1e 	vldr	s12, [r1, #120]	; 0x78
900161d2:	eef4 6ae7 	vcmpe.f32	s13, s15
900161d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900161da:	bf58      	it	pl
900161dc:	eef0 7a66 	vmovpl.f32	s15, s13
900161e0:	edd1 6a21 	vldr	s13, [r1, #132]	; 0x84
900161e4:	fefa 7a67 	vrintp.f32	s15, s15
900161e8:	eef4 7ac7 	vcmpe.f32	s15, s14
900161ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900161f0:	bfdc      	itt	le
900161f2:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
900161f6:	ee17 3a90 	vmovle	r3, s15
900161fa:	edd1 7a18 	vldr	s15, [r1, #96]	; 0x60
900161fe:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
90016202:	eef4 7ae5 	vcmpe.f32	s15, s11
90016206:	bfd8      	it	le
90016208:	b21c      	sxthle	r4, r3
9001620a:	1aa2      	subs	r2, r4, r2
9001620c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016210:	8082      	strh	r2, [r0, #4]
90016212:	bf54      	ite	pl
90016214:	eeb0 7a65 	vmovpl.f32	s14, s11
90016218:	eeb0 7a67 	vmovmi.f32	s14, s15
9001621c:	eeb4 6ac7 	vcmpe.f32	s12, s14
90016220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016224:	fe37 7a06 	vselgt.f32	s14, s14, s12
90016228:	eef4 6ac7 	vcmpe.f32	s13, s14
9001622c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016230:	fe37 7a26 	vselgt.f32	s14, s14, s13
90016234:	febb 7a47 	vrintm.f32	s14, s14
90016238:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
9001623c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016240:	eef4 7ae5 	vcmpe.f32	s15, s11
90016244:	bf56      	itet	pl
90016246:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
9001624a:	2300      	movmi	r3, #0
9001624c:	ee17 3a10 	vmovpl	r3, s14
90016250:	ee07 1a10 	vmov	s14, r1
90016254:	bf58      	it	pl
90016256:	b21b      	sxthpl	r3, r3
90016258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001625c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90016260:	8043      	strh	r3, [r0, #2]
90016262:	fe77 7aa5 	vselgt.f32	s15, s15, s11
90016266:	eeb4 6ae7 	vcmpe.f32	s12, s15
9001626a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001626e:	bf58      	it	pl
90016270:	eef0 7a46 	vmovpl.f32	s15, s12
90016274:	eef4 6ae7 	vcmpe.f32	s13, s15
90016278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001627c:	bf58      	it	pl
9001627e:	eef0 7a66 	vmovpl.f32	s15, s13
90016282:	fefa 7a67 	vrintp.f32	s15, s15
90016286:	eef4 7ac7 	vcmpe.f32	s15, s14
9001628a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001628e:	bfde      	ittt	le
90016290:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
90016294:	ee17 1a90 	vmovle	r1, s15
90016298:	b209      	sxthle	r1, r1
9001629a:	1acb      	subs	r3, r1, r3
9001629c:	80c3      	strh	r3, [r0, #6]
9001629e:	bd10      	pop	{r4, pc}

900162a0 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>:
900162a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
900162a4:	4604      	mov	r4, r0
900162a6:	4601      	mov	r1, r0
900162a8:	4668      	mov	r0, sp
900162aa:	f7ff ff4e 	bl	9001614a <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
900162ae:	4620      	mov	r0, r4
900162b0:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
900162b4:	edc4 0a0e 	vstr	s1, [r4, #56]	; 0x38
900162b8:	ed84 1a0f 	vstr	s2, [r4, #60]	; 0x3c
900162bc:	f9bd 8000 	ldrsh.w	r8, [sp]
900162c0:	f9bd 6002 	ldrsh.w	r6, [sp, #2]
900162c4:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
900162c8:	f7ff fdb6 	bl	90015e38 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
900162cc:	4621      	mov	r1, r4
900162ce:	a802      	add	r0, sp, #8
900162d0:	f7ff ff3b 	bl	9001614a <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
900162d4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
900162d8:	2b00      	cmp	r3, #0
900162da:	dd33      	ble.n	90016344 <_ZN8touchgfx13TextureMapper12updateAnglesEfff+0xa4>
900162dc:	2d00      	cmp	r5, #0
900162de:	dd31      	ble.n	90016344 <_ZN8touchgfx13TextureMapper12updateAnglesEfff+0xa4>
900162e0:	f9bd e00c 	ldrsh.w	lr, [sp, #12]
900162e4:	f1be 0f00 	cmp.w	lr, #0
900162e8:	dd34      	ble.n	90016354 <_ZN8touchgfx13TextureMapper12updateAnglesEfff+0xb4>
900162ea:	f9bd c00e 	ldrsh.w	ip, [sp, #14]
900162ee:	f1bc 0f00 	cmp.w	ip, #0
900162f2:	dd2f      	ble.n	90016354 <_ZN8touchgfx13TextureMapper12updateAnglesEfff+0xb4>
900162f4:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
900162f8:	4443      	add	r3, r8
900162fa:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
900162fe:	4435      	add	r5, r6
90016300:	4541      	cmp	r1, r8
90016302:	460f      	mov	r7, r1
90016304:	4610      	mov	r0, r2
90016306:	4471      	add	r1, lr
90016308:	bfa8      	it	ge
9001630a:	4647      	movge	r7, r8
9001630c:	42b2      	cmp	r2, r6
9001630e:	4462      	add	r2, ip
90016310:	b209      	sxth	r1, r1
90016312:	bfa8      	it	ge
90016314:	4630      	movge	r0, r6
90016316:	b21b      	sxth	r3, r3
90016318:	b212      	sxth	r2, r2
9001631a:	f8ad 7008 	strh.w	r7, [sp, #8]
9001631e:	b22d      	sxth	r5, r5
90016320:	4299      	cmp	r1, r3
90016322:	bfac      	ite	ge
90016324:	ebc7 0301 	rsbge	r3, r7, r1
90016328:	ebc7 0303 	rsblt	r3, r7, r3
9001632c:	f8ad 000a 	strh.w	r0, [sp, #10]
90016330:	42aa      	cmp	r2, r5
90016332:	bfac      	ite	ge
90016334:	ebc0 0202 	rsbge	r2, r0, r2
90016338:	ebc0 0205 	rsblt	r2, r0, r5
9001633c:	f8ad 300c 	strh.w	r3, [sp, #12]
90016340:	f8ad 200e 	strh.w	r2, [sp, #14]
90016344:	6823      	ldr	r3, [r4, #0]
90016346:	a902      	add	r1, sp, #8
90016348:	4620      	mov	r0, r4
9001634a:	691b      	ldr	r3, [r3, #16]
9001634c:	4798      	blx	r3
9001634e:	b004      	add	sp, #16
90016350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90016354:	f8ad 8008 	strh.w	r8, [sp, #8]
90016358:	f8ad 600a 	strh.w	r6, [sp, #10]
9001635c:	f8ad 300c 	strh.w	r3, [sp, #12]
90016360:	f8ad 500e 	strh.w	r5, [sp, #14]
90016364:	e7ee      	b.n	90016344 <_ZN8touchgfx13TextureMapper12updateAnglesEfff+0xa4>

90016366 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>:
90016366:	4603      	mov	r3, r0
90016368:	3026      	adds	r0, #38	; 0x26
9001636a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
9001636e:	b90b      	cbnz	r3, 90016374 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0xe>
90016370:	f003 bf13 	b.w	9001a19a <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
90016374:	f003 bf21 	b.w	9001a1ba <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>

90016378 <_ZNK8touchgfx13TextureMapper12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_>:
90016378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001637c:	4604      	mov	r4, r0
9001637e:	469b      	mov	fp, r3
90016380:	ed2d 8b04 	vpush	{d8-d9}
90016384:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
90016388:	b0ab      	sub	sp, #172	; 0xac
9001638a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
9001638e:	f9b1 6000 	ldrsh.w	r6, [r1]
90016392:	8888      	ldrh	r0, [r1, #4]
90016394:	9206      	str	r2, [sp, #24]
90016396:	2200      	movs	r2, #0
90016398:	4430      	add	r0, r6
9001639a:	f8dd a0e0 	ldr.w	sl, [sp, #224]	; 0xe0
9001639e:	920e      	str	r2, [sp, #56]	; 0x38
900163a0:	b280      	uxth	r0, r0
900163a2:	fa0f fe80 	sxth.w	lr, r0
900163a6:	4596      	cmp	lr, r2
900163a8:	e9dd 873a 	ldrd	r8, r7, [sp, #232]	; 0xe8
900163ac:	f340 8102 	ble.w	900165b4 <_ZNK8touchgfx13TextureMapper12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x23c>
900163b0:	45b4      	cmp	ip, r6
900163b2:	f340 80ff 	ble.w	900165b4 <_ZNK8touchgfx13TextureMapper12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x23c>
900163b6:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
900163ba:	88ca      	ldrh	r2, [r1, #6]
900163bc:	442a      	add	r2, r5
900163be:	b292      	uxth	r2, r2
900163c0:	b211      	sxth	r1, r2
900163c2:	2900      	cmp	r1, #0
900163c4:	f340 80f6 	ble.w	900165b4 <_ZNK8touchgfx13TextureMapper12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x23c>
900163c8:	42ab      	cmp	r3, r5
900163ca:	f340 80f3 	ble.w	900165b4 <_ZNK8touchgfx13TextureMapper12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x23c>
900163ce:	45f4      	cmp	ip, lr
900163d0:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
900163d4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
900163d8:	bfb8      	it	lt
900163da:	fa1f f08c 	uxthlt.w	r0, ip
900163de:	428b      	cmp	r3, r1
900163e0:	f8ad 6038 	strh.w	r6, [sp, #56]	; 0x38
900163e4:	bfb8      	it	lt
900163e6:	b29a      	uxthlt	r2, r3
900163e8:	1b80      	subs	r0, r0, r6
900163ea:	f8ad 503a 	strh.w	r5, [sp, #58]	; 0x3a
900163ee:	1b52      	subs	r2, r2, r5
900163f0:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
900163f4:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
900163f8:	f10d 0938 	add.w	r9, sp, #56	; 0x38
900163fc:	ad10      	add	r5, sp, #64	; 0x40
900163fe:	6822      	ldr	r2, [r4, #0]
90016400:	1d26      	adds	r6, r4, #4
90016402:	e899 0003 	ldmia.w	r9, {r0, r1}
90016406:	6a92      	ldr	r2, [r2, #40]	; 0x28
90016408:	e885 0003 	stmia.w	r5, {r0, r1}
9001640c:	4629      	mov	r1, r5
9001640e:	4620      	mov	r0, r4
90016410:	4790      	blx	r2
90016412:	4621      	mov	r1, r4
90016414:	a812      	add	r0, sp, #72	; 0x48
90016416:	f003 fe1b 	bl	9001a050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001641a:	a812      	add	r0, sp, #72	; 0x48
9001641c:	f002 fc30 	bl	90018c80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90016420:	4631      	mov	r1, r6
90016422:	4648      	mov	r0, r9
90016424:	f002 fc14 	bl	90018c50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90016428:	4628      	mov	r0, r5
9001642a:	f104 0526 	add.w	r5, r4, #38	; 0x26
9001642e:	f002 fc27 	bl	90018c80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90016432:	4628      	mov	r0, r5
90016434:	f006 f906 	bl	9001c644 <_ZNK8touchgfx6Bitmap7getDataEv>
90016438:	9007      	str	r0, [sp, #28]
9001643a:	2800      	cmp	r0, #0
9001643c:	f000 80b5 	beq.w	900165aa <_ZNK8touchgfx13TextureMapper12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x232>
90016440:	f8db 2000 	ldr.w	r2, [fp]
90016444:	a90b      	add	r1, sp, #44	; 0x2c
90016446:	a808      	add	r0, sp, #32
90016448:	9208      	str	r2, [sp, #32]
9001644a:	f8db 2004 	ldr.w	r2, [fp, #4]
9001644e:	9209      	str	r2, [sp, #36]	; 0x24
90016450:	f8db 2008 	ldr.w	r2, [fp, #8]
90016454:	920a      	str	r2, [sp, #40]	; 0x28
90016456:	f8da 2000 	ldr.w	r2, [sl]
9001645a:	920b      	str	r2, [sp, #44]	; 0x2c
9001645c:	f8da 2004 	ldr.w	r2, [sl, #4]
90016460:	920c      	str	r2, [sp, #48]	; 0x30
90016462:	f8da 2008 	ldr.w	r2, [sl, #8]
90016466:	920d      	str	r2, [sp, #52]	; 0x34
90016468:	4632      	mov	r2, r6
9001646a:	f002 fbd5 	bl	90018c18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
9001646e:	4632      	mov	r2, r6
90016470:	a90c      	add	r1, sp, #48	; 0x30
90016472:	a809      	add	r0, sp, #36	; 0x24
90016474:	f002 fbd0 	bl	90018c18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
90016478:	4632      	mov	r2, r6
9001647a:	a90d      	add	r1, sp, #52	; 0x34
9001647c:	a80a      	add	r0, sp, #40	; 0x28
9001647e:	f002 fbcb 	bl	90018c18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
90016482:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
90016486:	9b39      	ldr	r3, [sp, #228]	; 0xe4
90016488:	eeb0 7a67 	vmov.f32	s14, s15
9001648c:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
90016490:	f8d7 e004 	ldr.w	lr, [r7, #4]
90016494:	edd8 6a00 	vldr	s13, [r8]
90016498:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
9001649c:	f8d8 c008 	ldr.w	ip, [r8, #8]
900164a0:	ed93 9a00 	vldr	s18, [r3]
900164a4:	ed93 8a01 	vldr	s16, [r3, #4]
900164a8:	ee17 6a10 	vmov	r6, s14
900164ac:	eeb0 7a67 	vmov.f32	s14, s15
900164b0:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
900164b4:	f8d7 b000 	ldr.w	fp, [r7]
900164b8:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
900164bc:	edd3 8a02 	vldr	s17, [r3, #8]
900164c0:	f8d8 a004 	ldr.w	sl, [r8, #4]
900164c4:	68bf      	ldr	r7, [r7, #8]
900164c6:	ee17 0a10 	vmov	r0, s14
900164ca:	eeb0 7a67 	vmov.f32	s14, s15
900164ce:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
900164d2:	9b06      	ldr	r3, [sp, #24]
900164d4:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
900164d8:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
900164dc:	f8cd e090 	str.w	lr, [sp, #144]	; 0x90
900164e0:	f8cd c0a0 	str.w	ip, [sp, #160]	; 0xa0
900164e4:	ee17 1a10 	vmov	r1, s14
900164e8:	eeb0 7a67 	vmov.f32	s14, s15
900164ec:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
900164f0:	961c      	str	r6, [sp, #112]	; 0x70
900164f2:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
900164f6:	ed8d 9a1d 	vstr	s18, [sp, #116]	; 0x74
900164fa:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
900164fe:	f8cd b07c 	str.w	fp, [sp, #124]	; 0x7c
90016502:	ed8d 8a22 	vstr	s16, [sp, #136]	; 0x88
90016506:	ee17 2a10 	vmov	r2, s14
9001650a:	ed9d 7a08 	vldr	s14, [sp, #32]
9001650e:	edcd 7a26 	vstr	s15, [sp, #152]	; 0x98
90016512:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
90016516:	9225      	str	r2, [sp, #148]	; 0x94
90016518:	4a28      	ldr	r2, [pc, #160]	; (900165bc <_ZNK8touchgfx13TextureMapper12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x244>)
9001651a:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
9001651e:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
90016522:	edcd 8a27 	vstr	s17, [sp, #156]	; 0x9c
90016526:	9729      	str	r7, [sp, #164]	; 0xa4
90016528:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
9001652c:	9314      	str	r3, [sp, #80]	; 0x50
9001652e:	4628      	mov	r0, r5
90016530:	8812      	ldrh	r2, [r2, #0]
90016532:	9b07      	ldr	r3, [sp, #28]
90016534:	9215      	str	r2, [sp, #84]	; 0x54
90016536:	9316      	str	r3, [sp, #88]	; 0x58
90016538:	f006 f8b6 	bl	9001c6a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
9001653c:	9017      	str	r0, [sp, #92]	; 0x5c
9001653e:	4628      	mov	r0, r5
90016540:	f005 ff78 	bl	9001c434 <_ZNK8touchgfx6Bitmap8getWidthEv>
90016544:	9018      	str	r0, [sp, #96]	; 0x60
90016546:	4628      	mov	r0, r5
90016548:	f005 ffae 	bl	9001c4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001654c:	9019      	str	r0, [sp, #100]	; 0x64
9001654e:	4628      	mov	r0, r5
90016550:	f005 ff70 	bl	9001c434 <_ZNK8touchgfx6Bitmap8getWidthEv>
90016554:	eeb4 9a48 	vcmp.f32	s18, s16
90016558:	901a      	str	r0, [sp, #104]	; 0x68
9001655a:	f8b4 608c 	ldrh.w	r6, [r4, #140]	; 0x8c
9001655e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016562:	d107      	bne.n	90016574 <_ZNK8touchgfx13TextureMapper12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1fc>
90016564:	eeb4 8a68 	vcmp.f32	s16, s17
90016568:	f64f 73ff 	movw	r3, #65535	; 0xffff
9001656c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016570:	bf08      	it	eq
90016572:	461e      	moveq	r6, r3
90016574:	4b12      	ldr	r3, [pc, #72]	; (900165c0 <_ZNK8touchgfx13TextureMapper12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x248>)
90016576:	681b      	ldr	r3, [r3, #0]
90016578:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
9001657c:	b10a      	cbz	r2, 90016582 <_ZNK8touchgfx13TextureMapper12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x20a>
9001657e:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
90016580:	b905      	cbnz	r5, 90016584 <_ZNK8touchgfx13TextureMapper12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x20c>
90016582:	689d      	ldr	r5, [r3, #8]
90016584:	682b      	ldr	r3, [r5, #0]
90016586:	4620      	mov	r0, r4
90016588:	6b9f      	ldr	r7, [r3, #56]	; 0x38
9001658a:	f7ff feec 	bl	90016366 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>
9001658e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
90016592:	aa1b      	add	r2, sp, #108	; 0x6c
90016594:	9604      	str	r6, [sp, #16]
90016596:	a914      	add	r1, sp, #80	; 0x50
90016598:	e9cd 0302 	strd	r0, r3, [sp, #8]
9001659c:	ab10      	add	r3, sp, #64	; 0x40
9001659e:	4628      	mov	r0, r5
900165a0:	9301      	str	r3, [sp, #4]
900165a2:	ab12      	add	r3, sp, #72	; 0x48
900165a4:	9300      	str	r3, [sp, #0]
900165a6:	ab16      	add	r3, sp, #88	; 0x58
900165a8:	47b8      	blx	r7
900165aa:	b02b      	add	sp, #172	; 0xac
900165ac:	ecbd 8b04 	vpop	{d8-d9}
900165b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900165b4:	2300      	movs	r3, #0
900165b6:	930f      	str	r3, [sp, #60]	; 0x3c
900165b8:	e71e      	b.n	900163f8 <_ZNK8touchgfx13TextureMapper12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x80>
900165ba:	bf00      	nop
900165bc:	20026cd6 	.word	0x20026cd6
900165c0:	20026cdc 	.word	0x20026cdc

900165c4 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE>:
900165c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900165c8:	ed2d 8b08 	vpush	{d8-d11}
900165cc:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
900165d0:	b095      	sub	sp, #84	; 0x54
900165d2:	4604      	mov	r4, r0
900165d4:	4689      	mov	r9, r1
900165d6:	2b00      	cmp	r3, #0
900165d8:	f000 80a2 	beq.w	90016720 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x15c>
900165dc:	f100 0526 	add.w	r5, r0, #38	; 0x26
900165e0:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
900165e4:	4628      	mov	r0, r5
900165e6:	f005 ff25 	bl	9001c434 <_ZNK8touchgfx6Bitmap8getWidthEv>
900165ea:	ee07 0a90 	vmov	s15, r0
900165ee:	4628      	mov	r0, r5
900165f0:	eeb8 aa67 	vcvt.f32.u32	s20, s15
900165f4:	f005 ff58 	bl	9001c4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
900165f8:	4b6c      	ldr	r3, [pc, #432]	; (900167ac <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x1e8>)
900165fa:	ee07 0a90 	vmov	s15, r0
900165fe:	781b      	ldrb	r3, [r3, #0]
90016600:	eef8 8a67 	vcvt.f32.u32	s17, s15
90016604:	2b01      	cmp	r3, #1
90016606:	f040 8090 	bne.w	9001672a <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x166>
9001660a:	eef0 aa4a 	vmov.f32	s21, s20
9001660e:	ee1a 8a10 	vmov	r8, s20
90016612:	eeb0 ba68 	vmov.f32	s22, s17
90016616:	eef0 9a68 	vmov.f32	s19, s17
9001661a:	eeb0 aa48 	vmov.f32	s20, s16
9001661e:	eef0 8a48 	vmov.f32	s17, s16
90016622:	ed94 7a17 	vldr	s14, [r4, #92]	; 0x5c
90016626:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
9001662a:	ed94 6a1b 	vldr	s12, [r4, #108]	; 0x6c
9001662e:	edd4 5a1d 	vldr	s11, [r4, #116]	; 0x74
90016632:	ee76 4a67 	vsub.f32	s9, s12, s15
90016636:	ed94 5a1a 	vldr	s10, [r4, #104]	; 0x68
9001663a:	ee35 9ac7 	vsub.f32	s18, s11, s14
9001663e:	edd4 6a1e 	vldr	s13, [r4, #120]	; 0x78
90016642:	ee35 4a47 	vsub.f32	s8, s10, s14
90016646:	6f22      	ldr	r2, [r4, #112]	; 0x70
90016648:	6e61      	ldr	r1, [r4, #100]	; 0x64
9001664a:	ee29 9a64 	vnmul.f32	s18, s18, s9
9001664e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
90016650:	ee76 4ae7 	vsub.f32	s9, s13, s15
90016654:	eea4 9a24 	vfma.f32	s18, s8, s9
90016658:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
9001665c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016660:	dd6c      	ble.n	9001673c <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x178>
90016662:	ed8d 7a05 	vstr	s14, [sp, #20]
90016666:	ed8d 5a06 	vstr	s10, [sp, #24]
9001666a:	edcd 5a07 	vstr	s11, [sp, #28]
9001666e:	edcd 7a08 	vstr	s15, [sp, #32]
90016672:	ed8d 6a09 	vstr	s12, [sp, #36]	; 0x24
90016676:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
9001667a:	910b      	str	r1, [sp, #44]	; 0x2c
9001667c:	920c      	str	r2, [sp, #48]	; 0x30
9001667e:	930d      	str	r3, [sp, #52]	; 0x34
90016680:	ed8d 8a0e 	vstr	s16, [sp, #56]	; 0x38
90016684:	ed8d aa0f 	vstr	s20, [sp, #60]	; 0x3c
90016688:	edcd 9a10 	vstr	s19, [sp, #64]	; 0x40
9001668c:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
90016690:	ed8d 8a12 	vstr	s16, [sp, #72]	; 0x48
90016694:	ab08      	add	r3, sp, #32
90016696:	af11      	add	r7, sp, #68	; 0x44
90016698:	ae0e      	add	r6, sp, #56	; 0x38
9001669a:	ad0b      	add	r5, sp, #44	; 0x2c
9001669c:	9300      	str	r3, [sp, #0]
9001669e:	2200      	movs	r2, #0
900166a0:	ab05      	add	r3, sp, #20
900166a2:	4649      	mov	r1, r9
900166a4:	4620      	mov	r0, r4
900166a6:	9703      	str	r7, [sp, #12]
900166a8:	9602      	str	r6, [sp, #8]
900166aa:	9501      	str	r5, [sp, #4]
900166ac:	edcd 8a13 	vstr	s17, [sp, #76]	; 0x4c
900166b0:	f7ff fe62 	bl	90016378 <_ZNK8touchgfx13TextureMapper12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_>
900166b4:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
900166b8:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
900166bc:	6e20      	ldr	r0, [r4, #96]	; 0x60
900166be:	6e62      	ldr	r2, [r4, #100]	; 0x64
900166c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900166c4:	f8d4 c074 	ldr.w	ip, [r4, #116]	; 0x74
900166c8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
900166ca:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
900166cc:	dd50      	ble.n	90016770 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x1ac>
900166ce:	f8cd c018 	str.w	ip, [sp, #24]
900166d2:	9109      	str	r1, [sp, #36]	; 0x24
900166d4:	f8d4 c080 	ldr.w	ip, [r4, #128]	; 0x80
900166d8:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
900166dc:	930c      	str	r3, [sp, #48]	; 0x30
900166de:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
900166e2:	f8cd e014 	str.w	lr, [sp, #20]
900166e6:	f8cd c01c 	str.w	ip, [sp, #28]
900166ea:	9008      	str	r0, [sp, #32]
900166ec:	910a      	str	r1, [sp, #40]	; 0x28
900166ee:	920b      	str	r2, [sp, #44]	; 0x2c
900166f0:	930d      	str	r3, [sp, #52]	; 0x34
900166f2:	ed8d 8a0e 	vstr	s16, [sp, #56]	; 0x38
900166f6:	edcd 9a0f 	vstr	s19, [sp, #60]	; 0x3c
900166fa:	ed8d ba10 	vstr	s22, [sp, #64]	; 0x40
900166fe:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
90016702:	edcd 8a12 	vstr	s17, [sp, #72]	; 0x48
90016706:	ab08      	add	r3, sp, #32
90016708:	9501      	str	r5, [sp, #4]
9001670a:	2200      	movs	r2, #0
9001670c:	4649      	mov	r1, r9
9001670e:	9300      	str	r3, [sp, #0]
90016710:	4620      	mov	r0, r4
90016712:	ab05      	add	r3, sp, #20
90016714:	edcd aa13 	vstr	s21, [sp, #76]	; 0x4c
90016718:	e9cd 6702 	strd	r6, r7, [sp, #8]
9001671c:	f7ff fe2c 	bl	90016378 <_ZNK8touchgfx13TextureMapper12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_>
90016720:	b015      	add	sp, #84	; 0x54
90016722:	ecbd 8b08 	vpop	{d8-d11}
90016726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001672a:	eef0 aa68 	vmov.f32	s21, s17
9001672e:	ee18 8a10 	vmov	r8, s16
90016732:	eef0 9a4a 	vmov.f32	s19, s20
90016736:	eeb0 ba48 	vmov.f32	s22, s16
9001673a:	e772      	b.n	90016622 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x5e>
9001673c:	ed8d 7a06 	vstr	s14, [sp, #24]
90016740:	ed8d 5a05 	vstr	s10, [sp, #20]
90016744:	edcd 5a07 	vstr	s11, [sp, #28]
90016748:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
9001674c:	ed8d 6a08 	vstr	s12, [sp, #32]
90016750:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
90016754:	910c      	str	r1, [sp, #48]	; 0x30
90016756:	920b      	str	r2, [sp, #44]	; 0x2c
90016758:	930d      	str	r3, [sp, #52]	; 0x34
9001675a:	ed8d 8a0f 	vstr	s16, [sp, #60]	; 0x3c
9001675e:	ed8d aa0e 	vstr	s20, [sp, #56]	; 0x38
90016762:	edcd 9a10 	vstr	s19, [sp, #64]	; 0x40
90016766:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
9001676a:	ed8d 8a11 	vstr	s16, [sp, #68]	; 0x44
9001676e:	e791      	b.n	90016694 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0xd0>
90016770:	f8cd c014 	str.w	ip, [sp, #20]
90016774:	9108      	str	r1, [sp, #32]
90016776:	f8d4 c080 	ldr.w	ip, [r4, #128]	; 0x80
9001677a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
9001677e:	930b      	str	r3, [sp, #44]	; 0x2c
90016780:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
90016784:	f8cd e018 	str.w	lr, [sp, #24]
90016788:	f8cd c01c 	str.w	ip, [sp, #28]
9001678c:	9009      	str	r0, [sp, #36]	; 0x24
9001678e:	910a      	str	r1, [sp, #40]	; 0x28
90016790:	920c      	str	r2, [sp, #48]	; 0x30
90016792:	930d      	str	r3, [sp, #52]	; 0x34
90016794:	ed8d 8a0f 	vstr	s16, [sp, #60]	; 0x3c
90016798:	edcd 9a0e 	vstr	s19, [sp, #56]	; 0x38
9001679c:	ed8d ba10 	vstr	s22, [sp, #64]	; 0x40
900167a0:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
900167a4:	edcd 8a11 	vstr	s17, [sp, #68]	; 0x44
900167a8:	e7ad      	b.n	90016706 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x142>
900167aa:	bf00      	nop
900167ac:	20026cd4 	.word	0x20026cd4

900167b0 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
900167b0:	2200      	movs	r2, #0
900167b2:	8002      	strh	r2, [r0, #0]
900167b4:	8042      	strh	r2, [r0, #2]
900167b6:	8082      	strh	r2, [r0, #4]
900167b8:	80c2      	strh	r2, [r0, #6]
900167ba:	4770      	bx	lr

900167bc <_ZN8touchgfx8TextArea13setXBaselineYEss>:
900167bc:	b570      	push	{r4, r5, r6, lr}
900167be:	6803      	ldr	r3, [r0, #0]
900167c0:	4604      	mov	r4, r0
900167c2:	4615      	mov	r5, r2
900167c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900167c6:	4798      	blx	r3
900167c8:	6823      	ldr	r3, [r4, #0]
900167ca:	4629      	mov	r1, r5
900167cc:	4620      	mov	r0, r4
900167ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900167d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900167d4:	4718      	bx	r3

900167d6 <_ZN8touchgfx8TextAreaD1Ev>:
900167d6:	4770      	bx	lr

900167d8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
900167d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
900167da:	f64f 73ff 	movw	r3, #65535	; 0xffff
900167de:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
900167e0:	4299      	cmp	r1, r3
900167e2:	d029      	beq.n	90016838 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
900167e4:	4b15      	ldr	r3, [pc, #84]	; (9001683c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
900167e6:	681b      	ldr	r3, [r3, #0]
900167e8:	b92b      	cbnz	r3, 900167f6 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
900167ea:	4b15      	ldr	r3, [pc, #84]	; (90016840 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
900167ec:	21b1      	movs	r1, #177	; 0xb1
900167ee:	4a15      	ldr	r2, [pc, #84]	; (90016844 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
900167f0:	4815      	ldr	r0, [pc, #84]	; (90016848 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
900167f2:	f012 fa1f 	bl	90028c34 <__assert_func>
900167f6:	4a15      	ldr	r2, [pc, #84]	; (9001684c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
900167f8:	8812      	ldrh	r2, [r2, #0]
900167fa:	428a      	cmp	r2, r1
900167fc:	d803      	bhi.n	90016806 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
900167fe:	4b14      	ldr	r3, [pc, #80]	; (90016850 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
90016800:	21b2      	movs	r1, #178	; 0xb2
90016802:	4a10      	ldr	r2, [pc, #64]	; (90016844 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
90016804:	e7f4      	b.n	900167f0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
90016806:	eb03 0241 	add.w	r2, r3, r1, lsl #1
9001680a:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
9001680e:	4b11      	ldr	r3, [pc, #68]	; (90016854 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
90016810:	7854      	ldrb	r4, [r2, #1]
90016812:	681b      	ldr	r3, [r3, #0]
90016814:	f3c4 0481 	ubfx	r4, r4, #2, #2
90016818:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
9001681c:	682b      	ldr	r3, [r5, #0]
9001681e:	69de      	ldr	r6, [r3, #28]
90016820:	4b0d      	ldr	r3, [pc, #52]	; (90016858 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
90016822:	6818      	ldr	r0, [r3, #0]
90016824:	f7ec fef0 	bl	90003608 <_ZNK8touchgfx5Texts7getTextEt>
90016828:	2300      	movs	r3, #0
9001682a:	4602      	mov	r2, r0
9001682c:	4621      	mov	r1, r4
9001682e:	9300      	str	r3, [sp, #0]
90016830:	4628      	mov	r0, r5
90016832:	47b0      	blx	r6
90016834:	b002      	add	sp, #8
90016836:	bd70      	pop	{r4, r5, r6, pc}
90016838:	2000      	movs	r0, #0
9001683a:	e7fb      	b.n	90016834 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
9001683c:	20026d2c 	.word	0x20026d2c
90016840:	9002ad50 	.word	0x9002ad50
90016844:	9002f5a8 	.word	0x9002f5a8
90016848:	9002adde 	.word	0x9002adde
9001684c:	20026d30 	.word	0x20026d30
90016850:	9002ae07 	.word	0x9002ae07
90016854:	20026d34 	.word	0x20026d34
90016858:	20026d38 	.word	0x20026d38

9001685c <_ZN8touchgfx8TextArea12setBaselineYEs>:
9001685c:	b570      	push	{r4, r5, r6, lr}
9001685e:	6803      	ldr	r3, [r0, #0]
90016860:	4604      	mov	r4, r0
90016862:	b28d      	uxth	r5, r1
90016864:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90016866:	6b1e      	ldr	r6, [r3, #48]	; 0x30
90016868:	4b10      	ldr	r3, [pc, #64]	; (900168ac <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
9001686a:	681b      	ldr	r3, [r3, #0]
9001686c:	b92b      	cbnz	r3, 9001687a <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
9001686e:	4b10      	ldr	r3, [pc, #64]	; (900168b0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
90016870:	21b1      	movs	r1, #177	; 0xb1
90016872:	4a10      	ldr	r2, [pc, #64]	; (900168b4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
90016874:	4810      	ldr	r0, [pc, #64]	; (900168b8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
90016876:	f012 f9dd 	bl	90028c34 <__assert_func>
9001687a:	4910      	ldr	r1, [pc, #64]	; (900168bc <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
9001687c:	8809      	ldrh	r1, [r1, #0]
9001687e:	4291      	cmp	r1, r2
90016880:	d803      	bhi.n	9001688a <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
90016882:	4b0f      	ldr	r3, [pc, #60]	; (900168c0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
90016884:	21b2      	movs	r1, #178	; 0xb2
90016886:	4a0b      	ldr	r2, [pc, #44]	; (900168b4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
90016888:	e7f4      	b.n	90016874 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
9001688a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
9001688e:	4b0d      	ldr	r3, [pc, #52]	; (900168c4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
90016890:	681b      	ldr	r3, [r3, #0]
90016892:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
90016896:	6803      	ldr	r3, [r0, #0]
90016898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001689a:	4798      	blx	r3
9001689c:	1a29      	subs	r1, r5, r0
9001689e:	4633      	mov	r3, r6
900168a0:	4620      	mov	r0, r4
900168a2:	b209      	sxth	r1, r1
900168a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900168a8:	4718      	bx	r3
900168aa:	bf00      	nop
900168ac:	20026d2c 	.word	0x20026d2c
900168b0:	9002ad50 	.word	0x9002ad50
900168b4:	9002f5a8 	.word	0x9002f5a8
900168b8:	9002adde 	.word	0x9002adde
900168bc:	20026d30 	.word	0x20026d30
900168c0:	9002ae07 	.word	0x9002ae07
900168c4:	20026d34 	.word	0x20026d34

900168c8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
900168c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900168cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
900168d0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
900168d2:	b08c      	sub	sp, #48	; 0x30
900168d4:	4604      	mov	r4, r0
900168d6:	4293      	cmp	r3, r2
900168d8:	4688      	mov	r8, r1
900168da:	d05f      	beq.n	9001699c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
900168dc:	4e31      	ldr	r6, [pc, #196]	; (900169a4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
900168de:	6832      	ldr	r2, [r6, #0]
900168e0:	b92a      	cbnz	r2, 900168ee <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
900168e2:	4b31      	ldr	r3, [pc, #196]	; (900169a8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
900168e4:	21b1      	movs	r1, #177	; 0xb1
900168e6:	4a31      	ldr	r2, [pc, #196]	; (900169ac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
900168e8:	4831      	ldr	r0, [pc, #196]	; (900169b0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
900168ea:	f012 f9a3 	bl	90028c34 <__assert_func>
900168ee:	4d31      	ldr	r5, [pc, #196]	; (900169b4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
900168f0:	8829      	ldrh	r1, [r5, #0]
900168f2:	4299      	cmp	r1, r3
900168f4:	d803      	bhi.n	900168fe <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
900168f6:	4b30      	ldr	r3, [pc, #192]	; (900169b8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
900168f8:	21b2      	movs	r1, #178	; 0xb2
900168fa:	4a2c      	ldr	r2, [pc, #176]	; (900169ac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
900168fc:	e7f4      	b.n	900168e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
900168fe:	eb02 0143 	add.w	r1, r2, r3, lsl #1
90016902:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
90016906:	4b2d      	ldr	r3, [pc, #180]	; (900169bc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
90016908:	681b      	ldr	r3, [r3, #0]
9001690a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
9001690e:	2a00      	cmp	r2, #0
90016910:	d044      	beq.n	9001699c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
90016912:	784b      	ldrb	r3, [r1, #1]
90016914:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
90016918:	f3c3 0901 	ubfx	r9, r3, #0, #2
9001691c:	f3c3 0381 	ubfx	r3, r3, #2, #2
90016920:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
90016924:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
90016928:	4b25      	ldr	r3, [pc, #148]	; (900169c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
9001692a:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
9001692e:	681b      	ldr	r3, [r3, #0]
90016930:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
90016934:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
90016938:	9207      	str	r2, [sp, #28]
9001693a:	6b00      	ldr	r0, [r0, #48]	; 0x30
9001693c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90016940:	9009      	str	r0, [sp, #36]	; 0x24
90016942:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
90016946:	f88d 9020 	strb.w	r9, [sp, #32]
9001694a:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
9001694e:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
90016952:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
90016956:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
9001695a:	b10a      	cbz	r2, 90016960 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
9001695c:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
9001695e:	b907      	cbnz	r7, 90016962 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
90016960:	689f      	ldr	r7, [r3, #8]
90016962:	f10d 0914 	add.w	r9, sp, #20
90016966:	4621      	mov	r1, r4
90016968:	4648      	mov	r0, r9
9001696a:	f003 fb71 	bl	9001a050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001696e:	6833      	ldr	r3, [r6, #0]
90016970:	2b00      	cmp	r3, #0
90016972:	d0b6      	beq.n	900168e2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
90016974:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
90016976:	882b      	ldrh	r3, [r5, #0]
90016978:	428b      	cmp	r3, r1
9001697a:	d9bc      	bls.n	900168f6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
9001697c:	4b11      	ldr	r3, [pc, #68]	; (900169c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
9001697e:	6818      	ldr	r0, [r3, #0]
90016980:	f7ec fe42 	bl	90003608 <_ZNK8touchgfx5Texts7getTextEt>
90016984:	2300      	movs	r3, #0
90016986:	9001      	str	r0, [sp, #4]
90016988:	4638      	mov	r0, r7
9001698a:	e9cd 3302 	strd	r3, r3, [sp, #8]
9001698e:	ab07      	add	r3, sp, #28
90016990:	9300      	str	r3, [sp, #0]
90016992:	4643      	mov	r3, r8
90016994:	e899 0006 	ldmia.w	r9, {r1, r2}
90016998:	f7ec fde8 	bl	9000356c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
9001699c:	b00c      	add	sp, #48	; 0x30
9001699e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900169a2:	bf00      	nop
900169a4:	20026d2c 	.word	0x20026d2c
900169a8:	9002ad50 	.word	0x9002ad50
900169ac:	9002f5a8 	.word	0x9002f5a8
900169b0:	9002adde 	.word	0x9002adde
900169b4:	20026d30 	.word	0x20026d30
900169b8:	9002ae07 	.word	0x9002ae07
900169bc:	20026d34 	.word	0x20026d34
900169c0:	20026cdc 	.word	0x20026cdc
900169c4:	20026d38 	.word	0x20026d38

900169c8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
900169c8:	b40e      	push	{r1, r2, r3}
900169ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
900169ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900169d2:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
900169d4:	b09b      	sub	sp, #108	; 0x6c
900169d6:	4604      	mov	r4, r0
900169d8:	4293      	cmp	r3, r2
900169da:	d061      	beq.n	90016aa0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
900169dc:	aa24      	add	r2, sp, #144	; 0x90
900169de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 90016ab4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
900169e2:	9203      	str	r2, [sp, #12]
900169e4:	f8da 2000 	ldr.w	r2, [sl]
900169e8:	b92a      	cbnz	r2, 900169f6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
900169ea:	4b2e      	ldr	r3, [pc, #184]	; (90016aa4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
900169ec:	21b1      	movs	r1, #177	; 0xb1
900169ee:	4a2e      	ldr	r2, [pc, #184]	; (90016aa8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
900169f0:	482e      	ldr	r0, [pc, #184]	; (90016aac <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
900169f2:	f012 f91f 	bl	90028c34 <__assert_func>
900169f6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 90016ab8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>
900169fa:	f8b8 1000 	ldrh.w	r1, [r8]
900169fe:	4299      	cmp	r1, r3
90016a00:	d803      	bhi.n	90016a0a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
90016a02:	4b2b      	ldr	r3, [pc, #172]	; (90016ab0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
90016a04:	21b2      	movs	r1, #178	; 0xb2
90016a06:	4a28      	ldr	r2, [pc, #160]	; (90016aa8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
90016a08:	e7f2      	b.n	900169f0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
90016a0a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 90016abc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>
90016a0e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
90016a12:	f8d9 3000 	ldr.w	r3, [r9]
90016a16:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
90016a1a:	683b      	ldr	r3, [r7, #0]
90016a1c:	4638      	mov	r0, r7
90016a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90016a20:	4798      	blx	r3
90016a22:	4606      	mov	r6, r0
90016a24:	b205      	sxth	r5, r0
90016a26:	a804      	add	r0, sp, #16
90016a28:	f003 ffc7 	bl	9001a9ba <_ZN8touchgfx12TextProviderC1Ev>
90016a2c:	683b      	ldr	r3, [r7, #0]
90016a2e:	4638      	mov	r0, r7
90016a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90016a32:	4798      	blx	r3
90016a34:	9923      	ldr	r1, [sp, #140]	; 0x8c
90016a36:	4603      	mov	r3, r0
90016a38:	9a03      	ldr	r2, [sp, #12]
90016a3a:	a804      	add	r0, sp, #16
90016a3c:	f004 f802 	bl	9001aa44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
90016a40:	f8da 3000 	ldr.w	r3, [sl]
90016a44:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
90016a48:	2b00      	cmp	r3, #0
90016a4a:	d0ce      	beq.n	900169ea <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
90016a4c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
90016a4e:	f8b8 0000 	ldrh.w	r0, [r8]
90016a52:	4290      	cmp	r0, r2
90016a54:	d9d5      	bls.n	90016a02 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
90016a56:	eb03 0742 	add.w	r7, r3, r2, lsl #1
90016a5a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
90016a5e:	f8d9 3000 	ldr.w	r3, [r9]
90016a62:	787a      	ldrb	r2, [r7, #1]
90016a64:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
90016a68:	f3c2 0281 	ubfx	r2, r2, #2, #2
90016a6c:	9700      	str	r7, [sp, #0]
90016a6e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
90016a72:	a804      	add	r0, sp, #16
90016a74:	f001 fde7 	bl	90018646 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
90016a78:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
90016a7c:	b203      	sxth	r3, r0
90016a7e:	18a9      	adds	r1, r5, r2
90016a80:	2900      	cmp	r1, #0
90016a82:	dd0b      	ble.n	90016a9c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
90016a84:	3b01      	subs	r3, #1
90016a86:	fb13 f302 	smulbb	r3, r3, r2
90016a8a:	fb16 3300 	smlabb	r3, r6, r0, r3
90016a8e:	b21d      	sxth	r5, r3
90016a90:	4628      	mov	r0, r5
90016a92:	b01b      	add	sp, #108	; 0x6c
90016a94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90016a98:	b003      	add	sp, #12
90016a9a:	4770      	bx	lr
90016a9c:	2b00      	cmp	r3, #0
90016a9e:	dcf7      	bgt.n	90016a90 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
90016aa0:	2500      	movs	r5, #0
90016aa2:	e7f5      	b.n	90016a90 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
90016aa4:	9002ad50 	.word	0x9002ad50
90016aa8:	9002f5a8 	.word	0x9002f5a8
90016aac:	9002adde 	.word	0x9002adde
90016ab0:	9002ae07 	.word	0x9002ae07
90016ab4:	20026d2c 	.word	0x20026d2c
90016ab8:	20026d30 	.word	0x20026d30
90016abc:	20026d34 	.word	0x20026d34

90016ac0 <_ZN8touchgfx8TextAreaD0Ev>:
90016ac0:	b510      	push	{r4, lr}
90016ac2:	4604      	mov	r4, r0
90016ac4:	213c      	movs	r1, #60	; 0x3c
90016ac6:	f011 fad9 	bl	9002807c <_ZdlPvj>
90016aca:	4620      	mov	r0, r4
90016acc:	bd10      	pop	{r4, pc}
	...

90016ad0 <_ZN8touchgfx8TextArea13getTextHeightEv>:
90016ad0:	b570      	push	{r4, r5, r6, lr}
90016ad2:	f64f 73ff 	movw	r3, #65535	; 0xffff
90016ad6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
90016ad8:	4604      	mov	r4, r0
90016ada:	4299      	cmp	r1, r3
90016adc:	d01e      	beq.n	90016b1c <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
90016ade:	6803      	ldr	r3, [r0, #0]
90016ae0:	6edd      	ldr	r5, [r3, #108]	; 0x6c
90016ae2:	4b0f      	ldr	r3, [pc, #60]	; (90016b20 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
90016ae4:	681b      	ldr	r3, [r3, #0]
90016ae6:	b92b      	cbnz	r3, 90016af4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
90016ae8:	4b0e      	ldr	r3, [pc, #56]	; (90016b24 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
90016aea:	21b1      	movs	r1, #177	; 0xb1
90016aec:	4a0e      	ldr	r2, [pc, #56]	; (90016b28 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
90016aee:	480f      	ldr	r0, [pc, #60]	; (90016b2c <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
90016af0:	f012 f8a0 	bl	90028c34 <__assert_func>
90016af4:	4b0e      	ldr	r3, [pc, #56]	; (90016b30 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
90016af6:	881b      	ldrh	r3, [r3, #0]
90016af8:	428b      	cmp	r3, r1
90016afa:	d803      	bhi.n	90016b04 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
90016afc:	4b0d      	ldr	r3, [pc, #52]	; (90016b34 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
90016afe:	21b2      	movs	r1, #178	; 0xb2
90016b00:	4a09      	ldr	r2, [pc, #36]	; (90016b28 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
90016b02:	e7f4      	b.n	90016aee <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
90016b04:	4b0c      	ldr	r3, [pc, #48]	; (90016b38 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
90016b06:	6818      	ldr	r0, [r3, #0]
90016b08:	f7ec fd7e 	bl	90003608 <_ZNK8touchgfx5Texts7getTextEt>
90016b0c:	2300      	movs	r3, #0
90016b0e:	4601      	mov	r1, r0
90016b10:	46ac      	mov	ip, r5
90016b12:	4620      	mov	r0, r4
90016b14:	461a      	mov	r2, r3
90016b16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90016b1a:	4760      	bx	ip
90016b1c:	2000      	movs	r0, #0
90016b1e:	bd70      	pop	{r4, r5, r6, pc}
90016b20:	20026d2c 	.word	0x20026d2c
90016b24:	9002ad50 	.word	0x9002ad50
90016b28:	9002f5a8 	.word	0x9002f5a8
90016b2c:	9002adde 	.word	0x9002adde
90016b30:	20026d30 	.word	0x20026d30
90016b34:	9002ae07 	.word	0x9002ae07
90016b38:	20026d38 	.word	0x20026d38

90016b3c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
90016b3c:	b538      	push	{r3, r4, r5, lr}
90016b3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
90016b42:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90016b44:	4604      	mov	r4, r0
90016b46:	429a      	cmp	r2, r3
90016b48:	d014      	beq.n	90016b74 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
90016b4a:	6803      	ldr	r3, [r0, #0]
90016b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90016b4e:	4798      	blx	r3
90016b50:	6823      	ldr	r3, [r4, #0]
90016b52:	4605      	mov	r5, r0
90016b54:	4620      	mov	r0, r4
90016b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90016b58:	4798      	blx	r3
90016b5a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90016b5e:	b22d      	sxth	r5, r5
90016b60:	4601      	mov	r1, r0
90016b62:	f013 0ffd 	tst.w	r3, #253	; 0xfd
90016b66:	bf06      	itte	eq
90016b68:	4602      	moveq	r2, r0
90016b6a:	4629      	moveq	r1, r5
90016b6c:	462a      	movne	r2, r5
90016b6e:	4620      	mov	r0, r4
90016b70:	f7fd fa4d 	bl	9001400e <_ZN8touchgfx8Drawable14setWidthHeightEss>
90016b74:	bd38      	pop	{r3, r4, r5, pc}

90016b76 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
90016b76:	888a      	ldrh	r2, [r1, #4]
90016b78:	8582      	strh	r2, [r0, #44]	; 0x2c
90016b7a:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
90016b7e:	b922      	cbnz	r2, 90016b8a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
90016b80:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
90016b84:	b90b      	cbnz	r3, 90016b8a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
90016b86:	f7ff bfd9 	b.w	90016b3c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
90016b8a:	4770      	bx	lr

90016b8c <_ZNK8touchgfx3Box12getSolidRectEv>:
90016b8c:	2300      	movs	r3, #0
90016b8e:	8083      	strh	r3, [r0, #4]
90016b90:	80c3      	strh	r3, [r0, #6]
90016b92:	8003      	strh	r3, [r0, #0]
90016b94:	8043      	strh	r3, [r0, #2]
90016b96:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
90016b9a:	2bff      	cmp	r3, #255	; 0xff
90016b9c:	bf01      	itttt	eq
90016b9e:	890b      	ldrheq	r3, [r1, #8]
90016ba0:	8083      	strheq	r3, [r0, #4]
90016ba2:	894b      	ldrheq	r3, [r1, #10]
90016ba4:	80c3      	strheq	r3, [r0, #6]
90016ba6:	4770      	bx	lr

90016ba8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
90016ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
90016baa:	4604      	mov	r4, r0
90016bac:	466b      	mov	r3, sp
90016bae:	6808      	ldr	r0, [r1, #0]
90016bb0:	6849      	ldr	r1, [r1, #4]
90016bb2:	c303      	stmia	r3!, {r0, r1}
90016bb4:	6823      	ldr	r3, [r4, #0]
90016bb6:	4669      	mov	r1, sp
90016bb8:	4620      	mov	r0, r4
90016bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90016bbc:	4798      	blx	r3
90016bbe:	4b08      	ldr	r3, [pc, #32]	; (90016be0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
90016bc0:	681b      	ldr	r3, [r3, #0]
90016bc2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90016bc6:	b10a      	cbz	r2, 90016bcc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
90016bc8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90016bca:	b900      	cbnz	r0, 90016bce <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
90016bcc:	6898      	ldr	r0, [r3, #8]
90016bce:	6803      	ldr	r3, [r0, #0]
90016bd0:	4669      	mov	r1, sp
90016bd2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90016bd4:	699d      	ldr	r5, [r3, #24]
90016bd6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
90016bda:	47a8      	blx	r5
90016bdc:	b003      	add	sp, #12
90016bde:	bd30      	pop	{r4, r5, pc}
90016be0:	20026cdc 	.word	0x20026cdc

90016be4 <_ZN8touchgfx3BoxD1Ev>:
90016be4:	4770      	bx	lr

90016be6 <_ZN8touchgfx3BoxD0Ev>:
90016be6:	b510      	push	{r4, lr}
90016be8:	4604      	mov	r4, r0
90016bea:	212c      	movs	r1, #44	; 0x2c
90016bec:	f011 fa46 	bl	9002807c <_ZdlPvj>
90016bf0:	4620      	mov	r0, r4
90016bf2:	bd10      	pop	{r4, pc}

90016bf4 <_ZN8touchgfx10TiledImage9setOffsetEss>:
90016bf4:	b570      	push	{r4, r5, r6, lr}
90016bf6:	6803      	ldr	r3, [r0, #0]
90016bf8:	4604      	mov	r4, r0
90016bfa:	4615      	mov	r5, r2
90016bfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90016bfe:	4798      	blx	r3
90016c00:	6823      	ldr	r3, [r4, #0]
90016c02:	4629      	mov	r1, r5
90016c04:	4620      	mov	r0, r4
90016c06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90016c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90016c0c:	4718      	bx	r3

90016c0e <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
90016c0e:	b570      	push	{r4, r5, r6, lr}
90016c10:	6803      	ldr	r3, [r0, #0]
90016c12:	4604      	mov	r4, r0
90016c14:	460e      	mov	r6, r1
90016c16:	4615      	mov	r5, r2
90016c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90016c1a:	4798      	blx	r3
90016c1c:	8030      	strh	r0, [r6, #0]
90016c1e:	6823      	ldr	r3, [r4, #0]
90016c20:	4620      	mov	r0, r4
90016c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90016c24:	4798      	blx	r3
90016c26:	8028      	strh	r0, [r5, #0]
90016c28:	bd70      	pop	{r4, r5, r6, pc}

90016c2a <_ZN8touchgfx10TiledImage10getXOffsetEv>:
90016c2a:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
90016c2e:	4770      	bx	lr

90016c30 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
90016c30:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
90016c34:	4770      	bx	lr

90016c36 <_ZN8touchgfx10TiledImageD1Ev>:
90016c36:	4770      	bx	lr

90016c38 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
90016c38:	b510      	push	{r4, lr}
90016c3a:	4604      	mov	r4, r0
90016c3c:	f000 fc18 	bl	90017470 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90016c40:	6823      	ldr	r3, [r4, #0]
90016c42:	4620      	mov	r0, r4
90016c44:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
90016c48:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
90016c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90016c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90016c52:	4718      	bx	r3

90016c54 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
90016c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90016c56:	f100 0626 	add.w	r6, r0, #38	; 0x26
90016c5a:	4605      	mov	r5, r0
90016c5c:	8541      	strh	r1, [r0, #42]	; 0x2a
90016c5e:	4630      	mov	r0, r6
90016c60:	f005 fbe8 	bl	9001c434 <_ZNK8touchgfx6Bitmap8getWidthEv>
90016c64:	b1a0      	cbz	r0, 90016c90 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
90016c66:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
90016c6a:	4630      	mov	r0, r6
90016c6c:	f005 fbe2 	bl	9001c434 <_ZNK8touchgfx6Bitmap8getWidthEv>
90016c70:	fb97 f4f0 	sdiv	r4, r7, r0
90016c74:	fb04 7410 	mls	r4, r4, r0, r7
90016c78:	4630      	mov	r0, r6
90016c7a:	f005 fbdb 	bl	9001c434 <_ZNK8touchgfx6Bitmap8getWidthEv>
90016c7e:	4404      	add	r4, r0
90016c80:	4630      	mov	r0, r6
90016c82:	f005 fbd7 	bl	9001c434 <_ZNK8touchgfx6Bitmap8getWidthEv>
90016c86:	fb94 f3f0 	sdiv	r3, r4, r0
90016c8a:	fb03 4010 	mls	r0, r3, r0, r4
90016c8e:	8568      	strh	r0, [r5, #42]	; 0x2a
90016c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

90016c92 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
90016c92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90016c94:	f100 0626 	add.w	r6, r0, #38	; 0x26
90016c98:	4605      	mov	r5, r0
90016c9a:	8581      	strh	r1, [r0, #44]	; 0x2c
90016c9c:	4630      	mov	r0, r6
90016c9e:	f005 fc03 	bl	9001c4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
90016ca2:	b1a0      	cbz	r0, 90016cce <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
90016ca4:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
90016ca8:	4630      	mov	r0, r6
90016caa:	f005 fbfd 	bl	9001c4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
90016cae:	fb97 f4f0 	sdiv	r4, r7, r0
90016cb2:	fb04 7410 	mls	r4, r4, r0, r7
90016cb6:	4630      	mov	r0, r6
90016cb8:	f005 fbf6 	bl	9001c4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
90016cbc:	4404      	add	r4, r0
90016cbe:	4630      	mov	r0, r6
90016cc0:	f005 fbf2 	bl	9001c4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
90016cc4:	fb94 f3f0 	sdiv	r3, r4, r0
90016cc8:	fb03 4010 	mls	r0, r3, r0, r4
90016ccc:	85a8      	strh	r0, [r5, #44]	; 0x2c
90016cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

90016cd0 <_ZN8touchgfx10TiledImageD0Ev>:
90016cd0:	b510      	push	{r4, lr}
90016cd2:	4604      	mov	r4, r0
90016cd4:	2130      	movs	r1, #48	; 0x30
90016cd6:	f011 f9d1 	bl	9002807c <_ZdlPvj>
90016cda:	4620      	mov	r0, r4
90016cdc:	bd10      	pop	{r4, pc}
	...

90016ce0 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
90016ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016ce4:	f100 0b26 	add.w	fp, r0, #38	; 0x26
90016ce8:	b093      	sub	sp, #76	; 0x4c
90016cea:	4607      	mov	r7, r0
90016cec:	460e      	mov	r6, r1
90016cee:	4658      	mov	r0, fp
90016cf0:	f005 fba0 	bl	9001c434 <_ZNK8touchgfx6Bitmap8getWidthEv>
90016cf4:	4605      	mov	r5, r0
90016cf6:	4658      	mov	r0, fp
90016cf8:	f005 fbd6 	bl	9001c4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
90016cfc:	4680      	mov	r8, r0
90016cfe:	2d00      	cmp	r5, #0
90016d00:	f000 80c5 	beq.w	90016e8e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
90016d04:	2800      	cmp	r0, #0
90016d06:	f000 80c2 	beq.w	90016e8e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
90016d0a:	2300      	movs	r3, #0
90016d0c:	a90e      	add	r1, sp, #56	; 0x38
90016d0e:	4638      	mov	r0, r7
90016d10:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
90016d14:	683b      	ldr	r3, [r7, #0]
90016d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90016d18:	4798      	blx	r3
90016d1a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
90016d1e:	f9b6 3000 	ldrsh.w	r3, [r6]
90016d22:	88b1      	ldrh	r1, [r6, #4]
90016d24:	189c      	adds	r4, r3, r2
90016d26:	440b      	add	r3, r1
90016d28:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
90016d2c:	fa02 f383 	sxtah	r3, r2, r3
90016d30:	3b01      	subs	r3, #1
90016d32:	fb93 f3f5 	sdiv	r3, r3, r5
90016d36:	fb94 f4f5 	sdiv	r4, r4, r5
90016d3a:	fb13 f305 	smulbb	r3, r3, r5
90016d3e:	fb14 f405 	smulbb	r4, r4, r5
90016d42:	b21b      	sxth	r3, r3
90016d44:	1aa4      	subs	r4, r4, r2
90016d46:	930b      	str	r3, [sp, #44]	; 0x2c
90016d48:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
90016d4c:	b2a4      	uxth	r4, r4
90016d4e:	185a      	adds	r2, r3, r1
90016d50:	fb92 f2f8 	sdiv	r2, r2, r8
90016d54:	fb12 f208 	smulbb	r2, r2, r8
90016d58:	1a52      	subs	r2, r2, r1
90016d5a:	b212      	sxth	r2, r2
90016d5c:	920c      	str	r2, [sp, #48]	; 0x30
90016d5e:	88f2      	ldrh	r2, [r6, #6]
90016d60:	4413      	add	r3, r2
90016d62:	fa01 f383 	sxtah	r3, r1, r3
90016d66:	3b01      	subs	r3, #1
90016d68:	fb93 f3f8 	sdiv	r3, r3, r8
90016d6c:	fb13 f308 	smulbb	r3, r3, r8
90016d70:	b21b      	sxth	r3, r3
90016d72:	930d      	str	r3, [sp, #52]	; 0x34
90016d74:	1963      	adds	r3, r4, r5
90016d76:	fa1f fa83 	uxth.w	sl, r3
90016d7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90016d7c:	b223      	sxth	r3, r4
90016d7e:	4293      	cmp	r3, r2
90016d80:	9305      	str	r3, [sp, #20]
90016d82:	f300 8084 	bgt.w	90016e8e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
90016d86:	fa0f f38a 	sxth.w	r3, sl
90016d8a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
90016d8e:	930a      	str	r3, [sp, #40]	; 0x28
90016d90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90016d92:	4599      	cmp	r9, r3
90016d94:	dd04      	ble.n	90016da0 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
90016d96:	442c      	add	r4, r5
90016d98:	eb05 030a 	add.w	r3, r5, sl
90016d9c:	b2a4      	uxth	r4, r4
90016d9e:	e7ea      	b.n	90016d76 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
90016da0:	f9b6 c000 	ldrsh.w	ip, [r6]
90016da4:	88b2      	ldrh	r2, [r6, #4]
90016da6:	4462      	add	r2, ip
90016da8:	b292      	uxth	r2, r2
90016daa:	b213      	sxth	r3, r2
90016dac:	9308      	str	r3, [sp, #32]
90016dae:	fa1f f389 	uxth.w	r3, r9
90016db2:	eb08 0103 	add.w	r1, r8, r3
90016db6:	9306      	str	r3, [sp, #24]
90016db8:	b289      	uxth	r1, r1
90016dba:	b208      	sxth	r0, r1
90016dbc:	9007      	str	r0, [sp, #28]
90016dbe:	9805      	ldr	r0, [sp, #20]
90016dc0:	4603      	mov	r3, r0
90016dc2:	9808      	ldr	r0, [sp, #32]
90016dc4:	4283      	cmp	r3, r0
90016dc6:	da5e      	bge.n	90016e86 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
90016dc8:	980a      	ldr	r0, [sp, #40]	; 0x28
90016dca:	4584      	cmp	ip, r0
90016dcc:	da5b      	bge.n	90016e86 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
90016dce:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
90016dd2:	f8b6 e006 	ldrh.w	lr, [r6, #6]
90016dd6:	4486      	add	lr, r0
90016dd8:	fa1f fe8e 	uxth.w	lr, lr
90016ddc:	fa0f f38e 	sxth.w	r3, lr
90016de0:	4599      	cmp	r9, r3
90016de2:	9309      	str	r3, [sp, #36]	; 0x24
90016de4:	da4f      	bge.n	90016e86 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
90016de6:	9b07      	ldr	r3, [sp, #28]
90016de8:	4298      	cmp	r0, r3
90016dea:	da4c      	bge.n	90016e86 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
90016dec:	9b05      	ldr	r3, [sp, #20]
90016dee:	459c      	cmp	ip, r3
90016df0:	bfb8      	it	lt
90016df2:	469c      	movlt	ip, r3
90016df4:	4548      	cmp	r0, r9
90016df6:	9b08      	ldr	r3, [sp, #32]
90016df8:	bfb8      	it	lt
90016dfa:	4648      	movlt	r0, r9
90016dfc:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
90016e00:	4699      	mov	r9, r3
90016e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90016e04:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
90016e08:	4599      	cmp	r9, r3
90016e0a:	bfc8      	it	gt
90016e0c:	4652      	movgt	r2, sl
90016e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
90016e10:	eba2 020c 	sub.w	r2, r2, ip
90016e14:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
90016e18:	9a07      	ldr	r2, [sp, #28]
90016e1a:	4293      	cmp	r3, r2
90016e1c:	bfd8      	it	le
90016e1e:	4671      	movle	r1, lr
90016e20:	1a09      	subs	r1, r1, r0
90016e22:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
90016e26:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
90016e2a:	9b06      	ldr	r3, [sp, #24]
90016e2c:	1b12      	subs	r2, r2, r4
90016e2e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
90016e32:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
90016e36:	1ad2      	subs	r2, r2, r3
90016e38:	4b16      	ldr	r3, [pc, #88]	; (90016e94 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
90016e3a:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
90016e3e:	681a      	ldr	r2, [r3, #0]
90016e40:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
90016e44:	b109      	cbz	r1, 90016e4a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
90016e46:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
90016e48:	b900      	cbnz	r0, 90016e4c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
90016e4a:	6890      	ldr	r0, [r2, #8]
90016e4c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
90016e50:	f04f 0c01 	mov.w	ip, #1
90016e54:	9b06      	ldr	r3, [sp, #24]
90016e56:	6801      	ldr	r1, [r0, #0]
90016e58:	4413      	add	r3, r2
90016e5a:	f8cd c008 	str.w	ip, [sp, #8]
90016e5e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
90016e62:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
90016e66:	b21b      	sxth	r3, r3
90016e68:	4422      	add	r2, r4
90016e6a:	f8cd c004 	str.w	ip, [sp, #4]
90016e6e:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
90016e72:	b212      	sxth	r2, r2
90016e74:	f8cd c000 	str.w	ip, [sp]
90016e78:	f8d1 9008 	ldr.w	r9, [r1, #8]
90016e7c:	4659      	mov	r1, fp
90016e7e:	47c8      	blx	r9
90016e80:	f8dd 901c 	ldr.w	r9, [sp, #28]
90016e84:	e784      	b.n	90016d90 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
90016e86:	2300      	movs	r3, #0
90016e88:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
90016e8c:	e7cb      	b.n	90016e26 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
90016e8e:	b013      	add	sp, #76	; 0x4c
90016e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90016e94:	20026cdc 	.word	0x20026cdc

90016e98 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
90016e98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016e9c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
90016ea0:	4606      	mov	r6, r0
90016ea2:	4689      	mov	r9, r1
90016ea4:	2bff      	cmp	r3, #255	; 0xff
90016ea6:	d008      	beq.n	90016eba <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
90016ea8:	2300      	movs	r3, #0
90016eaa:	8003      	strh	r3, [r0, #0]
90016eac:	8043      	strh	r3, [r0, #2]
90016eae:	8083      	strh	r3, [r0, #4]
90016eb0:	4630      	mov	r0, r6
90016eb2:	80f3      	strh	r3, [r6, #6]
90016eb4:	b003      	add	sp, #12
90016eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90016eba:	f101 0b26 	add.w	fp, r1, #38	; 0x26
90016ebe:	4668      	mov	r0, sp
90016ec0:	4659      	mov	r1, fp
90016ec2:	f005 fb2b 	bl	9001c51c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
90016ec6:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
90016eca:	4658      	mov	r0, fp
90016ecc:	f9bd 7000 	ldrsh.w	r7, [sp]
90016ed0:	f9bd a002 	ldrsh.w	sl, [sp, #2]
90016ed4:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
90016ed8:	f005 faac 	bl	9001c434 <_ZNK8touchgfx6Bitmap8getWidthEv>
90016edc:	4284      	cmp	r4, r0
90016ede:	d10d      	bne.n	90016efc <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
90016ee0:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
90016ee4:	4658      	mov	r0, fp
90016ee6:	f005 fadf 	bl	9001c4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
90016eea:	4580      	cmp	r8, r0
90016eec:	d12a      	bne.n	90016f44 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
90016eee:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
90016ef2:	8037      	strh	r7, [r6, #0]
90016ef4:	f8a6 a002 	strh.w	sl, [r6, #2]
90016ef8:	80b5      	strh	r5, [r6, #4]
90016efa:	e7d9      	b.n	90016eb0 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
90016efc:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
90016f00:	4658      	mov	r0, fp
90016f02:	f005 fa97 	bl	9001c434 <_ZNK8touchgfx6Bitmap8getWidthEv>
90016f06:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
90016f0a:	1b7f      	subs	r7, r7, r5
90016f0c:	b2a3      	uxth	r3, r4
90016f0e:	b2bd      	uxth	r5, r7
90016f10:	b22f      	sxth	r7, r5
90016f12:	4428      	add	r0, r5
90016f14:	2f00      	cmp	r7, #0
90016f16:	b280      	uxth	r0, r0
90016f18:	bfb8      	it	lt
90016f1a:	18ed      	addlt	r5, r5, r3
90016f1c:	4403      	add	r3, r0
90016f1e:	bfac      	ite	ge
90016f20:	4625      	movge	r5, r4
90016f22:	2700      	movlt	r7, #0
90016f24:	b29b      	uxth	r3, r3
90016f26:	bfb8      	it	lt
90016f28:	b22d      	sxthlt	r5, r5
90016f2a:	b219      	sxth	r1, r3
90016f2c:	bfb8      	it	lt
90016f2e:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
90016f32:	4291      	cmp	r1, r2
90016f34:	bfc4      	itt	gt
90016f36:	1a9c      	subgt	r4, r3, r2
90016f38:	b224      	sxthgt	r4, r4
90016f3a:	42ac      	cmp	r4, r5
90016f3c:	bfc4      	itt	gt
90016f3e:	b207      	sxthgt	r7, r0
90016f40:	4625      	movgt	r5, r4
90016f42:	e7cf      	b.n	90016ee4 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
90016f44:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
90016f48:	4658      	mov	r0, fp
90016f4a:	f005 faad 	bl	9001c4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
90016f4e:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
90016f52:	ebaa 0404 	sub.w	r4, sl, r4
90016f56:	fa1f f288 	uxth.w	r2, r8
90016f5a:	b2a4      	uxth	r4, r4
90016f5c:	fa0f fa84 	sxth.w	sl, r4
90016f60:	4420      	add	r0, r4
90016f62:	f1ba 0f00 	cmp.w	sl, #0
90016f66:	b280      	uxth	r0, r0
90016f68:	bfb8      	it	lt
90016f6a:	18a3      	addlt	r3, r4, r2
90016f6c:	4402      	add	r2, r0
90016f6e:	bfac      	ite	ge
90016f70:	4643      	movge	r3, r8
90016f72:	f04f 0a00 	movlt.w	sl, #0
90016f76:	b292      	uxth	r2, r2
90016f78:	bfb8      	it	lt
90016f7a:	b21b      	sxthlt	r3, r3
90016f7c:	b214      	sxth	r4, r2
90016f7e:	bfb8      	it	lt
90016f80:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
90016f84:	428c      	cmp	r4, r1
90016f86:	bfc4      	itt	gt
90016f88:	eba2 0801 	subgt.w	r8, r2, r1
90016f8c:	fa0f f888 	sxthgt.w	r8, r8
90016f90:	4598      	cmp	r8, r3
90016f92:	bfc4      	itt	gt
90016f94:	fa0f fa80 	sxthgt.w	sl, r0
90016f98:	4643      	movgt	r3, r8
90016f9a:	e7aa      	b.n	90016ef2 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

90016f9c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
90016f9c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
90016fa0:	4770      	bx	lr

90016fa2 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
90016fa2:	b570      	push	{r4, r5, r6, lr}
90016fa4:	880b      	ldrh	r3, [r1, #0]
90016fa6:	4605      	mov	r5, r0
90016fa8:	4604      	mov	r4, r0
90016faa:	85c3      	strh	r3, [r0, #46]	; 0x2e
90016fac:	8813      	ldrh	r3, [r2, #0]
90016fae:	f825 3f30 	strh.w	r3, [r5, #48]!
90016fb2:	4628      	mov	r0, r5
90016fb4:	f005 fa3e 	bl	9001c434 <_ZNK8touchgfx6Bitmap8getWidthEv>
90016fb8:	4606      	mov	r6, r0
90016fba:	4628      	mov	r0, r5
90016fbc:	f005 fa74 	bl	9001c4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
90016fc0:	6823      	ldr	r3, [r4, #0]
90016fc2:	4605      	mov	r5, r0
90016fc4:	b231      	sxth	r1, r6
90016fc6:	4620      	mov	r0, r4
90016fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90016fca:	4798      	blx	r3
90016fcc:	6823      	ldr	r3, [r4, #0]
90016fce:	b229      	sxth	r1, r5
90016fd0:	4620      	mov	r0, r4
90016fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90016fd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90016fd8:	4718      	bx	r3

90016fda <_ZN8touchgfx14AbstractButton13executeActionEv>:
90016fda:	b510      	push	{r4, lr}
90016fdc:	4604      	mov	r4, r0
90016fde:	6a80      	ldr	r0, [r0, #40]	; 0x28
90016fe0:	b150      	cbz	r0, 90016ff8 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
90016fe2:	6803      	ldr	r3, [r0, #0]
90016fe4:	68db      	ldr	r3, [r3, #12]
90016fe6:	4798      	blx	r3
90016fe8:	b130      	cbz	r0, 90016ff8 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
90016fea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
90016fec:	4621      	mov	r1, r4
90016fee:	6803      	ldr	r3, [r0, #0]
90016ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90016ff4:	689b      	ldr	r3, [r3, #8]
90016ff6:	4718      	bx	r3
90016ff8:	bd10      	pop	{r4, pc}

90016ffa <_ZNK8touchgfx6Button12getSolidRectEv>:
90016ffa:	b510      	push	{r4, lr}
90016ffc:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
90017000:	4604      	mov	r4, r0
90017002:	2bff      	cmp	r3, #255	; 0xff
90017004:	d006      	beq.n	90017014 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
90017006:	2300      	movs	r3, #0
90017008:	8003      	strh	r3, [r0, #0]
9001700a:	8043      	strh	r3, [r0, #2]
9001700c:	8083      	strh	r3, [r0, #4]
9001700e:	80c3      	strh	r3, [r0, #6]
90017010:	4620      	mov	r0, r4
90017012:	bd10      	pop	{r4, pc}
90017014:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
90017018:	b11b      	cbz	r3, 90017022 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
9001701a:	3130      	adds	r1, #48	; 0x30
9001701c:	f005 fa7e 	bl	9001c51c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
90017020:	e7f6      	b.n	90017010 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
90017022:	312e      	adds	r1, #46	; 0x2e
90017024:	e7fa      	b.n	9001701c <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

90017028 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
90017028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001702c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90017030:	b08a      	sub	sp, #40	; 0x28
90017032:	4604      	mov	r4, r0
90017034:	4688      	mov	r8, r1
90017036:	2b00      	cmp	r3, #0
90017038:	d044      	beq.n	900170c4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
9001703a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
9001703c:	a805      	add	r0, sp, #20
9001703e:	f8ad 3014 	strh.w	r3, [sp, #20]
90017042:	f005 f9f7 	bl	9001c434 <_ZNK8touchgfx6Bitmap8getWidthEv>
90017046:	4605      	mov	r5, r0
90017048:	b206      	sxth	r6, r0
9001704a:	a805      	add	r0, sp, #20
9001704c:	f005 fa2c 	bl	9001c4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
90017050:	f9b8 2000 	ldrsh.w	r2, [r8]
90017054:	f8b8 7004 	ldrh.w	r7, [r8, #4]
90017058:	2300      	movs	r3, #0
9001705a:	fa0f fc80 	sxth.w	ip, r0
9001705e:	4417      	add	r7, r2
90017060:	9306      	str	r3, [sp, #24]
90017062:	b2bf      	uxth	r7, r7
90017064:	fa0f fe87 	sxth.w	lr, r7
90017068:	459e      	cmp	lr, r3
9001706a:	dd2d      	ble.n	900170c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
9001706c:	4296      	cmp	r6, r2
9001706e:	dd2b      	ble.n	900170c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
90017070:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
90017074:	f8b8 1006 	ldrh.w	r1, [r8, #6]
90017078:	4419      	add	r1, r3
9001707a:	b289      	uxth	r1, r1
9001707c:	fa0f f881 	sxth.w	r8, r1
90017080:	f1b8 0f00 	cmp.w	r8, #0
90017084:	dd20      	ble.n	900170c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
90017086:	459c      	cmp	ip, r3
90017088:	dd1e      	ble.n	900170c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
9001708a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
9001708e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90017092:	4576      	cmp	r6, lr
90017094:	bfa8      	it	ge
90017096:	463d      	movge	r5, r7
90017098:	45c4      	cmp	ip, r8
9001709a:	bfa8      	it	ge
9001709c:	4608      	movge	r0, r1
9001709e:	f8ad 2018 	strh.w	r2, [sp, #24]
900170a2:	1aad      	subs	r5, r5, r2
900170a4:	1ac0      	subs	r0, r0, r3
900170a6:	f8ad 301a 	strh.w	r3, [sp, #26]
900170aa:	f8ad 501c 	strh.w	r5, [sp, #28]
900170ae:	f8ad 001e 	strh.w	r0, [sp, #30]
900170b2:	4b1f      	ldr	r3, [pc, #124]	; (90017130 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
900170b4:	681b      	ldr	r3, [r3, #0]
900170b6:	b953      	cbnz	r3, 900170ce <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
900170b8:	4b1e      	ldr	r3, [pc, #120]	; (90017134 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
900170ba:	218b      	movs	r1, #139	; 0x8b
900170bc:	4a1e      	ldr	r2, [pc, #120]	; (90017138 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
900170be:	481f      	ldr	r0, [pc, #124]	; (9001713c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
900170c0:	f011 fdb8 	bl	90028c34 <__assert_func>
900170c4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
900170c6:	e7b9      	b.n	9001703c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
900170c8:	2300      	movs	r3, #0
900170ca:	9307      	str	r3, [sp, #28]
900170cc:	e7f1      	b.n	900170b2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
900170ce:	f8bd 2014 	ldrh.w	r2, [sp, #20]
900170d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
900170d6:	429a      	cmp	r2, r3
900170d8:	d026      	beq.n	90017128 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
900170da:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
900170de:	2b00      	cmp	r3, #0
900170e0:	dd22      	ble.n	90017128 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
900170e2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
900170e6:	2b00      	cmp	r3, #0
900170e8:	dd1e      	ble.n	90017128 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
900170ea:	2300      	movs	r3, #0
900170ec:	a908      	add	r1, sp, #32
900170ee:	4620      	mov	r0, r4
900170f0:	e9cd 3308 	strd	r3, r3, [sp, #32]
900170f4:	6823      	ldr	r3, [r4, #0]
900170f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900170f8:	4798      	blx	r3
900170fa:	4b11      	ldr	r3, [pc, #68]	; (90017140 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
900170fc:	681b      	ldr	r3, [r3, #0]
900170fe:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90017102:	b10a      	cbz	r2, 90017108 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
90017104:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90017106:	b900      	cbnz	r0, 9001710a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
90017108:	6898      	ldr	r0, [r3, #8]
9001710a:	2501      	movs	r5, #1
9001710c:	6801      	ldr	r1, [r0, #0]
9001710e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
90017112:	9502      	str	r5, [sp, #8]
90017114:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
90017118:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
9001711c:	9401      	str	r4, [sp, #4]
9001711e:	ac06      	add	r4, sp, #24
90017120:	9400      	str	r4, [sp, #0]
90017122:	688c      	ldr	r4, [r1, #8]
90017124:	a905      	add	r1, sp, #20
90017126:	47a0      	blx	r4
90017128:	b00a      	add	sp, #40	; 0x28
9001712a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001712e:	bf00      	nop
90017130:	20026d64 	.word	0x20026d64
90017134:	9002eb0e 	.word	0x9002eb0e
90017138:	9002f6bc 	.word	0x9002f6bc
9001713c:	9002eb4a 	.word	0x9002eb4a
90017140:	20026cdc 	.word	0x20026cdc

90017144 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
90017144:	4770      	bx	lr
	...

90017148 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
90017148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
9001714a:	f64f 73ff 	movw	r3, #65535	; 0xffff
9001714e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
90017150:	4606      	mov	r6, r0
90017152:	4299      	cmp	r1, r3
90017154:	d02a      	beq.n	900171ac <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
90017156:	4b16      	ldr	r3, [pc, #88]	; (900171b0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
90017158:	681b      	ldr	r3, [r3, #0]
9001715a:	b92b      	cbnz	r3, 90017168 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
9001715c:	4b15      	ldr	r3, [pc, #84]	; (900171b4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
9001715e:	21b1      	movs	r1, #177	; 0xb1
90017160:	4a15      	ldr	r2, [pc, #84]	; (900171b8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
90017162:	4816      	ldr	r0, [pc, #88]	; (900171bc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
90017164:	f011 fd66 	bl	90028c34 <__assert_func>
90017168:	4a15      	ldr	r2, [pc, #84]	; (900171c0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
9001716a:	8812      	ldrh	r2, [r2, #0]
9001716c:	428a      	cmp	r2, r1
9001716e:	d803      	bhi.n	90017178 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
90017170:	4b14      	ldr	r3, [pc, #80]	; (900171c4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
90017172:	21b2      	movs	r1, #178	; 0xb2
90017174:	4a10      	ldr	r2, [pc, #64]	; (900171b8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
90017176:	e7f4      	b.n	90017162 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
90017178:	eb03 0241 	add.w	r2, r3, r1, lsl #1
9001717c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
90017180:	4b11      	ldr	r3, [pc, #68]	; (900171c8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
90017182:	7854      	ldrb	r4, [r2, #1]
90017184:	681b      	ldr	r3, [r3, #0]
90017186:	f3c4 0481 	ubfx	r4, r4, #2, #2
9001718a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
9001718e:	682b      	ldr	r3, [r5, #0]
90017190:	69df      	ldr	r7, [r3, #28]
90017192:	4b0e      	ldr	r3, [pc, #56]	; (900171cc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
90017194:	6818      	ldr	r0, [r3, #0]
90017196:	f7ec fa37 	bl	90003608 <_ZNK8touchgfx5Texts7getTextEt>
9001719a:	2300      	movs	r3, #0
9001719c:	4602      	mov	r2, r0
9001719e:	4621      	mov	r1, r4
900171a0:	9300      	str	r3, [sp, #0]
900171a2:	4628      	mov	r0, r5
900171a4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
900171a6:	47b8      	blx	r7
900171a8:	b003      	add	sp, #12
900171aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
900171ac:	2000      	movs	r0, #0
900171ae:	e7fb      	b.n	900171a8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
900171b0:	20026d2c 	.word	0x20026d2c
900171b4:	9002ad50 	.word	0x9002ad50
900171b8:	9002f768 	.word	0x9002f768
900171bc:	9002adde 	.word	0x9002adde
900171c0:	20026d30 	.word	0x20026d30
900171c4:	9002ae07 	.word	0x9002ae07
900171c8:	20026d34 	.word	0x20026d34
900171cc:	20026d38 	.word	0x20026d38

900171d0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
900171d0:	b570      	push	{r4, r5, r6, lr}
900171d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
900171d6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
900171d8:	4604      	mov	r4, r0
900171da:	4299      	cmp	r1, r3
900171dc:	d01e      	beq.n	9001721c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
900171de:	6803      	ldr	r3, [r0, #0]
900171e0:	6edd      	ldr	r5, [r3, #108]	; 0x6c
900171e2:	4b0f      	ldr	r3, [pc, #60]	; (90017220 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
900171e4:	681b      	ldr	r3, [r3, #0]
900171e6:	b92b      	cbnz	r3, 900171f4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
900171e8:	4b0e      	ldr	r3, [pc, #56]	; (90017224 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
900171ea:	21b1      	movs	r1, #177	; 0xb1
900171ec:	4a0e      	ldr	r2, [pc, #56]	; (90017228 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
900171ee:	480f      	ldr	r0, [pc, #60]	; (9001722c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
900171f0:	f011 fd20 	bl	90028c34 <__assert_func>
900171f4:	4b0e      	ldr	r3, [pc, #56]	; (90017230 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
900171f6:	881b      	ldrh	r3, [r3, #0]
900171f8:	428b      	cmp	r3, r1
900171fa:	d803      	bhi.n	90017204 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
900171fc:	4b0d      	ldr	r3, [pc, #52]	; (90017234 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
900171fe:	21b2      	movs	r1, #178	; 0xb2
90017200:	4a09      	ldr	r2, [pc, #36]	; (90017228 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
90017202:	e7f4      	b.n	900171ee <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
90017204:	4b0c      	ldr	r3, [pc, #48]	; (90017238 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
90017206:	6818      	ldr	r0, [r3, #0]
90017208:	f7ec f9fe 	bl	90003608 <_ZNK8touchgfx5Texts7getTextEt>
9001720c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9001720e:	4601      	mov	r1, r0
90017210:	46ac      	mov	ip, r5
90017212:	4620      	mov	r0, r4
90017214:	2300      	movs	r3, #0
90017216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001721a:	4760      	bx	ip
9001721c:	2000      	movs	r0, #0
9001721e:	bd70      	pop	{r4, r5, r6, pc}
90017220:	20026d2c 	.word	0x20026d2c
90017224:	9002ad50 	.word	0x9002ad50
90017228:	9002f768 	.word	0x9002f768
9001722c:	9002adde 	.word	0x9002adde
90017230:	20026d30 	.word	0x20026d30
90017234:	9002ae07 	.word	0x9002ae07
90017238:	20026d38 	.word	0x20026d38

9001723c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
9001723c:	b510      	push	{r4, lr}
9001723e:	4604      	mov	r4, r0
90017240:	2140      	movs	r1, #64	; 0x40
90017242:	f010 ff1b 	bl	9002807c <_ZdlPvj>
90017246:	4620      	mov	r0, r4
90017248:	bd10      	pop	{r4, pc}
	...

9001724c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
9001724c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90017250:	f64f 72ff 	movw	r2, #65535	; 0xffff
90017254:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
90017256:	b08c      	sub	sp, #48	; 0x30
90017258:	4604      	mov	r4, r0
9001725a:	4293      	cmp	r3, r2
9001725c:	460e      	mov	r6, r1
9001725e:	d05d      	beq.n	9001731c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
90017260:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 90017340 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
90017264:	f8d8 2000 	ldr.w	r2, [r8]
90017268:	b92a      	cbnz	r2, 90017276 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
9001726a:	4b2e      	ldr	r3, [pc, #184]	; (90017324 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
9001726c:	21b1      	movs	r1, #177	; 0xb1
9001726e:	4a2e      	ldr	r2, [pc, #184]	; (90017328 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
90017270:	482e      	ldr	r0, [pc, #184]	; (9001732c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
90017272:	f011 fcdf 	bl	90028c34 <__assert_func>
90017276:	4f2e      	ldr	r7, [pc, #184]	; (90017330 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
90017278:	8839      	ldrh	r1, [r7, #0]
9001727a:	4299      	cmp	r1, r3
9001727c:	d803      	bhi.n	90017286 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
9001727e:	4b2d      	ldr	r3, [pc, #180]	; (90017334 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
90017280:	21b2      	movs	r1, #178	; 0xb2
90017282:	4a29      	ldr	r2, [pc, #164]	; (90017328 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
90017284:	e7f4      	b.n	90017270 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
90017286:	eb02 0143 	add.w	r1, r2, r3, lsl #1
9001728a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
9001728e:	4b2a      	ldr	r3, [pc, #168]	; (90017338 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
90017290:	681b      	ldr	r3, [r3, #0]
90017292:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
90017296:	2a00      	cmp	r2, #0
90017298:	d040      	beq.n	9001731c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
9001729a:	784b      	ldrb	r3, [r1, #1]
9001729c:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
900172a0:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
900172a4:	f3c3 0901 	ubfx	r9, r3, #0, #2
900172a8:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
900172ac:	f3c3 0381 	ubfx	r3, r3, #2, #2
900172b0:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
900172b4:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
900172b8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
900172bc:	ad05      	add	r5, sp, #20
900172be:	6b00      	ldr	r0, [r0, #48]	; 0x30
900172c0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
900172c4:	9207      	str	r2, [sp, #28]
900172c6:	f88d 9020 	strb.w	r9, [sp, #32]
900172ca:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
900172ce:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
900172d2:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
900172d6:	9009      	str	r0, [sp, #36]	; 0x24
900172d8:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
900172dc:	f7fd ff88 	bl	900151f0 <_ZN8touchgfx3HAL3lcdEv>
900172e0:	4621      	mov	r1, r4
900172e2:	4681      	mov	r9, r0
900172e4:	4628      	mov	r0, r5
900172e6:	f002 feb3 	bl	9001a050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900172ea:	f8d8 3000 	ldr.w	r3, [r8]
900172ee:	2b00      	cmp	r3, #0
900172f0:	d0bb      	beq.n	9001726a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
900172f2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
900172f4:	883b      	ldrh	r3, [r7, #0]
900172f6:	428b      	cmp	r3, r1
900172f8:	d9c1      	bls.n	9001727e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
900172fa:	4b10      	ldr	r3, [pc, #64]	; (9001733c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
900172fc:	6818      	ldr	r0, [r3, #0]
900172fe:	f7ec f983 	bl	90003608 <_ZNK8touchgfx5Texts7getTextEt>
90017302:	2300      	movs	r3, #0
90017304:	9303      	str	r3, [sp, #12]
90017306:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90017308:	e9cd 0301 	strd	r0, r3, [sp, #4]
9001730c:	ab07      	add	r3, sp, #28
9001730e:	4648      	mov	r0, r9
90017310:	9300      	str	r3, [sp, #0]
90017312:	4633      	mov	r3, r6
90017314:	e895 0006 	ldmia.w	r5, {r1, r2}
90017318:	f7ec f928 	bl	9000356c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
9001731c:	b00c      	add	sp, #48	; 0x30
9001731e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90017322:	bf00      	nop
90017324:	9002ad50 	.word	0x9002ad50
90017328:	9002f768 	.word	0x9002f768
9001732c:	9002adde 	.word	0x9002adde
90017330:	20026d30 	.word	0x20026d30
90017334:	9002ae07 	.word	0x9002ae07
90017338:	20026d34 	.word	0x20026d34
9001733c:	20026d38 	.word	0x20026d38
90017340:	20026d2c 	.word	0x20026d2c

90017344 <_ZN8touchgfx13BoxWithBorderD1Ev>:
90017344:	4770      	bx	lr

90017346 <_ZN8touchgfx13BoxWithBorderD0Ev>:
90017346:	b510      	push	{r4, lr}
90017348:	4604      	mov	r4, r0
9001734a:	2134      	movs	r1, #52	; 0x34
9001734c:	f010 fe96 	bl	9002807c <_ZdlPvj>
90017350:	4620      	mov	r0, r4
90017352:	bd10      	pop	{r4, pc}

90017354 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
90017354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90017358:	8e03      	ldrh	r3, [r0, #48]	; 0x30
9001735a:	4604      	mov	r4, r0
9001735c:	460e      	mov	r6, r1
9001735e:	b08e      	sub	sp, #56	; 0x38
90017360:	b218      	sxth	r0, r3
90017362:	8921      	ldrh	r1, [r4, #8]
90017364:	005b      	lsls	r3, r3, #1
90017366:	8962      	ldrh	r2, [r4, #10]
90017368:	f8ad 0000 	strh.w	r0, [sp]
9001736c:	b29b      	uxth	r3, r3
9001736e:	f8ad 0002 	strh.w	r0, [sp, #2]
90017372:	1ac9      	subs	r1, r1, r3
90017374:	1ad3      	subs	r3, r2, r3
90017376:	b209      	sxth	r1, r1
90017378:	b21b      	sxth	r3, r3
9001737a:	2900      	cmp	r1, #0
9001737c:	f8ad 1004 	strh.w	r1, [sp, #4]
90017380:	f8ad 3006 	strh.w	r3, [sp, #6]
90017384:	dd5e      	ble.n	90017444 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
90017386:	2b00      	cmp	r3, #0
90017388:	dd5c      	ble.n	90017444 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
9001738a:	6830      	ldr	r0, [r6, #0]
9001738c:	ab02      	add	r3, sp, #8
9001738e:	6871      	ldr	r1, [r6, #4]
90017390:	c303      	stmia	r3!, {r0, r1}
90017392:	4669      	mov	r1, sp
90017394:	a802      	add	r0, sp, #8
90017396:	f7fc ffe1 	bl	9001435c <_ZN8touchgfx4RectaNERKS0_>
9001739a:	4620      	mov	r0, r4
9001739c:	a902      	add	r1, sp, #8
9001739e:	f7ff fc03 	bl	90016ba8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
900173a2:	8e20      	ldrh	r0, [r4, #48]	; 0x30
900173a4:	2800      	cmp	r0, #0
900173a6:	d05f      	beq.n	90017468 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
900173a8:	8963      	ldrh	r3, [r4, #10]
900173aa:	b202      	sxth	r2, r0
900173ac:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
900173b0:	2500      	movs	r5, #0
900173b2:	1a1f      	subs	r7, r3, r0
900173b4:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
900173b8:	f8ad 101c 	strh.w	r1, [sp, #28]
900173bc:	b21b      	sxth	r3, r3
900173be:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
900173c2:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
900173c6:	af04      	add	r7, sp, #16
900173c8:	1a09      	subs	r1, r1, r0
900173ca:	9506      	str	r5, [sp, #24]
900173cc:	f8ad 201e 	strh.w	r2, [sp, #30]
900173d0:	f8ad 5020 	strh.w	r5, [sp, #32]
900173d4:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
900173d8:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
900173dc:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
900173e0:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
900173e4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
900173e8:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
900173ec:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
900173f0:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
900173f4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
900173f8:	ab06      	add	r3, sp, #24
900173fa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
900173fe:	e893 0003 	ldmia.w	r3, {r0, r1}
90017402:	e887 0003 	stmia.w	r7, {r0, r1}
90017406:	4631      	mov	r1, r6
90017408:	4638      	mov	r0, r7
9001740a:	f7fc ffa7 	bl	9001435c <_ZN8touchgfx4RectaNERKS0_>
9001740e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
90017412:	2b00      	cmp	r3, #0
90017414:	dd12      	ble.n	9001743c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
90017416:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
9001741a:	2b00      	cmp	r3, #0
9001741c:	dd0e      	ble.n	9001743c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
9001741e:	6823      	ldr	r3, [r4, #0]
90017420:	4639      	mov	r1, r7
90017422:	4620      	mov	r0, r4
90017424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90017426:	4798      	blx	r3
90017428:	f7fd fee2 	bl	900151f0 <_ZN8touchgfx3HAL3lcdEv>
9001742c:	6803      	ldr	r3, [r0, #0]
9001742e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90017430:	4639      	mov	r1, r7
90017432:	f8d3 8018 	ldr.w	r8, [r3, #24]
90017436:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
9001743a:	47c0      	blx	r8
9001743c:	3501      	adds	r5, #1
9001743e:	2d04      	cmp	r5, #4
90017440:	d1da      	bne.n	900173f8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
90017442:	e011      	b.n	90017468 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
90017444:	6830      	ldr	r0, [r6, #0]
90017446:	ab06      	add	r3, sp, #24
90017448:	6871      	ldr	r1, [r6, #4]
9001744a:	c303      	stmia	r3!, {r0, r1}
9001744c:	6823      	ldr	r3, [r4, #0]
9001744e:	a906      	add	r1, sp, #24
90017450:	4620      	mov	r0, r4
90017452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90017454:	4798      	blx	r3
90017456:	f7fd fecb 	bl	900151f0 <_ZN8touchgfx3HAL3lcdEv>
9001745a:	6803      	ldr	r3, [r0, #0]
9001745c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9001745e:	a906      	add	r1, sp, #24
90017460:	699d      	ldr	r5, [r3, #24]
90017462:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
90017466:	47a8      	blx	r5
90017468:	b00e      	add	sp, #56	; 0x38
9001746a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

9001746e <_ZN8touchgfx5ImageD1Ev>:
9001746e:	4770      	bx	lr

90017470 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
90017470:	b570      	push	{r4, r5, r6, lr}
90017472:	880b      	ldrh	r3, [r1, #0]
90017474:	460d      	mov	r5, r1
90017476:	4604      	mov	r4, r0
90017478:	84c3      	strh	r3, [r0, #38]	; 0x26
9001747a:	4608      	mov	r0, r1
9001747c:	f004 ffda 	bl	9001c434 <_ZNK8touchgfx6Bitmap8getWidthEv>
90017480:	4606      	mov	r6, r0
90017482:	4628      	mov	r0, r5
90017484:	f005 f810 	bl	9001c4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
90017488:	6823      	ldr	r3, [r4, #0]
9001748a:	4605      	mov	r5, r0
9001748c:	b231      	sxth	r1, r6
9001748e:	4620      	mov	r0, r4
90017490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90017492:	4798      	blx	r3
90017494:	6823      	ldr	r3, [r4, #0]
90017496:	b229      	sxth	r1, r5
90017498:	4620      	mov	r0, r4
9001749a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001749c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900174a0:	4718      	bx	r3

900174a2 <_ZN8touchgfx5ImageD0Ev>:
900174a2:	b510      	push	{r4, lr}
900174a4:	4604      	mov	r4, r0
900174a6:	212c      	movs	r1, #44	; 0x2c
900174a8:	f010 fde8 	bl	9002807c <_ZdlPvj>
900174ac:	4620      	mov	r0, r4
900174ae:	bd10      	pop	{r4, pc}

900174b0 <_ZNK8touchgfx5Image12getSolidRectEv>:
900174b0:	b510      	push	{r4, lr}
900174b2:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
900174b6:	4604      	mov	r4, r0
900174b8:	2bff      	cmp	r3, #255	; 0xff
900174ba:	d006      	beq.n	900174ca <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
900174bc:	2300      	movs	r3, #0
900174be:	8003      	strh	r3, [r0, #0]
900174c0:	8043      	strh	r3, [r0, #2]
900174c2:	8083      	strh	r3, [r0, #4]
900174c4:	80c3      	strh	r3, [r0, #6]
900174c6:	4620      	mov	r0, r4
900174c8:	bd10      	pop	{r4, pc}
900174ca:	3126      	adds	r1, #38	; 0x26
900174cc:	f005 f826 	bl	9001c51c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
900174d0:	e7f9      	b.n	900174c6 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

900174d4 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
900174d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900174d8:	4604      	mov	r4, r0
900174da:	b088      	sub	sp, #32
900174dc:	2500      	movs	r5, #0
900174de:	460f      	mov	r7, r1
900174e0:	f854 3b26 	ldr.w	r3, [r4], #38
900174e4:	a904      	add	r1, sp, #16
900174e6:	4606      	mov	r6, r0
900174e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900174ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
900174ee:	4798      	blx	r3
900174f0:	4620      	mov	r0, r4
900174f2:	f004 ff9f 	bl	9001c434 <_ZNK8touchgfx6Bitmap8getWidthEv>
900174f6:	4680      	mov	r8, r0
900174f8:	4620      	mov	r0, r4
900174fa:	f004 ffd5 	bl	9001c4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
900174fe:	9506      	str	r5, [sp, #24]
90017500:	ad06      	add	r5, sp, #24
90017502:	f8ad 001e 	strh.w	r0, [sp, #30]
90017506:	4639      	mov	r1, r7
90017508:	f8ad 801c 	strh.w	r8, [sp, #28]
9001750c:	4628      	mov	r0, r5
9001750e:	f7fc ff25 	bl	9001435c <_ZN8touchgfx4RectaNERKS0_>
90017512:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
90017516:	2b00      	cmp	r3, #0
90017518:	dd19      	ble.n	9001754e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
9001751a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
9001751e:	2b00      	cmp	r3, #0
90017520:	dd15      	ble.n	9001754e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
90017522:	4b0c      	ldr	r3, [pc, #48]	; (90017554 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
90017524:	681b      	ldr	r3, [r3, #0]
90017526:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
9001752a:	b10a      	cbz	r2, 90017530 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
9001752c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
9001752e:	b900      	cbnz	r0, 90017532 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
90017530:	6898      	ldr	r0, [r3, #8]
90017532:	2701      	movs	r7, #1
90017534:	6801      	ldr	r1, [r0, #0]
90017536:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001753a:	9702      	str	r7, [sp, #8]
9001753c:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
90017540:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
90017544:	e9cd 5600 	strd	r5, r6, [sp]
90017548:	688d      	ldr	r5, [r1, #8]
9001754a:	4621      	mov	r1, r4
9001754c:	47a8      	blx	r5
9001754e:	b008      	add	sp, #32
90017550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90017554:	20026cdc 	.word	0x20026cdc

90017558 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
90017558:	4770      	bx	lr

9001755a <_ZN8touchgfx15ButtonWithLabelD0Ev>:
9001755a:	b510      	push	{r4, lr}
9001755c:	4604      	mov	r4, r0
9001755e:	2148      	movs	r1, #72	; 0x48
90017560:	f010 fd8c 	bl	9002807c <_ZdlPvj>
90017564:	4620      	mov	r0, r4
90017566:	bd10      	pop	{r4, pc}

90017568 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
90017568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001756c:	4604      	mov	r4, r0
9001756e:	b08c      	sub	sp, #48	; 0x30
90017570:	4688      	mov	r8, r1
90017572:	f7ff fd59 	bl	90017028 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
90017576:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90017578:	f64f 72ff 	movw	r2, #65535	; 0xffff
9001757c:	4293      	cmp	r3, r2
9001757e:	f000 809a 	beq.w	900176b6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
90017582:	4e55      	ldr	r6, [pc, #340]	; (900176d8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
90017584:	6832      	ldr	r2, [r6, #0]
90017586:	b92a      	cbnz	r2, 90017594 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
90017588:	4b54      	ldr	r3, [pc, #336]	; (900176dc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
9001758a:	21b1      	movs	r1, #177	; 0xb1
9001758c:	4a54      	ldr	r2, [pc, #336]	; (900176e0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
9001758e:	4855      	ldr	r0, [pc, #340]	; (900176e4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
90017590:	f011 fb50 	bl	90028c34 <__assert_func>
90017594:	4d54      	ldr	r5, [pc, #336]	; (900176e8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
90017596:	8829      	ldrh	r1, [r5, #0]
90017598:	4299      	cmp	r1, r3
9001759a:	d803      	bhi.n	900175a4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
9001759c:	4b53      	ldr	r3, [pc, #332]	; (900176ec <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
9001759e:	21b2      	movs	r1, #178	; 0xb2
900175a0:	4a4f      	ldr	r2, [pc, #316]	; (900176e0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
900175a2:	e7f4      	b.n	9001758e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
900175a4:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
900175a8:	f04f 0c02 	mov.w	ip, #2
900175ac:	4b50      	ldr	r3, [pc, #320]	; (900176f0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
900175ae:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
900175b2:	681b      	ldr	r3, [r3, #0]
900175b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
900175b8:	f1be 0f01 	cmp.w	lr, #1
900175bc:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
900175c0:	f04f 0300 	mov.w	r3, #0
900175c4:	b208      	sxth	r0, r1
900175c6:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
900175ca:	9303      	str	r3, [sp, #12]
900175cc:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
900175d0:	d074      	beq.n	900176bc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
900175d2:	f1be 0f03 	cmp.w	lr, #3
900175d6:	d071      	beq.n	900176bc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
900175d8:	1a52      	subs	r2, r2, r1
900175da:	f8ad 3010 	strh.w	r3, [sp, #16]
900175de:	f8ad 0012 	strh.w	r0, [sp, #18]
900175e2:	fb92 f2fc 	sdiv	r2, r2, ip
900175e6:	f8ad 200e 	strh.w	r2, [sp, #14]
900175ea:	f10d 090c 	add.w	r9, sp, #12
900175ee:	f10d 0a14 	add.w	sl, sp, #20
900175f2:	e899 0003 	ldmia.w	r9, {r0, r1}
900175f6:	e88a 0003 	stmia.w	sl, {r0, r1}
900175fa:	4641      	mov	r1, r8
900175fc:	4650      	mov	r0, sl
900175fe:	f7fc fead 	bl	9001435c <_ZN8touchgfx4RectaNERKS0_>
90017602:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90017606:	2b00      	cmp	r3, #0
90017608:	dd55      	ble.n	900176b6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
9001760a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
9001760e:	2b00      	cmp	r3, #0
90017610:	dd51      	ble.n	900176b6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
90017612:	f8bd 3014 	ldrh.w	r3, [sp, #20]
90017616:	4649      	mov	r1, r9
90017618:	f8bd 200c 	ldrh.w	r2, [sp, #12]
9001761c:	4620      	mov	r0, r4
9001761e:	1a9b      	subs	r3, r3, r2
90017620:	f8bd 200e 	ldrh.w	r2, [sp, #14]
90017624:	f8ad 3014 	strh.w	r3, [sp, #20]
90017628:	f8bd 3016 	ldrh.w	r3, [sp, #22]
9001762c:	1a9b      	subs	r3, r3, r2
9001762e:	f8ad 3016 	strh.w	r3, [sp, #22]
90017632:	6823      	ldr	r3, [r4, #0]
90017634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90017636:	4798      	blx	r3
90017638:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
9001763c:	2b00      	cmp	r3, #0
9001763e:	d047      	beq.n	900176d0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
90017640:	f104 0240 	add.w	r2, r4, #64	; 0x40
90017644:	6833      	ldr	r3, [r6, #0]
90017646:	f894 c032 	ldrb.w	ip, [r4, #50]	; 0x32
9001764a:	2b00      	cmp	r3, #0
9001764c:	d09c      	beq.n	90017588 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
9001764e:	8f21      	ldrh	r1, [r4, #56]	; 0x38
90017650:	8828      	ldrh	r0, [r5, #0]
90017652:	4288      	cmp	r0, r1
90017654:	d9a2      	bls.n	9001759c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
90017656:	eb03 0341 	add.w	r3, r3, r1, lsl #1
9001765a:	6812      	ldr	r2, [r2, #0]
9001765c:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
90017660:	785b      	ldrb	r3, [r3, #1]
90017662:	9209      	str	r2, [sp, #36]	; 0x24
90017664:	f3c3 0501 	ubfx	r5, r3, #0, #2
90017668:	f3c3 0381 	ubfx	r3, r3, #2, #2
9001766c:	9707      	str	r7, [sp, #28]
9001766e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
90017672:	2300      	movs	r3, #0
90017674:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
90017678:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
9001767c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
90017680:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
90017684:	4b1b      	ldr	r3, [pc, #108]	; (900176f4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
90017686:	f88d 5020 	strb.w	r5, [sp, #32]
9001768a:	681b      	ldr	r3, [r3, #0]
9001768c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
90017690:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90017694:	b10a      	cbz	r2, 9001769a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
90017696:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
90017698:	b904      	cbnz	r4, 9001769c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x134>
9001769a:	689c      	ldr	r4, [r3, #8]
9001769c:	4b16      	ldr	r3, [pc, #88]	; (900176f8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x190>)
9001769e:	6818      	ldr	r0, [r3, #0]
900176a0:	f7eb ffb2 	bl	90003608 <_ZNK8touchgfx5Texts7getTextEt>
900176a4:	ab07      	add	r3, sp, #28
900176a6:	9001      	str	r0, [sp, #4]
900176a8:	4620      	mov	r0, r4
900176aa:	9300      	str	r3, [sp, #0]
900176ac:	4653      	mov	r3, sl
900176ae:	e899 0006 	ldmia.w	r9, {r1, r2}
900176b2:	f7eb ff5b 	bl	9000356c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
900176b6:	b00c      	add	sp, #48	; 0x30
900176b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900176bc:	1a5b      	subs	r3, r3, r1
900176be:	f8ad 0010 	strh.w	r0, [sp, #16]
900176c2:	f8ad 2012 	strh.w	r2, [sp, #18]
900176c6:	fb93 f3fc 	sdiv	r3, r3, ip
900176ca:	f8ad 300c 	strh.w	r3, [sp, #12]
900176ce:	e78c      	b.n	900175ea <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x82>
900176d0:	f104 023c 	add.w	r2, r4, #60	; 0x3c
900176d4:	e7b6      	b.n	90017644 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xdc>
900176d6:	bf00      	nop
900176d8:	20026d2c 	.word	0x20026d2c
900176dc:	9002ad50 	.word	0x9002ad50
900176e0:	9002f8d4 	.word	0x9002f8d4
900176e4:	9002adde 	.word	0x9002adde
900176e8:	20026d30 	.word	0x20026d30
900176ec:	9002ae07 	.word	0x9002ae07
900176f0:	20026d34 	.word	0x20026d34
900176f4:	20026cdc 	.word	0x20026cdc
900176f8:	20026d38 	.word	0x20026d38

900176fc <_ZN8touchgfx15ButtonWithLabelC1Ev>:
900176fc:	2101      	movs	r1, #1
900176fe:	2200      	movs	r2, #0
90017700:	b510      	push	{r4, lr}
90017702:	4c12      	ldr	r4, [pc, #72]	; (9001774c <_ZN8touchgfx15ButtonWithLabelC1Ev+0x50>)
90017704:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
90017708:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
9001770c:	f64f 71ff 	movw	r1, #65535	; 0xffff
90017710:	6004      	str	r4, [r0, #0]
90017712:	4c0f      	ldr	r4, [pc, #60]	; (90017750 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
90017714:	8082      	strh	r2, [r0, #4]
90017716:	80c2      	strh	r2, [r0, #6]
90017718:	8102      	strh	r2, [r0, #8]
9001771a:	8142      	strh	r2, [r0, #10]
9001771c:	8182      	strh	r2, [r0, #12]
9001771e:	81c2      	strh	r2, [r0, #14]
90017720:	8202      	strh	r2, [r0, #16]
90017722:	8242      	strh	r2, [r0, #18]
90017724:	61c2      	str	r2, [r0, #28]
90017726:	6282      	str	r2, [r0, #40]	; 0x28
90017728:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
9001772c:	85c1      	strh	r1, [r0, #46]	; 0x2e
9001772e:	8601      	strh	r1, [r0, #48]	; 0x30
90017730:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
90017734:	6344      	str	r4, [r0, #52]	; 0x34
90017736:	8701      	strh	r1, [r0, #56]	; 0x38
90017738:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
9001773c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
90017740:	e9c0 2205 	strd	r2, r2, [r0, #20]
90017744:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
90017748:	bd10      	pop	{r4, pc}
9001774a:	bf00      	nop
9001774c:	9002f86c 	.word	0x9002f86c
90017750:	9002a954 	.word	0x9002a954

90017754 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
90017754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017758:	b08d      	sub	sp, #52	; 0x34
9001775a:	4688      	mov	r8, r1
9001775c:	f8d3 c000 	ldr.w	ip, [r3]
90017760:	9916      	ldr	r1, [sp, #88]	; 0x58
90017762:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
90017766:	680f      	ldr	r7, [r1, #0]
90017768:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
9001776c:	eba7 070c 	sub.w	r7, r7, ip
90017770:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
90017774:	edd3 6a07 	vldr	s13, [r3, #28]
90017778:	42bc      	cmp	r4, r7
9001777a:	9918      	ldr	r1, [sp, #96]	; 0x60
9001777c:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
90017780:	bfa8      	it	ge
90017782:	463c      	movge	r4, r7
90017784:	f9b1 9000 	ldrsh.w	r9, [r1]
90017788:	f9ba 1000 	ldrsh.w	r1, [sl]
9001778c:	ee07 4a90 	vmov	s15, r4
90017790:	eb09 0e0c 	add.w	lr, r9, ip
90017794:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
90017798:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
9001779c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
900177a0:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
900177a4:	4571      	cmp	r1, lr
900177a6:	ee25 4a04 	vmul.f32	s8, s10, s8
900177aa:	ee65 4a24 	vmul.f32	s9, s10, s9
900177ae:	ee25 5a27 	vmul.f32	s10, s10, s15
900177b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
900177b6:	ee71 0aa4 	vadd.f32	s1, s3, s9
900177ba:	ee32 1a05 	vadd.f32	s2, s4, s10
900177be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
900177c2:	ee36 0a84 	vadd.f32	s0, s13, s8
900177c6:	ee61 1a87 	vmul.f32	s3, s3, s14
900177ca:	ee22 2a07 	vmul.f32	s4, s4, s14
900177ce:	f340 808c 	ble.w	900178ea <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
900177d2:	eba1 060e 	sub.w	r6, r1, lr
900177d6:	fb96 f5f4 	sdiv	r5, r6, r4
900177da:	ee07 5a10 	vmov	s14, r5
900177de:	2d00      	cmp	r5, #0
900177e0:	fb04 6615 	mls	r6, r4, r5, r6
900177e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900177e8:	eea7 0a04 	vfma.f32	s0, s14, s8
900177ec:	eee7 0a24 	vfma.f32	s1, s14, s9
900177f0:	eea7 1a05 	vfma.f32	s2, s14, s10
900177f4:	dd12      	ble.n	9001781c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
900177f6:	ee70 6a44 	vsub.f32	s13, s0, s8
900177fa:	ee70 1ae4 	vsub.f32	s3, s1, s9
900177fe:	ee31 2a45 	vsub.f32	s4, s2, s10
90017802:	eef5 6a40 	vcmp.f32	s13, #0.0
90017806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001780a:	bf14      	ite	ne
9001780c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
90017810:	eeb0 7a67 	vmoveq.f32	s14, s15
90017814:	ee61 1a87 	vmul.f32	s3, s3, s14
90017818:	ee22 2a07 	vmul.f32	s4, s4, s14
9001781c:	fb05 f204 	mul.w	r2, r5, r4
90017820:	1abf      	subs	r7, r7, r2
90017822:	4494      	add	ip, r2
90017824:	f8ba 2004 	ldrh.w	r2, [sl, #4]
90017828:	4411      	add	r1, r2
9001782a:	eb09 020c 	add.w	r2, r9, ip
9001782e:	b209      	sxth	r1, r1
90017830:	443a      	add	r2, r7
90017832:	428a      	cmp	r2, r1
90017834:	bfc4      	itt	gt
90017836:	eba1 0209 	subgt.w	r2, r1, r9
9001783a:	eba2 070c 	subgt.w	r7, r2, ip
9001783e:	2f00      	cmp	r7, #0
90017840:	dd50      	ble.n	900178e4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
90017842:	fb97 f1f4 	sdiv	r1, r7, r4
90017846:	fb04 7211 	mls	r2, r4, r1, r7
9001784a:	b90a      	cbnz	r2, 90017850 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
9001784c:	3901      	subs	r1, #1
9001784e:	4622      	mov	r2, r4
90017850:	eec7 3a80 	vdiv.f32	s7, s15, s0
90017854:	6840      	ldr	r0, [r0, #4]
90017856:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
9001785a:	44b6      	add	lr, r6
9001785c:	f8d0 a000 	ldr.w	sl, [r0]
90017860:	2900      	cmp	r1, #0
90017862:	bfcc      	ite	gt
90017864:	46a1      	movgt	r9, r4
90017866:	4691      	movle	r9, r2
90017868:	900b      	str	r0, [sp, #44]	; 0x2c
9001786a:	9817      	ldr	r0, [sp, #92]	; 0x5c
9001786c:	fb04 e505 	mla	r5, r4, r5, lr
90017870:	eef0 6a42 	vmov.f32	s13, s4
90017874:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
90017878:	9008      	str	r0, [sp, #32]
9001787a:	eeb0 7a61 	vmov.f32	s14, s3
9001787e:	9818      	ldr	r0, [sp, #96]	; 0x60
90017880:	695b      	ldr	r3, [r3, #20]
90017882:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90017886:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
9001788a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
9001788e:	980b      	ldr	r0, [sp, #44]	; 0x2c
90017890:	445b      	add	r3, fp
90017892:	9307      	str	r3, [sp, #28]
90017894:	ee16 3a90 	vmov	r3, s13
90017898:	e9cd 8505 	strd	r8, r5, [sp, #20]
9001789c:	ee60 2aa3 	vmul.f32	s5, s1, s7
900178a0:	ee21 3a23 	vmul.f32	s6, s2, s7
900178a4:	ee72 7ae1 	vsub.f32	s15, s5, s3
900178a8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
900178ac:	ee17 7a90 	vmov	r7, s15
900178b0:	ee73 7a42 	vsub.f32	s15, s6, s4
900178b4:	fb97 f7f4 	sdiv	r7, r7, r4
900178b8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
900178bc:	ee17 ca90 	vmov	ip, s15
900178c0:	fb9c fcf4 	sdiv	ip, ip, r4
900178c4:	fb0c 3306 	mla	r3, ip, r6, r3
900178c8:	9302      	str	r3, [sp, #8]
900178ca:	ee17 3a10 	vmov	r3, s14
900178ce:	e9cd 7c03 	strd	r7, ip, [sp, #12]
900178d2:	fb07 3706 	mla	r7, r7, r6, r3
900178d6:	eba9 0306 	sub.w	r3, r9, r6
900178da:	e9cd 4700 	strd	r4, r7, [sp]
900178de:	f8da 4008 	ldr.w	r4, [sl, #8]
900178e2:	47a0      	blx	r4
900178e4:	b00d      	add	sp, #52	; 0x34
900178e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900178ea:	2500      	movs	r5, #0
900178ec:	462e      	mov	r6, r5
900178ee:	e799      	b.n	90017824 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

900178f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
900178f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900178f4:	b0db      	sub	sp, #364	; 0x16c
900178f6:	461d      	mov	r5, r3
900178f8:	4614      	mov	r4, r2
900178fa:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
900178fe:	910f      	str	r1, [sp, #60]	; 0x3c
90017900:	4629      	mov	r1, r5
90017902:	930a      	str	r3, [sp, #40]	; 0x28
90017904:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
90017908:	9009      	str	r0, [sp, #36]	; 0x24
9001790a:	930b      	str	r3, [sp, #44]	; 0x2c
9001790c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
90017910:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
90017914:	9310      	str	r3, [sp, #64]	; 0x40
90017916:	6803      	ldr	r3, [r0, #0]
90017918:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
9001791a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
9001791e:	47b8      	blx	r7
90017920:	9b09      	ldr	r3, [sp, #36]	; 0x24
90017922:	6058      	str	r0, [r3, #4]
90017924:	2800      	cmp	r0, #0
90017926:	f000 83a1 	beq.w	9001806c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
9001792a:	682b      	ldr	r3, [r5, #0]
9001792c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
90017930:	ed94 7a02 	vldr	s14, [r4, #8]
90017934:	9314      	str	r3, [sp, #80]	; 0x50
90017936:	686b      	ldr	r3, [r5, #4]
90017938:	eeb4 7ae7 	vcmpe.f32	s14, s15
9001793c:	9315      	str	r3, [sp, #84]	; 0x54
9001793e:	4bc1      	ldr	r3, [pc, #772]	; (90017c44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
90017940:	7819      	ldrb	r1, [r3, #0]
90017942:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
90017946:	2900      	cmp	r1, #0
90017948:	bf16      	itet	ne
9001794a:	4619      	movne	r1, r3
9001794c:	4611      	moveq	r1, r2
9001794e:	4613      	movne	r3, r2
90017950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90017954:	9116      	str	r1, [sp, #88]	; 0x58
90017956:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
9001795a:	f240 8387 	bls.w	9001806c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
9001795e:	ed94 7a07 	vldr	s14, [r4, #28]
90017962:	eeb4 7ae7 	vcmpe.f32	s14, s15
90017966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001796a:	f240 837f 	bls.w	9001806c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
9001796e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
90017972:	eeb4 7ae7 	vcmpe.f32	s14, s15
90017976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001797a:	f240 8377 	bls.w	9001806c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
9001797e:	6822      	ldr	r2, [r4, #0]
90017980:	4bb1      	ldr	r3, [pc, #708]	; (90017c48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
90017982:	429a      	cmp	r2, r3
90017984:	f2c0 8372 	blt.w	9001806c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90017988:	49b0      	ldr	r1, [pc, #704]	; (90017c4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
9001798a:	6963      	ldr	r3, [r4, #20]
9001798c:	428a      	cmp	r2, r1
9001798e:	f300 836d 	bgt.w	9001806c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90017992:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
90017996:	48ae      	ldr	r0, [pc, #696]	; (90017c50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
90017998:	33ff      	adds	r3, #255	; 0xff
9001799a:	4283      	cmp	r3, r0
9001799c:	f200 8366 	bhi.w	9001806c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900179a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
900179a2:	4dac      	ldr	r5, [pc, #688]	; (90017c54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
900179a4:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
900179a8:	33ff      	adds	r3, #255	; 0xff
900179aa:	42ab      	cmp	r3, r5
900179ac:	f200 835e 	bhi.w	9001806c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900179b0:	6862      	ldr	r2, [r4, #4]
900179b2:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
900179b6:	33ff      	adds	r3, #255	; 0xff
900179b8:	4283      	cmp	r3, r0
900179ba:	f200 8357 	bhi.w	9001806c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900179be:	69a1      	ldr	r1, [r4, #24]
900179c0:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
900179c4:	33ff      	adds	r3, #255	; 0xff
900179c6:	4283      	cmp	r3, r0
900179c8:	f200 8350 	bhi.w	9001806c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900179cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
900179ce:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
900179d2:	30ff      	adds	r0, #255	; 0xff
900179d4:	42a8      	cmp	r0, r5
900179d6:	f200 8349 	bhi.w	9001806c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900179da:	428a      	cmp	r2, r1
900179dc:	f280 8110 	bge.w	90017c00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
900179e0:	429a      	cmp	r2, r3
900179e2:	f300 8119 	bgt.w	90017c18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
900179e6:	4299      	cmp	r1, r3
900179e8:	f280 811d 	bge.w	90017c26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
900179ec:	2502      	movs	r5, #2
900179ee:	2701      	movs	r7, #1
900179f0:	46a9      	mov	r9, r5
900179f2:	46b8      	mov	r8, r7
900179f4:	f04f 0a00 	mov.w	sl, #0
900179f8:	4621      	mov	r1, r4
900179fa:	a849      	add	r0, sp, #292	; 0x124
900179fc:	f003 fee8 	bl	9001b7d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
90017a00:	4622      	mov	r2, r4
90017a02:	4653      	mov	r3, sl
90017a04:	a949      	add	r1, sp, #292	; 0x124
90017a06:	f8cd 9000 	str.w	r9, [sp]
90017a0a:	a819      	add	r0, sp, #100	; 0x64
90017a0c:	f004 f810 	bl	9001ba30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90017a10:	4622      	mov	r2, r4
90017a12:	4653      	mov	r3, sl
90017a14:	a949      	add	r1, sp, #292	; 0x124
90017a16:	f8cd 8000 	str.w	r8, [sp]
90017a1a:	a829      	add	r0, sp, #164	; 0xa4
90017a1c:	f004 f808 	bl	9001ba30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90017a20:	4643      	mov	r3, r8
90017a22:	4622      	mov	r2, r4
90017a24:	a949      	add	r1, sp, #292	; 0x124
90017a26:	f8cd 9000 	str.w	r9, [sp]
90017a2a:	a839      	add	r0, sp, #228	; 0xe4
90017a2c:	f004 f800 	bl	9001ba30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90017a30:	42af      	cmp	r7, r5
90017a32:	af12      	add	r7, sp, #72	; 0x48
90017a34:	bfb7      	itett	lt
90017a36:	2300      	movlt	r3, #0
90017a38:	2301      	movge	r3, #1
90017a3a:	ad29      	addlt	r5, sp, #164	; 0xa4
90017a3c:	ac19      	addlt	r4, sp, #100	; 0x64
90017a3e:	bfb1      	iteee	lt
90017a40:	930e      	strlt	r3, [sp, #56]	; 0x38
90017a42:	ad19      	addge	r5, sp, #100	; 0x64
90017a44:	930e      	strge	r3, [sp, #56]	; 0x38
90017a46:	ac29      	addge	r4, sp, #164	; 0xa4
90017a48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90017a4a:	e893 0003 	ldmia.w	r3, {r0, r1}
90017a4e:	e887 0003 	stmia.w	r7, {r0, r1}
90017a52:	b928      	cbnz	r0, 90017a60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
90017a54:	4b80      	ldr	r3, [pc, #512]	; (90017c58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
90017a56:	6818      	ldr	r0, [r3, #0]
90017a58:	6803      	ldr	r3, [r0, #0]
90017a5a:	6a1b      	ldr	r3, [r3, #32]
90017a5c:	4798      	blx	r3
90017a5e:	6038      	str	r0, [r7, #0]
90017a60:	9b64      	ldr	r3, [sp, #400]	; 0x190
90017a62:	f8bb 0006 	ldrh.w	r0, [fp, #6]
90017a66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90017a6a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
90017a6c:	930c      	str	r3, [sp, #48]	; 0x30
90017a6e:	990c      	ldr	r1, [sp, #48]	; 0x30
90017a70:	6963      	ldr	r3, [r4, #20]
90017a72:	440b      	add	r3, r1
90017a74:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
90017a78:	4408      	add	r0, r1
90017a7a:	b200      	sxth	r0, r0
90017a7c:	4283      	cmp	r3, r0
90017a7e:	900d      	str	r0, [sp, #52]	; 0x34
90017a80:	f280 80dd 	bge.w	90017c3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
90017a84:	428b      	cmp	r3, r1
90017a86:	da08      	bge.n	90017a9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90017a88:	2a00      	cmp	r2, #0
90017a8a:	dd06      	ble.n	90017a9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90017a8c:	1acb      	subs	r3, r1, r3
90017a8e:	429a      	cmp	r2, r3
90017a90:	f2c0 80e4 	blt.w	90017c5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
90017a94:	2b00      	cmp	r3, #0
90017a96:	f300 80e2 	bgt.w	90017c5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
90017a9a:	6967      	ldr	r7, [r4, #20]
90017a9c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
90017aa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90017aa2:	443b      	add	r3, r7
90017aa4:	461f      	mov	r7, r3
90017aa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90017aa8:	1bdf      	subs	r7, r3, r7
90017aaa:	4297      	cmp	r7, r2
90017aac:	bfa8      	it	ge
90017aae:	4617      	movge	r7, r2
90017ab0:	2f00      	cmp	r7, #0
90017ab2:	f340 8166 	ble.w	90017d82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
90017ab6:	9b64      	ldr	r3, [sp, #400]	; 0x190
90017ab8:	6829      	ldr	r1, [r5, #0]
90017aba:	f9b3 2000 	ldrsh.w	r2, [r3]
90017abe:	f9bb 3000 	ldrsh.w	r3, [fp]
90017ac2:	4411      	add	r1, r2
90017ac4:	6820      	ldr	r0, [r4, #0]
90017ac6:	4299      	cmp	r1, r3
90017ac8:	dd1a      	ble.n	90017b00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
90017aca:	f8bb 1004 	ldrh.w	r1, [fp, #4]
90017ace:	4402      	add	r2, r0
90017ad0:	440b      	add	r3, r1
90017ad2:	b21b      	sxth	r3, r3
90017ad4:	429a      	cmp	r2, r3
90017ad6:	dc13      	bgt.n	90017b00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
90017ad8:	9a10      	ldr	r2, [sp, #64]	; 0x40
90017ada:	a912      	add	r1, sp, #72	; 0x48
90017adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
90017ade:	9809      	ldr	r0, [sp, #36]	; 0x24
90017ae0:	681b      	ldr	r3, [r3, #0]
90017ae2:	9206      	str	r2, [sp, #24]
90017ae4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90017ae6:	9500      	str	r5, [sp, #0]
90017ae8:	9205      	str	r2, [sp, #20]
90017aea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90017aec:	e9cd b203 	strd	fp, r2, [sp, #12]
90017af0:	9a64      	ldr	r2, [sp, #400]	; 0x190
90017af2:	e9cd 8201 	strd	r8, r2, [sp, #4]
90017af6:	aa49      	add	r2, sp, #292	; 0x124
90017af8:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
90017afc:	4623      	mov	r3, r4
90017afe:	47c8      	blx	r9
90017b00:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
90017b04:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
90017b08:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
90017b0c:	ee37 7a27 	vadd.f32	s14, s14, s15
90017b10:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
90017b14:	68a1      	ldr	r1, [r4, #8]
90017b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
90017b1a:	ed94 6a08 	vldr	s12, [r4, #32]
90017b1e:	edd4 6a07 	vldr	s13, [r4, #28]
90017b22:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90017b26:	ee76 6a86 	vadd.f32	s13, s13, s12
90017b2a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90017b2e:	e9d4 2300 	ldrd	r2, r3, [r4]
90017b32:	edc4 6a07 	vstr	s13, [r4, #28]
90017b36:	441a      	add	r2, r3
90017b38:	6963      	ldr	r3, [r4, #20]
90017b3a:	3301      	adds	r3, #1
90017b3c:	6022      	str	r2, [r4, #0]
90017b3e:	6163      	str	r3, [r4, #20]
90017b40:	69a3      	ldr	r3, [r4, #24]
90017b42:	3b01      	subs	r3, #1
90017b44:	61a3      	str	r3, [r4, #24]
90017b46:	6923      	ldr	r3, [r4, #16]
90017b48:	440b      	add	r3, r1
90017b4a:	68e1      	ldr	r1, [r4, #12]
90017b4c:	428b      	cmp	r3, r1
90017b4e:	6123      	str	r3, [r4, #16]
90017b50:	db15      	blt.n	90017b7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
90017b52:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
90017b56:	3201      	adds	r2, #1
90017b58:	1a5b      	subs	r3, r3, r1
90017b5a:	ee76 6a26 	vadd.f32	s13, s12, s13
90017b5e:	6022      	str	r2, [r4, #0]
90017b60:	6123      	str	r3, [r4, #16]
90017b62:	edc4 6a07 	vstr	s13, [r4, #28]
90017b66:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
90017b6a:	ee36 7a87 	vadd.f32	s14, s13, s14
90017b6e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90017b72:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
90017b76:	ee77 7a27 	vadd.f32	s15, s14, s15
90017b7a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90017b7e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
90017b82:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
90017b86:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
90017b8a:	ee37 7a27 	vadd.f32	s14, s14, s15
90017b8e:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
90017b92:	68a9      	ldr	r1, [r5, #8]
90017b94:	ee77 7aa6 	vadd.f32	s15, s15, s13
90017b98:	ed95 6a08 	vldr	s12, [r5, #32]
90017b9c:	edd5 6a07 	vldr	s13, [r5, #28]
90017ba0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90017ba4:	ee76 6a86 	vadd.f32	s13, s13, s12
90017ba8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90017bac:	e9d5 2300 	ldrd	r2, r3, [r5]
90017bb0:	edc5 6a07 	vstr	s13, [r5, #28]
90017bb4:	441a      	add	r2, r3
90017bb6:	696b      	ldr	r3, [r5, #20]
90017bb8:	3301      	adds	r3, #1
90017bba:	602a      	str	r2, [r5, #0]
90017bbc:	616b      	str	r3, [r5, #20]
90017bbe:	69ab      	ldr	r3, [r5, #24]
90017bc0:	3b01      	subs	r3, #1
90017bc2:	61ab      	str	r3, [r5, #24]
90017bc4:	692b      	ldr	r3, [r5, #16]
90017bc6:	440b      	add	r3, r1
90017bc8:	68e9      	ldr	r1, [r5, #12]
90017bca:	428b      	cmp	r3, r1
90017bcc:	612b      	str	r3, [r5, #16]
90017bce:	db15      	blt.n	90017bfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
90017bd0:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
90017bd4:	3201      	adds	r2, #1
90017bd6:	1a5b      	subs	r3, r3, r1
90017bd8:	ee76 6a26 	vadd.f32	s13, s12, s13
90017bdc:	602a      	str	r2, [r5, #0]
90017bde:	612b      	str	r3, [r5, #16]
90017be0:	edc5 6a07 	vstr	s13, [r5, #28]
90017be4:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
90017be8:	ee36 7a87 	vadd.f32	s14, s13, s14
90017bec:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90017bf0:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
90017bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
90017bf8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90017bfc:	3f01      	subs	r7, #1
90017bfe:	e757      	b.n	90017ab0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
90017c00:	4299      	cmp	r1, r3
90017c02:	dc13      	bgt.n	90017c2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
90017c04:	429a      	cmp	r2, r3
90017c06:	da14      	bge.n	90017c32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
90017c08:	2502      	movs	r5, #2
90017c0a:	2703      	movs	r7, #3
90017c0c:	f04f 0800 	mov.w	r8, #0
90017c10:	46a9      	mov	r9, r5
90017c12:	f04f 0a01 	mov.w	sl, #1
90017c16:	e6ef      	b.n	900179f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
90017c18:	2501      	movs	r5, #1
90017c1a:	2700      	movs	r7, #0
90017c1c:	46a9      	mov	r9, r5
90017c1e:	46b8      	mov	r8, r7
90017c20:	f04f 0a02 	mov.w	sl, #2
90017c24:	e6e8      	b.n	900179f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
90017c26:	2501      	movs	r5, #1
90017c28:	2702      	movs	r7, #2
90017c2a:	e6e1      	b.n	900179f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
90017c2c:	2500      	movs	r5, #0
90017c2e:	2701      	movs	r7, #1
90017c30:	e7f4      	b.n	90017c1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
90017c32:	2702      	movs	r7, #2
90017c34:	2503      	movs	r5, #3
90017c36:	f04f 0900 	mov.w	r9, #0
90017c3a:	46b8      	mov	r8, r7
90017c3c:	e7e9      	b.n	90017c12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
90017c3e:	4613      	mov	r3, r2
90017c40:	e728      	b.n	90017a94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
90017c42:	bf00      	nop
90017c44:	20026cd4 	.word	0x20026cd4
90017c48:	fffd8f01 	.word	0xfffd8f01
90017c4c:	00027100 	.word	0x00027100
90017c50:	0004e1ff 	.word	0x0004e1ff
90017c54:	0004e1fe 	.word	0x0004e1fe
90017c58:	20026cdc 	.word	0x20026cdc
90017c5c:	4613      	mov	r3, r2
90017c5e:	992b      	ldr	r1, [sp, #172]	; 0xac
90017c60:	469e      	mov	lr, r3
90017c62:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
90017c64:	469c      	mov	ip, r3
90017c66:	9111      	str	r1, [sp, #68]	; 0x44
90017c68:	f04f 0900 	mov.w	r9, #0
90017c6c:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
90017c70:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
90017c74:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
90017c78:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
90017c7c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
90017c80:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
90017c84:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
90017c88:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
90017c8c:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
90017c90:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
90017c94:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
90017c98:	f1bc 0f00 	cmp.w	ip, #0
90017c9c:	d147      	bne.n	90017d2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
90017c9e:	eb03 0c07 	add.w	ip, r3, r7
90017ca2:	1ad7      	subs	r7, r2, r3
90017ca4:	f1b9 0f00 	cmp.w	r9, #0
90017ca8:	d009      	beq.n	90017cbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
90017caa:	9029      	str	r0, [sp, #164]	; 0xa4
90017cac:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
90017cb0:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
90017cb4:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
90017cb8:	912d      	str	r1, [sp, #180]	; 0xb4
90017cba:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
90017cbe:	991b      	ldr	r1, [sp, #108]	; 0x6c
90017cc0:	f04f 0800 	mov.w	r8, #0
90017cc4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
90017cc8:	9111      	str	r1, [sp, #68]	; 0x44
90017cca:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
90017cce:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
90017cd2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
90017cd6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
90017cda:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
90017cde:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
90017ce2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
90017ce6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
90017cea:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
90017cee:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
90017cf2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
90017cf6:	f1be 0f00 	cmp.w	lr, #0
90017cfa:	d031      	beq.n	90017d60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
90017cfc:	9e11      	ldr	r6, [sp, #68]	; 0x44
90017cfe:	4450      	add	r0, sl
90017d00:	ee76 6aa4 	vadd.f32	s13, s13, s9
90017d04:	4431      	add	r1, r6
90017d06:	ee37 7a04 	vadd.f32	s14, s14, s8
90017d0a:	ee77 7aa3 	vadd.f32	s15, s15, s7
90017d0e:	4549      	cmp	r1, r9
90017d10:	db08      	blt.n	90017d24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
90017d12:	ee77 7a85 	vadd.f32	s15, s15, s10
90017d16:	3001      	adds	r0, #1
90017d18:	ee76 6aa5 	vadd.f32	s13, s13, s11
90017d1c:	eba1 0109 	sub.w	r1, r1, r9
90017d20:	ee37 7a06 	vadd.f32	s14, s14, s12
90017d24:	f10e 3eff 	add.w	lr, lr, #4294967295
90017d28:	f04f 0801 	mov.w	r8, #1
90017d2c:	e7e3      	b.n	90017cf6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
90017d2e:	9e11      	ldr	r6, [sp, #68]	; 0x44
90017d30:	4450      	add	r0, sl
90017d32:	ee37 7a24 	vadd.f32	s14, s14, s9
90017d36:	4431      	add	r1, r6
90017d38:	ee77 7a84 	vadd.f32	s15, s15, s8
90017d3c:	ee76 6aa3 	vadd.f32	s13, s13, s7
90017d40:	4541      	cmp	r1, r8
90017d42:	db08      	blt.n	90017d56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
90017d44:	ee76 6a85 	vadd.f32	s13, s13, s10
90017d48:	3001      	adds	r0, #1
90017d4a:	ee37 7a25 	vadd.f32	s14, s14, s11
90017d4e:	eba1 0108 	sub.w	r1, r1, r8
90017d52:	ee77 7a86 	vadd.f32	s15, s15, s12
90017d56:	f10c 3cff 	add.w	ip, ip, #4294967295
90017d5a:	f04f 0901 	mov.w	r9, #1
90017d5e:	e79b      	b.n	90017c98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
90017d60:	449c      	add	ip, r3
90017d62:	1aff      	subs	r7, r7, r3
90017d64:	f1b8 0f00 	cmp.w	r8, #0
90017d68:	d009      	beq.n	90017d7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
90017d6a:	9019      	str	r0, [sp, #100]	; 0x64
90017d6c:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
90017d70:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
90017d74:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
90017d78:	911d      	str	r1, [sp, #116]	; 0x74
90017d7a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
90017d7e:	1ad2      	subs	r2, r2, r3
90017d80:	e68b      	b.n	90017a9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90017d82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017d84:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
90017d86:	2b00      	cmp	r3, #0
90017d88:	f000 80d1 	beq.w	90017f2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
90017d8c:	ad19      	add	r5, sp, #100	; 0x64
90017d8e:	ac39      	add	r4, sp, #228	; 0xe4
90017d90:	9b64      	ldr	r3, [sp, #400]	; 0x190
90017d92:	f8bb 0006 	ldrh.w	r0, [fp, #6]
90017d96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90017d9a:	930c      	str	r3, [sp, #48]	; 0x30
90017d9c:	990c      	ldr	r1, [sp, #48]	; 0x30
90017d9e:	6963      	ldr	r3, [r4, #20]
90017da0:	440b      	add	r3, r1
90017da2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
90017da6:	4408      	add	r0, r1
90017da8:	b200      	sxth	r0, r0
90017daa:	4283      	cmp	r3, r0
90017dac:	900d      	str	r0, [sp, #52]	; 0x34
90017dae:	f280 80c1 	bge.w	90017f34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
90017db2:	428b      	cmp	r3, r1
90017db4:	da08      	bge.n	90017dc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90017db6:	2a00      	cmp	r2, #0
90017db8:	dd06      	ble.n	90017dc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90017dba:	1acb      	subs	r3, r1, r3
90017dbc:	429a      	cmp	r2, r3
90017dbe:	f2c0 80bb 	blt.w	90017f38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
90017dc2:	2b00      	cmp	r3, #0
90017dc4:	f300 80b9 	bgt.w	90017f3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
90017dc8:	6967      	ldr	r7, [r4, #20]
90017dca:	f10d 0850 	add.w	r8, sp, #80	; 0x50
90017dce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90017dd0:	443b      	add	r3, r7
90017dd2:	461f      	mov	r7, r3
90017dd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90017dd6:	1bdf      	subs	r7, r3, r7
90017dd8:	4297      	cmp	r7, r2
90017dda:	bfa8      	it	ge
90017ddc:	4617      	movge	r7, r2
90017dde:	2f00      	cmp	r7, #0
90017de0:	f340 813c 	ble.w	9001805c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
90017de4:	9b64      	ldr	r3, [sp, #400]	; 0x190
90017de6:	6829      	ldr	r1, [r5, #0]
90017de8:	f9b3 2000 	ldrsh.w	r2, [r3]
90017dec:	f9bb 3000 	ldrsh.w	r3, [fp]
90017df0:	4411      	add	r1, r2
90017df2:	6820      	ldr	r0, [r4, #0]
90017df4:	4299      	cmp	r1, r3
90017df6:	dd1a      	ble.n	90017e2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
90017df8:	f8bb 1004 	ldrh.w	r1, [fp, #4]
90017dfc:	4402      	add	r2, r0
90017dfe:	440b      	add	r3, r1
90017e00:	b21b      	sxth	r3, r3
90017e02:	429a      	cmp	r2, r3
90017e04:	dc13      	bgt.n	90017e2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
90017e06:	9a10      	ldr	r2, [sp, #64]	; 0x40
90017e08:	a912      	add	r1, sp, #72	; 0x48
90017e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
90017e0c:	9809      	ldr	r0, [sp, #36]	; 0x24
90017e0e:	681b      	ldr	r3, [r3, #0]
90017e10:	9206      	str	r2, [sp, #24]
90017e12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90017e14:	9500      	str	r5, [sp, #0]
90017e16:	9205      	str	r2, [sp, #20]
90017e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90017e1a:	e9cd b203 	strd	fp, r2, [sp, #12]
90017e1e:	9a64      	ldr	r2, [sp, #400]	; 0x190
90017e20:	e9cd 8201 	strd	r8, r2, [sp, #4]
90017e24:	aa49      	add	r2, sp, #292	; 0x124
90017e26:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
90017e2a:	4623      	mov	r3, r4
90017e2c:	47c8      	blx	r9
90017e2e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
90017e32:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
90017e36:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
90017e3a:	ee37 7a27 	vadd.f32	s14, s14, s15
90017e3e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
90017e42:	68a1      	ldr	r1, [r4, #8]
90017e44:	ee77 7aa6 	vadd.f32	s15, s15, s13
90017e48:	ed94 6a08 	vldr	s12, [r4, #32]
90017e4c:	edd4 6a07 	vldr	s13, [r4, #28]
90017e50:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90017e54:	ee76 6a86 	vadd.f32	s13, s13, s12
90017e58:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90017e5c:	e9d4 2300 	ldrd	r2, r3, [r4]
90017e60:	edc4 6a07 	vstr	s13, [r4, #28]
90017e64:	441a      	add	r2, r3
90017e66:	6963      	ldr	r3, [r4, #20]
90017e68:	3301      	adds	r3, #1
90017e6a:	6022      	str	r2, [r4, #0]
90017e6c:	6163      	str	r3, [r4, #20]
90017e6e:	69a3      	ldr	r3, [r4, #24]
90017e70:	3b01      	subs	r3, #1
90017e72:	61a3      	str	r3, [r4, #24]
90017e74:	6923      	ldr	r3, [r4, #16]
90017e76:	440b      	add	r3, r1
90017e78:	68e1      	ldr	r1, [r4, #12]
90017e7a:	428b      	cmp	r3, r1
90017e7c:	6123      	str	r3, [r4, #16]
90017e7e:	db15      	blt.n	90017eac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
90017e80:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
90017e84:	3201      	adds	r2, #1
90017e86:	1a5b      	subs	r3, r3, r1
90017e88:	ee76 6a26 	vadd.f32	s13, s12, s13
90017e8c:	6022      	str	r2, [r4, #0]
90017e8e:	6123      	str	r3, [r4, #16]
90017e90:	edc4 6a07 	vstr	s13, [r4, #28]
90017e94:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
90017e98:	ee36 7a87 	vadd.f32	s14, s13, s14
90017e9c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90017ea0:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
90017ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
90017ea8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90017eac:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
90017eb0:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
90017eb4:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
90017eb8:	ee37 7a27 	vadd.f32	s14, s14, s15
90017ebc:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
90017ec0:	68a9      	ldr	r1, [r5, #8]
90017ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
90017ec6:	ed95 6a08 	vldr	s12, [r5, #32]
90017eca:	edd5 6a07 	vldr	s13, [r5, #28]
90017ece:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90017ed2:	ee76 6a86 	vadd.f32	s13, s13, s12
90017ed6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90017eda:	e9d5 2300 	ldrd	r2, r3, [r5]
90017ede:	edc5 6a07 	vstr	s13, [r5, #28]
90017ee2:	441a      	add	r2, r3
90017ee4:	696b      	ldr	r3, [r5, #20]
90017ee6:	3301      	adds	r3, #1
90017ee8:	602a      	str	r2, [r5, #0]
90017eea:	616b      	str	r3, [r5, #20]
90017eec:	69ab      	ldr	r3, [r5, #24]
90017eee:	3b01      	subs	r3, #1
90017ef0:	61ab      	str	r3, [r5, #24]
90017ef2:	692b      	ldr	r3, [r5, #16]
90017ef4:	440b      	add	r3, r1
90017ef6:	68e9      	ldr	r1, [r5, #12]
90017ef8:	428b      	cmp	r3, r1
90017efa:	612b      	str	r3, [r5, #16]
90017efc:	db15      	blt.n	90017f2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
90017efe:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
90017f02:	3201      	adds	r2, #1
90017f04:	1a5b      	subs	r3, r3, r1
90017f06:	ee76 6a26 	vadd.f32	s13, s12, s13
90017f0a:	602a      	str	r2, [r5, #0]
90017f0c:	612b      	str	r3, [r5, #16]
90017f0e:	edc5 6a07 	vstr	s13, [r5, #28]
90017f12:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
90017f16:	ee36 7a87 	vadd.f32	s14, s13, s14
90017f1a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90017f1e:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
90017f22:	ee77 7a27 	vadd.f32	s15, s14, s15
90017f26:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90017f2a:	3f01      	subs	r7, #1
90017f2c:	e757      	b.n	90017dde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
90017f2e:	ad39      	add	r5, sp, #228	; 0xe4
90017f30:	ac19      	add	r4, sp, #100	; 0x64
90017f32:	e72d      	b.n	90017d90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
90017f34:	4613      	mov	r3, r2
90017f36:	e744      	b.n	90017dc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
90017f38:	4613      	mov	r3, r2
90017f3a:	9e3b      	ldr	r6, [sp, #236]	; 0xec
90017f3c:	469e      	mov	lr, r3
90017f3e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
90017f42:	461f      	mov	r7, r3
90017f44:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
90017f48:	f04f 0900 	mov.w	r9, #0
90017f4c:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
90017f50:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
90017f54:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
90017f58:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
90017f5c:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
90017f60:	993d      	ldr	r1, [sp, #244]	; 0xf4
90017f62:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
90017f66:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
90017f6a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
90017f6e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
90017f72:	960e      	str	r6, [sp, #56]	; 0x38
90017f74:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
90017f78:	2f00      	cmp	r7, #0
90017f7a:	d146      	bne.n	9001800a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
90017f7c:	449c      	add	ip, r3
90017f7e:	1ad7      	subs	r7, r2, r3
90017f80:	f1b9 0f00 	cmp.w	r9, #0
90017f84:	d009      	beq.n	90017f9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
90017f86:	9039      	str	r0, [sp, #228]	; 0xe4
90017f88:	913d      	str	r1, [sp, #244]	; 0xf4
90017f8a:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
90017f8e:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
90017f92:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
90017f96:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
90017f9a:	991b      	ldr	r1, [sp, #108]	; 0x6c
90017f9c:	f04f 0800 	mov.w	r8, #0
90017fa0:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
90017fa4:	910e      	str	r1, [sp, #56]	; 0x38
90017fa6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
90017faa:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
90017fae:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
90017fb2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
90017fb6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
90017fba:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
90017fbe:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
90017fc2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
90017fc6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
90017fca:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
90017fce:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
90017fd2:	f1be 0f00 	cmp.w	lr, #0
90017fd6:	d030      	beq.n	9001803a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
90017fd8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
90017fda:	4450      	add	r0, sl
90017fdc:	ee76 6aa4 	vadd.f32	s13, s13, s9
90017fe0:	4431      	add	r1, r6
90017fe2:	ee37 7a04 	vadd.f32	s14, s14, s8
90017fe6:	ee77 7aa3 	vadd.f32	s15, s15, s7
90017fea:	4549      	cmp	r1, r9
90017fec:	db08      	blt.n	90018000 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
90017fee:	ee77 7a85 	vadd.f32	s15, s15, s10
90017ff2:	3001      	adds	r0, #1
90017ff4:	ee76 6aa5 	vadd.f32	s13, s13, s11
90017ff8:	eba1 0109 	sub.w	r1, r1, r9
90017ffc:	ee37 7a06 	vadd.f32	s14, s14, s12
90018000:	f10e 3eff 	add.w	lr, lr, #4294967295
90018004:	f04f 0801 	mov.w	r8, #1
90018008:	e7e3      	b.n	90017fd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
9001800a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
9001800c:	4450      	add	r0, sl
9001800e:	ee37 7a24 	vadd.f32	s14, s14, s9
90018012:	4431      	add	r1, r6
90018014:	ee77 7a84 	vadd.f32	s15, s15, s8
90018018:	ee76 6aa3 	vadd.f32	s13, s13, s7
9001801c:	4541      	cmp	r1, r8
9001801e:	db08      	blt.n	90018032 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
90018020:	ee76 6a85 	vadd.f32	s13, s13, s10
90018024:	3001      	adds	r0, #1
90018026:	ee37 7a25 	vadd.f32	s14, s14, s11
9001802a:	eba1 0108 	sub.w	r1, r1, r8
9001802e:	ee77 7a86 	vadd.f32	s15, s15, s12
90018032:	3f01      	subs	r7, #1
90018034:	f04f 0901 	mov.w	r9, #1
90018038:	e79e      	b.n	90017f78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
9001803a:	449c      	add	ip, r3
9001803c:	1aff      	subs	r7, r7, r3
9001803e:	f1b8 0f00 	cmp.w	r8, #0
90018042:	d009      	beq.n	90018058 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
90018044:	9019      	str	r0, [sp, #100]	; 0x64
90018046:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
9001804a:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
9001804e:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
90018052:	911d      	str	r1, [sp, #116]	; 0x74
90018054:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
90018058:	1ad2      	subs	r2, r2, r3
9001805a:	e6b5      	b.n	90017dc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
9001805c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001805e:	681b      	ldr	r3, [r3, #0]
90018060:	b923      	cbnz	r3, 9001806c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90018062:	4b04      	ldr	r3, [pc, #16]	; (90018074 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
90018064:	6818      	ldr	r0, [r3, #0]
90018066:	6803      	ldr	r3, [r0, #0]
90018068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001806a:	4798      	blx	r3
9001806c:	b05b      	add	sp, #364	; 0x16c
9001806e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90018072:	bf00      	nop
90018074:	20026cdc 	.word	0x20026cdc

90018078 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
90018078:	b570      	push	{r4, r5, r6, lr}
9001807a:	4604      	mov	r4, r0
9001807c:	2500      	movs	r5, #0
9001807e:	9804      	ldr	r0, [sp, #16]
90018080:	7223      	strb	r3, [r4, #8]
90018082:	f89d 3014 	ldrb.w	r3, [sp, #20]
90018086:	8025      	strh	r5, [r4, #0]
90018088:	6061      	str	r1, [r4, #4]
9001808a:	7263      	strb	r3, [r4, #9]
9001808c:	60e0      	str	r0, [r4, #12]
9001808e:	8222      	strh	r2, [r4, #16]
90018090:	8265      	strh	r5, [r4, #18]
90018092:	82a5      	strh	r5, [r4, #20]
90018094:	82e5      	strh	r5, [r4, #22]
90018096:	8325      	strh	r5, [r4, #24]
90018098:	8365      	strh	r5, [r4, #26]
9001809a:	83a5      	strh	r5, [r4, #28]
9001809c:	77a5      	strb	r5, [r4, #30]
9001809e:	6803      	ldr	r3, [r0, #0]
900180a0:	695b      	ldr	r3, [r3, #20]
900180a2:	4798      	blx	r3
900180a4:	4606      	mov	r6, r0
900180a6:	b1f8      	cbz	r0, 900180e8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
900180a8:	68e0      	ldr	r0, [r4, #12]
900180aa:	4631      	mov	r1, r6
900180ac:	6803      	ldr	r3, [r0, #0]
900180ae:	68db      	ldr	r3, [r3, #12]
900180b0:	4798      	blx	r3
900180b2:	7b43      	ldrb	r3, [r0, #13]
900180b4:	7a82      	ldrb	r2, [r0, #10]
900180b6:	4605      	mov	r5, r0
900180b8:	005b      	lsls	r3, r3, #1
900180ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
900180be:	4313      	orrs	r3, r2
900180c0:	83a3      	strh	r3, [r4, #28]
900180c2:	7a63      	ldrb	r3, [r4, #9]
900180c4:	2b04      	cmp	r3, #4
900180c6:	d10f      	bne.n	900180e8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
900180c8:	68e0      	ldr	r0, [r4, #12]
900180ca:	462a      	mov	r2, r5
900180cc:	4631      	mov	r1, r6
900180ce:	6803      	ldr	r3, [r0, #0]
900180d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900180d2:	4798      	blx	r3
900180d4:	7b6b      	ldrb	r3, [r5, #13]
900180d6:	005b      	lsls	r3, r3, #1
900180d8:	f403 7280 	and.w	r2, r3, #256	; 0x100
900180dc:	7aab      	ldrb	r3, [r5, #10]
900180de:	4313      	orrs	r3, r2
900180e0:	4418      	add	r0, r3
900180e2:	8ba3      	ldrh	r3, [r4, #28]
900180e4:	4418      	add	r0, r3
900180e6:	83a0      	strh	r0, [r4, #28]
900180e8:	4620      	mov	r0, r4
900180ea:	bd70      	pop	{r4, r5, r6, pc}

900180ec <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
900180ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900180f0:	2400      	movs	r4, #0
900180f2:	b085      	sub	sp, #20
900180f4:	4681      	mov	r9, r0
900180f6:	4688      	mov	r8, r1
900180f8:	4692      	mov	sl, r2
900180fa:	469b      	mov	fp, r3
900180fc:	4627      	mov	r7, r4
900180fe:	4625      	mov	r5, r4
90018100:	4626      	mov	r6, r4
90018102:	4554      	cmp	r4, sl
90018104:	da2a      	bge.n	9001815c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90018106:	2300      	movs	r3, #0
90018108:	9303      	str	r3, [sp, #12]
9001810a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
9001810e:	429d      	cmp	r5, r3
90018110:	d004      	beq.n	9001811c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
90018112:	f242 030b 	movw	r3, #8203	; 0x200b
90018116:	429d      	cmp	r5, r3
90018118:	bf18      	it	ne
9001811a:	462f      	movne	r7, r5
9001811c:	ab03      	add	r3, sp, #12
9001811e:	4642      	mov	r2, r8
90018120:	4659      	mov	r1, fp
90018122:	4648      	mov	r0, r9
90018124:	f002 ff88 	bl	9001b038 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90018128:	4605      	mov	r5, r0
9001812a:	b1b8      	cbz	r0, 9001815c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
9001812c:	280a      	cmp	r0, #10
9001812e:	d015      	beq.n	9001815c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90018130:	9a03      	ldr	r2, [sp, #12]
90018132:	b18a      	cbz	r2, 90018158 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
90018134:	7b50      	ldrb	r0, [r2, #13]
90018136:	4639      	mov	r1, r7
90018138:	7a93      	ldrb	r3, [r2, #10]
9001813a:	0040      	lsls	r0, r0, #1
9001813c:	8895      	ldrh	r5, [r2, #4]
9001813e:	f400 7080 	and.w	r0, r0, #256	; 0x100
90018142:	4303      	orrs	r3, r0
90018144:	4640      	mov	r0, r8
90018146:	9301      	str	r3, [sp, #4]
90018148:	f8d8 3000 	ldr.w	r3, [r8]
9001814c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9001814e:	4798      	blx	r3
90018150:	9b01      	ldr	r3, [sp, #4]
90018152:	4418      	add	r0, r3
90018154:	4406      	add	r6, r0
90018156:	b2b6      	uxth	r6, r6
90018158:	3401      	adds	r4, #1
9001815a:	e7d2      	b.n	90018102 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
9001815c:	4630      	mov	r0, r6
9001815e:	b005      	add	sp, #20
90018160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90018164 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
90018164:	2a02      	cmp	r2, #2
90018166:	b530      	push	{r4, r5, lr}
90018168:	d011      	beq.n	9001818e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
9001816a:	2a03      	cmp	r2, #3
9001816c:	d01c      	beq.n	900181a8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
9001816e:	2a01      	cmp	r2, #1
90018170:	d10c      	bne.n	9001818c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
90018172:	888b      	ldrh	r3, [r1, #4]
90018174:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
90018178:	8801      	ldrh	r1, [r0, #0]
9001817a:	1a9b      	subs	r3, r3, r2
9001817c:	8844      	ldrh	r4, [r0, #2]
9001817e:	1a5b      	subs	r3, r3, r1
90018180:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
90018184:	8004      	strh	r4, [r0, #0]
90018186:	8043      	strh	r3, [r0, #2]
90018188:	8081      	strh	r1, [r0, #4]
9001818a:	80c2      	strh	r2, [r0, #6]
9001818c:	bd30      	pop	{r4, r5, pc}
9001818e:	88cb      	ldrh	r3, [r1, #6]
90018190:	88c2      	ldrh	r2, [r0, #6]
90018192:	1a9b      	subs	r3, r3, r2
90018194:	8842      	ldrh	r2, [r0, #2]
90018196:	1a9b      	subs	r3, r3, r2
90018198:	888a      	ldrh	r2, [r1, #4]
9001819a:	8881      	ldrh	r1, [r0, #4]
9001819c:	8043      	strh	r3, [r0, #2]
9001819e:	1a52      	subs	r2, r2, r1
900181a0:	8801      	ldrh	r1, [r0, #0]
900181a2:	1a52      	subs	r2, r2, r1
900181a4:	8002      	strh	r2, [r0, #0]
900181a6:	e7f1      	b.n	9001818c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
900181a8:	88cb      	ldrh	r3, [r1, #6]
900181aa:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
900181ae:	8841      	ldrh	r1, [r0, #2]
900181b0:	1a9b      	subs	r3, r3, r2
900181b2:	f9b0 5000 	ldrsh.w	r5, [r0]
900181b6:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
900181ba:	1a5b      	subs	r3, r3, r1
900181bc:	8045      	strh	r5, [r0, #2]
900181be:	8082      	strh	r2, [r0, #4]
900181c0:	8003      	strh	r3, [r0, #0]
900181c2:	80c4      	strh	r4, [r0, #6]
900181c4:	e7e2      	b.n	9001818c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

900181c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
900181c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900181ca:	b09f      	sub	sp, #124	; 0x7c
900181cc:	9116      	str	r1, [sp, #88]	; 0x58
900181ce:	9317      	str	r3, [sp, #92]	; 0x5c
900181d0:	9929      	ldr	r1, [sp, #164]	; 0xa4
900181d2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
900181d4:	8809      	ldrh	r1, [r1, #0]
900181d6:	889b      	ldrh	r3, [r3, #4]
900181d8:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
900181dc:	440b      	add	r3, r1
900181de:	9212      	str	r2, [sp, #72]	; 0x48
900181e0:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
900181e4:	b21b      	sxth	r3, r3
900181e6:	9011      	str	r0, [sp, #68]	; 0x44
900181e8:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
900181ec:	9310      	str	r3, [sp, #64]	; 0x40
900181ee:	f8d8 3000 	ldr.w	r3, [r8]
900181f2:	7a59      	ldrb	r1, [r3, #9]
900181f4:	7a1b      	ldrb	r3, [r3, #8]
900181f6:	9114      	str	r1, [sp, #80]	; 0x50
900181f8:	9315      	str	r3, [sp, #84]	; 0x54
900181fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900181fc:	f9b3 5000 	ldrsh.w	r5, [r3]
90018200:	2a00      	cmp	r2, #0
90018202:	d067      	beq.n	900182d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
90018204:	f898 3010 	ldrb.w	r3, [r8, #16]
90018208:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
9001820a:	2b04      	cmp	r3, #4
9001820c:	bf14      	ite	ne
9001820e:	2301      	movne	r3, #1
90018210:	2302      	moveq	r3, #2
90018212:	4413      	add	r3, r2
90018214:	f04f 0900 	mov.w	r9, #0
90018218:	930f      	str	r3, [sp, #60]	; 0x3c
9001821a:	464c      	mov	r4, r9
9001821c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
90018220:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
90018224:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
90018228:	4293      	cmp	r3, r2
9001822a:	f280 808c 	bge.w	90018346 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
9001822e:	2300      	movs	r3, #0
90018230:	931c      	str	r3, [sp, #112]	; 0x70
90018232:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90018236:	429c      	cmp	r4, r3
90018238:	d006      	beq.n	90018248 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
9001823a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001823c:	f242 020b 	movw	r2, #8203	; 0x200b
90018240:	4294      	cmp	r4, r2
90018242:	bf18      	it	ne
90018244:	4623      	movne	r3, r4
90018246:	930d      	str	r3, [sp, #52]	; 0x34
90018248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001824a:	992d      	ldr	r1, [sp, #180]	; 0xb4
9001824c:	f8d8 2000 	ldr.w	r2, [r8]
90018250:	428b      	cmp	r3, r1
90018252:	db41      	blt.n	900182d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
90018254:	6813      	ldr	r3, [r2, #0]
90018256:	4610      	mov	r0, r2
90018258:	695b      	ldr	r3, [r3, #20]
9001825a:	4798      	blx	r3
9001825c:	4604      	mov	r4, r0
9001825e:	f8d8 0000 	ldr.w	r0, [r8]
90018262:	aa1d      	add	r2, sp, #116	; 0x74
90018264:	4621      	mov	r1, r4
90018266:	6803      	ldr	r3, [r0, #0]
90018268:	689e      	ldr	r6, [r3, #8]
9001826a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
9001826e:	47b0      	blx	r6
90018270:	901c      	str	r0, [sp, #112]	; 0x70
90018272:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90018276:	429c      	cmp	r4, r3
90018278:	f000 80ea 	beq.w	90018450 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
9001827c:	f242 030b 	movw	r3, #8203	; 0x200b
90018280:	429c      	cmp	r4, r3
90018282:	f000 80e5 	beq.w	90018450 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
90018286:	2c00      	cmp	r4, #0
90018288:	f000 80f7 	beq.w	9001847a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
9001828c:	2c0a      	cmp	r4, #10
9001828e:	d060      	beq.n	90018352 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
90018290:	9a1c      	ldr	r2, [sp, #112]	; 0x70
90018292:	b36a      	cbz	r2, 900182f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
90018294:	8894      	ldrh	r4, [r2, #4]
90018296:	f1bb 0f00 	cmp.w	fp, #0
9001829a:	d03b      	beq.n	90018314 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
9001829c:	f892 900d 	ldrb.w	r9, [r2, #13]
900182a0:	f1bb 0f01 	cmp.w	fp, #1
900182a4:	ea4f 0949 	mov.w	r9, r9, lsl #1
900182a8:	f409 7380 	and.w	r3, r9, #256	; 0x100
900182ac:	f892 900a 	ldrb.w	r9, [r2, #10]
900182b0:	ea49 0903 	orr.w	r9, r9, r3
900182b4:	d134      	bne.n	90018320 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
900182b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900182b8:	eba5 0509 	sub.w	r5, r5, r9
900182bc:	2b00      	cmp	r3, #0
900182be:	d14f      	bne.n	90018360 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
900182c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
900182c2:	eb09 0305 	add.w	r3, r9, r5
900182c6:	4413      	add	r3, r2
900182c8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
900182ca:	f9b2 2000 	ldrsh.w	r2, [r2]
900182ce:	4293      	cmp	r3, r2
900182d0:	da51      	bge.n	90018376 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
900182d2:	e038      	b.n	90018346 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
900182d4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
900182d6:	e79d      	b.n	90018214 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
900182d8:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
900182dc:	4659      	mov	r1, fp
900182de:	982c      	ldr	r0, [sp, #176]	; 0xb0
900182e0:	9301      	str	r3, [sp, #4]
900182e2:	ab1d      	add	r3, sp, #116	; 0x74
900182e4:	9300      	str	r3, [sp, #0]
900182e6:	ab1c      	add	r3, sp, #112	; 0x70
900182e8:	f002 fefe 	bl	9001b0e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
900182ec:	4604      	mov	r4, r0
900182ee:	e7c0      	b.n	90018272 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
900182f0:	f8d8 0000 	ldr.w	r0, [r8]
900182f4:	6803      	ldr	r3, [r0, #0]
900182f6:	691b      	ldr	r3, [r3, #16]
900182f8:	4798      	blx	r3
900182fa:	f64f 63ff 	movw	r3, #65279	; 0xfeff
900182fe:	4298      	cmp	r0, r3
90018300:	f000 80a6 	beq.w	90018450 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
90018304:	f242 030b 	movw	r3, #8203	; 0x200b
90018308:	4298      	cmp	r0, r3
9001830a:	f000 80a1 	beq.w	90018450 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
9001830e:	f1bb 0f00 	cmp.w	fp, #0
90018312:	d100      	bne.n	90018316 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
90018314:	444d      	add	r5, r9
90018316:	9a1c      	ldr	r2, [sp, #112]	; 0x70
90018318:	2a00      	cmp	r2, #0
9001831a:	d1bf      	bne.n	9001829c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
9001831c:	4691      	mov	r9, r2
9001831e:	e097      	b.n	90018450 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
90018320:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90018322:	2b00      	cmp	r3, #0
90018324:	f000 80ab 	beq.w	9001847e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
90018328:	f1bb 0f00 	cmp.w	fp, #0
9001832c:	d118      	bne.n	90018360 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
9001832e:	f8d8 0000 	ldr.w	r0, [r8]
90018332:	990d      	ldr	r1, [sp, #52]	; 0x34
90018334:	6803      	ldr	r3, [r0, #0]
90018336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90018338:	4798      	blx	r3
9001833a:	4405      	add	r5, r0
9001833c:	9b15      	ldr	r3, [sp, #84]	; 0x54
9001833e:	9a10      	ldr	r2, [sp, #64]	; 0x40
90018340:	1aeb      	subs	r3, r5, r3
90018342:	4293      	cmp	r3, r2
90018344:	dd17      	ble.n	90018376 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
90018346:	2c00      	cmp	r4, #0
90018348:	f000 8097 	beq.w	9001847a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
9001834c:	2c0a      	cmp	r4, #10
9001834e:	f040 8085 	bne.w	9001845c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
90018352:	240a      	movs	r4, #10
90018354:	fab4 f084 	clz	r0, r4
90018358:	0940      	lsrs	r0, r0, #5
9001835a:	b01f      	add	sp, #124	; 0x7c
9001835c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90018360:	f8d8 0000 	ldr.w	r0, [r8]
90018364:	990d      	ldr	r1, [sp, #52]	; 0x34
90018366:	6803      	ldr	r3, [r0, #0]
90018368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9001836a:	4798      	blx	r3
9001836c:	f1bb 0f01 	cmp.w	fp, #1
90018370:	eba5 0500 	sub.w	r5, r5, r0
90018374:	d0a4      	beq.n	900182c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
90018376:	981c      	ldr	r0, [sp, #112]	; 0x70
90018378:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001837a:	f990 1009 	ldrsb.w	r1, [r0, #9]
9001837e:	f9b3 6000 	ldrsh.w	r6, [r3]
90018382:	7b43      	ldrb	r3, [r0, #13]
90018384:	4429      	add	r1, r5
90018386:	015b      	lsls	r3, r3, #5
90018388:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001838c:	7983      	ldrb	r3, [r0, #6]
9001838e:	4313      	orrs	r3, r2
90018390:	440b      	add	r3, r1
90018392:	42b3      	cmp	r3, r6
90018394:	db5c      	blt.n	90018450 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
90018396:	9b10      	ldr	r3, [sp, #64]	; 0x40
90018398:	4299      	cmp	r1, r3
9001839a:	da59      	bge.n	90018450 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
9001839c:	f8d8 0000 	ldr.w	r0, [r8]
900183a0:	42ae      	cmp	r6, r5
900183a2:	6803      	ldr	r3, [r0, #0]
900183a4:	bfcc      	ite	gt
900183a6:	1b76      	subgt	r6, r6, r5
900183a8:	2600      	movle	r6, #0
900183aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900183ac:	bfc8      	it	gt
900183ae:	b2b6      	uxthgt	r6, r6
900183b0:	4798      	blx	r3
900183b2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900183b4:	7b5a      	ldrb	r2, [r3, #13]
900183b6:	00d1      	lsls	r1, r2, #3
900183b8:	f401 7780 	and.w	r7, r1, #256	; 0x100
900183bc:	7a19      	ldrb	r1, [r3, #8]
900183be:	4339      	orrs	r1, r7
900183c0:	0657      	lsls	r7, r2, #25
900183c2:	9f17      	ldr	r7, [sp, #92]	; 0x5c
900183c4:	bf48      	it	mi
900183c6:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
900183ca:	4407      	add	r7, r0
900183cc:	bf48      	it	mi
900183ce:	b209      	sxthmi	r1, r1
900183d0:	1a7f      	subs	r7, r7, r1
900183d2:	9929      	ldr	r1, [sp, #164]	; 0xa4
900183d4:	b2bf      	uxth	r7, r7
900183d6:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
900183da:	fa0f fa87 	sxth.w	sl, r7
900183de:	4551      	cmp	r1, sl
900183e0:	dd3a      	ble.n	90018458 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
900183e2:	0112      	lsls	r2, r2, #4
900183e4:	79d8      	ldrb	r0, [r3, #7]
900183e6:	f402 7280 	and.w	r2, r2, #256	; 0x100
900183ea:	4302      	orrs	r2, r0
900183ec:	4492      	add	sl, r2
900183ee:	4551      	cmp	r1, sl
900183f0:	dc2e      	bgt.n	90018450 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
900183f2:	1bcf      	subs	r7, r1, r7
900183f4:	468a      	mov	sl, r1
900183f6:	b2bf      	uxth	r7, r7
900183f8:	9319      	str	r3, [sp, #100]	; 0x64
900183fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
900183fc:	f8d8 0000 	ldr.w	r0, [r8]
90018400:	681a      	ldr	r2, [r3, #0]
90018402:	6801      	ldr	r1, [r0, #0]
90018404:	6c53      	ldr	r3, [r2, #68]	; 0x44
90018406:	9a1d      	ldr	r2, [sp, #116]	; 0x74
90018408:	9313      	str	r3, [sp, #76]	; 0x4c
9001840a:	9218      	str	r2, [sp, #96]	; 0x60
9001840c:	6b89      	ldr	r1, [r1, #56]	; 0x38
9001840e:	4788      	blx	r1
90018410:	f898 1006 	ldrb.w	r1, [r8, #6]
90018414:	9b19      	ldr	r3, [sp, #100]	; 0x64
90018416:	910b      	str	r1, [sp, #44]	; 0x2c
90018418:	f898 100e 	ldrb.w	r1, [r8, #14]
9001841c:	9a18      	ldr	r2, [sp, #96]	; 0x60
9001841e:	910a      	str	r1, [sp, #40]	; 0x28
90018420:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
90018424:	9109      	str	r1, [sp, #36]	; 0x24
90018426:	f8d8 1008 	ldr.w	r1, [r8, #8]
9001842a:	9305      	str	r3, [sp, #20]
9001842c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001842e:	9206      	str	r2, [sp, #24]
90018430:	e9cd a601 	strd	sl, r6, [sp, #4]
90018434:	442e      	add	r6, r5
90018436:	e9cd 7303 	strd	r7, r3, [sp, #12]
9001843a:	b236      	sxth	r6, r6
9001843c:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001843e:	e9cd 0107 	strd	r0, r1, [sp, #28]
90018442:	9600      	str	r6, [sp, #0]
90018444:	9916      	ldr	r1, [sp, #88]	; 0x58
90018446:	681a      	ldr	r2, [r3, #0]
90018448:	9811      	ldr	r0, [sp, #68]	; 0x44
9001844a:	685b      	ldr	r3, [r3, #4]
9001844c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001844e:	47b0      	blx	r6
90018450:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018452:	3301      	adds	r3, #1
90018454:	930e      	str	r3, [sp, #56]	; 0x38
90018456:	e6e5      	b.n	90018224 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
90018458:	2700      	movs	r7, #0
9001845a:	e7cd      	b.n	900183f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
9001845c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9001845e:	3501      	adds	r5, #1
90018460:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
90018462:	429d      	cmp	r5, r3
90018464:	f6bf af76 	bge.w	90018354 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
90018468:	4659      	mov	r1, fp
9001846a:	982c      	ldr	r0, [sp, #176]	; 0xb0
9001846c:	f7eb f83a 	bl	900034e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90018470:	4604      	mov	r4, r0
90018472:	b110      	cbz	r0, 9001847a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
90018474:	280a      	cmp	r0, #10
90018476:	d1f2      	bne.n	9001845e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
90018478:	e76b      	b.n	90018352 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
9001847a:	2400      	movs	r4, #0
9001847c:	e76a      	b.n	90018354 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
9001847e:	f1bb 0f00 	cmp.w	fp, #0
90018482:	f43f af5b 	beq.w	9001833c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
90018486:	e776      	b.n	90018376 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

90018488 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
90018488:	b530      	push	{r4, r5, lr}
9001848a:	8a44      	ldrh	r4, [r0, #18]
9001848c:	8ac5      	ldrh	r5, [r0, #22]
9001848e:	82c3      	strh	r3, [r0, #22]
90018490:	442c      	add	r4, r5
90018492:	1ae4      	subs	r4, r4, r3
90018494:	8b03      	ldrh	r3, [r0, #24]
90018496:	8244      	strh	r4, [r0, #18]
90018498:	8a84      	ldrh	r4, [r0, #20]
9001849a:	4422      	add	r2, r4
9001849c:	440c      	add	r4, r1
9001849e:	1a59      	subs	r1, r3, r1
900184a0:	8342      	strh	r2, [r0, #26]
900184a2:	8284      	strh	r4, [r0, #20]
900184a4:	8301      	strh	r1, [r0, #24]
900184a6:	bd30      	pop	{r4, r5, pc}

900184a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
900184a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900184ac:	7a43      	ldrb	r3, [r0, #9]
900184ae:	b087      	sub	sp, #28
900184b0:	4604      	mov	r4, r0
900184b2:	460f      	mov	r7, r1
900184b4:	1eda      	subs	r2, r3, #3
900184b6:	b2d2      	uxtb	r2, r2
900184b8:	2900      	cmp	r1, #0
900184ba:	d036      	beq.n	9001852a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
900184bc:	2a01      	cmp	r2, #1
900184be:	d932      	bls.n	90018526 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
900184c0:	1e58      	subs	r0, r3, #1
900184c2:	f1d0 0b00 	rsbs	fp, r0, #0
900184c6:	eb4b 0b00 	adc.w	fp, fp, r0
900184ca:	1e99      	subs	r1, r3, #2
900184cc:	424b      	negs	r3, r1
900184ce:	414b      	adcs	r3, r1
900184d0:	9303      	str	r3, [sp, #12]
900184d2:	2300      	movs	r3, #0
900184d4:	e9cd 3301 	strd	r3, r3, [sp, #4]
900184d8:	2500      	movs	r5, #0
900184da:	f242 0a0b 	movw	sl, #8203	; 0x200b
900184de:	46a9      	mov	r9, r5
900184e0:	8265      	strh	r5, [r4, #18]
900184e2:	82a5      	strh	r5, [r4, #20]
900184e4:	2300      	movs	r3, #0
900184e6:	9305      	str	r3, [sp, #20]
900184e8:	8823      	ldrh	r3, [r4, #0]
900184ea:	2b20      	cmp	r3, #32
900184ec:	d02b      	beq.n	90018546 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
900184ee:	eba3 020a 	sub.w	r2, r3, sl
900184f2:	4256      	negs	r6, r2
900184f4:	4156      	adcs	r6, r2
900184f6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
900184fa:	4293      	cmp	r3, r2
900184fc:	d004      	beq.n	90018508 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
900184fe:	4553      	cmp	r3, sl
90018500:	bf16      	itet	ne
90018502:	4699      	movne	r9, r3
90018504:	2601      	moveq	r6, #1
90018506:	2600      	movne	r6, #0
90018508:	ab05      	add	r3, sp, #20
9001850a:	68e2      	ldr	r2, [r4, #12]
9001850c:	7a21      	ldrb	r1, [r4, #8]
9001850e:	6860      	ldr	r0, [r4, #4]
90018510:	f002 fd92 	bl	9001b038 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90018514:	8020      	strh	r0, [r4, #0]
90018516:	b9c8      	cbnz	r0, 9001854c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
90018518:	8b22      	ldrh	r2, [r4, #24]
9001851a:	2300      	movs	r3, #0
9001851c:	4611      	mov	r1, r2
9001851e:	4620      	mov	r0, r4
90018520:	f7ff ffb2 	bl	90018488 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
90018524:	e066      	b.n	900185f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
90018526:	468b      	mov	fp, r1
90018528:	e7cf      	b.n	900184ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
9001852a:	3b01      	subs	r3, #1
9001852c:	2a01      	cmp	r2, #1
9001852e:	9103      	str	r1, [sp, #12]
90018530:	468b      	mov	fp, r1
90018532:	bf8c      	ite	hi
90018534:	2200      	movhi	r2, #0
90018536:	2201      	movls	r2, #1
90018538:	2b01      	cmp	r3, #1
9001853a:	9202      	str	r2, [sp, #8]
9001853c:	bf8c      	ite	hi
9001853e:	2300      	movhi	r3, #0
90018540:	2301      	movls	r3, #1
90018542:	9301      	str	r3, [sp, #4]
90018544:	e7c8      	b.n	900184d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
90018546:	4699      	mov	r9, r3
90018548:	2601      	movs	r6, #1
9001854a:	e7dd      	b.n	90018508 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
9001854c:	8ae3      	ldrh	r3, [r4, #22]
9001854e:	280a      	cmp	r0, #10
90018550:	f103 0301 	add.w	r3, r3, #1
90018554:	82e3      	strh	r3, [r4, #22]
90018556:	d0df      	beq.n	90018518 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
90018558:	9a05      	ldr	r2, [sp, #20]
9001855a:	bb42      	cbnz	r2, 900185ae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
9001855c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90018560:	4298      	cmp	r0, r3
90018562:	d001      	beq.n	90018568 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
90018564:	4550      	cmp	r0, sl
90018566:	d1bd      	bne.n	900184e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
90018568:	8823      	ldrh	r3, [r4, #0]
9001856a:	8b21      	ldrh	r1, [r4, #24]
9001856c:	2b20      	cmp	r3, #32
9001856e:	d001      	beq.n	90018574 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
90018570:	4553      	cmp	r3, sl
90018572:	d131      	bne.n	900185d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
90018574:	2e00      	cmp	r6, #0
90018576:	bf0a      	itet	eq
90018578:	460d      	moveq	r5, r1
9001857a:	4630      	movne	r0, r6
9001857c:	2001      	moveq	r0, #1
9001857e:	440a      	add	r2, r1
90018580:	8aa3      	ldrh	r3, [r4, #20]
90018582:	f8b4 c010 	ldrh.w	ip, [r4, #16]
90018586:	b292      	uxth	r2, r2
90018588:	8322      	strh	r2, [r4, #24]
9001858a:	4413      	add	r3, r2
9001858c:	2f00      	cmp	r7, #0
9001858e:	d03a      	beq.n	90018606 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
90018590:	f1bb 0f00 	cmp.w	fp, #0
90018594:	d102      	bne.n	9001859c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
90018596:	9903      	ldr	r1, [sp, #12]
90018598:	b301      	cbz	r1, 900185dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
9001859a:	b1f8      	cbz	r0, 900185dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
9001859c:	8ba1      	ldrh	r1, [r4, #28]
9001859e:	4419      	add	r1, r3
900185a0:	458c      	cmp	ip, r1
900185a2:	da2a      	bge.n	900185fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
900185a4:	8a61      	ldrh	r1, [r4, #18]
900185a6:	b341      	cbz	r1, 900185fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
900185a8:	4563      	cmp	r3, ip
900185aa:	dd9b      	ble.n	900184e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
900185ac:	e01c      	b.n	900185e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
900185ae:	8893      	ldrh	r3, [r2, #4]
900185b0:	4649      	mov	r1, r9
900185b2:	8023      	strh	r3, [r4, #0]
900185b4:	f892 800d 	ldrb.w	r8, [r2, #13]
900185b8:	ea4f 0848 	mov.w	r8, r8, lsl #1
900185bc:	f408 7080 	and.w	r0, r8, #256	; 0x100
900185c0:	f892 800a 	ldrb.w	r8, [r2, #10]
900185c4:	ea48 0800 	orr.w	r8, r8, r0
900185c8:	68e0      	ldr	r0, [r4, #12]
900185ca:	6803      	ldr	r3, [r0, #0]
900185cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900185ce:	4798      	blx	r3
900185d0:	eb08 0200 	add.w	r2, r8, r0
900185d4:	b292      	uxth	r2, r2
900185d6:	e7c7      	b.n	90018568 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
900185d8:	2000      	movs	r0, #0
900185da:	e7d0      	b.n	9001857e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
900185dc:	4563      	cmp	r3, ip
900185de:	dd81      	ble.n	900184e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
900185e0:	8a63      	ldrh	r3, [r4, #18]
900185e2:	2b00      	cmp	r3, #0
900185e4:	f43f af7e 	beq.w	900184e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
900185e8:	2301      	movs	r3, #1
900185ea:	8ba2      	ldrh	r2, [r4, #28]
900185ec:	77a3      	strb	r3, [r4, #30]
900185ee:	8b63      	ldrh	r3, [r4, #26]
900185f0:	4413      	add	r3, r2
900185f2:	8363      	strh	r3, [r4, #26]
900185f4:	b007      	add	sp, #28
900185f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900185fa:	2300      	movs	r3, #0
900185fc:	4611      	mov	r1, r2
900185fe:	4620      	mov	r0, r4
90018600:	f7ff ff42 	bl	90018488 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
90018604:	e76e      	b.n	900184e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
90018606:	4563      	cmp	r3, ip
90018608:	dd14      	ble.n	90018634 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
9001860a:	9b02      	ldr	r3, [sp, #8]
9001860c:	b113      	cbz	r3, 90018614 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
9001860e:	2301      	movs	r3, #1
90018610:	460a      	mov	r2, r1
90018612:	e783      	b.n	9001851c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
90018614:	9b01      	ldr	r3, [sp, #4]
90018616:	2b00      	cmp	r3, #0
90018618:	f43f af64 	beq.w	900184e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
9001861c:	2800      	cmp	r0, #0
9001861e:	f47f af61 	bne.w	900184e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
90018622:	b116      	cbz	r6, 9001862a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
90018624:	2301      	movs	r3, #1
90018626:	462a      	mov	r2, r5
90018628:	e779      	b.n	9001851e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
9001862a:	8a63      	ldrh	r3, [r4, #18]
9001862c:	2b00      	cmp	r3, #0
9001862e:	f43f af59 	beq.w	900184e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
90018632:	e7df      	b.n	900185f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
90018634:	2800      	cmp	r0, #0
90018636:	f47f af55 	bne.w	900184e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
9001863a:	2e00      	cmp	r6, #0
9001863c:	f43f af52 	beq.w	900184e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
90018640:	2301      	movs	r3, #1
90018642:	462a      	mov	r2, r5
90018644:	e7db      	b.n	900185fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

90018646 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
90018646:	b530      	push	{r4, r5, lr}
90018648:	4605      	mov	r5, r0
9001864a:	b08b      	sub	sp, #44	; 0x2c
9001864c:	b191      	cbz	r1, 90018674 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
9001864e:	2401      	movs	r4, #1
90018650:	e9cd 3100 	strd	r3, r1, [sp]
90018654:	4613      	mov	r3, r2
90018656:	4601      	mov	r1, r0
90018658:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
9001865c:	a802      	add	r0, sp, #8
9001865e:	f7ff fd0b 	bl	90018078 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
90018662:	2100      	movs	r1, #0
90018664:	a802      	add	r0, sp, #8
90018666:	f7ff ff1f 	bl	900184a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
9001866a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
9001866e:	b163      	cbz	r3, 9001868a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
90018670:	3401      	adds	r4, #1
90018672:	e7f6      	b.n	90018662 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
90018674:	2401      	movs	r4, #1
90018676:	f002 fdd7 	bl	9001b228 <_ZN8touchgfx12TextProvider11getNextCharEv>
9001867a:	280a      	cmp	r0, #10
9001867c:	4628      	mov	r0, r5
9001867e:	bf08      	it	eq
90018680:	3401      	addeq	r4, #1
90018682:	f002 fdd1 	bl	9001b228 <_ZN8touchgfx12TextProvider11getNextCharEv>
90018686:	2800      	cmp	r0, #0
90018688:	d1f7      	bne.n	9001867a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
9001868a:	b2a0      	uxth	r0, r4
9001868c:	b00b      	add	sp, #44	; 0x2c
9001868e:	bd30      	pop	{r4, r5, pc}

90018690 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
90018690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018694:	b0db      	sub	sp, #364	; 0x16c
90018696:	4689      	mov	r9, r1
90018698:	461c      	mov	r4, r3
9001869a:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
9001869e:	900a      	str	r0, [sp, #40]	; 0x28
900186a0:	f1ba 0f00 	cmp.w	sl, #0
900186a4:	f000 80a5 	beq.w	900187f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
900186a8:	681b      	ldr	r3, [r3, #0]
900186aa:	2b00      	cmp	r3, #0
900186ac:	f000 80a1 	beq.w	900187f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
900186b0:	7ba3      	ldrb	r3, [r4, #14]
900186b2:	2b00      	cmp	r3, #0
900186b4:	f000 809d 	beq.w	900187f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
900186b8:	f10d 0830 	add.w	r8, sp, #48	; 0x30
900186bc:	6810      	ldr	r0, [r2, #0]
900186be:	6851      	ldr	r1, [r2, #4]
900186c0:	2500      	movs	r5, #0
900186c2:	4643      	mov	r3, r8
900186c4:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
900186c8:	950e      	str	r5, [sp, #56]	; 0x38
900186ca:	af18      	add	r7, sp, #96	; 0x60
900186cc:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
900186d0:	79a2      	ldrb	r2, [r4, #6]
900186d2:	c303      	stmia	r3!, {r0, r1}
900186d4:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
900186d8:	a90e      	add	r1, sp, #56	; 0x38
900186da:	4640      	mov	r0, r8
900186dc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
900186e0:	f7ff fd40 	bl	90018164 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
900186e4:	a90e      	add	r1, sp, #56	; 0x38
900186e6:	79a2      	ldrb	r2, [r4, #6]
900186e8:	4608      	mov	r0, r1
900186ea:	f7ff fd3b 	bl	90018164 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
900186ee:	4638      	mov	r0, r7
900186f0:	f002 f963 	bl	9001a9ba <_ZN8touchgfx12TextProviderC1Ev>
900186f4:	6820      	ldr	r0, [r4, #0]
900186f6:	6803      	ldr	r3, [r0, #0]
900186f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900186fa:	4798      	blx	r3
900186fc:	9a65      	ldr	r2, [sp, #404]	; 0x194
900186fe:	4603      	mov	r3, r0
90018700:	4651      	mov	r1, sl
90018702:	4638      	mov	r0, r7
90018704:	f002 f99e 	bl	9001aa44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
90018708:	7923      	ldrb	r3, [r4, #4]
9001870a:	6820      	ldr	r0, [r4, #0]
9001870c:	9308      	str	r3, [sp, #32]
9001870e:	6803      	ldr	r3, [r0, #0]
90018710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90018712:	4798      	blx	r3
90018714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90018718:	181e      	adds	r6, r3, r0
9001871a:	42ae      	cmp	r6, r5
9001871c:	dd06      	ble.n	9001872c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
9001871e:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
90018722:	4282      	cmp	r2, r0
90018724:	bfa4      	itt	ge
90018726:	189d      	addge	r5, r3, r2
90018728:	fb95 f5f6 	sdivge	r5, r5, r6
9001872c:	a82e      	add	r0, sp, #184	; 0xb8
9001872e:	f002 f944 	bl	9001a9ba <_ZN8touchgfx12TextProviderC1Ev>
90018732:	7c23      	ldrb	r3, [r4, #16]
90018734:	b14b      	cbz	r3, 9001874a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
90018736:	6820      	ldr	r0, [r4, #0]
90018738:	6803      	ldr	r3, [r0, #0]
9001873a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9001873c:	4798      	blx	r3
9001873e:	9a65      	ldr	r2, [sp, #404]	; 0x194
90018740:	4603      	mov	r3, r0
90018742:	4651      	mov	r1, sl
90018744:	a82e      	add	r0, sp, #184	; 0xb8
90018746:	f002 f97d 	bl	9001aa44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
9001874a:	7c21      	ldrb	r1, [r4, #16]
9001874c:	a810      	add	r0, sp, #64	; 0x40
9001874e:	7963      	ldrb	r3, [r4, #5]
90018750:	9101      	str	r1, [sp, #4]
90018752:	6821      	ldr	r1, [r4, #0]
90018754:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
90018758:	9100      	str	r1, [sp, #0]
9001875a:	a92e      	add	r1, sp, #184	; 0xb8
9001875c:	f7ff fc8c 	bl	90018078 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
90018760:	7c23      	ldrb	r3, [r4, #16]
90018762:	b9bb      	cbnz	r3, 90018794 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
90018764:	fa1f fa86 	uxth.w	sl, r6
90018768:	2d00      	cmp	r5, #0
9001876a:	dd45      	ble.n	900187f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
9001876c:	4638      	mov	r0, r7
9001876e:	f002 fd5b 	bl	9001b228 <_ZN8touchgfx12TextProvider11getNextCharEv>
90018772:	2800      	cmp	r0, #0
90018774:	d03d      	beq.n	900187f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
90018776:	280a      	cmp	r0, #10
90018778:	d1f6      	bne.n	90018768 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
9001877a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
9001877e:	3d01      	subs	r5, #1
90018780:	4453      	add	r3, sl
90018782:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
90018786:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
9001878a:	eba3 030a 	sub.w	r3, r3, sl
9001878e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
90018792:	e7e9      	b.n	90018768 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
90018794:	0073      	lsls	r3, r6, #1
90018796:	f64f 7bff 	movw	fp, #65535	; 0xffff
9001879a:	fa1f fa86 	uxth.w	sl, r6
9001879e:	9309      	str	r3, [sp, #36]	; 0x24
900187a0:	2d00      	cmp	r5, #0
900187a2:	dd29      	ble.n	900187f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
900187a4:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
900187a8:	a810      	add	r0, sp, #64	; 0x40
900187aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
900187ac:	428b      	cmp	r3, r1
900187ae:	bfd4      	ite	le
900187b0:	2100      	movle	r1, #0
900187b2:	2101      	movgt	r1, #1
900187b4:	f7ff fe78 	bl	900184a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
900187b8:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
900187bc:	3b01      	subs	r3, #1
900187be:	b29b      	uxth	r3, r3
900187c0:	455b      	cmp	r3, fp
900187c2:	930b      	str	r3, [sp, #44]	; 0x2c
900187c4:	d005      	beq.n	900187d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
900187c6:	7961      	ldrb	r1, [r4, #5]
900187c8:	4638      	mov	r0, r7
900187ca:	f7ea fe8b 	bl	900034e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
900187ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
900187d0:	e7f4      	b.n	900187bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
900187d2:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
900187d6:	3d01      	subs	r5, #1
900187d8:	4453      	add	r3, sl
900187da:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
900187de:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
900187e2:	eba3 030a 	sub.w	r3, r3, sl
900187e6:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
900187ea:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
900187ee:	2b00      	cmp	r3, #0
900187f0:	d1d6      	bne.n	900187a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
900187f2:	b05b      	add	sp, #364	; 0x16c
900187f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900187f8:	ea4f 0a46 	mov.w	sl, r6, lsl #1
900187fc:	ad44      	add	r5, sp, #272	; 0x110
900187fe:	f04f 0b00 	mov.w	fp, #0
90018802:	7c23      	ldrb	r3, [r4, #16]
90018804:	2b00      	cmp	r3, #0
90018806:	d067      	beq.n	900188d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
90018808:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
9001880c:	a810      	add	r0, sp, #64	; 0x40
9001880e:	458a      	cmp	sl, r1
90018810:	bfd4      	ite	le
90018812:	2100      	movle	r1, #0
90018814:	2101      	movgt	r1, #1
90018816:	f7ff fe47 	bl	900184a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
9001881a:	9b08      	ldr	r3, [sp, #32]
9001881c:	2b00      	cmp	r3, #0
9001881e:	d056      	beq.n	900188ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
90018820:	7c23      	ldrb	r3, [r4, #16]
90018822:	2258      	movs	r2, #88	; 0x58
90018824:	4639      	mov	r1, r7
90018826:	4628      	mov	r0, r5
90018828:	9309      	str	r3, [sp, #36]	; 0x24
9001882a:	f010 fa89 	bl	90028d40 <memcpy>
9001882e:	9b09      	ldr	r3, [sp, #36]	; 0x24
90018830:	2b00      	cmp	r3, #0
90018832:	d059      	beq.n	900188e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
90018834:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
90018838:	7922      	ldrb	r2, [r4, #4]
9001883a:	2a01      	cmp	r2, #1
9001883c:	d13d      	bne.n	900188ba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
9001883e:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
90018842:	1ac0      	subs	r0, r0, r3
90018844:	2302      	movs	r3, #2
90018846:	fb90 f0f3 	sdiv	r0, r0, r3
9001884a:	b200      	sxth	r0, r0
9001884c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
90018850:	4418      	add	r0, r3
90018852:	7c23      	ldrb	r3, [r4, #16]
90018854:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
90018858:	2b00      	cmp	r3, #0
9001885a:	d03a      	beq.n	900188d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
9001885c:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
90018860:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
90018864:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
90018868:	9500      	str	r5, [sp, #0]
9001886a:	980a      	ldr	r0, [sp, #40]	; 0x28
9001886c:	e9cd 2105 	strd	r2, r1, [sp, #20]
90018870:	e9cd b703 	strd	fp, r7, [sp, #12]
90018874:	e9cd 8401 	strd	r8, r4, [sp, #4]
90018878:	464a      	mov	r2, r9
9001887a:	2100      	movs	r1, #0
9001887c:	f7ff fca3 	bl	900181c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
90018880:	2800      	cmp	r0, #0
90018882:	d1b6      	bne.n	900187f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
90018884:	b2b2      	uxth	r2, r6
90018886:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
9001888a:	4611      	mov	r1, r2
9001888c:	4413      	add	r3, r2
9001888e:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
90018892:	b21b      	sxth	r3, r3
90018894:	1a52      	subs	r2, r2, r1
90018896:	7c21      	ldrb	r1, [r4, #16]
90018898:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
9001889c:	b212      	sxth	r2, r2
9001889e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
900188a2:	b109      	cbz	r1, 900188a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
900188a4:	42b2      	cmp	r2, r6
900188a6:	dba4      	blt.n	900187f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
900188a8:	f8b8 2006 	ldrh.w	r2, [r8, #6]
900188ac:	f8b8 1002 	ldrh.w	r1, [r8, #2]
900188b0:	440a      	add	r2, r1
900188b2:	b212      	sxth	r2, r2
900188b4:	4293      	cmp	r3, r2
900188b6:	dda4      	ble.n	90018802 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
900188b8:	e79b      	b.n	900187f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
900188ba:	2a02      	cmp	r2, #2
900188bc:	d105      	bne.n	900188ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
900188be:	7be2      	ldrb	r2, [r4, #15]
900188c0:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
900188c4:	1a80      	subs	r0, r0, r2
900188c6:	1ac0      	subs	r0, r0, r3
900188c8:	e7bf      	b.n	9001884a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
900188ca:	2000      	movs	r0, #0
900188cc:	e7be      	b.n	9001884c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
900188ce:	7be0      	ldrb	r0, [r4, #15]
900188d0:	e7bc      	b.n	9001884c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
900188d2:	f647 72ff 	movw	r2, #32767	; 0x7fff
900188d6:	e7c3      	b.n	90018860 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
900188d8:	9b08      	ldr	r3, [sp, #32]
900188da:	2b00      	cmp	r3, #0
900188dc:	d0f7      	beq.n	900188ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
900188de:	2258      	movs	r2, #88	; 0x58
900188e0:	4639      	mov	r1, r7
900188e2:	4628      	mov	r0, r5
900188e4:	f010 fa2c 	bl	90028d40 <memcpy>
900188e8:	2300      	movs	r3, #0
900188ea:	f647 72ff 	movw	r2, #32767	; 0x7fff
900188ee:	6821      	ldr	r1, [r4, #0]
900188f0:	4628      	mov	r0, r5
900188f2:	f7ff fbfb 	bl	900180ec <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
900188f6:	b203      	sxth	r3, r0
900188f8:	e79e      	b.n	90018838 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

900188fa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
900188fa:	2b02      	cmp	r3, #2
900188fc:	b510      	push	{r4, lr}
900188fe:	f9b0 4000 	ldrsh.w	r4, [r0]
90018902:	d00b      	beq.n	9001891c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
90018904:	2b03      	cmp	r3, #3
90018906:	d00e      	beq.n	90018926 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
90018908:	2b01      	cmp	r3, #1
9001890a:	d001      	beq.n	90018910 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
9001890c:	1860      	adds	r0, r4, r1
9001890e:	bd10      	pop	{r4, pc}
90018910:	8880      	ldrh	r0, [r0, #4]
90018912:	4420      	add	r0, r4
90018914:	b200      	sxth	r0, r0
90018916:	1a80      	subs	r0, r0, r2
90018918:	3801      	subs	r0, #1
9001891a:	e7f8      	b.n	9001890e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
9001891c:	8880      	ldrh	r0, [r0, #4]
9001891e:	4420      	add	r0, r4
90018920:	b200      	sxth	r0, r0
90018922:	1a40      	subs	r0, r0, r1
90018924:	e7f8      	b.n	90018918 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
90018926:	18a0      	adds	r0, r4, r2
90018928:	e7f1      	b.n	9001890e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

9001892a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
9001892a:	2b02      	cmp	r3, #2
9001892c:	b510      	push	{r4, lr}
9001892e:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
90018932:	d006      	beq.n	90018942 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
90018934:	2b03      	cmp	r3, #3
90018936:	d00a      	beq.n	9001894e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
90018938:	2b01      	cmp	r3, #1
9001893a:	bf14      	ite	ne
9001893c:	18a0      	addne	r0, r4, r2
9001893e:	1860      	addeq	r0, r4, r1
90018940:	bd10      	pop	{r4, pc}
90018942:	88c0      	ldrh	r0, [r0, #6]
90018944:	4420      	add	r0, r4
90018946:	b200      	sxth	r0, r0
90018948:	1a80      	subs	r0, r0, r2
9001894a:	3801      	subs	r0, #1
9001894c:	e7f8      	b.n	90018940 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
9001894e:	88c0      	ldrh	r0, [r0, #6]
90018950:	4420      	add	r0, r4
90018952:	b200      	sxth	r0, r0
90018954:	1a40      	subs	r0, r0, r1
90018956:	e7f8      	b.n	9001894a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

90018958 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
90018958:	4b01      	ldr	r3, [pc, #4]	; (90018960 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
9001895a:	2200      	movs	r2, #0
9001895c:	601a      	str	r2, [r3, #0]
9001895e:	4770      	bx	lr
90018960:	20026ce4 	.word	0x20026ce4

90018964 <_ZN8touchgfx16TouchCalibration4clzuEm>:
90018964:	4603      	mov	r3, r0
90018966:	b1c8      	cbz	r0, 9001899c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
90018968:	0c02      	lsrs	r2, r0, #16
9001896a:	0412      	lsls	r2, r2, #16
9001896c:	b9a2      	cbnz	r2, 90018998 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
9001896e:	0403      	lsls	r3, r0, #16
90018970:	2010      	movs	r0, #16
90018972:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
90018976:	bf04      	itt	eq
90018978:	021b      	lsleq	r3, r3, #8
9001897a:	3008      	addeq	r0, #8
9001897c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
90018980:	bf04      	itt	eq
90018982:	011b      	lsleq	r3, r3, #4
90018984:	3004      	addeq	r0, #4
90018986:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
9001898a:	bf04      	itt	eq
9001898c:	009b      	lsleq	r3, r3, #2
9001898e:	3002      	addeq	r0, #2
90018990:	2b00      	cmp	r3, #0
90018992:	db04      	blt.n	9001899e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
90018994:	3001      	adds	r0, #1
90018996:	4770      	bx	lr
90018998:	2000      	movs	r0, #0
9001899a:	e7ea      	b.n	90018972 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
9001899c:	2020      	movs	r0, #32
9001899e:	4770      	bx	lr

900189a0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
900189a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900189a4:	b087      	sub	sp, #28
900189a6:	4681      	mov	r9, r0
900189a8:	4698      	mov	r8, r3
900189aa:	4610      	mov	r0, r2
900189ac:	460d      	mov	r5, r1
900189ae:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
900189b2:	b981      	cbnz	r1, 900189d6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
900189b4:	b14b      	cbz	r3, 900189ca <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
900189b6:	460b      	mov	r3, r1
900189b8:	464a      	mov	r2, r9
900189ba:	4641      	mov	r1, r8
900189bc:	e9cd 4700 	strd	r4, r7, [sp]
900189c0:	f7ff ffee 	bl	900189a0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
900189c4:	b007      	add	sp, #28
900189c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900189ca:	f04f 33ff 	mov.w	r3, #4294967295
900189ce:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
900189d2:	603b      	str	r3, [r7, #0]
900189d4:	e7f6      	b.n	900189c4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
900189d6:	fa32 fa01 	lsrs.w	sl, r2, r1
900189da:	d107      	bne.n	900189ec <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
900189dc:	fb09 f602 	mul.w	r6, r9, r2
900189e0:	fbb6 f0f4 	udiv	r0, r6, r4
900189e4:	fb04 6610 	mls	r6, r4, r0, r6
900189e8:	603e      	str	r6, [r7, #0]
900189ea:	e7eb      	b.n	900189c4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
900189ec:	2601      	movs	r6, #1
900189ee:	fa09 fb01 	lsl.w	fp, r9, r1
900189f2:	408e      	lsls	r6, r1
900189f4:	fbbb f3f4 	udiv	r3, fp, r4
900189f8:	3e01      	subs	r6, #1
900189fa:	9302      	str	r3, [sp, #8]
900189fc:	fb0a f303 	mul.w	r3, sl, r3
90018a00:	4016      	ands	r6, r2
90018a02:	9303      	str	r3, [sp, #12]
90018a04:	4630      	mov	r0, r6
90018a06:	f7ff ffad 	bl	90018964 <_ZN8touchgfx16TouchCalibration4clzuEm>
90018a0a:	464a      	mov	r2, r9
90018a0c:	460b      	mov	r3, r1
90018a0e:	4601      	mov	r1, r0
90018a10:	4630      	mov	r0, r6
90018a12:	e9cd 4700 	strd	r4, r7, [sp]
90018a16:	f7ff ffc3 	bl	900189a0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90018a1a:	9b02      	ldr	r3, [sp, #8]
90018a1c:	4606      	mov	r6, r0
90018a1e:	eb05 0108 	add.w	r1, r5, r8
90018a22:	fb04 bb13 	mls	fp, r4, r3, fp
90018a26:	4658      	mov	r0, fp
90018a28:	f7ff ff9c 	bl	90018964 <_ZN8touchgfx16TouchCalibration4clzuEm>
90018a2c:	ab05      	add	r3, sp, #20
90018a2e:	465a      	mov	r2, fp
90018a30:	e9cd 4300 	strd	r4, r3, [sp]
90018a34:	4603      	mov	r3, r0
90018a36:	4650      	mov	r0, sl
90018a38:	f7ff ffb2 	bl	900189a0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90018a3c:	6839      	ldr	r1, [r7, #0]
90018a3e:	9a05      	ldr	r2, [sp, #20]
90018a40:	9b03      	ldr	r3, [sp, #12]
90018a42:	4411      	add	r1, r2
90018a44:	fbb1 f2f4 	udiv	r2, r1, r4
90018a48:	18d3      	adds	r3, r2, r3
90018a4a:	fb04 1412 	mls	r4, r4, r2, r1
90018a4e:	441e      	add	r6, r3
90018a50:	603c      	str	r4, [r7, #0]
90018a52:	4430      	add	r0, r6
90018a54:	e7b6      	b.n	900189c4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

90018a56 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
90018a56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90018a5a:	b085      	sub	sp, #20
90018a5c:	f1b0 0900 	subs.w	r9, r0, #0
90018a60:	461d      	mov	r5, r3
90018a62:	4617      	mov	r7, r2
90018a64:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90018a66:	bfbb      	ittet	lt
90018a68:	f1c9 0900 	rsblt	r9, r9, #0
90018a6c:	f04f 36ff 	movlt.w	r6, #4294967295
90018a70:	2601      	movge	r6, #1
90018a72:	6823      	ldrlt	r3, [r4, #0]
90018a74:	bfbc      	itt	lt
90018a76:	425b      	neglt	r3, r3
90018a78:	6023      	strlt	r3, [r4, #0]
90018a7a:	2a00      	cmp	r2, #0
90018a7c:	da04      	bge.n	90018a88 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
90018a7e:	6823      	ldr	r3, [r4, #0]
90018a80:	4257      	negs	r7, r2
90018a82:	4276      	negs	r6, r6
90018a84:	425b      	negs	r3, r3
90018a86:	6023      	str	r3, [r4, #0]
90018a88:	2d00      	cmp	r5, #0
90018a8a:	4638      	mov	r0, r7
90018a8c:	bfba      	itte	lt
90018a8e:	426d      	neglt	r5, r5
90018a90:	f04f 38ff 	movlt.w	r8, #4294967295
90018a94:	f04f 0801 	movge.w	r8, #1
90018a98:	f7ff ff64 	bl	90018964 <_ZN8touchgfx16TouchCalibration4clzuEm>
90018a9c:	ab03      	add	r3, sp, #12
90018a9e:	463a      	mov	r2, r7
90018aa0:	e9cd 5300 	strd	r5, r3, [sp]
90018aa4:	4603      	mov	r3, r0
90018aa6:	4648      	mov	r0, r9
90018aa8:	f7ff ff7a 	bl	900189a0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90018aac:	6823      	ldr	r3, [r4, #0]
90018aae:	9a03      	ldr	r2, [sp, #12]
90018ab0:	4546      	cmp	r6, r8
90018ab2:	441a      	add	r2, r3
90018ab4:	fb92 f3f5 	sdiv	r3, r2, r5
90018ab8:	4418      	add	r0, r3
90018aba:	fb05 2313 	mls	r3, r5, r3, r2
90018abe:	bf18      	it	ne
90018ac0:	4240      	negne	r0, r0
90018ac2:	1c72      	adds	r2, r6, #1
90018ac4:	6023      	str	r3, [r4, #0]
90018ac6:	d105      	bne.n	90018ad4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
90018ac8:	2b00      	cmp	r3, #0
90018aca:	f1c3 0200 	rsb	r2, r3, #0
90018ace:	db0b      	blt.n	90018ae8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
90018ad0:	6022      	str	r2, [r4, #0]
90018ad2:	e006      	b.n	90018ae2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90018ad4:	2e01      	cmp	r6, #1
90018ad6:	d104      	bne.n	90018ae2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90018ad8:	2b00      	cmp	r3, #0
90018ada:	da02      	bge.n	90018ae2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90018adc:	442b      	add	r3, r5
90018ade:	3801      	subs	r0, #1
90018ae0:	6023      	str	r3, [r4, #0]
90018ae2:	b005      	add	sp, #20
90018ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90018ae8:	3801      	subs	r0, #1
90018aea:	1b52      	subs	r2, r2, r5
90018aec:	e7f0      	b.n	90018ad0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

90018af0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
90018af0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
90018af4:	4c1c      	ldr	r4, [pc, #112]	; (90018b68 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
90018af6:	4605      	mov	r5, r0
90018af8:	6807      	ldr	r7, [r0, #0]
90018afa:	69a3      	ldr	r3, [r4, #24]
90018afc:	b92b      	cbnz	r3, 90018b0a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
90018afe:	6840      	ldr	r0, [r0, #4]
90018b00:	e9c5 7000 	strd	r7, r0, [r5]
90018b04:	b004      	add	sp, #16
90018b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90018b0a:	f04f 0802 	mov.w	r8, #2
90018b0e:	68a2      	ldr	r2, [r4, #8]
90018b10:	ae04      	add	r6, sp, #16
90018b12:	6820      	ldr	r0, [r4, #0]
90018b14:	fb93 f1f8 	sdiv	r1, r3, r8
90018b18:	440a      	add	r2, r1
90018b1a:	69e1      	ldr	r1, [r4, #28]
90018b1c:	f846 2d04 	str.w	r2, [r6, #-4]!
90018b20:	463a      	mov	r2, r7
90018b22:	9600      	str	r6, [sp, #0]
90018b24:	f7ff ff97 	bl	90018a56 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90018b28:	69a3      	ldr	r3, [r4, #24]
90018b2a:	4607      	mov	r7, r0
90018b2c:	686a      	ldr	r2, [r5, #4]
90018b2e:	6a21      	ldr	r1, [r4, #32]
90018b30:	9600      	str	r6, [sp, #0]
90018b32:	6860      	ldr	r0, [r4, #4]
90018b34:	f7ff ff8f 	bl	90018a56 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90018b38:	69a3      	ldr	r3, [r4, #24]
90018b3a:	6962      	ldr	r2, [r4, #20]
90018b3c:	4407      	add	r7, r0
90018b3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
90018b40:	9600      	str	r6, [sp, #0]
90018b42:	68e0      	ldr	r0, [r4, #12]
90018b44:	fb93 f8f8 	sdiv	r8, r3, r8
90018b48:	4442      	add	r2, r8
90018b4a:	9203      	str	r2, [sp, #12]
90018b4c:	682a      	ldr	r2, [r5, #0]
90018b4e:	f7ff ff82 	bl	90018a56 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90018b52:	4680      	mov	r8, r0
90018b54:	9600      	str	r6, [sp, #0]
90018b56:	69a3      	ldr	r3, [r4, #24]
90018b58:	686a      	ldr	r2, [r5, #4]
90018b5a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
90018b5c:	6920      	ldr	r0, [r4, #16]
90018b5e:	f7ff ff7a 	bl	90018a56 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90018b62:	4440      	add	r0, r8
90018b64:	e7cc      	b.n	90018b00 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
90018b66:	bf00      	nop
90018b68:	20026ce8 	.word	0x20026ce8

90018b6c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
90018b6c:	4b07      	ldr	r3, [pc, #28]	; (90018b8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
90018b6e:	b510      	push	{r4, lr}
90018b70:	781b      	ldrb	r3, [r3, #0]
90018b72:	2b01      	cmp	r3, #1
90018b74:	d108      	bne.n	90018b88 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
90018b76:	4b06      	ldr	r3, [pc, #24]	; (90018b90 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
90018b78:	880c      	ldrh	r4, [r1, #0]
90018b7a:	881b      	ldrh	r3, [r3, #0]
90018b7c:	f9b0 2000 	ldrsh.w	r2, [r0]
90018b80:	3b01      	subs	r3, #1
90018b82:	1b1b      	subs	r3, r3, r4
90018b84:	8003      	strh	r3, [r0, #0]
90018b86:	800a      	strh	r2, [r1, #0]
90018b88:	bd10      	pop	{r4, pc}
90018b8a:	bf00      	nop
90018b8c:	20026cd4 	.word	0x20026cd4
90018b90:	20026cd8 	.word	0x20026cd8

90018b94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
90018b94:	4b0a      	ldr	r3, [pc, #40]	; (90018bc0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
90018b96:	b510      	push	{r4, lr}
90018b98:	781b      	ldrb	r3, [r3, #0]
90018b9a:	2b01      	cmp	r3, #1
90018b9c:	d10e      	bne.n	90018bbc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
90018b9e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
90018ba2:	8843      	ldrh	r3, [r0, #2]
90018ba4:	f9b0 4000 	ldrsh.w	r4, [r0]
90018ba8:	18ca      	adds	r2, r1, r3
90018baa:	4b06      	ldr	r3, [pc, #24]	; (90018bc4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
90018bac:	8044      	strh	r4, [r0, #2]
90018bae:	881b      	ldrh	r3, [r3, #0]
90018bb0:	1a9b      	subs	r3, r3, r2
90018bb2:	8003      	strh	r3, [r0, #0]
90018bb4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90018bb8:	8081      	strh	r1, [r0, #4]
90018bba:	80c3      	strh	r3, [r0, #6]
90018bbc:	bd10      	pop	{r4, pc}
90018bbe:	bf00      	nop
90018bc0:	20026cd4 	.word	0x20026cd4
90018bc4:	20026cd0 	.word	0x20026cd0

90018bc8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
90018bc8:	4b07      	ldr	r3, [pc, #28]	; (90018be8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
90018bca:	b510      	push	{r4, lr}
90018bcc:	781b      	ldrb	r3, [r3, #0]
90018bce:	2b01      	cmp	r3, #1
90018bd0:	d108      	bne.n	90018be4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
90018bd2:	f9b1 3000 	ldrsh.w	r3, [r1]
90018bd6:	f9b0 4000 	ldrsh.w	r4, [r0]
90018bda:	8003      	strh	r3, [r0, #0]
90018bdc:	8893      	ldrh	r3, [r2, #4]
90018bde:	3b01      	subs	r3, #1
90018be0:	1b1b      	subs	r3, r3, r4
90018be2:	800b      	strh	r3, [r1, #0]
90018be4:	bd10      	pop	{r4, pc}
90018be6:	bf00      	nop
90018be8:	20026cd4 	.word	0x20026cd4

90018bec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
90018bec:	4b08      	ldr	r3, [pc, #32]	; (90018c10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
90018bee:	b513      	push	{r0, r1, r4, lr}
90018bf0:	f9b3 2000 	ldrsh.w	r2, [r3]
90018bf4:	2400      	movs	r4, #0
90018bf6:	4b07      	ldr	r3, [pc, #28]	; (90018c14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
90018bf8:	f8ad 2004 	strh.w	r2, [sp, #4]
90018bfc:	466a      	mov	r2, sp
90018bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
90018c02:	9400      	str	r4, [sp, #0]
90018c04:	f8ad 3006 	strh.w	r3, [sp, #6]
90018c08:	f7ff ffde 	bl	90018bc8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
90018c0c:	b002      	add	sp, #8
90018c0e:	bd10      	pop	{r4, pc}
90018c10:	20026cd0 	.word	0x20026cd0
90018c14:	20026cd2 	.word	0x20026cd2

90018c18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
90018c18:	4b0b      	ldr	r3, [pc, #44]	; (90018c48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
90018c1a:	781b      	ldrb	r3, [r3, #0]
90018c1c:	2b01      	cmp	r3, #1
90018c1e:	d111      	bne.n	90018c44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
90018c20:	680b      	ldr	r3, [r1, #0]
90018c22:	ed90 7a00 	vldr	s14, [r0]
90018c26:	6003      	str	r3, [r0, #0]
90018c28:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
90018c2c:	eddf 6a07 	vldr	s13, [pc, #28]	; 90018c4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
90018c30:	ee07 3a90 	vmov	s15, r3
90018c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90018c38:	ee77 7ae6 	vsub.f32	s15, s15, s13
90018c3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
90018c40:	edc1 7a00 	vstr	s15, [r1]
90018c44:	4770      	bx	lr
90018c46:	bf00      	nop
90018c48:	20026cd4 	.word	0x20026cd4
90018c4c:	38d1b717 	.word	0x38d1b717

90018c50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
90018c50:	4b0a      	ldr	r3, [pc, #40]	; (90018c7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
90018c52:	460a      	mov	r2, r1
90018c54:	b510      	push	{r4, lr}
90018c56:	781b      	ldrb	r3, [r3, #0]
90018c58:	2b01      	cmp	r3, #1
90018c5a:	d10d      	bne.n	90018c78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
90018c5c:	8881      	ldrh	r1, [r0, #4]
90018c5e:	8803      	ldrh	r3, [r0, #0]
90018c60:	440b      	add	r3, r1
90018c62:	4601      	mov	r1, r0
90018c64:	3b01      	subs	r3, #1
90018c66:	f821 3b02 	strh.w	r3, [r1], #2
90018c6a:	f7ff ffad 	bl	90018bc8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
90018c6e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90018c72:	88c2      	ldrh	r2, [r0, #6]
90018c74:	80c3      	strh	r3, [r0, #6]
90018c76:	8082      	strh	r2, [r0, #4]
90018c78:	bd10      	pop	{r4, pc}
90018c7a:	bf00      	nop
90018c7c:	20026cd4 	.word	0x20026cd4

90018c80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
90018c80:	4b09      	ldr	r3, [pc, #36]	; (90018ca8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
90018c82:	b507      	push	{r0, r1, r2, lr}
90018c84:	2100      	movs	r1, #0
90018c86:	f9b3 2000 	ldrsh.w	r2, [r3]
90018c8a:	4b08      	ldr	r3, [pc, #32]	; (90018cac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
90018c8c:	9100      	str	r1, [sp, #0]
90018c8e:	4669      	mov	r1, sp
90018c90:	f9b3 3000 	ldrsh.w	r3, [r3]
90018c94:	f8ad 2004 	strh.w	r2, [sp, #4]
90018c98:	f8ad 3006 	strh.w	r3, [sp, #6]
90018c9c:	f7ff ffd8 	bl	90018c50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90018ca0:	b003      	add	sp, #12
90018ca2:	f85d fb04 	ldr.w	pc, [sp], #4
90018ca6:	bf00      	nop
90018ca8:	20026cd0 	.word	0x20026cd0
90018cac:	20026cd2 	.word	0x20026cd2

90018cb0 <_ZN8touchgfx11Application13requestRedrawEv>:
90018cb0:	4b06      	ldr	r3, [pc, #24]	; (90018ccc <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
90018cb2:	2100      	movs	r1, #0
90018cb4:	f9b3 2000 	ldrsh.w	r2, [r3]
90018cb8:	4b05      	ldr	r3, [pc, #20]	; (90018cd0 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
90018cba:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
90018cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
90018cc2:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
90018cc6:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
90018cca:	4770      	bx	lr
90018ccc:	20026cd0 	.word	0x20026cd0
90018cd0:	20026cd2 	.word	0x20026cd2

90018cd4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
90018cd4:	4b03      	ldr	r3, [pc, #12]	; (90018ce4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
90018cd6:	6818      	ldr	r0, [r3, #0]
90018cd8:	b110      	cbz	r0, 90018ce0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
90018cda:	6803      	ldr	r3, [r0, #0]
90018cdc:	699b      	ldr	r3, [r3, #24]
90018cde:	4718      	bx	r3
90018ce0:	4770      	bx	lr
90018ce2:	bf00      	nop
90018ce4:	20026d18 	.word	0x20026d18

90018ce8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
90018ce8:	4770      	bx	lr
	...

90018cec <_ZN8touchgfx11Application4drawEv>:
90018cec:	4b09      	ldr	r3, [pc, #36]	; (90018d14 <_ZN8touchgfx11Application4drawEv+0x28>)
90018cee:	b507      	push	{r0, r1, r2, lr}
90018cf0:	f9b3 2000 	ldrsh.w	r2, [r3]
90018cf4:	2100      	movs	r1, #0
90018cf6:	4b08      	ldr	r3, [pc, #32]	; (90018d18 <_ZN8touchgfx11Application4drawEv+0x2c>)
90018cf8:	9100      	str	r1, [sp, #0]
90018cfa:	4669      	mov	r1, sp
90018cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
90018d00:	f8ad 2004 	strh.w	r2, [sp, #4]
90018d04:	f8ad 3006 	strh.w	r3, [sp, #6]
90018d08:	6803      	ldr	r3, [r0, #0]
90018d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90018d0c:	4798      	blx	r3
90018d0e:	b003      	add	sp, #12
90018d10:	f85d fb04 	ldr.w	pc, [sp], #4
90018d14:	20026cd0 	.word	0x20026cd0
90018d18:	20026cd2 	.word	0x20026cd2

90018d1c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
90018d1c:	4b03      	ldr	r3, [pc, #12]	; (90018d2c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
90018d1e:	6818      	ldr	r0, [r3, #0]
90018d20:	b110      	cbz	r0, 90018d28 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
90018d22:	6803      	ldr	r3, [r0, #0]
90018d24:	69db      	ldr	r3, [r3, #28]
90018d26:	4718      	bx	r3
90018d28:	4770      	bx	lr
90018d2a:	bf00      	nop
90018d2c:	20026d18 	.word	0x20026d18

90018d30 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
90018d30:	4b03      	ldr	r3, [pc, #12]	; (90018d40 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
90018d32:	6818      	ldr	r0, [r3, #0]
90018d34:	b110      	cbz	r0, 90018d3c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
90018d36:	6803      	ldr	r3, [r0, #0]
90018d38:	6a1b      	ldr	r3, [r3, #32]
90018d3a:	4718      	bx	r3
90018d3c:	4770      	bx	lr
90018d3e:	bf00      	nop
90018d40:	20026d18 	.word	0x20026d18

90018d44 <_ZN8touchgfx11Application14handleKeyEventEh>:
90018d44:	4b03      	ldr	r3, [pc, #12]	; (90018d54 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
90018d46:	6818      	ldr	r0, [r3, #0]
90018d48:	b110      	cbz	r0, 90018d50 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
90018d4a:	6803      	ldr	r3, [r0, #0]
90018d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90018d4e:	4718      	bx	r3
90018d50:	4770      	bx	lr
90018d52:	bf00      	nop
90018d54:	20026d18 	.word	0x20026d18

90018d58 <_ZN8touchgfx11Application15handleTickEventEv>:
90018d58:	b570      	push	{r4, r5, r6, lr}
90018d5a:	4d34      	ldr	r5, [pc, #208]	; (90018e2c <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
90018d5c:	4604      	mov	r4, r0
90018d5e:	6828      	ldr	r0, [r5, #0]
90018d60:	b140      	cbz	r0, 90018d74 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
90018d62:	7a03      	ldrb	r3, [r0, #8]
90018d64:	b933      	cbnz	r3, 90018d74 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
90018d66:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
90018d6a:	6803      	ldr	r3, [r0, #0]
90018d6c:	689b      	ldr	r3, [r3, #8]
90018d6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90018d72:	4718      	bx	r3
90018d74:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
90018d78:	b97b      	cbnz	r3, 90018d9a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90018d7a:	b170      	cbz	r0, 90018d9a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90018d7c:	7a03      	ldrb	r3, [r0, #8]
90018d7e:	b163      	cbz	r3, 90018d9a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90018d80:	4b2b      	ldr	r3, [pc, #172]	; (90018e30 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
90018d82:	6818      	ldr	r0, [r3, #0]
90018d84:	b110      	cbz	r0, 90018d8c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
90018d86:	6803      	ldr	r3, [r0, #0]
90018d88:	691b      	ldr	r3, [r3, #16]
90018d8a:	4798      	blx	r3
90018d8c:	6828      	ldr	r0, [r5, #0]
90018d8e:	6803      	ldr	r3, [r0, #0]
90018d90:	68db      	ldr	r3, [r3, #12]
90018d92:	4798      	blx	r3
90018d94:	2301      	movs	r3, #1
90018d96:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
90018d9a:	2500      	movs	r5, #0
90018d9c:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
90018da0:	42a8      	cmp	r0, r5
90018da2:	dd0c      	ble.n	90018dbe <_ZN8touchgfx11Application15handleTickEventEv+0x66>
90018da4:	1963      	adds	r3, r4, r5
90018da6:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
90018daa:	b132      	cbz	r2, 90018dba <_ZN8touchgfx11Application15handleTickEventEv+0x62>
90018dac:	eb05 0245 	add.w	r2, r5, r5, lsl #1
90018db0:	4413      	add	r3, r2
90018db2:	6858      	ldr	r0, [r3, #4]
90018db4:	6803      	ldr	r3, [r0, #0]
90018db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90018db8:	4798      	blx	r3
90018dba:	3501      	adds	r5, #1
90018dbc:	e7ee      	b.n	90018d9c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
90018dbe:	2300      	movs	r3, #0
90018dc0:	461a      	mov	r2, r3
90018dc2:	4298      	cmp	r0, r3
90018dc4:	d114      	bne.n	90018df0 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
90018dc6:	1d25      	adds	r5, r4, #4
90018dc8:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
90018dcc:	1e48      	subs	r0, r1, #1
90018dce:	b280      	uxth	r0, r0
90018dd0:	4291      	cmp	r1, r2
90018dd2:	dd24      	ble.n	90018e1e <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
90018dd4:	4288      	cmp	r0, r1
90018dd6:	d2fb      	bcs.n	90018dd0 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
90018dd8:	eb04 0380 	add.w	r3, r4, r0, lsl #2
90018ddc:	eb05 0181 	add.w	r1, r5, r1, lsl #2
90018de0:	3304      	adds	r3, #4
90018de2:	428b      	cmp	r3, r1
90018de4:	d018      	beq.n	90018e18 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
90018de6:	f853 6f04 	ldr.w	r6, [r3, #4]!
90018dea:	f843 6c04 	str.w	r6, [r3, #-4]
90018dee:	e7f8      	b.n	90018de2 <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
90018df0:	18e1      	adds	r1, r4, r3
90018df2:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
90018df6:	b16d      	cbz	r5, 90018e14 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
90018df8:	429a      	cmp	r2, r3
90018dfa:	d00a      	beq.n	90018e12 <_ZN8touchgfx11Application15handleTickEventEv+0xba>
90018dfc:	eb03 0643 	add.w	r6, r3, r3, lsl #1
90018e00:	4431      	add	r1, r6
90018e02:	684e      	ldr	r6, [r1, #4]
90018e04:	b291      	uxth	r1, r2
90018e06:	eb04 0181 	add.w	r1, r4, r1, lsl #2
90018e0a:	604e      	str	r6, [r1, #4]
90018e0c:	18a1      	adds	r1, r4, r2
90018e0e:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
90018e12:	3201      	adds	r2, #1
90018e14:	3301      	adds	r3, #1
90018e16:	e7d4      	b.n	90018dc2 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
90018e18:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
90018e1c:	e7d4      	b.n	90018dc8 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
90018e1e:	4b04      	ldr	r3, [pc, #16]	; (90018e30 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
90018e20:	6818      	ldr	r0, [r3, #0]
90018e22:	b110      	cbz	r0, 90018e2a <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
90018e24:	6803      	ldr	r3, [r0, #0]
90018e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90018e28:	e7a1      	b.n	90018d6e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
90018e2a:	bd70      	pop	{r4, r5, r6, pc}
90018e2c:	20026d1c 	.word	0x20026d1c
90018e30:	20026d18 	.word	0x20026d18

90018e34 <_ZN8touchgfx11ApplicationD1Ev>:
90018e34:	4770      	bx	lr

90018e36 <_ZN8touchgfx11ApplicationD0Ev>:
90018e36:	b510      	push	{r4, lr}
90018e38:	4604      	mov	r4, r0
90018e3a:	f44f 719c 	mov.w	r1, #312	; 0x138
90018e3e:	f00f f91d 	bl	9002807c <_ZdlPvj>
90018e42:	4620      	mov	r0, r4
90018e44:	bd10      	pop	{r4, pc}
	...

90018e48 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
90018e48:	b570      	push	{r4, r5, r6, lr}
90018e4a:	4606      	mov	r6, r0
90018e4c:	460c      	mov	r4, r1
90018e4e:	b929      	cbnz	r1, 90018e5c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
90018e50:	4b0c      	ldr	r3, [pc, #48]	; (90018e84 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
90018e52:	2164      	movs	r1, #100	; 0x64
90018e54:	4a0c      	ldr	r2, [pc, #48]	; (90018e88 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
90018e56:	480d      	ldr	r0, [pc, #52]	; (90018e8c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
90018e58:	f00f feec 	bl	90028c34 <__assert_func>
90018e5c:	2300      	movs	r3, #0
90018e5e:	4d0c      	ldr	r5, [pc, #48]	; (90018e90 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
90018e60:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
90018e64:	6828      	ldr	r0, [r5, #0]
90018e66:	b110      	cbz	r0, 90018e6e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
90018e68:	6803      	ldr	r3, [r0, #0]
90018e6a:	695b      	ldr	r3, [r3, #20]
90018e6c:	4798      	blx	r3
90018e6e:	602c      	str	r4, [r5, #0]
90018e70:	4620      	mov	r0, r4
90018e72:	6823      	ldr	r3, [r4, #0]
90018e74:	68db      	ldr	r3, [r3, #12]
90018e76:	4798      	blx	r3
90018e78:	6833      	ldr	r3, [r6, #0]
90018e7a:	4630      	mov	r0, r6
90018e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90018e7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90018e82:	4718      	bx	r3
90018e84:	9002f902 	.word	0x9002f902
90018e88:	9002f9fc 	.word	0x9002f9fc
90018e8c:	9002f90c 	.word	0x9002f90c
90018e90:	20026d18 	.word	0x20026d18

90018e94 <_ZNK8touchgfx4Rect9intersectERKS0_>:
90018e94:	b510      	push	{r4, lr}
90018e96:	f9b1 4000 	ldrsh.w	r4, [r1]
90018e9a:	888a      	ldrh	r2, [r1, #4]
90018e9c:	f9b0 3000 	ldrsh.w	r3, [r0]
90018ea0:	4422      	add	r2, r4
90018ea2:	b212      	sxth	r2, r2
90018ea4:	4293      	cmp	r3, r2
90018ea6:	da15      	bge.n	90018ed4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90018ea8:	8882      	ldrh	r2, [r0, #4]
90018eaa:	4413      	add	r3, r2
90018eac:	b21b      	sxth	r3, r3
90018eae:	429c      	cmp	r4, r3
90018eb0:	da10      	bge.n	90018ed4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90018eb2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
90018eb6:	88c9      	ldrh	r1, [r1, #6]
90018eb8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
90018ebc:	4419      	add	r1, r3
90018ebe:	b209      	sxth	r1, r1
90018ec0:	428a      	cmp	r2, r1
90018ec2:	da07      	bge.n	90018ed4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90018ec4:	88c0      	ldrh	r0, [r0, #6]
90018ec6:	4410      	add	r0, r2
90018ec8:	b200      	sxth	r0, r0
90018eca:	4283      	cmp	r3, r0
90018ecc:	bfac      	ite	ge
90018ece:	2000      	movge	r0, #0
90018ed0:	2001      	movlt	r0, #1
90018ed2:	bd10      	pop	{r4, pc}
90018ed4:	2000      	movs	r0, #0
90018ed6:	e7fc      	b.n	90018ed2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

90018ed8 <_ZNK8touchgfx4Rect8includesERKS0_>:
90018ed8:	b570      	push	{r4, r5, r6, lr}
90018eda:	f9b1 4000 	ldrsh.w	r4, [r1]
90018ede:	f9b0 5000 	ldrsh.w	r5, [r0]
90018ee2:	42ac      	cmp	r4, r5
90018ee4:	db18      	blt.n	90018f18 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
90018ee6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
90018eea:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
90018eee:	429a      	cmp	r2, r3
90018ef0:	db12      	blt.n	90018f18 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
90018ef2:	8886      	ldrh	r6, [r0, #4]
90018ef4:	4435      	add	r5, r6
90018ef6:	888e      	ldrh	r6, [r1, #4]
90018ef8:	4434      	add	r4, r6
90018efa:	b22d      	sxth	r5, r5
90018efc:	b224      	sxth	r4, r4
90018efe:	42a5      	cmp	r5, r4
90018f00:	db0a      	blt.n	90018f18 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
90018f02:	88c0      	ldrh	r0, [r0, #6]
90018f04:	4418      	add	r0, r3
90018f06:	88cb      	ldrh	r3, [r1, #6]
90018f08:	441a      	add	r2, r3
90018f0a:	b200      	sxth	r0, r0
90018f0c:	b212      	sxth	r2, r2
90018f0e:	4290      	cmp	r0, r2
90018f10:	bfb4      	ite	lt
90018f12:	2000      	movlt	r0, #0
90018f14:	2001      	movge	r0, #1
90018f16:	bd70      	pop	{r4, r5, r6, pc}
90018f18:	2000      	movs	r0, #0
90018f1a:	e7fc      	b.n	90018f16 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

90018f1c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
90018f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90018f1e:	4604      	mov	r4, r0
90018f20:	4608      	mov	r0, r1
90018f22:	460d      	mov	r5, r1
90018f24:	f7fb fa5d 	bl	900143e2 <_ZNK8touchgfx4Rect7isEmptyEv>
90018f28:	b978      	cbnz	r0, 90018f4a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
90018f2a:	4620      	mov	r0, r4
90018f2c:	f7fb fa59 	bl	900143e2 <_ZNK8touchgfx4Rect7isEmptyEv>
90018f30:	f9b5 6000 	ldrsh.w	r6, [r5]
90018f34:	b150      	cbz	r0, 90018f4c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
90018f36:	8026      	strh	r6, [r4, #0]
90018f38:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
90018f3c:	8063      	strh	r3, [r4, #2]
90018f3e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
90018f42:	80a3      	strh	r3, [r4, #4]
90018f44:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
90018f48:	80e3      	strh	r3, [r4, #6]
90018f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90018f4c:	f9b4 1000 	ldrsh.w	r1, [r4]
90018f50:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90018f54:	42b1      	cmp	r1, r6
90018f56:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
90018f5a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
90018f5e:	460f      	mov	r7, r1
90018f60:	88ed      	ldrh	r5, [r5, #6]
90018f62:	bfa8      	it	ge
90018f64:	4637      	movge	r7, r6
90018f66:	4293      	cmp	r3, r2
90018f68:	4618      	mov	r0, r3
90018f6a:	4466      	add	r6, ip
90018f6c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
90018f70:	bfa8      	it	ge
90018f72:	4610      	movge	r0, r2
90018f74:	442a      	add	r2, r5
90018f76:	88e5      	ldrh	r5, [r4, #6]
90018f78:	4461      	add	r1, ip
90018f7a:	b236      	sxth	r6, r6
90018f7c:	8027      	strh	r7, [r4, #0]
90018f7e:	442b      	add	r3, r5
90018f80:	b209      	sxth	r1, r1
90018f82:	b212      	sxth	r2, r2
90018f84:	8060      	strh	r0, [r4, #2]
90018f86:	b21b      	sxth	r3, r3
90018f88:	428e      	cmp	r6, r1
90018f8a:	bfac      	ite	ge
90018f8c:	ebc7 0106 	rsbge	r1, r7, r6
90018f90:	ebc7 0101 	rsblt	r1, r7, r1
90018f94:	429a      	cmp	r2, r3
90018f96:	bfac      	ite	ge
90018f98:	ebc0 0202 	rsbge	r2, r0, r2
90018f9c:	ebc0 0203 	rsblt	r2, r0, r3
90018fa0:	80a1      	strh	r1, [r4, #4]
90018fa2:	80e2      	strh	r2, [r4, #6]
90018fa4:	e7d1      	b.n	90018f4a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

90018fa8 <_ZN8touchgfx11Application11getInstanceEv>:
90018fa8:	4b01      	ldr	r3, [pc, #4]	; (90018fb0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
90018faa:	6818      	ldr	r0, [r3, #0]
90018fac:	4770      	bx	lr
90018fae:	bf00      	nop
90018fb0:	20026d28 	.word	0x20026d28

90018fb4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
90018fb4:	b570      	push	{r4, r5, r6, lr}
90018fb6:	2200      	movs	r2, #0
90018fb8:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
90018fbc:	1d04      	adds	r4, r0, #4
90018fbe:	b295      	uxth	r5, r2
90018fc0:	42ab      	cmp	r3, r5
90018fc2:	d90e      	bls.n	90018fe2 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
90018fc4:	f854 6b04 	ldr.w	r6, [r4], #4
90018fc8:	4615      	mov	r5, r2
90018fca:	3201      	adds	r2, #1
90018fcc:	428e      	cmp	r6, r1
90018fce:	d1f6      	bne.n	90018fbe <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
90018fd0:	4428      	add	r0, r5
90018fd2:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
90018fd6:	2bff      	cmp	r3, #255	; 0xff
90018fd8:	d002      	beq.n	90018fe0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
90018fda:	3301      	adds	r3, #1
90018fdc:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
90018fe0:	bd70      	pop	{r4, r5, r6, pc}
90018fe2:	2b20      	cmp	r3, #32
90018fe4:	d106      	bne.n	90018ff4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
90018fe6:	4b09      	ldr	r3, [pc, #36]	; (9001900c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
90018fe8:	f44f 7117 	mov.w	r1, #604	; 0x25c
90018fec:	4a08      	ldr	r2, [pc, #32]	; (90019010 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
90018fee:	4809      	ldr	r0, [pc, #36]	; (90019014 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
90018ff0:	f00f fe20 	bl	90028c34 <__assert_func>
90018ff4:	18c2      	adds	r2, r0, r3
90018ff6:	2401      	movs	r4, #1
90018ff8:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
90018ffc:	191a      	adds	r2, r3, r4
90018ffe:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
90019002:	eb00 0083 	add.w	r0, r0, r3, lsl #2
90019006:	6041      	str	r1, [r0, #4]
90019008:	e7ea      	b.n	90018fe0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
9001900a:	bf00      	nop
9001900c:	9002f936 	.word	0x9002f936
90019010:	9002fa40 	.word	0x9002fa40
90019014:	9002f90c 	.word	0x9002f90c

90019018 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
90019018:	b570      	push	{r4, r5, r6, lr}
9001901a:	2300      	movs	r3, #0
9001901c:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
90019020:	1d04      	adds	r4, r0, #4
90019022:	b29a      	uxth	r2, r3
90019024:	4296      	cmp	r6, r2
90019026:	d90a      	bls.n	9001903e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
90019028:	f854 2b04 	ldr.w	r2, [r4], #4
9001902c:	428a      	cmp	r2, r1
9001902e:	d107      	bne.n	90019040 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
90019030:	18c5      	adds	r5, r0, r3
90019032:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
90019036:	b11a      	cbz	r2, 90019040 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
90019038:	3a01      	subs	r2, #1
9001903a:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
9001903e:	bd70      	pop	{r4, r5, r6, pc}
90019040:	3301      	adds	r3, #1
90019042:	e7ee      	b.n	90019022 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

90019044 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
90019044:	2300      	movs	r3, #0
90019046:	f100 0288 	add.w	r2, r0, #136	; 0x88
9001904a:	30a8      	adds	r0, #168	; 0xa8
9001904c:	f820 3c24 	strh.w	r3, [r0, #-36]
90019050:	f802 3b01 	strb.w	r3, [r2], #1
90019054:	4282      	cmp	r2, r0
90019056:	d1fb      	bne.n	90019050 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
90019058:	4770      	bx	lr

9001905a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
9001905a:	4603      	mov	r3, r0
9001905c:	f100 0140 	add.w	r1, r0, #64	; 0x40
90019060:	2200      	movs	r2, #0
90019062:	801a      	strh	r2, [r3, #0]
90019064:	3308      	adds	r3, #8
90019066:	f823 2c06 	strh.w	r2, [r3, #-6]
9001906a:	f823 2c04 	strh.w	r2, [r3, #-4]
9001906e:	f823 2c02 	strh.w	r2, [r3, #-2]
90019072:	428b      	cmp	r3, r1
90019074:	d1f5      	bne.n	90019062 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
90019076:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
9001907a:	4770      	bx	lr

9001907c <_ZN8touchgfx11ApplicationC1Ev>:
9001907c:	b570      	push	{r4, r5, r6, lr}
9001907e:	4b1a      	ldr	r3, [pc, #104]	; (900190e8 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
90019080:	2500      	movs	r5, #0
90019082:	4604      	mov	r4, r0
90019084:	30a8      	adds	r0, #168	; 0xa8
90019086:	f840 3ca8 	str.w	r3, [r0, #-168]
9001908a:	f820 5c24 	strh.w	r5, [r0, #-36]
9001908e:	f7ff ffe4 	bl	9001905a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
90019092:	f104 00ea 	add.w	r0, r4, #234	; 0xea
90019096:	f7ff ffe0 	bl	9001905a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
9001909a:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
9001909e:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
900190a2:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
900190a6:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
900190aa:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
900190ae:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
900190b2:	490e      	ldr	r1, [pc, #56]	; (900190ec <_ZN8touchgfx11ApplicationC1Ev+0x70>)
900190b4:	480e      	ldr	r0, [pc, #56]	; (900190f0 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
900190b6:	f00e febb 	bl	90027e30 <CRC_Lock>
900190ba:	4e0e      	ldr	r6, [pc, #56]	; (900190f4 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
900190bc:	4b0e      	ldr	r3, [pc, #56]	; (900190f8 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
900190be:	b158      	cbz	r0, 900190d8 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
900190c0:	801d      	strh	r5, [r3, #0]
900190c2:	2300      	movs	r3, #0
900190c4:	4a0d      	ldr	r2, [pc, #52]	; (900190fc <_ZN8touchgfx11ApplicationC1Ev+0x80>)
900190c6:	4620      	mov	r0, r4
900190c8:	6013      	str	r3, [r2, #0]
900190ca:	4a0d      	ldr	r2, [pc, #52]	; (90019100 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
900190cc:	6033      	str	r3, [r6, #0]
900190ce:	6013      	str	r3, [r2, #0]
900190d0:	f7ff ffb8 	bl	90019044 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
900190d4:	4620      	mov	r0, r4
900190d6:	bd70      	pop	{r4, r5, r6, pc}
900190d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
900190dc:	2002      	movs	r0, #2
900190de:	801a      	strh	r2, [r3, #0]
900190e0:	6030      	str	r0, [r6, #0]
900190e2:	f001 faa9 	bl	9001a638 <_ZN8touchgfx6Screen4drawEv>
900190e6:	e7ec      	b.n	900190c2 <_ZN8touchgfx11ApplicationC1Ev+0x46>
900190e8:	9002f9c0 	.word	0x9002f9c0
900190ec:	b5e8b5cd 	.word	0xb5e8b5cd
900190f0:	f407a5c2 	.word	0xf407a5c2
900190f4:	20026d18 	.word	0x20026d18
900190f8:	20000050 	.word	0x20000050
900190fc:	20026d28 	.word	0x20026d28
90019100:	20026d1c 	.word	0x20026d1c

90019104 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
90019104:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
90019108:	428b      	cmp	r3, r1
9001910a:	b510      	push	{r4, lr}
9001910c:	d90e      	bls.n	9001912c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
9001910e:	3b01      	subs	r3, #1
90019110:	b29b      	uxth	r3, r3
90019112:	428b      	cmp	r3, r1
90019114:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
90019118:	d908      	bls.n	9001912c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
9001911a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
9001911e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
90019122:	681a      	ldr	r2, [r3, #0]
90019124:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
90019128:	685a      	ldr	r2, [r3, #4]
9001912a:	6062      	str	r2, [r4, #4]
9001912c:	bd10      	pop	{r4, pc}
	...

90019130 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
90019130:	b537      	push	{r0, r1, r2, r4, r5, lr}
90019132:	466b      	mov	r3, sp
90019134:	4604      	mov	r4, r0
90019136:	e883 0006 	stmia.w	r3, {r1, r2}
9001913a:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
9001913e:	2a07      	cmp	r2, #7
90019140:	d906      	bls.n	90019150 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
90019142:	4b09      	ldr	r3, [pc, #36]	; (90019168 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
90019144:	f240 118f 	movw	r1, #399	; 0x18f
90019148:	4a08      	ldr	r2, [pc, #32]	; (9001916c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
9001914a:	4809      	ldr	r0, [pc, #36]	; (90019170 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
9001914c:	f00f fd72 	bl	90028c34 <__assert_func>
90019150:	1c51      	adds	r1, r2, #1
90019152:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
90019156:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
9001915a:	cb03      	ldmia	r3!, {r0, r1}
9001915c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
90019160:	6069      	str	r1, [r5, #4]
90019162:	b003      	add	sp, #12
90019164:	bd30      	pop	{r4, r5, pc}
90019166:	bf00      	nop
90019168:	9002f95e 	.word	0x9002f95e
9001916c:	9002fa85 	.word	0x9002fa85
90019170:	9002f98d 	.word	0x9002f98d

90019174 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
90019174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019178:	b08d      	sub	sp, #52	; 0x34
9001917a:	4683      	mov	fp, r0
9001917c:	ac08      	add	r4, sp, #32
9001917e:	4620      	mov	r0, r4
90019180:	e884 0006 	stmia.w	r4, {r1, r2}
90019184:	f7fb f92d 	bl	900143e2 <_ZNK8touchgfx4Rect7isEmptyEv>
90019188:	2800      	cmp	r0, #0
9001918a:	d16a      	bne.n	90019262 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
9001918c:	9402      	str	r4, [sp, #8]
9001918e:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
90019192:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
90019196:	2400      	movs	r4, #0
90019198:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
9001919c:	9301      	str	r3, [sp, #4]
9001919e:	36a0      	adds	r6, #160	; 0xa0
900191a0:	42a5      	cmp	r5, r4
900191a2:	d00d      	beq.n	900191c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
900191a4:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
900191a8:	9802      	ldr	r0, [sp, #8]
900191aa:	f7ff fe95 	bl	90018ed8 <_ZNK8touchgfx4Rect8includesERKS0_>
900191ae:	b128      	cbz	r0, 900191bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
900191b0:	1e69      	subs	r1, r5, #1
900191b2:	9801      	ldr	r0, [sp, #4]
900191b4:	1b09      	subs	r1, r1, r4
900191b6:	b289      	uxth	r1, r1
900191b8:	f7ff ffa4 	bl	90019104 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
900191bc:	3401      	adds	r4, #1
900191be:	e7ef      	b.n	900191a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900191c0:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
900191c4:	1e7b      	subs	r3, r7, #1
900191c6:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
900191ca:	9703      	str	r7, [sp, #12]
900191cc:	9300      	str	r3, [sp, #0]
900191ce:	2400      	movs	r4, #0
900191d0:	4655      	mov	r5, sl
900191d2:	9704      	str	r7, [sp, #16]
900191d4:	4626      	mov	r6, r4
900191d6:	9b04      	ldr	r3, [sp, #16]
900191d8:	2b00      	cmp	r3, #0
900191da:	d078      	beq.n	900192ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
900191dc:	9902      	ldr	r1, [sp, #8]
900191de:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
900191e2:	f7ff fe57 	bl	90018e94 <_ZNK8touchgfx4Rect9intersectERKS0_>
900191e6:	b360      	cbz	r0, 90019242 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
900191e8:	f9bd e020 	ldrsh.w	lr, [sp, #32]
900191ec:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
900191f0:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
900191f4:	45e6      	cmp	lr, ip
900191f6:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
900191fa:	db35      	blt.n	90019268 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
900191fc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
90019200:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
90019204:	4472      	add	r2, lr
90019206:	4463      	add	r3, ip
90019208:	b212      	sxth	r2, r2
9001920a:	b21b      	sxth	r3, r3
9001920c:	429a      	cmp	r2, r3
9001920e:	dc2b      	bgt.n	90019268 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
90019210:	fa1f f288 	uxth.w	r2, r8
90019214:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
90019218:	45c1      	cmp	r9, r8
9001921a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
9001921e:	4413      	add	r3, r2
90019220:	fa1f fc89 	uxth.w	ip, r9
90019224:	b29b      	uxth	r3, r3
90019226:	fa0f fe83 	sxth.w	lr, r3
9001922a:	db0f      	blt.n	9001924c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
9001922c:	eba3 030c 	sub.w	r3, r3, ip
90019230:	1ac9      	subs	r1, r1, r3
90019232:	b209      	sxth	r1, r1
90019234:	2900      	cmp	r1, #0
90019236:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
9001923a:	dd12      	ble.n	90019262 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
9001923c:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
90019240:	4604      	mov	r4, r0
90019242:	9b04      	ldr	r3, [sp, #16]
90019244:	3d08      	subs	r5, #8
90019246:	3b01      	subs	r3, #1
90019248:	9304      	str	r3, [sp, #16]
9001924a:	e7c4      	b.n	900191d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
9001924c:	4461      	add	r1, ip
9001924e:	b209      	sxth	r1, r1
90019250:	4571      	cmp	r1, lr
90019252:	dc3a      	bgt.n	900192ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
90019254:	eba2 020c 	sub.w	r2, r2, ip
90019258:	b212      	sxth	r2, r2
9001925a:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
9001925e:	2a00      	cmp	r2, #0
90019260:	dcee      	bgt.n	90019240 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
90019262:	b00d      	add	sp, #52	; 0x34
90019264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019268:	45c1      	cmp	r9, r8
9001926a:	db2e      	blt.n	900192ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
9001926c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
90019270:	4499      	add	r9, r3
90019272:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
90019276:	4498      	add	r8, r3
90019278:	fa0f f989 	sxth.w	r9, r9
9001927c:	fa0f f888 	sxth.w	r8, r8
90019280:	45c1      	cmp	r9, r8
90019282:	dc22      	bgt.n	900192ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
90019284:	fa1f f28c 	uxth.w	r2, ip
90019288:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
9001928c:	45e6      	cmp	lr, ip
9001928e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
90019292:	4413      	add	r3, r2
90019294:	fa1f f88e 	uxth.w	r8, lr
90019298:	b29b      	uxth	r3, r3
9001929a:	fa0f f983 	sxth.w	r9, r3
9001929e:	db0a      	blt.n	900192b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
900192a0:	eba3 0308 	sub.w	r3, r3, r8
900192a4:	1ac9      	subs	r1, r1, r3
900192a6:	b209      	sxth	r1, r1
900192a8:	2900      	cmp	r1, #0
900192aa:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
900192ae:	ddd8      	ble.n	90019262 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
900192b0:	f8ad 9020 	strh.w	r9, [sp, #32]
900192b4:	e7c4      	b.n	90019240 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
900192b6:	4441      	add	r1, r8
900192b8:	b209      	sxth	r1, r1
900192ba:	4549      	cmp	r1, r9
900192bc:	dc05      	bgt.n	900192ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
900192be:	eba2 0208 	sub.w	r2, r2, r8
900192c2:	b212      	sxth	r2, r2
900192c4:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
900192c8:	e7c9      	b.n	9001925e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
900192ca:	4606      	mov	r6, r0
900192cc:	e7b9      	b.n	90019242 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
900192ce:	2c00      	cmp	r4, #0
900192d0:	f47f af7d 	bne.w	900191ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
900192d4:	2e00      	cmp	r6, #0
900192d6:	f000 81dc 	beq.w	90019692 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
900192da:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
900192de:	4655      	mov	r5, sl
900192e0:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
900192e4:	b2b9      	uxth	r1, r7
900192e6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
900192ea:	b2b3      	uxth	r3, r6
900192ec:	9104      	str	r1, [sp, #16]
900192ee:	9804      	ldr	r0, [sp, #16]
900192f0:	441a      	add	r2, r3
900192f2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
900192f6:	b292      	uxth	r2, r2
900192f8:	4401      	add	r1, r0
900192fa:	fa0f f882 	sxth.w	r8, r2
900192fe:	b289      	uxth	r1, r1
90019300:	9105      	str	r1, [sp, #20]
90019302:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
90019306:	e9cd 2306 	strd	r2, r3, [sp, #24]
9001930a:	9b03      	ldr	r3, [sp, #12]
9001930c:	2b00      	cmp	r3, #0
9001930e:	d054      	beq.n	900193ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
90019310:	9902      	ldr	r1, [sp, #8]
90019312:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
90019316:	f7ff fdbd 	bl	90018e94 <_ZNK8touchgfx4Rect9intersectERKS0_>
9001931a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
9001931e:	b1d8      	cbz	r0, 90019358 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
90019320:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
90019324:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
90019328:	4576      	cmp	r6, lr
9001932a:	dc26      	bgt.n	9001937a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
9001932c:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
90019330:	44f4      	add	ip, lr
90019332:	fa0f fc8c 	sxth.w	ip, ip
90019336:	45e0      	cmp	r8, ip
90019338:	db1f      	blt.n	9001937a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
9001933a:	428f      	cmp	r7, r1
9001933c:	fa1f fc81 	uxth.w	ip, r1
90019340:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
90019344:	dc0f      	bgt.n	90019366 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
90019346:	9805      	ldr	r0, [sp, #20]
90019348:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
9001934c:	eba0 0c0c 	sub.w	ip, r0, ip
90019350:	eba1 010c 	sub.w	r1, r1, ip
90019354:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
90019358:	4620      	mov	r0, r4
9001935a:	9903      	ldr	r1, [sp, #12]
9001935c:	3d08      	subs	r5, #8
9001935e:	4604      	mov	r4, r0
90019360:	3901      	subs	r1, #1
90019362:	9103      	str	r1, [sp, #12]
90019364:	e7cf      	b.n	90019306 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
90019366:	4461      	add	r1, ip
90019368:	b209      	sxth	r1, r1
9001936a:	4549      	cmp	r1, r9
9001936c:	dcf5      	bgt.n	9001935a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
9001936e:	9904      	ldr	r1, [sp, #16]
90019370:	eba1 0c0c 	sub.w	ip, r1, ip
90019374:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
90019378:	e7ee      	b.n	90019358 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
9001937a:	428f      	cmp	r7, r1
9001937c:	dced      	bgt.n	9001935a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
9001937e:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
90019382:	4461      	add	r1, ip
90019384:	b209      	sxth	r1, r1
90019386:	4589      	cmp	r9, r1
90019388:	dbe7      	blt.n	9001935a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
9001938a:	4576      	cmp	r6, lr
9001938c:	fa1f fc8e 	uxth.w	ip, lr
90019390:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
90019394:	dc08      	bgt.n	900193a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
90019396:	eba2 0c0c 	sub.w	ip, r2, ip
9001939a:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
9001939e:	eba1 010c 	sub.w	r1, r1, ip
900193a2:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
900193a6:	e7d7      	b.n	90019358 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
900193a8:	4461      	add	r1, ip
900193aa:	b209      	sxth	r1, r1
900193ac:	4588      	cmp	r8, r1
900193ae:	dbd4      	blt.n	9001935a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
900193b0:	eba3 0c0c 	sub.w	ip, r3, ip
900193b4:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
900193b8:	e7ce      	b.n	90019358 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
900193ba:	2c00      	cmp	r4, #0
900193bc:	f000 8169 	beq.w	90019692 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
900193c0:	9b00      	ldr	r3, [sp, #0]
900193c2:	3301      	adds	r3, #1
900193c4:	f000 8165 	beq.w	90019692 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
900193c8:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
900193cc:	9802      	ldr	r0, [sp, #8]
900193ce:	4621      	mov	r1, r4
900193d0:	f7ff fd82 	bl	90018ed8 <_ZNK8touchgfx4Rect8includesERKS0_>
900193d4:	b120      	cbz	r0, 900193e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
900193d6:	f8bd 1000 	ldrh.w	r1, [sp]
900193da:	9801      	ldr	r0, [sp, #4]
900193dc:	f7ff fe92 	bl	90019104 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
900193e0:	9902      	ldr	r1, [sp, #8]
900193e2:	4620      	mov	r0, r4
900193e4:	f7ff fd56 	bl	90018e94 <_ZNK8touchgfx4Rect9intersectERKS0_>
900193e8:	2800      	cmp	r0, #0
900193ea:	f000 809b 	beq.w	90019524 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
900193ee:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
900193f2:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
900193f6:	fa1f f288 	uxth.w	r2, r8
900193fa:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
900193fe:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
90019402:	19d5      	adds	r5, r2, r7
90019404:	b2a1      	uxth	r1, r4
90019406:	45a0      	cmp	r8, r4
90019408:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
9001940c:	fa1f f985 	uxth.w	r9, r5
90019410:	440b      	add	r3, r1
90019412:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
90019416:	fa0f f589 	sxth.w	r5, r9
9001941a:	b29b      	uxth	r3, r3
9001941c:	9503      	str	r5, [sp, #12]
9001941e:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
90019422:	9507      	str	r5, [sp, #28]
90019424:	f340 809d 	ble.w	90019562 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
90019428:	1a52      	subs	r2, r2, r1
9001942a:	4584      	cmp	ip, r0
9001942c:	fa0f fe83 	sxth.w	lr, r3
90019430:	b292      	uxth	r2, r2
90019432:	b215      	sxth	r5, r2
90019434:	dd2f      	ble.n	90019496 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
90019436:	9e00      	ldr	r6, [sp, #0]
90019438:	fa1f fc8c 	uxth.w	ip, ip
9001943c:	b280      	uxth	r0, r0
9001943e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
90019442:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
90019446:	9e03      	ldr	r6, [sp, #12]
90019448:	ebac 0300 	sub.w	r3, ip, r0
9001944c:	448c      	add	ip, r1
9001944e:	eba6 060e 	sub.w	r6, r6, lr
90019452:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
90019456:	b29b      	uxth	r3, r3
90019458:	4470      	add	r0, lr
9001945a:	fa0f fc8c 	sxth.w	ip, ip
9001945e:	b21c      	sxth	r4, r3
90019460:	b200      	sxth	r0, r0
90019462:	4366      	muls	r6, r4
90019464:	ebac 0000 	sub.w	r0, ip, r0
90019468:	4368      	muls	r0, r5
9001946a:	4286      	cmp	r6, r0
9001946c:	db09      	blt.n	90019482 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
9001946e:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
90019472:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
90019476:	4417      	add	r7, r2
90019478:	f8ad 3020 	strh.w	r3, [sp, #32]
9001947c:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
90019480:	e685      	b.n	9001918e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
90019482:	440b      	add	r3, r1
90019484:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
90019488:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
9001948c:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
90019490:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90019494:	e67b      	b.n	9001918e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
90019496:	9e03      	ldr	r6, [sp, #12]
90019498:	45b6      	cmp	lr, r6
9001949a:	da28      	bge.n	900194ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
9001949c:	9b00      	ldr	r3, [sp, #0]
9001949e:	eba6 060e 	sub.w	r6, r6, lr
900194a2:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
900194a6:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
900194aa:	eb04 030c 	add.w	r3, r4, ip
900194ae:	fa1f f883 	uxth.w	r8, r3
900194b2:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
900194b6:	4403      	add	r3, r0
900194b8:	fa0f f988 	sxth.w	r9, r8
900194bc:	eba0 000c 	sub.w	r0, r0, ip
900194c0:	eba3 0308 	sub.w	r3, r3, r8
900194c4:	4368      	muls	r0, r5
900194c6:	b29b      	uxth	r3, r3
900194c8:	fa0f f883 	sxth.w	r8, r3
900194cc:	fb08 f606 	mul.w	r6, r8, r6
900194d0:	42b0      	cmp	r0, r6
900194d2:	dc06      	bgt.n	900194e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
900194d4:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
900194d8:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
900194dc:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
900194e0:	e7c9      	b.n	90019476 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
900194e2:	4423      	add	r3, r4
900194e4:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
900194e8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
900194ec:	e64f      	b.n	9001918e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
900194ee:	eba3 0309 	sub.w	r3, r3, r9
900194f2:	9807      	ldr	r0, [sp, #28]
900194f4:	b29b      	uxth	r3, r3
900194f6:	2806      	cmp	r0, #6
900194f8:	fa0f fc83 	sxth.w	ip, r3
900194fc:	d818      	bhi.n	90019530 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
900194fe:	4652      	mov	r2, sl
90019500:	ab0a      	add	r3, sp, #40	; 0x28
90019502:	f852 0fa0 	ldr.w	r0, [r2, #160]!
90019506:	6851      	ldr	r1, [r2, #4]
90019508:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
9001950c:	c303      	stmia	r3!, {r0, r1}
9001950e:	9b03      	ldr	r3, [sp, #12]
90019510:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
90019514:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
90019518:	ab0a      	add	r3, sp, #40	; 0x28
9001951a:	9801      	ldr	r0, [sp, #4]
9001951c:	e893 0006 	ldmia.w	r3, {r1, r2}
90019520:	f7ff fe06 	bl	90019130 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
90019524:	9b00      	ldr	r3, [sp, #0]
90019526:	f1aa 0a08 	sub.w	sl, sl, #8
9001952a:	3b01      	subs	r3, #1
9001952c:	9300      	str	r3, [sp, #0]
9001952e:	e747      	b.n	900193c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
90019530:	9800      	ldr	r0, [sp, #0]
90019532:	45ac      	cmp	ip, r5
90019534:	ea4f 00c0 	mov.w	r0, r0, lsl #3
90019538:	db0c      	blt.n	90019554 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
9001953a:	4417      	add	r7, r2
9001953c:	4458      	add	r0, fp
9001953e:	f8ad 4020 	strh.w	r4, [sp, #32]
90019542:	b2bf      	uxth	r7, r7
90019544:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
90019548:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
9001954c:	440f      	add	r7, r1
9001954e:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
90019552:	e61c      	b.n	9001918e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
90019554:	4458      	add	r0, fp
90019556:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
9001955a:	443b      	add	r3, r7
9001955c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
90019560:	e615      	b.n	9001918e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
90019562:	fa1f f18c 	uxth.w	r1, ip
90019566:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
9001956a:	b282      	uxth	r2, r0
9001956c:	4584      	cmp	ip, r0
9001956e:	eb01 0e05 	add.w	lr, r1, r5
90019572:	9204      	str	r2, [sp, #16]
90019574:	fa1f fe8e 	uxth.w	lr, lr
90019578:	9e04      	ldr	r6, [sp, #16]
9001957a:	fa0f f28e 	sxth.w	r2, lr
9001957e:	9205      	str	r2, [sp, #20]
90019580:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
90019584:	4432      	add	r2, r6
90019586:	b292      	uxth	r2, r2
90019588:	9206      	str	r2, [sp, #24]
9001958a:	da26      	bge.n	900195da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
9001958c:	eba3 0309 	sub.w	r3, r3, r9
90019590:	eba2 020e 	sub.w	r2, r2, lr
90019594:	eba0 000c 	sub.w	r0, r0, ip
90019598:	eba4 0408 	sub.w	r4, r4, r8
9001959c:	b29b      	uxth	r3, r3
9001959e:	b292      	uxth	r2, r2
900195a0:	fa0f fa83 	sxth.w	sl, r3
900195a4:	b211      	sxth	r1, r2
900195a6:	fb0a f000 	mul.w	r0, sl, r0
900195aa:	434c      	muls	r4, r1
900195ac:	42a0      	cmp	r0, r4
900195ae:	9800      	ldr	r0, [sp, #0]
900195b0:	ea4f 00c0 	mov.w	r0, r0, lsl #3
900195b4:	dc06      	bgt.n	900195c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
900195b6:	4458      	add	r0, fp
900195b8:	9a05      	ldr	r2, [sp, #20]
900195ba:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
900195be:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
900195c2:	e7ca      	b.n	9001955a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
900195c4:	eb0b 0300 	add.w	r3, fp, r0
900195c8:	9903      	ldr	r1, [sp, #12]
900195ca:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
900195ce:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
900195d2:	442a      	add	r2, r5
900195d4:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
900195d8:	e5d9      	b.n	9001918e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
900195da:	9e04      	ldr	r6, [sp, #16]
900195dc:	9a03      	ldr	r2, [sp, #12]
900195de:	1b89      	subs	r1, r1, r6
900195e0:	b21e      	sxth	r6, r3
900195e2:	b289      	uxth	r1, r1
900195e4:	4296      	cmp	r6, r2
900195e6:	fa0f fc81 	sxth.w	ip, r1
900195ea:	dd25      	ble.n	90019638 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
900195ec:	eba3 0309 	sub.w	r3, r3, r9
900195f0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
900195f4:	9e05      	ldr	r6, [sp, #20]
900195f6:	eba4 0408 	sub.w	r4, r4, r8
900195fa:	b29b      	uxth	r3, r3
900195fc:	eba6 0902 	sub.w	r9, r6, r2
90019600:	fb0c f404 	mul.w	r4, ip, r4
90019604:	b218      	sxth	r0, r3
90019606:	9a00      	ldr	r2, [sp, #0]
90019608:	fb00 f909 	mul.w	r9, r0, r9
9001960c:	00d2      	lsls	r2, r2, #3
9001960e:	454c      	cmp	r4, r9
90019610:	db03      	blt.n	9001961a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
90019612:	445a      	add	r2, fp
90019614:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
90019618:	e79f      	b.n	9001955a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
9001961a:	eb0b 0302 	add.w	r3, fp, r2
9001961e:	9a03      	ldr	r2, [sp, #12]
90019620:	4429      	add	r1, r5
90019622:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
90019626:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
9001962a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
9001962e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
90019632:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90019636:	e5aa      	b.n	9001918e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
90019638:	9b06      	ldr	r3, [sp, #24]
9001963a:	9c07      	ldr	r4, [sp, #28]
9001963c:	eba3 020e 	sub.w	r2, r3, lr
90019640:	2c06      	cmp	r4, #6
90019642:	b292      	uxth	r2, r2
90019644:	b213      	sxth	r3, r2
90019646:	d80d      	bhi.n	90019664 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
90019648:	4651      	mov	r1, sl
9001964a:	aa0a      	add	r2, sp, #40	; 0x28
9001964c:	f851 0fa0 	ldr.w	r0, [r1, #160]!
90019650:	6849      	ldr	r1, [r1, #4]
90019652:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
90019656:	9b05      	ldr	r3, [sp, #20]
90019658:	c203      	stmia	r2!, {r0, r1}
9001965a:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
9001965e:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
90019662:	e759      	b.n	90019518 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
90019664:	9c00      	ldr	r4, [sp, #0]
90019666:	4563      	cmp	r3, ip
90019668:	ea4f 04c4 	mov.w	r4, r4, lsl #3
9001966c:	db0d      	blt.n	9001968a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
9001966e:	4429      	add	r1, r5
90019670:	9a04      	ldr	r2, [sp, #16]
90019672:	445c      	add	r4, fp
90019674:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90019678:	b289      	uxth	r1, r1
9001967a:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
9001967e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
90019682:	4411      	add	r1, r2
90019684:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
90019688:	e581      	b.n	9001918e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
9001968a:	445c      	add	r4, fp
9001968c:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
90019690:	e79f      	b.n	900195d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
90019692:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
90019696:	2f07      	cmp	r7, #7
90019698:	d806      	bhi.n	900196a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
9001969a:	ab08      	add	r3, sp, #32
9001969c:	9801      	ldr	r0, [sp, #4]
9001969e:	e893 0006 	ldmia.w	r3, {r1, r2}
900196a2:	f7ff fd45 	bl	90019130 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
900196a6:	e5dc      	b.n	90019262 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
900196a8:	f107 39ff 	add.w	r9, r7, #4294967295
900196ac:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
900196b0:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
900196b4:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
900196b8:	f04f 35ff 	mov.w	r5, #4294967295
900196bc:	2400      	movs	r4, #0
900196be:	9304      	str	r3, [sp, #16]
900196c0:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
900196c4:	f109 32ff 	add.w	r2, r9, #4294967295
900196c8:	9300      	str	r3, [sp, #0]
900196ca:	4690      	mov	r8, r2
900196cc:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
900196d0:	9303      	str	r3, [sp, #12]
900196d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
900196d6:	f1b8 3fff 	cmp.w	r8, #4294967295
900196da:	6818      	ldr	r0, [r3, #0]
900196dc:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
900196e0:	9206      	str	r2, [sp, #24]
900196e2:	bf16      	itet	ne
900196e4:	9904      	ldrne	r1, [sp, #16]
900196e6:	f8dd e008 	ldreq.w	lr, [sp, #8]
900196ea:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
900196ee:	9305      	str	r3, [sp, #20]
900196f0:	f8be 1006 	ldrh.w	r1, [lr, #6]
900196f4:	f8be 6004 	ldrh.w	r6, [lr, #4]
900196f8:	fb16 f601 	smulbb	r6, r6, r1
900196fc:	6859      	ldr	r1, [r3, #4]
900196fe:	e8ac 0003 	stmia.w	ip!, {r0, r1}
90019702:	4671      	mov	r1, lr
90019704:	a80a      	add	r0, sp, #40	; 0x28
90019706:	f7ff fc09 	bl	90018f1c <_ZN8touchgfx4Rect11expandToFitERKS0_>
9001970a:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
9001970e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
90019712:	9b03      	ldr	r3, [sp, #12]
90019714:	9a00      	ldr	r2, [sp, #0]
90019716:	fb11 f100 	smulbb	r1, r1, r0
9001971a:	2008      	movs	r0, #8
9001971c:	fb02 6603 	mla	r6, r2, r3, r6
90019720:	1b8e      	subs	r6, r1, r6
90019722:	fb91 f1f0 	sdiv	r1, r1, r0
90019726:	42b1      	cmp	r1, r6
90019728:	dc21      	bgt.n	9001976e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
9001972a:	4556      	cmp	r6, sl
9001972c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
90019730:	da03      	bge.n	9001973a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
90019732:	b1e6      	cbz	r6, 9001976e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
90019734:	46b2      	mov	sl, r6
90019736:	4645      	mov	r5, r8
90019738:	464c      	mov	r4, r9
9001973a:	f108 38ff 	add.w	r8, r8, #4294967295
9001973e:	f118 0f02 	cmn.w	r8, #2
90019742:	d1c8      	bne.n	900196d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
90019744:	f1b2 3fff 	cmp.w	r2, #4294967295
90019748:	f1a7 0708 	sub.w	r7, r7, #8
9001974c:	4691      	mov	r9, r2
9001974e:	d1b7      	bne.n	900196c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
90019750:	9b01      	ldr	r3, [sp, #4]
90019752:	b2a6      	uxth	r6, r4
90019754:	00e4      	lsls	r4, r4, #3
90019756:	1918      	adds	r0, r3, r4
90019758:	1c6b      	adds	r3, r5, #1
9001975a:	d10b      	bne.n	90019774 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
9001975c:	4601      	mov	r1, r0
9001975e:	9802      	ldr	r0, [sp, #8]
90019760:	f7ff fbdc 	bl	90018f1c <_ZN8touchgfx4Rect11expandToFitERKS0_>
90019764:	4631      	mov	r1, r6
90019766:	9801      	ldr	r0, [sp, #4]
90019768:	f7ff fccc 	bl	90019104 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
9001976c:	e50f      	b.n	9001918e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
9001976e:	4645      	mov	r5, r8
90019770:	464c      	mov	r4, r9
90019772:	e7ed      	b.n	90019750 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
90019774:	9b01      	ldr	r3, [sp, #4]
90019776:	00ed      	lsls	r5, r5, #3
90019778:	445c      	add	r4, fp
9001977a:	1959      	adds	r1, r3, r5
9001977c:	445d      	add	r5, fp
9001977e:	f7ff fbcd 	bl	90018f1c <_ZN8touchgfx4Rect11expandToFitERKS0_>
90019782:	9b02      	ldr	r3, [sp, #8]
90019784:	cb03      	ldmia	r3!, {r0, r1}
90019786:	9b02      	ldr	r3, [sp, #8]
90019788:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
9001978c:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
90019790:	f854 0fa8 	ldr.w	r0, [r4, #168]!
90019794:	6861      	ldr	r1, [r4, #4]
90019796:	c303      	stmia	r3!, {r0, r1}
90019798:	e7e4      	b.n	90019764 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

9001979c <_ZN8touchgfx11Application4drawERNS_4RectE>:
9001979c:	4b1d      	ldr	r3, [pc, #116]	; (90019814 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
9001979e:	b530      	push	{r4, r5, lr}
900197a0:	f9b3 2000 	ldrsh.w	r2, [r3]
900197a4:	b085      	sub	sp, #20
900197a6:	4b1c      	ldr	r3, [pc, #112]	; (90019818 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
900197a8:	460c      	mov	r4, r1
900197aa:	2100      	movs	r1, #0
900197ac:	4605      	mov	r5, r0
900197ae:	f9b3 3000 	ldrsh.w	r3, [r3]
900197b2:	6820      	ldr	r0, [r4, #0]
900197b4:	9100      	str	r1, [sp, #0]
900197b6:	f8ad 3006 	strh.w	r3, [sp, #6]
900197ba:	ab02      	add	r3, sp, #8
900197bc:	6861      	ldr	r1, [r4, #4]
900197be:	f8ad 2004 	strh.w	r2, [sp, #4]
900197c2:	c303      	stmia	r3!, {r0, r1}
900197c4:	4669      	mov	r1, sp
900197c6:	a802      	add	r0, sp, #8
900197c8:	f7fa fdc8 	bl	9001435c <_ZN8touchgfx4RectaNERKS0_>
900197cc:	ab02      	add	r3, sp, #8
900197ce:	cb03      	ldmia	r3!, {r0, r1}
900197d0:	4b12      	ldr	r3, [pc, #72]	; (9001981c <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
900197d2:	6020      	str	r0, [r4, #0]
900197d4:	6818      	ldr	r0, [r3, #0]
900197d6:	6061      	str	r1, [r4, #4]
900197d8:	b138      	cbz	r0, 900197ea <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
900197da:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
900197de:	b133      	cbz	r3, 900197ee <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
900197e0:	6821      	ldr	r1, [r4, #0]
900197e2:	4628      	mov	r0, r5
900197e4:	6862      	ldr	r2, [r4, #4]
900197e6:	f7ff fcc5 	bl	90019174 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
900197ea:	b005      	add	sp, #20
900197ec:	bd30      	pop	{r4, r5, pc}
900197ee:	6803      	ldr	r3, [r0, #0]
900197f0:	4621      	mov	r1, r4
900197f2:	689b      	ldr	r3, [r3, #8]
900197f4:	4798      	blx	r3
900197f6:	4b0a      	ldr	r3, [pc, #40]	; (90019820 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
900197f8:	6818      	ldr	r0, [r3, #0]
900197fa:	b118      	cbz	r0, 90019804 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
900197fc:	6803      	ldr	r3, [r0, #0]
900197fe:	4621      	mov	r1, r4
90019800:	689b      	ldr	r3, [r3, #8]
90019802:	4798      	blx	r3
90019804:	4b07      	ldr	r3, [pc, #28]	; (90019824 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
90019806:	4621      	mov	r1, r4
90019808:	6818      	ldr	r0, [r3, #0]
9001980a:	6803      	ldr	r3, [r0, #0]
9001980c:	695b      	ldr	r3, [r3, #20]
9001980e:	4798      	blx	r3
90019810:	e7eb      	b.n	900197ea <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
90019812:	bf00      	nop
90019814:	20026cd0 	.word	0x20026cd0
90019818:	20026cd2 	.word	0x20026cd2
9001981c:	20026d18 	.word	0x20026d18
90019820:	20026d14 	.word	0x20026d14
90019824:	20026cdc 	.word	0x20026cdc

90019828 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
90019828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001982c:	4604      	mov	r4, r0
9001982e:	b09b      	sub	sp, #108	; 0x6c
90019830:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
90019834:	b129      	cbz	r1, 90019842 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
90019836:	2300      	movs	r3, #0
90019838:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
9001983c:	b01b      	add	sp, #108	; 0x6c
9001983e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019842:	f500 7696 	add.w	r6, r0, #300	; 0x12c
90019846:	4630      	mov	r0, r6
90019848:	f7fa fdcb 	bl	900143e2 <_ZNK8touchgfx4Rect7isEmptyEv>
9001984c:	4605      	mov	r5, r0
9001984e:	b940      	cbnz	r0, 90019862 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
90019850:	4620      	mov	r0, r4
90019852:	e896 0006 	ldmia.w	r6, {r1, r2}
90019856:	f7ff fc8d 	bl	90019174 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
9001985a:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
9001985e:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
90019862:	4ba6      	ldr	r3, [pc, #664]	; (90019afc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
90019864:	681b      	ldr	r3, [r3, #0]
90019866:	b33b      	cbz	r3, 900198b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
90019868:	4da5      	ldr	r5, [pc, #660]	; (90019b00 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
9001986a:	4628      	mov	r0, r5
9001986c:	f7fa fdb9 	bl	900143e2 <_ZNK8touchgfx4Rect7isEmptyEv>
90019870:	4606      	mov	r6, r0
90019872:	bb08      	cbnz	r0, 900198b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
90019874:	4628      	mov	r0, r5
90019876:	f7ff f98d 	bl	90018b94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
9001987a:	6829      	ldr	r1, [r5, #0]
9001987c:	686a      	ldr	r2, [r5, #4]
9001987e:	4620      	mov	r0, r4
90019880:	f7ff fc78 	bl	90019174 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90019884:	802e      	strh	r6, [r5, #0]
90019886:	806e      	strh	r6, [r5, #2]
90019888:	80ae      	strh	r6, [r5, #4]
9001988a:	80ee      	strh	r6, [r5, #6]
9001988c:	4f9d      	ldr	r7, [pc, #628]	; (90019b04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
9001988e:	a809      	add	r0, sp, #36	; 0x24
90019890:	f7ff fbe3 	bl	9001905a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
90019894:	883d      	ldrh	r5, [r7, #0]
90019896:	462e      	mov	r6, r5
90019898:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
9001989c:	42b3      	cmp	r3, r6
9001989e:	d910      	bls.n	900198c2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
900198a0:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
900198a4:	3601      	adds	r6, #1
900198a6:	a809      	add	r0, sp, #36	; 0x24
900198a8:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
900198ac:	b2b6      	uxth	r6, r6
900198ae:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
900198b2:	f7ff fc3d 	bl	90019130 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
900198b6:	e7ef      	b.n	90019898 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
900198b8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
900198bc:	2b00      	cmp	r3, #0
900198be:	d1e5      	bne.n	9001988c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
900198c0:	e7bc      	b.n	9001983c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
900198c2:	462e      	mov	r6, r5
900198c4:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
900198c8:	42b3      	cmp	r3, r6
900198ca:	d90b      	bls.n	900198e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
900198cc:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
900198d0:	3601      	adds	r6, #1
900198d2:	4620      	mov	r0, r4
900198d4:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
900198d8:	b2b6      	uxth	r6, r6
900198da:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
900198de:	f7ff fc49 	bl	90019174 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
900198e2:	e7ef      	b.n	900198c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
900198e4:	4a88      	ldr	r2, [pc, #544]	; (90019b08 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
900198e6:	6813      	ldr	r3, [r2, #0]
900198e8:	4690      	mov	r8, r2
900198ea:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
900198ee:	2b01      	cmp	r3, #1
900198f0:	f040 8093 	bne.w	90019a1a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f2>
900198f4:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
900198f8:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
900198fc:	f04f 0900 	mov.w	r9, #0
90019900:	33aa      	adds	r3, #170	; 0xaa
90019902:	42a8      	cmp	r0, r5
90019904:	f103 0308 	add.w	r3, r3, #8
90019908:	dd0a      	ble.n	90019920 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
9001990a:	f833 2c08 	ldrh.w	r2, [r3, #-8]
9001990e:	3501      	adds	r5, #1
90019910:	f833 1c04 	ldrh.w	r1, [r3, #-4]
90019914:	440a      	add	r2, r1
90019916:	b212      	sxth	r2, r2
90019918:	4591      	cmp	r9, r2
9001991a:	bfb8      	it	lt
9001991c:	4691      	movlt	r9, r2
9001991e:	e7f0      	b.n	90019902 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
90019920:	4b7a      	ldr	r3, [pc, #488]	; (90019b0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
90019922:	4e7b      	ldr	r6, [pc, #492]	; (90019b10 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
90019924:	881d      	ldrh	r5, [r3, #0]
90019926:	2300      	movs	r3, #0
90019928:	2d0f      	cmp	r5, #15
9001992a:	bf8c      	ite	hi
9001992c:	08ed      	lsrhi	r5, r5, #3
9001992e:	2501      	movls	r5, #1
90019930:	e9cd 3305 	strd	r3, r3, [sp, #20]
90019934:	f8bd 3016 	ldrh.w	r3, [sp, #22]
90019938:	f8bd 101a 	ldrh.w	r1, [sp, #26]
9001993c:	f8d8 0000 	ldr.w	r0, [r8]
90019940:	440b      	add	r3, r1
90019942:	6802      	ldr	r2, [r0, #0]
90019944:	b21b      	sxth	r3, r3
90019946:	4599      	cmp	r9, r3
90019948:	dd4a      	ble.n	900199e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
9001994a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
9001994e:	4798      	blx	r3
90019950:	f8bd 201a 	ldrh.w	r2, [sp, #26]
90019954:	f8bd 3016 	ldrh.w	r3, [sp, #22]
90019958:	4413      	add	r3, r2
9001995a:	b21b      	sxth	r3, r3
9001995c:	195a      	adds	r2, r3, r5
9001995e:	4290      	cmp	r0, r2
90019960:	da07      	bge.n	90019972 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
90019962:	4581      	cmp	r9, r0
90019964:	dd05      	ble.n	90019972 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
90019966:	4298      	cmp	r0, r3
90019968:	da33      	bge.n	900199d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
9001996a:	2b00      	cmp	r3, #0
9001996c:	dd31      	ble.n	900199d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
9001996e:	4648      	mov	r0, r9
90019970:	e004      	b.n	9001997c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
90019972:	4298      	cmp	r0, r3
90019974:	dbfb      	blt.n	9001996e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
90019976:	4548      	cmp	r0, r9
90019978:	bfa8      	it	ge
9001997a:	4648      	movge	r0, r9
9001997c:	f9b6 2000 	ldrsh.w	r2, [r6]
90019980:	2100      	movs	r1, #0
90019982:	1ac0      	subs	r0, r0, r3
90019984:	f8b7 a000 	ldrh.w	sl, [r7]
90019988:	f8ad 1014 	strh.w	r1, [sp, #20]
9001998c:	f8ad 3016 	strh.w	r3, [sp, #22]
90019990:	f8ad 2018 	strh.w	r2, [sp, #24]
90019994:	f8ad 001a 	strh.w	r0, [sp, #26]
90019998:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
9001999c:	4553      	cmp	r3, sl
9001999e:	d9c9      	bls.n	90019934 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
900199a0:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
900199a4:	ab07      	add	r3, sp, #28
900199a6:	f852 0fa8 	ldr.w	r0, [r2, #168]!
900199aa:	6851      	ldr	r1, [r2, #4]
900199ac:	c303      	stmia	r3!, {r0, r1}
900199ae:	a807      	add	r0, sp, #28
900199b0:	a905      	add	r1, sp, #20
900199b2:	f7fa fcd3 	bl	9001435c <_ZN8touchgfx4RectaNERKS0_>
900199b6:	a807      	add	r0, sp, #28
900199b8:	f7fa fd13 	bl	900143e2 <_ZNK8touchgfx4Rect7isEmptyEv>
900199bc:	b920      	cbnz	r0, 900199c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
900199be:	6823      	ldr	r3, [r4, #0]
900199c0:	a907      	add	r1, sp, #28
900199c2:	4620      	mov	r0, r4
900199c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900199c6:	4798      	blx	r3
900199c8:	f10a 0a01 	add.w	sl, sl, #1
900199cc:	fa1f fa8a 	uxth.w	sl, sl
900199d0:	e7e2      	b.n	90019998 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
900199d2:	f8d8 0000 	ldr.w	r0, [r8]
900199d6:	2101      	movs	r1, #1
900199d8:	6803      	ldr	r3, [r0, #0]
900199da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900199dc:	4798      	blx	r3
900199de:	e7a9      	b.n	90019934 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
900199e0:	69d3      	ldr	r3, [r2, #28]
900199e2:	4798      	blx	r3
900199e4:	4b4b      	ldr	r3, [pc, #300]	; (90019b14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
900199e6:	781b      	ldrb	r3, [r3, #0]
900199e8:	2b00      	cmp	r3, #0
900199ea:	f43f af27 	beq.w	9001983c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
900199ee:	2300      	movs	r3, #0
900199f0:	883d      	ldrh	r5, [r7, #0]
900199f2:	34ea      	adds	r4, #234	; 0xea
900199f4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
900199f8:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
900199fc:	42ab      	cmp	r3, r5
900199fe:	f67f af1d 	bls.w	9001983c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
90019a02:	ab1a      	add	r3, sp, #104	; 0x68
90019a04:	4620      	mov	r0, r4
90019a06:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
90019a0a:	3501      	adds	r5, #1
90019a0c:	3b44      	subs	r3, #68	; 0x44
90019a0e:	b2ad      	uxth	r5, r5
90019a10:	e893 0006 	ldmia.w	r3, {r1, r2}
90019a14:	f7ff fb8c 	bl	90019130 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
90019a18:	e7ee      	b.n	900199f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d0>
90019a1a:	2b02      	cmp	r3, #2
90019a1c:	f040 813d 	bne.w	90019c9a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x472>
90019a20:	4b3d      	ldr	r3, [pc, #244]	; (90019b18 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
90019a22:	781b      	ldrb	r3, [r3, #0]
90019a24:	2b01      	cmp	r3, #1
90019a26:	d02c      	beq.n	90019a82 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25a>
90019a28:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
90019a2c:	883a      	ldrh	r2, [r7, #0]
90019a2e:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
90019a32:	3201      	adds	r2, #1
90019a34:	b292      	uxth	r2, r2
90019a36:	2900      	cmp	r1, #0
90019a38:	d0d4      	beq.n	900199e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
90019a3a:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
90019a3e:	4610      	mov	r0, r2
90019a40:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
90019a44:	f04f 0a00 	mov.w	sl, #0
90019a48:	441d      	add	r5, r3
90019a4a:	b22d      	sxth	r5, r5
90019a4c:	b283      	uxth	r3, r0
90019a4e:	ea4f 06ca 	mov.w	r6, sl, lsl #3
90019a52:	4299      	cmp	r1, r3
90019a54:	f240 80c4 	bls.w	90019be0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
90019a58:	4426      	add	r6, r4
90019a5a:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
90019a5e:	4684      	mov	ip, r0
90019a60:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
90019a64:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
90019a68:	4573      	cmp	r3, lr
90019a6a:	f340 80a6 	ble.w	90019bba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
90019a6e:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
90019a72:	4475      	add	r5, lr
90019a74:	b22d      	sxth	r5, r5
90019a76:	429d      	cmp	r5, r3
90019a78:	bfa8      	it	ge
90019a7a:	461d      	movge	r5, r3
90019a7c:	3001      	adds	r0, #1
90019a7e:	46e2      	mov	sl, ip
90019a80:	e7e4      	b.n	90019a4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x224>
90019a82:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
90019a86:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
90019a8a:	f1bb 0f00 	cmp.w	fp, #0
90019a8e:	d0a9      	beq.n	900199e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
90019a90:	883b      	ldrh	r3, [r7, #0]
90019a92:	2600      	movs	r6, #0
90019a94:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
90019a98:	3301      	adds	r3, #1
90019a9a:	b29b      	uxth	r3, r3
90019a9c:	b299      	uxth	r1, r3
90019a9e:	00f5      	lsls	r5, r6, #3
90019aa0:	458b      	cmp	fp, r1
90019aa2:	d93b      	bls.n	90019b1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
90019aa4:	4425      	add	r5, r4
90019aa6:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
90019aaa:	469c      	mov	ip, r3
90019aac:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
90019ab0:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
90019ab4:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
90019ab8:	4408      	add	r0, r1
90019aba:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
90019abe:	4471      	add	r1, lr
90019ac0:	b200      	sxth	r0, r0
90019ac2:	b209      	sxth	r1, r1
90019ac4:	4288      	cmp	r0, r1
90019ac6:	da06      	bge.n	90019ad6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ae>
90019ac8:	4586      	cmp	lr, r0
90019aca:	4672      	mov	r2, lr
90019acc:	bfb8      	it	lt
90019ace:	4602      	movlt	r2, r0
90019ad0:	3301      	adds	r3, #1
90019ad2:	4666      	mov	r6, ip
90019ad4:	e7e2      	b.n	90019a9c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x274>
90019ad6:	d10b      	bne.n	90019af0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
90019ad8:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
90019adc:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
90019ae0:	458c      	cmp	ip, r1
90019ae2:	bfb4      	ite	lt
90019ae4:	469c      	movlt	ip, r3
90019ae6:	46b4      	movge	ip, r6
90019ae8:	4572      	cmp	r2, lr
90019aea:	bfb8      	it	lt
90019aec:	4672      	movlt	r2, lr
90019aee:	e7ef      	b.n	90019ad0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
90019af0:	428a      	cmp	r2, r1
90019af2:	46b4      	mov	ip, r6
90019af4:	bfb8      	it	lt
90019af6:	460a      	movlt	r2, r1
90019af8:	e7ea      	b.n	90019ad0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
90019afa:	bf00      	nop
90019afc:	20026d14 	.word	0x20026d14
90019b00:	20026d20 	.word	0x20026d20
90019b04:	20000050 	.word	0x20000050
90019b08:	20026cdc 	.word	0x20026cdc
90019b0c:	20026cd2 	.word	0x20026cd2
90019b10:	20026cd0 	.word	0x20026cd0
90019b14:	20026cda 	.word	0x20026cda
90019b18:	20026cd4 	.word	0x20026cd4
90019b1c:	1961      	adds	r1, r4, r5
90019b1e:	ab07      	add	r3, sp, #28
90019b20:	f851 0fa8 	ldr.w	r0, [r1, #168]!
90019b24:	6849      	ldr	r1, [r1, #4]
90019b26:	c303      	stmia	r3!, {r0, r1}
90019b28:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
90019b2c:	a807      	add	r0, sp, #28
90019b2e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
90019b32:	2b13      	cmp	r3, #19
90019b34:	440b      	add	r3, r1
90019b36:	bfd8      	it	le
90019b38:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
90019b3c:	1a9b      	subs	r3, r3, r2
90019b3e:	f8ad 201c 	strh.w	r2, [sp, #28]
90019b42:	f8ad 3020 	strh.w	r3, [sp, #32]
90019b46:	f7ff f89b 	bl	90018c80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90019b4a:	a807      	add	r0, sp, #28
90019b4c:	f7fa fc49 	bl	900143e2 <_ZNK8touchgfx4Rect7isEmptyEv>
90019b50:	2800      	cmp	r0, #0
90019b52:	d198      	bne.n	90019a86 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
90019b54:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
90019b58:	4425      	add	r5, r4
90019b5a:	f8d8 0000 	ldr.w	r0, [r8]
90019b5e:	f1bc 0f14 	cmp.w	ip, #20
90019b62:	f8bd 3020 	ldrh.w	r3, [sp, #32]
90019b66:	f8d0 e000 	ldr.w	lr, [r0]
90019b6a:	bfa8      	it	ge
90019b6c:	f04f 0c14 	movge.w	ip, #20
90019b70:	f8bd 201e 	ldrh.w	r2, [sp, #30]
90019b74:	f8bd 101c 	ldrh.w	r1, [sp, #28]
90019b78:	fa1f fc8c 	uxth.w	ip, ip
90019b7c:	f8cd c000 	str.w	ip, [sp]
90019b80:	f8de a074 	ldr.w	sl, [lr, #116]	; 0x74
90019b84:	47d0      	blx	sl
90019b86:	4682      	mov	sl, r0
90019b88:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90019b8c:	a807      	add	r0, sp, #28
90019b8e:	f7ff f801 	bl	90018b94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
90019b92:	6823      	ldr	r3, [r4, #0]
90019b94:	4620      	mov	r0, r4
90019b96:	a907      	add	r1, sp, #28
90019b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90019b9a:	4798      	blx	r3
90019b9c:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
90019ba0:	eba0 000a 	sub.w	r0, r0, sl
90019ba4:	b200      	sxth	r0, r0
90019ba6:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
90019baa:	2800      	cmp	r0, #0
90019bac:	f47f af6b 	bne.w	90019a86 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
90019bb0:	b2b1      	uxth	r1, r6
90019bb2:	4648      	mov	r0, r9
90019bb4:	f7ff faa6 	bl	90019104 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90019bb8:	e765      	b.n	90019a86 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
90019bba:	d10c      	bne.n	90019bd6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
90019bbc:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
90019bc0:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
90019bc4:	45b4      	cmp	ip, r6
90019bc6:	bfb4      	ite	lt
90019bc8:	4684      	movlt	ip, r0
90019bca:	46d4      	movge	ip, sl
90019bcc:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
90019bd0:	4433      	add	r3, r6
90019bd2:	b21b      	sxth	r3, r3
90019bd4:	e74f      	b.n	90019a76 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x24e>
90019bd6:	4575      	cmp	r5, lr
90019bd8:	46d4      	mov	ip, sl
90019bda:	bfa8      	it	ge
90019bdc:	4675      	movge	r5, lr
90019bde:	e74d      	b.n	90019a7c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x254>
90019be0:	eb0b 0006 	add.w	r0, fp, r6
90019be4:	4426      	add	r6, r4
90019be6:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
90019bea:	f1b9 0f13 	cmp.w	r9, #19
90019bee:	bfdc      	itt	le
90019bf0:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
90019bf4:	444d      	addle	r5, r9
90019bf6:	e9cd 1202 	strd	r1, r2, [sp, #8]
90019bfa:	bfd8      	it	le
90019bfc:	b22d      	sxthle	r5, r5
90019bfe:	f7fa fbf0 	bl	900143e2 <_ZNK8touchgfx4Rect7isEmptyEv>
90019c02:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
90019c06:	2800      	cmp	r0, #0
90019c08:	f47f af15 	bne.w	90019a36 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x20e>
90019c0c:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
90019c10:	fa1f f989 	uxth.w	r9, r9
90019c14:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90019c18:	eba5 050c 	sub.w	r5, r5, ip
90019c1c:	fa1f f28c 	uxth.w	r2, ip
90019c20:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
90019c24:	eb02 0009 	add.w	r0, r2, r9
90019c28:	2d14      	cmp	r5, #20
90019c2a:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
90019c2e:	bfa8      	it	ge
90019c30:	2514      	movge	r5, #20
90019c32:	b200      	sxth	r0, r0
90019c34:	f8ad 101c 	strh.w	r1, [sp, #28]
90019c38:	b289      	uxth	r1, r1
90019c3a:	fa1f fe85 	uxth.w	lr, r5
90019c3e:	eba0 000c 	sub.w	r0, r0, ip
90019c42:	f8ad c01e 	strh.w	ip, [sp, #30]
90019c46:	4586      	cmp	lr, r0
90019c48:	f8d8 0000 	ldr.w	r0, [r8]
90019c4c:	f8ad 3020 	strh.w	r3, [sp, #32]
90019c50:	b29b      	uxth	r3, r3
90019c52:	bfb8      	it	lt
90019c54:	46f1      	movlt	r9, lr
90019c56:	6805      	ldr	r5, [r0, #0]
90019c58:	f8cd 9000 	str.w	r9, [sp]
90019c5c:	6f6d      	ldr	r5, [r5, #116]	; 0x74
90019c5e:	47a8      	blx	r5
90019c60:	6823      	ldr	r3, [r4, #0]
90019c62:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90019c66:	a907      	add	r1, sp, #28
90019c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90019c6a:	4620      	mov	r0, r4
90019c6c:	4798      	blx	r3
90019c6e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
90019c72:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
90019c76:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
90019c7a:	1a5b      	subs	r3, r3, r1
90019c7c:	440a      	add	r2, r1
90019c7e:	b21b      	sxth	r3, r3
90019c80:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
90019c84:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
90019c88:	2b00      	cmp	r3, #0
90019c8a:	f47f aecf 	bne.w	90019a2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
90019c8e:	fa1f f18a 	uxth.w	r1, sl
90019c92:	4658      	mov	r0, fp
90019c94:	f7ff fa36 	bl	90019104 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90019c98:	e6c8      	b.n	90019a2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
90019c9a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
90019c9e:	42ab      	cmp	r3, r5
90019ca0:	f67f aea0 	bls.w	900199e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
90019ca4:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
90019ca8:	ab07      	add	r3, sp, #28
90019caa:	f852 0fa8 	ldr.w	r0, [r2, #168]!
90019cae:	6851      	ldr	r1, [r2, #4]
90019cb0:	c303      	stmia	r3!, {r0, r1}
90019cb2:	a807      	add	r0, sp, #28
90019cb4:	f7fa fb95 	bl	900143e2 <_ZNK8touchgfx4Rect7isEmptyEv>
90019cb8:	b920      	cbnz	r0, 90019cc4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49c>
90019cba:	6823      	ldr	r3, [r4, #0]
90019cbc:	a907      	add	r1, sp, #28
90019cbe:	4620      	mov	r0, r4
90019cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90019cc2:	4798      	blx	r3
90019cc4:	3501      	adds	r5, #1
90019cc6:	b2ad      	uxth	r5, r5
90019cc8:	e7e7      	b.n	90019c9a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x472>
90019cca:	bf00      	nop

90019ccc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
90019ccc:	4b03      	ldr	r3, [pc, #12]	; (90019cdc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
90019cce:	2200      	movs	r2, #0
90019cd0:	801a      	strh	r2, [r3, #0]
90019cd2:	805a      	strh	r2, [r3, #2]
90019cd4:	809a      	strh	r2, [r3, #4]
90019cd6:	80da      	strh	r2, [r3, #6]
90019cd8:	4770      	bx	lr
90019cda:	bf00      	nop
90019cdc:	20026d20 	.word	0x20026d20

90019ce0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
90019ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019ce4:	b099      	sub	sp, #100	; 0x64
90019ce6:	4607      	mov	r7, r0
90019ce8:	4614      	mov	r4, r2
90019cea:	461d      	mov	r5, r3
90019cec:	a802      	add	r0, sp, #8
90019cee:	468a      	mov	sl, r1
90019cf0:	f000 fe63 	bl	9001a9ba <_ZN8touchgfx12TextProviderC1Ev>
90019cf4:	683b      	ldr	r3, [r7, #0]
90019cf6:	4638      	mov	r0, r7
90019cf8:	f242 0b0b 	movw	fp, #8203	; 0x200b
90019cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90019cfe:	4798      	blx	r3
90019d00:	462a      	mov	r2, r5
90019d02:	2500      	movs	r5, #0
90019d04:	4621      	mov	r1, r4
90019d06:	4603      	mov	r3, r0
90019d08:	a802      	add	r0, sp, #8
90019d0a:	462c      	mov	r4, r5
90019d0c:	46a9      	mov	r9, r5
90019d0e:	46a8      	mov	r8, r5
90019d10:	f000 fe98 	bl	9001aa44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
90019d14:	2300      	movs	r3, #0
90019d16:	9301      	str	r3, [sp, #4]
90019d18:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90019d1c:	429c      	cmp	r4, r3
90019d1e:	d002      	beq.n	90019d26 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
90019d20:	455c      	cmp	r4, fp
90019d22:	bf18      	it	ne
90019d24:	4625      	movne	r5, r4
90019d26:	ab01      	add	r3, sp, #4
90019d28:	463a      	mov	r2, r7
90019d2a:	4651      	mov	r1, sl
90019d2c:	a802      	add	r0, sp, #8
90019d2e:	f001 f983 	bl	9001b038 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90019d32:	4604      	mov	r4, r0
90019d34:	b108      	cbz	r0, 90019d3a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
90019d36:	280a      	cmp	r0, #10
90019d38:	d10a      	bne.n	90019d50 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
90019d3a:	45c1      	cmp	r9, r8
90019d3c:	bf38      	it	cc
90019d3e:	46c1      	movcc	r9, r8
90019d40:	f04f 0800 	mov.w	r8, #0
90019d44:	2c00      	cmp	r4, #0
90019d46:	d1e5      	bne.n	90019d14 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
90019d48:	4648      	mov	r0, r9
90019d4a:	b019      	add	sp, #100	; 0x64
90019d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019d50:	9a01      	ldr	r2, [sp, #4]
90019d52:	2a00      	cmp	r2, #0
90019d54:	d0de      	beq.n	90019d14 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
90019d56:	7b56      	ldrb	r6, [r2, #13]
90019d58:	4629      	mov	r1, r5
90019d5a:	683b      	ldr	r3, [r7, #0]
90019d5c:	0076      	lsls	r6, r6, #1
90019d5e:	8894      	ldrh	r4, [r2, #4]
90019d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90019d62:	f406 7080 	and.w	r0, r6, #256	; 0x100
90019d66:	7a96      	ldrb	r6, [r2, #10]
90019d68:	4306      	orrs	r6, r0
90019d6a:	4638      	mov	r0, r7
90019d6c:	4798      	blx	r3
90019d6e:	4430      	add	r0, r6
90019d70:	4480      	add	r8, r0
90019d72:	fa1f f888 	uxth.w	r8, r8
90019d76:	e7e5      	b.n	90019d44 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

90019d78 <_ZNK8touchgfx4Font12getCharWidthEt>:
90019d78:	b508      	push	{r3, lr}
90019d7a:	6803      	ldr	r3, [r0, #0]
90019d7c:	68db      	ldr	r3, [r3, #12]
90019d7e:	4798      	blx	r3
90019d80:	b128      	cbz	r0, 90019d8e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
90019d82:	7b43      	ldrb	r3, [r0, #13]
90019d84:	7a80      	ldrb	r0, [r0, #10]
90019d86:	005b      	lsls	r3, r3, #1
90019d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
90019d8c:	4318      	orrs	r0, r3
90019d8e:	bd08      	pop	{r3, pc}

90019d90 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
90019d90:	b40e      	push	{r1, r2, r3}
90019d92:	b5f0      	push	{r4, r5, r6, r7, lr}
90019d94:	b098      	sub	sp, #96	; 0x60
90019d96:	4605      	mov	r5, r0
90019d98:	ab1d      	add	r3, sp, #116	; 0x74
90019d9a:	a802      	add	r0, sp, #8
90019d9c:	ae18      	add	r6, sp, #96	; 0x60
90019d9e:	f853 4b04 	ldr.w	r4, [r3], #4
90019da2:	9300      	str	r3, [sp, #0]
90019da4:	f000 fe09 	bl	9001a9ba <_ZN8touchgfx12TextProviderC1Ev>
90019da8:	682b      	ldr	r3, [r5, #0]
90019daa:	4628      	mov	r0, r5
90019dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90019dae:	4798      	blx	r3
90019db0:	4621      	mov	r1, r4
90019db2:	2400      	movs	r4, #0
90019db4:	4603      	mov	r3, r0
90019db6:	9a00      	ldr	r2, [sp, #0]
90019db8:	a802      	add	r0, sp, #8
90019dba:	f000 fe43 	bl	9001aa44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
90019dbe:	f846 4d5c 	str.w	r4, [r6, #-92]!
90019dc2:	462a      	mov	r2, r5
90019dc4:	4633      	mov	r3, r6
90019dc6:	4621      	mov	r1, r4
90019dc8:	a802      	add	r0, sp, #8
90019dca:	f001 f935 	bl	9001b038 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90019dce:	b300      	cbz	r0, 90019e12 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
90019dd0:	280a      	cmp	r0, #10
90019dd2:	d01a      	beq.n	90019e0a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
90019dd4:	9f01      	ldr	r7, [sp, #4]
90019dd6:	b1c7      	cbz	r7, 90019e0a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
90019dd8:	7b78      	ldrb	r0, [r7, #13]
90019dda:	7a3b      	ldrb	r3, [r7, #8]
90019ddc:	00c1      	lsls	r1, r0, #3
90019dde:	88aa      	ldrh	r2, [r5, #4]
90019de0:	f401 7180 	and.w	r1, r1, #256	; 0x100
90019de4:	4319      	orrs	r1, r3
90019de6:	0643      	lsls	r3, r0, #25
90019de8:	ea4f 1000 	mov.w	r0, r0, lsl #4
90019dec:	bf48      	it	mi
90019dee:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
90019df2:	f400 7080 	and.w	r0, r0, #256	; 0x100
90019df6:	bf48      	it	mi
90019df8:	b219      	sxthmi	r1, r3
90019dfa:	79fb      	ldrb	r3, [r7, #7]
90019dfc:	4303      	orrs	r3, r0
90019dfe:	4413      	add	r3, r2
90019e00:	1a5b      	subs	r3, r3, r1
90019e02:	b29b      	uxth	r3, r3
90019e04:	42a3      	cmp	r3, r4
90019e06:	bfc8      	it	gt
90019e08:	b21c      	sxthgt	r4, r3
90019e0a:	4633      	mov	r3, r6
90019e0c:	462a      	mov	r2, r5
90019e0e:	2100      	movs	r1, #0
90019e10:	e7da      	b.n	90019dc8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
90019e12:	b2a0      	uxth	r0, r4
90019e14:	b018      	add	sp, #96	; 0x60
90019e16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
90019e1a:	b003      	add	sp, #12
90019e1c:	4770      	bx	lr

90019e1e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
90019e1e:	b40e      	push	{r1, r2, r3}
90019e20:	b530      	push	{r4, r5, lr}
90019e22:	b098      	sub	sp, #96	; 0x60
90019e24:	4604      	mov	r4, r0
90019e26:	ab1b      	add	r3, sp, #108	; 0x6c
90019e28:	a802      	add	r0, sp, #8
90019e2a:	f853 5b04 	ldr.w	r5, [r3], #4
90019e2e:	9301      	str	r3, [sp, #4]
90019e30:	f000 fdc3 	bl	9001a9ba <_ZN8touchgfx12TextProviderC1Ev>
90019e34:	6823      	ldr	r3, [r4, #0]
90019e36:	4620      	mov	r0, r4
90019e38:	2401      	movs	r4, #1
90019e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90019e3c:	4798      	blx	r3
90019e3e:	9a01      	ldr	r2, [sp, #4]
90019e40:	4603      	mov	r3, r0
90019e42:	4629      	mov	r1, r5
90019e44:	a802      	add	r0, sp, #8
90019e46:	f000 fdfd 	bl	9001aa44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
90019e4a:	a802      	add	r0, sp, #8
90019e4c:	f001 f9ec 	bl	9001b228 <_ZN8touchgfx12TextProvider11getNextCharEv>
90019e50:	b2a3      	uxth	r3, r4
90019e52:	b138      	cbz	r0, 90019e64 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
90019e54:	280a      	cmp	r0, #10
90019e56:	a802      	add	r0, sp, #8
90019e58:	bf04      	itt	eq
90019e5a:	3301      	addeq	r3, #1
90019e5c:	b21c      	sxtheq	r4, r3
90019e5e:	f001 f9e3 	bl	9001b228 <_ZN8touchgfx12TextProvider11getNextCharEv>
90019e62:	e7f5      	b.n	90019e50 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
90019e64:	4618      	mov	r0, r3
90019e66:	b018      	add	sp, #96	; 0x60
90019e68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
90019e6c:	b003      	add	sp, #12
90019e6e:	4770      	bx	lr

90019e70 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
90019e70:	b40e      	push	{r1, r2, r3}
90019e72:	b5f0      	push	{r4, r5, r6, r7, lr}
90019e74:	b098      	sub	sp, #96	; 0x60
90019e76:	4604      	mov	r4, r0
90019e78:	26ff      	movs	r6, #255	; 0xff
90019e7a:	ab1d      	add	r3, sp, #116	; 0x74
90019e7c:	a802      	add	r0, sp, #8
90019e7e:	f853 5b04 	ldr.w	r5, [r3], #4
90019e82:	9300      	str	r3, [sp, #0]
90019e84:	f000 fd99 	bl	9001a9ba <_ZN8touchgfx12TextProviderC1Ev>
90019e88:	6823      	ldr	r3, [r4, #0]
90019e8a:	4620      	mov	r0, r4
90019e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90019e8e:	4798      	blx	r3
90019e90:	4629      	mov	r1, r5
90019e92:	4603      	mov	r3, r0
90019e94:	9a00      	ldr	r2, [sp, #0]
90019e96:	a802      	add	r0, sp, #8
90019e98:	ad18      	add	r5, sp, #96	; 0x60
90019e9a:	f000 fdd3 	bl	9001aa44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
90019e9e:	2100      	movs	r1, #0
90019ea0:	4622      	mov	r2, r4
90019ea2:	a802      	add	r0, sp, #8
90019ea4:	f845 1d5c 	str.w	r1, [r5, #-92]!
90019ea8:	462b      	mov	r3, r5
90019eaa:	f001 f8c5 	bl	9001b038 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90019eae:	b1d8      	cbz	r0, 90019ee8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
90019eb0:	280a      	cmp	r0, #10
90019eb2:	d012      	beq.n	90019eda <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
90019eb4:	9801      	ldr	r0, [sp, #4]
90019eb6:	b180      	cbz	r0, 90019eda <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
90019eb8:	7b47      	ldrb	r7, [r0, #13]
90019eba:	7922      	ldrb	r2, [r4, #4]
90019ebc:	00fb      	lsls	r3, r7, #3
90019ebe:	f403 7180 	and.w	r1, r3, #256	; 0x100
90019ec2:	7a03      	ldrb	r3, [r0, #8]
90019ec4:	430b      	orrs	r3, r1
90019ec6:	0679      	lsls	r1, r7, #25
90019ec8:	bf44      	itt	mi
90019eca:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90019ece:	b21b      	sxthmi	r3, r3
90019ed0:	1ad3      	subs	r3, r2, r3
90019ed2:	b2db      	uxtb	r3, r3
90019ed4:	429e      	cmp	r6, r3
90019ed6:	bf28      	it	cs
90019ed8:	461e      	movcs	r6, r3
90019eda:	462b      	mov	r3, r5
90019edc:	4622      	mov	r2, r4
90019ede:	2100      	movs	r1, #0
90019ee0:	a802      	add	r0, sp, #8
90019ee2:	f001 f8a9 	bl	9001b038 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90019ee6:	e7e2      	b.n	90019eae <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
90019ee8:	4630      	mov	r0, r6
90019eea:	b018      	add	sp, #96	; 0x60
90019eec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
90019ef0:	b003      	add	sp, #12
90019ef2:	4770      	bx	lr

90019ef4 <_ZNK8touchgfx8Drawable10invalidateEv>:
90019ef4:	b513      	push	{r0, r1, r4, lr}
90019ef6:	1d01      	adds	r1, r0, #4
90019ef8:	4603      	mov	r3, r0
90019efa:	466a      	mov	r2, sp
90019efc:	c903      	ldmia	r1, {r0, r1}
90019efe:	e882 0003 	stmia.w	r2, {r0, r1}
90019f02:	2100      	movs	r1, #0
90019f04:	4618      	mov	r0, r3
90019f06:	9100      	str	r1, [sp, #0]
90019f08:	6819      	ldr	r1, [r3, #0]
90019f0a:	690c      	ldr	r4, [r1, #16]
90019f0c:	4611      	mov	r1, r2
90019f0e:	47a0      	blx	r4
90019f10:	b002      	add	sp, #8
90019f12:	bd10      	pop	{r4, pc}

90019f14 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
90019f14:	b538      	push	{r3, r4, r5, lr}
90019f16:	680b      	ldr	r3, [r1, #0]
90019f18:	460c      	mov	r4, r1
90019f1a:	4605      	mov	r5, r0
90019f1c:	68db      	ldr	r3, [r3, #12]
90019f1e:	4798      	blx	r3
90019f20:	6823      	ldr	r3, [r4, #0]
90019f22:	4620      	mov	r0, r4
90019f24:	4629      	mov	r1, r5
90019f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90019f28:	4798      	blx	r3
90019f2a:	4628      	mov	r0, r5
90019f2c:	bd38      	pop	{r3, r4, r5, pc}

90019f2e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
90019f2e:	b410      	push	{r4}
90019f30:	880a      	ldrh	r2, [r1, #0]
90019f32:	8884      	ldrh	r4, [r0, #4]
90019f34:	4422      	add	r2, r4
90019f36:	800a      	strh	r2, [r1, #0]
90019f38:	884a      	ldrh	r2, [r1, #2]
90019f3a:	88c4      	ldrh	r4, [r0, #6]
90019f3c:	4422      	add	r2, r4
90019f3e:	804a      	strh	r2, [r1, #2]
90019f40:	6940      	ldr	r0, [r0, #20]
90019f42:	b120      	cbz	r0, 90019f4e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
90019f44:	6803      	ldr	r3, [r0, #0]
90019f46:	f85d 4b04 	ldr.w	r4, [sp], #4
90019f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90019f4c:	4718      	bx	r3
90019f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
90019f52:	4770      	bx	lr

90019f54 <_ZN8touchgfx8Drawable12moveRelativeEss>:
90019f54:	b5f0      	push	{r4, r5, r6, r7, lr}
90019f56:	460b      	mov	r3, r1
90019f58:	b085      	sub	sp, #20
90019f5a:	4604      	mov	r4, r0
90019f5c:	b901      	cbnz	r1, 90019f60 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
90019f5e:	b322      	cbz	r2, 90019faa <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
90019f60:	1d27      	adds	r7, r4, #4
90019f62:	466e      	mov	r6, sp
90019f64:	88e5      	ldrh	r5, [r4, #6]
90019f66:	e897 0003 	ldmia.w	r7, {r0, r1}
90019f6a:	442a      	add	r2, r5
90019f6c:	e886 0003 	stmia.w	r6, {r0, r1}
90019f70:	88a1      	ldrh	r1, [r4, #4]
90019f72:	4620      	mov	r0, r4
90019f74:	b215      	sxth	r5, r2
90019f76:	4419      	add	r1, r3
90019f78:	6823      	ldr	r3, [r4, #0]
90019f7a:	b209      	sxth	r1, r1
90019f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90019f7e:	4798      	blx	r3
90019f80:	6823      	ldr	r3, [r4, #0]
90019f82:	4629      	mov	r1, r5
90019f84:	4620      	mov	r0, r4
90019f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90019f88:	ad02      	add	r5, sp, #8
90019f8a:	4798      	blx	r3
90019f8c:	e897 0003 	ldmia.w	r7, {r0, r1}
90019f90:	e885 0003 	stmia.w	r5, {r0, r1}
90019f94:	6960      	ldr	r0, [r4, #20]
90019f96:	b150      	cbz	r0, 90019fae <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
90019f98:	6803      	ldr	r3, [r0, #0]
90019f9a:	4631      	mov	r1, r6
90019f9c:	691b      	ldr	r3, [r3, #16]
90019f9e:	4798      	blx	r3
90019fa0:	6960      	ldr	r0, [r4, #20]
90019fa2:	6803      	ldr	r3, [r0, #0]
90019fa4:	691b      	ldr	r3, [r3, #16]
90019fa6:	4629      	mov	r1, r5
90019fa8:	4798      	blx	r3
90019faa:	b005      	add	sp, #20
90019fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
90019fae:	f7fe fffb 	bl	90018fa8 <_ZN8touchgfx11Application11getInstanceEv>
90019fb2:	6803      	ldr	r3, [r0, #0]
90019fb4:	4631      	mov	r1, r6
90019fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90019fb8:	4798      	blx	r3
90019fba:	f7fe fff5 	bl	90018fa8 <_ZN8touchgfx11Application11getInstanceEv>
90019fbe:	6803      	ldr	r3, [r0, #0]
90019fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90019fc2:	e7f0      	b.n	90019fa6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

90019fc4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
90019fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
90019fc6:	8882      	ldrh	r2, [r0, #4]
90019fc8:	4605      	mov	r5, r0
90019fca:	880b      	ldrh	r3, [r1, #0]
90019fcc:	460c      	mov	r4, r1
90019fce:	4413      	add	r3, r2
90019fd0:	800b      	strh	r3, [r1, #0]
90019fd2:	884b      	ldrh	r3, [r1, #2]
90019fd4:	88c2      	ldrh	r2, [r0, #6]
90019fd6:	4413      	add	r3, r2
90019fd8:	4602      	mov	r2, r0
90019fda:	804b      	strh	r3, [r1, #2]
90019fdc:	466b      	mov	r3, sp
90019fde:	f852 0f04 	ldr.w	r0, [r2, #4]!
90019fe2:	6851      	ldr	r1, [r2, #4]
90019fe4:	c303      	stmia	r3!, {r0, r1}
90019fe6:	4621      	mov	r1, r4
90019fe8:	4668      	mov	r0, sp
90019fea:	f7fa f9b7 	bl	9001435c <_ZN8touchgfx4RectaNERKS0_>
90019fee:	466b      	mov	r3, sp
90019ff0:	cb03      	ldmia	r3!, {r0, r1}
90019ff2:	6020      	str	r0, [r4, #0]
90019ff4:	6061      	str	r1, [r4, #4]
90019ff6:	6968      	ldr	r0, [r5, #20]
90019ff8:	b128      	cbz	r0, 9001a006 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
90019ffa:	6803      	ldr	r3, [r0, #0]
90019ffc:	691b      	ldr	r3, [r3, #16]
90019ffe:	4621      	mov	r1, r4
9001a000:	4798      	blx	r3
9001a002:	b003      	add	sp, #12
9001a004:	bd30      	pop	{r4, r5, pc}
9001a006:	f7fe ffcf 	bl	90018fa8 <_ZN8touchgfx11Application11getInstanceEv>
9001a00a:	6803      	ldr	r3, [r0, #0]
9001a00c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9001a00e:	e7f6      	b.n	90019ffe <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

9001a010 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
9001a010:	b570      	push	{r4, r5, r6, lr}
9001a012:	8882      	ldrh	r2, [r0, #4]
9001a014:	460c      	mov	r4, r1
9001a016:	880b      	ldrh	r3, [r1, #0]
9001a018:	4605      	mov	r5, r0
9001a01a:	4413      	add	r3, r2
9001a01c:	800b      	strh	r3, [r1, #0]
9001a01e:	884b      	ldrh	r3, [r1, #2]
9001a020:	88c2      	ldrh	r2, [r0, #6]
9001a022:	4413      	add	r3, r2
9001a024:	804b      	strh	r3, [r1, #2]
9001a026:	1d01      	adds	r1, r0, #4
9001a028:	4620      	mov	r0, r4
9001a02a:	f7fa f997 	bl	9001435c <_ZN8touchgfx4RectaNERKS0_>
9001a02e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
9001a032:	2b00      	cmp	r3, #0
9001a034:	dd0b      	ble.n	9001a04e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
9001a036:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
9001a03a:	2b00      	cmp	r3, #0
9001a03c:	dd07      	ble.n	9001a04e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
9001a03e:	6968      	ldr	r0, [r5, #20]
9001a040:	b128      	cbz	r0, 9001a04e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
9001a042:	6803      	ldr	r3, [r0, #0]
9001a044:	4621      	mov	r1, r4
9001a046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001a048:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001a04c:	4718      	bx	r3
9001a04e:	bd70      	pop	{r4, r5, r6, pc}

9001a050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
9001a050:	b510      	push	{r4, lr}
9001a052:	2300      	movs	r3, #0
9001a054:	4604      	mov	r4, r0
9001a056:	4608      	mov	r0, r1
9001a058:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
9001a05c:	8023      	strh	r3, [r4, #0]
9001a05e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
9001a062:	8063      	strh	r3, [r4, #2]
9001a064:	6803      	ldr	r3, [r0, #0]
9001a066:	80a1      	strh	r1, [r4, #4]
9001a068:	4621      	mov	r1, r4
9001a06a:	80e2      	strh	r2, [r4, #6]
9001a06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001a06e:	4798      	blx	r3
9001a070:	4620      	mov	r0, r4
9001a072:	bd10      	pop	{r4, pc}

9001a074 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
9001a074:	b530      	push	{r4, r5, lr}
9001a076:	8083      	strh	r3, [r0, #4]
9001a078:	f89d 300c 	ldrb.w	r3, [sp, #12]
9001a07c:	f89d 5010 	ldrb.w	r5, [sp, #16]
9001a080:	7183      	strb	r3, [r0, #6]
9001a082:	79c3      	ldrb	r3, [r0, #7]
9001a084:	6101      	str	r1, [r0, #16]
9001a086:	f365 0306 	bfi	r3, r5, #0, #7
9001a08a:	f89d 5014 	ldrb.w	r5, [sp, #20]
9001a08e:	8282      	strh	r2, [r0, #20]
9001a090:	f365 13c7 	bfi	r3, r5, #7, #1
9001a094:	71c3      	strb	r3, [r0, #7]
9001a096:	f89d 3018 	ldrb.w	r3, [sp, #24]
9001a09a:	7203      	strb	r3, [r0, #8]
9001a09c:	f89d 301c 	ldrb.w	r3, [sp, #28]
9001a0a0:	7243      	strb	r3, [r0, #9]
9001a0a2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
9001a0a6:	8143      	strh	r3, [r0, #10]
9001a0a8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
9001a0ac:	8183      	strh	r3, [r0, #12]
9001a0ae:	4b01      	ldr	r3, [pc, #4]	; (9001a0b4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
9001a0b0:	6003      	str	r3, [r0, #0]
9001a0b2:	bd30      	pop	{r4, r5, pc}
9001a0b4:	9002fb58 	.word	0x9002fb58

9001a0b8 <_ZNK8touchgfx9ConstFont4findEt>:
9001a0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
9001a0ba:	6904      	ldr	r4, [r0, #16]
9001a0bc:	b3bc      	cbz	r4, 9001a12e <_ZNK8touchgfx9ConstFont4findEt+0x76>
9001a0be:	88a3      	ldrh	r3, [r4, #4]
9001a0c0:	8a82      	ldrh	r2, [r0, #20]
9001a0c2:	1acb      	subs	r3, r1, r3
9001a0c4:	f102 32ff 	add.w	r2, r2, #4294967295
9001a0c8:	d431      	bmi.n	9001a12e <_ZNK8touchgfx9ConstFont4findEt+0x76>
9001a0ca:	4293      	cmp	r3, r2
9001a0cc:	dd0c      	ble.n	9001a0e8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
9001a0ce:	230e      	movs	r3, #14
9001a0d0:	fb03 4302 	mla	r3, r3, r2, r4
9001a0d4:	889b      	ldrh	r3, [r3, #4]
9001a0d6:	1a5b      	subs	r3, r3, r1
9001a0d8:	1ad3      	subs	r3, r2, r3
9001a0da:	429a      	cmp	r2, r3
9001a0dc:	db27      	blt.n	9001a12e <_ZNK8touchgfx9ConstFont4findEt+0x76>
9001a0de:	2b00      	cmp	r3, #0
9001a0e0:	bfbc      	itt	lt
9001a0e2:	2302      	movlt	r3, #2
9001a0e4:	fb92 f3f3 	sdivlt	r3, r2, r3
9001a0e8:	2500      	movs	r5, #0
9001a0ea:	260e      	movs	r6, #14
9001a0ec:	4295      	cmp	r5, r2
9001a0ee:	dc1e      	bgt.n	9001a12e <_ZNK8touchgfx9ConstFont4findEt+0x76>
9001a0f0:	fb06 4003 	mla	r0, r6, r3, r4
9001a0f4:	8887      	ldrh	r7, [r0, #4]
9001a0f6:	42b9      	cmp	r1, r7
9001a0f8:	d01a      	beq.n	9001a130 <_ZNK8touchgfx9ConstFont4findEt+0x78>
9001a0fa:	d20d      	bcs.n	9001a118 <_ZNK8touchgfx9ConstFont4findEt+0x60>
9001a0fc:	1e5a      	subs	r2, r3, #1
9001a0fe:	4295      	cmp	r5, r2
9001a100:	dc15      	bgt.n	9001a12e <_ZNK8touchgfx9ConstFont4findEt+0x76>
9001a102:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
9001a106:	1a5b      	subs	r3, r3, r1
9001a108:	1ad3      	subs	r3, r2, r3
9001a10a:	429a      	cmp	r2, r3
9001a10c:	db0f      	blt.n	9001a12e <_ZNK8touchgfx9ConstFont4findEt+0x76>
9001a10e:	429d      	cmp	r5, r3
9001a110:	ddec      	ble.n	9001a0ec <_ZNK8touchgfx9ConstFont4findEt+0x34>
9001a112:	1953      	adds	r3, r2, r5
9001a114:	105b      	asrs	r3, r3, #1
9001a116:	e7e9      	b.n	9001a0ec <_ZNK8touchgfx9ConstFont4findEt+0x34>
9001a118:	1c5d      	adds	r5, r3, #1
9001a11a:	42aa      	cmp	r2, r5
9001a11c:	db07      	blt.n	9001a12e <_ZNK8touchgfx9ConstFont4findEt+0x76>
9001a11e:	8a43      	ldrh	r3, [r0, #18]
9001a120:	1acb      	subs	r3, r1, r3
9001a122:	442b      	add	r3, r5
9001a124:	429d      	cmp	r5, r3
9001a126:	dc02      	bgt.n	9001a12e <_ZNK8touchgfx9ConstFont4findEt+0x76>
9001a128:	429a      	cmp	r2, r3
9001a12a:	dadf      	bge.n	9001a0ec <_ZNK8touchgfx9ConstFont4findEt+0x34>
9001a12c:	e7f1      	b.n	9001a112 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
9001a12e:	2000      	movs	r0, #0
9001a130:	bdf0      	pop	{r4, r5, r6, r7, pc}

9001a132 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
9001a132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9001a134:	4604      	mov	r4, r0
9001a136:	4617      	mov	r7, r2
9001a138:	461e      	mov	r6, r3
9001a13a:	b911      	cbnz	r1, 9001a142 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
9001a13c:	2500      	movs	r5, #0
9001a13e:	4628      	mov	r0, r5
9001a140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9001a142:	290a      	cmp	r1, #10
9001a144:	d0fa      	beq.n	9001a13c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
9001a146:	f64f 62ff 	movw	r2, #65279	; 0xfeff
9001a14a:	4291      	cmp	r1, r2
9001a14c:	d0f6      	beq.n	9001a13c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
9001a14e:	f242 020b 	movw	r2, #8203	; 0x200b
9001a152:	4291      	cmp	r1, r2
9001a154:	d0f2      	beq.n	9001a13c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
9001a156:	f7ff ffaf 	bl	9001a0b8 <_ZNK8touchgfx9ConstFont4findEt>
9001a15a:	4605      	mov	r5, r0
9001a15c:	b950      	cbnz	r0, 9001a174 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
9001a15e:	6823      	ldr	r3, [r4, #0]
9001a160:	4620      	mov	r0, r4
9001a162:	691b      	ldr	r3, [r3, #16]
9001a164:	4798      	blx	r3
9001a166:	4601      	mov	r1, r0
9001a168:	4620      	mov	r0, r4
9001a16a:	f7ff ffa5 	bl	9001a0b8 <_ZNK8touchgfx9ConstFont4findEt>
9001a16e:	4605      	mov	r5, r0
9001a170:	2800      	cmp	r0, #0
9001a172:	d0e3      	beq.n	9001a13c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
9001a174:	6823      	ldr	r3, [r4, #0]
9001a176:	4629      	mov	r1, r5
9001a178:	4620      	mov	r0, r4
9001a17a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
9001a17c:	4798      	blx	r3
9001a17e:	6038      	str	r0, [r7, #0]
9001a180:	6823      	ldr	r3, [r4, #0]
9001a182:	4620      	mov	r0, r4
9001a184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9001a186:	4798      	blx	r3
9001a188:	7030      	strb	r0, [r6, #0]
9001a18a:	e7d8      	b.n	9001a13e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

9001a18c <_ZN8touchgfx6memsetEPvhm>:
9001a18c:	4402      	add	r2, r0
9001a18e:	4290      	cmp	r0, r2
9001a190:	d002      	beq.n	9001a198 <_ZN8touchgfx6memsetEPvhm+0xc>
9001a192:	f800 1b01 	strb.w	r1, [r0], #1
9001a196:	e7fa      	b.n	9001a18e <_ZN8touchgfx6memsetEPvhm+0x2>
9001a198:	4770      	bx	lr

9001a19a <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
9001a19a:	b538      	push	{r3, r4, r5, lr}
9001a19c:	4605      	mov	r5, r0
9001a19e:	f002 fadb 	bl	9001c758 <_ZNK8touchgfx6Bitmap9getFormatEv>
9001a1a2:	4604      	mov	r4, r0
9001a1a4:	4628      	mov	r0, r5
9001a1a6:	f002 fa13 	bl	9001c5d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
9001a1aa:	2800      	cmp	r0, #0
9001a1ac:	bf14      	ite	ne
9001a1ae:	2002      	movne	r0, #2
9001a1b0:	2000      	moveq	r0, #0
9001a1b2:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
9001a1b6:	b280      	uxth	r0, r0
9001a1b8:	bd38      	pop	{r3, r4, r5, pc}

9001a1ba <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
9001a1ba:	b538      	push	{r3, r4, r5, lr}
9001a1bc:	4605      	mov	r5, r0
9001a1be:	f002 facb 	bl	9001c758 <_ZNK8touchgfx6Bitmap9getFormatEv>
9001a1c2:	4604      	mov	r4, r0
9001a1c4:	4628      	mov	r0, r5
9001a1c6:	f002 fa03 	bl	9001c5d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
9001a1ca:	2800      	cmp	r0, #0
9001a1cc:	bf14      	ite	ne
9001a1ce:	2002      	movne	r0, #2
9001a1d0:	2000      	moveq	r0, #0
9001a1d2:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
9001a1d6:	f040 0001 	orr.w	r0, r0, #1
9001a1da:	b280      	uxth	r0, r0
9001a1dc:	bd38      	pop	{r3, r4, r5, pc}

9001a1de <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
9001a1de:	2000      	movs	r0, #0
9001a1e0:	4770      	bx	lr

9001a1e2 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
9001a1e2:	2001      	movs	r0, #1
9001a1e4:	4770      	bx	lr

9001a1e6 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
9001a1e6:	2002      	movs	r0, #2
9001a1e8:	4770      	bx	lr

9001a1ea <_ZN8touchgfx6ScreenD1Ev>:
9001a1ea:	4770      	bx	lr

9001a1ec <_ZN8touchgfx12GestureEventD1Ev>:
9001a1ec:	4770      	bx	lr

9001a1ee <_ZN8touchgfx9DragEventD1Ev>:
9001a1ee:	4770      	bx	lr

9001a1f0 <_ZN8touchgfx10ClickEventD1Ev>:
9001a1f0:	4770      	bx	lr

9001a1f2 <_ZN8touchgfx10ClickEventD0Ev>:
9001a1f2:	b510      	push	{r4, lr}
9001a1f4:	4604      	mov	r4, r0
9001a1f6:	210c      	movs	r1, #12
9001a1f8:	f00d ff40 	bl	9002807c <_ZdlPvj>
9001a1fc:	4620      	mov	r0, r4
9001a1fe:	bd10      	pop	{r4, pc}

9001a200 <_ZN8touchgfx9DragEventD0Ev>:
9001a200:	b510      	push	{r4, lr}
9001a202:	4604      	mov	r4, r0
9001a204:	2110      	movs	r1, #16
9001a206:	f00d ff39 	bl	9002807c <_ZdlPvj>
9001a20a:	4620      	mov	r0, r4
9001a20c:	bd10      	pop	{r4, pc}

9001a20e <_ZN8touchgfx12GestureEventD0Ev>:
9001a20e:	b510      	push	{r4, lr}
9001a210:	4604      	mov	r4, r0
9001a212:	210c      	movs	r1, #12
9001a214:	f00d ff32 	bl	9002807c <_ZdlPvj>
9001a218:	4620      	mov	r0, r4
9001a21a:	bd10      	pop	{r4, pc}

9001a21c <_ZN8touchgfx6ScreenD0Ev>:
9001a21c:	b510      	push	{r4, lr}
9001a21e:	4604      	mov	r4, r0
9001a220:	213c      	movs	r1, #60	; 0x3c
9001a222:	f00d ff2b 	bl	9002807c <_ZdlPvj>
9001a226:	4620      	mov	r0, r4
9001a228:	bd10      	pop	{r4, pc}
	...

9001a22c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
9001a22c:	b530      	push	{r4, r5, lr}
9001a22e:	460d      	mov	r5, r1
9001a230:	6b01      	ldr	r1, [r0, #48]	; 0x30
9001a232:	b087      	sub	sp, #28
9001a234:	4604      	mov	r4, r0
9001a236:	b301      	cbz	r1, 9001a27a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
9001a238:	a801      	add	r0, sp, #4
9001a23a:	f7ff ff09 	bl	9001a050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001a23e:	892a      	ldrh	r2, [r5, #8]
9001a240:	f8bd 3004 	ldrh.w	r3, [sp, #4]
9001a244:	7928      	ldrb	r0, [r5, #4]
9001a246:	1ad2      	subs	r2, r2, r3
9001a248:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
9001a24a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
9001a24e:	441a      	add	r2, r3
9001a250:	896b      	ldrh	r3, [r5, #10]
9001a252:	f8bd 5006 	ldrh.w	r5, [sp, #6]
9001a256:	f88d 0010 	strb.w	r0, [sp, #16]
9001a25a:	1b5b      	subs	r3, r3, r5
9001a25c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
9001a25e:	6b20      	ldr	r0, [r4, #48]	; 0x30
9001a260:	442b      	add	r3, r5
9001a262:	4d07      	ldr	r5, [pc, #28]	; (9001a280 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
9001a264:	f8ad 1012 	strh.w	r1, [sp, #18]
9001a268:	a903      	add	r1, sp, #12
9001a26a:	9503      	str	r5, [sp, #12]
9001a26c:	f8ad 2014 	strh.w	r2, [sp, #20]
9001a270:	f8ad 3016 	strh.w	r3, [sp, #22]
9001a274:	6803      	ldr	r3, [r0, #0]
9001a276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9001a278:	4798      	blx	r3
9001a27a:	b007      	add	sp, #28
9001a27c:	bd30      	pop	{r4, r5, pc}
9001a27e:	bf00      	nop
9001a280:	9002fbd4 	.word	0x9002fbd4

9001a284 <_ZNK8touchgfx4Rect9intersectEss>:
9001a284:	b510      	push	{r4, lr}
9001a286:	f9b0 3000 	ldrsh.w	r3, [r0]
9001a28a:	428b      	cmp	r3, r1
9001a28c:	dc10      	bgt.n	9001a2b0 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
9001a28e:	8884      	ldrh	r4, [r0, #4]
9001a290:	4423      	add	r3, r4
9001a292:	b21b      	sxth	r3, r3
9001a294:	4299      	cmp	r1, r3
9001a296:	da0b      	bge.n	9001a2b0 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
9001a298:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
9001a29c:	4293      	cmp	r3, r2
9001a29e:	dc07      	bgt.n	9001a2b0 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
9001a2a0:	88c0      	ldrh	r0, [r0, #6]
9001a2a2:	4418      	add	r0, r3
9001a2a4:	b200      	sxth	r0, r0
9001a2a6:	4282      	cmp	r2, r0
9001a2a8:	bfac      	ite	ge
9001a2aa:	2000      	movge	r0, #0
9001a2ac:	2001      	movlt	r0, #1
9001a2ae:	bd10      	pop	{r4, pc}
9001a2b0:	2000      	movs	r0, #0
9001a2b2:	e7fc      	b.n	9001a2ae <_ZNK8touchgfx4Rect9intersectEss+0x2a>

9001a2b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
9001a2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
9001a2b6:	460c      	mov	r4, r1
9001a2b8:	6b01      	ldr	r1, [r0, #48]	; 0x30
9001a2ba:	b089      	sub	sp, #36	; 0x24
9001a2bc:	4605      	mov	r5, r0
9001a2be:	2900      	cmp	r1, #0
9001a2c0:	d054      	beq.n	9001a36c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
9001a2c2:	4668      	mov	r0, sp
9001a2c4:	f7ff fec4 	bl	9001a050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001a2c8:	8eae      	ldrh	r6, [r5, #52]	; 0x34
9001a2ca:	8eef      	ldrh	r7, [r5, #54]	; 0x36
9001a2cc:	4668      	mov	r0, sp
9001a2ce:	8922      	ldrh	r2, [r4, #8]
9001a2d0:	88e1      	ldrh	r1, [r4, #6]
9001a2d2:	443a      	add	r2, r7
9001a2d4:	4431      	add	r1, r6
9001a2d6:	b212      	sxth	r2, r2
9001a2d8:	b209      	sxth	r1, r1
9001a2da:	f7ff ffd3 	bl	9001a284 <_ZNK8touchgfx4Rect9intersectEss>
9001a2de:	b1d0      	cbz	r0, 9001a316 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
9001a2e0:	89a2      	ldrh	r2, [r4, #12]
9001a2e2:	4668      	mov	r0, sp
9001a2e4:	8961      	ldrh	r1, [r4, #10]
9001a2e6:	443a      	add	r2, r7
9001a2e8:	4431      	add	r1, r6
9001a2ea:	b212      	sxth	r2, r2
9001a2ec:	b209      	sxth	r1, r1
9001a2ee:	f7ff ffc9 	bl	9001a284 <_ZNK8touchgfx4Rect9intersectEss>
9001a2f2:	4603      	mov	r3, r0
9001a2f4:	b978      	cbnz	r0, 9001a316 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
9001a2f6:	4a1e      	ldr	r2, [pc, #120]	; (9001a370 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
9001a2f8:	a904      	add	r1, sp, #16
9001a2fa:	6b28      	ldr	r0, [r5, #48]	; 0x30
9001a2fc:	9204      	str	r2, [sp, #16]
9001a2fe:	2202      	movs	r2, #2
9001a300:	f8ad 3016 	strh.w	r3, [sp, #22]
9001a304:	f88d 2014 	strb.w	r2, [sp, #20]
9001a308:	f8ad 3018 	strh.w	r3, [sp, #24]
9001a30c:	f8ad 301a 	strh.w	r3, [sp, #26]
9001a310:	6803      	ldr	r3, [r0, #0]
9001a312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9001a314:	4798      	blx	r3
9001a316:	6b29      	ldr	r1, [r5, #48]	; 0x30
9001a318:	a802      	add	r0, sp, #8
9001a31a:	f7ff fe99 	bl	9001a050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001a31e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
9001a322:	88e0      	ldrh	r0, [r4, #6]
9001a324:	8961      	ldrh	r1, [r4, #10]
9001a326:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
9001a32a:	1a80      	subs	r0, r0, r2
9001a32c:	f8bd e00a 	ldrh.w	lr, [sp, #10]
9001a330:	1a89      	subs	r1, r1, r2
9001a332:	8923      	ldrh	r3, [r4, #8]
9001a334:	4460      	add	r0, ip
9001a336:	89a2      	ldrh	r2, [r4, #12]
9001a338:	4461      	add	r1, ip
9001a33a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
9001a33c:	eba3 030e 	sub.w	r3, r3, lr
9001a340:	eba2 020e 	sub.w	r2, r2, lr
9001a344:	f8ad 0016 	strh.w	r0, [sp, #22]
9001a348:	7927      	ldrb	r7, [r4, #4]
9001a34a:	4433      	add	r3, r6
9001a34c:	4432      	add	r2, r6
9001a34e:	4c09      	ldr	r4, [pc, #36]	; (9001a374 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
9001a350:	6b28      	ldr	r0, [r5, #48]	; 0x30
9001a352:	f8ad 101a 	strh.w	r1, [sp, #26]
9001a356:	a904      	add	r1, sp, #16
9001a358:	9404      	str	r4, [sp, #16]
9001a35a:	f88d 7014 	strb.w	r7, [sp, #20]
9001a35e:	f8ad 3018 	strh.w	r3, [sp, #24]
9001a362:	f8ad 201c 	strh.w	r2, [sp, #28]
9001a366:	6803      	ldr	r3, [r0, #0]
9001a368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
9001a36a:	4798      	blx	r3
9001a36c:	b009      	add	sp, #36	; 0x24
9001a36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001a370:	9002fbac 	.word	0x9002fbac
9001a374:	9002fbc0 	.word	0x9002fbc0

9001a378 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
9001a378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a37c:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
9001a380:	b0a1      	sub	sp, #132	; 0x84
9001a382:	4604      	mov	r4, r0
9001a384:	460d      	mov	r5, r1
9001a386:	790b      	ldrb	r3, [r1, #4]
9001a388:	f1b9 0f00 	cmp.w	r9, #0
9001a38c:	d00f      	beq.n	9001a3ae <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
9001a38e:	2b00      	cmp	r3, #0
9001a390:	f040 80a2 	bne.w	9001a4d8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
9001a394:	b021      	add	sp, #132	; 0x84
9001a396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001a39a:	f104 0330 	add.w	r3, r4, #48	; 0x30
9001a39e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
9001a3a2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
9001a3a6:	1d20      	adds	r0, r4, #4
9001a3a8:	f7f9 ff1e 	bl	900141e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
9001a3ac:	e094      	b.n	9001a4d8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
9001a3ae:	2b00      	cmp	r3, #0
9001a3b0:	d1f0      	bne.n	9001a394 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
9001a3b2:	4b5f      	ldr	r3, [pc, #380]	; (9001a530 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
9001a3b4:	681b      	ldr	r3, [r3, #0]
9001a3b6:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
9001a3ba:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
9001a3be:	f1ba 0f03 	cmp.w	sl, #3
9001a3c2:	ddea      	ble.n	9001a39a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
9001a3c4:	f1ba 0f0c 	cmp.w	sl, #12
9001a3c8:	f04f 0303 	mov.w	r3, #3
9001a3cc:	f04f 0600 	mov.w	r6, #0
9001a3d0:	4958      	ldr	r1, [pc, #352]	; (9001a534 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
9001a3d2:	bfd8      	it	le
9001a3d4:	f10a 32ff 	addle.w	r2, sl, #4294967295
9001a3d8:	960a      	str	r6, [sp, #40]	; 0x28
9001a3da:	bfd8      	it	le
9001a3dc:	fb92 f3f3 	sdivle	r3, r2, r3
9001a3e0:	9301      	str	r3, [sp, #4]
9001a3e2:	4b55      	ldr	r3, [pc, #340]	; (9001a538 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
9001a3e4:	f9b3 2000 	ldrsh.w	r2, [r3]
9001a3e8:	4b54      	ldr	r3, [pc, #336]	; (9001a53c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
9001a3ea:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
9001a3ee:	2248      	movs	r2, #72	; 0x48
9001a3f0:	f9b3 3000 	ldrsh.w	r3, [r3]
9001a3f4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
9001a3f8:	ab0e      	add	r3, sp, #56	; 0x38
9001a3fa:	4618      	mov	r0, r3
9001a3fc:	f00e fca0 	bl	90028d40 <memcpy>
9001a400:	f04f 32ff 	mov.w	r2, #4294967295
9001a404:	f8cd a008 	str.w	sl, [sp, #8]
9001a408:	e9cd 2006 	strd	r2, r0, [sp, #24]
9001a40c:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
9001a410:	46b3      	mov	fp, r6
9001a412:	fb93 f3f2 	sdiv	r3, r3, r2
9001a416:	b29b      	uxth	r3, r3
9001a418:	9303      	str	r3, [sp, #12]
9001a41a:	2300      	movs	r3, #0
9001a41c:	9a03      	ldr	r2, [sp, #12]
9001a41e:	88ef      	ldrh	r7, [r5, #6]
9001a420:	a80a      	add	r0, sp, #40	; 0x28
9001a422:	9309      	str	r3, [sp, #36]	; 0x24
9001a424:	9b07      	ldr	r3, [sp, #28]
9001a426:	f8b5 8008 	ldrh.w	r8, [r5, #8]
9001a42a:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
9001a42e:	fb13 f302 	smulbb	r3, r3, r2
9001a432:	b29b      	uxth	r3, r3
9001a434:	9304      	str	r3, [sp, #16]
9001a436:	9b07      	ldr	r3, [sp, #28]
9001a438:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
9001a43c:	685b      	ldr	r3, [r3, #4]
9001a43e:	fb13 f302 	smulbb	r3, r3, r2
9001a442:	b29b      	uxth	r3, r3
9001a444:	9305      	str	r3, [sp, #20]
9001a446:	9b04      	ldr	r3, [sp, #16]
9001a448:	441f      	add	r7, r3
9001a44a:	9b05      	ldr	r3, [sp, #20]
9001a44c:	4498      	add	r8, r3
9001a44e:	b23f      	sxth	r7, r7
9001a450:	fa0f f888 	sxth.w	r8, r8
9001a454:	4639      	mov	r1, r7
9001a456:	4642      	mov	r2, r8
9001a458:	f7ff ff14 	bl	9001a284 <_ZNK8touchgfx4Rect9intersectEss>
9001a45c:	b380      	cbz	r0, 9001a4c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
9001a45e:	4639      	mov	r1, r7
9001a460:	ab09      	add	r3, sp, #36	; 0x24
9001a462:	4642      	mov	r2, r8
9001a464:	1d20      	adds	r0, r4, #4
9001a466:	f7f9 febf 	bl	900141e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
9001a46a:	9909      	ldr	r1, [sp, #36]	; 0x24
9001a46c:	b341      	cbz	r1, 9001a4c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
9001a46e:	4549      	cmp	r1, r9
9001a470:	d026      	beq.n	9001a4c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
9001a472:	a80c      	add	r0, sp, #48	; 0x30
9001a474:	f7ff fdec 	bl	9001a050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001a478:	2002      	movs	r0, #2
9001a47a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
9001a47e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
9001a482:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
9001a486:	fb92 f2f0 	sdiv	r2, r2, r0
9001a48a:	440a      	add	r2, r1
9001a48c:	1a99      	subs	r1, r3, r2
9001a48e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
9001a492:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
9001a496:	fb93 f3f0 	sdiv	r3, r3, r0
9001a49a:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
9001a49e:	4403      	add	r3, r0
9001a4a0:	1ad3      	subs	r3, r2, r3
9001a4a2:	9a06      	ldr	r2, [sp, #24]
9001a4a4:	435b      	muls	r3, r3
9001a4a6:	fb01 3301 	mla	r3, r1, r1, r3
9001a4aa:	4293      	cmp	r3, r2
9001a4ac:	d208      	bcs.n	9001a4c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
9001a4ae:	9a04      	ldr	r2, [sp, #16]
9001a4b0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
9001a4b4:	86a2      	strh	r2, [r4, #52]	; 0x34
9001a4b6:	9a05      	ldr	r2, [sp, #20]
9001a4b8:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
9001a4bc:	86e2      	strh	r2, [r4, #54]	; 0x36
9001a4be:	9306      	str	r3, [sp, #24]
9001a4c0:	f10b 0b02 	add.w	fp, fp, #2
9001a4c4:	f1bb 0f08 	cmp.w	fp, #8
9001a4c8:	dda7      	ble.n	9001a41a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
9001a4ca:	9b02      	ldr	r3, [sp, #8]
9001a4cc:	3601      	adds	r6, #1
9001a4ce:	4453      	add	r3, sl
9001a4d0:	9302      	str	r3, [sp, #8]
9001a4d2:	9b01      	ldr	r3, [sp, #4]
9001a4d4:	42b3      	cmp	r3, r6
9001a4d6:	d199      	bne.n	9001a40c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
9001a4d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
9001a4da:	2900      	cmp	r1, #0
9001a4dc:	f43f af5a 	beq.w	9001a394 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
9001a4e0:	a80c      	add	r0, sp, #48	; 0x30
9001a4e2:	2600      	movs	r6, #0
9001a4e4:	f7ff fdb4 	bl	9001a050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001a4e8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
9001a4ec:	88ea      	ldrh	r2, [r5, #6]
9001a4ee:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
9001a4f2:	1ad2      	subs	r2, r2, r3
9001a4f4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
9001a4f6:	7929      	ldrb	r1, [r5, #4]
9001a4f8:	441a      	add	r2, r3
9001a4fa:	892b      	ldrh	r3, [r5, #8]
9001a4fc:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
9001a500:	a90e      	add	r1, sp, #56	; 0x38
9001a502:	1a1b      	subs	r3, r3, r0
9001a504:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
9001a506:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
9001a50a:	4403      	add	r3, r0
9001a50c:	480c      	ldr	r0, [pc, #48]	; (9001a540 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
9001a50e:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
9001a512:	900e      	str	r0, [sp, #56]	; 0x38
9001a514:	6b20      	ldr	r0, [r4, #48]	; 0x30
9001a516:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
9001a51a:	6803      	ldr	r3, [r0, #0]
9001a51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9001a51e:	4798      	blx	r3
9001a520:	792b      	ldrb	r3, [r5, #4]
9001a522:	2b00      	cmp	r3, #0
9001a524:	f43f af36 	beq.w	9001a394 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
9001a528:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
9001a52c:	e732      	b.n	9001a394 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
9001a52e:	bf00      	nop
9001a530:	20026cdc 	.word	0x20026cdc
9001a534:	9002a1b8 	.word	0x9002a1b8
9001a538:	20026cd0 	.word	0x20026cd0
9001a53c:	20026cd2 	.word	0x20026cd2
9001a540:	9002fbac 	.word	0x9002fbac

9001a544 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
9001a544:	b537      	push	{r0, r1, r2, r4, r5, lr}
9001a546:	4604      	mov	r4, r0
9001a548:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
9001a54c:	3201      	adds	r2, #1
9001a54e:	d112      	bne.n	9001a576 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
9001a550:	2500      	movs	r5, #0
9001a552:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
9001a556:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
9001a55a:	6803      	ldr	r3, [r0, #0]
9001a55c:	9500      	str	r5, [sp, #0]
9001a55e:	466d      	mov	r5, sp
9001a560:	f8ad 1004 	strh.w	r1, [sp, #4]
9001a564:	f8ad 2006 	strh.w	r2, [sp, #6]
9001a568:	4629      	mov	r1, r5
9001a56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001a56c:	4798      	blx	r3
9001a56e:	e895 0003 	ldmia.w	r5, {r0, r1}
9001a572:	e884 0003 	stmia.w	r4, {r0, r1}
9001a576:	4620      	mov	r0, r4
9001a578:	b003      	add	sp, #12
9001a57a:	bd30      	pop	{r4, r5, pc}

9001a57c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
9001a57c:	b513      	push	{r0, r1, r4, lr}
9001a57e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
9001a582:	4604      	mov	r4, r0
9001a584:	3301      	adds	r3, #1
9001a586:	d109      	bne.n	9001a59c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
9001a588:	4601      	mov	r1, r0
9001a58a:	4668      	mov	r0, sp
9001a58c:	f7ff fd60 	bl	9001a050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001a590:	f8bd 3000 	ldrh.w	r3, [sp]
9001a594:	8423      	strh	r3, [r4, #32]
9001a596:	f8bd 3002 	ldrh.w	r3, [sp, #2]
9001a59a:	8463      	strh	r3, [r4, #34]	; 0x22
9001a59c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
9001a5a0:	b002      	add	sp, #8
9001a5a2:	bd10      	pop	{r4, pc}

9001a5a4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
9001a5a4:	b513      	push	{r0, r1, r4, lr}
9001a5a6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
9001a5aa:	4604      	mov	r4, r0
9001a5ac:	3301      	adds	r3, #1
9001a5ae:	d109      	bne.n	9001a5c4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
9001a5b0:	4601      	mov	r1, r0
9001a5b2:	4668      	mov	r0, sp
9001a5b4:	f7ff fd4c 	bl	9001a050 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001a5b8:	f8bd 3000 	ldrh.w	r3, [sp]
9001a5bc:	8423      	strh	r3, [r4, #32]
9001a5be:	f8bd 3002 	ldrh.w	r3, [sp, #2]
9001a5c2:	8463      	strh	r3, [r4, #34]	; 0x22
9001a5c4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
9001a5c8:	b002      	add	sp, #8
9001a5ca:	bd10      	pop	{r4, pc}

9001a5cc <_ZN8touchgfx6ScreenC1Ev>:
9001a5cc:	b570      	push	{r4, r5, r6, lr}
9001a5ce:	4b16      	ldr	r3, [pc, #88]	; (9001a628 <_ZN8touchgfx6ScreenC1Ev+0x5c>)
9001a5d0:	4605      	mov	r5, r0
9001a5d2:	4a16      	ldr	r2, [pc, #88]	; (9001a62c <_ZN8touchgfx6ScreenC1Ev+0x60>)
9001a5d4:	2101      	movs	r1, #1
9001a5d6:	f845 3b04 	str.w	r3, [r5], #4
9001a5da:	2300      	movs	r3, #0
9001a5dc:	6042      	str	r2, [r0, #4]
9001a5de:	4604      	mov	r4, r0
9001a5e0:	8103      	strh	r3, [r0, #8]
9001a5e2:	8143      	strh	r3, [r0, #10]
9001a5e4:	8183      	strh	r3, [r0, #12]
9001a5e6:	81c3      	strh	r3, [r0, #14]
9001a5e8:	8203      	strh	r3, [r0, #16]
9001a5ea:	8243      	strh	r3, [r0, #18]
9001a5ec:	8283      	strh	r3, [r0, #20]
9001a5ee:	82c3      	strh	r3, [r0, #22]
9001a5f0:	6203      	str	r3, [r0, #32]
9001a5f2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
9001a5f6:	6343      	str	r3, [r0, #52]	; 0x34
9001a5f8:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
9001a5fc:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
9001a600:	e9c0 3306 	strd	r3, r3, [r0, #24]
9001a604:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
9001a608:	4b09      	ldr	r3, [pc, #36]	; (9001a630 <_ZN8touchgfx6ScreenC1Ev+0x64>)
9001a60a:	4628      	mov	r0, r5
9001a60c:	f9b3 6000 	ldrsh.w	r6, [r3]
9001a610:	6b53      	ldr	r3, [r2, #52]	; 0x34
9001a612:	4a08      	ldr	r2, [pc, #32]	; (9001a634 <_ZN8touchgfx6ScreenC1Ev+0x68>)
9001a614:	f9b2 1000 	ldrsh.w	r1, [r2]
9001a618:	4798      	blx	r3
9001a61a:	6863      	ldr	r3, [r4, #4]
9001a61c:	4628      	mov	r0, r5
9001a61e:	4631      	mov	r1, r6
9001a620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a622:	4798      	blx	r3
9001a624:	4620      	mov	r0, r4
9001a626:	bd70      	pop	{r4, r5, r6, pc}
9001a628:	9002fbe8 	.word	0x9002fbe8
9001a62c:	9002e960 	.word	0x9002e960
9001a630:	20026cd2 	.word	0x20026cd2
9001a634:	20026cd0 	.word	0x20026cd0

9001a638 <_ZN8touchgfx6Screen4drawEv>:
9001a638:	4b09      	ldr	r3, [pc, #36]	; (9001a660 <_ZN8touchgfx6Screen4drawEv+0x28>)
9001a63a:	b507      	push	{r0, r1, r2, lr}
9001a63c:	f9b3 2000 	ldrsh.w	r2, [r3]
9001a640:	2100      	movs	r1, #0
9001a642:	4b08      	ldr	r3, [pc, #32]	; (9001a664 <_ZN8touchgfx6Screen4drawEv+0x2c>)
9001a644:	9100      	str	r1, [sp, #0]
9001a646:	4669      	mov	r1, sp
9001a648:	f9b3 3000 	ldrsh.w	r3, [r3]
9001a64c:	f8ad 2004 	strh.w	r2, [sp, #4]
9001a650:	f8ad 3006 	strh.w	r3, [sp, #6]
9001a654:	6803      	ldr	r3, [r0, #0]
9001a656:	689b      	ldr	r3, [r3, #8]
9001a658:	4798      	blx	r3
9001a65a:	b003      	add	sp, #12
9001a65c:	f85d fb04 	ldr.w	pc, [sp], #4
9001a660:	20026cd0 	.word	0x20026cd0
9001a664:	20026cd2 	.word	0x20026cd2

9001a668 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
9001a668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a66c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
9001a670:	b089      	sub	sp, #36	; 0x24
9001a672:	4680      	mov	r8, r0
9001a674:	460c      	mov	r4, r1
9001a676:	2b00      	cmp	r3, #0
9001a678:	4615      	mov	r5, r2
9001a67a:	dd0e      	ble.n	9001a69a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
9001a67c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
9001a680:	2b00      	cmp	r3, #0
9001a682:	dd0a      	ble.n	9001a69a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
9001a684:	4628      	mov	r0, r5
9001a686:	f7ff ff5d 	bl	9001a544 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
9001a68a:	4621      	mov	r1, r4
9001a68c:	f7fe fc02 	bl	90018e94 <_ZNK8touchgfx4Rect9intersectERKS0_>
9001a690:	69eb      	ldr	r3, [r5, #28]
9001a692:	b928      	cbnz	r0, 9001a6a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
9001a694:	461d      	mov	r5, r3
9001a696:	2b00      	cmp	r3, #0
9001a698:	d1f4      	bne.n	9001a684 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
9001a69a:	b009      	add	sp, #36	; 0x24
9001a69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001a6a0:	ae04      	add	r6, sp, #16
9001a6a2:	2b00      	cmp	r3, #0
9001a6a4:	f000 80b5 	beq.w	9001a812 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
9001a6a8:	682b      	ldr	r3, [r5, #0]
9001a6aa:	4629      	mov	r1, r5
9001a6ac:	a802      	add	r0, sp, #8
9001a6ae:	68db      	ldr	r3, [r3, #12]
9001a6b0:	4798      	blx	r3
9001a6b2:	4628      	mov	r0, r5
9001a6b4:	f7ff ff62 	bl	9001a57c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
9001a6b8:	f8bd 7008 	ldrh.w	r7, [sp, #8]
9001a6bc:	4407      	add	r7, r0
9001a6be:	4628      	mov	r0, r5
9001a6c0:	f7ff ff70 	bl	9001a5a4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
9001a6c4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
9001a6c8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
9001a6cc:	b23f      	sxth	r7, r7
9001a6ce:	4418      	add	r0, r3
9001a6d0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
9001a6d4:	4621      	mov	r1, r4
9001a6d6:	f8ad 2014 	strh.w	r2, [sp, #20]
9001a6da:	f8ad 0012 	strh.w	r0, [sp, #18]
9001a6de:	4630      	mov	r0, r6
9001a6e0:	f8ad 3016 	strh.w	r3, [sp, #22]
9001a6e4:	f8ad 7010 	strh.w	r7, [sp, #16]
9001a6e8:	f7f9 fe38 	bl	9001435c <_ZN8touchgfx4RectaNERKS0_>
9001a6ec:	4628      	mov	r0, r5
9001a6ee:	f7ff ff29 	bl	9001a544 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
9001a6f2:	ab06      	add	r3, sp, #24
9001a6f4:	4602      	mov	r2, r0
9001a6f6:	e896 0003 	ldmia.w	r6, {r0, r1}
9001a6fa:	e883 0003 	stmia.w	r3, {r0, r1}
9001a6fe:	4611      	mov	r1, r2
9001a700:	4618      	mov	r0, r3
9001a702:	f7f9 fe2b 	bl	9001435c <_ZN8touchgfx4RectaNERKS0_>
9001a706:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
9001a70a:	f9b4 1000 	ldrsh.w	r1, [r4]
9001a70e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
9001a712:	4299      	cmp	r1, r3
9001a714:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
9001a718:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
9001a71c:	d10b      	bne.n	9001a736 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
9001a71e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001a722:	4552      	cmp	r2, sl
9001a724:	d107      	bne.n	9001a736 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
9001a726:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
9001a72a:	455a      	cmp	r2, fp
9001a72c:	d103      	bne.n	9001a736 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
9001a72e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
9001a732:	454a      	cmp	r2, r9
9001a734:	d06d      	beq.n	9001a812 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
9001a736:	f1bb 0f00 	cmp.w	fp, #0
9001a73a:	dd65      	ble.n	9001a808 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
9001a73c:	f1b9 0f00 	cmp.w	r9, #0
9001a740:	dd62      	ble.n	9001a808 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
9001a742:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001a746:	fa1f f08a 	uxth.w	r0, sl
9001a74a:	4552      	cmp	r2, sl
9001a74c:	9000      	str	r0, [sp, #0]
9001a74e:	da12      	bge.n	9001a776 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
9001a750:	9301      	str	r3, [sp, #4]
9001a752:	9b00      	ldr	r3, [sp, #0]
9001a754:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001a758:	f8ad 2012 	strh.w	r2, [sp, #18]
9001a75c:	1a9a      	subs	r2, r3, r2
9001a75e:	f8ad 1010 	strh.w	r1, [sp, #16]
9001a762:	4631      	mov	r1, r6
9001a764:	f8ad 0014 	strh.w	r0, [sp, #20]
9001a768:	4640      	mov	r0, r8
9001a76a:	f8ad 2016 	strh.w	r2, [sp, #22]
9001a76e:	69ea      	ldr	r2, [r5, #28]
9001a770:	f7ff ff7a 	bl	9001a668 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
9001a774:	9b01      	ldr	r3, [sp, #4]
9001a776:	f9b4 2000 	ldrsh.w	r2, [r4]
9001a77a:	b29f      	uxth	r7, r3
9001a77c:	429a      	cmp	r2, r3
9001a77e:	da0d      	bge.n	9001a79c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
9001a780:	f8ad 2010 	strh.w	r2, [sp, #16]
9001a784:	1aba      	subs	r2, r7, r2
9001a786:	f8ad a012 	strh.w	sl, [sp, #18]
9001a78a:	4631      	mov	r1, r6
9001a78c:	f8ad 2014 	strh.w	r2, [sp, #20]
9001a790:	4640      	mov	r0, r8
9001a792:	f8ad 9016 	strh.w	r9, [sp, #22]
9001a796:	69ea      	ldr	r2, [r5, #28]
9001a798:	f7ff ff66 	bl	9001a668 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
9001a79c:	8822      	ldrh	r2, [r4, #0]
9001a79e:	445f      	add	r7, fp
9001a7a0:	88a3      	ldrh	r3, [r4, #4]
9001a7a2:	b2bf      	uxth	r7, r7
9001a7a4:	4413      	add	r3, r2
9001a7a6:	b23a      	sxth	r2, r7
9001a7a8:	b29b      	uxth	r3, r3
9001a7aa:	b219      	sxth	r1, r3
9001a7ac:	4291      	cmp	r1, r2
9001a7ae:	dd0d      	ble.n	9001a7cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
9001a7b0:	1bdb      	subs	r3, r3, r7
9001a7b2:	f8ad 2010 	strh.w	r2, [sp, #16]
9001a7b6:	f8ad a012 	strh.w	sl, [sp, #18]
9001a7ba:	4631      	mov	r1, r6
9001a7bc:	f8ad 3014 	strh.w	r3, [sp, #20]
9001a7c0:	4640      	mov	r0, r8
9001a7c2:	f8ad 9016 	strh.w	r9, [sp, #22]
9001a7c6:	69ea      	ldr	r2, [r5, #28]
9001a7c8:	f7ff ff4e 	bl	9001a668 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
9001a7cc:	88e2      	ldrh	r2, [r4, #6]
9001a7ce:	8863      	ldrh	r3, [r4, #2]
9001a7d0:	4413      	add	r3, r2
9001a7d2:	9a00      	ldr	r2, [sp, #0]
9001a7d4:	444a      	add	r2, r9
9001a7d6:	b29b      	uxth	r3, r3
9001a7d8:	fa1f f982 	uxth.w	r9, r2
9001a7dc:	b219      	sxth	r1, r3
9001a7de:	fa0f f289 	sxth.w	r2, r9
9001a7e2:	428a      	cmp	r2, r1
9001a7e4:	da15      	bge.n	9001a812 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
9001a7e6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001a7ea:	eba3 0309 	sub.w	r3, r3, r9
9001a7ee:	f9b4 0000 	ldrsh.w	r0, [r4]
9001a7f2:	f8ad 1014 	strh.w	r1, [sp, #20]
9001a7f6:	4631      	mov	r1, r6
9001a7f8:	f8ad 0010 	strh.w	r0, [sp, #16]
9001a7fc:	f8ad 2012 	strh.w	r2, [sp, #18]
9001a800:	f8ad 3016 	strh.w	r3, [sp, #22]
9001a804:	69ea      	ldr	r2, [r5, #28]
9001a806:	e001      	b.n	9001a80c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
9001a808:	69ea      	ldr	r2, [r5, #28]
9001a80a:	4621      	mov	r1, r4
9001a80c:	4640      	mov	r0, r8
9001a80e:	f7ff ff2b 	bl	9001a668 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
9001a812:	4628      	mov	r0, r5
9001a814:	f7ff fe96 	bl	9001a544 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
9001a818:	6861      	ldr	r1, [r4, #4]
9001a81a:	4602      	mov	r2, r0
9001a81c:	4633      	mov	r3, r6
9001a81e:	6820      	ldr	r0, [r4, #0]
9001a820:	c303      	stmia	r3!, {r0, r1}
9001a822:	4611      	mov	r1, r2
9001a824:	4630      	mov	r0, r6
9001a826:	f7f9 fd99 	bl	9001435c <_ZN8touchgfx4RectaNERKS0_>
9001a82a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
9001a82e:	2b00      	cmp	r3, #0
9001a830:	f77f af33 	ble.w	9001a69a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
9001a834:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
9001a838:	2b00      	cmp	r3, #0
9001a83a:	f77f af2e 	ble.w	9001a69a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
9001a83e:	4628      	mov	r0, r5
9001a840:	f7ff fe9c 	bl	9001a57c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
9001a844:	f8bd 3010 	ldrh.w	r3, [sp, #16]
9001a848:	1a18      	subs	r0, r3, r0
9001a84a:	f8ad 0010 	strh.w	r0, [sp, #16]
9001a84e:	4628      	mov	r0, r5
9001a850:	f7ff fea8 	bl	9001a5a4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
9001a854:	f8bd 3012 	ldrh.w	r3, [sp, #18]
9001a858:	4631      	mov	r1, r6
9001a85a:	1a18      	subs	r0, r3, r0
9001a85c:	f8ad 0012 	strh.w	r0, [sp, #18]
9001a860:	4628      	mov	r0, r5
9001a862:	682b      	ldr	r3, [r5, #0]
9001a864:	689b      	ldr	r3, [r3, #8]
9001a866:	4798      	blx	r3
9001a868:	e717      	b.n	9001a69a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

9001a86a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
9001a86a:	b537      	push	{r0, r1, r2, r4, r5, lr}
9001a86c:	2300      	movs	r3, #0
9001a86e:	aa02      	add	r2, sp, #8
9001a870:	4604      	mov	r4, r0
9001a872:	3004      	adds	r0, #4
9001a874:	f842 3d04 	str.w	r3, [r2, #-4]!
9001a878:	460d      	mov	r5, r1
9001a87a:	f7f9 fe47 	bl	9001450c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
9001a87e:	9a01      	ldr	r2, [sp, #4]
9001a880:	b11a      	cbz	r2, 9001a88a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
9001a882:	4629      	mov	r1, r5
9001a884:	4620      	mov	r0, r4
9001a886:	f7ff feef 	bl	9001a668 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
9001a88a:	b003      	add	sp, #12
9001a88c:	bd30      	pop	{r4, r5, pc}

9001a88e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
9001a88e:	b537      	push	{r0, r1, r2, r4, r5, lr}
9001a890:	4602      	mov	r2, r0
9001a892:	4604      	mov	r4, r0
9001a894:	460d      	mov	r5, r1
9001a896:	466b      	mov	r3, sp
9001a898:	f852 0f08 	ldr.w	r0, [r2, #8]!
9001a89c:	6851      	ldr	r1, [r2, #4]
9001a89e:	c303      	stmia	r3!, {r0, r1}
9001a8a0:	4629      	mov	r1, r5
9001a8a2:	4668      	mov	r0, sp
9001a8a4:	f7f9 fd5a 	bl	9001435c <_ZN8touchgfx4RectaNERKS0_>
9001a8a8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
9001a8ac:	4669      	mov	r1, sp
9001a8ae:	b123      	cbz	r3, 9001a8ba <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
9001a8b0:	4620      	mov	r0, r4
9001a8b2:	f7ff ffda 	bl	9001a86a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
9001a8b6:	b003      	add	sp, #12
9001a8b8:	bd30      	pop	{r4, r5, pc}
9001a8ba:	1d20      	adds	r0, r4, #4
9001a8bc:	f7f9 fded 	bl	9001449a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
9001a8c0:	e7f9      	b.n	9001a8b6 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

9001a8c2 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
9001a8c2:	460b      	mov	r3, r1
9001a8c4:	680a      	ldr	r2, [r1, #0]
9001a8c6:	1d01      	adds	r1, r0, #4
9001a8c8:	6992      	ldr	r2, [r2, #24]
9001a8ca:	4618      	mov	r0, r3
9001a8cc:	4710      	bx	r2
	...

9001a8d0 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>:
9001a8d0:	b510      	push	{r4, lr}
9001a8d2:	4298      	cmp	r0, r3
9001a8d4:	eb01 0402 	add.w	r4, r1, r2
9001a8d8:	b224      	sxth	r4, r4
9001a8da:	d232      	bcs.n	9001a942 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x72>
9001a8dc:	b38b      	cbz	r3, 9001a942 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x72>
9001a8de:	ee07 0a90 	vmov	s15, r0
9001a8e2:	eddf 4a19 	vldr	s9, [pc, #100]	; 9001a948 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x78>
9001a8e6:	eddf 5a19 	vldr	s11, [pc, #100]	; 9001a94c <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x7c>
9001a8ea:	eeb8 6a67 	vcvt.f32.u32	s12, s15
9001a8ee:	ee07 3a90 	vmov	s15, r3
9001a8f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
9001a8f6:	ee07 2a90 	vmov	s15, r2
9001a8fa:	ee86 7a26 	vdiv.f32	s14, s12, s13
9001a8fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001a902:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
9001a906:	ee07 1a90 	vmov	s15, r1
9001a90a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9001a90e:	ee37 7a66 	vsub.f32	s14, s14, s13
9001a912:	eee7 5a24 	vfma.f32	s11, s14, s9
9001a916:	ee27 5a07 	vmul.f32	s10, s14, s14
9001a91a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
9001a91e:	eee5 6a25 	vfma.f32	s13, s10, s11
9001a922:	eee6 7a26 	vfma.f32	s15, s12, s13
9001a926:	eef5 7ac0 	vcmpe.f32	s15, #0.0
9001a92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001a92e:	bfcc      	ite	gt
9001a930:	ee77 7a87 	vaddgt.f32	s15, s15, s14
9001a934:	ee77 7ac7 	vsuble.f32	s15, s15, s14
9001a938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
9001a93c:	ee17 3a90 	vmov	r3, s15
9001a940:	b21c      	sxth	r4, r3
9001a942:	4620      	mov	r0, r4
9001a944:	bd10      	pop	{r4, pc}
9001a946:	bf00      	nop
9001a948:	402ce6b0 	.word	0x402ce6b0
9001a94c:	3fd9cd60 	.word	0x3fd9cd60

9001a950 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
9001a950:	b510      	push	{r4, lr}
9001a952:	4298      	cmp	r0, r3
9001a954:	eb01 0402 	add.w	r4, r1, r2
9001a958:	b224      	sxth	r4, r4
9001a95a:	d22c      	bcs.n	9001a9b6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
9001a95c:	b35b      	cbz	r3, 9001a9b6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
9001a95e:	ee07 0a90 	vmov	s15, r0
9001a962:	eeb8 6a67 	vcvt.f32.u32	s12, s15
9001a966:	ee07 3a90 	vmov	s15, r3
9001a96a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
9001a96e:	ee07 2a90 	vmov	s15, r2
9001a972:	ee86 7a26 	vdiv.f32	s14, s12, s13
9001a976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001a97a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
9001a97e:	ee07 1a90 	vmov	s15, r1
9001a982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9001a986:	ee37 7a66 	vsub.f32	s14, s14, s13
9001a98a:	ee67 5a07 	vmul.f32	s11, s14, s14
9001a98e:	eee5 6a87 	vfma.f32	s13, s11, s14
9001a992:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
9001a996:	eee6 7a26 	vfma.f32	s15, s12, s13
9001a99a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
9001a99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001a9a2:	bfcc      	ite	gt
9001a9a4:	ee77 7a87 	vaddgt.f32	s15, s15, s14
9001a9a8:	ee77 7ac7 	vsuble.f32	s15, s15, s14
9001a9ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
9001a9b0:	ee17 3a90 	vmov	r3, s15
9001a9b4:	b21c      	sxth	r4, r3
9001a9b6:	4620      	mov	r0, r4
9001a9b8:	bd10      	pop	{r4, pc}

9001a9ba <_ZN8touchgfx12TextProviderC1Ev>:
9001a9ba:	2300      	movs	r3, #0
9001a9bc:	2201      	movs	r2, #1
9001a9be:	b510      	push	{r4, lr}
9001a9c0:	4604      	mov	r4, r0
9001a9c2:	60c3      	str	r3, [r0, #12]
9001a9c4:	7403      	strb	r3, [r0, #16]
9001a9c6:	82c3      	strh	r3, [r0, #22]
9001a9c8:	8303      	strh	r3, [r0, #24]
9001a9ca:	85c3      	strh	r3, [r0, #46]	; 0x2e
9001a9cc:	8603      	strh	r3, [r0, #48]	; 0x30
9001a9ce:	86c3      	strh	r3, [r0, #54]	; 0x36
9001a9d0:	8703      	strh	r3, [r0, #56]	; 0x38
9001a9d2:	63c3      	str	r3, [r0, #60]	; 0x3c
9001a9d4:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
9001a9d8:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
9001a9dc:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
9001a9e0:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
9001a9e4:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
9001a9e8:	e9c0 3300 	strd	r3, r3, [r0]
9001a9ec:	f7e8 fdbc 	bl	90003568 <_ZN8touchgfx12TextProvider18initializeInternalEv>
9001a9f0:	4620      	mov	r0, r4
9001a9f2:	bd10      	pop	{r4, pc}

9001a9f4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
9001a9f4:	b530      	push	{r4, r5, lr}
9001a9f6:	2500      	movs	r5, #0
9001a9f8:	2401      	movs	r4, #1
9001a9fa:	6843      	ldr	r3, [r0, #4]
9001a9fc:	b913      	cbnz	r3, 9001aa04 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
9001a9fe:	6803      	ldr	r3, [r0, #0]
9001aa00:	b1f3      	cbz	r3, 9001aa40 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
9001aa02:	6043      	str	r3, [r0, #4]
9001aa04:	7c03      	ldrb	r3, [r0, #16]
9001aa06:	b143      	cbz	r3, 9001aa1a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
9001aa08:	68c3      	ldr	r3, [r0, #12]
9001aa0a:	b12b      	cbz	r3, 9001aa18 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
9001aa0c:	881a      	ldrh	r2, [r3, #0]
9001aa0e:	b11a      	cbz	r2, 9001aa18 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
9001aa10:	1c9a      	adds	r2, r3, #2
9001aa12:	60c2      	str	r2, [r0, #12]
9001aa14:	8818      	ldrh	r0, [r3, #0]
9001aa16:	bd30      	pop	{r4, r5, pc}
9001aa18:	7405      	strb	r5, [r0, #16]
9001aa1a:	6843      	ldr	r3, [r0, #4]
9001aa1c:	8819      	ldrh	r1, [r3, #0]
9001aa1e:	b179      	cbz	r1, 9001aa40 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
9001aa20:	1c9a      	adds	r2, r3, #2
9001aa22:	2902      	cmp	r1, #2
9001aa24:	6042      	str	r2, [r0, #4]
9001aa26:	d1f5      	bne.n	9001aa14 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
9001aa28:	6883      	ldr	r3, [r0, #8]
9001aa2a:	1d1a      	adds	r2, r3, #4
9001aa2c:	6082      	str	r2, [r0, #8]
9001aa2e:	681b      	ldr	r3, [r3, #0]
9001aa30:	60c3      	str	r3, [r0, #12]
9001aa32:	2b00      	cmp	r3, #0
9001aa34:	d0e1      	beq.n	9001a9fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
9001aa36:	881b      	ldrh	r3, [r3, #0]
9001aa38:	2b00      	cmp	r3, #0
9001aa3a:	d0de      	beq.n	9001a9fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
9001aa3c:	7404      	strb	r4, [r0, #16]
9001aa3e:	e7dc      	b.n	9001a9fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
9001aa40:	2000      	movs	r0, #0
9001aa42:	e7e8      	b.n	9001aa16 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

9001aa44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
9001aa44:	63c3      	str	r3, [r0, #60]	; 0x3c
9001aa46:	2300      	movs	r3, #0
9001aa48:	6082      	str	r2, [r0, #8]
9001aa4a:	6001      	str	r1, [r0, #0]
9001aa4c:	6043      	str	r3, [r0, #4]
9001aa4e:	60c3      	str	r3, [r0, #12]
9001aa50:	7403      	strb	r3, [r0, #16]
9001aa52:	8603      	strh	r3, [r0, #48]	; 0x30
9001aa54:	8303      	strh	r3, [r0, #24]
9001aa56:	8703      	strh	r3, [r0, #56]	; 0x38
9001aa58:	b410      	push	{r4}
9001aa5a:	f85d 4b04 	ldr.w	r4, [sp], #4
9001aa5e:	f7e8 bd83 	b.w	90003568 <_ZN8touchgfx12TextProvider18initializeInternalEv>

9001aa62 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
9001aa62:	b5f0      	push	{r4, r5, r6, r7, lr}
9001aa64:	4605      	mov	r5, r0
9001aa66:	4608      	mov	r0, r1
9001aa68:	b1f1      	cbz	r1, 9001aaa8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
9001aa6a:	f105 0440 	add.w	r4, r5, #64	; 0x40
9001aa6e:	460b      	mov	r3, r1
9001aa70:	f101 0708 	add.w	r7, r1, #8
9001aa74:	4622      	mov	r2, r4
9001aa76:	6818      	ldr	r0, [r3, #0]
9001aa78:	3308      	adds	r3, #8
9001aa7a:	f853 1c04 	ldr.w	r1, [r3, #-4]
9001aa7e:	4626      	mov	r6, r4
9001aa80:	42bb      	cmp	r3, r7
9001aa82:	c603      	stmia	r6!, {r0, r1}
9001aa84:	4634      	mov	r4, r6
9001aa86:	d1f6      	bne.n	9001aa76 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
9001aa88:	6818      	ldr	r0, [r3, #0]
9001aa8a:	6030      	str	r0, [r6, #0]
9001aa8c:	4610      	mov	r0, r2
9001aa8e:	889b      	ldrh	r3, [r3, #4]
9001aa90:	80b3      	strh	r3, [r6, #4]
9001aa92:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
9001aa96:	015b      	lsls	r3, r3, #5
9001aa98:	f403 7180 	and.w	r1, r3, #256	; 0x100
9001aa9c:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
9001aaa0:	430b      	orrs	r3, r1
9001aaa2:	425b      	negs	r3, r3
9001aaa4:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
9001aaa8:	bdf0      	pop	{r4, r5, r6, r7, pc}

9001aaaa <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
9001aaaa:	b538      	push	{r3, r4, r5, lr}
9001aaac:	460c      	mov	r4, r1
9001aaae:	6811      	ldr	r1, [r2, #0]
9001aab0:	4610      	mov	r0, r2
9001aab2:	68cd      	ldr	r5, [r1, #12]
9001aab4:	4619      	mov	r1, r3
9001aab6:	47a8      	blx	r5
9001aab8:	2800      	cmp	r0, #0
9001aaba:	bf08      	it	eq
9001aabc:	4620      	moveq	r0, r4
9001aabe:	bd38      	pop	{r3, r4, r5, pc}

9001aac0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
9001aac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9001aac2:	4604      	mov	r4, r0
9001aac4:	4615      	mov	r5, r2
9001aac6:	4608      	mov	r0, r1
9001aac8:	b93a      	cbnz	r2, 9001aada <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
9001aaca:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
9001aace:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
9001aad2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
9001aad6:	4628      	mov	r0, r5
9001aad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9001aada:	f892 c00d 	ldrb.w	ip, [r2, #13]
9001aade:	8893      	ldrh	r3, [r2, #4]
9001aae0:	ea4f 160c 	mov.w	r6, ip, lsl #4
9001aae4:	f406 7280 	and.w	r2, r6, #256	; 0x100
9001aae8:	79ee      	ldrb	r6, [r5, #7]
9001aaea:	4316      	orrs	r6, r2
9001aaec:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
9001aaf0:	189a      	adds	r2, r3, r2
9001aaf2:	b2b7      	uxth	r7, r6
9001aaf4:	b291      	uxth	r1, r2
9001aaf6:	291d      	cmp	r1, #29
9001aaf8:	f200 8084 	bhi.w	9001ac04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
9001aafc:	2201      	movs	r2, #1
9001aafe:	10f6      	asrs	r6, r6, #3
9001ab00:	408a      	lsls	r2, r1
9001ab02:	4978      	ldr	r1, [pc, #480]	; (9001ace4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
9001ab04:	420a      	tst	r2, r1
9001ab06:	d12e      	bne.n	9001ab66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
9001ab08:	f412 7f60 	tst.w	r2, #896	; 0x380
9001ab0c:	d07a      	beq.n	9001ac04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
9001ab0e:	f104 0240 	add.w	r2, r4, #64	; 0x40
9001ab12:	462b      	mov	r3, r5
9001ab14:	f105 0e08 	add.w	lr, r5, #8
9001ab18:	4615      	mov	r5, r2
9001ab1a:	6818      	ldr	r0, [r3, #0]
9001ab1c:	3308      	adds	r3, #8
9001ab1e:	f853 1c04 	ldr.w	r1, [r3, #-4]
9001ab22:	4694      	mov	ip, r2
9001ab24:	4573      	cmp	r3, lr
9001ab26:	e8ac 0003 	stmia.w	ip!, {r0, r1}
9001ab2a:	4662      	mov	r2, ip
9001ab2c:	d1f5      	bne.n	9001ab1a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
9001ab2e:	6818      	ldr	r0, [r3, #0]
9001ab30:	f8cc 0000 	str.w	r0, [ip]
9001ab34:	889b      	ldrh	r3, [r3, #4]
9001ab36:	f8ac 3004 	strh.w	r3, [ip, #4]
9001ab3a:	b2b3      	uxth	r3, r6
9001ab3c:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
9001ab40:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
9001ab44:	1aca      	subs	r2, r1, r3
9001ab46:	1bcf      	subs	r7, r1, r7
9001ab48:	f020 0060 	bic.w	r0, r0, #96	; 0x60
9001ab4c:	b292      	uxth	r2, r2
9001ab4e:	1afb      	subs	r3, r7, r3
9001ab50:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
9001ab54:	10d2      	asrs	r2, r2, #3
9001ab56:	f002 0260 	and.w	r2, r2, #96	; 0x60
9001ab5a:	4302      	orrs	r2, r0
9001ab5c:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
9001ab60:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
9001ab64:	e7b7      	b.n	9001aad6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
9001ab66:	8e23      	ldrh	r3, [r4, #48]	; 0x30
9001ab68:	b92b      	cbnz	r3, 9001ab76 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
9001ab6a:	4b5f      	ldr	r3, [pc, #380]	; (9001ace8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
9001ab6c:	21c0      	movs	r1, #192	; 0xc0
9001ab6e:	4a5f      	ldr	r2, [pc, #380]	; (9001acec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
9001ab70:	485f      	ldr	r0, [pc, #380]	; (9001acf0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
9001ab72:	f00e f85f 	bl	90028c34 <__assert_func>
9001ab76:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
9001ab78:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001ab7c:	8b59      	ldrh	r1, [r3, #26]
9001ab7e:	f640 6333 	movw	r3, #3635	; 0xe33
9001ab82:	4299      	cmp	r1, r3
9001ab84:	d110      	bne.n	9001aba8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
9001ab86:	6803      	ldr	r3, [r0, #0]
9001ab88:	68db      	ldr	r3, [r3, #12]
9001ab8a:	4798      	blx	r3
9001ab8c:	7b41      	ldrb	r1, [r0, #13]
9001ab8e:	00cb      	lsls	r3, r1, #3
9001ab90:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001ab94:	7a03      	ldrb	r3, [r0, #8]
9001ab96:	0648      	lsls	r0, r1, #25
9001ab98:	ea43 0302 	orr.w	r3, r3, r2
9001ab9c:	bf44      	itt	mi
9001ab9e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001aba2:	b21b      	sxthmi	r3, r3
9001aba4:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
9001aba8:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
9001abac:	462a      	mov	r2, r5
9001abae:	f105 0c08 	add.w	ip, r5, #8
9001abb2:	443b      	add	r3, r7
9001abb4:	4433      	add	r3, r6
9001abb6:	f104 0640 	add.w	r6, r4, #64	; 0x40
9001abba:	b29b      	uxth	r3, r3
9001abbc:	4635      	mov	r5, r6
9001abbe:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
9001abc2:	6810      	ldr	r0, [r2, #0]
9001abc4:	3208      	adds	r2, #8
9001abc6:	f852 1c04 	ldr.w	r1, [r2, #-4]
9001abca:	4637      	mov	r7, r6
9001abcc:	4562      	cmp	r2, ip
9001abce:	c703      	stmia	r7!, {r0, r1}
9001abd0:	463e      	mov	r6, r7
9001abd2:	d1f6      	bne.n	9001abc2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
9001abd4:	6810      	ldr	r0, [r2, #0]
9001abd6:	6038      	str	r0, [r7, #0]
9001abd8:	8892      	ldrh	r2, [r2, #4]
9001abda:	80ba      	strh	r2, [r7, #4]
9001abdc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
9001abe0:	10db      	asrs	r3, r3, #3
9001abe2:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
9001abe6:	f003 0360 	and.w	r3, r3, #96	; 0x60
9001abea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
9001abee:	4313      	orrs	r3, r2
9001abf0:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
9001abf4:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
9001abf8:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
9001abfc:	1a9b      	subs	r3, r3, r2
9001abfe:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
9001ac02:	e768      	b.n	9001aad6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
9001ac04:	f023 0204 	bic.w	r2, r3, #4
9001ac08:	f640 611b 	movw	r1, #3611	; 0xe1b
9001ac0c:	428a      	cmp	r2, r1
9001ac0e:	d003      	beq.n	9001ac18 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
9001ac10:	f640 621d 	movw	r2, #3613	; 0xe1d
9001ac14:	4293      	cmp	r3, r2
9001ac16:	d120      	bne.n	9001ac5a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
9001ac18:	3b01      	subs	r3, #1
9001ac1a:	4602      	mov	r2, r0
9001ac1c:	4629      	mov	r1, r5
9001ac1e:	4620      	mov	r0, r4
9001ac20:	b29b      	uxth	r3, r3
9001ac22:	f7ff ff42 	bl	9001aaaa <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
9001ac26:	7b41      	ldrb	r1, [r0, #13]
9001ac28:	00cb      	lsls	r3, r1, #3
9001ac2a:	0649      	lsls	r1, r1, #25
9001ac2c:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001ac30:	7a03      	ldrb	r3, [r0, #8]
9001ac32:	ea43 0302 	orr.w	r3, r3, r2
9001ac36:	bf44      	itt	mi
9001ac38:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001ac3c:	b21b      	sxthmi	r3, r3
9001ac3e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
9001ac42:	7b6b      	ldrb	r3, [r5, #13]
9001ac44:	7aaa      	ldrb	r2, [r5, #10]
9001ac46:	005b      	lsls	r3, r3, #1
9001ac48:	f403 7380 	and.w	r3, r3, #256	; 0x100
9001ac4c:	4313      	orrs	r3, r2
9001ac4e:	115a      	asrs	r2, r3, #5
9001ac50:	eb02 0393 	add.w	r3, r2, r3, lsr #2
9001ac54:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
9001ac58:	e035      	b.n	9001acc6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
9001ac5a:	ea4f 02cc 	mov.w	r2, ip, lsl #3
9001ac5e:	f01c 0f40 	tst.w	ip, #64	; 0x40
9001ac62:	f402 7180 	and.w	r1, r2, #256	; 0x100
9001ac66:	7a2a      	ldrb	r2, [r5, #8]
9001ac68:	ea42 0201 	orr.w	r2, r2, r1
9001ac6c:	f640 6109 	movw	r1, #3593	; 0xe09
9001ac70:	bf1c      	itt	ne
9001ac72:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
9001ac76:	b212      	sxthne	r2, r2
9001ac78:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
9001ac7c:	f023 0210 	bic.w	r2, r3, #16
9001ac80:	428a      	cmp	r2, r1
9001ac82:	d003      	beq.n	9001ac8c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
9001ac84:	f640 6213 	movw	r2, #3603	; 0xe13
9001ac88:	4293      	cmp	r3, r2
9001ac8a:	d129      	bne.n	9001ace0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
9001ac8c:	7b6e      	ldrb	r6, [r5, #13]
9001ac8e:	4629      	mov	r1, r5
9001ac90:	0076      	lsls	r6, r6, #1
9001ac92:	f406 7280 	and.w	r2, r6, #256	; 0x100
9001ac96:	7aae      	ldrb	r6, [r5, #10]
9001ac98:	4316      	orrs	r6, r2
9001ac9a:	f640 6213 	movw	r2, #3603	; 0xe13
9001ac9e:	4293      	cmp	r3, r2
9001aca0:	4602      	mov	r2, r0
9001aca2:	4620      	mov	r0, r4
9001aca4:	bf16      	itet	ne
9001aca6:	f103 33ff 	addne.w	r3, r3, #4294967295
9001acaa:	f640 630c 	movweq	r3, #3596	; 0xe0c
9001acae:	b29b      	uxthne	r3, r3
9001acb0:	f7ff fefb 	bl	9001aaaa <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
9001acb4:	7b43      	ldrb	r3, [r0, #13]
9001acb6:	7a82      	ldrb	r2, [r0, #10]
9001acb8:	005b      	lsls	r3, r3, #1
9001acba:	f403 7380 	and.w	r3, r3, #256	; 0x100
9001acbe:	4313      	orrs	r3, r2
9001acc0:	1af6      	subs	r6, r6, r3
9001acc2:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
9001acc6:	7b69      	ldrb	r1, [r5, #13]
9001acc8:	00cb      	lsls	r3, r1, #3
9001acca:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001acce:	7a2b      	ldrb	r3, [r5, #8]
9001acd0:	4313      	orrs	r3, r2
9001acd2:	064a      	lsls	r2, r1, #25
9001acd4:	bf44      	itt	mi
9001acd6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001acda:	b21b      	sxthmi	r3, r3
9001acdc:	1bdb      	subs	r3, r3, r7
9001acde:	e73f      	b.n	9001ab60 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
9001ace0:	2300      	movs	r3, #0
9001ace2:	e7b7      	b.n	9001ac54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
9001ace4:	3fc00079 	.word	0x3fc00079
9001ace8:	9002af98 	.word	0x9002af98
9001acec:	9002fe43 	.word	0x9002fe43
9001acf0:	9002b06a 	.word	0x9002b06a

9001acf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
9001acf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001acf8:	4604      	mov	r4, r0
9001acfa:	b942      	cbnz	r2, 9001ad0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
9001acfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
9001ad00:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
9001ad04:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
9001ad08:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
9001ad0c:	e046      	b.n	9001ad9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
9001ad0e:	7b51      	ldrb	r1, [r2, #13]
9001ad10:	8893      	ldrh	r3, [r2, #4]
9001ad12:	010f      	lsls	r7, r1, #4
9001ad14:	f407 7080 	and.w	r0, r7, #256	; 0x100
9001ad18:	79d7      	ldrb	r7, [r2, #7]
9001ad1a:	4307      	orrs	r7, r0
9001ad1c:	2f04      	cmp	r7, #4
9001ad1e:	b2bd      	uxth	r5, r7
9001ad20:	bfcc      	ite	gt
9001ad22:	08bf      	lsrgt	r7, r7, #2
9001ad24:	2701      	movle	r7, #1
9001ad26:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
9001ad2a:	f200 80ab 	bhi.w	9001ae84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
9001ad2e:	f240 60e7 	movw	r0, #1767	; 0x6e7
9001ad32:	4283      	cmp	r3, r0
9001ad34:	d216      	bcs.n	9001ad64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
9001ad36:	f240 605b 	movw	r0, #1627	; 0x65b
9001ad3a:	4283      	cmp	r3, r0
9001ad3c:	d859      	bhi.n	9001adf2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
9001ad3e:	f240 6057 	movw	r0, #1623	; 0x657
9001ad42:	4283      	cmp	r3, r0
9001ad44:	d20e      	bcs.n	9001ad64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
9001ad46:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
9001ad4a:	d24a      	bcs.n	9001ade2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
9001ad4c:	f240 604e 	movw	r0, #1614	; 0x64e
9001ad50:	4283      	cmp	r3, r0
9001ad52:	d207      	bcs.n	9001ad64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
9001ad54:	f240 601a 	movw	r0, #1562	; 0x61a
9001ad58:	4283      	cmp	r3, r0
9001ad5a:	d02a      	beq.n	9001adb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
9001ad5c:	d821      	bhi.n	9001ada2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
9001ad5e:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
9001ad62:	d35b      	bcc.n	9001ae1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
9001ad64:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
9001ad68:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
9001ad6c:	f040 80d0 	bne.w	9001af10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
9001ad70:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
9001ad74:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
9001ad78:	f040 80ca 	bne.w	9001af10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
9001ad7c:	00cb      	lsls	r3, r1, #3
9001ad7e:	0649      	lsls	r1, r1, #25
9001ad80:	f403 7080 	and.w	r0, r3, #256	; 0x100
9001ad84:	7a13      	ldrb	r3, [r2, #8]
9001ad86:	ea43 0300 	orr.w	r3, r3, r0
9001ad8a:	bf44      	itt	mi
9001ad8c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001ad90:	b21b      	sxthmi	r3, r3
9001ad92:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
9001ad96:	1b5d      	subs	r5, r3, r5
9001ad98:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
9001ad9c:	4610      	mov	r0, r2
9001ad9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001ada2:	f240 604b 	movw	r0, #1611	; 0x64b
9001ada6:	4283      	cmp	r3, r0
9001ada8:	d338      	bcc.n	9001ae1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
9001adaa:	f240 604c 	movw	r0, #1612	; 0x64c
9001adae:	4283      	cmp	r3, r0
9001adb0:	d9d8      	bls.n	9001ad64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
9001adb2:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
9001adb6:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
9001adba:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
9001adbe:	f040 80f2 	bne.w	9001afa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
9001adc2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
9001adc6:	f040 80ee 	bne.w	9001afa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
9001adca:	00cb      	lsls	r3, r1, #3
9001adcc:	064e      	lsls	r6, r1, #25
9001adce:	f403 7080 	and.w	r0, r3, #256	; 0x100
9001add2:	7a13      	ldrb	r3, [r2, #8]
9001add4:	ea43 0300 	orr.w	r3, r3, r0
9001add8:	bf44      	itt	mi
9001adda:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001adde:	b21b      	sxthmi	r3, r3
9001ade0:	e7d9      	b.n	9001ad96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
9001ade2:	f240 6054 	movw	r0, #1620	; 0x654
9001ade6:	4283      	cmp	r3, r0
9001ade8:	d8e3      	bhi.n	9001adb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
9001adea:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
9001adee:	d9e0      	bls.n	9001adb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
9001adf0:	e7b8      	b.n	9001ad64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
9001adf2:	f240 6074 	movw	r0, #1652	; 0x674
9001adf6:	4283      	cmp	r3, r0
9001adf8:	d0b4      	beq.n	9001ad64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
9001adfa:	d82d      	bhi.n	9001ae58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
9001adfc:	f240 605e 	movw	r0, #1630	; 0x65e
9001ae00:	4283      	cmp	r3, r0
9001ae02:	d804      	bhi.n	9001ae0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
9001ae04:	f240 605d 	movw	r0, #1629	; 0x65d
9001ae08:	4283      	cmp	r3, r0
9001ae0a:	d3d2      	bcc.n	9001adb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
9001ae0c:	e7aa      	b.n	9001ad64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
9001ae0e:	f240 605f 	movw	r0, #1631	; 0x65f
9001ae12:	4283      	cmp	r3, r0
9001ae14:	d0cd      	beq.n	9001adb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
9001ae16:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
9001ae1a:	d0a3      	beq.n	9001ad64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
9001ae1c:	00cb      	lsls	r3, r1, #3
9001ae1e:	0649      	lsls	r1, r1, #25
9001ae20:	f403 7080 	and.w	r0, r3, #256	; 0x100
9001ae24:	7a13      	ldrb	r3, [r2, #8]
9001ae26:	ea43 0300 	orr.w	r3, r3, r0
9001ae2a:	bf44      	itt	mi
9001ae2c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001ae30:	b21b      	sxthmi	r3, r3
9001ae32:	1b5d      	subs	r5, r3, r5
9001ae34:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
9001ae38:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
9001ae3c:	7b53      	ldrb	r3, [r2, #13]
9001ae3e:	015b      	lsls	r3, r3, #5
9001ae40:	f403 7180 	and.w	r1, r3, #256	; 0x100
9001ae44:	7993      	ldrb	r3, [r2, #6]
9001ae46:	430b      	orrs	r3, r1
9001ae48:	2105      	movs	r1, #5
9001ae4a:	005b      	lsls	r3, r3, #1
9001ae4c:	fb93 f3f1 	sdiv	r3, r3, r1
9001ae50:	f992 1009 	ldrsb.w	r1, [r2, #9]
9001ae54:	440b      	add	r3, r1
9001ae56:	e757      	b.n	9001ad08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
9001ae58:	f240 60e2 	movw	r0, #1762	; 0x6e2
9001ae5c:	4283      	cmp	r3, r0
9001ae5e:	d809      	bhi.n	9001ae74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
9001ae60:	f240 60df 	movw	r0, #1759	; 0x6df
9001ae64:	4283      	cmp	r3, r0
9001ae66:	f4bf af7d 	bcs.w	9001ad64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
9001ae6a:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
9001ae6e:	2b05      	cmp	r3, #5
9001ae70:	d8d4      	bhi.n	9001ae1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
9001ae72:	e777      	b.n	9001ad64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
9001ae74:	f240 60e3 	movw	r0, #1763	; 0x6e3
9001ae78:	4283      	cmp	r3, r0
9001ae7a:	d09a      	beq.n	9001adb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
9001ae7c:	f240 60e4 	movw	r0, #1764	; 0x6e4
9001ae80:	4283      	cmp	r3, r0
9001ae82:	e7ca      	b.n	9001ae1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
9001ae84:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
9001ae88:	d22b      	bcs.n	9001aee2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
9001ae8a:	f640 00ed 	movw	r0, #2285	; 0x8ed
9001ae8e:	4283      	cmp	r3, r0
9001ae90:	d28f      	bcs.n	9001adb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
9001ae92:	f640 00e5 	movw	r0, #2277	; 0x8e5
9001ae96:	4283      	cmp	r3, r0
9001ae98:	d816      	bhi.n	9001aec8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
9001ae9a:	f640 00e4 	movw	r0, #2276	; 0x8e4
9001ae9e:	4283      	cmp	r3, r0
9001aea0:	f4bf af60 	bcs.w	9001ad64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
9001aea4:	f240 60ec 	movw	r0, #1772	; 0x6ec
9001aea8:	4283      	cmp	r3, r0
9001aeaa:	d80a      	bhi.n	9001aec2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
9001aeac:	f240 60eb 	movw	r0, #1771	; 0x6eb
9001aeb0:	4283      	cmp	r3, r0
9001aeb2:	f4bf af57 	bcs.w	9001ad64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
9001aeb6:	f240 60ea 	movw	r0, #1770	; 0x6ea
9001aeba:	4283      	cmp	r3, r0
9001aebc:	f43f af79 	beq.w	9001adb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
9001aec0:	e7ac      	b.n	9001ae1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
9001aec2:	f240 60ed 	movw	r0, #1773	; 0x6ed
9001aec6:	e7f8      	b.n	9001aeba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
9001aec8:	f640 00e8 	movw	r0, #2280	; 0x8e8
9001aecc:	4283      	cmp	r3, r0
9001aece:	d802      	bhi.n	9001aed6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
9001aed0:	f640 00e7 	movw	r0, #2279	; 0x8e7
9001aed4:	e798      	b.n	9001ae08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
9001aed6:	f640 00e9 	movw	r0, #2281	; 0x8e9
9001aeda:	4283      	cmp	r3, r0
9001aedc:	f47f af42 	bne.w	9001ad64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
9001aee0:	e767      	b.n	9001adb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
9001aee2:	f640 00f6 	movw	r0, #2294	; 0x8f6
9001aee6:	4283      	cmp	r3, r0
9001aee8:	f43f af63 	beq.w	9001adb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
9001aeec:	d802      	bhi.n	9001aef4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
9001aeee:	f640 00f2 	movw	r0, #2290	; 0x8f2
9001aef2:	e7f2      	b.n	9001aeda <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
9001aef4:	f640 00fa 	movw	r0, #2298	; 0x8fa
9001aef8:	4283      	cmp	r3, r0
9001aefa:	d805      	bhi.n	9001af08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
9001aefc:	f640 00f9 	movw	r0, #2297	; 0x8f9
9001af00:	4283      	cmp	r3, r0
9001af02:	f4ff af2f 	bcc.w	9001ad64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
9001af06:	e754      	b.n	9001adb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
9001af08:	f640 00fe 	movw	r0, #2302	; 0x8fe
9001af0c:	4283      	cmp	r3, r0
9001af0e:	e7af      	b.n	9001ae70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
9001af10:	f104 0c40 	add.w	ip, r4, #64	; 0x40
9001af14:	4617      	mov	r7, r2
9001af16:	f102 0808 	add.w	r8, r2, #8
9001af1a:	4666      	mov	r6, ip
9001af1c:	6838      	ldr	r0, [r7, #0]
9001af1e:	3708      	adds	r7, #8
9001af20:	f857 1c04 	ldr.w	r1, [r7, #-4]
9001af24:	46e6      	mov	lr, ip
9001af26:	4547      	cmp	r7, r8
9001af28:	e8ae 0003 	stmia.w	lr!, {r0, r1}
9001af2c:	46f4      	mov	ip, lr
9001af2e:	d1f5      	bne.n	9001af1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
9001af30:	6838      	ldr	r0, [r7, #0]
9001af32:	f8ce 0000 	str.w	r0, [lr]
9001af36:	88b9      	ldrh	r1, [r7, #4]
9001af38:	f8ae 1004 	strh.w	r1, [lr, #4]
9001af3c:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
9001af40:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
9001af44:	d009      	beq.n	9001af5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
9001af46:	7b51      	ldrb	r1, [r2, #13]
9001af48:	7992      	ldrb	r2, [r2, #6]
9001af4a:	0149      	lsls	r1, r1, #5
9001af4c:	f401 7180 	and.w	r1, r1, #256	; 0x100
9001af50:	4311      	orrs	r1, r2
9001af52:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
9001af56:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
9001af5a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
9001af5e:	d00d      	beq.n	9001af7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
9001af60:	442b      	add	r3, r5
9001af62:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
9001af66:	b29b      	uxth	r3, r3
9001af68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
9001af6c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
9001af70:	10db      	asrs	r3, r3, #3
9001af72:	f003 0360 	and.w	r3, r3, #96	; 0x60
9001af76:	4313      	orrs	r3, r2
9001af78:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
9001af7c:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
9001af80:	00cb      	lsls	r3, r1, #3
9001af82:	064f      	lsls	r7, r1, #25
9001af84:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001af88:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
9001af8c:	ea43 0302 	orr.w	r3, r3, r2
9001af90:	bf44      	itt	mi
9001af92:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001af96:	b21b      	sxthmi	r3, r3
9001af98:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
9001af9c:	1b5d      	subs	r5, r3, r5
9001af9e:	4632      	mov	r2, r6
9001afa0:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
9001afa4:	e6fa      	b.n	9001ad9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
9001afa6:	f104 0e40 	add.w	lr, r4, #64	; 0x40
9001afaa:	4694      	mov	ip, r2
9001afac:	f102 0908 	add.w	r9, r2, #8
9001afb0:	4676      	mov	r6, lr
9001afb2:	f8dc 0000 	ldr.w	r0, [ip]
9001afb6:	f10c 0c08 	add.w	ip, ip, #8
9001afba:	f85c 1c04 	ldr.w	r1, [ip, #-4]
9001afbe:	46f0      	mov	r8, lr
9001afc0:	45cc      	cmp	ip, r9
9001afc2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
9001afc6:	46c6      	mov	lr, r8
9001afc8:	d1f3      	bne.n	9001afb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
9001afca:	f8dc 0000 	ldr.w	r0, [ip]
9001afce:	f8c8 0000 	str.w	r0, [r8]
9001afd2:	f8bc 1004 	ldrh.w	r1, [ip, #4]
9001afd6:	f8a8 1004 	strh.w	r1, [r8, #4]
9001afda:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
9001afde:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
9001afe2:	d009      	beq.n	9001aff8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
9001afe4:	7b51      	ldrb	r1, [r2, #13]
9001afe6:	7992      	ldrb	r2, [r2, #6]
9001afe8:	0149      	lsls	r1, r1, #5
9001afea:	f401 7180 	and.w	r1, r1, #256	; 0x100
9001afee:	4311      	orrs	r1, r2
9001aff0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
9001aff4:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
9001aff8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
9001affc:	d00d      	beq.n	9001b01a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
9001affe:	1bdb      	subs	r3, r3, r7
9001b000:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
9001b004:	b29b      	uxth	r3, r3
9001b006:	f022 0260 	bic.w	r2, r2, #96	; 0x60
9001b00a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
9001b00e:	10db      	asrs	r3, r3, #3
9001b010:	f003 0360 	and.w	r3, r3, #96	; 0x60
9001b014:	4313      	orrs	r3, r2
9001b016:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
9001b01a:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
9001b01e:	00cb      	lsls	r3, r1, #3
9001b020:	0648      	lsls	r0, r1, #25
9001b022:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001b026:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
9001b02a:	ea43 0302 	orr.w	r3, r3, r2
9001b02e:	bf44      	itt	mi
9001b030:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001b034:	b21b      	sxthmi	r3, r3
9001b036:	e7b1      	b.n	9001af9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

9001b038 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
9001b038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001b03c:	461e      	mov	r6, r3
9001b03e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
9001b040:	4604      	mov	r4, r0
9001b042:	4617      	mov	r7, r2
9001b044:	b92b      	cbnz	r3, 9001b052 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
9001b046:	4b25      	ldr	r3, [pc, #148]	; (9001b0dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
9001b048:	21c0      	movs	r1, #192	; 0xc0
9001b04a:	4a25      	ldr	r2, [pc, #148]	; (9001b0e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
9001b04c:	4825      	ldr	r0, [pc, #148]	; (9001b0e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
9001b04e:	f00d fdf1 	bl	90028c34 <__assert_func>
9001b052:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
9001b054:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001b058:	f8b3 801a 	ldrh.w	r8, [r3, #26]
9001b05c:	f7e8 fa42 	bl	900034e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
9001b060:	4605      	mov	r5, r0
9001b062:	b918      	cbnz	r0, 9001b06c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
9001b064:	6030      	str	r0, [r6, #0]
9001b066:	4628      	mov	r0, r5
9001b068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001b06c:	683b      	ldr	r3, [r7, #0]
9001b06e:	4601      	mov	r1, r0
9001b070:	4638      	mov	r0, r7
9001b072:	68db      	ldr	r3, [r3, #12]
9001b074:	4798      	blx	r3
9001b076:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
9001b07a:	4602      	mov	r2, r0
9001b07c:	6030      	str	r0, [r6, #0]
9001b07e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
9001b082:	d213      	bcs.n	9001b0ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
9001b084:	4643      	mov	r3, r8
9001b086:	4639      	mov	r1, r7
9001b088:	4620      	mov	r0, r4
9001b08a:	f7ff fe33 	bl	9001acf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
9001b08e:	6030      	str	r0, [r6, #0]
9001b090:	6833      	ldr	r3, [r6, #0]
9001b092:	b143      	cbz	r3, 9001b0a6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
9001b094:	7b5a      	ldrb	r2, [r3, #13]
9001b096:	7a9b      	ldrb	r3, [r3, #10]
9001b098:	0052      	lsls	r2, r2, #1
9001b09a:	f402 7280 	and.w	r2, r2, #256	; 0x100
9001b09e:	4313      	orrs	r3, r2
9001b0a0:	bf0c      	ite	eq
9001b0a2:	2301      	moveq	r3, #1
9001b0a4:	2300      	movne	r3, #0
9001b0a6:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
9001b0aa:	e7dc      	b.n	9001b066 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
9001b0ac:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
9001b0b0:	b29b      	uxth	r3, r3
9001b0b2:	2b7f      	cmp	r3, #127	; 0x7f
9001b0b4:	d804      	bhi.n	9001b0c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
9001b0b6:	4639      	mov	r1, r7
9001b0b8:	4620      	mov	r0, r4
9001b0ba:	f7ff fd01 	bl	9001aac0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
9001b0be:	e7e6      	b.n	9001b08e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
9001b0c0:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
9001b0c4:	2b00      	cmp	r3, #0
9001b0c6:	d0e3      	beq.n	9001b090 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
9001b0c8:	f640 1302 	movw	r3, #2306	; 0x902
9001b0cc:	429d      	cmp	r5, r3
9001b0ce:	d1df      	bne.n	9001b090 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
9001b0d0:	4601      	mov	r1, r0
9001b0d2:	4620      	mov	r0, r4
9001b0d4:	f7ff fcc5 	bl	9001aa62 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
9001b0d8:	e7d9      	b.n	9001b08e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
9001b0da:	bf00      	nop
9001b0dc:	9002af98 	.word	0x9002af98
9001b0e0:	9002fe43 	.word	0x9002fe43
9001b0e4:	9002b06a 	.word	0x9002b06a

9001b0e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
9001b0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9001b0ec:	461e      	mov	r6, r3
9001b0ee:	8e03      	ldrh	r3, [r0, #48]	; 0x30
9001b0f0:	4604      	mov	r4, r0
9001b0f2:	4617      	mov	r7, r2
9001b0f4:	b92b      	cbnz	r3, 9001b102 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
9001b0f6:	4b26      	ldr	r3, [pc, #152]	; (9001b190 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
9001b0f8:	21c0      	movs	r1, #192	; 0xc0
9001b0fa:	4a26      	ldr	r2, [pc, #152]	; (9001b194 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
9001b0fc:	4826      	ldr	r0, [pc, #152]	; (9001b198 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
9001b0fe:	f00d fd99 	bl	90028c34 <__assert_func>
9001b102:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
9001b104:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001b108:	f8b3 801a 	ldrh.w	r8, [r3, #26]
9001b10c:	f7e8 f9ea 	bl	900034e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
9001b110:	4605      	mov	r5, r0
9001b112:	b918      	cbnz	r0, 9001b11c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
9001b114:	6030      	str	r0, [r6, #0]
9001b116:	4628      	mov	r0, r5
9001b118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9001b11c:	683b      	ldr	r3, [r7, #0]
9001b11e:	4601      	mov	r1, r0
9001b120:	4638      	mov	r0, r7
9001b122:	f8d3 9008 	ldr.w	r9, [r3, #8]
9001b126:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
9001b12a:	47c8      	blx	r9
9001b12c:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
9001b130:	4602      	mov	r2, r0
9001b132:	6030      	str	r0, [r6, #0]
9001b134:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
9001b138:	d213      	bcs.n	9001b162 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
9001b13a:	4643      	mov	r3, r8
9001b13c:	4639      	mov	r1, r7
9001b13e:	4620      	mov	r0, r4
9001b140:	f7ff fdd8 	bl	9001acf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
9001b144:	6030      	str	r0, [r6, #0]
9001b146:	6833      	ldr	r3, [r6, #0]
9001b148:	b143      	cbz	r3, 9001b15c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
9001b14a:	7b5a      	ldrb	r2, [r3, #13]
9001b14c:	7a9b      	ldrb	r3, [r3, #10]
9001b14e:	0052      	lsls	r2, r2, #1
9001b150:	f402 7280 	and.w	r2, r2, #256	; 0x100
9001b154:	4313      	orrs	r3, r2
9001b156:	bf0c      	ite	eq
9001b158:	2301      	moveq	r3, #1
9001b15a:	2300      	movne	r3, #0
9001b15c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
9001b160:	e7d9      	b.n	9001b116 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
9001b162:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
9001b166:	b29b      	uxth	r3, r3
9001b168:	2b7f      	cmp	r3, #127	; 0x7f
9001b16a:	d804      	bhi.n	9001b176 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
9001b16c:	4639      	mov	r1, r7
9001b16e:	4620      	mov	r0, r4
9001b170:	f7ff fca6 	bl	9001aac0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
9001b174:	e7e6      	b.n	9001b144 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
9001b176:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
9001b17a:	2b00      	cmp	r3, #0
9001b17c:	d0e3      	beq.n	9001b146 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
9001b17e:	f640 1302 	movw	r3, #2306	; 0x902
9001b182:	429d      	cmp	r5, r3
9001b184:	d1df      	bne.n	9001b146 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
9001b186:	4601      	mov	r1, r0
9001b188:	4620      	mov	r0, r4
9001b18a:	f7ff fc6a 	bl	9001aa62 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
9001b18e:	e7d9      	b.n	9001b144 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
9001b190:	9002af98 	.word	0x9002af98
9001b194:	9002fe43 	.word	0x9002fe43
9001b198:	9002b06a 	.word	0x9002b06a

9001b19c <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
9001b19c:	b510      	push	{r4, lr}
9001b19e:	4604      	mov	r4, r0
9001b1a0:	8f21      	ldrh	r1, [r4, #56]	; 0x38
9001b1a2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
9001b1a4:	b9d9      	cbnz	r1, 9001b1de <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
9001b1a6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
9001b1a8:	2b0a      	cmp	r3, #10
9001b1aa:	d036      	beq.n	9001b21a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
9001b1ac:	4620      	mov	r0, r4
9001b1ae:	f7ff fc21 	bl	9001a9f4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
9001b1b2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
9001b1b4:	2b09      	cmp	r3, #9
9001b1b6:	d906      	bls.n	9001b1c6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
9001b1b8:	4b18      	ldr	r3, [pc, #96]	; (9001b21c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
9001b1ba:	f44f 7182 	mov.w	r1, #260	; 0x104
9001b1be:	4a18      	ldr	r2, [pc, #96]	; (9001b220 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
9001b1c0:	4818      	ldr	r0, [pc, #96]	; (9001b224 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
9001b1c2:	f00d fd37 	bl	90028c34 <__assert_func>
9001b1c6:	1c5a      	adds	r2, r3, #1
9001b1c8:	8622      	strh	r2, [r4, #48]	; 0x30
9001b1ca:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
9001b1cc:	4413      	add	r3, r2
9001b1ce:	b29b      	uxth	r3, r3
9001b1d0:	2b09      	cmp	r3, #9
9001b1d2:	bf88      	it	hi
9001b1d4:	3b0a      	subhi	r3, #10
9001b1d6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001b1da:	8358      	strh	r0, [r3, #26]
9001b1dc:	e7e3      	b.n	9001b1a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
9001b1de:	2b0a      	cmp	r3, #10
9001b1e0:	d01b      	beq.n	9001b21a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
9001b1e2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
9001b1e4:	3901      	subs	r1, #1
9001b1e6:	eb04 0042 	add.w	r0, r4, r2, lsl #1
9001b1ea:	8e40      	ldrh	r0, [r0, #50]	; 0x32
9001b1ec:	8721      	strh	r1, [r4, #56]	; 0x38
9001b1ee:	1c51      	adds	r1, r2, #1
9001b1f0:	b289      	uxth	r1, r1
9001b1f2:	2901      	cmp	r1, #1
9001b1f4:	bf8a      	itet	hi
9001b1f6:	f102 32ff 	addhi.w	r2, r2, #4294967295
9001b1fa:	86e1      	strhls	r1, [r4, #54]	; 0x36
9001b1fc:	86e2      	strhhi	r2, [r4, #54]	; 0x36
9001b1fe:	2b09      	cmp	r3, #9
9001b200:	d8da      	bhi.n	9001b1b8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
9001b202:	1c5a      	adds	r2, r3, #1
9001b204:	8622      	strh	r2, [r4, #48]	; 0x30
9001b206:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
9001b208:	4413      	add	r3, r2
9001b20a:	b29b      	uxth	r3, r3
9001b20c:	2b09      	cmp	r3, #9
9001b20e:	bf88      	it	hi
9001b210:	3b0a      	subhi	r3, #10
9001b212:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001b216:	8358      	strh	r0, [r3, #26]
9001b218:	e7c2      	b.n	9001b1a0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
9001b21a:	bd10      	pop	{r4, pc}
9001b21c:	9002fc14 	.word	0x9002fc14
9001b220:	9002ff99 	.word	0x9002ff99
9001b224:	9002b06a 	.word	0x9002b06a

9001b228 <_ZN8touchgfx12TextProvider11getNextCharEv>:
9001b228:	b538      	push	{r3, r4, r5, lr}
9001b22a:	8e02      	ldrh	r2, [r0, #48]	; 0x30
9001b22c:	4604      	mov	r4, r0
9001b22e:	b92a      	cbnz	r2, 9001b23c <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
9001b230:	4b13      	ldr	r3, [pc, #76]	; (9001b280 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
9001b232:	21d5      	movs	r1, #213	; 0xd5
9001b234:	4a13      	ldr	r2, [pc, #76]	; (9001b284 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
9001b236:	4814      	ldr	r0, [pc, #80]	; (9001b288 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
9001b238:	f00d fcfc 	bl	90028c34 <__assert_func>
9001b23c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
9001b23e:	3a01      	subs	r2, #1
9001b240:	eb00 0143 	add.w	r1, r0, r3, lsl #1
9001b244:	8b4d      	ldrh	r5, [r1, #26]
9001b246:	8602      	strh	r2, [r0, #48]	; 0x30
9001b248:	1c5a      	adds	r2, r3, #1
9001b24a:	b292      	uxth	r2, r2
9001b24c:	2a09      	cmp	r2, #9
9001b24e:	bf8a      	itet	hi
9001b250:	3b09      	subhi	r3, #9
9001b252:	85c2      	strhls	r2, [r0, #46]	; 0x2e
9001b254:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
9001b256:	f7ff ffa1 	bl	9001b19c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
9001b25a:	8b23      	ldrh	r3, [r4, #24]
9001b25c:	2b01      	cmp	r3, #1
9001b25e:	bf9c      	itt	ls
9001b260:	3301      	addls	r3, #1
9001b262:	8323      	strhls	r3, [r4, #24]
9001b264:	8ae3      	ldrh	r3, [r4, #22]
9001b266:	b90b      	cbnz	r3, 9001b26c <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
9001b268:	2302      	movs	r3, #2
9001b26a:	82e3      	strh	r3, [r4, #22]
9001b26c:	8ae3      	ldrh	r3, [r4, #22]
9001b26e:	4628      	mov	r0, r5
9001b270:	3b01      	subs	r3, #1
9001b272:	b29b      	uxth	r3, r3
9001b274:	82e3      	strh	r3, [r4, #22]
9001b276:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001b27a:	8265      	strh	r5, [r4, #18]
9001b27c:	bd38      	pop	{r3, r4, r5, pc}
9001b27e:	bf00      	nop
9001b280:	9002af98 	.word	0x9002af98
9001b284:	9002feee 	.word	0x9002feee
9001b288:	9002b06a 	.word	0x9002b06a

9001b28c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
9001b28c:	428a      	cmp	r2, r1
9001b28e:	b538      	push	{r3, r4, r5, lr}
9001b290:	8e04      	ldrh	r4, [r0, #48]	; 0x30
9001b292:	d90c      	bls.n	9001b2ae <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
9001b294:	b92c      	cbnz	r4, 9001b2a2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
9001b296:	4b1c      	ldr	r3, [pc, #112]	; (9001b308 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
9001b298:	21e1      	movs	r1, #225	; 0xe1
9001b29a:	4a1c      	ldr	r2, [pc, #112]	; (9001b30c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
9001b29c:	481c      	ldr	r0, [pc, #112]	; (9001b310 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
9001b29e:	f00d fcc9 	bl	90028c34 <__assert_func>
9001b2a2:	3c01      	subs	r4, #1
9001b2a4:	4b1b      	ldr	r3, [pc, #108]	; (9001b314 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
9001b2a6:	4a1c      	ldr	r2, [pc, #112]	; (9001b318 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
9001b2a8:	21c5      	movs	r1, #197	; 0xc5
9001b2aa:	8604      	strh	r4, [r0, #48]	; 0x30
9001b2ac:	e7f6      	b.n	9001b29c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
9001b2ae:	428c      	cmp	r4, r1
9001b2b0:	d203      	bcs.n	9001b2ba <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
9001b2b2:	4b1a      	ldr	r3, [pc, #104]	; (9001b31c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
9001b2b4:	21cb      	movs	r1, #203	; 0xcb
9001b2b6:	4a1a      	ldr	r2, [pc, #104]	; (9001b320 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
9001b2b8:	e7f0      	b.n	9001b29c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
9001b2ba:	1a64      	subs	r4, r4, r1
9001b2bc:	250a      	movs	r5, #10
9001b2be:	8604      	strh	r4, [r0, #48]	; 0x30
9001b2c0:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
9001b2c2:	4421      	add	r1, r4
9001b2c4:	b289      	uxth	r1, r1
9001b2c6:	2909      	cmp	r1, #9
9001b2c8:	bf88      	it	hi
9001b2ca:	390a      	subhi	r1, #10
9001b2cc:	85c1      	strh	r1, [r0, #46]	; 0x2e
9001b2ce:	b1ba      	cbz	r2, 9001b300 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
9001b2d0:	3a01      	subs	r2, #1
9001b2d2:	8e01      	ldrh	r1, [r0, #48]	; 0x30
9001b2d4:	b292      	uxth	r2, r2
9001b2d6:	2909      	cmp	r1, #9
9001b2d8:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
9001b2dc:	d903      	bls.n	9001b2e6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
9001b2de:	4b11      	ldr	r3, [pc, #68]	; (9001b324 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
9001b2e0:	21e6      	movs	r1, #230	; 0xe6
9001b2e2:	4a11      	ldr	r2, [pc, #68]	; (9001b328 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
9001b2e4:	e7da      	b.n	9001b29c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
9001b2e6:	3101      	adds	r1, #1
9001b2e8:	8601      	strh	r1, [r0, #48]	; 0x30
9001b2ea:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
9001b2ec:	b901      	cbnz	r1, 9001b2f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
9001b2ee:	85c5      	strh	r5, [r0, #46]	; 0x2e
9001b2f0:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
9001b2f2:	3901      	subs	r1, #1
9001b2f4:	b289      	uxth	r1, r1
9001b2f6:	85c1      	strh	r1, [r0, #46]	; 0x2e
9001b2f8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
9001b2fc:	834c      	strh	r4, [r1, #26]
9001b2fe:	e7e6      	b.n	9001b2ce <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
9001b300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
9001b304:	f7ff bf4a 	b.w	9001b19c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
9001b308:	9002af98 	.word	0x9002af98
9001b30c:	9002fcc7 	.word	0x9002fcc7
9001b310:	9002b06a 	.word	0x9002b06a
9001b314:	9002b096 	.word	0x9002b096
9001b318:	9002fd71 	.word	0x9002fd71
9001b31c:	9002fc20 	.word	0x9002fc20
9001b320:	90030048 	.word	0x90030048
9001b324:	9002fc2c 	.word	0x9002fc2c
9001b328:	9002fc3f 	.word	0x9002fc3f

9001b32c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
9001b32c:	3a01      	subs	r2, #1
9001b32e:	b570      	push	{r4, r5, r6, lr}
9001b330:	b292      	uxth	r2, r2
9001b332:	f64f 76ff 	movw	r6, #65535	; 0xffff
9001b336:	42b2      	cmp	r2, r6
9001b338:	d019      	beq.n	9001b36e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
9001b33a:	8b04      	ldrh	r4, [r0, #24]
9001b33c:	f831 5b02 	ldrh.w	r5, [r1], #2
9001b340:	4294      	cmp	r4, r2
9001b342:	d805      	bhi.n	9001b350 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
9001b344:	4b19      	ldr	r3, [pc, #100]	; (9001b3ac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
9001b346:	4a1a      	ldr	r2, [pc, #104]	; (9001b3b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
9001b348:	21c5      	movs	r1, #197	; 0xc5
9001b34a:	481a      	ldr	r0, [pc, #104]	; (9001b3b4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
9001b34c:	f00d fc72 	bl	90028c34 <__assert_func>
9001b350:	8ac4      	ldrh	r4, [r0, #22]
9001b352:	4414      	add	r4, r2
9001b354:	3a01      	subs	r2, #1
9001b356:	b2a4      	uxth	r4, r4
9001b358:	b292      	uxth	r2, r2
9001b35a:	2c01      	cmp	r4, #1
9001b35c:	bf88      	it	hi
9001b35e:	3c02      	subhi	r4, #2
9001b360:	eb00 0444 	add.w	r4, r0, r4, lsl #1
9001b364:	8a64      	ldrh	r4, [r4, #18]
9001b366:	42ac      	cmp	r4, r5
9001b368:	d0e5      	beq.n	9001b336 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
9001b36a:	2000      	movs	r0, #0
9001b36c:	bd70      	pop	{r4, r5, r6, pc}
9001b36e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001b372:	2400      	movs	r4, #0
9001b374:	4413      	add	r3, r2
9001b376:	b2a2      	uxth	r2, r4
9001b378:	429a      	cmp	r2, r3
9001b37a:	da14      	bge.n	9001b3a6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
9001b37c:	8e06      	ldrh	r6, [r0, #48]	; 0x30
9001b37e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
9001b382:	4296      	cmp	r6, r2
9001b384:	d802      	bhi.n	9001b38c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
9001b386:	4b09      	ldr	r3, [pc, #36]	; (9001b3ac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
9001b388:	4a0b      	ldr	r2, [pc, #44]	; (9001b3b8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
9001b38a:	e7dd      	b.n	9001b348 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
9001b38c:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
9001b38e:	3401      	adds	r4, #1
9001b390:	4432      	add	r2, r6
9001b392:	b292      	uxth	r2, r2
9001b394:	2a09      	cmp	r2, #9
9001b396:	bf88      	it	hi
9001b398:	3a0a      	subhi	r2, #10
9001b39a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001b39e:	8b52      	ldrh	r2, [r2, #26]
9001b3a0:	42aa      	cmp	r2, r5
9001b3a2:	d0e8      	beq.n	9001b376 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
9001b3a4:	e7e1      	b.n	9001b36a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
9001b3a6:	2001      	movs	r0, #1
9001b3a8:	e7e0      	b.n	9001b36c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
9001b3aa:	bf00      	nop
9001b3ac:	9002b096 	.word	0x9002b096
9001b3b0:	900300cc 	.word	0x900300cc
9001b3b4:	9002b06a 	.word	0x9002b06a
9001b3b8:	9002fd71 	.word	0x9002fd71

9001b3bc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
9001b3bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b3c0:	4605      	mov	r5, r0
9001b3c2:	4616      	mov	r6, r2
9001b3c4:	1c8c      	adds	r4, r1, #2
9001b3c6:	8809      	ldrh	r1, [r1, #0]
9001b3c8:	ea4f 3a11 	mov.w	sl, r1, lsr #12
9001b3cc:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
9001b3d0:	42b3      	cmp	r3, r6
9001b3d2:	d124      	bne.n	9001b41e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
9001b3d4:	f3c1 2903 	ubfx	r9, r1, #8, #4
9001b3d8:	f3c1 1803 	ubfx	r8, r1, #4, #4
9001b3dc:	f001 070f 	and.w	r7, r1, #15
9001b3e0:	4652      	mov	r2, sl
9001b3e2:	f8cd 8000 	str.w	r8, [sp]
9001b3e6:	464b      	mov	r3, r9
9001b3e8:	4621      	mov	r1, r4
9001b3ea:	4628      	mov	r0, r5
9001b3ec:	f7ff ff9e 	bl	9001b32c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
9001b3f0:	4683      	mov	fp, r0
9001b3f2:	b168      	cbz	r0, 9001b410 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
9001b3f4:	eb0a 0109 	add.w	r1, sl, r9
9001b3f8:	463a      	mov	r2, r7
9001b3fa:	4628      	mov	r0, r5
9001b3fc:	4441      	add	r1, r8
9001b3fe:	eb04 0341 	add.w	r3, r4, r1, lsl #1
9001b402:	4649      	mov	r1, r9
9001b404:	f7ff ff42 	bl	9001b28c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
9001b408:	4658      	mov	r0, fp
9001b40a:	b003      	add	sp, #12
9001b40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001b410:	eb07 010a 	add.w	r1, r7, sl
9001b414:	4449      	add	r1, r9
9001b416:	4441      	add	r1, r8
9001b418:	eb04 0141 	add.w	r1, r4, r1, lsl #1
9001b41c:	e7d2      	b.n	9001b3c4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
9001b41e:	f04f 0b00 	mov.w	fp, #0
9001b422:	e7f1      	b.n	9001b408 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

9001b424 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
9001b424:	b570      	push	{r4, r5, r6, lr}
9001b426:	8810      	ldrh	r0, [r2, #0]
9001b428:	4298      	cmp	r0, r3
9001b42a:	d817      	bhi.n	9001b45c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001b42c:	1e48      	subs	r0, r1, #1
9001b42e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
9001b432:	4298      	cmp	r0, r3
9001b434:	d312      	bcc.n	9001b45c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001b436:	2400      	movs	r4, #0
9001b438:	428c      	cmp	r4, r1
9001b43a:	d20f      	bcs.n	9001b45c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001b43c:	1860      	adds	r0, r4, r1
9001b43e:	1040      	asrs	r0, r0, #1
9001b440:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
9001b444:	0085      	lsls	r5, r0, #2
9001b446:	42b3      	cmp	r3, r6
9001b448:	d902      	bls.n	9001b450 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
9001b44a:	3001      	adds	r0, #1
9001b44c:	b284      	uxth	r4, r0
9001b44e:	e7f3      	b.n	9001b438 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
9001b450:	d201      	bcs.n	9001b456 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
9001b452:	b281      	uxth	r1, r0
9001b454:	e7f0      	b.n	9001b438 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
9001b456:	442a      	add	r2, r5
9001b458:	8850      	ldrh	r0, [r2, #2]
9001b45a:	bd70      	pop	{r4, r5, r6, pc}
9001b45c:	2000      	movs	r0, #0
9001b45e:	e7fc      	b.n	9001b45a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

9001b460 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
9001b460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001b464:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
9001b466:	4604      	mov	r4, r0
9001b468:	260b      	movs	r6, #11
9001b46a:	886f      	ldrh	r7, [r5, #2]
9001b46c:	087f      	lsrs	r7, r7, #1
9001b46e:	3e01      	subs	r6, #1
9001b470:	d01b      	beq.n	9001b4aa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
9001b472:	8e23      	ldrh	r3, [r4, #48]	; 0x30
9001b474:	b92b      	cbnz	r3, 9001b482 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
9001b476:	4b0e      	ldr	r3, [pc, #56]	; (9001b4b0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
9001b478:	21c0      	movs	r1, #192	; 0xc0
9001b47a:	4a0e      	ldr	r2, [pc, #56]	; (9001b4b4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
9001b47c:	480e      	ldr	r0, [pc, #56]	; (9001b4b8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
9001b47e:	f00d fbd9 	bl	90028c34 <__assert_func>
9001b482:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
9001b484:	462a      	mov	r2, r5
9001b486:	4639      	mov	r1, r7
9001b488:	4620      	mov	r0, r4
9001b48a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001b48e:	f8b3 801a 	ldrh.w	r8, [r3, #26]
9001b492:	4643      	mov	r3, r8
9001b494:	f7ff ffc6 	bl	9001b424 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
9001b498:	b138      	cbz	r0, 9001b4aa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
9001b49a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
9001b49e:	4642      	mov	r2, r8
9001b4a0:	4620      	mov	r0, r4
9001b4a2:	f7ff ff8b 	bl	9001b3bc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
9001b4a6:	2800      	cmp	r0, #0
9001b4a8:	d1e1      	bne.n	9001b46e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
9001b4aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001b4ae:	bf00      	nop
9001b4b0:	9002af98 	.word	0x9002af98
9001b4b4:	9002fe43 	.word	0x9002fe43
9001b4b8:	9002b06a 	.word	0x9002b06a

9001b4bc <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>:
9001b4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
9001b4be:	2300      	movs	r3, #0
9001b4c0:	b08d      	sub	sp, #52	; 0x34
9001b4c2:	f100 0640 	add.w	r6, r0, #64	; 0x40
9001b4c6:	f101 0710 	add.w	r7, r1, #16
9001b4ca:	9304      	str	r3, [sp, #16]
9001b4cc:	aa04      	add	r2, sp, #16
9001b4ce:	9305      	str	r3, [sp, #20]
9001b4d0:	9306      	str	r3, [sp, #24]
9001b4d2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
9001b4d6:	9307      	str	r3, [sp, #28]
9001b4d8:	4613      	mov	r3, r2
9001b4da:	460c      	mov	r4, r1
9001b4dc:	4605      	mov	r5, r0
9001b4de:	eddf 7a0e 	vldr	s15, [pc, #56]	; 9001b518 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x5c>
9001b4e2:	ecb4 7a01 	vldmia	r4!, {s14}
9001b4e6:	ecf5 6a01 	vldmia	r5!, {s13}
9001b4ea:	42bc      	cmp	r4, r7
9001b4ec:	eee6 7a87 	vfma.f32	s15, s13, s14
9001b4f0:	d1f7      	bne.n	9001b4e2 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x26>
9001b4f2:	3010      	adds	r0, #16
9001b4f4:	ece2 7a01 	vstmia	r2!, {s15}
9001b4f8:	42b0      	cmp	r0, r6
9001b4fa:	d1ee      	bne.n	9001b4da <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x1e>
9001b4fc:	ac0c      	add	r4, sp, #48	; 0x30
9001b4fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
9001b500:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
9001b504:	ed9d 0a08 	vldr	s0, [sp, #32]
9001b508:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
9001b50c:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
9001b510:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
9001b514:	b00d      	add	sp, #52	; 0x34
9001b516:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001b518:	00000000 	.word	0x00000000

9001b51c <_ZN8touchgfx9Matrix4x4C1Ev>:
9001b51c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
9001b520:	2300      	movs	r3, #0
9001b522:	ed9f 7a09 	vldr	s14, [pc, #36]	; 9001b548 <_ZN8touchgfx9Matrix4x4C1Ev+0x2c>
9001b526:	eb00 1103 	add.w	r1, r0, r3, lsl #4
9001b52a:	2200      	movs	r2, #0
9001b52c:	4293      	cmp	r3, r2
9001b52e:	f102 0201 	add.w	r2, r2, #1
9001b532:	fe47 6a87 	vseleq.f32	s13, s15, s14
9001b536:	2a04      	cmp	r2, #4
9001b538:	ece1 6a01 	vstmia	r1!, {s13}
9001b53c:	d1f6      	bne.n	9001b52c <_ZN8touchgfx9Matrix4x4C1Ev+0x10>
9001b53e:	3301      	adds	r3, #1
9001b540:	2b04      	cmp	r3, #4
9001b542:	d1f0      	bne.n	9001b526 <_ZN8touchgfx9Matrix4x4C1Ev+0xa>
9001b544:	4770      	bx	lr
9001b546:	bf00      	nop
9001b548:	00000000 	.word	0x00000000

9001b54c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>:
9001b54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001b550:	460c      	mov	r4, r1
9001b552:	4605      	mov	r5, r0
9001b554:	4690      	mov	r8, r2
9001b556:	f7ff ffe1 	bl	9001b51c <_ZN8touchgfx9Matrix4x4C1Ev>
9001b55a:	4628      	mov	r0, r5
9001b55c:	4621      	mov	r1, r4
9001b55e:	f104 0c40 	add.w	ip, r4, #64	; 0x40
9001b562:	2300      	movs	r3, #0
9001b564:	eb08 0603 	add.w	r6, r8, r3
9001b568:	460f      	mov	r7, r1
9001b56a:	2400      	movs	r4, #0
9001b56c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 9001b5a0 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x54>
9001b570:	4632      	mov	r2, r6
9001b572:	3401      	adds	r4, #1
9001b574:	ecf7 6a01 	vldmia	r7!, {s13}
9001b578:	3610      	adds	r6, #16
9001b57a:	ed92 7a00 	vldr	s14, [r2]
9001b57e:	2c04      	cmp	r4, #4
9001b580:	eee6 7a87 	vfma.f32	s15, s13, s14
9001b584:	d1f4      	bne.n	9001b570 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x24>
9001b586:	18c2      	adds	r2, r0, r3
9001b588:	3304      	adds	r3, #4
9001b58a:	2b10      	cmp	r3, #16
9001b58c:	edc2 7a00 	vstr	s15, [r2]
9001b590:	d1e8      	bne.n	9001b564 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x18>
9001b592:	3110      	adds	r1, #16
9001b594:	3010      	adds	r0, #16
9001b596:	4561      	cmp	r1, ip
9001b598:	d1e3      	bne.n	9001b562 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x16>
9001b59a:	4628      	mov	r0, r5
9001b59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001b5a0:	00000000 	.word	0x00000000

9001b5a4 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>:
9001b5a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
9001b5a8:	f100 0320 	add.w	r3, r0, #32
9001b5ac:	3030      	adds	r0, #48	; 0x30
9001b5ae:	ee87 0a80 	vdiv.f32	s0, s15, s0
9001b5b2:	ecf3 7a01 	vldmia	r3!, {s15}
9001b5b6:	4283      	cmp	r3, r0
9001b5b8:	ee60 7a27 	vmul.f32	s15, s0, s15
9001b5bc:	edc3 7a03 	vstr	s15, [r3, #12]
9001b5c0:	d1f7      	bne.n	9001b5b2 <_ZN8touchgfx9Matrix4x415setViewDistanceEf+0xe>
9001b5c2:	4770      	bx	lr

9001b5c4 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>:
9001b5c4:	b510      	push	{r4, lr}
9001b5c6:	ed2d 8b02 	vpush	{d8}
9001b5ca:	eef0 8a40 	vmov.f32	s17, s0
9001b5ce:	4604      	mov	r4, r0
9001b5d0:	f00c fdbc 	bl	9002814c <sinf>
9001b5d4:	eeb0 8a40 	vmov.f32	s16, s0
9001b5d8:	eeb0 0a68 	vmov.f32	s0, s17
9001b5dc:	f00c fd76 	bl	900280cc <cosf>
9001b5e0:	eeb1 6a48 	vneg.f32	s12, s16
9001b5e4:	f104 0310 	add.w	r3, r4, #16
9001b5e8:	f104 0220 	add.w	r2, r4, #32
9001b5ec:	edd3 7a04 	vldr	s15, [r3, #16]
9001b5f0:	edd3 6a00 	vldr	s13, [r3]
9001b5f4:	ee26 7a27 	vmul.f32	s14, s12, s15
9001b5f8:	ee67 7a80 	vmul.f32	s15, s15, s0
9001b5fc:	eea6 7a80 	vfma.f32	s14, s13, s0
9001b600:	eee6 7a88 	vfma.f32	s15, s13, s16
9001b604:	eca3 7a01 	vstmia	r3!, {s14}
9001b608:	429a      	cmp	r2, r3
9001b60a:	edc3 7a03 	vstr	s15, [r3, #12]
9001b60e:	d1ed      	bne.n	9001b5ec <_ZN8touchgfx9Matrix4x420concatenateXRotationEf+0x28>
9001b610:	4620      	mov	r0, r4
9001b612:	ecbd 8b02 	vpop	{d8}
9001b616:	bd10      	pop	{r4, pc}

9001b618 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>:
9001b618:	b510      	push	{r4, lr}
9001b61a:	ed2d 8b02 	vpush	{d8}
9001b61e:	eef0 8a40 	vmov.f32	s17, s0
9001b622:	4604      	mov	r4, r0
9001b624:	f00c fd92 	bl	9002814c <sinf>
9001b628:	eeb0 8a40 	vmov.f32	s16, s0
9001b62c:	eeb0 0a68 	vmov.f32	s0, s17
9001b630:	f00c fd4c 	bl	900280cc <cosf>
9001b634:	eeb1 6a48 	vneg.f32	s12, s16
9001b638:	4623      	mov	r3, r4
9001b63a:	f104 0210 	add.w	r2, r4, #16
9001b63e:	edd3 7a08 	vldr	s15, [r3, #32]
9001b642:	edd3 6a00 	vldr	s13, [r3]
9001b646:	ee27 7a88 	vmul.f32	s14, s15, s16
9001b64a:	ee67 7a80 	vmul.f32	s15, s15, s0
9001b64e:	eea6 7a80 	vfma.f32	s14, s13, s0
9001b652:	eee6 7a26 	vfma.f32	s15, s12, s13
9001b656:	eca3 7a01 	vstmia	r3!, {s14}
9001b65a:	429a      	cmp	r2, r3
9001b65c:	edc3 7a07 	vstr	s15, [r3, #28]
9001b660:	d1ed      	bne.n	9001b63e <_ZN8touchgfx9Matrix4x420concatenateYRotationEf+0x26>
9001b662:	4620      	mov	r0, r4
9001b664:	ecbd 8b02 	vpop	{d8}
9001b668:	bd10      	pop	{r4, pc}

9001b66a <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>:
9001b66a:	b510      	push	{r4, lr}
9001b66c:	ed2d 8b02 	vpush	{d8}
9001b670:	eef0 8a40 	vmov.f32	s17, s0
9001b674:	4604      	mov	r4, r0
9001b676:	f00c fd69 	bl	9002814c <sinf>
9001b67a:	eeb0 8a40 	vmov.f32	s16, s0
9001b67e:	eeb0 0a68 	vmov.f32	s0, s17
9001b682:	f00c fd23 	bl	900280cc <cosf>
9001b686:	eeb1 6a48 	vneg.f32	s12, s16
9001b68a:	4623      	mov	r3, r4
9001b68c:	f104 0210 	add.w	r2, r4, #16
9001b690:	edd3 7a04 	vldr	s15, [r3, #16]
9001b694:	edd3 6a00 	vldr	s13, [r3]
9001b698:	ee26 7a27 	vmul.f32	s14, s12, s15
9001b69c:	ee67 7a80 	vmul.f32	s15, s15, s0
9001b6a0:	eea6 7a80 	vfma.f32	s14, s13, s0
9001b6a4:	eee6 7a88 	vfma.f32	s15, s13, s16
9001b6a8:	eca3 7a01 	vstmia	r3!, {s14}
9001b6ac:	429a      	cmp	r2, r3
9001b6ae:	edc3 7a03 	vstr	s15, [r3, #12]
9001b6b2:	d1ed      	bne.n	9001b690 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf+0x26>
9001b6b4:	4620      	mov	r0, r4
9001b6b6:	ecbd 8b02 	vpop	{d8}
9001b6ba:	bd10      	pop	{r4, pc}

9001b6bc <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>:
9001b6bc:	4603      	mov	r3, r0
9001b6be:	f100 0210 	add.w	r2, r0, #16
9001b6c2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
9001b6c6:	edd3 7a00 	vldr	s15, [r3]
9001b6ca:	eee7 7a00 	vfma.f32	s15, s14, s0
9001b6ce:	ece3 7a01 	vstmia	r3!, {s15}
9001b6d2:	4293      	cmp	r3, r2
9001b6d4:	d1f5      	bne.n	9001b6c2 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf+0x6>
9001b6d6:	4770      	bx	lr

9001b6d8 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>:
9001b6d8:	f100 0310 	add.w	r3, r0, #16
9001b6dc:	f100 0220 	add.w	r2, r0, #32
9001b6e0:	ed93 7a08 	vldr	s14, [r3, #32]
9001b6e4:	edd3 7a00 	vldr	s15, [r3]
9001b6e8:	eee7 7a00 	vfma.f32	s15, s14, s0
9001b6ec:	ece3 7a01 	vstmia	r3!, {s15}
9001b6f0:	4293      	cmp	r3, r2
9001b6f2:	d1f5      	bne.n	9001b6e0 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf+0x8>
9001b6f4:	4770      	bx	lr

9001b6f6 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>:
9001b6f6:	f100 0320 	add.w	r3, r0, #32
9001b6fa:	f100 0230 	add.w	r2, r0, #48	; 0x30
9001b6fe:	ed93 7a04 	vldr	s14, [r3, #16]
9001b702:	edd3 7a00 	vldr	s15, [r3]
9001b706:	eee7 7a00 	vfma.f32	s15, s14, s0
9001b70a:	ece3 7a01 	vstmia	r3!, {s15}
9001b70e:	4293      	cmp	r3, r2
9001b710:	d1f5      	bne.n	9001b6fe <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf+0x8>
9001b712:	4770      	bx	lr

9001b714 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>:
9001b714:	4603      	mov	r3, r0
9001b716:	f100 0210 	add.w	r2, r0, #16
9001b71a:	edd3 7a00 	vldr	s15, [r3]
9001b71e:	ee67 7a80 	vmul.f32	s15, s15, s0
9001b722:	ece3 7a01 	vstmia	r3!, {s15}
9001b726:	4293      	cmp	r3, r2
9001b728:	d1f7      	bne.n	9001b71a <_ZN8touchgfx9Matrix4x417concatenateXScaleEf+0x6>
9001b72a:	4770      	bx	lr

9001b72c <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>:
9001b72c:	f100 0310 	add.w	r3, r0, #16
9001b730:	f100 0220 	add.w	r2, r0, #32
9001b734:	edd3 7a00 	vldr	s15, [r3]
9001b738:	ee67 7a80 	vmul.f32	s15, s15, s0
9001b73c:	ece3 7a01 	vstmia	r3!, {s15}
9001b740:	4293      	cmp	r3, r2
9001b742:	d1f7      	bne.n	9001b734 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf+0x8>
9001b744:	4770      	bx	lr

9001b746 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>:
9001b746:	f100 0320 	add.w	r3, r0, #32
9001b74a:	f100 0230 	add.w	r2, r0, #48	; 0x30
9001b74e:	edd3 7a00 	vldr	s15, [r3]
9001b752:	ee67 7a80 	vmul.f32	s15, s15, s0
9001b756:	ece3 7a01 	vstmia	r3!, {s15}
9001b75a:	4293      	cmp	r3, r2
9001b75c:	d1f7      	bne.n	9001b74e <_ZN8touchgfx9Matrix4x417concatenateZScaleEf+0x8>
9001b75e:	4770      	bx	lr

9001b760 <_ZN8touchgfx8ceil28_4El>:
9001b760:	f110 030f 	adds.w	r3, r0, #15
9001b764:	d401      	bmi.n	9001b76a <_ZN8touchgfx8ceil28_4El+0xa>
9001b766:	1118      	asrs	r0, r3, #4
9001b768:	4770      	bx	lr
9001b76a:	2210      	movs	r2, #16
9001b76c:	f1c0 0001 	rsb	r0, r0, #1
9001b770:	fb93 f3f2 	sdiv	r3, r3, r2
9001b774:	f010 000f 	ands.w	r0, r0, #15
9001b778:	bf18      	it	ne
9001b77a:	2001      	movne	r0, #1
9001b77c:	1a18      	subs	r0, r3, r0
9001b77e:	4770      	bx	lr

9001b780 <_ZN8touchgfx11floorDivModEllRlS0_>:
9001b780:	2900      	cmp	r1, #0
9001b782:	b538      	push	{r3, r4, r5, lr}
9001b784:	dc05      	bgt.n	9001b792 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
9001b786:	4b0f      	ldr	r3, [pc, #60]	; (9001b7c4 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
9001b788:	21fa      	movs	r1, #250	; 0xfa
9001b78a:	4a0f      	ldr	r2, [pc, #60]	; (9001b7c8 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
9001b78c:	480f      	ldr	r0, [pc, #60]	; (9001b7cc <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
9001b78e:	f00d fa51 	bl	90028c34 <__assert_func>
9001b792:	2800      	cmp	r0, #0
9001b794:	db06      	blt.n	9001b7a4 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
9001b796:	fb90 f4f1 	sdiv	r4, r0, r1
9001b79a:	fb01 0114 	mls	r1, r1, r4, r0
9001b79e:	6014      	str	r4, [r2, #0]
9001b7a0:	6019      	str	r1, [r3, #0]
9001b7a2:	bd38      	pop	{r3, r4, r5, pc}
9001b7a4:	4240      	negs	r0, r0
9001b7a6:	fb90 f4f1 	sdiv	r4, r0, r1
9001b7aa:	4265      	negs	r5, r4
9001b7ac:	fb01 0014 	mls	r0, r1, r4, r0
9001b7b0:	6015      	str	r5, [r2, #0]
9001b7b2:	6018      	str	r0, [r3, #0]
9001b7b4:	2800      	cmp	r0, #0
9001b7b6:	d0f4      	beq.n	9001b7a2 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
9001b7b8:	6810      	ldr	r0, [r2, #0]
9001b7ba:	3801      	subs	r0, #1
9001b7bc:	6010      	str	r0, [r2, #0]
9001b7be:	6818      	ldr	r0, [r3, #0]
9001b7c0:	1a09      	subs	r1, r1, r0
9001b7c2:	e7ed      	b.n	9001b7a0 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
9001b7c4:	9003019d 	.word	0x9003019d
9001b7c8:	900301dc 	.word	0x900301dc
9001b7cc:	900301ad 	.word	0x900301ad

9001b7d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
9001b7d0:	b570      	push	{r4, r5, r6, lr}
9001b7d2:	694a      	ldr	r2, [r1, #20]
9001b7d4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
9001b7d6:	684b      	ldr	r3, [r1, #4]
9001b7d8:	1b54      	subs	r4, r2, r5
9001b7da:	6ace      	ldr	r6, [r1, #44]	; 0x2c
9001b7dc:	f000 8106 	beq.w	9001b9ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
9001b7e0:	1b9b      	subs	r3, r3, r6
9001b7e2:	d003      	beq.n	9001b7ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
9001b7e4:	4363      	muls	r3, r4
9001b7e6:	2210      	movs	r2, #16
9001b7e8:	fb93 f3f2 	sdiv	r3, r3, r2
9001b7ec:	680c      	ldr	r4, [r1, #0]
9001b7ee:	698a      	ldr	r2, [r1, #24]
9001b7f0:	1b65      	subs	r5, r4, r5
9001b7f2:	f000 80fd 	beq.w	9001b9f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
9001b7f6:	1b92      	subs	r2, r2, r6
9001b7f8:	d003      	beq.n	9001b802 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
9001b7fa:	436a      	muls	r2, r5
9001b7fc:	2410      	movs	r4, #16
9001b7fe:	fb92 f2f4 	sdiv	r2, r2, r4
9001b802:	1a9b      	subs	r3, r3, r2
9001b804:	ed9f 4a89 	vldr	s8, [pc, #548]	; 9001ba2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
9001b808:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001b80c:	460a      	mov	r2, r1
9001b80e:	ee07 3a90 	vmov	s15, r3
9001b812:	f100 040c 	add.w	r4, r0, #12
9001b816:	4603      	mov	r3, r0
9001b818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9001b81c:	ee67 7a84 	vmul.f32	s15, s15, s8
9001b820:	ee87 3a27 	vdiv.f32	s6, s14, s15
9001b824:	eeb1 6a43 	vneg.f32	s12, s6
9001b828:	edd2 7a02 	vldr	s15, [r2, #8]
9001b82c:	3214      	adds	r2, #20
9001b82e:	eec7 6a27 	vdiv.f32	s13, s14, s15
9001b832:	ece3 6a01 	vstmia	r3!, {s13}
9001b836:	429c      	cmp	r4, r3
9001b838:	ed52 7a02 	vldr	s15, [r2, #-8]
9001b83c:	ee67 7aa6 	vmul.f32	s15, s15, s13
9001b840:	edc3 7a02 	vstr	s15, [r3, #8]
9001b844:	ed52 7a01 	vldr	s15, [r2, #-4]
9001b848:	ee67 7aa6 	vmul.f32	s15, s15, s13
9001b84c:	edc3 7a05 	vstr	s15, [r3, #20]
9001b850:	d1ea      	bne.n	9001b828 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
9001b852:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001b854:	698b      	ldr	r3, [r1, #24]
9001b856:	edd0 4a02 	vldr	s9, [r0, #8]
9001b85a:	1a9b      	subs	r3, r3, r2
9001b85c:	edd0 3a00 	vldr	s7, [r0]
9001b860:	edd0 6a01 	vldr	s13, [r0, #4]
9001b864:	ee07 3a90 	vmov	s15, r3
9001b868:	684b      	ldr	r3, [r1, #4]
9001b86a:	ee76 6ae4 	vsub.f32	s13, s13, s9
9001b86e:	ed90 5a05 	vldr	s10, [r0, #20]
9001b872:	1a9b      	subs	r3, r3, r2
9001b874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9001b878:	ee73 4ae4 	vsub.f32	s9, s7, s9
9001b87c:	ed90 2a03 	vldr	s4, [r0, #12]
9001b880:	ee07 3a10 	vmov	s14, r3
9001b884:	edd0 5a04 	vldr	s11, [r0, #16]
9001b888:	ee67 7a84 	vmul.f32	s15, s15, s8
9001b88c:	ed90 1a07 	vldr	s2, [r0, #28]
9001b890:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001b894:	edd0 2a06 	vldr	s5, [r0, #24]
9001b898:	ee75 5ac5 	vsub.f32	s11, s11, s10
9001b89c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
9001b8a0:	ee27 7a04 	vmul.f32	s14, s14, s8
9001b8a4:	ee32 5a45 	vsub.f32	s10, s4, s10
9001b8a8:	eee6 7a87 	vfma.f32	s15, s13, s14
9001b8ac:	ee67 7a83 	vmul.f32	s15, s15, s6
9001b8b0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
9001b8b4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001b8b6:	694a      	ldr	r2, [r1, #20]
9001b8b8:	1b13      	subs	r3, r2, r4
9001b8ba:	ee07 3a10 	vmov	s14, r3
9001b8be:	680b      	ldr	r3, [r1, #0]
9001b8c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001b8c4:	1b1b      	subs	r3, r3, r4
9001b8c6:	ee27 7a04 	vmul.f32	s14, s14, s8
9001b8ca:	ee64 4ac7 	vnmul.f32	s9, s9, s14
9001b8ce:	ee07 3a10 	vmov	s14, r3
9001b8d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001b8d6:	ee27 7a04 	vmul.f32	s14, s14, s8
9001b8da:	eee6 4a87 	vfma.f32	s9, s13, s14
9001b8de:	ee64 4a86 	vmul.f32	s9, s9, s12
9001b8e2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
9001b8e6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001b8e8:	698b      	ldr	r3, [r1, #24]
9001b8ea:	1a9b      	subs	r3, r3, r2
9001b8ec:	ee06 3a90 	vmov	s13, r3
9001b8f0:	684b      	ldr	r3, [r1, #4]
9001b8f2:	1a9b      	subs	r3, r3, r2
9001b8f4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9001b8f8:	ee07 3a10 	vmov	s14, r3
9001b8fc:	ee66 6a84 	vmul.f32	s13, s13, s8
9001b900:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001b904:	ee65 6a66 	vnmul.f32	s13, s10, s13
9001b908:	ee27 7a04 	vmul.f32	s14, s14, s8
9001b90c:	eee5 6a87 	vfma.f32	s13, s11, s14
9001b910:	ee66 6a83 	vmul.f32	s13, s13, s6
9001b914:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
9001b918:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001b91a:	694a      	ldr	r2, [r1, #20]
9001b91c:	1b13      	subs	r3, r2, r4
9001b91e:	ee07 3a10 	vmov	s14, r3
9001b922:	680b      	ldr	r3, [r1, #0]
9001b924:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001b928:	1b1b      	subs	r3, r3, r4
9001b92a:	ee27 7a04 	vmul.f32	s14, s14, s8
9001b92e:	ee25 5a47 	vnmul.f32	s10, s10, s14
9001b932:	ee07 3a10 	vmov	s14, r3
9001b936:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001b93a:	ee27 7a04 	vmul.f32	s14, s14, s8
9001b93e:	eea5 5a87 	vfma.f32	s10, s11, s14
9001b942:	edd0 5a08 	vldr	s11, [r0, #32]
9001b946:	ee31 1a65 	vsub.f32	s2, s2, s11
9001b94a:	ee72 5ae5 	vsub.f32	s11, s5, s11
9001b94e:	ee25 5a06 	vmul.f32	s10, s10, s12
9001b952:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
9001b956:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001b958:	698b      	ldr	r3, [r1, #24]
9001b95a:	1a9b      	subs	r3, r3, r2
9001b95c:	ee07 3a10 	vmov	s14, r3
9001b960:	684b      	ldr	r3, [r1, #4]
9001b962:	1a9b      	subs	r3, r3, r2
9001b964:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001b968:	ee01 3a90 	vmov	s3, r3
9001b96c:	ee27 7a04 	vmul.f32	s14, s14, s8
9001b970:	eef8 1ae1 	vcvt.f32.s32	s3, s3
9001b974:	ee25 7ac7 	vnmul.f32	s14, s11, s14
9001b978:	ee61 1a84 	vmul.f32	s3, s3, s8
9001b97c:	eea1 7a21 	vfma.f32	s14, s2, s3
9001b980:	ee27 7a03 	vmul.f32	s14, s14, s6
9001b984:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
9001b988:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001b98a:	694a      	ldr	r2, [r1, #20]
9001b98c:	1b13      	subs	r3, r2, r4
9001b98e:	ee03 3a10 	vmov	s6, r3
9001b992:	680b      	ldr	r3, [r1, #0]
9001b994:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
9001b998:	1b1b      	subs	r3, r3, r4
9001b99a:	ee23 3a04 	vmul.f32	s6, s6, s8
9001b99e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
9001b9a2:	ee03 3a10 	vmov	s6, r3
9001b9a6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
9001b9aa:	ee23 4a04 	vmul.f32	s8, s6, s8
9001b9ae:	eee1 5a04 	vfma.f32	s11, s2, s8
9001b9b2:	ee25 6a86 	vmul.f32	s12, s11, s12
9001b9b6:	ee62 5a67 	vnmul.f32	s11, s4, s15
9001b9ba:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
9001b9be:	eee3 5aa6 	vfma.f32	s11, s7, s13
9001b9c2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
9001b9c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001b9ca:	dd13      	ble.n	9001b9f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
9001b9cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
9001b9d0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
9001b9d4:	63c3      	str	r3, [r0, #60]	; 0x3c
9001b9d6:	eee3 7a87 	vfma.f32	s15, s7, s14
9001b9da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
9001b9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001b9e2:	dd15      	ble.n	9001ba10 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
9001b9e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
9001b9e8:	6403      	str	r3, [r0, #64]	; 0x40
9001b9ea:	bd70      	pop	{r4, r5, r6, pc}
9001b9ec:	4623      	mov	r3, r4
9001b9ee:	e6fd      	b.n	9001b7ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
9001b9f0:	462a      	mov	r2, r5
9001b9f2:	e706      	b.n	9001b802 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
9001b9f4:	d502      	bpl.n	9001b9fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
9001b9f6:	f647 73ff 	movw	r3, #32767	; 0x7fff
9001b9fa:	e7e9      	b.n	9001b9d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
9001b9fc:	ee22 2a64 	vnmul.f32	s4, s4, s9
9001ba00:	eea3 2a85 	vfma.f32	s4, s7, s10
9001ba04:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
9001ba08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001ba0c:	dade      	bge.n	9001b9cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
9001ba0e:	e7f2      	b.n	9001b9f6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
9001ba10:	d502      	bpl.n	9001ba18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
9001ba12:	f647 73ff 	movw	r3, #32767	; 0x7fff
9001ba16:	e7e7      	b.n	9001b9e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
9001ba18:	ee62 4ae4 	vnmul.f32	s9, s5, s9
9001ba1c:	eee3 4a86 	vfma.f32	s9, s7, s12
9001ba20:	eef5 4ac0 	vcmpe.f32	s9, #0.0
9001ba24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001ba28:	dadc      	bge.n	9001b9e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
9001ba2a:	e7f2      	b.n	9001ba12 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
9001ba2c:	3d800000 	.word	0x3d800000

9001ba30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
9001ba30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ba34:	f04f 0814 	mov.w	r8, #20
9001ba38:	4604      	mov	r4, r0
9001ba3a:	4617      	mov	r7, r2
9001ba3c:	460d      	mov	r5, r1
9001ba3e:	fb08 f903 	mul.w	r9, r8, r3
9001ba42:	461e      	mov	r6, r3
9001ba44:	eb02 0a09 	add.w	sl, r2, r9
9001ba48:	f8da 0004 	ldr.w	r0, [sl, #4]
9001ba4c:	f7ff fe88 	bl	9001b760 <_ZN8touchgfx8ceil28_4El>
9001ba50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001ba52:	6160      	str	r0, [r4, #20]
9001ba54:	fb08 f803 	mul.w	r8, r8, r3
9001ba58:	9001      	str	r0, [sp, #4]
9001ba5a:	eb07 0b08 	add.w	fp, r7, r8
9001ba5e:	f8db 0004 	ldr.w	r0, [fp, #4]
9001ba62:	f7ff fe7d 	bl	9001b760 <_ZN8touchgfx8ceil28_4El>
9001ba66:	9a01      	ldr	r2, [sp, #4]
9001ba68:	1a80      	subs	r0, r0, r2
9001ba6a:	61a0      	str	r0, [r4, #24]
9001ba6c:	2800      	cmp	r0, #0
9001ba6e:	f000 8088 	beq.w	9001bb82 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
9001ba72:	f857 3009 	ldr.w	r3, [r7, r9]
9001ba76:	f857 c008 	ldr.w	ip, [r7, r8]
9001ba7a:	f8db 0004 	ldr.w	r0, [fp, #4]
9001ba7e:	ebac 0c03 	sub.w	ip, ip, r3
9001ba82:	f8da 1004 	ldr.w	r1, [sl, #4]
9001ba86:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
9001ba8a:	1a40      	subs	r0, r0, r1
9001ba8c:	fb0b f202 	mul.w	r2, fp, r2
9001ba90:	ea4f 1800 	mov.w	r8, r0, lsl #4
9001ba94:	fb0c 2211 	mls	r2, ip, r1, r2
9001ba98:	4641      	mov	r1, r8
9001ba9a:	fb00 2003 	mla	r0, r0, r3, r2
9001ba9e:	f104 0310 	add.w	r3, r4, #16
9001baa2:	4622      	mov	r2, r4
9001baa4:	3801      	subs	r0, #1
9001baa6:	4440      	add	r0, r8
9001baa8:	f7ff fe6a 	bl	9001b780 <_ZN8touchgfx11floorDivModEllRlS0_>
9001baac:	f104 0308 	add.w	r3, r4, #8
9001bab0:	1d22      	adds	r2, r4, #4
9001bab2:	4641      	mov	r1, r8
9001bab4:	4658      	mov	r0, fp
9001bab6:	f7ff fe63 	bl	9001b780 <_ZN8touchgfx11floorDivModEllRlS0_>
9001baba:	f8c4 800c 	str.w	r8, [r4, #12]
9001babe:	6962      	ldr	r2, [r4, #20]
9001bac0:	f8da 3004 	ldr.w	r3, [sl, #4]
9001bac4:	eddf 6a31 	vldr	s13, [pc, #196]	; 9001bb8c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
9001bac8:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
9001bacc:	6822      	ldr	r2, [r4, #0]
9001bace:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
9001bad2:	ee07 3a10 	vmov	s14, r3
9001bad6:	f857 3009 	ldr.w	r3, [r7, r9]
9001bada:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
9001bade:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001bae2:	ee07 3a90 	vmov	s15, r3
9001bae6:	eb05 0386 	add.w	r3, r5, r6, lsl #2
9001baea:	ee27 7a26 	vmul.f32	s14, s14, s13
9001baee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9001baf2:	ee67 7aa6 	vmul.f32	s15, s15, s13
9001baf6:	edd3 6a00 	vldr	s13, [r3]
9001bafa:	eee6 6a07 	vfma.f32	s13, s12, s14
9001bafe:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
9001bb02:	eee6 6a27 	vfma.f32	s13, s12, s15
9001bb06:	edc4 6a07 	vstr	s13, [r4, #28]
9001bb0a:	edd4 6a01 	vldr	s13, [r4, #4]
9001bb0e:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
9001bb12:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9001bb16:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
9001bb1a:	eea6 6aa5 	vfma.f32	s12, s13, s11
9001bb1e:	ed84 6a08 	vstr	s12, [r4, #32]
9001bb22:	6a6a      	ldr	r2, [r5, #36]	; 0x24
9001bb24:	6262      	str	r2, [r4, #36]	; 0x24
9001bb26:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
9001bb2a:	ed93 6a03 	vldr	s12, [r3, #12]
9001bb2e:	eea5 6a87 	vfma.f32	s12, s11, s14
9001bb32:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
9001bb36:	eea5 6aa7 	vfma.f32	s12, s11, s15
9001bb3a:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
9001bb3e:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
9001bb42:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
9001bb46:	eea6 6aa5 	vfma.f32	s12, s13, s11
9001bb4a:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
9001bb4e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
9001bb50:	6322      	str	r2, [r4, #48]	; 0x30
9001bb52:	ed93 6a06 	vldr	s12, [r3, #24]
9001bb56:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
9001bb5a:	eea5 6a87 	vfma.f32	s12, s11, s14
9001bb5e:	eeb0 7a46 	vmov.f32	s14, s12
9001bb62:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
9001bb66:	eea6 7a27 	vfma.f32	s14, s12, s15
9001bb6a:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
9001bb6e:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
9001bb72:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
9001bb76:	eee6 7a87 	vfma.f32	s15, s13, s14
9001bb7a:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
9001bb7e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
9001bb80:	63e3      	str	r3, [r4, #60]	; 0x3c
9001bb82:	4620      	mov	r0, r4
9001bb84:	b003      	add	sp, #12
9001bb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001bb8a:	bf00      	nop
9001bb8c:	3d800000 	.word	0x3d800000

9001bb90 <_ZN8touchgfx7Unicode6strlenEPKt>:
9001bb90:	4602      	mov	r2, r0
9001bb92:	b148      	cbz	r0, 9001bba8 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
9001bb94:	2300      	movs	r3, #0
9001bb96:	b298      	uxth	r0, r3
9001bb98:	3301      	adds	r3, #1
9001bb9a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
9001bb9e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
9001bba2:	2900      	cmp	r1, #0
9001bba4:	d1f7      	bne.n	9001bb96 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
9001bba6:	4770      	bx	lr
9001bba8:	4770      	bx	lr

9001bbaa <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
9001bbaa:	b530      	push	{r4, r5, lr}
9001bbac:	4604      	mov	r4, r0
9001bbae:	b159      	cbz	r1, 9001bbc8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
9001bbb0:	b148      	cbz	r0, 9001bbc6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
9001bbb2:	2300      	movs	r3, #0
9001bbb4:	b298      	uxth	r0, r3
9001bbb6:	4282      	cmp	r2, r0
9001bbb8:	d905      	bls.n	9001bbc6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
9001bbba:	5ccd      	ldrb	r5, [r1, r3]
9001bbbc:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
9001bbc0:	3301      	adds	r3, #1
9001bbc2:	2d00      	cmp	r5, #0
9001bbc4:	d1f6      	bne.n	9001bbb4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
9001bbc6:	bd30      	pop	{r4, r5, pc}
9001bbc8:	4608      	mov	r0, r1
9001bbca:	e7fc      	b.n	9001bbc6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

9001bbcc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
9001bbcc:	b5f0      	push	{r4, r5, r6, r7, lr}
9001bbce:	468c      	mov	ip, r1
9001bbd0:	b08b      	sub	sp, #44	; 0x2c
9001bbd2:	2100      	movs	r1, #0
9001bbd4:	ae01      	add	r6, sp, #4
9001bbd6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
9001bbda:	211f      	movs	r1, #31
9001bbdc:	fbb0 f7f3 	udiv	r7, r0, r3
9001bbe0:	fb03 0517 	mls	r5, r3, r7, r0
9001bbe4:	4638      	mov	r0, r7
9001bbe6:	b2ec      	uxtb	r4, r5
9001bbe8:	2d09      	cmp	r5, #9
9001bbea:	bfd4      	ite	le
9001bbec:	3430      	addle	r4, #48	; 0x30
9001bbee:	3457      	addgt	r4, #87	; 0x57
9001bbf0:	b2e4      	uxtb	r4, r4
9001bbf2:	558c      	strb	r4, [r1, r6]
9001bbf4:	1e4c      	subs	r4, r1, #1
9001bbf6:	b92f      	cbnz	r7, 9001bc04 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
9001bbf8:	4431      	add	r1, r6
9001bbfa:	4660      	mov	r0, ip
9001bbfc:	f7ff ffd5 	bl	9001bbaa <_ZN8touchgfx7Unicode7strncpyEPtPKct>
9001bc00:	b00b      	add	sp, #44	; 0x2c
9001bc02:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001bc04:	4621      	mov	r1, r4
9001bc06:	e7e9      	b.n	9001bbdc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

9001bc08 <_ZN8touchgfx7Unicode4itoaElPtti>:
9001bc08:	b5f0      	push	{r4, r5, r6, r7, lr}
9001bc0a:	4607      	mov	r7, r0
9001bc0c:	b08b      	sub	sp, #44	; 0x2c
9001bc0e:	4608      	mov	r0, r1
9001bc10:	b341      	cbz	r1, 9001bc64 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
9001bc12:	1e99      	subs	r1, r3, #2
9001bc14:	2922      	cmp	r1, #34	; 0x22
9001bc16:	d825      	bhi.n	9001bc64 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
9001bc18:	2100      	movs	r1, #0
9001bc1a:	463c      	mov	r4, r7
9001bc1c:	261f      	movs	r6, #31
9001bc1e:	f10d 0c04 	add.w	ip, sp, #4
9001bc22:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
9001bc26:	1e71      	subs	r1, r6, #1
9001bc28:	fb94 fef3 	sdiv	lr, r4, r3
9001bc2c:	fb03 441e 	mls	r4, r3, lr, r4
9001bc30:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
9001bc34:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
9001bc38:	b2ec      	uxtb	r4, r5
9001bc3a:	2d09      	cmp	r5, #9
9001bc3c:	bfd4      	ite	le
9001bc3e:	3430      	addle	r4, #48	; 0x30
9001bc40:	3457      	addgt	r4, #87	; 0x57
9001bc42:	b2e4      	uxtb	r4, r4
9001bc44:	f80c 4006 	strb.w	r4, [ip, r6]
9001bc48:	4674      	mov	r4, lr
9001bc4a:	b96c      	cbnz	r4, 9001bc68 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
9001bc4c:	2f00      	cmp	r7, #0
9001bc4e:	da05      	bge.n	9001bc5c <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
9001bc50:	ab0a      	add	r3, sp, #40	; 0x28
9001bc52:	4419      	add	r1, r3
9001bc54:	232d      	movs	r3, #45	; 0x2d
9001bc56:	f801 3c24 	strb.w	r3, [r1, #-36]
9001bc5a:	1eb1      	subs	r1, r6, #2
9001bc5c:	3101      	adds	r1, #1
9001bc5e:	4461      	add	r1, ip
9001bc60:	f7ff ffa3 	bl	9001bbaa <_ZN8touchgfx7Unicode7strncpyEPtPKct>
9001bc64:	b00b      	add	sp, #44	; 0x2c
9001bc66:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001bc68:	460e      	mov	r6, r1
9001bc6a:	e7dc      	b.n	9001bc26 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

9001bc6c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
9001bc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001bc70:	b085      	sub	sp, #20
9001bc72:	4691      	mov	r9, r2
9001bc74:	6802      	ldr	r2, [r0, #0]
9001bc76:	4688      	mov	r8, r1
9001bc78:	461c      	mov	r4, r3
9001bc7a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
9001bc7e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
9001bc82:	4683      	mov	fp, r0
9001bc84:	4610      	mov	r0, r2
9001bc86:	9103      	str	r1, [sp, #12]
9001bc88:	9302      	str	r3, [sp, #8]
9001bc8a:	9201      	str	r2, [sp, #4]
9001bc8c:	f7ff ff80 	bl	9001bb90 <_ZN8touchgfx7Unicode6strlenEPKt>
9001bc90:	f1b8 0f00 	cmp.w	r8, #0
9001bc94:	bf0c      	ite	eq
9001bc96:	4684      	moveq	ip, r0
9001bc98:	f100 0c01 	addne.w	ip, r0, #1
9001bc9c:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
9001bca0:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
9001bca4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
9001bca6:	fa1f fc8c 	uxth.w	ip, ip
9001bcaa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001bcac:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
9001bcb0:	9903      	ldr	r1, [sp, #12]
9001bcb2:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
9001bcb6:	d041      	beq.n	9001bd3c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
9001bcb8:	d834      	bhi.n	9001bd24 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
9001bcba:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
9001bcbe:	d059      	beq.n	9001bd74 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
9001bcc0:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
9001bcc4:	d03a      	beq.n	9001bd3c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
9001bcc6:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
9001bcca:	d034      	beq.n	9001bd36 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
9001bccc:	2400      	movs	r4, #0
9001bcce:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
9001bcd2:	3a01      	subs	r2, #1
9001bcd4:	b169      	cbz	r1, 9001bcf2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001bcd6:	9911      	ldr	r1, [sp, #68]	; 0x44
9001bcd8:	458c      	cmp	ip, r1
9001bcda:	da09      	bge.n	9001bcf0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
9001bcdc:	eba1 010c 	sub.w	r1, r1, ip
9001bce0:	b289      	uxth	r1, r1
9001bce2:	b933      	cbnz	r3, 9001bcf2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001bce4:	2e00      	cmp	r6, #0
9001bce6:	d051      	beq.n	9001bd8c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
9001bce8:	2800      	cmp	r0, #0
9001bcea:	d04f      	beq.n	9001bd8c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
9001bcec:	440c      	add	r4, r1
9001bcee:	b2a4      	uxth	r4, r4
9001bcf0:	2100      	movs	r1, #0
9001bcf2:	682b      	ldr	r3, [r5, #0]
9001bcf4:	4293      	cmp	r3, r2
9001bcf6:	da07      	bge.n	9001bd08 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
9001bcf8:	f1b8 0f00 	cmp.w	r8, #0
9001bcfc:	d004      	beq.n	9001bd08 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
9001bcfe:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
9001bd02:	682b      	ldr	r3, [r5, #0]
9001bd04:	3301      	adds	r3, #1
9001bd06:	602b      	str	r3, [r5, #0]
9001bd08:	2730      	movs	r7, #48	; 0x30
9001bd0a:	2c00      	cmp	r4, #0
9001bd0c:	d04e      	beq.n	9001bdac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
9001bd0e:	682e      	ldr	r6, [r5, #0]
9001bd10:	3c01      	subs	r4, #1
9001bd12:	42b2      	cmp	r2, r6
9001bd14:	b2a4      	uxth	r4, r4
9001bd16:	dd49      	ble.n	9001bdac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
9001bd18:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
9001bd1c:	682b      	ldr	r3, [r5, #0]
9001bd1e:	3301      	adds	r3, #1
9001bd20:	602b      	str	r3, [r5, #0]
9001bd22:	e7f2      	b.n	9001bd0a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
9001bd24:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
9001bd28:	d01d      	beq.n	9001bd66 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
9001bd2a:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
9001bd2e:	d002      	beq.n	9001bd36 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
9001bd30:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
9001bd34:	e7c9      	b.n	9001bcca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
9001bd36:	4684      	mov	ip, r0
9001bd38:	f04f 0800 	mov.w	r8, #0
9001bd3c:	2c00      	cmp	r4, #0
9001bd3e:	d0c6      	beq.n	9001bcce <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001bd40:	b947      	cbnz	r7, 9001bd54 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
9001bd42:	2801      	cmp	r0, #1
9001bd44:	d106      	bne.n	9001bd54 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
9001bd46:	8814      	ldrh	r4, [r2, #0]
9001bd48:	2c30      	cmp	r4, #48	; 0x30
9001bd4a:	bf02      	ittt	eq
9001bd4c:	3202      	addeq	r2, #2
9001bd4e:	4638      	moveq	r0, r7
9001bd50:	f8cb 2000 	streq.w	r2, [fp]
9001bd54:	45bc      	cmp	ip, r7
9001bd56:	da14      	bge.n	9001bd82 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
9001bd58:	b2bf      	uxth	r7, r7
9001bd5a:	eba7 040c 	sub.w	r4, r7, ip
9001bd5e:	46bc      	mov	ip, r7
9001bd60:	b2a4      	uxth	r4, r4
9001bd62:	2600      	movs	r6, #0
9001bd64:	e7b3      	b.n	9001bcce <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001bd66:	4684      	mov	ip, r0
9001bd68:	b16c      	cbz	r4, 9001bd86 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
9001bd6a:	42b8      	cmp	r0, r7
9001bd6c:	dd00      	ble.n	9001bd70 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
9001bd6e:	b2b8      	uxth	r0, r7
9001bd70:	2400      	movs	r4, #0
9001bd72:	e003      	b.n	9001bd7c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
9001bd74:	f04f 0c01 	mov.w	ip, #1
9001bd78:	2400      	movs	r4, #0
9001bd7a:	4660      	mov	r0, ip
9001bd7c:	4626      	mov	r6, r4
9001bd7e:	46a0      	mov	r8, r4
9001bd80:	e7a5      	b.n	9001bcce <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001bd82:	2400      	movs	r4, #0
9001bd84:	e7ed      	b.n	9001bd62 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
9001bd86:	4626      	mov	r6, r4
9001bd88:	46a0      	mov	r8, r4
9001bd8a:	e7a0      	b.n	9001bcce <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001bd8c:	2900      	cmp	r1, #0
9001bd8e:	d0b0      	beq.n	9001bcf2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001bd90:	2720      	movs	r7, #32
9001bd92:	682e      	ldr	r6, [r5, #0]
9001bd94:	2900      	cmp	r1, #0
9001bd96:	d0ac      	beq.n	9001bcf2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001bd98:	3901      	subs	r1, #1
9001bd9a:	4296      	cmp	r6, r2
9001bd9c:	b289      	uxth	r1, r1
9001bd9e:	daa7      	bge.n	9001bcf0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
9001bda0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
9001bda4:	682b      	ldr	r3, [r5, #0]
9001bda6:	3301      	adds	r3, #1
9001bda8:	602b      	str	r3, [r5, #0]
9001bdaa:	e7f2      	b.n	9001bd92 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
9001bdac:	b188      	cbz	r0, 9001bdd2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
9001bdae:	682b      	ldr	r3, [r5, #0]
9001bdb0:	3801      	subs	r0, #1
9001bdb2:	429a      	cmp	r2, r3
9001bdb4:	b280      	uxth	r0, r0
9001bdb6:	dd0c      	ble.n	9001bdd2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
9001bdb8:	f8db 3000 	ldr.w	r3, [fp]
9001bdbc:	1c9c      	adds	r4, r3, #2
9001bdbe:	f8cb 4000 	str.w	r4, [fp]
9001bdc2:	881c      	ldrh	r4, [r3, #0]
9001bdc4:	682b      	ldr	r3, [r5, #0]
9001bdc6:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
9001bdca:	682b      	ldr	r3, [r5, #0]
9001bdcc:	3301      	adds	r3, #1
9001bdce:	602b      	str	r3, [r5, #0]
9001bdd0:	e7ec      	b.n	9001bdac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
9001bdd2:	2620      	movs	r6, #32
9001bdd4:	b151      	cbz	r1, 9001bdec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
9001bdd6:	6828      	ldr	r0, [r5, #0]
9001bdd8:	3901      	subs	r1, #1
9001bdda:	4282      	cmp	r2, r0
9001bddc:	b289      	uxth	r1, r1
9001bdde:	dd05      	ble.n	9001bdec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
9001bde0:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
9001bde4:	682b      	ldr	r3, [r5, #0]
9001bde6:	3301      	adds	r3, #1
9001bde8:	602b      	str	r3, [r5, #0]
9001bdea:	e7f3      	b.n	9001bdd4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
9001bdec:	b005      	add	sp, #20
9001bdee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001bdf2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
9001bdf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001bdf6:	2400      	movs	r4, #0
9001bdf8:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
9001bdfc:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
9001be00:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
9001be04:	8014      	strh	r4, [r2, #0]
9001be06:	701c      	strb	r4, [r3, #0]
9001be08:	f888 4000 	strb.w	r4, [r8]
9001be0c:	f88c 4000 	strb.w	r4, [ip]
9001be10:	f88e 4000 	strb.w	r4, [lr]
9001be14:	703c      	strb	r4, [r7, #0]
9001be16:	6804      	ldr	r4, [r0, #0]
9001be18:	b1a4      	cbz	r4, 9001be44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
9001be1a:	8824      	ldrh	r4, [r4, #0]
9001be1c:	f04f 0901 	mov.w	r9, #1
9001be20:	b314      	cbz	r4, 9001be68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
9001be22:	2c2b      	cmp	r4, #43	; 0x2b
9001be24:	d001      	beq.n	9001be2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
9001be26:	2c20      	cmp	r4, #32
9001be28:	d110      	bne.n	9001be4c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
9001be2a:	8014      	strh	r4, [r2, #0]
9001be2c:	6804      	ldr	r4, [r0, #0]
9001be2e:	b10c      	cbz	r4, 9001be34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
9001be30:	3402      	adds	r4, #2
9001be32:	6004      	str	r4, [r0, #0]
9001be34:	680c      	ldr	r4, [r1, #0]
9001be36:	b10c      	cbz	r4, 9001be3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
9001be38:	3401      	adds	r4, #1
9001be3a:	600c      	str	r4, [r1, #0]
9001be3c:	6804      	ldr	r4, [r0, #0]
9001be3e:	b17c      	cbz	r4, 9001be60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
9001be40:	8824      	ldrh	r4, [r4, #0]
9001be42:	e7ed      	b.n	9001be20 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
9001be44:	680c      	ldr	r4, [r1, #0]
9001be46:	b17c      	cbz	r4, 9001be68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
9001be48:	7824      	ldrb	r4, [r4, #0]
9001be4a:	e7e7      	b.n	9001be1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
9001be4c:	2c2d      	cmp	r4, #45	; 0x2d
9001be4e:	d102      	bne.n	9001be56 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
9001be50:	f883 9000 	strb.w	r9, [r3]
9001be54:	e7ea      	b.n	9001be2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
9001be56:	2c23      	cmp	r4, #35	; 0x23
9001be58:	d107      	bne.n	9001be6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
9001be5a:	f888 9000 	strb.w	r9, [r8]
9001be5e:	e7e5      	b.n	9001be2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
9001be60:	680c      	ldr	r4, [r1, #0]
9001be62:	b10c      	cbz	r4, 9001be68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
9001be64:	7824      	ldrb	r4, [r4, #0]
9001be66:	e7db      	b.n	9001be20 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
9001be68:	2400      	movs	r4, #0
9001be6a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
9001be6e:	2b09      	cmp	r3, #9
9001be70:	d901      	bls.n	9001be76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
9001be72:	2c2a      	cmp	r4, #42	; 0x2a
9001be74:	d122      	bne.n	9001bebc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
9001be76:	2301      	movs	r3, #1
9001be78:	2c30      	cmp	r4, #48	; 0x30
9001be7a:	f88e 3000 	strb.w	r3, [lr]
9001be7e:	d10d      	bne.n	9001be9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
9001be80:	f88c 3000 	strb.w	r3, [ip]
9001be84:	6803      	ldr	r3, [r0, #0]
9001be86:	b10b      	cbz	r3, 9001be8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
9001be88:	3302      	adds	r3, #2
9001be8a:	6003      	str	r3, [r0, #0]
9001be8c:	680b      	ldr	r3, [r1, #0]
9001be8e:	b10b      	cbz	r3, 9001be94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
9001be90:	3301      	adds	r3, #1
9001be92:	600b      	str	r3, [r1, #0]
9001be94:	6803      	ldr	r3, [r0, #0]
9001be96:	2b00      	cmp	r3, #0
9001be98:	d02f      	beq.n	9001befa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
9001be9a:	881c      	ldrh	r4, [r3, #0]
9001be9c:	2c2a      	cmp	r4, #42	; 0x2a
9001be9e:	d135      	bne.n	9001bf0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
9001bea0:	f04f 33ff 	mov.w	r3, #4294967295
9001bea4:	6033      	str	r3, [r6, #0]
9001bea6:	6803      	ldr	r3, [r0, #0]
9001bea8:	b10b      	cbz	r3, 9001beae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
9001beaa:	3302      	adds	r3, #2
9001beac:	6003      	str	r3, [r0, #0]
9001beae:	680b      	ldr	r3, [r1, #0]
9001beb0:	b10b      	cbz	r3, 9001beb6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
9001beb2:	3301      	adds	r3, #1
9001beb4:	600b      	str	r3, [r1, #0]
9001beb6:	6803      	ldr	r3, [r0, #0]
9001beb8:	b31b      	cbz	r3, 9001bf02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
9001beba:	881c      	ldrh	r4, [r3, #0]
9001bebc:	2c2e      	cmp	r4, #46	; 0x2e
9001bebe:	d11a      	bne.n	9001bef6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
9001bec0:	2301      	movs	r3, #1
9001bec2:	703b      	strb	r3, [r7, #0]
9001bec4:	6803      	ldr	r3, [r0, #0]
9001bec6:	b10b      	cbz	r3, 9001becc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
9001bec8:	3302      	adds	r3, #2
9001beca:	6003      	str	r3, [r0, #0]
9001becc:	680b      	ldr	r3, [r1, #0]
9001bece:	b10b      	cbz	r3, 9001bed4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
9001bed0:	3301      	adds	r3, #1
9001bed2:	600b      	str	r3, [r1, #0]
9001bed4:	6803      	ldr	r3, [r0, #0]
9001bed6:	2b00      	cmp	r3, #0
9001bed8:	d036      	beq.n	9001bf48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
9001beda:	881b      	ldrh	r3, [r3, #0]
9001bedc:	2b2a      	cmp	r3, #42	; 0x2a
9001bede:	d137      	bne.n	9001bf50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
9001bee0:	f04f 33ff 	mov.w	r3, #4294967295
9001bee4:	602b      	str	r3, [r5, #0]
9001bee6:	6803      	ldr	r3, [r0, #0]
9001bee8:	b10b      	cbz	r3, 9001beee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
9001beea:	3302      	adds	r3, #2
9001beec:	6003      	str	r3, [r0, #0]
9001beee:	680b      	ldr	r3, [r1, #0]
9001bef0:	b10b      	cbz	r3, 9001bef6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
9001bef2:	3301      	adds	r3, #1
9001bef4:	600b      	str	r3, [r1, #0]
9001bef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001befa:	680c      	ldr	r4, [r1, #0]
9001befc:	b134      	cbz	r4, 9001bf0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
9001befe:	7824      	ldrb	r4, [r4, #0]
9001bf00:	e7cc      	b.n	9001be9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
9001bf02:	680b      	ldr	r3, [r1, #0]
9001bf04:	2b00      	cmp	r3, #0
9001bf06:	d0f6      	beq.n	9001bef6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
9001bf08:	781c      	ldrb	r4, [r3, #0]
9001bf0a:	e7d7      	b.n	9001bebc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
9001bf0c:	2300      	movs	r3, #0
9001bf0e:	220a      	movs	r2, #10
9001bf10:	6033      	str	r3, [r6, #0]
9001bf12:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
9001bf16:	fa1f f38c 	uxth.w	r3, ip
9001bf1a:	2b09      	cmp	r3, #9
9001bf1c:	d8ce      	bhi.n	9001bebc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
9001bf1e:	6833      	ldr	r3, [r6, #0]
9001bf20:	fb02 c303 	mla	r3, r2, r3, ip
9001bf24:	6033      	str	r3, [r6, #0]
9001bf26:	6803      	ldr	r3, [r0, #0]
9001bf28:	b10b      	cbz	r3, 9001bf2e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
9001bf2a:	3302      	adds	r3, #2
9001bf2c:	6003      	str	r3, [r0, #0]
9001bf2e:	680b      	ldr	r3, [r1, #0]
9001bf30:	b10b      	cbz	r3, 9001bf36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
9001bf32:	3301      	adds	r3, #1
9001bf34:	600b      	str	r3, [r1, #0]
9001bf36:	6803      	ldr	r3, [r0, #0]
9001bf38:	b10b      	cbz	r3, 9001bf3e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
9001bf3a:	881c      	ldrh	r4, [r3, #0]
9001bf3c:	e7e9      	b.n	9001bf12 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
9001bf3e:	680c      	ldr	r4, [r1, #0]
9001bf40:	2c00      	cmp	r4, #0
9001bf42:	d0e6      	beq.n	9001bf12 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
9001bf44:	7824      	ldrb	r4, [r4, #0]
9001bf46:	e7e4      	b.n	9001bf12 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
9001bf48:	680b      	ldr	r3, [r1, #0]
9001bf4a:	b10b      	cbz	r3, 9001bf50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
9001bf4c:	781b      	ldrb	r3, [r3, #0]
9001bf4e:	e7c5      	b.n	9001bedc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
9001bf50:	2200      	movs	r2, #0
9001bf52:	240a      	movs	r4, #10
9001bf54:	602a      	str	r2, [r5, #0]
9001bf56:	3b30      	subs	r3, #48	; 0x30
9001bf58:	682a      	ldr	r2, [r5, #0]
9001bf5a:	b29e      	uxth	r6, r3
9001bf5c:	2e09      	cmp	r6, #9
9001bf5e:	d813      	bhi.n	9001bf88 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
9001bf60:	fb04 3302 	mla	r3, r4, r2, r3
9001bf64:	602b      	str	r3, [r5, #0]
9001bf66:	6803      	ldr	r3, [r0, #0]
9001bf68:	b10b      	cbz	r3, 9001bf6e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
9001bf6a:	3302      	adds	r3, #2
9001bf6c:	6003      	str	r3, [r0, #0]
9001bf6e:	680b      	ldr	r3, [r1, #0]
9001bf70:	b10b      	cbz	r3, 9001bf76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
9001bf72:	3301      	adds	r3, #1
9001bf74:	600b      	str	r3, [r1, #0]
9001bf76:	6803      	ldr	r3, [r0, #0]
9001bf78:	b10b      	cbz	r3, 9001bf7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
9001bf7a:	881b      	ldrh	r3, [r3, #0]
9001bf7c:	e7eb      	b.n	9001bf56 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
9001bf7e:	680b      	ldr	r3, [r1, #0]
9001bf80:	2b00      	cmp	r3, #0
9001bf82:	d0e8      	beq.n	9001bf56 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
9001bf84:	781b      	ldrb	r3, [r3, #0]
9001bf86:	e7e6      	b.n	9001bf56 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
9001bf88:	2a06      	cmp	r2, #6
9001bf8a:	bfa8      	it	ge
9001bf8c:	2206      	movge	r2, #6
9001bf8e:	602a      	str	r2, [r5, #0]
9001bf90:	e7b1      	b.n	9001bef6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

9001bf92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
9001bf92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001bf96:	b0a3      	sub	sp, #140	; 0x8c
9001bf98:	2600      	movs	r6, #0
9001bf9a:	4607      	mov	r7, r0
9001bf9c:	4688      	mov	r8, r1
9001bf9e:	f10d 0944 	add.w	r9, sp, #68	; 0x44
9001bfa2:	4631      	mov	r1, r6
9001bfa4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
9001bfa6:	4648      	mov	r0, r9
9001bfa8:	960d      	str	r6, [sp, #52]	; 0x34
9001bfaa:	e9cd 3208 	strd	r3, r2, [sp, #32]
9001bfae:	2242      	movs	r2, #66	; 0x42
9001bfb0:	f7fe f8ec 	bl	9001a18c <_ZN8touchgfx6memsetEPvhm>
9001bfb4:	b15f      	cbz	r7, 9001bfce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
9001bfb6:	f108 3aff 	add.w	sl, r8, #4294967295
9001bfba:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001bfbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001bfbe:	b152      	cbz	r2, 9001bfd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
9001bfc0:	8812      	ldrh	r2, [r2, #0]
9001bfc2:	b10a      	cbz	r2, 9001bfc8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
9001bfc4:	459a      	cmp	sl, r3
9001bfc6:	dc2e      	bgt.n	9001c026 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
9001bfc8:	2200      	movs	r2, #0
9001bfca:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
9001bfce:	4638      	mov	r0, r7
9001bfd0:	b023      	add	sp, #140	; 0x8c
9001bfd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001bfd6:	9a08      	ldr	r2, [sp, #32]
9001bfd8:	2a00      	cmp	r2, #0
9001bfda:	d0f5      	beq.n	9001bfc8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
9001bfdc:	7812      	ldrb	r2, [r2, #0]
9001bfde:	e7f0      	b.n	9001bfc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
9001bfe0:	2d00      	cmp	r5, #0
9001bfe2:	d0ea      	beq.n	9001bfba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001bfe4:	782a      	ldrb	r2, [r5, #0]
9001bfe6:	b142      	cbz	r2, 9001bffa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
9001bfe8:	2a25      	cmp	r2, #37	; 0x25
9001bfea:	d001      	beq.n	9001bff0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
9001bfec:	459a      	cmp	sl, r3
9001bfee:	dc08      	bgt.n	9001c002 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
9001bff0:	f1bb 0f00 	cmp.w	fp, #0
9001bff4:	d121      	bne.n	9001c03a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
9001bff6:	2d00      	cmp	r5, #0
9001bff8:	d0df      	beq.n	9001bfba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001bffa:	782a      	ldrb	r2, [r5, #0]
9001bffc:	f04f 0b00 	mov.w	fp, #0
9001c000:	e01d      	b.n	9001c03e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
9001c002:	f1bb 0f00 	cmp.w	fp, #0
9001c006:	d077      	beq.n	9001c0f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
9001c008:	f8bb 2000 	ldrh.w	r2, [fp]
9001c00c:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
9001c010:	f1bb 0f00 	cmp.w	fp, #0
9001c014:	d002      	beq.n	9001c01c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
9001c016:	f10b 0202 	add.w	r2, fp, #2
9001c01a:	9209      	str	r2, [sp, #36]	; 0x24
9001c01c:	b10d      	cbz	r5, 9001c022 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
9001c01e:	3501      	adds	r5, #1
9001c020:	9508      	str	r5, [sp, #32]
9001c022:	3301      	adds	r3, #1
9001c024:	930d      	str	r3, [sp, #52]	; 0x34
9001c026:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001c028:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
9001c02c:	f1bb 0f00 	cmp.w	fp, #0
9001c030:	d0d6      	beq.n	9001bfe0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
9001c032:	f8bb 2000 	ldrh.w	r2, [fp]
9001c036:	2a00      	cmp	r2, #0
9001c038:	d1d6      	bne.n	9001bfe8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
9001c03a:	f8bb 2000 	ldrh.w	r2, [fp]
9001c03e:	2a00      	cmp	r2, #0
9001c040:	d0bb      	beq.n	9001bfba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001c042:	459a      	cmp	sl, r3
9001c044:	ddb9      	ble.n	9001bfba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001c046:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
9001c04a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
9001c04e:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
9001c052:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
9001c056:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
9001c05a:	960e      	str	r6, [sp, #56]	; 0x38
9001c05c:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
9001c060:	960f      	str	r6, [sp, #60]	; 0x3c
9001c062:	f1bb 0f00 	cmp.w	fp, #0
9001c066:	d002      	beq.n	9001c06e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
9001c068:	f10b 0302 	add.w	r3, fp, #2
9001c06c:	9309      	str	r3, [sp, #36]	; 0x24
9001c06e:	b10d      	cbz	r5, 9001c074 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
9001c070:	1c6b      	adds	r3, r5, #1
9001c072:	9308      	str	r3, [sp, #32]
9001c074:	ab0f      	add	r3, sp, #60	; 0x3c
9001c076:	f10d 0232 	add.w	r2, sp, #50	; 0x32
9001c07a:	a908      	add	r1, sp, #32
9001c07c:	a809      	add	r0, sp, #36	; 0x24
9001c07e:	9305      	str	r3, [sp, #20]
9001c080:	f10d 0331 	add.w	r3, sp, #49	; 0x31
9001c084:	9304      	str	r3, [sp, #16]
9001c086:	ab0e      	add	r3, sp, #56	; 0x38
9001c088:	9303      	str	r3, [sp, #12]
9001c08a:	ab0c      	add	r3, sp, #48	; 0x30
9001c08c:	9302      	str	r3, [sp, #8]
9001c08e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
9001c092:	9301      	str	r3, [sp, #4]
9001c094:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
9001c098:	9300      	str	r3, [sp, #0]
9001c09a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
9001c09e:	f7ff fea8 	bl	9001bdf2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
9001c0a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c0a4:	2b00      	cmp	r3, #0
9001c0a6:	bfbf      	itttt	lt
9001c0a8:	6823      	ldrlt	r3, [r4, #0]
9001c0aa:	3404      	addlt	r4, #4
9001c0ac:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
9001c0b0:	930e      	strlt	r3, [sp, #56]	; 0x38
9001c0b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001c0b4:	2b00      	cmp	r3, #0
9001c0b6:	bfbe      	ittt	lt
9001c0b8:	6823      	ldrlt	r3, [r4, #0]
9001c0ba:	3404      	addlt	r4, #4
9001c0bc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
9001c0c0:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001c0c4:	bfb8      	it	lt
9001c0c6:	930f      	strlt	r3, [sp, #60]	; 0x3c
9001c0c8:	b1d9      	cbz	r1, 9001c102 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
9001c0ca:	880b      	ldrh	r3, [r1, #0]
9001c0cc:	2b69      	cmp	r3, #105	; 0x69
9001c0ce:	d01f      	beq.n	9001c110 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001c0d0:	d82f      	bhi.n	9001c132 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
9001c0d2:	2b58      	cmp	r3, #88	; 0x58
9001c0d4:	d01c      	beq.n	9001c110 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001c0d6:	d818      	bhi.n	9001c10a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
9001c0d8:	2b25      	cmp	r3, #37	; 0x25
9001c0da:	d034      	beq.n	9001c146 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
9001c0dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001c0de:	e9cd 5b08 	strd	r5, fp, [sp, #32]
9001c0e2:	f1bb 0f00 	cmp.w	fp, #0
9001c0e6:	f000 80b7 	beq.w	9001c258 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
9001c0ea:	f8bb 5000 	ldrh.w	r5, [fp]
9001c0ee:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
9001c0f2:	3301      	adds	r3, #1
9001c0f4:	930d      	str	r3, [sp, #52]	; 0x34
9001c0f6:	e029      	b.n	9001c14c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
9001c0f8:	b10d      	cbz	r5, 9001c0fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
9001c0fa:	782a      	ldrb	r2, [r5, #0]
9001c0fc:	e786      	b.n	9001c00c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
9001c0fe:	462a      	mov	r2, r5
9001c100:	e784      	b.n	9001c00c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
9001c102:	2a00      	cmp	r2, #0
9001c104:	d0ea      	beq.n	9001c0dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
9001c106:	7813      	ldrb	r3, [r2, #0]
9001c108:	e7e0      	b.n	9001c0cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
9001c10a:	3b63      	subs	r3, #99	; 0x63
9001c10c:	2b01      	cmp	r3, #1
9001c10e:	d8e5      	bhi.n	9001c0dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
9001c110:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
9001c114:	b329      	cbz	r1, 9001c162 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
9001c116:	880b      	ldrh	r3, [r1, #0]
9001c118:	2b69      	cmp	r3, #105	; 0x69
9001c11a:	d063      	beq.n	9001c1e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
9001c11c:	d825      	bhi.n	9001c16a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
9001c11e:	2b63      	cmp	r3, #99	; 0x63
9001c120:	d038      	beq.n	9001c194 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
9001c122:	2b64      	cmp	r3, #100	; 0x64
9001c124:	d05e      	beq.n	9001c1e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
9001c126:	2b58      	cmp	r3, #88	; 0x58
9001c128:	d07a      	beq.n	9001c220 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
9001c12a:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
9001c12e:	4625      	mov	r5, r4
9001c130:	e036      	b.n	9001c1a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001c132:	2b73      	cmp	r3, #115	; 0x73
9001c134:	d0ec      	beq.n	9001c110 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001c136:	d802      	bhi.n	9001c13e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
9001c138:	2b6f      	cmp	r3, #111	; 0x6f
9001c13a:	d1cf      	bne.n	9001c0dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
9001c13c:	e7e8      	b.n	9001c110 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001c13e:	2b75      	cmp	r3, #117	; 0x75
9001c140:	d0e6      	beq.n	9001c110 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001c142:	2b78      	cmp	r3, #120	; 0x78
9001c144:	e7f9      	b.n	9001c13a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
9001c146:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001c148:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
9001c14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c14e:	b10b      	cbz	r3, 9001c154 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
9001c150:	3302      	adds	r3, #2
9001c152:	9309      	str	r3, [sp, #36]	; 0x24
9001c154:	9b08      	ldr	r3, [sp, #32]
9001c156:	2b00      	cmp	r3, #0
9001c158:	f43f af2f 	beq.w	9001bfba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001c15c:	3301      	adds	r3, #1
9001c15e:	9308      	str	r3, [sp, #32]
9001c160:	e72b      	b.n	9001bfba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001c162:	2a00      	cmp	r2, #0
9001c164:	d0e1      	beq.n	9001c12a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
9001c166:	7813      	ldrb	r3, [r2, #0]
9001c168:	e7d6      	b.n	9001c118 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
9001c16a:	2b73      	cmp	r3, #115	; 0x73
9001c16c:	d036      	beq.n	9001c1dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
9001c16e:	d807      	bhi.n	9001c180 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
9001c170:	2b6f      	cmp	r3, #111	; 0x6f
9001c172:	d1da      	bne.n	9001c12a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
9001c174:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001c176:	1d25      	adds	r5, r4, #4
9001c178:	2308      	movs	r3, #8
9001c17a:	eba8 0202 	sub.w	r2, r8, r2
9001c17e:	e049      	b.n	9001c214 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
9001c180:	2b75      	cmp	r3, #117	; 0x75
9001c182:	d042      	beq.n	9001c20a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
9001c184:	2b78      	cmp	r3, #120	; 0x78
9001c186:	d1d0      	bne.n	9001c12a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
9001c188:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001c18a:	1d25      	adds	r5, r4, #4
9001c18c:	2310      	movs	r3, #16
9001c18e:	eba8 0202 	sub.w	r2, r8, r2
9001c192:	e03f      	b.n	9001c214 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
9001c194:	7823      	ldrb	r3, [r4, #0]
9001c196:	1d25      	adds	r5, r4, #4
9001c198:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
9001c19c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
9001c1a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c1a2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
9001c1a6:	2b00      	cmp	r3, #0
9001c1a8:	d051      	beq.n	9001c24e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
9001c1aa:	881a      	ldrh	r2, [r3, #0]
9001c1ac:	a80d      	add	r0, sp, #52	; 0x34
9001c1ae:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
9001c1b2:	462c      	mov	r4, r5
9001c1b4:	9005      	str	r0, [sp, #20]
9001c1b6:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
9001c1ba:	9004      	str	r0, [sp, #16]
9001c1bc:	980e      	ldr	r0, [sp, #56]	; 0x38
9001c1be:	9003      	str	r0, [sp, #12]
9001c1c0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
9001c1c4:	9002      	str	r0, [sp, #8]
9001c1c6:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001c1c8:	9001      	str	r0, [sp, #4]
9001c1ca:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
9001c1ce:	e9cd 8706 	strd	r8, r7, [sp, #24]
9001c1d2:	9000      	str	r0, [sp, #0]
9001c1d4:	a810      	add	r0, sp, #64	; 0x40
9001c1d6:	f7ff fd49 	bl	9001bc6c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
9001c1da:	e7b7      	b.n	9001c14c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
9001c1dc:	1d25      	adds	r5, r4, #4
9001c1de:	6823      	ldr	r3, [r4, #0]
9001c1e0:	9310      	str	r3, [sp, #64]	; 0x40
9001c1e2:	e7dd      	b.n	9001c1a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001c1e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001c1e6:	230a      	movs	r3, #10
9001c1e8:	4649      	mov	r1, r9
9001c1ea:	6820      	ldr	r0, [r4, #0]
9001c1ec:	eba8 0202 	sub.w	r2, r8, r2
9001c1f0:	1d25      	adds	r5, r4, #4
9001c1f2:	b292      	uxth	r2, r2
9001c1f4:	f7ff fd08 	bl	9001bc08 <_ZN8touchgfx7Unicode4itoaElPtti>
9001c1f8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
9001c1fc:	2b2d      	cmp	r3, #45	; 0x2d
9001c1fe:	d1cf      	bne.n	9001c1a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001c200:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001c204:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c206:	3302      	adds	r3, #2
9001c208:	e7ea      	b.n	9001c1e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
9001c20a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001c20c:	1d25      	adds	r5, r4, #4
9001c20e:	230a      	movs	r3, #10
9001c210:	eba8 0202 	sub.w	r2, r8, r2
9001c214:	b292      	uxth	r2, r2
9001c216:	4649      	mov	r1, r9
9001c218:	6820      	ldr	r0, [r4, #0]
9001c21a:	f7ff fcd7 	bl	9001bbcc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
9001c21e:	e7bf      	b.n	9001c1a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001c220:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001c222:	2310      	movs	r3, #16
9001c224:	4649      	mov	r1, r9
9001c226:	6820      	ldr	r0, [r4, #0]
9001c228:	eba8 0202 	sub.w	r2, r8, r2
9001c22c:	1d25      	adds	r5, r4, #4
9001c22e:	b292      	uxth	r2, r2
9001c230:	f7ff fccc 	bl	9001bbcc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
9001c234:	f10d 0242 	add.w	r2, sp, #66	; 0x42
9001c238:	f832 3f02 	ldrh.w	r3, [r2, #2]!
9001c23c:	2b00      	cmp	r3, #0
9001c23e:	d0af      	beq.n	9001c1a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001c240:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
9001c244:	2919      	cmp	r1, #25
9001c246:	d8f7      	bhi.n	9001c238 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
9001c248:	3b20      	subs	r3, #32
9001c24a:	8013      	strh	r3, [r2, #0]
9001c24c:	e7f4      	b.n	9001c238 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
9001c24e:	9a08      	ldr	r2, [sp, #32]
9001c250:	2a00      	cmp	r2, #0
9001c252:	d0ab      	beq.n	9001c1ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
9001c254:	7812      	ldrb	r2, [r2, #0]
9001c256:	e7a9      	b.n	9001c1ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
9001c258:	2d00      	cmp	r5, #0
9001c25a:	f43f af48 	beq.w	9001c0ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
9001c25e:	782d      	ldrb	r5, [r5, #0]
9001c260:	e745      	b.n	9001c0ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

9001c262 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
9001c262:	b507      	push	{r0, r1, r2, lr}
9001c264:	9300      	str	r3, [sp, #0]
9001c266:	4613      	mov	r3, r2
9001c268:	2200      	movs	r2, #0
9001c26a:	f7ff fe92 	bl	9001bf92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
9001c26e:	b003      	add	sp, #12
9001c270:	f85d fb04 	ldr.w	pc, [sp], #4

9001c274 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
9001c274:	b40c      	push	{r2, r3}
9001c276:	b507      	push	{r0, r1, r2, lr}
9001c278:	ab04      	add	r3, sp, #16
9001c27a:	f853 2b04 	ldr.w	r2, [r3], #4
9001c27e:	9301      	str	r3, [sp, #4]
9001c280:	f7ff ffef 	bl	9001c262 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
9001c284:	b003      	add	sp, #12
9001c286:	f85d eb04 	ldr.w	lr, [sp], #4
9001c28a:	b002      	add	sp, #8
9001c28c:	4770      	bx	lr
	...

9001c290 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
9001c290:	4b01      	ldr	r3, [pc, #4]	; (9001c298 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
9001c292:	6018      	str	r0, [r3, #0]
9001c294:	4770      	bx	lr
9001c296:	bf00      	nop
9001c298:	20026d3c 	.word	0x20026d3c

9001c29c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
9001c29c:	4b06      	ldr	r3, [pc, #24]	; (9001c2b8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
9001c29e:	881a      	ldrh	r2, [r3, #0]
9001c2a0:	4282      	cmp	r2, r0
9001c2a2:	d807      	bhi.n	9001c2b4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
9001c2a4:	4b05      	ldr	r3, [pc, #20]	; (9001c2bc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
9001c2a6:	881b      	ldrh	r3, [r3, #0]
9001c2a8:	4413      	add	r3, r2
9001c2aa:	4298      	cmp	r0, r3
9001c2ac:	bfac      	ite	ge
9001c2ae:	2000      	movge	r0, #0
9001c2b0:	2001      	movlt	r0, #1
9001c2b2:	4770      	bx	lr
9001c2b4:	2000      	movs	r0, #0
9001c2b6:	4770      	bx	lr
9001c2b8:	20026d5c 	.word	0x20026d5c
9001c2bc:	20026d60 	.word	0x20026d60

9001c2c0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
9001c2c0:	b508      	push	{r3, lr}
9001c2c2:	4601      	mov	r1, r0
9001c2c4:	f7ff ffea 	bl	9001c29c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
9001c2c8:	b118      	cbz	r0, 9001c2d2 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
9001c2ca:	4b02      	ldr	r3, [pc, #8]	; (9001c2d4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
9001c2cc:	681b      	ldr	r3, [r3, #0]
9001c2ce:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
9001c2d2:	bd08      	pop	{r3, pc}
9001c2d4:	20026d40 	.word	0x20026d40

9001c2d8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
9001c2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001c2dc:	4d28      	ldr	r5, [pc, #160]	; (9001c380 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
9001c2de:	682b      	ldr	r3, [r5, #0]
9001c2e0:	2b00      	cmp	r3, #0
9001c2e2:	d04a      	beq.n	9001c37a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
9001c2e4:	4a27      	ldr	r2, [pc, #156]	; (9001c384 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
9001c2e6:	4e28      	ldr	r6, [pc, #160]	; (9001c388 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
9001c2e8:	8810      	ldrh	r0, [r2, #0]
9001c2ea:	f8b6 8000 	ldrh.w	r8, [r6]
9001c2ee:	4c27      	ldr	r4, [pc, #156]	; (9001c38c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
9001c2f0:	4440      	add	r0, r8
9001c2f2:	4f27      	ldr	r7, [pc, #156]	; (9001c390 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
9001c2f4:	1c41      	adds	r1, r0, #1
9001c2f6:	ea4f 0e80 	mov.w	lr, r0, lsl #2
9001c2fa:	f021 0101 	bic.w	r1, r1, #1
9001c2fe:	eb03 020e 	add.w	r2, r3, lr
9001c302:	0409      	lsls	r1, r1, #16
9001c304:	6022      	str	r2, [r4, #0]
9001c306:	0c09      	lsrs	r1, r1, #16
9001c308:	ea4f 0c41 	mov.w	ip, r1, lsl #1
9001c30c:	eb0e 010c 	add.w	r1, lr, ip
9001c310:	185a      	adds	r2, r3, r1
9001c312:	603a      	str	r2, [r7, #0]
9001c314:	220e      	movs	r2, #14
9001c316:	fb02 f208 	mul.w	r2, r2, r8
9001c31a:	3203      	adds	r2, #3
9001c31c:	f022 0203 	bic.w	r2, r2, #3
9001c320:	4411      	add	r1, r2
9001c322:	440b      	add	r3, r1
9001c324:	491b      	ldr	r1, [pc, #108]	; (9001c394 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
9001c326:	600b      	str	r3, [r1, #0]
9001c328:	2300      	movs	r3, #0
9001c32a:	491b      	ldr	r1, [pc, #108]	; (9001c398 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
9001c32c:	800b      	strh	r3, [r1, #0]
9001c32e:	491b      	ldr	r1, [pc, #108]	; (9001c39c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
9001c330:	6809      	ldr	r1, [r1, #0]
9001c332:	eba1 010e 	sub.w	r1, r1, lr
9001c336:	eba1 010c 	sub.w	r1, r1, ip
9001c33a:	469c      	mov	ip, r3
9001c33c:	1a8a      	subs	r2, r1, r2
9001c33e:	4918      	ldr	r1, [pc, #96]	; (9001c3a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
9001c340:	600a      	str	r2, [r1, #0]
9001c342:	f64f 71ff 	movw	r1, #65535	; 0xffff
9001c346:	4a17      	ldr	r2, [pc, #92]	; (9001c3a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
9001c348:	8013      	strh	r3, [r2, #0]
9001c34a:	4283      	cmp	r3, r0
9001c34c:	d10d      	bne.n	9001c36a <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
9001c34e:	8835      	ldrh	r5, [r6, #0]
9001c350:	2300      	movs	r3, #0
9001c352:	6838      	ldr	r0, [r7, #0]
9001c354:	240e      	movs	r4, #14
9001c356:	429d      	cmp	r5, r3
9001c358:	d90f      	bls.n	9001c37a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
9001c35a:	fb04 0203 	mla	r2, r4, r3, r0
9001c35e:	3301      	adds	r3, #1
9001c360:	7b11      	ldrb	r1, [r2, #12]
9001c362:	f36f 1145 	bfc	r1, #5, #1
9001c366:	7311      	strb	r1, [r2, #12]
9001c368:	e7f5      	b.n	9001c356 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
9001c36a:	682a      	ldr	r2, [r5, #0]
9001c36c:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
9001c370:	6822      	ldr	r2, [r4, #0]
9001c372:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
9001c376:	3301      	adds	r3, #1
9001c378:	e7e7      	b.n	9001c34a <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
9001c37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001c37e:	bf00      	nop
9001c380:	20026d40 	.word	0x20026d40
9001c384:	20026d5c 	.word	0x20026d5c
9001c388:	20026d60 	.word	0x20026d60
9001c38c:	20026d54 	.word	0x20026d54
9001c390:	20026d44 	.word	0x20026d44
9001c394:	20026d4c 	.word	0x20026d4c
9001c398:	20026d5e 	.word	0x20026d5e
9001c39c:	20026d48 	.word	0x20026d48
9001c3a0:	20026d58 	.word	0x20026d58
9001c3a4:	20026d50 	.word	0x20026d50

9001c3a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
9001c3a8:	4b10      	ldr	r3, [pc, #64]	; (9001c3ec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
9001c3aa:	b510      	push	{r4, lr}
9001c3ac:	681b      	ldr	r3, [r3, #0]
9001c3ae:	b9db      	cbnz	r3, 9001c3e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
9001c3b0:	b1d1      	cbz	r1, 9001c3e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
9001c3b2:	4b0f      	ldr	r3, [pc, #60]	; (9001c3f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
9001c3b4:	240e      	movs	r4, #14
9001c3b6:	801a      	strh	r2, [r3, #0]
9001c3b8:	b292      	uxth	r2, r2
9001c3ba:	4b0e      	ldr	r3, [pc, #56]	; (9001c3f4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
9001c3bc:	881b      	ldrh	r3, [r3, #0]
9001c3be:	4413      	add	r3, r2
9001c3c0:	4362      	muls	r2, r4
9001c3c2:	2406      	movs	r4, #6
9001c3c4:	fb04 2203 	mla	r2, r4, r3, r2
9001c3c8:	428a      	cmp	r2, r1
9001c3ca:	d305      	bcc.n	9001c3d8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
9001c3cc:	4b0a      	ldr	r3, [pc, #40]	; (9001c3f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
9001c3ce:	2137      	movs	r1, #55	; 0x37
9001c3d0:	4a0a      	ldr	r2, [pc, #40]	; (9001c3fc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
9001c3d2:	480b      	ldr	r0, [pc, #44]	; (9001c400 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
9001c3d4:	f00c fc2e 	bl	90028c34 <__assert_func>
9001c3d8:	4b0a      	ldr	r3, [pc, #40]	; (9001c404 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
9001c3da:	6019      	str	r1, [r3, #0]
9001c3dc:	4b0a      	ldr	r3, [pc, #40]	; (9001c408 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
9001c3de:	6018      	str	r0, [r3, #0]
9001c3e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001c3e4:	f7ff bf78 	b.w	9001c2d8 <_ZN8touchgfx6Bitmap10clearCacheEv>
9001c3e8:	bd10      	pop	{r4, pc}
9001c3ea:	bf00      	nop
9001c3ec:	20026d4c 	.word	0x20026d4c
9001c3f0:	20026d60 	.word	0x20026d60
9001c3f4:	20026d5c 	.word	0x20026d5c
9001c3f8:	9003027a 	.word	0x9003027a
9001c3fc:	900302d3 	.word	0x900302d3
9001c400:	90030255 	.word	0x90030255
9001c404:	20026d48 	.word	0x20026d48
9001c408:	20026d40 	.word	0x20026d40

9001c40c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
9001c40c:	b470      	push	{r4, r5, r6}
9001c40e:	4c07      	ldr	r4, [pc, #28]	; (9001c42c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
9001c410:	4605      	mov	r5, r0
9001c412:	4610      	mov	r0, r2
9001c414:	9a03      	ldr	r2, [sp, #12]
9001c416:	6826      	ldr	r6, [r4, #0]
9001c418:	b936      	cbnz	r6, 9001c428 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
9001c41a:	6025      	str	r5, [r4, #0]
9001c41c:	4c04      	ldr	r4, [pc, #16]	; (9001c430 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
9001c41e:	8021      	strh	r1, [r4, #0]
9001c420:	4619      	mov	r1, r3
9001c422:	bc70      	pop	{r4, r5, r6}
9001c424:	f7ff bfc0 	b.w	9001c3a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
9001c428:	bc70      	pop	{r4, r5, r6}
9001c42a:	4770      	bx	lr
9001c42c:	20026d64 	.word	0x20026d64
9001c430:	20026d5c 	.word	0x20026d5c

9001c434 <_ZNK8touchgfx6Bitmap8getWidthEv>:
9001c434:	b508      	push	{r3, lr}
9001c436:	4b14      	ldr	r3, [pc, #80]	; (9001c488 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
9001c438:	6819      	ldr	r1, [r3, #0]
9001c43a:	b931      	cbnz	r1, 9001c44a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
9001c43c:	4b13      	ldr	r3, [pc, #76]	; (9001c48c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
9001c43e:	f240 3187 	movw	r1, #903	; 0x387
9001c442:	4a13      	ldr	r2, [pc, #76]	; (9001c490 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
9001c444:	4813      	ldr	r0, [pc, #76]	; (9001c494 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
9001c446:	f00c fbf5 	bl	90028c34 <__assert_func>
9001c44a:	4a13      	ldr	r2, [pc, #76]	; (9001c498 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
9001c44c:	8803      	ldrh	r3, [r0, #0]
9001c44e:	8812      	ldrh	r2, [r2, #0]
9001c450:	4293      	cmp	r3, r2
9001c452:	d204      	bcs.n	9001c45e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
9001c454:	2214      	movs	r2, #20
9001c456:	fb02 1303 	mla	r3, r2, r3, r1
9001c45a:	8918      	ldrh	r0, [r3, #8]
9001c45c:	bd08      	pop	{r3, pc}
9001c45e:	490f      	ldr	r1, [pc, #60]	; (9001c49c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
9001c460:	8809      	ldrh	r1, [r1, #0]
9001c462:	4411      	add	r1, r2
9001c464:	428b      	cmp	r3, r1
9001c466:	da06      	bge.n	9001c476 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
9001c468:	1a9b      	subs	r3, r3, r2
9001c46a:	4a0d      	ldr	r2, [pc, #52]	; (9001c4a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
9001c46c:	210e      	movs	r1, #14
9001c46e:	6812      	ldr	r2, [r2, #0]
9001c470:	fb01 2303 	mla	r3, r1, r3, r2
9001c474:	e7f1      	b.n	9001c45a <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
9001c476:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001c47a:	4293      	cmp	r3, r2
9001c47c:	bf0a      	itet	eq
9001c47e:	4b09      	ldreq	r3, [pc, #36]	; (9001c4a4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
9001c480:	2000      	movne	r0, #0
9001c482:	8818      	ldrheq	r0, [r3, #0]
9001c484:	e7ea      	b.n	9001c45c <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
9001c486:	bf00      	nop
9001c488:	20026d64 	.word	0x20026d64
9001c48c:	9002eb0e 	.word	0x9002eb0e
9001c490:	90030380 	.word	0x90030380
9001c494:	90030255 	.word	0x90030255
9001c498:	20026d5c 	.word	0x20026d5c
9001c49c:	20026d60 	.word	0x20026d60
9001c4a0:	20026d44 	.word	0x20026d44
9001c4a4:	20026cd0 	.word	0x20026cd0

9001c4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
9001c4a8:	b508      	push	{r3, lr}
9001c4aa:	4b14      	ldr	r3, [pc, #80]	; (9001c4fc <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
9001c4ac:	6819      	ldr	r1, [r3, #0]
9001c4ae:	b931      	cbnz	r1, 9001c4be <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
9001c4b0:	4b13      	ldr	r3, [pc, #76]	; (9001c500 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
9001c4b2:	f240 319b 	movw	r1, #923	; 0x39b
9001c4b6:	4a13      	ldr	r2, [pc, #76]	; (9001c504 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
9001c4b8:	4813      	ldr	r0, [pc, #76]	; (9001c508 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
9001c4ba:	f00c fbbb 	bl	90028c34 <__assert_func>
9001c4be:	4a13      	ldr	r2, [pc, #76]	; (9001c50c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
9001c4c0:	8803      	ldrh	r3, [r0, #0]
9001c4c2:	8812      	ldrh	r2, [r2, #0]
9001c4c4:	4293      	cmp	r3, r2
9001c4c6:	d204      	bcs.n	9001c4d2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
9001c4c8:	2214      	movs	r2, #20
9001c4ca:	fb02 1303 	mla	r3, r2, r3, r1
9001c4ce:	8958      	ldrh	r0, [r3, #10]
9001c4d0:	bd08      	pop	{r3, pc}
9001c4d2:	490f      	ldr	r1, [pc, #60]	; (9001c510 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
9001c4d4:	8809      	ldrh	r1, [r1, #0]
9001c4d6:	4411      	add	r1, r2
9001c4d8:	428b      	cmp	r3, r1
9001c4da:	da06      	bge.n	9001c4ea <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
9001c4dc:	1a9b      	subs	r3, r3, r2
9001c4de:	4a0d      	ldr	r2, [pc, #52]	; (9001c514 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
9001c4e0:	210e      	movs	r1, #14
9001c4e2:	6812      	ldr	r2, [r2, #0]
9001c4e4:	fb01 2303 	mla	r3, r1, r3, r2
9001c4e8:	e7f1      	b.n	9001c4ce <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
9001c4ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001c4ee:	4293      	cmp	r3, r2
9001c4f0:	bf0a      	itet	eq
9001c4f2:	4b09      	ldreq	r3, [pc, #36]	; (9001c518 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
9001c4f4:	2000      	movne	r0, #0
9001c4f6:	8818      	ldrheq	r0, [r3, #0]
9001c4f8:	e7ea      	b.n	9001c4d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
9001c4fa:	bf00      	nop
9001c4fc:	20026d64 	.word	0x20026d64
9001c500:	9002eb0e 	.word	0x9002eb0e
9001c504:	900303ac 	.word	0x900303ac
9001c508:	90030255 	.word	0x90030255
9001c50c:	20026d5c 	.word	0x20026d5c
9001c510:	20026d60 	.word	0x20026d60
9001c514:	20026d44 	.word	0x20026d44
9001c518:	20026cd2 	.word	0x20026cd2

9001c51c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
9001c51c:	4b23      	ldr	r3, [pc, #140]	; (9001c5ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
9001c51e:	b510      	push	{r4, lr}
9001c520:	681c      	ldr	r4, [r3, #0]
9001c522:	b934      	cbnz	r4, 9001c532 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
9001c524:	4b22      	ldr	r3, [pc, #136]	; (9001c5b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
9001c526:	f240 31af 	movw	r1, #943	; 0x3af
9001c52a:	4a22      	ldr	r2, [pc, #136]	; (9001c5b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
9001c52c:	4822      	ldr	r0, [pc, #136]	; (9001c5b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
9001c52e:	f00c fb81 	bl	90028c34 <__assert_func>
9001c532:	4a22      	ldr	r2, [pc, #136]	; (9001c5bc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
9001c534:	880b      	ldrh	r3, [r1, #0]
9001c536:	8812      	ldrh	r2, [r2, #0]
9001c538:	4293      	cmp	r3, r2
9001c53a:	d211      	bcs.n	9001c560 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
9001c53c:	2214      	movs	r2, #20
9001c53e:	fb02 4303 	mla	r3, r2, r3, r4
9001c542:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
9001c546:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
9001c54a:	8a1a      	ldrh	r2, [r3, #16]
9001c54c:	8a5b      	ldrh	r3, [r3, #18]
9001c54e:	f3c2 020c 	ubfx	r2, r2, #0, #13
9001c552:	8004      	strh	r4, [r0, #0]
9001c554:	f3c3 030c 	ubfx	r3, r3, #0, #13
9001c558:	8041      	strh	r1, [r0, #2]
9001c55a:	8082      	strh	r2, [r0, #4]
9001c55c:	80c3      	strh	r3, [r0, #6]
9001c55e:	e00e      	b.n	9001c57e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
9001c560:	4917      	ldr	r1, [pc, #92]	; (9001c5c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
9001c562:	8809      	ldrh	r1, [r1, #0]
9001c564:	4411      	add	r1, r2
9001c566:	428b      	cmp	r3, r1
9001c568:	da0a      	bge.n	9001c580 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
9001c56a:	1a9b      	subs	r3, r3, r2
9001c56c:	4a15      	ldr	r2, [pc, #84]	; (9001c5c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
9001c56e:	210e      	movs	r1, #14
9001c570:	6812      	ldr	r2, [r2, #0]
9001c572:	fb01 2303 	mla	r3, r1, r3, r2
9001c576:	681a      	ldr	r2, [r3, #0]
9001c578:	6002      	str	r2, [r0, #0]
9001c57a:	685a      	ldr	r2, [r3, #4]
9001c57c:	6042      	str	r2, [r0, #4]
9001c57e:	bd10      	pop	{r4, pc}
9001c580:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001c584:	4293      	cmp	r3, r2
9001c586:	d10b      	bne.n	9001c5a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
9001c588:	4b0f      	ldr	r3, [pc, #60]	; (9001c5c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
9001c58a:	f9b3 1000 	ldrsh.w	r1, [r3]
9001c58e:	4b0f      	ldr	r3, [pc, #60]	; (9001c5cc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
9001c590:	8081      	strh	r1, [r0, #4]
9001c592:	f9b3 2000 	ldrsh.w	r2, [r3]
9001c596:	2300      	movs	r3, #0
9001c598:	80c2      	strh	r2, [r0, #6]
9001c59a:	8003      	strh	r3, [r0, #0]
9001c59c:	8043      	strh	r3, [r0, #2]
9001c59e:	e7ee      	b.n	9001c57e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
9001c5a0:	2300      	movs	r3, #0
9001c5a2:	8003      	strh	r3, [r0, #0]
9001c5a4:	8043      	strh	r3, [r0, #2]
9001c5a6:	8083      	strh	r3, [r0, #4]
9001c5a8:	e7d8      	b.n	9001c55c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
9001c5aa:	bf00      	nop
9001c5ac:	20026d64 	.word	0x20026d64
9001c5b0:	9002eb0e 	.word	0x9002eb0e
9001c5b4:	90030319 	.word	0x90030319
9001c5b8:	90030255 	.word	0x90030255
9001c5bc:	20026d5c 	.word	0x20026d5c
9001c5c0:	20026d60 	.word	0x20026d60
9001c5c4:	20026d44 	.word	0x20026d44
9001c5c8:	20026cd0 	.word	0x20026cd0
9001c5cc:	20026cd2 	.word	0x20026cd2

9001c5d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
9001c5d0:	4b18      	ldr	r3, [pc, #96]	; (9001c634 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
9001c5d2:	681b      	ldr	r3, [r3, #0]
9001c5d4:	b34b      	cbz	r3, 9001c62a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
9001c5d6:	4a18      	ldr	r2, [pc, #96]	; (9001c638 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
9001c5d8:	8800      	ldrh	r0, [r0, #0]
9001c5da:	8812      	ldrh	r2, [r2, #0]
9001c5dc:	4290      	cmp	r0, r2
9001c5de:	d211      	bcs.n	9001c604 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
9001c5e0:	2214      	movs	r2, #20
9001c5e2:	fb02 3300 	mla	r3, r2, r0, r3
9001c5e6:	8a1a      	ldrh	r2, [r3, #16]
9001c5e8:	8919      	ldrh	r1, [r3, #8]
9001c5ea:	f3c2 020c 	ubfx	r2, r2, #0, #13
9001c5ee:	428a      	cmp	r2, r1
9001c5f0:	db1d      	blt.n	9001c62e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
9001c5f2:	8a58      	ldrh	r0, [r3, #18]
9001c5f4:	f3c0 000c 	ubfx	r0, r0, #0, #13
9001c5f8:	895b      	ldrh	r3, [r3, #10]
9001c5fa:	4298      	cmp	r0, r3
9001c5fc:	bfac      	ite	ge
9001c5fe:	2000      	movge	r0, #0
9001c600:	2001      	movlt	r0, #1
9001c602:	4770      	bx	lr
9001c604:	4b0d      	ldr	r3, [pc, #52]	; (9001c63c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
9001c606:	881b      	ldrh	r3, [r3, #0]
9001c608:	4413      	add	r3, r2
9001c60a:	4298      	cmp	r0, r3
9001c60c:	da0d      	bge.n	9001c62a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
9001c60e:	4b0c      	ldr	r3, [pc, #48]	; (9001c640 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
9001c610:	1a80      	subs	r0, r0, r2
9001c612:	220e      	movs	r2, #14
9001c614:	681b      	ldr	r3, [r3, #0]
9001c616:	fb02 3300 	mla	r3, r2, r0, r3
9001c61a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
9001c61e:	891a      	ldrh	r2, [r3, #8]
9001c620:	4291      	cmp	r1, r2
9001c622:	db04      	blt.n	9001c62e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
9001c624:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
9001c628:	e7e6      	b.n	9001c5f8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
9001c62a:	2000      	movs	r0, #0
9001c62c:	4770      	bx	lr
9001c62e:	2001      	movs	r0, #1
9001c630:	4770      	bx	lr
9001c632:	bf00      	nop
9001c634:	20026d64 	.word	0x20026d64
9001c638:	20026d5c 	.word	0x20026d5c
9001c63c:	20026d60 	.word	0x20026d60
9001c640:	20026d44 	.word	0x20026d44

9001c644 <_ZNK8touchgfx6Bitmap7getDataEv>:
9001c644:	b508      	push	{r3, lr}
9001c646:	4b12      	ldr	r3, [pc, #72]	; (9001c690 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
9001c648:	6819      	ldr	r1, [r3, #0]
9001c64a:	b931      	cbnz	r1, 9001c65a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
9001c64c:	4b11      	ldr	r3, [pc, #68]	; (9001c694 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
9001c64e:	f240 31d3 	movw	r1, #979	; 0x3d3
9001c652:	4a11      	ldr	r2, [pc, #68]	; (9001c698 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
9001c654:	4811      	ldr	r0, [pc, #68]	; (9001c69c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
9001c656:	f00c faed 	bl	90028c34 <__assert_func>
9001c65a:	8803      	ldrh	r3, [r0, #0]
9001c65c:	f64f 72ff 	movw	r2, #65535	; 0xffff
9001c660:	4293      	cmp	r3, r2
9001c662:	d012      	beq.n	9001c68a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
9001c664:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001c668:	4293      	cmp	r3, r2
9001c66a:	d103      	bne.n	9001c674 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
9001c66c:	4b0c      	ldr	r3, [pc, #48]	; (9001c6a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
9001c66e:	681b      	ldr	r3, [r3, #0]
9001c670:	6c58      	ldr	r0, [r3, #68]	; 0x44
9001c672:	bd08      	pop	{r3, pc}
9001c674:	4a0b      	ldr	r2, [pc, #44]	; (9001c6a4 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
9001c676:	6812      	ldr	r2, [r2, #0]
9001c678:	b11a      	cbz	r2, 9001c682 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
9001c67a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
9001c67e:	2800      	cmp	r0, #0
9001c680:	d1f7      	bne.n	9001c672 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
9001c682:	2214      	movs	r2, #20
9001c684:	4353      	muls	r3, r2
9001c686:	58c8      	ldr	r0, [r1, r3]
9001c688:	e7f3      	b.n	9001c672 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
9001c68a:	2000      	movs	r0, #0
9001c68c:	e7f1      	b.n	9001c672 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
9001c68e:	bf00      	nop
9001c690:	20026d64 	.word	0x20026d64
9001c694:	9002eb0e 	.word	0x9002eb0e
9001c698:	9003034f 	.word	0x9003034f
9001c69c:	90030255 	.word	0x90030255
9001c6a0:	20026cdc 	.word	0x20026cdc
9001c6a4:	20026d40 	.word	0x20026d40

9001c6a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
9001c6a8:	8802      	ldrh	r2, [r0, #0]
9001c6aa:	f64f 73fd 	movw	r3, #65533	; 0xfffd
9001c6ae:	429a      	cmp	r2, r3
9001c6b0:	d845      	bhi.n	9001c73e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
9001c6b2:	4b24      	ldr	r3, [pc, #144]	; (9001c744 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
9001c6b4:	8818      	ldrh	r0, [r3, #0]
9001c6b6:	4282      	cmp	r2, r0
9001c6b8:	d221      	bcs.n	9001c6fe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
9001c6ba:	4b23      	ldr	r3, [pc, #140]	; (9001c748 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
9001c6bc:	6819      	ldr	r1, [r3, #0]
9001c6be:	2314      	movs	r3, #20
9001c6c0:	fb03 1302 	mla	r3, r3, r2, r1
9001c6c4:	6858      	ldr	r0, [r3, #4]
9001c6c6:	2800      	cmp	r0, #0
9001c6c8:	d03a      	beq.n	9001c740 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
9001c6ca:	4920      	ldr	r1, [pc, #128]	; (9001c74c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
9001c6cc:	6809      	ldr	r1, [r1, #0]
9001c6ce:	2900      	cmp	r1, #0
9001c6d0:	d036      	beq.n	9001c740 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
9001c6d2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
9001c6d6:	2900      	cmp	r1, #0
9001c6d8:	d032      	beq.n	9001c740 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
9001c6da:	891a      	ldrh	r2, [r3, #8]
9001c6dc:	8958      	ldrh	r0, [r3, #10]
9001c6de:	4350      	muls	r0, r2
9001c6e0:	7c5a      	ldrb	r2, [r3, #17]
9001c6e2:	7cdb      	ldrb	r3, [r3, #19]
9001c6e4:	0952      	lsrs	r2, r2, #5
9001c6e6:	f3c3 1342 	ubfx	r3, r3, #5, #3
9001c6ea:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9001c6ee:	2b0b      	cmp	r3, #11
9001c6f0:	bf18      	it	ne
9001c6f2:	0040      	lslne	r0, r0, #1
9001c6f4:	3003      	adds	r0, #3
9001c6f6:	f020 0003 	bic.w	r0, r0, #3
9001c6fa:	4408      	add	r0, r1
9001c6fc:	4770      	bx	lr
9001c6fe:	4b14      	ldr	r3, [pc, #80]	; (9001c750 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
9001c700:	881b      	ldrh	r3, [r3, #0]
9001c702:	4403      	add	r3, r0
9001c704:	429a      	cmp	r2, r3
9001c706:	da1a      	bge.n	9001c73e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
9001c708:	4b12      	ldr	r3, [pc, #72]	; (9001c754 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
9001c70a:	1a10      	subs	r0, r2, r0
9001c70c:	210e      	movs	r1, #14
9001c70e:	681b      	ldr	r3, [r3, #0]
9001c710:	fb01 3000 	mla	r0, r1, r0, r3
9001c714:	7b03      	ldrb	r3, [r0, #12]
9001c716:	f003 031f 	and.w	r3, r3, #31
9001c71a:	2b0b      	cmp	r3, #11
9001c71c:	d10b      	bne.n	9001c736 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
9001c71e:	8903      	ldrh	r3, [r0, #8]
9001c720:	8940      	ldrh	r0, [r0, #10]
9001c722:	4358      	muls	r0, r3
9001c724:	4b09      	ldr	r3, [pc, #36]	; (9001c74c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
9001c726:	3003      	adds	r0, #3
9001c728:	6819      	ldr	r1, [r3, #0]
9001c72a:	f020 0303 	bic.w	r3, r0, #3
9001c72e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
9001c732:	4418      	add	r0, r3
9001c734:	4770      	bx	lr
9001c736:	2b0d      	cmp	r3, #13
9001c738:	d101      	bne.n	9001c73e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
9001c73a:	300d      	adds	r0, #13
9001c73c:	4770      	bx	lr
9001c73e:	2000      	movs	r0, #0
9001c740:	4770      	bx	lr
9001c742:	bf00      	nop
9001c744:	20026d5c 	.word	0x20026d5c
9001c748:	20026d64 	.word	0x20026d64
9001c74c:	20026d40 	.word	0x20026d40
9001c750:	20026d60 	.word	0x20026d60
9001c754:	20026d44 	.word	0x20026d44

9001c758 <_ZNK8touchgfx6Bitmap9getFormatEv>:
9001c758:	4b19      	ldr	r3, [pc, #100]	; (9001c7c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
9001c75a:	6819      	ldr	r1, [r3, #0]
9001c75c:	8803      	ldrh	r3, [r0, #0]
9001c75e:	b1e9      	cbz	r1, 9001c79c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
9001c760:	4a18      	ldr	r2, [pc, #96]	; (9001c7c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
9001c762:	8812      	ldrh	r2, [r2, #0]
9001c764:	429a      	cmp	r2, r3
9001c766:	d90a      	bls.n	9001c77e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
9001c768:	2214      	movs	r2, #20
9001c76a:	fb02 1303 	mla	r3, r2, r3, r1
9001c76e:	7c58      	ldrb	r0, [r3, #17]
9001c770:	0942      	lsrs	r2, r0, #5
9001c772:	7cd8      	ldrb	r0, [r3, #19]
9001c774:	f3c0 1042 	ubfx	r0, r0, #5, #3
9001c778:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
9001c77c:	4770      	bx	lr
9001c77e:	4912      	ldr	r1, [pc, #72]	; (9001c7c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
9001c780:	8809      	ldrh	r1, [r1, #0]
9001c782:	4411      	add	r1, r2
9001c784:	428b      	cmp	r3, r1
9001c786:	da09      	bge.n	9001c79c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
9001c788:	1a9b      	subs	r3, r3, r2
9001c78a:	4a10      	ldr	r2, [pc, #64]	; (9001c7cc <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
9001c78c:	210e      	movs	r1, #14
9001c78e:	6812      	ldr	r2, [r2, #0]
9001c790:	fb01 2303 	mla	r3, r1, r3, r2
9001c794:	7b18      	ldrb	r0, [r3, #12]
9001c796:	f000 001f 	and.w	r0, r0, #31
9001c79a:	4770      	bx	lr
9001c79c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001c7a0:	4293      	cmp	r3, r2
9001c7a2:	d10a      	bne.n	9001c7ba <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
9001c7a4:	4b0a      	ldr	r3, [pc, #40]	; (9001c7d0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
9001c7a6:	681b      	ldr	r3, [r3, #0]
9001c7a8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
9001c7ac:	b10a      	cbz	r2, 9001c7b2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
9001c7ae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
9001c7b0:	b900      	cbnz	r0, 9001c7b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
9001c7b2:	6898      	ldr	r0, [r3, #8]
9001c7b4:	6803      	ldr	r3, [r0, #0]
9001c7b6:	6a1b      	ldr	r3, [r3, #32]
9001c7b8:	4718      	bx	r3
9001c7ba:	2000      	movs	r0, #0
9001c7bc:	4770      	bx	lr
9001c7be:	bf00      	nop
9001c7c0:	20026d64 	.word	0x20026d64
9001c7c4:	20026d5c 	.word	0x20026d5c
9001c7c8:	20026d60 	.word	0x20026d60
9001c7cc:	20026d44 	.word	0x20026d44
9001c7d0:	20026cdc 	.word	0x20026cdc

9001c7d4 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
9001c7d4:	2010      	movs	r0, #16
9001c7d6:	4770      	bx	lr

9001c7d8 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
9001c7d8:	2000      	movs	r0, #0
9001c7da:	4770      	bx	lr

9001c7dc <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
9001c7dc:	00d2      	lsls	r2, r2, #3
9001c7de:	0209      	lsls	r1, r1, #8
9001c7e0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001c7e4:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
9001c7e8:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
9001c7ec:	4310      	orrs	r0, r2
9001c7ee:	4770      	bx	lr

9001c7f0 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
9001c7f0:	0a09      	lsrs	r1, r1, #8
9001c7f2:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
9001c7f6:	4770      	bx	lr

9001c7f8 <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
9001c7f8:	08c9      	lsrs	r1, r1, #3
9001c7fa:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
9001c7fe:	4770      	bx	lr

9001c800 <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
9001c800:	00c9      	lsls	r1, r1, #3
9001c802:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
9001c806:	4770      	bx	lr

9001c808 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
9001c808:	2bff      	cmp	r3, #255	; 0xff
9001c80a:	d050      	beq.n	9001c8ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
9001c80c:	2a0b      	cmp	r2, #11
9001c80e:	d04a      	beq.n	9001c8a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
9001c810:	d80e      	bhi.n	9001c830 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
9001c812:	2a03      	cmp	r2, #3
9001c814:	d03f      	beq.n	9001c896 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
9001c816:	d804      	bhi.n	9001c822 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
9001c818:	2a01      	cmp	r2, #1
9001c81a:	d03e      	beq.n	9001c89a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
9001c81c:	d93f      	bls.n	9001c89e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
9001c81e:	6b80      	ldr	r0, [r0, #56]	; 0x38
9001c820:	4770      	bx	lr
9001c822:	2a09      	cmp	r2, #9
9001c824:	d03f      	beq.n	9001c8a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
9001c826:	d83c      	bhi.n	9001c8a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
9001c828:	2a08      	cmp	r2, #8
9001c82a:	d03a      	beq.n	9001c8a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
9001c82c:	2000      	movs	r0, #0
9001c82e:	4770      	bx	lr
9001c830:	2a2f      	cmp	r2, #47	; 0x2f
9001c832:	d024      	beq.n	9001c87e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
9001c834:	d80d      	bhi.n	9001c852 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
9001c836:	2a2d      	cmp	r2, #45	; 0x2d
9001c838:	d014      	beq.n	9001c864 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
9001c83a:	d826      	bhi.n	9001c88a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
9001c83c:	2a2c      	cmp	r2, #44	; 0x2c
9001c83e:	d1f5      	bne.n	9001c82c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001c840:	684b      	ldr	r3, [r1, #4]
9001c842:	781b      	ldrb	r3, [r3, #0]
9001c844:	2b01      	cmp	r3, #1
9001c846:	d018      	beq.n	9001c87a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
9001c848:	d323      	bcc.n	9001c892 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
9001c84a:	2b02      	cmp	r3, #2
9001c84c:	d1ee      	bne.n	9001c82c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001c84e:	6880      	ldr	r0, [r0, #8]
9001c850:	4770      	bx	lr
9001c852:	2a31      	cmp	r2, #49	; 0x31
9001c854:	d004      	beq.n	9001c860 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
9001c856:	d328      	bcc.n	9001c8aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
9001c858:	2a32      	cmp	r2, #50	; 0x32
9001c85a:	d026      	beq.n	9001c8aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
9001c85c:	2a33      	cmp	r2, #51	; 0x33
9001c85e:	d1e5      	bne.n	9001c82c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001c860:	6f00      	ldr	r0, [r0, #112]	; 0x70
9001c862:	4770      	bx	lr
9001c864:	684b      	ldr	r3, [r1, #4]
9001c866:	781b      	ldrb	r3, [r3, #0]
9001c868:	2b01      	cmp	r3, #1
9001c86a:	d004      	beq.n	9001c876 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
9001c86c:	d30b      	bcc.n	9001c886 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
9001c86e:	2b02      	cmp	r3, #2
9001c870:	d1dc      	bne.n	9001c82c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001c872:	6900      	ldr	r0, [r0, #16]
9001c874:	4770      	bx	lr
9001c876:	6a00      	ldr	r0, [r0, #32]
9001c878:	4770      	bx	lr
9001c87a:	6980      	ldr	r0, [r0, #24]
9001c87c:	4770      	bx	lr
9001c87e:	684b      	ldr	r3, [r1, #4]
9001c880:	781b      	ldrb	r3, [r3, #0]
9001c882:	2b00      	cmp	r3, #0
9001c884:	d1d2      	bne.n	9001c82c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001c886:	6b00      	ldr	r0, [r0, #48]	; 0x30
9001c888:	4770      	bx	lr
9001c88a:	684b      	ldr	r3, [r1, #4]
9001c88c:	781b      	ldrb	r3, [r3, #0]
9001c88e:	2b00      	cmp	r3, #0
9001c890:	d1cc      	bne.n	9001c82c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001c892:	6a80      	ldr	r0, [r0, #40]	; 0x28
9001c894:	4770      	bx	lr
9001c896:	6c80      	ldr	r0, [r0, #72]	; 0x48
9001c898:	4770      	bx	lr
9001c89a:	6d00      	ldr	r0, [r0, #80]	; 0x50
9001c89c:	4770      	bx	lr
9001c89e:	6c00      	ldr	r0, [r0, #64]	; 0x40
9001c8a0:	4770      	bx	lr
9001c8a2:	6d80      	ldr	r0, [r0, #88]	; 0x58
9001c8a4:	4770      	bx	lr
9001c8a6:	6e00      	ldr	r0, [r0, #96]	; 0x60
9001c8a8:	4770      	bx	lr
9001c8aa:	6e80      	ldr	r0, [r0, #104]	; 0x68
9001c8ac:	4770      	bx	lr
9001c8ae:	2a0b      	cmp	r2, #11
9001c8b0:	d049      	beq.n	9001c946 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
9001c8b2:	d80e      	bhi.n	9001c8d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
9001c8b4:	2a03      	cmp	r2, #3
9001c8b6:	d040      	beq.n	9001c93a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
9001c8b8:	d804      	bhi.n	9001c8c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
9001c8ba:	2a01      	cmp	r2, #1
9001c8bc:	d03f      	beq.n	9001c93e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
9001c8be:	d940      	bls.n	9001c942 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
9001c8c0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
9001c8c2:	4770      	bx	lr
9001c8c4:	2a09      	cmp	r2, #9
9001c8c6:	d03e      	beq.n	9001c946 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
9001c8c8:	d801      	bhi.n	9001c8ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
9001c8ca:	2a08      	cmp	r2, #8
9001c8cc:	d1ae      	bne.n	9001c82c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001c8ce:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
9001c8d0:	4770      	bx	lr
9001c8d2:	2a2f      	cmp	r2, #47	; 0x2f
9001c8d4:	d024      	beq.n	9001c920 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
9001c8d6:	d80d      	bhi.n	9001c8f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
9001c8d8:	2a2d      	cmp	r2, #45	; 0x2d
9001c8da:	d014      	beq.n	9001c906 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
9001c8dc:	d826      	bhi.n	9001c92c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
9001c8de:	2a2c      	cmp	r2, #44	; 0x2c
9001c8e0:	d1a4      	bne.n	9001c82c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001c8e2:	684b      	ldr	r3, [r1, #4]
9001c8e4:	781b      	ldrb	r3, [r3, #0]
9001c8e6:	2b01      	cmp	r3, #1
9001c8e8:	d018      	beq.n	9001c91c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
9001c8ea:	d324      	bcc.n	9001c936 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
9001c8ec:	2b02      	cmp	r3, #2
9001c8ee:	d19d      	bne.n	9001c82c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001c8f0:	68c0      	ldr	r0, [r0, #12]
9001c8f2:	4770      	bx	lr
9001c8f4:	2a31      	cmp	r2, #49	; 0x31
9001c8f6:	d004      	beq.n	9001c902 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
9001c8f8:	d327      	bcc.n	9001c94a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
9001c8fa:	2a32      	cmp	r2, #50	; 0x32
9001c8fc:	d025      	beq.n	9001c94a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
9001c8fe:	2a33      	cmp	r2, #51	; 0x33
9001c900:	d194      	bne.n	9001c82c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001c902:	6f40      	ldr	r0, [r0, #116]	; 0x74
9001c904:	4770      	bx	lr
9001c906:	684b      	ldr	r3, [r1, #4]
9001c908:	781b      	ldrb	r3, [r3, #0]
9001c90a:	2b01      	cmp	r3, #1
9001c90c:	d004      	beq.n	9001c918 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
9001c90e:	d30b      	bcc.n	9001c928 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
9001c910:	2b02      	cmp	r3, #2
9001c912:	d18b      	bne.n	9001c82c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001c914:	6940      	ldr	r0, [r0, #20]
9001c916:	4770      	bx	lr
9001c918:	6a40      	ldr	r0, [r0, #36]	; 0x24
9001c91a:	4770      	bx	lr
9001c91c:	69c0      	ldr	r0, [r0, #28]
9001c91e:	4770      	bx	lr
9001c920:	684b      	ldr	r3, [r1, #4]
9001c922:	781b      	ldrb	r3, [r3, #0]
9001c924:	2b00      	cmp	r3, #0
9001c926:	d181      	bne.n	9001c82c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001c928:	6b40      	ldr	r0, [r0, #52]	; 0x34
9001c92a:	4770      	bx	lr
9001c92c:	684b      	ldr	r3, [r1, #4]
9001c92e:	781b      	ldrb	r3, [r3, #0]
9001c930:	2b00      	cmp	r3, #0
9001c932:	f47f af7b 	bne.w	9001c82c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001c936:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
9001c938:	4770      	bx	lr
9001c93a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
9001c93c:	4770      	bx	lr
9001c93e:	6d40      	ldr	r0, [r0, #84]	; 0x54
9001c940:	4770      	bx	lr
9001c942:	6c40      	ldr	r0, [r0, #68]	; 0x44
9001c944:	4770      	bx	lr
9001c946:	6e40      	ldr	r0, [r0, #100]	; 0x64
9001c948:	4770      	bx	lr
9001c94a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
9001c94c:	4770      	bx	lr

9001c94e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c94e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c952:	b087      	sub	sp, #28
9001c954:	9815      	ldr	r0, [sp, #84]	; 0x54
9001c956:	9205      	str	r2, [sp, #20]
9001c958:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001c95c:	9101      	str	r1, [sp, #4]
9001c95e:	9202      	str	r2, [sp, #8]
9001c960:	6841      	ldr	r1, [r0, #4]
9001c962:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
9001c966:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001c96a:	fb01 2404 	mla	r4, r1, r4, r2
9001c96e:	6802      	ldr	r2, [r0, #0]
9001c970:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001c974:	f8de 2000 	ldr.w	r2, [lr]
9001c978:	9203      	str	r2, [sp, #12]
9001c97a:	f8de 2004 	ldr.w	r2, [lr, #4]
9001c97e:	3204      	adds	r2, #4
9001c980:	9204      	str	r2, [sp, #16]
9001c982:	9a02      	ldr	r2, [sp, #8]
9001c984:	43d6      	mvns	r6, r2
9001c986:	b2f6      	uxtb	r6, r6
9001c988:	9a01      	ldr	r2, [sp, #4]
9001c98a:	2a00      	cmp	r2, #0
9001c98c:	dc03      	bgt.n	9001c996 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001c98e:	9a05      	ldr	r2, [sp, #20]
9001c990:	2a00      	cmp	r2, #0
9001c992:	f340 8129 	ble.w	9001cbe8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001c996:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001c998:	f9be c008 	ldrsh.w	ip, [lr, #8]
9001c99c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001c9a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001c9a2:	f9be 700c 	ldrsh.w	r7, [lr, #12]
9001c9a6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001c9aa:	2b00      	cmp	r3, #0
9001c9ac:	dd0e      	ble.n	9001c9cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001c9ae:	1408      	asrs	r0, r1, #16
9001c9b0:	d405      	bmi.n	9001c9be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001c9b2:	4560      	cmp	r0, ip
9001c9b4:	da03      	bge.n	9001c9be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001c9b6:	1410      	asrs	r0, r2, #16
9001c9b8:	d401      	bmi.n	9001c9be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001c9ba:	42b8      	cmp	r0, r7
9001c9bc:	db07      	blt.n	9001c9ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001c9be:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001c9c0:	3b01      	subs	r3, #1
9001c9c2:	3402      	adds	r4, #2
9001c9c4:	4401      	add	r1, r0
9001c9c6:	9814      	ldr	r0, [sp, #80]	; 0x50
9001c9c8:	4402      	add	r2, r0
9001c9ca:	e7ee      	b.n	9001c9aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
9001c9cc:	d071      	beq.n	9001cab2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001c9ce:	1e58      	subs	r0, r3, #1
9001c9d0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001c9d2:	fb05 1500 	mla	r5, r5, r0, r1
9001c9d6:	142d      	asrs	r5, r5, #16
9001c9d8:	d45f      	bmi.n	9001ca9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001c9da:	4565      	cmp	r5, ip
9001c9dc:	da5d      	bge.n	9001ca9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001c9de:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001c9e0:	fb05 2000 	mla	r0, r5, r0, r2
9001c9e4:	1400      	asrs	r0, r0, #16
9001c9e6:	d458      	bmi.n	9001ca9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001c9e8:	42b8      	cmp	r0, r7
9001c9ea:	da56      	bge.n	9001ca9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001c9ec:	4699      	mov	r9, r3
9001c9ee:	46a2      	mov	sl, r4
9001c9f0:	f8bd b008 	ldrh.w	fp, [sp, #8]
9001c9f4:	f1b9 0f00 	cmp.w	r9, #0
9001c9f8:	dd57      	ble.n	9001caaa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
9001c9fa:	ea4f 4c22 	mov.w	ip, r2, asr #16
9001c9fe:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001ca02:	9803      	ldr	r0, [sp, #12]
9001ca04:	140d      	asrs	r5, r1, #16
9001ca06:	f109 39ff 	add.w	r9, r9, #4294967295
9001ca0a:	fb07 000c 	mla	r0, r7, ip, r0
9001ca0e:	5d40      	ldrb	r0, [r0, r5]
9001ca10:	9d04      	ldr	r5, [sp, #16]
9001ca12:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
9001ca16:	f8ba 5000 	ldrh.w	r5, [sl]
9001ca1a:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001ca1e:	122f      	asrs	r7, r5, #8
9001ca20:	ea4f 08e5 	mov.w	r8, r5, asr #3
9001ca24:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001ca28:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001ca2c:	00ed      	lsls	r5, r5, #3
9001ca2e:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
9001ca32:	fb17 f706 	smulbb	r7, r7, r6
9001ca36:	b2ed      	uxtb	r5, r5
9001ca38:	fb18 f806 	smulbb	r8, r8, r6
9001ca3c:	fb0c 7c0b 	mla	ip, ip, fp, r7
9001ca40:	10c7      	asrs	r7, r0, #3
9001ca42:	fb15 f506 	smulbb	r5, r5, r6
9001ca46:	00c0      	lsls	r0, r0, #3
9001ca48:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001ca4c:	fa1f fc8c 	uxth.w	ip, ip
9001ca50:	b2c0      	uxtb	r0, r0
9001ca52:	fb07 870b 	mla	r7, r7, fp, r8
9001ca56:	fb00 500b 	mla	r0, r0, fp, r5
9001ca5a:	f10c 0501 	add.w	r5, ip, #1
9001ca5e:	b2bf      	uxth	r7, r7
9001ca60:	b280      	uxth	r0, r0
9001ca62:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001ca66:	f107 0801 	add.w	r8, r7, #1
9001ca6a:	1c45      	adds	r5, r0, #1
9001ca6c:	eb08 2817 	add.w	r8, r8, r7, lsr #8
9001ca70:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001ca74:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001ca78:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001ca7a:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001ca7e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001ca82:	4401      	add	r1, r0
9001ca84:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001ca88:	9814      	ldr	r0, [sp, #80]	; 0x50
9001ca8a:	ea4c 0c05 	orr.w	ip, ip, r5
9001ca8e:	4402      	add	r2, r0
9001ca90:	ea4c 0c08 	orr.w	ip, ip, r8
9001ca94:	f82a cb02 	strh.w	ip, [sl], #2
9001ca98:	e7ac      	b.n	9001c9f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
9001ca9a:	f04f 0800 	mov.w	r8, #0
9001ca9e:	f8bd a008 	ldrh.w	sl, [sp, #8]
9001caa2:	eb03 0008 	add.w	r0, r3, r8
9001caa6:	2800      	cmp	r0, #0
9001caa8:	dc41      	bgt.n	9001cb2e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001caaa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001caae:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001cab2:	9b01      	ldr	r3, [sp, #4]
9001cab4:	2b00      	cmp	r3, #0
9001cab6:	f340 8097 	ble.w	9001cbe8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001caba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001cabe:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001cac0:	ee30 0a04 	vadd.f32	s0, s0, s8
9001cac4:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001cac8:	eef0 6a62 	vmov.f32	s13, s5
9001cacc:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001cad0:	ee31 1a05 	vadd.f32	s2, s2, s10
9001cad4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001cad8:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
9001cadc:	eef0 6a43 	vmov.f32	s13, s6
9001cae0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001cae4:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
9001cae8:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001caec:	ee61 7a27 	vmul.f32	s15, s2, s15
9001caf0:	ee77 2a62 	vsub.f32	s5, s14, s5
9001caf4:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001caf8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001cafc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001cb00:	ee12 2a90 	vmov	r2, s5
9001cb04:	eef0 2a47 	vmov.f32	s5, s14
9001cb08:	fb92 f3f3 	sdiv	r3, r2, r3
9001cb0c:	ee13 2a10 	vmov	r2, s6
9001cb10:	9313      	str	r3, [sp, #76]	; 0x4c
9001cb12:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001cb14:	eeb0 3a67 	vmov.f32	s6, s15
9001cb18:	fb92 f3f3 	sdiv	r3, r2, r3
9001cb1c:	9314      	str	r3, [sp, #80]	; 0x50
9001cb1e:	9b01      	ldr	r3, [sp, #4]
9001cb20:	9a05      	ldr	r2, [sp, #20]
9001cb22:	3b01      	subs	r3, #1
9001cb24:	9301      	str	r3, [sp, #4]
9001cb26:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001cb28:	bf08      	it	eq
9001cb2a:	4613      	moveq	r3, r2
9001cb2c:	e72c      	b.n	9001c988 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9001cb2e:	140f      	asrs	r7, r1, #16
9001cb30:	d453      	bmi.n	9001cbda <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001cb32:	f8de 5008 	ldr.w	r5, [lr, #8]
9001cb36:	42bd      	cmp	r5, r7
9001cb38:	dd4f      	ble.n	9001cbda <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001cb3a:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001cb3e:	d44c      	bmi.n	9001cbda <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001cb40:	f8de 000c 	ldr.w	r0, [lr, #12]
9001cb44:	4560      	cmp	r0, ip
9001cb46:	dd48      	ble.n	9001cbda <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001cb48:	9803      	ldr	r0, [sp, #12]
9001cb4a:	b22d      	sxth	r5, r5
9001cb4c:	fb0c 0505 	mla	r5, ip, r5, r0
9001cb50:	5de8      	ldrb	r0, [r5, r7]
9001cb52:	9d04      	ldr	r5, [sp, #16]
9001cb54:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
9001cb58:	f06f 0501 	mvn.w	r5, #1
9001cb5c:	fb05 fb08 	mul.w	fp, r5, r8
9001cb60:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001cb64:	f834 500b 	ldrh.w	r5, [r4, fp]
9001cb68:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001cb6c:	122f      	asrs	r7, r5, #8
9001cb6e:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001cb72:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001cb76:	00ed      	lsls	r5, r5, #3
9001cb78:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001cb7c:	fb17 f706 	smulbb	r7, r7, r6
9001cb80:	b2ed      	uxtb	r5, r5
9001cb82:	fb19 f906 	smulbb	r9, r9, r6
9001cb86:	fb0c 7c0a 	mla	ip, ip, sl, r7
9001cb8a:	10c7      	asrs	r7, r0, #3
9001cb8c:	fb15 f506 	smulbb	r5, r5, r6
9001cb90:	00c0      	lsls	r0, r0, #3
9001cb92:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001cb96:	fa1f fc8c 	uxth.w	ip, ip
9001cb9a:	b2c0      	uxtb	r0, r0
9001cb9c:	fb07 970a 	mla	r7, r7, sl, r9
9001cba0:	fb00 500a 	mla	r0, r0, sl, r5
9001cba4:	f10c 0501 	add.w	r5, ip, #1
9001cba8:	b2bf      	uxth	r7, r7
9001cbaa:	b280      	uxth	r0, r0
9001cbac:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001cbb0:	f107 0901 	add.w	r9, r7, #1
9001cbb4:	1c45      	adds	r5, r0, #1
9001cbb6:	eb09 2917 	add.w	r9, r9, r7, lsr #8
9001cbba:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001cbbe:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001cbc2:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001cbc6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001cbca:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001cbce:	ea4c 0c05 	orr.w	ip, ip, r5
9001cbd2:	ea4c 0c09 	orr.w	ip, ip, r9
9001cbd6:	f824 c00b 	strh.w	ip, [r4, fp]
9001cbda:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001cbdc:	f108 38ff 	add.w	r8, r8, #4294967295
9001cbe0:	4401      	add	r1, r0
9001cbe2:	9814      	ldr	r0, [sp, #80]	; 0x50
9001cbe4:	4402      	add	r2, r0
9001cbe6:	e75c      	b.n	9001caa2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
9001cbe8:	b007      	add	sp, #28
9001cbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001cbee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001cbee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001cbf2:	b085      	sub	sp, #20
9001cbf4:	4693      	mov	fp, r2
9001cbf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001cbfa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001cbfc:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001cbfe:	6870      	ldr	r0, [r6, #4]
9001cc00:	9100      	str	r1, [sp, #0]
9001cc02:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001cc06:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
9001cc0a:	fb00 2404 	mla	r4, r0, r4, r2
9001cc0e:	6832      	ldr	r2, [r6, #0]
9001cc10:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001cc14:	682a      	ldr	r2, [r5, #0]
9001cc16:	9201      	str	r2, [sp, #4]
9001cc18:	686a      	ldr	r2, [r5, #4]
9001cc1a:	3204      	adds	r2, #4
9001cc1c:	9202      	str	r2, [sp, #8]
9001cc1e:	9a00      	ldr	r2, [sp, #0]
9001cc20:	2a00      	cmp	r2, #0
9001cc22:	dc03      	bgt.n	9001cc2c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001cc24:	f1bb 0f00 	cmp.w	fp, #0
9001cc28:	f340 80a0 	ble.w	9001cd6c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
9001cc2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001cc2e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001cc32:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001cc36:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001cc38:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
9001cc3c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001cc40:	2b00      	cmp	r3, #0
9001cc42:	dd0c      	ble.n	9001cc5e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001cc44:	1406      	asrs	r6, r0, #16
9001cc46:	d405      	bmi.n	9001cc54 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001cc48:	454e      	cmp	r6, r9
9001cc4a:	da03      	bge.n	9001cc54 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001cc4c:	1416      	asrs	r6, r2, #16
9001cc4e:	d401      	bmi.n	9001cc54 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001cc50:	4546      	cmp	r6, r8
9001cc52:	db05      	blt.n	9001cc60 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001cc54:	4470      	add	r0, lr
9001cc56:	4462      	add	r2, ip
9001cc58:	3b01      	subs	r3, #1
9001cc5a:	3402      	adds	r4, #2
9001cc5c:	e7f0      	b.n	9001cc40 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001cc5e:	d00f      	beq.n	9001cc80 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001cc60:	1e5e      	subs	r6, r3, #1
9001cc62:	fb0e 0706 	mla	r7, lr, r6, r0
9001cc66:	143f      	asrs	r7, r7, #16
9001cc68:	d541      	bpl.n	9001ccee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
9001cc6a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
9001cc6e:	4698      	mov	r8, r3
9001cc70:	9603      	str	r6, [sp, #12]
9001cc72:	f1b8 0f00 	cmp.w	r8, #0
9001cc76:	dc59      	bgt.n	9001cd2c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001cc78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001cc7c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001cc80:	9b00      	ldr	r3, [sp, #0]
9001cc82:	2b00      	cmp	r3, #0
9001cc84:	dd72      	ble.n	9001cd6c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
9001cc86:	ee30 0a04 	vadd.f32	s0, s0, s8
9001cc8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cc8c:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001cc90:	eeb0 6a62 	vmov.f32	s12, s5
9001cc94:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001cc98:	ee31 1a05 	vadd.f32	s2, s2, s10
9001cc9c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001cca0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001cca4:	eeb0 6a43 	vmov.f32	s12, s6
9001cca8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001ccac:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001ccb0:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001ccb4:	ee61 7a27 	vmul.f32	s15, s2, s15
9001ccb8:	ee77 2a62 	vsub.f32	s5, s14, s5
9001ccbc:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001ccc0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001ccc4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001ccc8:	ee12 2a90 	vmov	r2, s5
9001cccc:	eef0 2a47 	vmov.f32	s5, s14
9001ccd0:	fb92 fef3 	sdiv	lr, r2, r3
9001ccd4:	ee13 2a10 	vmov	r2, s6
9001ccd8:	eeb0 3a67 	vmov.f32	s6, s15
9001ccdc:	fb92 fcf3 	sdiv	ip, r2, r3
9001cce0:	9b00      	ldr	r3, [sp, #0]
9001cce2:	3b01      	subs	r3, #1
9001cce4:	9300      	str	r3, [sp, #0]
9001cce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cce8:	bf08      	it	eq
9001ccea:	465b      	moveq	r3, fp
9001ccec:	e797      	b.n	9001cc1e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001ccee:	454f      	cmp	r7, r9
9001ccf0:	dabb      	bge.n	9001cc6a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001ccf2:	fb0c 2606 	mla	r6, ip, r6, r2
9001ccf6:	1436      	asrs	r6, r6, #16
9001ccf8:	d4b7      	bmi.n	9001cc6a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001ccfa:	4546      	cmp	r6, r8
9001ccfc:	dab5      	bge.n	9001cc6a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001ccfe:	461e      	mov	r6, r3
9001cd00:	46a0      	mov	r8, r4
9001cd02:	2e00      	cmp	r6, #0
9001cd04:	ddb8      	ble.n	9001cc78 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
9001cd06:	1417      	asrs	r7, r2, #16
9001cd08:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
9001cd0c:	9901      	ldr	r1, [sp, #4]
9001cd0e:	ea4f 4920 	mov.w	r9, r0, asr #16
9001cd12:	4462      	add	r2, ip
9001cd14:	4470      	add	r0, lr
9001cd16:	fb0a 1707 	mla	r7, sl, r7, r1
9001cd1a:	9902      	ldr	r1, [sp, #8]
9001cd1c:	3e01      	subs	r6, #1
9001cd1e:	f817 7009 	ldrb.w	r7, [r7, r9]
9001cd22:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
9001cd26:	f828 7b02 	strh.w	r7, [r8], #2
9001cd2a:	e7ea      	b.n	9001cd02 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
9001cd2c:	ea5f 4920 	movs.w	r9, r0, asr #16
9001cd30:	d417      	bmi.n	9001cd62 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001cd32:	68ae      	ldr	r6, [r5, #8]
9001cd34:	454e      	cmp	r6, r9
9001cd36:	dd14      	ble.n	9001cd62 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001cd38:	ea5f 4a22 	movs.w	sl, r2, asr #16
9001cd3c:	d411      	bmi.n	9001cd62 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001cd3e:	68ef      	ldr	r7, [r5, #12]
9001cd40:	4557      	cmp	r7, sl
9001cd42:	dd0e      	ble.n	9001cd62 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001cd44:	9f01      	ldr	r7, [sp, #4]
9001cd46:	b236      	sxth	r6, r6
9001cd48:	f06f 0101 	mvn.w	r1, #1
9001cd4c:	fb0a 7606 	mla	r6, sl, r6, r7
9001cd50:	9f02      	ldr	r7, [sp, #8]
9001cd52:	f816 6009 	ldrb.w	r6, [r6, r9]
9001cd56:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
9001cd5a:	fb01 f608 	mul.w	r6, r1, r8
9001cd5e:	9903      	ldr	r1, [sp, #12]
9001cd60:	538f      	strh	r7, [r1, r6]
9001cd62:	4470      	add	r0, lr
9001cd64:	4462      	add	r2, ip
9001cd66:	f108 38ff 	add.w	r8, r8, #4294967295
9001cd6a:	e782      	b.n	9001cc72 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001cd6c:	b005      	add	sp, #20
9001cd6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001cd72 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001cd72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001cd76:	b087      	sub	sp, #28
9001cd78:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001cd7a:	9205      	str	r2, [sp, #20]
9001cd7c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001cd80:	9102      	str	r1, [sp, #8]
9001cd82:	9203      	str	r2, [sp, #12]
9001cd84:	6861      	ldr	r1, [r4, #4]
9001cd86:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
9001cd8a:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
9001cd8e:	fb01 2000 	mla	r0, r1, r0, r2
9001cd92:	6822      	ldr	r2, [r4, #0]
9001cd94:	eb02 0240 	add.w	r2, r2, r0, lsl #1
9001cd98:	9200      	str	r2, [sp, #0]
9001cd9a:	f8dc 2000 	ldr.w	r2, [ip]
9001cd9e:	9204      	str	r2, [sp, #16]
9001cda0:	f8dc 2004 	ldr.w	r2, [ip, #4]
9001cda4:	3204      	adds	r2, #4
9001cda6:	9201      	str	r2, [sp, #4]
9001cda8:	9a03      	ldr	r2, [sp, #12]
9001cdaa:	43d5      	mvns	r5, r2
9001cdac:	b2ed      	uxtb	r5, r5
9001cdae:	9a02      	ldr	r2, [sp, #8]
9001cdb0:	2a00      	cmp	r2, #0
9001cdb2:	dc03      	bgt.n	9001cdbc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001cdb4:	9a05      	ldr	r2, [sp, #20]
9001cdb6:	2a00      	cmp	r2, #0
9001cdb8:	f340 812c 	ble.w	9001d014 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
9001cdbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001cdbe:	f9bc e008 	ldrsh.w	lr, [ip, #8]
9001cdc2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001cdc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001cdc8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
9001cdcc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001cdd0:	2b00      	cmp	r3, #0
9001cdd2:	dd10      	ble.n	9001cdf6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001cdd4:	140c      	asrs	r4, r1, #16
9001cdd6:	d405      	bmi.n	9001cde4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001cdd8:	4574      	cmp	r4, lr
9001cdda:	da03      	bge.n	9001cde4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001cddc:	1414      	asrs	r4, r2, #16
9001cdde:	d401      	bmi.n	9001cde4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001cde0:	42bc      	cmp	r4, r7
9001cde2:	db09      	blt.n	9001cdf8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001cde4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001cde6:	3b01      	subs	r3, #1
9001cde8:	9800      	ldr	r0, [sp, #0]
9001cdea:	4421      	add	r1, r4
9001cdec:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001cdee:	3002      	adds	r0, #2
9001cdf0:	4422      	add	r2, r4
9001cdf2:	9000      	str	r0, [sp, #0]
9001cdf4:	e7ec      	b.n	9001cdd0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
9001cdf6:	d071      	beq.n	9001cedc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
9001cdf8:	1e5c      	subs	r4, r3, #1
9001cdfa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001cdfc:	fb06 1604 	mla	r6, r6, r4, r1
9001ce00:	1436      	asrs	r6, r6, #16
9001ce02:	d45d      	bmi.n	9001cec0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001ce04:	4576      	cmp	r6, lr
9001ce06:	da5b      	bge.n	9001cec0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001ce08:	9e14      	ldr	r6, [sp, #80]	; 0x50
9001ce0a:	fb06 2404 	mla	r4, r6, r4, r2
9001ce0e:	1424      	asrs	r4, r4, #16
9001ce10:	d456      	bmi.n	9001cec0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001ce12:	42bc      	cmp	r4, r7
9001ce14:	da54      	bge.n	9001cec0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001ce16:	4698      	mov	r8, r3
9001ce18:	f8dd 9000 	ldr.w	r9, [sp]
9001ce1c:	f8bd a00c 	ldrh.w	sl, [sp, #12]
9001ce20:	f1b8 0f00 	cmp.w	r8, #0
9001ce24:	dd54      	ble.n	9001ced0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
9001ce26:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
9001ce2a:	1414      	asrs	r4, r2, #16
9001ce2c:	9804      	ldr	r0, [sp, #16]
9001ce2e:	140e      	asrs	r6, r1, #16
9001ce30:	f108 38ff 	add.w	r8, r8, #4294967295
9001ce34:	fb07 0404 	mla	r4, r7, r4, r0
9001ce38:	9801      	ldr	r0, [sp, #4]
9001ce3a:	f814 e006 	ldrb.w	lr, [r4, r6]
9001ce3e:	f8b9 4000 	ldrh.w	r4, [r9]
9001ce42:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
9001ce46:	1227      	asrs	r7, r4, #8
9001ce48:	eb00 0b0e 	add.w	fp, r0, lr
9001ce4c:	f810 e00e 	ldrb.w	lr, [r0, lr]
9001ce50:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001ce54:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001ce56:	f89b 6002 	ldrb.w	r6, [fp, #2]
9001ce5a:	f89b b001 	ldrb.w	fp, [fp, #1]
9001ce5e:	4401      	add	r1, r0
9001ce60:	fb16 f60a 	smulbb	r6, r6, sl
9001ce64:	9814      	ldr	r0, [sp, #80]	; 0x50
9001ce66:	fb1b fb0a 	smulbb	fp, fp, sl
9001ce6a:	fb07 6705 	mla	r7, r7, r5, r6
9001ce6e:	10e6      	asrs	r6, r4, #3
9001ce70:	00e4      	lsls	r4, r4, #3
9001ce72:	4402      	add	r2, r0
9001ce74:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001ce78:	b2bf      	uxth	r7, r7
9001ce7a:	b2e4      	uxtb	r4, r4
9001ce7c:	fb06 b605 	mla	r6, r6, r5, fp
9001ce80:	fb14 f405 	smulbb	r4, r4, r5
9001ce84:	b2b6      	uxth	r6, r6
9001ce86:	fb0e 4e0a 	mla	lr, lr, sl, r4
9001ce8a:	1c7c      	adds	r4, r7, #1
9001ce8c:	f106 0b01 	add.w	fp, r6, #1
9001ce90:	fa1f fe8e 	uxth.w	lr, lr
9001ce94:	eb04 2717 	add.w	r7, r4, r7, lsr #8
9001ce98:	f10e 0401 	add.w	r4, lr, #1
9001ce9c:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
9001cea0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001cea4:	eb04 241e 	add.w	r4, r4, lr, lsr #8
9001cea8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
9001ceac:	f3c4 24c4 	ubfx	r4, r4, #11, #5
9001ceb0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001ceb4:	4327      	orrs	r7, r4
9001ceb6:	ea47 070b 	orr.w	r7, r7, fp
9001ceba:	f829 7b02 	strh.w	r7, [r9], #2
9001cebe:	e7af      	b.n	9001ce20 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
9001cec0:	f04f 0e00 	mov.w	lr, #0
9001cec4:	f8bd 900c 	ldrh.w	r9, [sp, #12]
9001cec8:	eb03 040e 	add.w	r4, r3, lr
9001cecc:	2c00      	cmp	r4, #0
9001cece:	dc43      	bgt.n	9001cf58 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
9001ced0:	9a00      	ldr	r2, [sp, #0]
9001ced2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001ced6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001ceda:	9300      	str	r3, [sp, #0]
9001cedc:	9b02      	ldr	r3, [sp, #8]
9001cede:	2b00      	cmp	r3, #0
9001cee0:	f340 8098 	ble.w	9001d014 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
9001cee4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001cee8:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001ceea:	ee30 0a04 	vadd.f32	s0, s0, s8
9001ceee:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001cef2:	eef0 6a62 	vmov.f32	s13, s5
9001cef6:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001cefa:	ee31 1a05 	vadd.f32	s2, s2, s10
9001cefe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001cf02:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
9001cf06:	eef0 6a43 	vmov.f32	s13, s6
9001cf0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001cf0e:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
9001cf12:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001cf16:	ee61 7a27 	vmul.f32	s15, s2, s15
9001cf1a:	ee77 2a62 	vsub.f32	s5, s14, s5
9001cf1e:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001cf22:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001cf26:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001cf2a:	ee12 2a90 	vmov	r2, s5
9001cf2e:	eef0 2a47 	vmov.f32	s5, s14
9001cf32:	fb92 f3f3 	sdiv	r3, r2, r3
9001cf36:	ee13 2a10 	vmov	r2, s6
9001cf3a:	9313      	str	r3, [sp, #76]	; 0x4c
9001cf3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001cf3e:	eeb0 3a67 	vmov.f32	s6, s15
9001cf42:	fb92 f3f3 	sdiv	r3, r2, r3
9001cf46:	9314      	str	r3, [sp, #80]	; 0x50
9001cf48:	9b02      	ldr	r3, [sp, #8]
9001cf4a:	9a05      	ldr	r2, [sp, #20]
9001cf4c:	3b01      	subs	r3, #1
9001cf4e:	9302      	str	r3, [sp, #8]
9001cf50:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001cf52:	bf08      	it	eq
9001cf54:	4613      	moveq	r3, r2
9001cf56:	e72a      	b.n	9001cdae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001cf58:	140f      	asrs	r7, r1, #16
9001cf5a:	d454      	bmi.n	9001d006 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001cf5c:	f8dc 6008 	ldr.w	r6, [ip, #8]
9001cf60:	42be      	cmp	r6, r7
9001cf62:	dd50      	ble.n	9001d006 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001cf64:	ea5f 4822 	movs.w	r8, r2, asr #16
9001cf68:	d44d      	bmi.n	9001d006 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001cf6a:	f8dc 400c 	ldr.w	r4, [ip, #12]
9001cf6e:	4544      	cmp	r4, r8
9001cf70:	dd49      	ble.n	9001d006 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001cf72:	9c04      	ldr	r4, [sp, #16]
9001cf74:	b236      	sxth	r6, r6
9001cf76:	f06f 0001 	mvn.w	r0, #1
9001cf7a:	fb08 4606 	mla	r6, r8, r6, r4
9001cf7e:	9c01      	ldr	r4, [sp, #4]
9001cf80:	fb00 fa0e 	mul.w	sl, r0, lr
9001cf84:	9800      	ldr	r0, [sp, #0]
9001cf86:	f816 8007 	ldrb.w	r8, [r6, r7]
9001cf8a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
9001cf8e:	eb04 0b08 	add.w	fp, r4, r8
9001cf92:	f830 400a 	ldrh.w	r4, [r0, sl]
9001cf96:	9801      	ldr	r0, [sp, #4]
9001cf98:	f89b 6002 	ldrb.w	r6, [fp, #2]
9001cf9c:	1227      	asrs	r7, r4, #8
9001cf9e:	f89b b001 	ldrb.w	fp, [fp, #1]
9001cfa2:	fb16 f609 	smulbb	r6, r6, r9
9001cfa6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001cfaa:	f810 8008 	ldrb.w	r8, [r0, r8]
9001cfae:	fb1b fb09 	smulbb	fp, fp, r9
9001cfb2:	fb07 6705 	mla	r7, r7, r5, r6
9001cfb6:	10e6      	asrs	r6, r4, #3
9001cfb8:	00e4      	lsls	r4, r4, #3
9001cfba:	9800      	ldr	r0, [sp, #0]
9001cfbc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001cfc0:	b2bf      	uxth	r7, r7
9001cfc2:	b2e4      	uxtb	r4, r4
9001cfc4:	fb06 b605 	mla	r6, r6, r5, fp
9001cfc8:	fb14 f405 	smulbb	r4, r4, r5
9001cfcc:	b2b6      	uxth	r6, r6
9001cfce:	fb08 4809 	mla	r8, r8, r9, r4
9001cfd2:	1c7c      	adds	r4, r7, #1
9001cfd4:	f106 0b01 	add.w	fp, r6, #1
9001cfd8:	fa1f f888 	uxth.w	r8, r8
9001cfdc:	eb04 2717 	add.w	r7, r4, r7, lsr #8
9001cfe0:	f108 0401 	add.w	r4, r8, #1
9001cfe4:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
9001cfe8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001cfec:	eb04 2418 	add.w	r4, r4, r8, lsr #8
9001cff0:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
9001cff4:	f3c4 24c4 	ubfx	r4, r4, #11, #5
9001cff8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001cffc:	4327      	orrs	r7, r4
9001cffe:	ea47 070b 	orr.w	r7, r7, fp
9001d002:	f820 700a 	strh.w	r7, [r0, sl]
9001d006:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001d008:	f10e 3eff 	add.w	lr, lr, #4294967295
9001d00c:	4401      	add	r1, r0
9001d00e:	9814      	ldr	r0, [sp, #80]	; 0x50
9001d010:	4402      	add	r2, r0
9001d012:	e759      	b.n	9001cec8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
9001d014:	b007      	add	sp, #28
9001d016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

9001d01c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d020:	b085      	sub	sp, #20
9001d022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001d026:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001d028:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001d02a:	9203      	str	r2, [sp, #12]
9001d02c:	6870      	ldr	r0, [r6, #4]
9001d02e:	686f      	ldr	r7, [r5, #4]
9001d030:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
9001d034:	3704      	adds	r7, #4
9001d036:	9101      	str	r1, [sp, #4]
9001d038:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001d03c:	fb00 2404 	mla	r4, r0, r4, r2
9001d040:	6832      	ldr	r2, [r6, #0]
9001d042:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001d046:	682a      	ldr	r2, [r5, #0]
9001d048:	9202      	str	r2, [sp, #8]
9001d04a:	9a01      	ldr	r2, [sp, #4]
9001d04c:	2a00      	cmp	r2, #0
9001d04e:	dc03      	bgt.n	9001d058 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001d050:	9a03      	ldr	r2, [sp, #12]
9001d052:	2a00      	cmp	r2, #0
9001d054:	f340 80cc 	ble.w	9001d1f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
9001d058:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001d05a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001d05e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001d062:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001d064:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
9001d068:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001d06c:	2b00      	cmp	r3, #0
9001d06e:	dd0d      	ble.n	9001d08c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001d070:	1406      	asrs	r6, r0, #16
9001d072:	d405      	bmi.n	9001d080 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
9001d074:	454e      	cmp	r6, r9
9001d076:	da03      	bge.n	9001d080 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
9001d078:	1416      	asrs	r6, r2, #16
9001d07a:	d401      	bmi.n	9001d080 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
9001d07c:	4546      	cmp	r6, r8
9001d07e:	db06      	blt.n	9001d08e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001d080:	9e12      	ldr	r6, [sp, #72]	; 0x48
9001d082:	4460      	add	r0, ip
9001d084:	3b01      	subs	r3, #1
9001d086:	3402      	adds	r4, #2
9001d088:	4432      	add	r2, r6
9001d08a:	e7ef      	b.n	9001d06c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
9001d08c:	d00f      	beq.n	9001d0ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001d08e:	1e5e      	subs	r6, r3, #1
9001d090:	fb0c 0e06 	mla	lr, ip, r6, r0
9001d094:	ea5f 4e2e 	movs.w	lr, lr, asr #16
9001d098:	d543      	bpl.n	9001d122 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
9001d09a:	4698      	mov	r8, r3
9001d09c:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
9001d0a0:	f1b8 0f00 	cmp.w	r8, #0
9001d0a4:	dc71      	bgt.n	9001d18a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
9001d0a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d0aa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001d0ae:	9b01      	ldr	r3, [sp, #4]
9001d0b0:	2b00      	cmp	r3, #0
9001d0b2:	f340 809d 	ble.w	9001d1f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
9001d0b6:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d0ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001d0bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d0c0:	eeb0 6a62 	vmov.f32	s12, s5
9001d0c4:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001d0c8:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d0cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d0d0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001d0d4:	eeb0 6a43 	vmov.f32	s12, s6
9001d0d8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d0dc:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001d0e0:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d0e4:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d0e8:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d0ec:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d0f0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d0f4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d0f8:	ee12 2a90 	vmov	r2, s5
9001d0fc:	eef0 2a47 	vmov.f32	s5, s14
9001d100:	fb92 fcf3 	sdiv	ip, r2, r3
9001d104:	ee13 2a10 	vmov	r2, s6
9001d108:	eeb0 3a67 	vmov.f32	s6, s15
9001d10c:	fb92 f3f3 	sdiv	r3, r2, r3
9001d110:	9312      	str	r3, [sp, #72]	; 0x48
9001d112:	9b01      	ldr	r3, [sp, #4]
9001d114:	9a03      	ldr	r2, [sp, #12]
9001d116:	3b01      	subs	r3, #1
9001d118:	9301      	str	r3, [sp, #4]
9001d11a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001d11c:	bf08      	it	eq
9001d11e:	4613      	moveq	r3, r2
9001d120:	e793      	b.n	9001d04a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
9001d122:	45ce      	cmp	lr, r9
9001d124:	dab9      	bge.n	9001d09a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001d126:	9912      	ldr	r1, [sp, #72]	; 0x48
9001d128:	fb01 2606 	mla	r6, r1, r6, r2
9001d12c:	1436      	asrs	r6, r6, #16
9001d12e:	d4b4      	bmi.n	9001d09a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001d130:	4546      	cmp	r6, r8
9001d132:	dab2      	bge.n	9001d09a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001d134:	4698      	mov	r8, r3
9001d136:	46a2      	mov	sl, r4
9001d138:	f1b8 0f00 	cmp.w	r8, #0
9001d13c:	ddb3      	ble.n	9001d0a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
9001d13e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001d142:	1416      	asrs	r6, r2, #16
9001d144:	9902      	ldr	r1, [sp, #8]
9001d146:	ea4f 4e20 	mov.w	lr, r0, asr #16
9001d14a:	f108 38ff 	add.w	r8, r8, #4294967295
9001d14e:	4460      	add	r0, ip
9001d150:	fb09 1606 	mla	r6, r9, r6, r1
9001d154:	4928      	ldr	r1, [pc, #160]	; (9001d1f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
9001d156:	f816 e00e 	ldrb.w	lr, [r6, lr]
9001d15a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
9001d15e:	eb07 0b0e 	add.w	fp, r7, lr
9001d162:	f89b 6001 	ldrb.w	r6, [fp, #1]
9001d166:	f89b 9002 	ldrb.w	r9, [fp, #2]
9001d16a:	00f6      	lsls	r6, r6, #3
9001d16c:	ea01 2909 	and.w	r9, r1, r9, lsl #8
9001d170:	9912      	ldr	r1, [sp, #72]	; 0x48
9001d172:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001d176:	440a      	add	r2, r1
9001d178:	ea49 0606 	orr.w	r6, r9, r6
9001d17c:	f817 900e 	ldrb.w	r9, [r7, lr]
9001d180:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
9001d184:	f82a 6b02 	strh.w	r6, [sl], #2
9001d188:	e7d6      	b.n	9001d138 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9001d18a:	ea5f 4920 	movs.w	r9, r0, asr #16
9001d18e:	d429      	bmi.n	9001d1e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001d190:	68ae      	ldr	r6, [r5, #8]
9001d192:	454e      	cmp	r6, r9
9001d194:	dd26      	ble.n	9001d1e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001d196:	ea5f 4b22 	movs.w	fp, r2, asr #16
9001d19a:	d423      	bmi.n	9001d1e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001d19c:	68e9      	ldr	r1, [r5, #12]
9001d19e:	4559      	cmp	r1, fp
9001d1a0:	dd20      	ble.n	9001d1e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001d1a2:	fa0f fe86 	sxth.w	lr, r6
9001d1a6:	9902      	ldr	r1, [sp, #8]
9001d1a8:	fb0b 1e0e 	mla	lr, fp, lr, r1
9001d1ac:	f06f 0101 	mvn.w	r1, #1
9001d1b0:	f81e e009 	ldrb.w	lr, [lr, r9]
9001d1b4:	fb01 f908 	mul.w	r9, r1, r8
9001d1b8:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
9001d1bc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
9001d1c0:	eb07 060e 	add.w	r6, r7, lr
9001d1c4:	f896 b002 	ldrb.w	fp, [r6, #2]
9001d1c8:	7876      	ldrb	r6, [r6, #1]
9001d1ca:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
9001d1ce:	00f6      	lsls	r6, r6, #3
9001d1d0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001d1d4:	ea4b 0606 	orr.w	r6, fp, r6
9001d1d8:	f817 b00e 	ldrb.w	fp, [r7, lr]
9001d1dc:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
9001d1e0:	f82a 6009 	strh.w	r6, [sl, r9]
9001d1e4:	9912      	ldr	r1, [sp, #72]	; 0x48
9001d1e6:	4460      	add	r0, ip
9001d1e8:	f108 38ff 	add.w	r8, r8, #4294967295
9001d1ec:	440a      	add	r2, r1
9001d1ee:	e757      	b.n	9001d0a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001d1f0:	b005      	add	sp, #20
9001d1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d1f6:	bf00      	nop
9001d1f8:	fffff800 	.word	0xfffff800

9001d1fc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d200:	b087      	sub	sp, #28
9001d202:	468b      	mov	fp, r1
9001d204:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001d208:	9815      	ldr	r0, [sp, #84]	; 0x54
9001d20a:	9204      	str	r2, [sp, #16]
9001d20c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001d210:	6841      	ldr	r1, [r0, #4]
9001d212:	9205      	str	r2, [sp, #20]
9001d214:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
9001d218:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001d21c:	fb01 2404 	mla	r4, r1, r4, r2
9001d220:	6802      	ldr	r2, [r0, #0]
9001d222:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001d226:	f8dc 2000 	ldr.w	r2, [ip]
9001d22a:	9201      	str	r2, [sp, #4]
9001d22c:	f8dc 2004 	ldr.w	r2, [ip, #4]
9001d230:	3204      	adds	r2, #4
9001d232:	9202      	str	r2, [sp, #8]
9001d234:	f1bb 0f00 	cmp.w	fp, #0
9001d238:	dc03      	bgt.n	9001d242 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
9001d23a:	9a04      	ldr	r2, [sp, #16]
9001d23c:	2a00      	cmp	r2, #0
9001d23e:	f340 8138 	ble.w	9001d4b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
9001d242:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001d244:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
9001d248:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001d24c:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001d24e:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
9001d252:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001d256:	2b00      	cmp	r3, #0
9001d258:	dd0e      	ble.n	9001d278 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001d25a:	1402      	asrs	r2, r0, #16
9001d25c:	d405      	bmi.n	9001d26a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001d25e:	42ba      	cmp	r2, r7
9001d260:	da03      	bge.n	9001d26a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001d262:	140a      	asrs	r2, r1, #16
9001d264:	d401      	bmi.n	9001d26a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001d266:	42b2      	cmp	r2, r6
9001d268:	db07      	blt.n	9001d27a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001d26a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d26c:	3b01      	subs	r3, #1
9001d26e:	3402      	adds	r4, #2
9001d270:	4410      	add	r0, r2
9001d272:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d274:	4411      	add	r1, r2
9001d276:	e7ee      	b.n	9001d256 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
9001d278:	d019      	beq.n	9001d2ae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
9001d27a:	1e5a      	subs	r2, r3, #1
9001d27c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001d27e:	fb05 0502 	mla	r5, r5, r2, r0
9001d282:	142d      	asrs	r5, r5, #16
9001d284:	d409      	bmi.n	9001d29a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001d286:	42bd      	cmp	r5, r7
9001d288:	da07      	bge.n	9001d29a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001d28a:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001d28c:	fb05 1202 	mla	r2, r5, r2, r1
9001d290:	1412      	asrs	r2, r2, #16
9001d292:	d402      	bmi.n	9001d29a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001d294:	42b2      	cmp	r2, r6
9001d296:	f2c0 80ac 	blt.w	9001d3f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
9001d29a:	f04f 0e00 	mov.w	lr, #0
9001d29e:	eb03 020e 	add.w	r2, r3, lr
9001d2a2:	2a00      	cmp	r2, #0
9001d2a4:	dc3e      	bgt.n	9001d324 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
9001d2a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d2aa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001d2ae:	f1bb 0f00 	cmp.w	fp, #0
9001d2b2:	f340 80fe 	ble.w	9001d4b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
9001d2b6:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d2ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d2bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d2c0:	f1bb 0b01 	subs.w	fp, fp, #1
9001d2c4:	eeb0 6a62 	vmov.f32	s12, s5
9001d2c8:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001d2cc:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d2d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d2d4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001d2d8:	eeb0 6a43 	vmov.f32	s12, s6
9001d2dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d2e0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001d2e4:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d2e8:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d2ec:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d2f0:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d2f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d2f8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d2fc:	ee12 2a90 	vmov	r2, s5
9001d300:	eef0 2a47 	vmov.f32	s5, s14
9001d304:	fb92 f3f3 	sdiv	r3, r2, r3
9001d308:	ee13 2a10 	vmov	r2, s6
9001d30c:	9313      	str	r3, [sp, #76]	; 0x4c
9001d30e:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d310:	eeb0 3a67 	vmov.f32	s6, s15
9001d314:	fb92 f3f3 	sdiv	r3, r2, r3
9001d318:	9a04      	ldr	r2, [sp, #16]
9001d31a:	9314      	str	r3, [sp, #80]	; 0x50
9001d31c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d31e:	bf08      	it	eq
9001d320:	4613      	moveq	r3, r2
9001d322:	e787      	b.n	9001d234 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9001d324:	1406      	asrs	r6, r0, #16
9001d326:	d45d      	bmi.n	9001d3e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001d328:	f8dc 5008 	ldr.w	r5, [ip, #8]
9001d32c:	42b5      	cmp	r5, r6
9001d32e:	dd59      	ble.n	9001d3e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001d330:	140f      	asrs	r7, r1, #16
9001d332:	d457      	bmi.n	9001d3e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001d334:	f8dc 200c 	ldr.w	r2, [ip, #12]
9001d338:	42ba      	cmp	r2, r7
9001d33a:	dd53      	ble.n	9001d3e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001d33c:	9a01      	ldr	r2, [sp, #4]
9001d33e:	b22d      	sxth	r5, r5
9001d340:	fb07 2505 	mla	r5, r7, r5, r2
9001d344:	5daa      	ldrb	r2, [r5, r6]
9001d346:	9d02      	ldr	r5, [sp, #8]
9001d348:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
9001d34c:	0e2e      	lsrs	r6, r5, #24
9001d34e:	d049      	beq.n	9001d3e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001d350:	f06f 0201 	mvn.w	r2, #1
9001d354:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001d358:	fb02 f20e 	mul.w	r2, r2, lr
9001d35c:	f834 8002 	ldrh.w	r8, [r4, r2]
9001d360:	9203      	str	r2, [sp, #12]
9001d362:	9a05      	ldr	r2, [sp, #20]
9001d364:	ea4f 2728 	mov.w	r7, r8, asr #8
9001d368:	4356      	muls	r6, r2
9001d36a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001d36e:	1c72      	adds	r2, r6, #1
9001d370:	eb02 2226 	add.w	r2, r2, r6, asr #8
9001d374:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001d378:	b2ed      	uxtb	r5, r5
9001d37a:	1212      	asrs	r2, r2, #8
9001d37c:	fa1f f982 	uxth.w	r9, r2
9001d380:	43d2      	mvns	r2, r2
9001d382:	fb16 f609 	smulbb	r6, r6, r9
9001d386:	b2d2      	uxtb	r2, r2
9001d388:	fb15 f509 	smulbb	r5, r5, r9
9001d38c:	fb07 6702 	mla	r7, r7, r2, r6
9001d390:	ea4f 06e8 	mov.w	r6, r8, asr #3
9001d394:	fb1a fa09 	smulbb	sl, sl, r9
9001d398:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001d39c:	b2bf      	uxth	r7, r7
9001d39e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001d3a2:	fa5f f888 	uxtb.w	r8, r8
9001d3a6:	fb06 a602 	mla	r6, r6, r2, sl
9001d3aa:	fb08 5502 	mla	r5, r8, r2, r5
9001d3ae:	1c7a      	adds	r2, r7, #1
9001d3b0:	b2b6      	uxth	r6, r6
9001d3b2:	b2ad      	uxth	r5, r5
9001d3b4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001d3b8:	9a03      	ldr	r2, [sp, #12]
9001d3ba:	f105 0a01 	add.w	sl, r5, #1
9001d3be:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001d3c2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001d3c6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001d3ca:	ea47 070a 	orr.w	r7, r7, sl
9001d3ce:	f106 0a01 	add.w	sl, r6, #1
9001d3d2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001d3d6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d3da:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d3de:	ea47 070a 	orr.w	r7, r7, sl
9001d3e2:	52a7      	strh	r7, [r4, r2]
9001d3e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d3e6:	f10e 3eff 	add.w	lr, lr, #4294967295
9001d3ea:	4410      	add	r0, r2
9001d3ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d3ee:	4411      	add	r1, r2
9001d3f0:	e755      	b.n	9001d29e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001d3f2:	f04f 0800 	mov.w	r8, #0
9001d3f6:	eba3 0208 	sub.w	r2, r3, r8
9001d3fa:	2a00      	cmp	r2, #0
9001d3fc:	f77f af53 	ble.w	9001d2a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
9001d400:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
9001d404:	140a      	asrs	r2, r1, #16
9001d406:	9f01      	ldr	r7, [sp, #4]
9001d408:	1405      	asrs	r5, r0, #16
9001d40a:	fb06 7202 	mla	r2, r6, r2, r7
9001d40e:	5d52      	ldrb	r2, [r2, r5]
9001d410:	9d02      	ldr	r5, [sp, #8]
9001d412:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
9001d416:	0e2e      	lsrs	r6, r5, #24
9001d418:	d044      	beq.n	9001d4a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
9001d41a:	9a05      	ldr	r2, [sp, #20]
9001d41c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001d420:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
9001d424:	4356      	muls	r6, r2
9001d426:	ea4f 272e 	mov.w	r7, lr, asr #8
9001d42a:	1c72      	adds	r2, r6, #1
9001d42c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001d430:	eb02 2226 	add.w	r2, r2, r6, asr #8
9001d434:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001d438:	b2ed      	uxtb	r5, r5
9001d43a:	1212      	asrs	r2, r2, #8
9001d43c:	fa1f f982 	uxth.w	r9, r2
9001d440:	43d2      	mvns	r2, r2
9001d442:	fb16 f609 	smulbb	r6, r6, r9
9001d446:	b2d2      	uxtb	r2, r2
9001d448:	fb15 f509 	smulbb	r5, r5, r9
9001d44c:	fb07 6702 	mla	r7, r7, r2, r6
9001d450:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001d454:	fb1a fa09 	smulbb	sl, sl, r9
9001d458:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001d45c:	b2bf      	uxth	r7, r7
9001d45e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001d462:	fa5f fe8e 	uxtb.w	lr, lr
9001d466:	fb06 a602 	mla	r6, r6, r2, sl
9001d46a:	fb0e 5502 	mla	r5, lr, r2, r5
9001d46e:	1c7a      	adds	r2, r7, #1
9001d470:	b2b6      	uxth	r6, r6
9001d472:	b2ad      	uxth	r5, r5
9001d474:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001d478:	f105 0a01 	add.w	sl, r5, #1
9001d47c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001d480:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001d484:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001d488:	ea47 070a 	orr.w	r7, r7, sl
9001d48c:	f106 0a01 	add.w	sl, r6, #1
9001d490:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001d494:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d498:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d49c:	ea47 070a 	orr.w	r7, r7, sl
9001d4a0:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
9001d4a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d4a6:	f108 0801 	add.w	r8, r8, #1
9001d4aa:	4410      	add	r0, r2
9001d4ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d4ae:	4411      	add	r1, r2
9001d4b0:	e7a1      	b.n	9001d3f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
9001d4b2:	b007      	add	sp, #28
9001d4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001d4b8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d4bc:	b085      	sub	sp, #20
9001d4be:	468b      	mov	fp, r1
9001d4c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001d4c4:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001d4c6:	9203      	str	r2, [sp, #12]
9001d4c8:	6841      	ldr	r1, [r0, #4]
9001d4ca:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
9001d4ce:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001d4d2:	fb01 2404 	mla	r4, r1, r4, r2
9001d4d6:	6802      	ldr	r2, [r0, #0]
9001d4d8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001d4dc:	f8de 2000 	ldr.w	r2, [lr]
9001d4e0:	9200      	str	r2, [sp, #0]
9001d4e2:	f8de 2004 	ldr.w	r2, [lr, #4]
9001d4e6:	3204      	adds	r2, #4
9001d4e8:	9201      	str	r2, [sp, #4]
9001d4ea:	f1bb 0f00 	cmp.w	fp, #0
9001d4ee:	dc03      	bgt.n	9001d4f8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
9001d4f0:	9a03      	ldr	r2, [sp, #12]
9001d4f2:	2a00      	cmp	r2, #0
9001d4f4:	f340 8153 	ble.w	9001d79e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
9001d4f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001d4fa:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001d4fe:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001d502:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001d504:	f9be 600c 	ldrsh.w	r6, [lr, #12]
9001d508:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001d50c:	2b00      	cmp	r3, #0
9001d50e:	dd0e      	ble.n	9001d52e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001d510:	1408      	asrs	r0, r1, #16
9001d512:	d405      	bmi.n	9001d520 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001d514:	42b8      	cmp	r0, r7
9001d516:	da03      	bge.n	9001d520 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001d518:	1410      	asrs	r0, r2, #16
9001d51a:	d401      	bmi.n	9001d520 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001d51c:	42b0      	cmp	r0, r6
9001d51e:	db07      	blt.n	9001d530 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001d520:	9811      	ldr	r0, [sp, #68]	; 0x44
9001d522:	3b01      	subs	r3, #1
9001d524:	3402      	adds	r4, #2
9001d526:	4401      	add	r1, r0
9001d528:	9812      	ldr	r0, [sp, #72]	; 0x48
9001d52a:	4402      	add	r2, r0
9001d52c:	e7ee      	b.n	9001d50c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
9001d52e:	d017      	beq.n	9001d560 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
9001d530:	1e58      	subs	r0, r3, #1
9001d532:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001d534:	fb05 1500 	mla	r5, r5, r0, r1
9001d538:	142d      	asrs	r5, r5, #16
9001d53a:	d409      	bmi.n	9001d550 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001d53c:	42bd      	cmp	r5, r7
9001d53e:	da07      	bge.n	9001d550 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001d540:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001d542:	fb05 2000 	mla	r0, r5, r0, r2
9001d546:	1400      	asrs	r0, r0, #16
9001d548:	d402      	bmi.n	9001d550 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001d54a:	42b0      	cmp	r0, r6
9001d54c:	f2c0 80bc 	blt.w	9001d6c8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
9001d550:	2600      	movs	r6, #0
9001d552:	1998      	adds	r0, r3, r6
9001d554:	2800      	cmp	r0, #0
9001d556:	dc3e      	bgt.n	9001d5d6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
9001d558:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d55c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001d560:	f1bb 0f00 	cmp.w	fp, #0
9001d564:	f340 811b 	ble.w	9001d79e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
9001d568:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d56c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001d56e:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d572:	f1bb 0b01 	subs.w	fp, fp, #1
9001d576:	eeb0 6a62 	vmov.f32	s12, s5
9001d57a:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001d57e:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d582:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d586:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001d58a:	eeb0 6a43 	vmov.f32	s12, s6
9001d58e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d592:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001d596:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d59a:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d59e:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d5a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d5a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d5aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d5ae:	ee12 2a90 	vmov	r2, s5
9001d5b2:	eef0 2a47 	vmov.f32	s5, s14
9001d5b6:	fb92 f3f3 	sdiv	r3, r2, r3
9001d5ba:	ee13 2a10 	vmov	r2, s6
9001d5be:	9311      	str	r3, [sp, #68]	; 0x44
9001d5c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001d5c2:	eeb0 3a67 	vmov.f32	s6, s15
9001d5c6:	fb92 f3f3 	sdiv	r3, r2, r3
9001d5ca:	9a03      	ldr	r2, [sp, #12]
9001d5cc:	9312      	str	r3, [sp, #72]	; 0x48
9001d5ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001d5d0:	bf08      	it	eq
9001d5d2:	4613      	moveq	r3, r2
9001d5d4:	e789      	b.n	9001d4ea <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9001d5d6:	140f      	asrs	r7, r1, #16
9001d5d8:	d45e      	bmi.n	9001d698 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001d5da:	f8de 5008 	ldr.w	r5, [lr, #8]
9001d5de:	42bd      	cmp	r5, r7
9001d5e0:	dd5a      	ble.n	9001d698 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001d5e2:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001d5e6:	d457      	bmi.n	9001d698 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001d5e8:	f8de 000c 	ldr.w	r0, [lr, #12]
9001d5ec:	4560      	cmp	r0, ip
9001d5ee:	dd53      	ble.n	9001d698 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001d5f0:	9800      	ldr	r0, [sp, #0]
9001d5f2:	b22d      	sxth	r5, r5
9001d5f4:	fb0c 0505 	mla	r5, ip, r5, r0
9001d5f8:	5de8      	ldrb	r0, [r5, r7]
9001d5fa:	9d01      	ldr	r5, [sp, #4]
9001d5fc:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
9001d600:	0e07      	lsrs	r7, r0, #24
9001d602:	2fff      	cmp	r7, #255	; 0xff
9001d604:	d04e      	beq.n	9001d6a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
9001d606:	b2fd      	uxtb	r5, r7
9001d608:	2f00      	cmp	r7, #0
9001d60a:	d045      	beq.n	9001d698 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001d60c:	f06f 0701 	mvn.w	r7, #1
9001d610:	fa1f f985 	uxth.w	r9, r5
9001d614:	43ed      	mvns	r5, r5
9001d616:	f3c0 2a07 	ubfx	sl, r0, #8, #8
9001d61a:	4377      	muls	r7, r6
9001d61c:	fb1a fa09 	smulbb	sl, sl, r9
9001d620:	b2ed      	uxtb	r5, r5
9001d622:	f834 8007 	ldrh.w	r8, [r4, r7]
9001d626:	9702      	str	r7, [sp, #8]
9001d628:	f3c0 4707 	ubfx	r7, r0, #16, #8
9001d62c:	ea4f 2c28 	mov.w	ip, r8, asr #8
9001d630:	fb17 f709 	smulbb	r7, r7, r9
9001d634:	b2c0      	uxtb	r0, r0
9001d636:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001d63a:	fb10 f009 	smulbb	r0, r0, r9
9001d63e:	fb0c 7c05 	mla	ip, ip, r5, r7
9001d642:	ea4f 07e8 	mov.w	r7, r8, asr #3
9001d646:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001d64a:	fa1f fc8c 	uxth.w	ip, ip
9001d64e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001d652:	fa5f f888 	uxtb.w	r8, r8
9001d656:	fb07 a705 	mla	r7, r7, r5, sl
9001d65a:	fb08 0005 	mla	r0, r8, r5, r0
9001d65e:	f10c 0501 	add.w	r5, ip, #1
9001d662:	b2bf      	uxth	r7, r7
9001d664:	b280      	uxth	r0, r0
9001d666:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001d66a:	f100 0a01 	add.w	sl, r0, #1
9001d66e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001d672:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
9001d676:	9802      	ldr	r0, [sp, #8]
9001d678:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001d67c:	ea4c 0c0a 	orr.w	ip, ip, sl
9001d680:	f107 0a01 	add.w	sl, r7, #1
9001d684:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001d688:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d68c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d690:	ea4c 0c0a 	orr.w	ip, ip, sl
9001d694:	f824 c000 	strh.w	ip, [r4, r0]
9001d698:	9811      	ldr	r0, [sp, #68]	; 0x44
9001d69a:	3e01      	subs	r6, #1
9001d69c:	4401      	add	r1, r0
9001d69e:	9812      	ldr	r0, [sp, #72]	; 0x48
9001d6a0:	4402      	add	r2, r0
9001d6a2:	e756      	b.n	9001d552 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001d6a4:	f06f 0501 	mvn.w	r5, #1
9001d6a8:	fb05 f706 	mul.w	r7, r5, r6
9001d6ac:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
9001d6b0:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
9001d6b4:	0945      	lsrs	r5, r0, #5
9001d6b6:	f3c0 00c4 	ubfx	r0, r0, #3, #5
9001d6ba:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001d6be:	ea4c 0505 	orr.w	r5, ip, r5
9001d6c2:	4305      	orrs	r5, r0
9001d6c4:	53e5      	strh	r5, [r4, r7]
9001d6c6:	e7e7      	b.n	9001d698 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001d6c8:	f04f 0800 	mov.w	r8, #0
9001d6cc:	eba3 0008 	sub.w	r0, r3, r8
9001d6d0:	2800      	cmp	r0, #0
9001d6d2:	f77f af41 	ble.w	9001d558 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001d6d6:	f9be 6008 	ldrsh.w	r6, [lr, #8]
9001d6da:	1410      	asrs	r0, r2, #16
9001d6dc:	9f00      	ldr	r7, [sp, #0]
9001d6de:	140d      	asrs	r5, r1, #16
9001d6e0:	fb06 7000 	mla	r0, r6, r0, r7
9001d6e4:	5d40      	ldrb	r0, [r0, r5]
9001d6e6:	9d01      	ldr	r5, [sp, #4]
9001d6e8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
9001d6ec:	0e06      	lsrs	r6, r0, #24
9001d6ee:	2eff      	cmp	r6, #255	; 0xff
9001d6f0:	d048      	beq.n	9001d784 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
9001d6f2:	b2f5      	uxtb	r5, r6
9001d6f4:	2e00      	cmp	r6, #0
9001d6f6:	d03e      	beq.n	9001d776 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
9001d6f8:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
9001d6fc:	fa1f f985 	uxth.w	r9, r5
9001d700:	f3c0 4607 	ubfx	r6, r0, #16, #8
9001d704:	43ed      	mvns	r5, r5
9001d706:	ea4f 272c 	mov.w	r7, ip, asr #8
9001d70a:	f3c0 2a07 	ubfx	sl, r0, #8, #8
9001d70e:	fb16 f609 	smulbb	r6, r6, r9
9001d712:	b2ed      	uxtb	r5, r5
9001d714:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001d718:	b2c0      	uxtb	r0, r0
9001d71a:	fb1a fa09 	smulbb	sl, sl, r9
9001d71e:	fb07 6705 	mla	r7, r7, r5, r6
9001d722:	ea4f 06ec 	mov.w	r6, ip, asr #3
9001d726:	fb10 f009 	smulbb	r0, r0, r9
9001d72a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001d72e:	b2bf      	uxth	r7, r7
9001d730:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001d734:	fa5f fc8c 	uxtb.w	ip, ip
9001d738:	fb06 a605 	mla	r6, r6, r5, sl
9001d73c:	fb0c 0005 	mla	r0, ip, r5, r0
9001d740:	1c7d      	adds	r5, r7, #1
9001d742:	b2b6      	uxth	r6, r6
9001d744:	b280      	uxth	r0, r0
9001d746:	eb05 2717 	add.w	r7, r5, r7, lsr #8
9001d74a:	f100 0a01 	add.w	sl, r0, #1
9001d74e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001d752:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
9001d756:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001d75a:	ea47 070a 	orr.w	r7, r7, sl
9001d75e:	f106 0a01 	add.w	sl, r6, #1
9001d762:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001d766:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d76a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d76e:	ea47 070a 	orr.w	r7, r7, sl
9001d772:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
9001d776:	9811      	ldr	r0, [sp, #68]	; 0x44
9001d778:	f108 0801 	add.w	r8, r8, #1
9001d77c:	4401      	add	r1, r0
9001d77e:	9812      	ldr	r0, [sp, #72]	; 0x48
9001d780:	4402      	add	r2, r0
9001d782:	e7a3      	b.n	9001d6cc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001d784:	4d07      	ldr	r5, [pc, #28]	; (9001d7a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
9001d786:	ea05 2610 	and.w	r6, r5, r0, lsr #8
9001d78a:	0945      	lsrs	r5, r0, #5
9001d78c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
9001d790:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001d794:	4335      	orrs	r5, r6
9001d796:	4305      	orrs	r5, r0
9001d798:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
9001d79c:	e7eb      	b.n	9001d776 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
9001d79e:	b005      	add	sp, #20
9001d7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d7a4:	fffff800 	.word	0xfffff800

9001d7a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d7ac:	b087      	sub	sp, #28
9001d7ae:	468b      	mov	fp, r1
9001d7b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001d7b4:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001d7b6:	9204      	str	r2, [sp, #16]
9001d7b8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001d7bc:	6861      	ldr	r1, [r4, #4]
9001d7be:	9205      	str	r2, [sp, #20]
9001d7c0:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
9001d7c4:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
9001d7c8:	fb01 2000 	mla	r0, r1, r0, r2
9001d7cc:	6822      	ldr	r2, [r4, #0]
9001d7ce:	eb02 0040 	add.w	r0, r2, r0, lsl #1
9001d7d2:	f8de 2000 	ldr.w	r2, [lr]
9001d7d6:	9201      	str	r2, [sp, #4]
9001d7d8:	f8de 2004 	ldr.w	r2, [lr, #4]
9001d7dc:	9202      	str	r2, [sp, #8]
9001d7de:	f1bb 0f00 	cmp.w	fp, #0
9001d7e2:	dc03      	bgt.n	9001d7ec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
9001d7e4:	9a04      	ldr	r2, [sp, #16]
9001d7e6:	2a00      	cmp	r2, #0
9001d7e8:	f340 8142 	ble.w	9001da70 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
9001d7ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001d7ee:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001d7f2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001d7f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001d7f8:	f9be 600c 	ldrsh.w	r6, [lr, #12]
9001d7fc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001d800:	2b00      	cmp	r3, #0
9001d802:	dd0e      	ble.n	9001d822 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001d804:	140c      	asrs	r4, r1, #16
9001d806:	d405      	bmi.n	9001d814 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001d808:	42bc      	cmp	r4, r7
9001d80a:	da03      	bge.n	9001d814 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001d80c:	1414      	asrs	r4, r2, #16
9001d80e:	d401      	bmi.n	9001d814 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001d810:	42b4      	cmp	r4, r6
9001d812:	db07      	blt.n	9001d824 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001d814:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001d816:	3b01      	subs	r3, #1
9001d818:	3002      	adds	r0, #2
9001d81a:	4421      	add	r1, r4
9001d81c:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001d81e:	4422      	add	r2, r4
9001d820:	e7ee      	b.n	9001d800 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001d822:	d019      	beq.n	9001d858 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
9001d824:	1e5c      	subs	r4, r3, #1
9001d826:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001d828:	fb05 1504 	mla	r5, r5, r4, r1
9001d82c:	142d      	asrs	r5, r5, #16
9001d82e:	d409      	bmi.n	9001d844 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001d830:	42bd      	cmp	r5, r7
9001d832:	da07      	bge.n	9001d844 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001d834:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001d836:	fb05 2404 	mla	r4, r5, r4, r2
9001d83a:	1424      	asrs	r4, r4, #16
9001d83c:	d402      	bmi.n	9001d844 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001d83e:	42b4      	cmp	r4, r6
9001d840:	f2c0 80b1 	blt.w	9001d9a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
9001d844:	f04f 0800 	mov.w	r8, #0
9001d848:	eb03 0408 	add.w	r4, r3, r8
9001d84c:	2c00      	cmp	r4, #0
9001d84e:	dc3e      	bgt.n	9001d8ce <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
9001d850:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d854:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001d858:	f1bb 0f00 	cmp.w	fp, #0
9001d85c:	f340 8108 	ble.w	9001da70 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
9001d860:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d864:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d866:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d86a:	f1bb 0b01 	subs.w	fp, fp, #1
9001d86e:	eeb0 6a62 	vmov.f32	s12, s5
9001d872:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001d876:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d87a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d87e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001d882:	eeb0 6a43 	vmov.f32	s12, s6
9001d886:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d88a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001d88e:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d892:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d896:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d89a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d89e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d8a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d8a6:	ee12 2a90 	vmov	r2, s5
9001d8aa:	eef0 2a47 	vmov.f32	s5, s14
9001d8ae:	fb92 f3f3 	sdiv	r3, r2, r3
9001d8b2:	ee13 2a10 	vmov	r2, s6
9001d8b6:	9313      	str	r3, [sp, #76]	; 0x4c
9001d8b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d8ba:	eeb0 3a67 	vmov.f32	s6, s15
9001d8be:	fb92 f3f3 	sdiv	r3, r2, r3
9001d8c2:	9a04      	ldr	r2, [sp, #16]
9001d8c4:	9314      	str	r3, [sp, #80]	; 0x50
9001d8c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d8c8:	bf08      	it	eq
9001d8ca:	4613      	moveq	r3, r2
9001d8cc:	e787      	b.n	9001d7de <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
9001d8ce:	140e      	asrs	r6, r1, #16
9001d8d0:	d462      	bmi.n	9001d998 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001d8d2:	f8de 5008 	ldr.w	r5, [lr, #8]
9001d8d6:	42b5      	cmp	r5, r6
9001d8d8:	dd5e      	ble.n	9001d998 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001d8da:	1417      	asrs	r7, r2, #16
9001d8dc:	d45c      	bmi.n	9001d998 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001d8de:	f8de 400c 	ldr.w	r4, [lr, #12]
9001d8e2:	42bc      	cmp	r4, r7
9001d8e4:	dd58      	ble.n	9001d998 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001d8e6:	b22d      	sxth	r5, r5
9001d8e8:	9c02      	ldr	r4, [sp, #8]
9001d8ea:	fb07 6505 	mla	r5, r7, r5, r6
9001d8ee:	5d66      	ldrb	r6, [r4, r5]
9001d8f0:	2e00      	cmp	r6, #0
9001d8f2:	d051      	beq.n	9001d998 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001d8f4:	9c01      	ldr	r4, [sp, #4]
9001d8f6:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
9001d8fa:	f06f 0401 	mvn.w	r4, #1
9001d8fe:	fb04 f408 	mul.w	r4, r4, r8
9001d902:	ea4f 2c29 	mov.w	ip, r9, asr #8
9001d906:	5b05      	ldrh	r5, [r0, r4]
9001d908:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001d90c:	9403      	str	r4, [sp, #12]
9001d90e:	9c05      	ldr	r4, [sp, #20]
9001d910:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001d914:	4366      	muls	r6, r4
9001d916:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001d91a:	1c74      	adds	r4, r6, #1
9001d91c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
9001d920:	122e      	asrs	r6, r5, #8
9001d922:	1224      	asrs	r4, r4, #8
9001d924:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001d928:	00ed      	lsls	r5, r5, #3
9001d92a:	b2a7      	uxth	r7, r4
9001d92c:	43e4      	mvns	r4, r4
9001d92e:	b2ed      	uxtb	r5, r5
9001d930:	b2e4      	uxtb	r4, r4
9001d932:	fb16 f604 	smulbb	r6, r6, r4
9001d936:	fb15 f504 	smulbb	r5, r5, r4
9001d93a:	fb0c 6c07 	mla	ip, ip, r7, r6
9001d93e:	ea4f 06e9 	mov.w	r6, r9, asr #3
9001d942:	fb1a fa04 	smulbb	sl, sl, r4
9001d946:	ea4f 09c9 	mov.w	r9, r9, lsl #3
9001d94a:	fa1f fc8c 	uxth.w	ip, ip
9001d94e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001d952:	fa5f f989 	uxtb.w	r9, r9
9001d956:	fb06 a607 	mla	r6, r6, r7, sl
9001d95a:	f10c 0401 	add.w	r4, ip, #1
9001d95e:	fb09 5507 	mla	r5, r9, r7, r5
9001d962:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
9001d966:	9c03      	ldr	r4, [sp, #12]
9001d968:	b2ad      	uxth	r5, r5
9001d96a:	b2b6      	uxth	r6, r6
9001d96c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001d970:	f105 0a01 	add.w	sl, r5, #1
9001d974:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001d978:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001d97c:	ea4c 0c0a 	orr.w	ip, ip, sl
9001d980:	f106 0a01 	add.w	sl, r6, #1
9001d984:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001d988:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d98c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d990:	ea4c 0c0a 	orr.w	ip, ip, sl
9001d994:	f820 c004 	strh.w	ip, [r0, r4]
9001d998:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001d99a:	f108 38ff 	add.w	r8, r8, #4294967295
9001d99e:	4421      	add	r1, r4
9001d9a0:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001d9a2:	4422      	add	r2, r4
9001d9a4:	e750      	b.n	9001d848 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001d9a6:	f04f 0900 	mov.w	r9, #0
9001d9aa:	eba3 0409 	sub.w	r4, r3, r9
9001d9ae:	2c00      	cmp	r4, #0
9001d9b0:	f77f af4e 	ble.w	9001d850 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
9001d9b4:	f9be 6008 	ldrsh.w	r6, [lr, #8]
9001d9b8:	140d      	asrs	r5, r1, #16
9001d9ba:	1414      	asrs	r4, r2, #16
9001d9bc:	fb06 5404 	mla	r4, r6, r4, r5
9001d9c0:	9d02      	ldr	r5, [sp, #8]
9001d9c2:	5d2e      	ldrb	r6, [r5, r4]
9001d9c4:	2e00      	cmp	r6, #0
9001d9c6:	d04c      	beq.n	9001da62 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
9001d9c8:	9d01      	ldr	r5, [sp, #4]
9001d9ca:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
9001d9ce:	9c05      	ldr	r4, [sp, #20]
9001d9d0:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
9001d9d4:	ea4f 2c28 	mov.w	ip, r8, asr #8
9001d9d8:	4366      	muls	r6, r4
9001d9da:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001d9de:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001d9e2:	1c74      	adds	r4, r6, #1
9001d9e4:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001d9e8:	eb04 2416 	add.w	r4, r4, r6, lsr #8
9001d9ec:	122e      	asrs	r6, r5, #8
9001d9ee:	1224      	asrs	r4, r4, #8
9001d9f0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001d9f4:	00ed      	lsls	r5, r5, #3
9001d9f6:	b2a7      	uxth	r7, r4
9001d9f8:	43e4      	mvns	r4, r4
9001d9fa:	b2ed      	uxtb	r5, r5
9001d9fc:	b2e4      	uxtb	r4, r4
9001d9fe:	fb16 f604 	smulbb	r6, r6, r4
9001da02:	fb15 f504 	smulbb	r5, r5, r4
9001da06:	fb0c 6c07 	mla	ip, ip, r7, r6
9001da0a:	ea4f 06e8 	mov.w	r6, r8, asr #3
9001da0e:	fb1a fa04 	smulbb	sl, sl, r4
9001da12:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001da16:	fa1f fc8c 	uxth.w	ip, ip
9001da1a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001da1e:	fa5f f888 	uxtb.w	r8, r8
9001da22:	fb06 a607 	mla	r6, r6, r7, sl
9001da26:	f10c 0401 	add.w	r4, ip, #1
9001da2a:	fb08 5507 	mla	r5, r8, r7, r5
9001da2e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
9001da32:	b2ad      	uxth	r5, r5
9001da34:	b2b6      	uxth	r6, r6
9001da36:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001da3a:	f105 0a01 	add.w	sl, r5, #1
9001da3e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001da42:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001da46:	ea4c 0c0a 	orr.w	ip, ip, sl
9001da4a:	f106 0a01 	add.w	sl, r6, #1
9001da4e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001da52:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001da56:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001da5a:	ea4c 0c0a 	orr.w	ip, ip, sl
9001da5e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
9001da62:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001da64:	f109 0901 	add.w	r9, r9, #1
9001da68:	4421      	add	r1, r4
9001da6a:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001da6c:	4422      	add	r2, r4
9001da6e:	e79c      	b.n	9001d9aa <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
9001da70:	b007      	add	sp, #28
9001da72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001da76 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001da76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001da7a:	b085      	sub	sp, #20
9001da7c:	468b      	mov	fp, r1
9001da7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001da82:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001da84:	9203      	str	r2, [sp, #12]
9001da86:	6861      	ldr	r1, [r4, #4]
9001da88:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
9001da8c:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
9001da90:	fb01 2000 	mla	r0, r1, r0, r2
9001da94:	6822      	ldr	r2, [r4, #0]
9001da96:	eb02 0040 	add.w	r0, r2, r0, lsl #1
9001da9a:	f8d8 2000 	ldr.w	r2, [r8]
9001da9e:	9200      	str	r2, [sp, #0]
9001daa0:	f8d8 2004 	ldr.w	r2, [r8, #4]
9001daa4:	9201      	str	r2, [sp, #4]
9001daa6:	f1bb 0f00 	cmp.w	fp, #0
9001daaa:	dc03      	bgt.n	9001dab4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001daac:	9a03      	ldr	r2, [sp, #12]
9001daae:	2a00      	cmp	r2, #0
9001dab0:	f340 8146 	ble.w	9001dd40 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
9001dab4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001dab6:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
9001daba:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001dabe:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001dac0:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
9001dac4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001dac8:	2b00      	cmp	r3, #0
9001daca:	dd0e      	ble.n	9001daea <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
9001dacc:	140c      	asrs	r4, r1, #16
9001dace:	d405      	bmi.n	9001dadc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001dad0:	42bc      	cmp	r4, r7
9001dad2:	da03      	bge.n	9001dadc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001dad4:	1414      	asrs	r4, r2, #16
9001dad6:	d401      	bmi.n	9001dadc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001dad8:	42b4      	cmp	r4, r6
9001dada:	db07      	blt.n	9001daec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001dadc:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001dade:	3b01      	subs	r3, #1
9001dae0:	3002      	adds	r0, #2
9001dae2:	4421      	add	r1, r4
9001dae4:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001dae6:	4422      	add	r2, r4
9001dae8:	e7ee      	b.n	9001dac8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001daea:	d017      	beq.n	9001db1c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
9001daec:	1e5c      	subs	r4, r3, #1
9001daee:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001daf0:	fb05 1504 	mla	r5, r5, r4, r1
9001daf4:	142d      	asrs	r5, r5, #16
9001daf6:	d409      	bmi.n	9001db0c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001daf8:	42bd      	cmp	r5, r7
9001dafa:	da07      	bge.n	9001db0c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001dafc:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001dafe:	fb05 2404 	mla	r4, r5, r4, r2
9001db02:	1424      	asrs	r4, r4, #16
9001db04:	d402      	bmi.n	9001db0c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001db06:	42b4      	cmp	r4, r6
9001db08:	f2c0 80b3 	blt.w	9001dc72 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
9001db0c:	2600      	movs	r6, #0
9001db0e:	199c      	adds	r4, r3, r6
9001db10:	2c00      	cmp	r4, #0
9001db12:	dc3e      	bgt.n	9001db92 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9001db14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001db18:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001db1c:	f1bb 0f00 	cmp.w	fp, #0
9001db20:	f340 810e 	ble.w	9001dd40 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
9001db24:	ee30 0a04 	vadd.f32	s0, s0, s8
9001db28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001db2a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001db2e:	f1bb 0b01 	subs.w	fp, fp, #1
9001db32:	eeb0 6a62 	vmov.f32	s12, s5
9001db36:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001db3a:	ee31 1a05 	vadd.f32	s2, s2, s10
9001db3e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001db42:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001db46:	eeb0 6a43 	vmov.f32	s12, s6
9001db4a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001db4e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001db52:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001db56:	ee61 7a27 	vmul.f32	s15, s2, s15
9001db5a:	ee77 2a62 	vsub.f32	s5, s14, s5
9001db5e:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001db62:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001db66:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001db6a:	ee12 2a90 	vmov	r2, s5
9001db6e:	eef0 2a47 	vmov.f32	s5, s14
9001db72:	fb92 f3f3 	sdiv	r3, r2, r3
9001db76:	ee13 2a10 	vmov	r2, s6
9001db7a:	9311      	str	r3, [sp, #68]	; 0x44
9001db7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001db7e:	eeb0 3a67 	vmov.f32	s6, s15
9001db82:	fb92 f3f3 	sdiv	r3, r2, r3
9001db86:	9a03      	ldr	r2, [sp, #12]
9001db88:	9312      	str	r3, [sp, #72]	; 0x48
9001db8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001db8c:	bf08      	it	eq
9001db8e:	4613      	moveq	r3, r2
9001db90:	e789      	b.n	9001daa6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001db92:	140f      	asrs	r7, r1, #16
9001db94:	d45f      	bmi.n	9001dc56 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001db96:	f8d8 5008 	ldr.w	r5, [r8, #8]
9001db9a:	42bd      	cmp	r5, r7
9001db9c:	dd5b      	ble.n	9001dc56 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001db9e:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001dba2:	d458      	bmi.n	9001dc56 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001dba4:	f8d8 400c 	ldr.w	r4, [r8, #12]
9001dba8:	4564      	cmp	r4, ip
9001dbaa:	dd54      	ble.n	9001dc56 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001dbac:	b22d      	sxth	r5, r5
9001dbae:	9c01      	ldr	r4, [sp, #4]
9001dbb0:	fb0c 7505 	mla	r5, ip, r5, r7
9001dbb4:	5d64      	ldrb	r4, [r4, r5]
9001dbb6:	2cff      	cmp	r4, #255	; 0xff
9001dbb8:	d053      	beq.n	9001dc62 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
9001dbba:	2c00      	cmp	r4, #0
9001dbbc:	d04b      	beq.n	9001dc56 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001dbbe:	9f00      	ldr	r7, [sp, #0]
9001dbc0:	fa1f fc84 	uxth.w	ip, r4
9001dbc4:	43e4      	mvns	r4, r4
9001dbc6:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
9001dbca:	f06f 0501 	mvn.w	r5, #1
9001dbce:	b2e4      	uxtb	r4, r4
9001dbd0:	4375      	muls	r5, r6
9001dbd2:	ea4f 2e29 	mov.w	lr, r9, asr #8
9001dbd6:	9502      	str	r5, [sp, #8]
9001dbd8:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9001dbdc:	5b45      	ldrh	r5, [r0, r5]
9001dbde:	122f      	asrs	r7, r5, #8
9001dbe0:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001dbe4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001dbe8:	00ed      	lsls	r5, r5, #3
9001dbea:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001dbee:	fb17 f704 	smulbb	r7, r7, r4
9001dbf2:	b2ed      	uxtb	r5, r5
9001dbf4:	fb1a fa04 	smulbb	sl, sl, r4
9001dbf8:	fb0e 7e0c 	mla	lr, lr, ip, r7
9001dbfc:	ea4f 07e9 	mov.w	r7, r9, asr #3
9001dc00:	fb15 f504 	smulbb	r5, r5, r4
9001dc04:	ea4f 09c9 	mov.w	r9, r9, lsl #3
9001dc08:	fa1f fe8e 	uxth.w	lr, lr
9001dc0c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001dc10:	fa5f f989 	uxtb.w	r9, r9
9001dc14:	fb07 a70c 	mla	r7, r7, ip, sl
9001dc18:	f10e 0401 	add.w	r4, lr, #1
9001dc1c:	fb09 550c 	mla	r5, r9, ip, r5
9001dc20:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
9001dc24:	9c02      	ldr	r4, [sp, #8]
9001dc26:	b2ad      	uxth	r5, r5
9001dc28:	b2bf      	uxth	r7, r7
9001dc2a:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
9001dc2e:	f105 0a01 	add.w	sl, r5, #1
9001dc32:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001dc36:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001dc3a:	ea4e 0e0a 	orr.w	lr, lr, sl
9001dc3e:	f107 0a01 	add.w	sl, r7, #1
9001dc42:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001dc46:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001dc4a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001dc4e:	ea4e 0e0a 	orr.w	lr, lr, sl
9001dc52:	f820 e004 	strh.w	lr, [r0, r4]
9001dc56:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001dc58:	3e01      	subs	r6, #1
9001dc5a:	4421      	add	r1, r4
9001dc5c:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001dc5e:	4422      	add	r2, r4
9001dc60:	e755      	b.n	9001db0e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001dc62:	9c00      	ldr	r4, [sp, #0]
9001dc64:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
9001dc68:	f06f 0401 	mvn.w	r4, #1
9001dc6c:	4374      	muls	r4, r6
9001dc6e:	5305      	strh	r5, [r0, r4]
9001dc70:	e7f1      	b.n	9001dc56 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001dc72:	f04f 0900 	mov.w	r9, #0
9001dc76:	eba3 0409 	sub.w	r4, r3, r9
9001dc7a:	2c00      	cmp	r4, #0
9001dc7c:	f77f af4a 	ble.w	9001db14 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001dc80:	1414      	asrs	r4, r2, #16
9001dc82:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
9001dc86:	140d      	asrs	r5, r1, #16
9001dc88:	fb06 5504 	mla	r5, r6, r4, r5
9001dc8c:	9c01      	ldr	r4, [sp, #4]
9001dc8e:	5d64      	ldrb	r4, [r4, r5]
9001dc90:	2cff      	cmp	r4, #255	; 0xff
9001dc92:	d04f      	beq.n	9001dd34 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
9001dc94:	2c00      	cmp	r4, #0
9001dc96:	d046      	beq.n	9001dd26 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
9001dc98:	9e00      	ldr	r6, [sp, #0]
9001dc9a:	b2a7      	uxth	r7, r4
9001dc9c:	43e4      	mvns	r4, r4
9001dc9e:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
9001dca2:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
9001dca6:	b2e4      	uxtb	r4, r4
9001dca8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001dcac:	122e      	asrs	r6, r5, #8
9001dcae:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001dcb2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001dcb6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001dcba:	00ed      	lsls	r5, r5, #3
9001dcbc:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001dcc0:	fb16 f604 	smulbb	r6, r6, r4
9001dcc4:	b2ed      	uxtb	r5, r5
9001dcc6:	fb1a fa04 	smulbb	sl, sl, r4
9001dcca:	fb0c 6c07 	mla	ip, ip, r7, r6
9001dcce:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001dcd2:	fb15 f504 	smulbb	r5, r5, r4
9001dcd6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001dcda:	fa1f fc8c 	uxth.w	ip, ip
9001dcde:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001dce2:	fa5f fe8e 	uxtb.w	lr, lr
9001dce6:	fb06 a607 	mla	r6, r6, r7, sl
9001dcea:	f10c 0401 	add.w	r4, ip, #1
9001dcee:	fb0e 5507 	mla	r5, lr, r7, r5
9001dcf2:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
9001dcf6:	b2ad      	uxth	r5, r5
9001dcf8:	b2b6      	uxth	r6, r6
9001dcfa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001dcfe:	f105 0a01 	add.w	sl, r5, #1
9001dd02:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001dd06:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001dd0a:	ea4c 0c0a 	orr.w	ip, ip, sl
9001dd0e:	f106 0a01 	add.w	sl, r6, #1
9001dd12:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001dd16:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001dd1a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001dd1e:	ea4c 0c0a 	orr.w	ip, ip, sl
9001dd22:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
9001dd26:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001dd28:	f109 0901 	add.w	r9, r9, #1
9001dd2c:	4421      	add	r1, r4
9001dd2e:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001dd30:	4422      	add	r2, r4
9001dd32:	e7a0      	b.n	9001dc76 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
9001dd34:	9c00      	ldr	r4, [sp, #0]
9001dd36:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
9001dd3a:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
9001dd3e:	e7f2      	b.n	9001dd26 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
9001dd40:	b005      	add	sp, #20
9001dd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001dd46 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001dd46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001dd4a:	b085      	sub	sp, #20
9001dd4c:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001dd4e:	9203      	str	r2, [sp, #12]
9001dd50:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
9001dd54:	9100      	str	r1, [sp, #0]
9001dd56:	9201      	str	r2, [sp, #4]
9001dd58:	6841      	ldr	r1, [r0, #4]
9001dd5a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
9001dd5e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001dd62:	fb01 2404 	mla	r4, r1, r4, r2
9001dd66:	6802      	ldr	r2, [r0, #0]
9001dd68:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001dd6c:	f8de 2000 	ldr.w	r2, [lr]
9001dd70:	9202      	str	r2, [sp, #8]
9001dd72:	9a01      	ldr	r2, [sp, #4]
9001dd74:	43d6      	mvns	r6, r2
9001dd76:	b2f6      	uxtb	r6, r6
9001dd78:	9a00      	ldr	r2, [sp, #0]
9001dd7a:	2a00      	cmp	r2, #0
9001dd7c:	dc03      	bgt.n	9001dd86 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
9001dd7e:	9a03      	ldr	r2, [sp, #12]
9001dd80:	2a00      	cmp	r2, #0
9001dd82:	f340 8124 	ble.w	9001dfce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
9001dd86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001dd88:	f9be c008 	ldrsh.w	ip, [lr, #8]
9001dd8c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001dd90:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001dd92:	f9be 700c 	ldrsh.w	r7, [lr, #12]
9001dd96:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001dd9a:	2b00      	cmp	r3, #0
9001dd9c:	dd0e      	ble.n	9001ddbc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001dd9e:	1408      	asrs	r0, r1, #16
9001dda0:	d405      	bmi.n	9001ddae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001dda2:	4560      	cmp	r0, ip
9001dda4:	da03      	bge.n	9001ddae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001dda6:	1410      	asrs	r0, r2, #16
9001dda8:	d401      	bmi.n	9001ddae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001ddaa:	42b8      	cmp	r0, r7
9001ddac:	db07      	blt.n	9001ddbe <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001ddae:	9811      	ldr	r0, [sp, #68]	; 0x44
9001ddb0:	3b01      	subs	r3, #1
9001ddb2:	3402      	adds	r4, #2
9001ddb4:	4401      	add	r1, r0
9001ddb6:	9812      	ldr	r0, [sp, #72]	; 0x48
9001ddb8:	4402      	add	r2, r0
9001ddba:	e7ee      	b.n	9001dd9a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
9001ddbc:	d06e      	beq.n	9001de9c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
9001ddbe:	1e58      	subs	r0, r3, #1
9001ddc0:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001ddc2:	fb05 1500 	mla	r5, r5, r0, r1
9001ddc6:	142d      	asrs	r5, r5, #16
9001ddc8:	d45c      	bmi.n	9001de84 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001ddca:	4565      	cmp	r5, ip
9001ddcc:	da5a      	bge.n	9001de84 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001ddce:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001ddd0:	fb05 2000 	mla	r0, r5, r0, r2
9001ddd4:	1400      	asrs	r0, r0, #16
9001ddd6:	d455      	bmi.n	9001de84 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001ddd8:	42b8      	cmp	r0, r7
9001ddda:	da53      	bge.n	9001de84 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001dddc:	4699      	mov	r9, r3
9001ddde:	46a2      	mov	sl, r4
9001dde0:	f8bd b004 	ldrh.w	fp, [sp, #4]
9001dde4:	f1b9 0f00 	cmp.w	r9, #0
9001dde8:	dd54      	ble.n	9001de94 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001ddea:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001ddee:	140d      	asrs	r5, r1, #16
9001ddf0:	1410      	asrs	r0, r2, #16
9001ddf2:	f109 39ff 	add.w	r9, r9, #4294967295
9001ddf6:	fb07 5000 	mla	r0, r7, r0, r5
9001ddfa:	9d02      	ldr	r5, [sp, #8]
9001ddfc:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
9001de00:	f8ba 5000 	ldrh.w	r5, [sl]
9001de04:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001de08:	122f      	asrs	r7, r5, #8
9001de0a:	ea4f 08e5 	mov.w	r8, r5, asr #3
9001de0e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001de12:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001de16:	00ed      	lsls	r5, r5, #3
9001de18:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
9001de1c:	fb17 f706 	smulbb	r7, r7, r6
9001de20:	b2ed      	uxtb	r5, r5
9001de22:	fb18 f806 	smulbb	r8, r8, r6
9001de26:	fb0c 7c0b 	mla	ip, ip, fp, r7
9001de2a:	10c7      	asrs	r7, r0, #3
9001de2c:	fb15 f506 	smulbb	r5, r5, r6
9001de30:	00c0      	lsls	r0, r0, #3
9001de32:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001de36:	fa1f fc8c 	uxth.w	ip, ip
9001de3a:	b2c0      	uxtb	r0, r0
9001de3c:	fb07 870b 	mla	r7, r7, fp, r8
9001de40:	fb00 500b 	mla	r0, r0, fp, r5
9001de44:	f10c 0501 	add.w	r5, ip, #1
9001de48:	b2bf      	uxth	r7, r7
9001de4a:	b280      	uxth	r0, r0
9001de4c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001de50:	f107 0801 	add.w	r8, r7, #1
9001de54:	1c45      	adds	r5, r0, #1
9001de56:	eb08 2817 	add.w	r8, r8, r7, lsr #8
9001de5a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001de5e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001de62:	9811      	ldr	r0, [sp, #68]	; 0x44
9001de64:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001de68:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001de6c:	4401      	add	r1, r0
9001de6e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001de72:	9812      	ldr	r0, [sp, #72]	; 0x48
9001de74:	ea4c 0c05 	orr.w	ip, ip, r5
9001de78:	4402      	add	r2, r0
9001de7a:	ea4c 0c08 	orr.w	ip, ip, r8
9001de7e:	f82a cb02 	strh.w	ip, [sl], #2
9001de82:	e7af      	b.n	9001dde4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001de84:	f04f 0800 	mov.w	r8, #0
9001de88:	f8bd a004 	ldrh.w	sl, [sp, #4]
9001de8c:	eb03 0008 	add.w	r0, r3, r8
9001de90:	2800      	cmp	r0, #0
9001de92:	dc41      	bgt.n	9001df18 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
9001de94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001de98:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001de9c:	9b00      	ldr	r3, [sp, #0]
9001de9e:	2b00      	cmp	r3, #0
9001dea0:	f340 8095 	ble.w	9001dfce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
9001dea4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001dea8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001deaa:	ee30 0a04 	vadd.f32	s0, s0, s8
9001deae:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001deb2:	eef0 6a62 	vmov.f32	s13, s5
9001deb6:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001deba:	ee31 1a05 	vadd.f32	s2, s2, s10
9001debe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001dec2:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
9001dec6:	eef0 6a43 	vmov.f32	s13, s6
9001deca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001dece:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
9001ded2:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001ded6:	ee61 7a27 	vmul.f32	s15, s2, s15
9001deda:	ee77 2a62 	vsub.f32	s5, s14, s5
9001dede:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001dee2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001dee6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001deea:	ee12 2a90 	vmov	r2, s5
9001deee:	eef0 2a47 	vmov.f32	s5, s14
9001def2:	fb92 f3f3 	sdiv	r3, r2, r3
9001def6:	ee13 2a10 	vmov	r2, s6
9001defa:	9311      	str	r3, [sp, #68]	; 0x44
9001defc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001defe:	eeb0 3a67 	vmov.f32	s6, s15
9001df02:	fb92 f3f3 	sdiv	r3, r2, r3
9001df06:	9312      	str	r3, [sp, #72]	; 0x48
9001df08:	9b00      	ldr	r3, [sp, #0]
9001df0a:	9a03      	ldr	r2, [sp, #12]
9001df0c:	3b01      	subs	r3, #1
9001df0e:	9300      	str	r3, [sp, #0]
9001df10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001df12:	bf08      	it	eq
9001df14:	4613      	moveq	r3, r2
9001df16:	e72f      	b.n	9001dd78 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9001df18:	140f      	asrs	r7, r1, #16
9001df1a:	d451      	bmi.n	9001dfc0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001df1c:	f8de 5008 	ldr.w	r5, [lr, #8]
9001df20:	42bd      	cmp	r5, r7
9001df22:	dd4d      	ble.n	9001dfc0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001df24:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001df28:	d44a      	bmi.n	9001dfc0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001df2a:	f8de 000c 	ldr.w	r0, [lr, #12]
9001df2e:	4560      	cmp	r0, ip
9001df30:	dd46      	ble.n	9001dfc0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001df32:	b22d      	sxth	r5, r5
9001df34:	9802      	ldr	r0, [sp, #8]
9001df36:	fb0c 7505 	mla	r5, ip, r5, r7
9001df3a:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
9001df3e:	f06f 0501 	mvn.w	r5, #1
9001df42:	fb05 fb08 	mul.w	fp, r5, r8
9001df46:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001df4a:	f834 500b 	ldrh.w	r5, [r4, fp]
9001df4e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001df52:	122f      	asrs	r7, r5, #8
9001df54:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001df58:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001df5c:	00ed      	lsls	r5, r5, #3
9001df5e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001df62:	fb17 f706 	smulbb	r7, r7, r6
9001df66:	b2ed      	uxtb	r5, r5
9001df68:	fb19 f906 	smulbb	r9, r9, r6
9001df6c:	fb0c 7c0a 	mla	ip, ip, sl, r7
9001df70:	10c7      	asrs	r7, r0, #3
9001df72:	fb15 f506 	smulbb	r5, r5, r6
9001df76:	00c0      	lsls	r0, r0, #3
9001df78:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001df7c:	fa1f fc8c 	uxth.w	ip, ip
9001df80:	b2c0      	uxtb	r0, r0
9001df82:	fb07 970a 	mla	r7, r7, sl, r9
9001df86:	fb00 500a 	mla	r0, r0, sl, r5
9001df8a:	f10c 0501 	add.w	r5, ip, #1
9001df8e:	b2bf      	uxth	r7, r7
9001df90:	b280      	uxth	r0, r0
9001df92:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001df96:	f107 0901 	add.w	r9, r7, #1
9001df9a:	1c45      	adds	r5, r0, #1
9001df9c:	eb09 2917 	add.w	r9, r9, r7, lsr #8
9001dfa0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001dfa4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001dfa8:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001dfac:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001dfb0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001dfb4:	ea4c 0c05 	orr.w	ip, ip, r5
9001dfb8:	ea4c 0c09 	orr.w	ip, ip, r9
9001dfbc:	f824 c00b 	strh.w	ip, [r4, fp]
9001dfc0:	9811      	ldr	r0, [sp, #68]	; 0x44
9001dfc2:	f108 38ff 	add.w	r8, r8, #4294967295
9001dfc6:	4401      	add	r1, r0
9001dfc8:	9812      	ldr	r0, [sp, #72]	; 0x48
9001dfca:	4402      	add	r2, r0
9001dfcc:	e75e      	b.n	9001de8c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
9001dfce:	b005      	add	sp, #20
9001dfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001dfd4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001dfd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001dfd8:	b085      	sub	sp, #20
9001dfda:	4693      	mov	fp, r2
9001dfdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001dfe0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001dfe2:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001dfe4:	6870      	ldr	r0, [r6, #4]
9001dfe6:	9101      	str	r1, [sp, #4]
9001dfe8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001dfec:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
9001dff0:	fb00 2404 	mla	r4, r0, r4, r2
9001dff4:	6832      	ldr	r2, [r6, #0]
9001dff6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001dffa:	682a      	ldr	r2, [r5, #0]
9001dffc:	9202      	str	r2, [sp, #8]
9001dffe:	9a01      	ldr	r2, [sp, #4]
9001e000:	2a00      	cmp	r2, #0
9001e002:	dc03      	bgt.n	9001e00c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9001e004:	f1bb 0f00 	cmp.w	fp, #0
9001e008:	f340 809a 	ble.w	9001e140 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
9001e00c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001e00e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001e012:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001e016:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001e018:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
9001e01c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001e020:	2b00      	cmp	r3, #0
9001e022:	dd0c      	ble.n	9001e03e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
9001e024:	1406      	asrs	r6, r0, #16
9001e026:	d405      	bmi.n	9001e034 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001e028:	454e      	cmp	r6, r9
9001e02a:	da03      	bge.n	9001e034 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001e02c:	1416      	asrs	r6, r2, #16
9001e02e:	d401      	bmi.n	9001e034 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001e030:	4546      	cmp	r6, r8
9001e032:	db05      	blt.n	9001e040 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001e034:	4470      	add	r0, lr
9001e036:	4462      	add	r2, ip
9001e038:	3b01      	subs	r3, #1
9001e03a:	3402      	adds	r4, #2
9001e03c:	e7f0      	b.n	9001e020 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001e03e:	d00f      	beq.n	9001e060 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001e040:	1e5e      	subs	r6, r3, #1
9001e042:	fb0e 0706 	mla	r7, lr, r6, r0
9001e046:	143f      	asrs	r7, r7, #16
9001e048:	d541      	bpl.n	9001e0ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
9001e04a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
9001e04e:	4698      	mov	r8, r3
9001e050:	9603      	str	r6, [sp, #12]
9001e052:	f1b8 0f00 	cmp.w	r8, #0
9001e056:	dc56      	bgt.n	9001e106 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
9001e058:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001e05c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001e060:	9b01      	ldr	r3, [sp, #4]
9001e062:	2b00      	cmp	r3, #0
9001e064:	dd6c      	ble.n	9001e140 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
9001e066:	ee30 0a04 	vadd.f32	s0, s0, s8
9001e06a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001e06c:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001e070:	eeb0 6a62 	vmov.f32	s12, s5
9001e074:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001e078:	ee31 1a05 	vadd.f32	s2, s2, s10
9001e07c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001e080:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001e084:	eeb0 6a43 	vmov.f32	s12, s6
9001e088:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001e08c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001e090:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001e094:	ee61 7a27 	vmul.f32	s15, s2, s15
9001e098:	ee77 2a62 	vsub.f32	s5, s14, s5
9001e09c:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001e0a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001e0a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001e0a8:	ee12 2a90 	vmov	r2, s5
9001e0ac:	eef0 2a47 	vmov.f32	s5, s14
9001e0b0:	fb92 fef3 	sdiv	lr, r2, r3
9001e0b4:	ee13 2a10 	vmov	r2, s6
9001e0b8:	eeb0 3a67 	vmov.f32	s6, s15
9001e0bc:	fb92 fcf3 	sdiv	ip, r2, r3
9001e0c0:	9b01      	ldr	r3, [sp, #4]
9001e0c2:	3b01      	subs	r3, #1
9001e0c4:	9301      	str	r3, [sp, #4]
9001e0c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001e0c8:	bf08      	it	eq
9001e0ca:	465b      	moveq	r3, fp
9001e0cc:	e797      	b.n	9001dffe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
9001e0ce:	454f      	cmp	r7, r9
9001e0d0:	dabb      	bge.n	9001e04a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001e0d2:	fb0c 2606 	mla	r6, ip, r6, r2
9001e0d6:	1436      	asrs	r6, r6, #16
9001e0d8:	d4b7      	bmi.n	9001e04a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001e0da:	4546      	cmp	r6, r8
9001e0dc:	dab5      	bge.n	9001e04a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001e0de:	461e      	mov	r6, r3
9001e0e0:	46a0      	mov	r8, r4
9001e0e2:	2e00      	cmp	r6, #0
9001e0e4:	ddb8      	ble.n	9001e058 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001e0e6:	1417      	asrs	r7, r2, #16
9001e0e8:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
9001e0ec:	ea4f 4920 	mov.w	r9, r0, asr #16
9001e0f0:	9902      	ldr	r1, [sp, #8]
9001e0f2:	4470      	add	r0, lr
9001e0f4:	4462      	add	r2, ip
9001e0f6:	fb0a 9707 	mla	r7, sl, r7, r9
9001e0fa:	3e01      	subs	r6, #1
9001e0fc:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
9001e100:	f828 7b02 	strh.w	r7, [r8], #2
9001e104:	e7ed      	b.n	9001e0e2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
9001e106:	ea5f 4920 	movs.w	r9, r0, asr #16
9001e10a:	d414      	bmi.n	9001e136 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001e10c:	68ae      	ldr	r6, [r5, #8]
9001e10e:	454e      	cmp	r6, r9
9001e110:	dd11      	ble.n	9001e136 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001e112:	ea5f 4a22 	movs.w	sl, r2, asr #16
9001e116:	d40e      	bmi.n	9001e136 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001e118:	68ef      	ldr	r7, [r5, #12]
9001e11a:	4557      	cmp	r7, sl
9001e11c:	dd0b      	ble.n	9001e136 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001e11e:	b236      	sxth	r6, r6
9001e120:	f06f 0101 	mvn.w	r1, #1
9001e124:	9f02      	ldr	r7, [sp, #8]
9001e126:	fb0a 9606 	mla	r6, sl, r6, r9
9001e12a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
9001e12e:	fb01 f608 	mul.w	r6, r1, r8
9001e132:	9903      	ldr	r1, [sp, #12]
9001e134:	538f      	strh	r7, [r1, r6]
9001e136:	4470      	add	r0, lr
9001e138:	4462      	add	r2, ip
9001e13a:	f108 38ff 	add.w	r8, r8, #4294967295
9001e13e:	e788      	b.n	9001e052 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001e140:	b005      	add	sp, #20
9001e142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001e146 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001e146:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e14a:	b085      	sub	sp, #20
9001e14c:	468b      	mov	fp, r1
9001e14e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001e152:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001e154:	9202      	str	r2, [sp, #8]
9001e156:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
9001e15a:	6841      	ldr	r1, [r0, #4]
9001e15c:	9203      	str	r2, [sp, #12]
9001e15e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
9001e162:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001e166:	fb01 2404 	mla	r4, r1, r4, r2
9001e16a:	6802      	ldr	r2, [r0, #0]
9001e16c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001e170:	f8d8 2000 	ldr.w	r2, [r8]
9001e174:	9200      	str	r2, [sp, #0]
9001e176:	f1bb 0f00 	cmp.w	fp, #0
9001e17a:	dc03      	bgt.n	9001e184 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001e17c:	9a02      	ldr	r2, [sp, #8]
9001e17e:	2a00      	cmp	r2, #0
9001e180:	f340 8134 	ble.w	9001e3ec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001e184:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001e186:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
9001e18a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001e18e:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001e190:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
9001e194:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001e198:	2b00      	cmp	r3, #0
9001e19a:	dd0e      	ble.n	9001e1ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
9001e19c:	1402      	asrs	r2, r0, #16
9001e19e:	d405      	bmi.n	9001e1ac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001e1a0:	42ba      	cmp	r2, r7
9001e1a2:	da03      	bge.n	9001e1ac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001e1a4:	140a      	asrs	r2, r1, #16
9001e1a6:	d401      	bmi.n	9001e1ac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001e1a8:	42b2      	cmp	r2, r6
9001e1aa:	db07      	blt.n	9001e1bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001e1ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001e1ae:	3b01      	subs	r3, #1
9001e1b0:	3402      	adds	r4, #2
9001e1b2:	4410      	add	r0, r2
9001e1b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001e1b6:	4411      	add	r1, r2
9001e1b8:	e7ee      	b.n	9001e198 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001e1ba:	d019      	beq.n	9001e1f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
9001e1bc:	1e5a      	subs	r2, r3, #1
9001e1be:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001e1c0:	fb05 0502 	mla	r5, r5, r2, r0
9001e1c4:	142d      	asrs	r5, r5, #16
9001e1c6:	d409      	bmi.n	9001e1dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001e1c8:	42bd      	cmp	r5, r7
9001e1ca:	da07      	bge.n	9001e1dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001e1cc:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001e1ce:	fb05 1202 	mla	r2, r5, r2, r1
9001e1d2:	1412      	asrs	r2, r2, #16
9001e1d4:	d402      	bmi.n	9001e1dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001e1d6:	42b2      	cmp	r2, r6
9001e1d8:	f2c0 80aa 	blt.w	9001e330 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
9001e1dc:	f04f 0c00 	mov.w	ip, #0
9001e1e0:	eb03 020c 	add.w	r2, r3, ip
9001e1e4:	2a00      	cmp	r2, #0
9001e1e6:	dc3e      	bgt.n	9001e266 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
9001e1e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001e1ec:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001e1f0:	f1bb 0f00 	cmp.w	fp, #0
9001e1f4:	f340 80fa 	ble.w	9001e3ec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001e1f8:	ee30 0a04 	vadd.f32	s0, s0, s8
9001e1fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001e1fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001e202:	f1bb 0b01 	subs.w	fp, fp, #1
9001e206:	eeb0 6a62 	vmov.f32	s12, s5
9001e20a:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001e20e:	ee31 1a05 	vadd.f32	s2, s2, s10
9001e212:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001e216:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001e21a:	eeb0 6a43 	vmov.f32	s12, s6
9001e21e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001e222:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001e226:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001e22a:	ee61 7a27 	vmul.f32	s15, s2, s15
9001e22e:	ee77 2a62 	vsub.f32	s5, s14, s5
9001e232:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001e236:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001e23a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001e23e:	ee12 2a90 	vmov	r2, s5
9001e242:	eef0 2a47 	vmov.f32	s5, s14
9001e246:	fb92 f3f3 	sdiv	r3, r2, r3
9001e24a:	ee13 2a10 	vmov	r2, s6
9001e24e:	9311      	str	r3, [sp, #68]	; 0x44
9001e250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001e252:	eeb0 3a67 	vmov.f32	s6, s15
9001e256:	fb92 f3f3 	sdiv	r3, r2, r3
9001e25a:	9a02      	ldr	r2, [sp, #8]
9001e25c:	9312      	str	r3, [sp, #72]	; 0x48
9001e25e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001e260:	bf08      	it	eq
9001e262:	4613      	moveq	r3, r2
9001e264:	e787      	b.n	9001e176 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001e266:	1406      	asrs	r6, r0, #16
9001e268:	d45b      	bmi.n	9001e322 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
9001e26a:	f8d8 5008 	ldr.w	r5, [r8, #8]
9001e26e:	42b5      	cmp	r5, r6
9001e270:	dd57      	ble.n	9001e322 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
9001e272:	140f      	asrs	r7, r1, #16
9001e274:	d455      	bmi.n	9001e322 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
9001e276:	f8d8 200c 	ldr.w	r2, [r8, #12]
9001e27a:	42ba      	cmp	r2, r7
9001e27c:	dd51      	ble.n	9001e322 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
9001e27e:	b22d      	sxth	r5, r5
9001e280:	9a00      	ldr	r2, [sp, #0]
9001e282:	fb07 6505 	mla	r5, r7, r5, r6
9001e286:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
9001e28a:	0e2e      	lsrs	r6, r5, #24
9001e28c:	d049      	beq.n	9001e322 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
9001e28e:	f06f 0201 	mvn.w	r2, #1
9001e292:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001e296:	fb02 f20c 	mul.w	r2, r2, ip
9001e29a:	f834 e002 	ldrh.w	lr, [r4, r2]
9001e29e:	9201      	str	r2, [sp, #4]
9001e2a0:	9a03      	ldr	r2, [sp, #12]
9001e2a2:	ea4f 272e 	mov.w	r7, lr, asr #8
9001e2a6:	4356      	muls	r6, r2
9001e2a8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001e2ac:	1c72      	adds	r2, r6, #1
9001e2ae:	eb02 2226 	add.w	r2, r2, r6, asr #8
9001e2b2:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001e2b6:	b2ed      	uxtb	r5, r5
9001e2b8:	1212      	asrs	r2, r2, #8
9001e2ba:	fa1f f982 	uxth.w	r9, r2
9001e2be:	43d2      	mvns	r2, r2
9001e2c0:	fb16 f609 	smulbb	r6, r6, r9
9001e2c4:	b2d2      	uxtb	r2, r2
9001e2c6:	fb15 f509 	smulbb	r5, r5, r9
9001e2ca:	fb07 6702 	mla	r7, r7, r2, r6
9001e2ce:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001e2d2:	fb1a fa09 	smulbb	sl, sl, r9
9001e2d6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001e2da:	b2bf      	uxth	r7, r7
9001e2dc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001e2e0:	fa5f fe8e 	uxtb.w	lr, lr
9001e2e4:	fb06 a602 	mla	r6, r6, r2, sl
9001e2e8:	fb0e 5502 	mla	r5, lr, r2, r5
9001e2ec:	1c7a      	adds	r2, r7, #1
9001e2ee:	b2b6      	uxth	r6, r6
9001e2f0:	b2ad      	uxth	r5, r5
9001e2f2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001e2f6:	9a01      	ldr	r2, [sp, #4]
9001e2f8:	f105 0a01 	add.w	sl, r5, #1
9001e2fc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001e300:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001e304:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001e308:	ea47 070a 	orr.w	r7, r7, sl
9001e30c:	f106 0a01 	add.w	sl, r6, #1
9001e310:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001e314:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001e318:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001e31c:	ea47 070a 	orr.w	r7, r7, sl
9001e320:	52a7      	strh	r7, [r4, r2]
9001e322:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001e324:	f10c 3cff 	add.w	ip, ip, #4294967295
9001e328:	4410      	add	r0, r2
9001e32a:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001e32c:	4411      	add	r1, r2
9001e32e:	e757      	b.n	9001e1e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001e330:	f04f 0e00 	mov.w	lr, #0
9001e334:	eba3 020e 	sub.w	r2, r3, lr
9001e338:	2a00      	cmp	r2, #0
9001e33a:	f77f af55 	ble.w	9001e1e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001e33e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
9001e342:	1405      	asrs	r5, r0, #16
9001e344:	140a      	asrs	r2, r1, #16
9001e346:	fb06 5202 	mla	r2, r6, r2, r5
9001e34a:	9d00      	ldr	r5, [sp, #0]
9001e34c:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
9001e350:	0e2e      	lsrs	r6, r5, #24
9001e352:	d044      	beq.n	9001e3de <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
9001e354:	9a03      	ldr	r2, [sp, #12]
9001e356:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001e35a:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
9001e35e:	4356      	muls	r6, r2
9001e360:	ea4f 272c 	mov.w	r7, ip, asr #8
9001e364:	1c72      	adds	r2, r6, #1
9001e366:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001e36a:	eb02 2226 	add.w	r2, r2, r6, asr #8
9001e36e:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001e372:	b2ed      	uxtb	r5, r5
9001e374:	1212      	asrs	r2, r2, #8
9001e376:	fa1f f982 	uxth.w	r9, r2
9001e37a:	43d2      	mvns	r2, r2
9001e37c:	fb16 f609 	smulbb	r6, r6, r9
9001e380:	b2d2      	uxtb	r2, r2
9001e382:	fb15 f509 	smulbb	r5, r5, r9
9001e386:	fb07 6702 	mla	r7, r7, r2, r6
9001e38a:	ea4f 06ec 	mov.w	r6, ip, asr #3
9001e38e:	fb1a fa09 	smulbb	sl, sl, r9
9001e392:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001e396:	b2bf      	uxth	r7, r7
9001e398:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001e39c:	fa5f fc8c 	uxtb.w	ip, ip
9001e3a0:	fb06 a602 	mla	r6, r6, r2, sl
9001e3a4:	fb0c 5502 	mla	r5, ip, r2, r5
9001e3a8:	1c7a      	adds	r2, r7, #1
9001e3aa:	b2b6      	uxth	r6, r6
9001e3ac:	b2ad      	uxth	r5, r5
9001e3ae:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001e3b2:	f105 0a01 	add.w	sl, r5, #1
9001e3b6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001e3ba:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001e3be:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001e3c2:	ea47 070a 	orr.w	r7, r7, sl
9001e3c6:	f106 0a01 	add.w	sl, r6, #1
9001e3ca:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001e3ce:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001e3d2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001e3d6:	ea47 070a 	orr.w	r7, r7, sl
9001e3da:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
9001e3de:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001e3e0:	f10e 0e01 	add.w	lr, lr, #1
9001e3e4:	4410      	add	r0, r2
9001e3e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001e3e8:	4411      	add	r1, r2
9001e3ea:	e7a3      	b.n	9001e334 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
9001e3ec:	b005      	add	sp, #20
9001e3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

9001e3f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001e3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e3f8:	b085      	sub	sp, #20
9001e3fa:	468b      	mov	fp, r1
9001e3fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001e400:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001e402:	9203      	str	r2, [sp, #12]
9001e404:	6861      	ldr	r1, [r4, #4]
9001e406:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
9001e40a:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
9001e40e:	fb01 2000 	mla	r0, r1, r0, r2
9001e412:	6822      	ldr	r2, [r4, #0]
9001e414:	eb02 0040 	add.w	r0, r2, r0, lsl #1
9001e418:	f8d9 2000 	ldr.w	r2, [r9]
9001e41c:	9200      	str	r2, [sp, #0]
9001e41e:	f1bb 0f00 	cmp.w	fp, #0
9001e422:	dc03      	bgt.n	9001e42c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9001e424:	9a03      	ldr	r2, [sp, #12]
9001e426:	2a00      	cmp	r2, #0
9001e428:	f340 8154 	ble.w	9001e6d4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
9001e42c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001e42e:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
9001e432:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001e436:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001e438:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
9001e43c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001e440:	2b00      	cmp	r3, #0
9001e442:	dd0e      	ble.n	9001e462 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001e444:	140c      	asrs	r4, r1, #16
9001e446:	d405      	bmi.n	9001e454 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001e448:	42bc      	cmp	r4, r7
9001e44a:	da03      	bge.n	9001e454 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001e44c:	1414      	asrs	r4, r2, #16
9001e44e:	d401      	bmi.n	9001e454 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001e450:	42b4      	cmp	r4, r6
9001e452:	db07      	blt.n	9001e464 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001e454:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e456:	3b01      	subs	r3, #1
9001e458:	3002      	adds	r0, #2
9001e45a:	4421      	add	r1, r4
9001e45c:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001e45e:	4422      	add	r2, r4
9001e460:	e7ee      	b.n	9001e440 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001e462:	d017      	beq.n	9001e494 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001e464:	1e5c      	subs	r4, r3, #1
9001e466:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001e468:	fb05 1504 	mla	r5, r5, r4, r1
9001e46c:	142d      	asrs	r5, r5, #16
9001e46e:	d409      	bmi.n	9001e484 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001e470:	42bd      	cmp	r5, r7
9001e472:	da07      	bge.n	9001e484 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001e474:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001e476:	fb05 2404 	mla	r4, r5, r4, r2
9001e47a:	1424      	asrs	r4, r4, #16
9001e47c:	d402      	bmi.n	9001e484 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001e47e:	42b4      	cmp	r4, r6
9001e480:	f2c0 80c0 	blt.w	9001e604 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
9001e484:	2700      	movs	r7, #0
9001e486:	19dc      	adds	r4, r3, r7
9001e488:	2c00      	cmp	r4, #0
9001e48a:	dc3e      	bgt.n	9001e50a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001e48c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001e490:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001e494:	f1bb 0f00 	cmp.w	fp, #0
9001e498:	f340 811c 	ble.w	9001e6d4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
9001e49c:	ee30 0a04 	vadd.f32	s0, s0, s8
9001e4a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001e4a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001e4a6:	f1bb 0b01 	subs.w	fp, fp, #1
9001e4aa:	eeb0 6a62 	vmov.f32	s12, s5
9001e4ae:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001e4b2:	ee31 1a05 	vadd.f32	s2, s2, s10
9001e4b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001e4ba:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001e4be:	eeb0 6a43 	vmov.f32	s12, s6
9001e4c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001e4c6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001e4ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001e4ce:	ee61 7a27 	vmul.f32	s15, s2, s15
9001e4d2:	ee77 2a62 	vsub.f32	s5, s14, s5
9001e4d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001e4da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001e4de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001e4e2:	ee12 2a90 	vmov	r2, s5
9001e4e6:	eef0 2a47 	vmov.f32	s5, s14
9001e4ea:	fb92 f3f3 	sdiv	r3, r2, r3
9001e4ee:	ee13 2a10 	vmov	r2, s6
9001e4f2:	9311      	str	r3, [sp, #68]	; 0x44
9001e4f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001e4f6:	eeb0 3a67 	vmov.f32	s6, s15
9001e4fa:	fb92 f3f3 	sdiv	r3, r2, r3
9001e4fe:	9a03      	ldr	r2, [sp, #12]
9001e500:	9312      	str	r3, [sp, #72]	; 0x48
9001e502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001e504:	bf08      	it	eq
9001e506:	4613      	moveq	r3, r2
9001e508:	e789      	b.n	9001e41e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
9001e50a:	140e      	asrs	r6, r1, #16
9001e50c:	d461      	bmi.n	9001e5d2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
9001e50e:	f8d9 5008 	ldr.w	r5, [r9, #8]
9001e512:	42b5      	cmp	r5, r6
9001e514:	dd5d      	ble.n	9001e5d2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
9001e516:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001e51a:	d45a      	bmi.n	9001e5d2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
9001e51c:	f8d9 400c 	ldr.w	r4, [r9, #12]
9001e520:	4564      	cmp	r4, ip
9001e522:	dd56      	ble.n	9001e5d2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
9001e524:	b22d      	sxth	r5, r5
9001e526:	9c00      	ldr	r4, [sp, #0]
9001e528:	fb0c 6505 	mla	r5, ip, r5, r6
9001e52c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
9001e530:	ea5f 6e14 	movs.w	lr, r4, lsr #24
9001e534:	d04d      	beq.n	9001e5d2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
9001e536:	0a26      	lsrs	r6, r4, #8
9001e538:	f1be 0fff 	cmp.w	lr, #255	; 0xff
9001e53c:	fa5f f58e 	uxtb.w	r5, lr
9001e540:	ea4f 4c14 	mov.w	ip, r4, lsr #16
9001e544:	9601      	str	r6, [sp, #4]
9001e546:	d04a      	beq.n	9001e5de <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
9001e548:	f06f 0601 	mvn.w	r6, #1
9001e54c:	fa1f fa85 	uxth.w	sl, r5
9001e550:	fa5f fc8c 	uxtb.w	ip, ip
9001e554:	43ed      	mvns	r5, r5
9001e556:	437e      	muls	r6, r7
9001e558:	b2e4      	uxtb	r4, r4
9001e55a:	fb1c fc0a 	smulbb	ip, ip, sl
9001e55e:	b2ed      	uxtb	r5, r5
9001e560:	f830 8006 	ldrh.w	r8, [r0, r6]
9001e564:	fb14 f40a 	smulbb	r4, r4, sl
9001e568:	9602      	str	r6, [sp, #8]
9001e56a:	ea4f 2e28 	mov.w	lr, r8, asr #8
9001e56e:	f89d 6004 	ldrb.w	r6, [sp, #4]
9001e572:	fb16 f60a 	smulbb	r6, r6, sl
9001e576:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9001e57a:	fb0e cc05 	mla	ip, lr, r5, ip
9001e57e:	ea4f 0ee8 	mov.w	lr, r8, asr #3
9001e582:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001e586:	fa1f fc8c 	uxth.w	ip, ip
9001e58a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9001e58e:	fa5f f888 	uxtb.w	r8, r8
9001e592:	fb0e 6e05 	mla	lr, lr, r5, r6
9001e596:	fb08 4405 	mla	r4, r8, r5, r4
9001e59a:	f10c 0501 	add.w	r5, ip, #1
9001e59e:	fa1f fe8e 	uxth.w	lr, lr
9001e5a2:	b2a4      	uxth	r4, r4
9001e5a4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001e5a8:	1c66      	adds	r6, r4, #1
9001e5aa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001e5ae:	eb06 2614 	add.w	r6, r6, r4, lsr #8
9001e5b2:	9c02      	ldr	r4, [sp, #8]
9001e5b4:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001e5b8:	ea4c 0c06 	orr.w	ip, ip, r6
9001e5bc:	f10e 0601 	add.w	r6, lr, #1
9001e5c0:	eb06 261e 	add.w	r6, r6, lr, lsr #8
9001e5c4:	0976      	lsrs	r6, r6, #5
9001e5c6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001e5ca:	ea4c 0c06 	orr.w	ip, ip, r6
9001e5ce:	f820 c004 	strh.w	ip, [r0, r4]
9001e5d2:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e5d4:	3f01      	subs	r7, #1
9001e5d6:	4421      	add	r1, r4
9001e5d8:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001e5da:	4422      	add	r2, r4
9001e5dc:	e753      	b.n	9001e486 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001e5de:	4e3f      	ldr	r6, [pc, #252]	; (9001e6dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>)
9001e5e0:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001e5e4:	f06f 0501 	mvn.w	r5, #1
9001e5e8:	ea06 2c0c 	and.w	ip, r6, ip, lsl #8
9001e5ec:	437d      	muls	r5, r7
9001e5ee:	ea4c 0c04 	orr.w	ip, ip, r4
9001e5f2:	9c01      	ldr	r4, [sp, #4]
9001e5f4:	00e6      	lsls	r6, r4, #3
9001e5f6:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
9001e5fa:	ea4c 0c04 	orr.w	ip, ip, r4
9001e5fe:	f820 c005 	strh.w	ip, [r0, r5]
9001e602:	e7e6      	b.n	9001e5d2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
9001e604:	f04f 0800 	mov.w	r8, #0
9001e608:	eba3 0408 	sub.w	r4, r3, r8
9001e60c:	2c00      	cmp	r4, #0
9001e60e:	f77f af3d 	ble.w	9001e48c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001e612:	140d      	asrs	r5, r1, #16
9001e614:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
9001e618:	1414      	asrs	r4, r2, #16
9001e61a:	fb06 5404 	mla	r4, r6, r4, r5
9001e61e:	9d00      	ldr	r5, [sp, #0]
9001e620:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
9001e624:	ea5f 6c14 	movs.w	ip, r4, lsr #24
9001e628:	d042      	beq.n	9001e6b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
9001e62a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
9001e62e:	fa5f f58c 	uxtb.w	r5, ip
9001e632:	ea4f 4714 	mov.w	r7, r4, lsr #16
9001e636:	ea4f 2614 	mov.w	r6, r4, lsr #8
9001e63a:	d040      	beq.n	9001e6be <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
9001e63c:	f830 e018 	ldrh.w	lr, [r0, r8, lsl #1]
9001e640:	fa1f fa85 	uxth.w	sl, r5
9001e644:	b2ff      	uxtb	r7, r7
9001e646:	43ed      	mvns	r5, r5
9001e648:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001e64c:	fb17 f70a 	smulbb	r7, r7, sl
9001e650:	b2ed      	uxtb	r5, r5
9001e652:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001e656:	b2e4      	uxtb	r4, r4
9001e658:	b2f6      	uxtb	r6, r6
9001e65a:	fb0c 7705 	mla	r7, ip, r5, r7
9001e65e:	ea4f 0cee 	mov.w	ip, lr, asr #3
9001e662:	fb14 f40a 	smulbb	r4, r4, sl
9001e666:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001e66a:	b2bf      	uxth	r7, r7
9001e66c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
9001e670:	fb16 f60a 	smulbb	r6, r6, sl
9001e674:	fa5f fe8e 	uxtb.w	lr, lr
9001e678:	fb0e 4405 	mla	r4, lr, r5, r4
9001e67c:	fb0c 6c05 	mla	ip, ip, r5, r6
9001e680:	1c7d      	adds	r5, r7, #1
9001e682:	b2a4      	uxth	r4, r4
9001e684:	eb05 2717 	add.w	r7, r5, r7, lsr #8
9001e688:	1c66      	adds	r6, r4, #1
9001e68a:	fa1f fc8c 	uxth.w	ip, ip
9001e68e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001e692:	eb06 2614 	add.w	r6, r6, r4, lsr #8
9001e696:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001e69a:	4337      	orrs	r7, r6
9001e69c:	f10c 0601 	add.w	r6, ip, #1
9001e6a0:	eb06 261c 	add.w	r6, r6, ip, lsr #8
9001e6a4:	0976      	lsrs	r6, r6, #5
9001e6a6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001e6aa:	4337      	orrs	r7, r6
9001e6ac:	f820 7018 	strh.w	r7, [r0, r8, lsl #1]
9001e6b0:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e6b2:	f108 0801 	add.w	r8, r8, #1
9001e6b6:	4421      	add	r1, r4
9001e6b8:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001e6ba:	4422      	add	r2, r4
9001e6bc:	e7a4      	b.n	9001e608 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001e6be:	4d07      	ldr	r5, [pc, #28]	; (9001e6dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>)
9001e6c0:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001e6c4:	00f6      	lsls	r6, r6, #3
9001e6c6:	ea05 2707 	and.w	r7, r5, r7, lsl #8
9001e6ca:	4327      	orrs	r7, r4
9001e6cc:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
9001e6d0:	4327      	orrs	r7, r4
9001e6d2:	e7eb      	b.n	9001e6ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
9001e6d4:	b005      	add	sp, #20
9001e6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e6da:	bf00      	nop
9001e6dc:	fffff800 	.word	0xfffff800

9001e6e0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001e6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e6e4:	b087      	sub	sp, #28
9001e6e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001e6ea:	9815      	ldr	r0, [sp, #84]	; 0x54
9001e6ec:	9204      	str	r2, [sp, #16]
9001e6ee:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001e6f2:	9101      	str	r1, [sp, #4]
9001e6f4:	9205      	str	r2, [sp, #20]
9001e6f6:	6841      	ldr	r1, [r0, #4]
9001e6f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
9001e6fc:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001e700:	fb01 2404 	mla	r4, r1, r4, r2
9001e704:	6802      	ldr	r2, [r0, #0]
9001e706:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001e70a:	f8d8 2008 	ldr.w	r2, [r8, #8]
9001e70e:	3201      	adds	r2, #1
9001e710:	f022 0201 	bic.w	r2, r2, #1
9001e714:	9202      	str	r2, [sp, #8]
9001e716:	f8d8 2000 	ldr.w	r2, [r8]
9001e71a:	9203      	str	r2, [sp, #12]
9001e71c:	9a01      	ldr	r2, [sp, #4]
9001e71e:	2a00      	cmp	r2, #0
9001e720:	dc03      	bgt.n	9001e72a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001e722:	9a04      	ldr	r2, [sp, #16]
9001e724:	2a00      	cmp	r2, #0
9001e726:	f340 814d 	ble.w	9001e9c4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001e72a:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001e72c:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
9001e730:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001e734:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001e736:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
9001e73a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001e73e:	2b00      	cmp	r3, #0
9001e740:	dd0e      	ble.n	9001e760 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001e742:	1402      	asrs	r2, r0, #16
9001e744:	d405      	bmi.n	9001e752 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001e746:	42ba      	cmp	r2, r7
9001e748:	da03      	bge.n	9001e752 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001e74a:	140a      	asrs	r2, r1, #16
9001e74c:	d401      	bmi.n	9001e752 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001e74e:	42b2      	cmp	r2, r6
9001e750:	db07      	blt.n	9001e762 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
9001e752:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001e754:	3b01      	subs	r3, #1
9001e756:	3402      	adds	r4, #2
9001e758:	4410      	add	r0, r2
9001e75a:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001e75c:	4411      	add	r1, r2
9001e75e:	e7ee      	b.n	9001e73e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
9001e760:	d019      	beq.n	9001e796 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
9001e762:	1e5a      	subs	r2, r3, #1
9001e764:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001e766:	fb05 0502 	mla	r5, r5, r2, r0
9001e76a:	142d      	asrs	r5, r5, #16
9001e76c:	d409      	bmi.n	9001e782 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001e76e:	42bd      	cmp	r5, r7
9001e770:	da07      	bge.n	9001e782 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001e772:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001e774:	fb05 1202 	mla	r2, r5, r2, r1
9001e778:	1412      	asrs	r2, r2, #16
9001e77a:	d402      	bmi.n	9001e782 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001e77c:	42b2      	cmp	r2, r6
9001e77e:	f2c0 80b7 	blt.w	9001e8f0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
9001e782:	f04f 0c00 	mov.w	ip, #0
9001e786:	eb03 020c 	add.w	r2, r3, ip
9001e78a:	2a00      	cmp	r2, #0
9001e78c:	dc3f      	bgt.n	9001e80e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
9001e78e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001e792:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001e796:	9b01      	ldr	r3, [sp, #4]
9001e798:	2b00      	cmp	r3, #0
9001e79a:	f340 8113 	ble.w	9001e9c4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001e79e:	ee30 0a04 	vadd.f32	s0, s0, s8
9001e7a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001e7a4:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001e7a8:	eeb0 6a62 	vmov.f32	s12, s5
9001e7ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001e7b0:	ee31 1a05 	vadd.f32	s2, s2, s10
9001e7b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001e7b8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001e7bc:	eeb0 6a43 	vmov.f32	s12, s6
9001e7c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001e7c4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001e7c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001e7cc:	ee61 7a27 	vmul.f32	s15, s2, s15
9001e7d0:	ee77 2a62 	vsub.f32	s5, s14, s5
9001e7d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001e7d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001e7dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001e7e0:	ee12 2a90 	vmov	r2, s5
9001e7e4:	eef0 2a47 	vmov.f32	s5, s14
9001e7e8:	fb92 f3f3 	sdiv	r3, r2, r3
9001e7ec:	ee13 2a10 	vmov	r2, s6
9001e7f0:	9313      	str	r3, [sp, #76]	; 0x4c
9001e7f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001e7f4:	eeb0 3a67 	vmov.f32	s6, s15
9001e7f8:	fb92 f3f3 	sdiv	r3, r2, r3
9001e7fc:	9314      	str	r3, [sp, #80]	; 0x50
9001e7fe:	9b01      	ldr	r3, [sp, #4]
9001e800:	9a04      	ldr	r2, [sp, #16]
9001e802:	3b01      	subs	r3, #1
9001e804:	9301      	str	r3, [sp, #4]
9001e806:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001e808:	bf08      	it	eq
9001e80a:	4613      	moveq	r3, r2
9001e80c:	e786      	b.n	9001e71c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001e80e:	1405      	asrs	r5, r0, #16
9001e810:	d467      	bmi.n	9001e8e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
9001e812:	f8d8 2008 	ldr.w	r2, [r8, #8]
9001e816:	42aa      	cmp	r2, r5
9001e818:	dd63      	ble.n	9001e8e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
9001e81a:	140e      	asrs	r6, r1, #16
9001e81c:	d461      	bmi.n	9001e8e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
9001e81e:	f8d8 200c 	ldr.w	r2, [r8, #12]
9001e822:	42b2      	cmp	r2, r6
9001e824:	dd5d      	ble.n	9001e8e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
9001e826:	9a02      	ldr	r2, [sp, #8]
9001e828:	fb06 5502 	mla	r5, r6, r2, r5
9001e82c:	9e03      	ldr	r6, [sp, #12]
9001e82e:	086a      	lsrs	r2, r5, #1
9001e830:	5cb2      	ldrb	r2, [r6, r2]
9001e832:	07ee      	lsls	r6, r5, #31
9001e834:	bf54      	ite	pl
9001e836:	f002 020f 	andpl.w	r2, r2, #15
9001e83a:	1112      	asrmi	r2, r2, #4
9001e83c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001e840:	b2d2      	uxtb	r2, r2
9001e842:	2a00      	cmp	r2, #0
9001e844:	d04d      	beq.n	9001e8e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
9001e846:	f06f 0601 	mvn.w	r6, #1
9001e84a:	4d60      	ldr	r5, [pc, #384]	; (9001e9cc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
9001e84c:	fb06 fb0c 	mul.w	fp, r6, ip
9001e850:	9e05      	ldr	r6, [sp, #20]
9001e852:	682d      	ldr	r5, [r5, #0]
9001e854:	4372      	muls	r2, r6
9001e856:	f834 e00b 	ldrh.w	lr, [r4, fp]
9001e85a:	0a2f      	lsrs	r7, r5, #8
9001e85c:	1c56      	adds	r6, r2, #1
9001e85e:	ea4f 09d5 	mov.w	r9, r5, lsr #3
9001e862:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001e866:	00ed      	lsls	r5, r5, #3
9001e868:	eb06 2222 	add.w	r2, r6, r2, asr #8
9001e86c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001e870:	ea4f 262e 	mov.w	r6, lr, asr #8
9001e874:	1212      	asrs	r2, r2, #8
9001e876:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001e87a:	b2ed      	uxtb	r5, r5
9001e87c:	fa1f fa82 	uxth.w	sl, r2
9001e880:	43d2      	mvns	r2, r2
9001e882:	fb17 f70a 	smulbb	r7, r7, sl
9001e886:	b2d2      	uxtb	r2, r2
9001e888:	fb19 f90a 	smulbb	r9, r9, sl
9001e88c:	fb06 7602 	mla	r6, r6, r2, r7
9001e890:	ea4f 07ee 	mov.w	r7, lr, asr #3
9001e894:	fb15 f50a 	smulbb	r5, r5, sl
9001e898:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001e89c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001e8a0:	b2b6      	uxth	r6, r6
9001e8a2:	fa5f fe8e 	uxtb.w	lr, lr
9001e8a6:	fb07 9702 	mla	r7, r7, r2, r9
9001e8aa:	fb0e 5502 	mla	r5, lr, r2, r5
9001e8ae:	b2bf      	uxth	r7, r7
9001e8b0:	b2ad      	uxth	r5, r5
9001e8b2:	f107 0901 	add.w	r9, r7, #1
9001e8b6:	f105 0e01 	add.w	lr, r5, #1
9001e8ba:	eb09 2717 	add.w	r7, r9, r7, lsr #8
9001e8be:	f106 0901 	add.w	r9, r6, #1
9001e8c2:	eb0e 2e15 	add.w	lr, lr, r5, lsr #8
9001e8c6:	097f      	lsrs	r7, r7, #5
9001e8c8:	eb09 2616 	add.w	r6, r9, r6, lsr #8
9001e8cc:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
9001e8d0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001e8d4:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
9001e8d8:	4337      	orrs	r7, r6
9001e8da:	ea47 070e 	orr.w	r7, r7, lr
9001e8de:	f824 700b 	strh.w	r7, [r4, fp]
9001e8e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001e8e4:	f10c 3cff 	add.w	ip, ip, #4294967295
9001e8e8:	4410      	add	r0, r2
9001e8ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001e8ec:	4411      	add	r1, r2
9001e8ee:	e74a      	b.n	9001e786 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
9001e8f0:	f04f 0e00 	mov.w	lr, #0
9001e8f4:	eba3 020e 	sub.w	r2, r3, lr
9001e8f8:	2a00      	cmp	r2, #0
9001e8fa:	f77f af48 	ble.w	9001e78e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
9001e8fe:	1402      	asrs	r2, r0, #16
9001e900:	9e02      	ldr	r6, [sp, #8]
9001e902:	140d      	asrs	r5, r1, #16
9001e904:	fb06 2505 	mla	r5, r6, r5, r2
9001e908:	9e03      	ldr	r6, [sp, #12]
9001e90a:	086a      	lsrs	r2, r5, #1
9001e90c:	07ed      	lsls	r5, r5, #31
9001e90e:	5cb2      	ldrb	r2, [r6, r2]
9001e910:	bf54      	ite	pl
9001e912:	f002 020f 	andpl.w	r2, r2, #15
9001e916:	1112      	asrmi	r2, r2, #4
9001e918:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001e91c:	b2d2      	uxtb	r2, r2
9001e91e:	2a00      	cmp	r2, #0
9001e920:	d049      	beq.n	9001e9b6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
9001e922:	9e05      	ldr	r6, [sp, #20]
9001e924:	4d29      	ldr	r5, [pc, #164]	; (9001e9cc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
9001e926:	4372      	muls	r2, r6
9001e928:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
9001e92c:	682d      	ldr	r5, [r5, #0]
9001e92e:	1c56      	adds	r6, r2, #1
9001e930:	0a2f      	lsrs	r7, r5, #8
9001e932:	eb06 2222 	add.w	r2, r6, r2, asr #8
9001e936:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001e93a:	ea4f 262c 	mov.w	r6, ip, asr #8
9001e93e:	1212      	asrs	r2, r2, #8
9001e940:	ea4f 09d5 	mov.w	r9, r5, lsr #3
9001e944:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001e948:	fa1f fa82 	uxth.w	sl, r2
9001e94c:	43d2      	mvns	r2, r2
9001e94e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001e952:	00ed      	lsls	r5, r5, #3
9001e954:	fb17 f70a 	smulbb	r7, r7, sl
9001e958:	b2d2      	uxtb	r2, r2
9001e95a:	fb19 f90a 	smulbb	r9, r9, sl
9001e95e:	b2ed      	uxtb	r5, r5
9001e960:	fb06 7602 	mla	r6, r6, r2, r7
9001e964:	ea4f 07ec 	mov.w	r7, ip, asr #3
9001e968:	fb15 f50a 	smulbb	r5, r5, sl
9001e96c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001e970:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001e974:	b2b6      	uxth	r6, r6
9001e976:	fa5f fc8c 	uxtb.w	ip, ip
9001e97a:	fb07 9702 	mla	r7, r7, r2, r9
9001e97e:	f106 0b01 	add.w	fp, r6, #1
9001e982:	fb0c 5502 	mla	r5, ip, r2, r5
9001e986:	b2bf      	uxth	r7, r7
9001e988:	b2ad      	uxth	r5, r5
9001e98a:	f107 0901 	add.w	r9, r7, #1
9001e98e:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
9001e992:	f105 0c01 	add.w	ip, r5, #1
9001e996:	eb09 2717 	add.w	r7, r9, r7, lsr #8
9001e99a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
9001e99e:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
9001e9a2:	097f      	lsrs	r7, r7, #5
9001e9a4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001e9a8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001e9ac:	4337      	orrs	r7, r6
9001e9ae:	ea47 070c 	orr.w	r7, r7, ip
9001e9b2:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
9001e9b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001e9b8:	f10e 0e01 	add.w	lr, lr, #1
9001e9bc:	4410      	add	r0, r2
9001e9be:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001e9c0:	4411      	add	r1, r2
9001e9c2:	e797      	b.n	9001e8f4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001e9c4:	b007      	add	sp, #28
9001e9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e9ca:	bf00      	nop
9001e9cc:	20026ce4 	.word	0x20026ce4

9001e9d0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001e9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e9d4:	b087      	sub	sp, #28
9001e9d6:	468b      	mov	fp, r1
9001e9d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001e9dc:	9815      	ldr	r0, [sp, #84]	; 0x54
9001e9de:	9205      	str	r2, [sp, #20]
9001e9e0:	6841      	ldr	r1, [r0, #4]
9001e9e2:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
9001e9e6:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001e9ea:	fb01 2404 	mla	r4, r1, r4, r2
9001e9ee:	6802      	ldr	r2, [r0, #0]
9001e9f0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001e9f4:	f8d8 2008 	ldr.w	r2, [r8, #8]
9001e9f8:	3201      	adds	r2, #1
9001e9fa:	f022 0201 	bic.w	r2, r2, #1
9001e9fe:	9201      	str	r2, [sp, #4]
9001ea00:	f8d8 2000 	ldr.w	r2, [r8]
9001ea04:	9202      	str	r2, [sp, #8]
9001ea06:	f1bb 0f00 	cmp.w	fp, #0
9001ea0a:	dc03      	bgt.n	9001ea14 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
9001ea0c:	9a05      	ldr	r2, [sp, #20]
9001ea0e:	2a00      	cmp	r2, #0
9001ea10:	f340 8158 	ble.w	9001ecc4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
9001ea14:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001ea16:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
9001ea1a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001ea1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001ea20:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
9001ea24:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001ea28:	2b00      	cmp	r3, #0
9001ea2a:	dd0e      	ble.n	9001ea4a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001ea2c:	1402      	asrs	r2, r0, #16
9001ea2e:	d405      	bmi.n	9001ea3c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001ea30:	42ba      	cmp	r2, r7
9001ea32:	da03      	bge.n	9001ea3c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001ea34:	140a      	asrs	r2, r1, #16
9001ea36:	d401      	bmi.n	9001ea3c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001ea38:	42b2      	cmp	r2, r6
9001ea3a:	db07      	blt.n	9001ea4c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001ea3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001ea3e:	3b01      	subs	r3, #1
9001ea40:	3402      	adds	r4, #2
9001ea42:	4410      	add	r0, r2
9001ea44:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001ea46:	4411      	add	r1, r2
9001ea48:	e7ee      	b.n	9001ea28 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001ea4a:	d017      	beq.n	9001ea7c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
9001ea4c:	1e5a      	subs	r2, r3, #1
9001ea4e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001ea50:	fb05 0502 	mla	r5, r5, r2, r0
9001ea54:	142d      	asrs	r5, r5, #16
9001ea56:	d409      	bmi.n	9001ea6c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001ea58:	42bd      	cmp	r5, r7
9001ea5a:	da07      	bge.n	9001ea6c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001ea5c:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001ea5e:	fb05 1202 	mla	r2, r5, r2, r1
9001ea62:	1412      	asrs	r2, r2, #16
9001ea64:	d402      	bmi.n	9001ea6c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001ea66:	42b2      	cmp	r2, r6
9001ea68:	f2c0 80c0 	blt.w	9001ebec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
9001ea6c:	2600      	movs	r6, #0
9001ea6e:	199a      	adds	r2, r3, r6
9001ea70:	2a00      	cmp	r2, #0
9001ea72:	dc3e      	bgt.n	9001eaf2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
9001ea74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001ea78:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001ea7c:	f1bb 0f00 	cmp.w	fp, #0
9001ea80:	f340 8120 	ble.w	9001ecc4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
9001ea84:	ee30 0a04 	vadd.f32	s0, s0, s8
9001ea88:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001ea8a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001ea8e:	f1bb 0b01 	subs.w	fp, fp, #1
9001ea92:	eeb0 6a62 	vmov.f32	s12, s5
9001ea96:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001ea9a:	ee31 1a05 	vadd.f32	s2, s2, s10
9001ea9e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001eaa2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001eaa6:	eeb0 6a43 	vmov.f32	s12, s6
9001eaaa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001eaae:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001eab2:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001eab6:	ee61 7a27 	vmul.f32	s15, s2, s15
9001eaba:	ee77 2a62 	vsub.f32	s5, s14, s5
9001eabe:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001eac2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001eac6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001eaca:	ee12 2a90 	vmov	r2, s5
9001eace:	eef0 2a47 	vmov.f32	s5, s14
9001ead2:	fb92 f3f3 	sdiv	r3, r2, r3
9001ead6:	ee13 2a10 	vmov	r2, s6
9001eada:	9313      	str	r3, [sp, #76]	; 0x4c
9001eadc:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001eade:	eeb0 3a67 	vmov.f32	s6, s15
9001eae2:	fb92 f3f3 	sdiv	r3, r2, r3
9001eae6:	9a05      	ldr	r2, [sp, #20]
9001eae8:	9314      	str	r3, [sp, #80]	; 0x50
9001eaea:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001eaec:	bf08      	it	eq
9001eaee:	4613      	moveq	r3, r2
9001eaf0:	e789      	b.n	9001ea06 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
9001eaf2:	1405      	asrs	r5, r0, #16
9001eaf4:	d467      	bmi.n	9001ebc6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
9001eaf6:	f8d8 2008 	ldr.w	r2, [r8, #8]
9001eafa:	42aa      	cmp	r2, r5
9001eafc:	dd63      	ble.n	9001ebc6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
9001eafe:	140f      	asrs	r7, r1, #16
9001eb00:	d461      	bmi.n	9001ebc6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
9001eb02:	f8d8 200c 	ldr.w	r2, [r8, #12]
9001eb06:	42ba      	cmp	r2, r7
9001eb08:	dd5d      	ble.n	9001ebc6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
9001eb0a:	9a01      	ldr	r2, [sp, #4]
9001eb0c:	fb07 5502 	mla	r5, r7, r2, r5
9001eb10:	9f02      	ldr	r7, [sp, #8]
9001eb12:	086a      	lsrs	r2, r5, #1
9001eb14:	5cba      	ldrb	r2, [r7, r2]
9001eb16:	07ef      	lsls	r7, r5, #31
9001eb18:	bf54      	ite	pl
9001eb1a:	f002 020f 	andpl.w	r2, r2, #15
9001eb1e:	1112      	asrmi	r2, r2, #4
9001eb20:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001eb24:	b2d2      	uxtb	r2, r2
9001eb26:	2a00      	cmp	r2, #0
9001eb28:	d04d      	beq.n	9001ebc6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
9001eb2a:	4d68      	ldr	r5, [pc, #416]	; (9001eccc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
9001eb2c:	2aff      	cmp	r2, #255	; 0xff
9001eb2e:	682f      	ldr	r7, [r5, #0]
9001eb30:	ea4f 05d7 	mov.w	r5, r7, lsr #3
9001eb34:	ea4f 2917 	mov.w	r9, r7, lsr #8
9001eb38:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001eb3c:	ea4f 07c7 	mov.w	r7, r7, lsl #3
9001eb40:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
9001eb44:	9503      	str	r5, [sp, #12]
9001eb46:	b2ff      	uxtb	r7, r7
9001eb48:	d043      	beq.n	9001ebd2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
9001eb4a:	f06f 0501 	mvn.w	r5, #1
9001eb4e:	fa1f fa82 	uxth.w	sl, r2
9001eb52:	43d2      	mvns	r2, r2
9001eb54:	fb19 f90a 	smulbb	r9, r9, sl
9001eb58:	4375      	muls	r5, r6
9001eb5a:	fb17 f70a 	smulbb	r7, r7, sl
9001eb5e:	b2d2      	uxtb	r2, r2
9001eb60:	f834 e005 	ldrh.w	lr, [r4, r5]
9001eb64:	9504      	str	r5, [sp, #16]
9001eb66:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001eb6a:	9d03      	ldr	r5, [sp, #12]
9001eb6c:	fb15 f50a 	smulbb	r5, r5, sl
9001eb70:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001eb74:	fb0c 9c02 	mla	ip, ip, r2, r9
9001eb78:	ea4f 09ee 	mov.w	r9, lr, asr #3
9001eb7c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001eb80:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001eb84:	fa1f fc8c 	uxth.w	ip, ip
9001eb88:	fa5f fe8e 	uxtb.w	lr, lr
9001eb8c:	fb09 5502 	mla	r5, r9, r2, r5
9001eb90:	fb0e 7702 	mla	r7, lr, r2, r7
9001eb94:	b2ad      	uxth	r5, r5
9001eb96:	b2bf      	uxth	r7, r7
9001eb98:	f105 0901 	add.w	r9, r5, #1
9001eb9c:	1c7a      	adds	r2, r7, #1
9001eb9e:	eb09 2515 	add.w	r5, r9, r5, lsr #8
9001eba2:	f10c 0901 	add.w	r9, ip, #1
9001eba6:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001ebaa:	9a04      	ldr	r2, [sp, #16]
9001ebac:	096d      	lsrs	r5, r5, #5
9001ebae:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
9001ebb2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001ebb6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001ebba:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001ebbe:	ea45 050c 	orr.w	r5, r5, ip
9001ebc2:	433d      	orrs	r5, r7
9001ebc4:	52a5      	strh	r5, [r4, r2]
9001ebc6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001ebc8:	3e01      	subs	r6, #1
9001ebca:	4410      	add	r0, r2
9001ebcc:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001ebce:	4411      	add	r1, r2
9001ebd0:	e74d      	b.n	9001ea6e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001ebd2:	f06f 0201 	mvn.w	r2, #1
9001ebd6:	fb02 fe06 	mul.w	lr, r2, r6
9001ebda:	9a03      	ldr	r2, [sp, #12]
9001ebdc:	00d5      	lsls	r5, r2, #3
9001ebde:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
9001ebe2:	ea45 05d7 	orr.w	r5, r5, r7, lsr #3
9001ebe6:	f824 500e 	strh.w	r5, [r4, lr]
9001ebea:	e7ec      	b.n	9001ebc6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
9001ebec:	f04f 0e00 	mov.w	lr, #0
9001ebf0:	eba3 020e 	sub.w	r2, r3, lr
9001ebf4:	2a00      	cmp	r2, #0
9001ebf6:	f77f af3d 	ble.w	9001ea74 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
9001ebfa:	1402      	asrs	r2, r0, #16
9001ebfc:	9e01      	ldr	r6, [sp, #4]
9001ebfe:	140d      	asrs	r5, r1, #16
9001ec00:	fb06 2505 	mla	r5, r6, r5, r2
9001ec04:	9e02      	ldr	r6, [sp, #8]
9001ec06:	086a      	lsrs	r2, r5, #1
9001ec08:	07ed      	lsls	r5, r5, #31
9001ec0a:	5cb2      	ldrb	r2, [r6, r2]
9001ec0c:	bf54      	ite	pl
9001ec0e:	f002 020f 	andpl.w	r2, r2, #15
9001ec12:	1112      	asrmi	r2, r2, #4
9001ec14:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001ec18:	b2d2      	uxtb	r2, r2
9001ec1a:	2a00      	cmp	r2, #0
9001ec1c:	d045      	beq.n	9001ecaa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
9001ec1e:	4d2b      	ldr	r5, [pc, #172]	; (9001eccc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
9001ec20:	2aff      	cmp	r2, #255	; 0xff
9001ec22:	682e      	ldr	r6, [r5, #0]
9001ec24:	ea4f 2916 	mov.w	r9, r6, lsr #8
9001ec28:	ea4f 05d6 	mov.w	r5, r6, lsr #3
9001ec2c:	ea4f 06c6 	mov.w	r6, r6, lsl #3
9001ec30:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
9001ec34:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001ec38:	b2f6      	uxtb	r6, r6
9001ec3a:	d03d      	beq.n	9001ecb8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
9001ec3c:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
9001ec40:	fa1f fa82 	uxth.w	sl, r2
9001ec44:	43d2      	mvns	r2, r2
9001ec46:	fb19 f90a 	smulbb	r9, r9, sl
9001ec4a:	ea4f 272c 	mov.w	r7, ip, asr #8
9001ec4e:	fb15 f50a 	smulbb	r5, r5, sl
9001ec52:	b2d2      	uxtb	r2, r2
9001ec54:	fb16 f60a 	smulbb	r6, r6, sl
9001ec58:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001ec5c:	fb07 9702 	mla	r7, r7, r2, r9
9001ec60:	ea4f 09ec 	mov.w	r9, ip, asr #3
9001ec64:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001ec68:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001ec6c:	b2bf      	uxth	r7, r7
9001ec6e:	fa5f fc8c 	uxtb.w	ip, ip
9001ec72:	fb09 5502 	mla	r5, r9, r2, r5
9001ec76:	fb0c 6602 	mla	r6, ip, r2, r6
9001ec7a:	b2ad      	uxth	r5, r5
9001ec7c:	b2b6      	uxth	r6, r6
9001ec7e:	f105 0901 	add.w	r9, r5, #1
9001ec82:	1c72      	adds	r2, r6, #1
9001ec84:	eb09 2515 	add.w	r5, r9, r5, lsr #8
9001ec88:	f107 0901 	add.w	r9, r7, #1
9001ec8c:	eb02 2616 	add.w	r6, r2, r6, lsr #8
9001ec90:	096d      	lsrs	r5, r5, #5
9001ec92:	eb09 2717 	add.w	r7, r9, r7, lsr #8
9001ec96:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001ec9a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001ec9e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001eca2:	433d      	orrs	r5, r7
9001eca4:	4335      	orrs	r5, r6
9001eca6:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
9001ecaa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001ecac:	f10e 0e01 	add.w	lr, lr, #1
9001ecb0:	4410      	add	r0, r2
9001ecb2:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001ecb4:	4411      	add	r1, r2
9001ecb6:	e79b      	b.n	9001ebf0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
9001ecb8:	00ed      	lsls	r5, r5, #3
9001ecba:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
9001ecbe:	ea45 05d6 	orr.w	r5, r5, r6, lsr #3
9001ecc2:	e7f0      	b.n	9001eca6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
9001ecc4:	b007      	add	sp, #28
9001ecc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ecca:	bf00      	nop
9001eccc:	20026ce4 	.word	0x20026ce4

9001ecd0 <_ZN8touchgfx8LCD16bppD1Ev>:
9001ecd0:	4770      	bx	lr

9001ecd2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
9001ecd2:	4770      	bx	lr

9001ecd4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
9001ecd4:	4770      	bx	lr

9001ecd6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
9001ecd6:	4770      	bx	lr

9001ecd8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
9001ecd8:	4770      	bx	lr

9001ecda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
9001ecda:	4770      	bx	lr

9001ecdc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
9001ecdc:	4770      	bx	lr

9001ecde <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
9001ecde:	4770      	bx	lr

9001ece0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
9001ece0:	4770      	bx	lr

9001ece2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
9001ece2:	4770      	bx	lr

9001ece4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
9001ece4:	4770      	bx	lr

9001ece6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
9001ece6:	4770      	bx	lr

9001ece8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
9001ece8:	4770      	bx	lr

9001ecea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
9001ecea:	4770      	bx	lr

9001ecec <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
9001ecec:	4770      	bx	lr

9001ecee <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
9001ecee:	4770      	bx	lr

9001ecf0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
9001ecf0:	4770      	bx	lr

9001ecf2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
9001ecf2:	4770      	bx	lr

9001ecf4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
9001ecf4:	4770      	bx	lr

9001ecf6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
9001ecf6:	4770      	bx	lr

9001ecf8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
9001ecf8:	4770      	bx	lr

9001ecfa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
9001ecfa:	4770      	bx	lr

9001ecfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
9001ecfc:	4770      	bx	lr

9001ecfe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
9001ecfe:	4770      	bx	lr

9001ed00 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
9001ed00:	4770      	bx	lr

9001ed02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
9001ed02:	4770      	bx	lr

9001ed04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
9001ed04:	4770      	bx	lr

9001ed06 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
9001ed06:	4770      	bx	lr

9001ed08 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
9001ed08:	4770      	bx	lr
	...

9001ed0c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
9001ed0c:	b508      	push	{r3, lr}
9001ed0e:	4b06      	ldr	r3, [pc, #24]	; (9001ed28 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
9001ed10:	8818      	ldrh	r0, [r3, #0]
9001ed12:	b928      	cbnz	r0, 9001ed20 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
9001ed14:	4b05      	ldr	r3, [pc, #20]	; (9001ed2c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
9001ed16:	2154      	movs	r1, #84	; 0x54
9001ed18:	4a05      	ldr	r2, [pc, #20]	; (9001ed30 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
9001ed1a:	4806      	ldr	r0, [pc, #24]	; (9001ed34 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
9001ed1c:	f009 ff8a 	bl	90028c34 <__assert_func>
9001ed20:	0040      	lsls	r0, r0, #1
9001ed22:	b280      	uxth	r0, r0
9001ed24:	bd08      	pop	{r3, pc}
9001ed26:	bf00      	nop
9001ed28:	20026cd6 	.word	0x20026cd6
9001ed2c:	900307a6 	.word	0x900307a6
9001ed30:	90030d2b 	.word	0x90030d2b
9001ed34:	900307e8 	.word	0x900307e8

9001ed38 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
9001ed38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ed3c:	b08b      	sub	sp, #44	; 0x2c
9001ed3e:	460f      	mov	r7, r1
9001ed40:	4616      	mov	r6, r2
9001ed42:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
9001ed46:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
9001ed4a:	f1bb 0f00 	cmp.w	fp, #0
9001ed4e:	d046      	beq.n	9001edde <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
9001ed50:	6810      	ldr	r0, [r2, #0]
9001ed52:	ad06      	add	r5, sp, #24
9001ed54:	6851      	ldr	r1, [r2, #4]
9001ed56:	c503      	stmia	r5!, {r0, r1}
9001ed58:	6818      	ldr	r0, [r3, #0]
9001ed5a:	ad08      	add	r5, sp, #32
9001ed5c:	6859      	ldr	r1, [r3, #4]
9001ed5e:	c503      	stmia	r5!, {r0, r1}
9001ed60:	a806      	add	r0, sp, #24
9001ed62:	f7f9 ff8d 	bl	90018c80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001ed66:	4631      	mov	r1, r6
9001ed68:	a808      	add	r0, sp, #32
9001ed6a:	f7f9 ff71 	bl	90018c50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001ed6e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
9001ed72:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
9001ed76:	f8bd 601c 	ldrh.w	r6, [sp, #28]
9001ed7a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
9001ed7e:	fb16 2103 	smlabb	r1, r6, r3, r2
9001ed82:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
9001ed86:	eb07 0641 	add.w	r6, r7, r1, lsl #1
9001ed8a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
9001ed8e:	4f5d      	ldr	r7, [pc, #372]	; (9001ef04 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
9001ed90:	440a      	add	r2, r1
9001ed92:	6838      	ldr	r0, [r7, #0]
9001ed94:	46b9      	mov	r9, r7
9001ed96:	f8ad 2020 	strh.w	r2, [sp, #32]
9001ed9a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
9001ed9e:	4413      	add	r3, r2
9001eda0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
9001eda4:	6803      	ldr	r3, [r0, #0]
9001eda6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001eda8:	4798      	blx	r3
9001edaa:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
9001edae:	d019      	beq.n	9001ede4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
9001edb0:	f010 0f04 	tst.w	r0, #4
9001edb4:	d01a      	beq.n	9001edec <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
9001edb6:	f8d9 0000 	ldr.w	r0, [r9]
9001edba:	b2ad      	uxth	r5, r5
9001edbc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
9001edc0:	6801      	ldr	r1, [r0, #0]
9001edc2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
9001edc6:	9501      	str	r5, [sp, #4]
9001edc8:	e9cd b403 	strd	fp, r4, [sp, #12]
9001edcc:	f8bd 401c 	ldrh.w	r4, [sp, #28]
9001edd0:	9402      	str	r4, [sp, #8]
9001edd2:	fa1f f488 	uxth.w	r4, r8
9001edd6:	9400      	str	r4, [sp, #0]
9001edd8:	6b8c      	ldr	r4, [r1, #56]	; 0x38
9001edda:	4631      	mov	r1, r6
9001eddc:	47a0      	blx	r4
9001edde:	b00b      	add	sp, #44	; 0x2c
9001ede0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ede4:	b914      	cbnz	r4, 9001edec <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
9001ede6:	f010 0f01 	tst.w	r0, #1
9001edea:	e7e3      	b.n	9001edb4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
9001edec:	f8d9 0000 	ldr.w	r0, [r9]
9001edf0:	ea4f 0748 	mov.w	r7, r8, lsl #1
9001edf4:	6803      	ldr	r3, [r0, #0]
9001edf6:	6a1b      	ldr	r3, [r3, #32]
9001edf8:	4798      	blx	r3
9001edfa:	4b43      	ldr	r3, [pc, #268]	; (9001ef08 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d0>)
9001edfc:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
9001ee00:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
9001ee04:	881a      	ldrh	r2, [r3, #0]
9001ee06:	469a      	mov	sl, r3
9001ee08:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
9001ee0c:	fb05 f502 	mul.w	r5, r5, r2
9001ee10:	fb02 1404 	mla	r4, r2, r4, r1
9001ee14:	eb00 0444 	add.w	r4, r0, r4, lsl #1
9001ee18:	d058      	beq.n	9001eecc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x194>
9001ee1a:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
9001ee1e:	eb04 0545 	add.w	r5, r4, r5, lsl #1
9001ee22:	fa1f f28b 	uxth.w	r2, fp
9001ee26:	469e      	mov	lr, r3
9001ee28:	fa1f f989 	uxth.w	r9, r9
9001ee2c:	42ac      	cmp	r4, r5
9001ee2e:	d263      	bcs.n	9001eef8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
9001ee30:	eb04 0a07 	add.w	sl, r4, r7
9001ee34:	4554      	cmp	r4, sl
9001ee36:	d23c      	bcs.n	9001eeb2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17a>
9001ee38:	8821      	ldrh	r1, [r4, #0]
9001ee3a:	f836 3b02 	ldrh.w	r3, [r6], #2
9001ee3e:	1208      	asrs	r0, r1, #8
9001ee40:	ea4f 2c23 	mov.w	ip, r3, asr #8
9001ee44:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001ee48:	ea4f 0be1 	mov.w	fp, r1, asr #3
9001ee4c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001ee50:	00c9      	lsls	r1, r1, #3
9001ee52:	fb10 f009 	smulbb	r0, r0, r9
9001ee56:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
9001ee5a:	b2c9      	uxtb	r1, r1
9001ee5c:	fb0c 0c02 	mla	ip, ip, r2, r0
9001ee60:	10d8      	asrs	r0, r3, #3
9001ee62:	fb11 f109 	smulbb	r1, r1, r9
9001ee66:	00db      	lsls	r3, r3, #3
9001ee68:	fa1f fc8c 	uxth.w	ip, ip
9001ee6c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001ee70:	fb1b fb09 	smulbb	fp, fp, r9
9001ee74:	b2db      	uxtb	r3, r3
9001ee76:	fb03 1302 	mla	r3, r3, r2, r1
9001ee7a:	f10c 0101 	add.w	r1, ip, #1
9001ee7e:	fb00 b002 	mla	r0, r0, r2, fp
9001ee82:	b29b      	uxth	r3, r3
9001ee84:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
9001ee88:	1c59      	adds	r1, r3, #1
9001ee8a:	b280      	uxth	r0, r0
9001ee8c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001ee90:	eb01 2313 	add.w	r3, r1, r3, lsr #8
9001ee94:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001ee98:	ea4c 0c03 	orr.w	ip, ip, r3
9001ee9c:	1c43      	adds	r3, r0, #1
9001ee9e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001eea2:	0940      	lsrs	r0, r0, #5
9001eea4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001eea8:	ea4c 0c00 	orr.w	ip, ip, r0
9001eeac:	f824 cb02 	strh.w	ip, [r4], #2
9001eeb0:	e7c0      	b.n	9001ee34 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
9001eeb2:	f8be 3000 	ldrh.w	r3, [lr]
9001eeb6:	eba3 0308 	sub.w	r3, r3, r8
9001eeba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001eebe:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
9001eec2:	eba3 0308 	sub.w	r3, r3, r8
9001eec6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
9001eeca:	e7af      	b.n	9001ee2c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
9001eecc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
9001eed0:	f8d9 0000 	ldr.w	r0, [r9]
9001eed4:	42ac      	cmp	r4, r5
9001eed6:	6803      	ldr	r3, [r0, #0]
9001eed8:	d20e      	bcs.n	9001eef8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
9001eeda:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
9001eede:	4632      	mov	r2, r6
9001eee0:	463b      	mov	r3, r7
9001eee2:	4621      	mov	r1, r4
9001eee4:	47c0      	blx	r8
9001eee6:	f8ba 3000 	ldrh.w	r3, [sl]
9001eeea:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001eeee:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
9001eef2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
9001eef6:	e7eb      	b.n	9001eed0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
9001eef8:	4b02      	ldr	r3, [pc, #8]	; (9001ef04 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
9001eefa:	6818      	ldr	r0, [r3, #0]
9001eefc:	6803      	ldr	r3, [r0, #0]
9001eefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001ef00:	4798      	blx	r3
9001ef02:	e76c      	b.n	9001edde <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
9001ef04:	20026cdc 	.word	0x20026cdc
9001ef08:	20026cd6 	.word	0x20026cd6

9001ef0c <_ZN8touchgfx8LCD16bppD0Ev>:
9001ef0c:	b510      	push	{r4, lr}
9001ef0e:	4604      	mov	r4, r0
9001ef10:	2178      	movs	r1, #120	; 0x78
9001ef12:	f009 f8b3 	bl	9002807c <_ZdlPvj>
9001ef16:	4620      	mov	r0, r4
9001ef18:	bd10      	pop	{r4, pc}

9001ef1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
9001ef1a:	b510      	push	{r4, lr}
9001ef1c:	4604      	mov	r4, r0
9001ef1e:	2104      	movs	r1, #4
9001ef20:	f009 f8ac 	bl	9002807c <_ZdlPvj>
9001ef24:	4620      	mov	r0, r4
9001ef26:	bd10      	pop	{r4, pc}

9001ef28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
9001ef28:	b510      	push	{r4, lr}
9001ef2a:	4604      	mov	r4, r0
9001ef2c:	2104      	movs	r1, #4
9001ef2e:	f009 f8a5 	bl	9002807c <_ZdlPvj>
9001ef32:	4620      	mov	r0, r4
9001ef34:	bd10      	pop	{r4, pc}

9001ef36 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
9001ef36:	b510      	push	{r4, lr}
9001ef38:	4604      	mov	r4, r0
9001ef3a:	2104      	movs	r1, #4
9001ef3c:	f009 f89e 	bl	9002807c <_ZdlPvj>
9001ef40:	4620      	mov	r0, r4
9001ef42:	bd10      	pop	{r4, pc}

9001ef44 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
9001ef44:	b510      	push	{r4, lr}
9001ef46:	4604      	mov	r4, r0
9001ef48:	2104      	movs	r1, #4
9001ef4a:	f009 f897 	bl	9002807c <_ZdlPvj>
9001ef4e:	4620      	mov	r0, r4
9001ef50:	bd10      	pop	{r4, pc}

9001ef52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
9001ef52:	b510      	push	{r4, lr}
9001ef54:	4604      	mov	r4, r0
9001ef56:	2104      	movs	r1, #4
9001ef58:	f009 f890 	bl	9002807c <_ZdlPvj>
9001ef5c:	4620      	mov	r0, r4
9001ef5e:	bd10      	pop	{r4, pc}

9001ef60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
9001ef60:	b510      	push	{r4, lr}
9001ef62:	4604      	mov	r4, r0
9001ef64:	2104      	movs	r1, #4
9001ef66:	f009 f889 	bl	9002807c <_ZdlPvj>
9001ef6a:	4620      	mov	r0, r4
9001ef6c:	bd10      	pop	{r4, pc}

9001ef6e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
9001ef6e:	b510      	push	{r4, lr}
9001ef70:	4604      	mov	r4, r0
9001ef72:	2104      	movs	r1, #4
9001ef74:	f009 f882 	bl	9002807c <_ZdlPvj>
9001ef78:	4620      	mov	r0, r4
9001ef7a:	bd10      	pop	{r4, pc}

9001ef7c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
9001ef7c:	b510      	push	{r4, lr}
9001ef7e:	4604      	mov	r4, r0
9001ef80:	2104      	movs	r1, #4
9001ef82:	f009 f87b 	bl	9002807c <_ZdlPvj>
9001ef86:	4620      	mov	r0, r4
9001ef88:	bd10      	pop	{r4, pc}

9001ef8a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
9001ef8a:	b510      	push	{r4, lr}
9001ef8c:	4604      	mov	r4, r0
9001ef8e:	2104      	movs	r1, #4
9001ef90:	f009 f874 	bl	9002807c <_ZdlPvj>
9001ef94:	4620      	mov	r0, r4
9001ef96:	bd10      	pop	{r4, pc}

9001ef98 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
9001ef98:	b510      	push	{r4, lr}
9001ef9a:	4604      	mov	r4, r0
9001ef9c:	2104      	movs	r1, #4
9001ef9e:	f009 f86d 	bl	9002807c <_ZdlPvj>
9001efa2:	4620      	mov	r0, r4
9001efa4:	bd10      	pop	{r4, pc}

9001efa6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
9001efa6:	b510      	push	{r4, lr}
9001efa8:	4604      	mov	r4, r0
9001efaa:	2104      	movs	r1, #4
9001efac:	f009 f866 	bl	9002807c <_ZdlPvj>
9001efb0:	4620      	mov	r0, r4
9001efb2:	bd10      	pop	{r4, pc}

9001efb4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
9001efb4:	b510      	push	{r4, lr}
9001efb6:	4604      	mov	r4, r0
9001efb8:	2104      	movs	r1, #4
9001efba:	f009 f85f 	bl	9002807c <_ZdlPvj>
9001efbe:	4620      	mov	r0, r4
9001efc0:	bd10      	pop	{r4, pc}

9001efc2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
9001efc2:	b510      	push	{r4, lr}
9001efc4:	4604      	mov	r4, r0
9001efc6:	2104      	movs	r1, #4
9001efc8:	f009 f858 	bl	9002807c <_ZdlPvj>
9001efcc:	4620      	mov	r0, r4
9001efce:	bd10      	pop	{r4, pc}

9001efd0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
9001efd0:	b510      	push	{r4, lr}
9001efd2:	4604      	mov	r4, r0
9001efd4:	2104      	movs	r1, #4
9001efd6:	f009 f851 	bl	9002807c <_ZdlPvj>
9001efda:	4620      	mov	r0, r4
9001efdc:	bd10      	pop	{r4, pc}

9001efde <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
9001efde:	b510      	push	{r4, lr}
9001efe0:	4604      	mov	r4, r0
9001efe2:	2104      	movs	r1, #4
9001efe4:	f009 f84a 	bl	9002807c <_ZdlPvj>
9001efe8:	4620      	mov	r0, r4
9001efea:	bd10      	pop	{r4, pc}

9001efec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
9001efec:	b510      	push	{r4, lr}
9001efee:	4604      	mov	r4, r0
9001eff0:	2104      	movs	r1, #4
9001eff2:	f009 f843 	bl	9002807c <_ZdlPvj>
9001eff6:	4620      	mov	r0, r4
9001eff8:	bd10      	pop	{r4, pc}

9001effa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
9001effa:	b510      	push	{r4, lr}
9001effc:	4604      	mov	r4, r0
9001effe:	2104      	movs	r1, #4
9001f000:	f009 f83c 	bl	9002807c <_ZdlPvj>
9001f004:	4620      	mov	r0, r4
9001f006:	bd10      	pop	{r4, pc}

9001f008 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
9001f008:	b510      	push	{r4, lr}
9001f00a:	4604      	mov	r4, r0
9001f00c:	2104      	movs	r1, #4
9001f00e:	f009 f835 	bl	9002807c <_ZdlPvj>
9001f012:	4620      	mov	r0, r4
9001f014:	bd10      	pop	{r4, pc}

9001f016 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
9001f016:	b510      	push	{r4, lr}
9001f018:	4604      	mov	r4, r0
9001f01a:	2104      	movs	r1, #4
9001f01c:	f009 f82e 	bl	9002807c <_ZdlPvj>
9001f020:	4620      	mov	r0, r4
9001f022:	bd10      	pop	{r4, pc}

9001f024 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
9001f024:	b510      	push	{r4, lr}
9001f026:	4604      	mov	r4, r0
9001f028:	2104      	movs	r1, #4
9001f02a:	f009 f827 	bl	9002807c <_ZdlPvj>
9001f02e:	4620      	mov	r0, r4
9001f030:	bd10      	pop	{r4, pc}

9001f032 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
9001f032:	b510      	push	{r4, lr}
9001f034:	4604      	mov	r4, r0
9001f036:	2104      	movs	r1, #4
9001f038:	f009 f820 	bl	9002807c <_ZdlPvj>
9001f03c:	4620      	mov	r0, r4
9001f03e:	bd10      	pop	{r4, pc}

9001f040 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
9001f040:	b510      	push	{r4, lr}
9001f042:	4604      	mov	r4, r0
9001f044:	2104      	movs	r1, #4
9001f046:	f009 f819 	bl	9002807c <_ZdlPvj>
9001f04a:	4620      	mov	r0, r4
9001f04c:	bd10      	pop	{r4, pc}

9001f04e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
9001f04e:	b510      	push	{r4, lr}
9001f050:	4604      	mov	r4, r0
9001f052:	2104      	movs	r1, #4
9001f054:	f009 f812 	bl	9002807c <_ZdlPvj>
9001f058:	4620      	mov	r0, r4
9001f05a:	bd10      	pop	{r4, pc}

9001f05c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
9001f05c:	b510      	push	{r4, lr}
9001f05e:	4604      	mov	r4, r0
9001f060:	2104      	movs	r1, #4
9001f062:	f009 f80b 	bl	9002807c <_ZdlPvj>
9001f066:	4620      	mov	r0, r4
9001f068:	bd10      	pop	{r4, pc}

9001f06a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
9001f06a:	b510      	push	{r4, lr}
9001f06c:	4604      	mov	r4, r0
9001f06e:	2104      	movs	r1, #4
9001f070:	f009 f804 	bl	9002807c <_ZdlPvj>
9001f074:	4620      	mov	r0, r4
9001f076:	bd10      	pop	{r4, pc}

9001f078 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
9001f078:	b510      	push	{r4, lr}
9001f07a:	4604      	mov	r4, r0
9001f07c:	2104      	movs	r1, #4
9001f07e:	f008 fffd 	bl	9002807c <_ZdlPvj>
9001f082:	4620      	mov	r0, r4
9001f084:	bd10      	pop	{r4, pc}

9001f086 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
9001f086:	b510      	push	{r4, lr}
9001f088:	4604      	mov	r4, r0
9001f08a:	2104      	movs	r1, #4
9001f08c:	f008 fff6 	bl	9002807c <_ZdlPvj>
9001f090:	4620      	mov	r0, r4
9001f092:	bd10      	pop	{r4, pc}

9001f094 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
9001f094:	b510      	push	{r4, lr}
9001f096:	4604      	mov	r4, r0
9001f098:	2104      	movs	r1, #4
9001f09a:	f008 ffef 	bl	9002807c <_ZdlPvj>
9001f09e:	4620      	mov	r0, r4
9001f0a0:	bd10      	pop	{r4, pc}
	...

9001f0a4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
9001f0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f0a8:	460d      	mov	r5, r1
9001f0aa:	b087      	sub	sp, #28
9001f0ac:	4614      	mov	r4, r2
9001f0ae:	4698      	mov	r8, r3
9001f0b0:	b333      	cbz	r3, 9001f100 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001f0b2:	4608      	mov	r0, r1
9001f0b4:	f7f5 f995 	bl	900143e2 <_ZNK8touchgfx4Rect7isEmptyEv>
9001f0b8:	bb10      	cbnz	r0, 9001f100 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001f0ba:	6828      	ldr	r0, [r5, #0]
9001f0bc:	ab04      	add	r3, sp, #16
9001f0be:	6869      	ldr	r1, [r5, #4]
9001f0c0:	4e72      	ldr	r6, [pc, #456]	; (9001f28c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1e8>)
9001f0c2:	c303      	stmia	r3!, {r0, r1}
9001f0c4:	a804      	add	r0, sp, #16
9001f0c6:	f7f9 fddb 	bl	90018c80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001f0ca:	6830      	ldr	r0, [r6, #0]
9001f0cc:	6803      	ldr	r3, [r0, #0]
9001f0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001f0d0:	4798      	blx	r3
9001f0d2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001f0d6:	d016      	beq.n	9001f106 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
9001f0d8:	f010 0f08 	tst.w	r0, #8
9001f0dc:	d016      	beq.n	9001f10c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
9001f0de:	f8bd 5016 	ldrh.w	r5, [sp, #22]
9001f0e2:	6830      	ldr	r0, [r6, #0]
9001f0e4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
9001f0e8:	6801      	ldr	r1, [r0, #0]
9001f0ea:	9501      	str	r5, [sp, #4]
9001f0ec:	f8bd 5014 	ldrh.w	r5, [sp, #20]
9001f0f0:	f8cd 8008 	str.w	r8, [sp, #8]
9001f0f4:	9500      	str	r5, [sp, #0]
9001f0f6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001f0fa:	6c8d      	ldr	r5, [r1, #72]	; 0x48
9001f0fc:	4621      	mov	r1, r4
9001f0fe:	47a8      	blx	r5
9001f100:	b007      	add	sp, #28
9001f102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001f106:	f010 0f02 	tst.w	r0, #2
9001f10a:	e7e7      	b.n	9001f0dc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x38>
9001f10c:	6830      	ldr	r0, [r6, #0]
9001f10e:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
9001f112:	6803      	ldr	r3, [r0, #0]
9001f114:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
9001f118:	6a1b      	ldr	r3, [r3, #32]
9001f11a:	4798      	blx	r3
9001f11c:	495c      	ldr	r1, [pc, #368]	; (9001f290 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ec>)
9001f11e:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
9001f122:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001f126:	880b      	ldrh	r3, [r1, #0]
9001f128:	468e      	mov	lr, r1
9001f12a:	f9bd c010 	ldrsh.w	ip, [sp, #16]
9001f12e:	fb03 c202 	mla	r2, r3, r2, ip
9001f132:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001f136:	fb07 f203 	mul.w	r2, r7, r3
9001f13a:	d053      	beq.n	9001f1e4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x140>
9001f13c:	fa1f f388 	uxth.w	r3, r8
9001f140:	f1c8 07ff 	rsb	r7, r8, #255	; 0xff
9001f144:	ea4f 09d4 	mov.w	r9, r4, lsr #3
9001f148:	ea4f 2814 	mov.w	r8, r4, lsr #8
9001f14c:	00e4      	lsls	r4, r4, #3
9001f14e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001f152:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
9001f156:	eb00 0142 	add.w	r1, r0, r2, lsl #1
9001f15a:	b2e4      	uxtb	r4, r4
9001f15c:	fb09 f903 	mul.w	r9, r9, r3
9001f160:	fb08 f803 	mul.w	r8, r8, r3
9001f164:	006d      	lsls	r5, r5, #1
9001f166:	4363      	muls	r3, r4
9001f168:	b2bc      	uxth	r4, r7
9001f16a:	4288      	cmp	r0, r1
9001f16c:	f080 8088 	bcs.w	9001f280 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
9001f170:	eb00 0a05 	add.w	sl, r0, r5
9001f174:	4550      	cmp	r0, sl
9001f176:	d22f      	bcs.n	9001f1d8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
9001f178:	8802      	ldrh	r2, [r0, #0]
9001f17a:	ea4f 2c22 	mov.w	ip, r2, asr #8
9001f17e:	10d7      	asrs	r7, r2, #3
9001f180:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001f184:	00d2      	lsls	r2, r2, #3
9001f186:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001f18a:	fb1c fc04 	smulbb	ip, ip, r4
9001f18e:	b2d2      	uxtb	r2, r2
9001f190:	fb17 f704 	smulbb	r7, r7, r4
9001f194:	fb12 f204 	smulbb	r2, r2, r4
9001f198:	44c4      	add	ip, r8
9001f19a:	444f      	add	r7, r9
9001f19c:	fa1f fc8c 	uxth.w	ip, ip
9001f1a0:	441a      	add	r2, r3
9001f1a2:	b2bf      	uxth	r7, r7
9001f1a4:	b292      	uxth	r2, r2
9001f1a6:	f10c 0b01 	add.w	fp, ip, #1
9001f1aa:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
9001f1ae:	f102 0b01 	add.w	fp, r2, #1
9001f1b2:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
9001f1b6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001f1ba:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001f1be:	ea4c 0202 	orr.w	r2, ip, r2
9001f1c2:	f107 0c01 	add.w	ip, r7, #1
9001f1c6:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
9001f1ca:	097f      	lsrs	r7, r7, #5
9001f1cc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001f1d0:	433a      	orrs	r2, r7
9001f1d2:	f820 2b02 	strh.w	r2, [r0], #2
9001f1d6:	e7cd      	b.n	9001f174 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd0>
9001f1d8:	f8be 2000 	ldrh.w	r2, [lr]
9001f1dc:	ebc5 0242 	rsb	r2, r5, r2, lsl #1
9001f1e0:	4410      	add	r0, r2
9001f1e2:	e7c2      	b.n	9001f16a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xc6>
9001f1e4:	07db      	lsls	r3, r3, #31
9001f1e6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001f1ea:	d50e      	bpl.n	9001f20a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x166>
9001f1ec:	006d      	lsls	r5, r5, #1
9001f1ee:	4290      	cmp	r0, r2
9001f1f0:	d246      	bcs.n	9001f280 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
9001f1f2:	1943      	adds	r3, r0, r5
9001f1f4:	4298      	cmp	r0, r3
9001f1f6:	d202      	bcs.n	9001f1fe <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15a>
9001f1f8:	f820 4b02 	strh.w	r4, [r0], #2
9001f1fc:	e7fa      	b.n	9001f1f4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x150>
9001f1fe:	f8be 3000 	ldrh.w	r3, [lr]
9001f202:	ebc5 0343 	rsb	r3, r5, r3, lsl #1
9001f206:	4418      	add	r0, r3
9001f208:	e7f1      	b.n	9001f1ee <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x14a>
9001f20a:	0787      	lsls	r7, r0, #30
9001f20c:	462b      	mov	r3, r5
9001f20e:	d00a      	beq.n	9001f226 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x182>
9001f210:	4603      	mov	r3, r0
9001f212:	4293      	cmp	r3, r2
9001f214:	d205      	bcs.n	9001f222 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17e>
9001f216:	801c      	strh	r4, [r3, #0]
9001f218:	f8be 1000 	ldrh.w	r1, [lr]
9001f21c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
9001f220:	e7f7      	b.n	9001f212 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
9001f222:	3002      	adds	r0, #2
9001f224:	1e6b      	subs	r3, r5, #1
9001f226:	07dd      	lsls	r5, r3, #31
9001f228:	d50d      	bpl.n	9001f246 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a2>
9001f22a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
9001f22e:	3901      	subs	r1, #1
9001f230:	eb00 0141 	add.w	r1, r0, r1, lsl #1
9001f234:	4291      	cmp	r1, r2
9001f236:	d205      	bcs.n	9001f244 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a0>
9001f238:	800c      	strh	r4, [r1, #0]
9001f23a:	f8be 5000 	ldrh.w	r5, [lr]
9001f23e:	eb01 0145 	add.w	r1, r1, r5, lsl #1
9001f242:	e7f7      	b.n	9001f234 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>
9001f244:	3b01      	subs	r3, #1
9001f246:	b1db      	cbz	r3, 9001f280 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
9001f248:	b2a1      	uxth	r1, r4
9001f24a:	105b      	asrs	r3, r3, #1
9001f24c:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
9001f250:	009b      	lsls	r3, r3, #2
9001f252:	4290      	cmp	r0, r2
9001f254:	d214      	bcs.n	9001f280 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
9001f256:	0781      	lsls	r1, r0, #30
9001f258:	d006      	beq.n	9001f268 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c4>
9001f25a:	4b0e      	ldr	r3, [pc, #56]	; (9001f294 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f0>)
9001f25c:	f44f 7162 	mov.w	r1, #904	; 0x388
9001f260:	4a0d      	ldr	r2, [pc, #52]	; (9001f298 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f4>)
9001f262:	480e      	ldr	r0, [pc, #56]	; (9001f29c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f8>)
9001f264:	f009 fce6 	bl	90028c34 <__assert_func>
9001f268:	18c5      	adds	r5, r0, r3
9001f26a:	4601      	mov	r1, r0
9001f26c:	42a9      	cmp	r1, r5
9001f26e:	d202      	bcs.n	9001f276 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1d2>
9001f270:	f841 4b04 	str.w	r4, [r1], #4
9001f274:	e7fa      	b.n	9001f26c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c8>
9001f276:	f8be 1000 	ldrh.w	r1, [lr]
9001f27a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
9001f27e:	e7e8      	b.n	9001f252 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ae>
9001f280:	6830      	ldr	r0, [r6, #0]
9001f282:	6803      	ldr	r3, [r0, #0]
9001f284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001f286:	4798      	blx	r3
9001f288:	e73a      	b.n	9001f100 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001f28a:	bf00      	nop
9001f28c:	20026cdc 	.word	0x20026cdc
9001f290:	20026cd6 	.word	0x20026cd6
9001f294:	90030745 	.word	0x90030745
9001f298:	90030ef8 	.word	0x90030ef8
9001f29c:	90030774 	.word	0x90030774

9001f2a0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
9001f2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f2a4:	4f97      	ldr	r7, [pc, #604]	; (9001f504 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
9001f2a6:	4616      	mov	r6, r2
9001f2a8:	b08f      	sub	sp, #60	; 0x3c
9001f2aa:	4604      	mov	r4, r0
9001f2ac:	683a      	ldr	r2, [r7, #0]
9001f2ae:	4689      	mov	r9, r1
9001f2b0:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
9001f2b4:	2a02      	cmp	r2, #2
9001f2b6:	d106      	bne.n	9001f2c6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
9001f2b8:	4b93      	ldr	r3, [pc, #588]	; (9001f508 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
9001f2ba:	f44f 7132 	mov.w	r1, #712	; 0x2c8
9001f2be:	4a93      	ldr	r2, [pc, #588]	; (9001f50c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
9001f2c0:	4893      	ldr	r0, [pc, #588]	; (9001f510 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
9001f2c2:	f009 fcb7 	bl	90028c34 <__assert_func>
9001f2c6:	ad0e      	add	r5, sp, #56	; 0x38
9001f2c8:	f825 3d24 	strh.w	r3, [r5, #-36]!
9001f2cc:	4628      	mov	r0, r5
9001f2ce:	f7fd fa43 	bl	9001c758 <_ZNK8touchgfx6Bitmap9getFormatEv>
9001f2d2:	6823      	ldr	r3, [r4, #0]
9001f2d4:	4680      	mov	r8, r0
9001f2d6:	4620      	mov	r0, r4
9001f2d8:	6a1b      	ldr	r3, [r3, #32]
9001f2da:	4798      	blx	r3
9001f2dc:	4580      	cmp	r8, r0
9001f2de:	d004      	beq.n	9001f2ea <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
9001f2e0:	4b8c      	ldr	r3, [pc, #560]	; (9001f514 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
9001f2e2:	f240 21ca 	movw	r1, #714	; 0x2ca
9001f2e6:	4a89      	ldr	r2, [pc, #548]	; (9001f50c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
9001f2e8:	e7ea      	b.n	9001f2c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
9001f2ea:	4628      	mov	r0, r5
9001f2ec:	f7fd f9aa 	bl	9001c644 <_ZNK8touchgfx6Bitmap7getDataEv>
9001f2f0:	4680      	mov	r8, r0
9001f2f2:	b920      	cbnz	r0, 9001f2fe <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
9001f2f4:	4b88      	ldr	r3, [pc, #544]	; (9001f518 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
9001f2f6:	f44f 7133 	mov.w	r1, #716	; 0x2cc
9001f2fa:	4a84      	ldr	r2, [pc, #528]	; (9001f50c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
9001f2fc:	e7e0      	b.n	9001f2c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
9001f2fe:	6830      	ldr	r0, [r6, #0]
9001f300:	ab06      	add	r3, sp, #24
9001f302:	6871      	ldr	r1, [r6, #4]
9001f304:	f10d 0b20 	add.w	fp, sp, #32
9001f308:	f9b6 a000 	ldrsh.w	sl, [r6]
9001f30c:	c303      	stmia	r3!, {r0, r1}
9001f30e:	f8d9 1004 	ldr.w	r1, [r9, #4]
9001f312:	ab08      	add	r3, sp, #32
9001f314:	f8d9 0000 	ldr.w	r0, [r9]
9001f318:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
9001f31c:	c303      	stmia	r3!, {r0, r1}
9001f31e:	4628      	mov	r0, r5
9001f320:	f7fd f888 	bl	9001c434 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001f324:	4606      	mov	r6, r0
9001f326:	4628      	mov	r0, r5
9001f328:	4d7c      	ldr	r5, [pc, #496]	; (9001f51c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
9001f32a:	f7fd f8bd 	bl	9001c4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001f32e:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
9001f332:	a806      	add	r0, sp, #24
9001f334:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
9001f338:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
9001f33c:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
9001f340:	f7f9 fc9e 	bl	90018c80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001f344:	4658      	mov	r0, fp
9001f346:	f7f9 fc9b 	bl	90018c80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001f34a:	a80a      	add	r0, sp, #40	; 0x28
9001f34c:	f7f9 fc98 	bl	90018c80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001f350:	4b73      	ldr	r3, [pc, #460]	; (9001f520 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
9001f352:	2100      	movs	r1, #0
9001f354:	f9b5 2000 	ldrsh.w	r2, [r5]
9001f358:	f9b3 3000 	ldrsh.w	r3, [r3]
9001f35c:	4658      	mov	r0, fp
9001f35e:	910c      	str	r1, [sp, #48]	; 0x30
9001f360:	a90c      	add	r1, sp, #48	; 0x30
9001f362:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
9001f366:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
9001f36a:	f7f4 fff7 	bl	9001435c <_ZN8touchgfx4RectaNERKS0_>
9001f36e:	4658      	mov	r0, fp
9001f370:	f7f5 f837 	bl	900143e2 <_ZNK8touchgfx4Rect7isEmptyEv>
9001f374:	2800      	cmp	r0, #0
9001f376:	f040 809a 	bne.w	9001f4ae <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
9001f37a:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
9001f37e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
9001f382:	4288      	cmp	r0, r1
9001f384:	db38      	blt.n	9001f3f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
9001f386:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
9001f38a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
9001f38e:	429a      	cmp	r2, r3
9001f390:	db32      	blt.n	9001f3f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
9001f392:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
9001f396:	4430      	add	r0, r6
9001f398:	f8bd 601c 	ldrh.w	r6, [sp, #28]
9001f39c:	4431      	add	r1, r6
9001f39e:	b200      	sxth	r0, r0
9001f3a0:	b209      	sxth	r1, r1
9001f3a2:	4288      	cmp	r0, r1
9001f3a4:	dc28      	bgt.n	9001f3f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
9001f3a6:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
9001f3aa:	440a      	add	r2, r1
9001f3ac:	f8bd 101e 	ldrh.w	r1, [sp, #30]
9001f3b0:	440b      	add	r3, r1
9001f3b2:	b212      	sxth	r2, r2
9001f3b4:	b21b      	sxth	r3, r3
9001f3b6:	429a      	cmp	r2, r3
9001f3b8:	dc1e      	bgt.n	9001f3f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
9001f3ba:	6823      	ldr	r3, [r4, #0]
9001f3bc:	4620      	mov	r0, r4
9001f3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001f3c0:	4798      	blx	r3
9001f3c2:	4682      	mov	sl, r0
9001f3c4:	6838      	ldr	r0, [r7, #0]
9001f3c6:	6803      	ldr	r3, [r0, #0]
9001f3c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001f3ca:	4798      	blx	r3
9001f3cc:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
9001f3d0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
9001f3d4:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
9001f3d8:	1a5b      	subs	r3, r3, r1
9001f3da:	b29b      	uxth	r3, r3
9001f3dc:	b21c      	sxth	r4, r3
9001f3de:	2c00      	cmp	r4, #0
9001f3e0:	dc0f      	bgt.n	9001f402 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
9001f3e2:	bf18      	it	ne
9001f3e4:	f8ad 1020 	strhne.w	r1, [sp, #32]
9001f3e8:	4644      	mov	r4, r8
9001f3ea:	bf1e      	ittt	ne
9001f3ec:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
9001f3f0:	185b      	addne	r3, r3, r1
9001f3f2:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
9001f3f6:	e009      	b.n	9001f40c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
9001f3f8:	4b4a      	ldr	r3, [pc, #296]	; (9001f524 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
9001f3fa:	f240 21da 	movw	r1, #730	; 0x2da
9001f3fe:	4a43      	ldr	r2, [pc, #268]	; (9001f50c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
9001f400:	e75e      	b.n	9001f2c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
9001f402:	1ad3      	subs	r3, r2, r3
9001f404:	eb08 0444 	add.w	r4, r8, r4, lsl #1
9001f408:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
9001f40c:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
9001f410:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
9001f414:	1b9b      	subs	r3, r3, r6
9001f416:	b29b      	uxth	r3, r3
9001f418:	b219      	sxth	r1, r3
9001f41a:	2900      	cmp	r1, #0
9001f41c:	dd4b      	ble.n	9001f4b6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
9001f41e:	4351      	muls	r1, r2
9001f420:	eb04 0441 	add.w	r4, r4, r1, lsl #1
9001f424:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
9001f428:	1acb      	subs	r3, r1, r3
9001f42a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
9001f42e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
9001f432:	2e00      	cmp	r6, #0
9001f434:	dd3b      	ble.n	9001f4ae <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
9001f436:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
9001f43a:	2b00      	cmp	r3, #0
9001f43c:	dd37      	ble.n	9001f4ae <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
9001f43e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
9001f442:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
9001f446:	fb0a f90c 	mul.w	r9, sl, ip
9001f44a:	eb09 0941 	add.w	r9, r9, r1, lsl #1
9001f44e:	4481      	add	r9, r0
9001f450:	8828      	ldrh	r0, [r5, #0]
9001f452:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
9001f456:	1a41      	subs	r1, r0, r1
9001f458:	42ae      	cmp	r6, r5
9001f45a:	bfa8      	it	ge
9001f45c:	462e      	movge	r6, r5
9001f45e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
9001f462:	428e      	cmp	r6, r1
9001f464:	bfa8      	it	ge
9001f466:	460e      	movge	r6, r1
9001f468:	429d      	cmp	r5, r3
9001f46a:	bfa8      	it	ge
9001f46c:	461d      	movge	r5, r3
9001f46e:	4b2c      	ldr	r3, [pc, #176]	; (9001f520 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
9001f470:	881b      	ldrh	r3, [r3, #0]
9001f472:	eba3 030c 	sub.w	r3, r3, ip
9001f476:	429d      	cmp	r5, r3
9001f478:	bfa8      	it	ge
9001f47a:	461d      	movge	r5, r3
9001f47c:	42b0      	cmp	r0, r6
9001f47e:	d12c      	bne.n	9001f4da <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
9001f480:	4290      	cmp	r0, r2
9001f482:	d12a      	bne.n	9001f4da <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
9001f484:	6838      	ldr	r0, [r7, #0]
9001f486:	9203      	str	r2, [sp, #12]
9001f488:	6803      	ldr	r3, [r0, #0]
9001f48a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001f48c:	4798      	blx	r3
9001f48e:	07c3      	lsls	r3, r0, #31
9001f490:	d51a      	bpl.n	9001f4c8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
9001f492:	9a03      	ldr	r2, [sp, #12]
9001f494:	6838      	ldr	r0, [r7, #0]
9001f496:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
9001f49a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
9001f49e:	6803      	ldr	r3, [r0, #0]
9001f4a0:	9200      	str	r2, [sp, #0]
9001f4a2:	6d5d      	ldr	r5, [r3, #84]	; 0x54
9001f4a4:	4623      	mov	r3, r4
9001f4a6:	e89b 0006 	ldmia.w	fp, {r1, r2}
9001f4aa:	47a8      	blx	r5
9001f4ac:	4680      	mov	r8, r0
9001f4ae:	4640      	mov	r0, r8
9001f4b0:	b00f      	add	sp, #60	; 0x3c
9001f4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001f4b6:	bf1f      	itttt	ne
9001f4b8:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
9001f4bc:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
9001f4c0:	185b      	addne	r3, r3, r1
9001f4c2:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
9001f4c6:	e7b2      	b.n	9001f42e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
9001f4c8:	6838      	ldr	r0, [r7, #0]
9001f4ca:	464a      	mov	r2, r9
9001f4cc:	4621      	mov	r1, r4
9001f4ce:	6803      	ldr	r3, [r0, #0]
9001f4d0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
9001f4d2:	fb05 f30a 	mul.w	r3, r5, sl
9001f4d6:	47b0      	blx	r6
9001f4d8:	e7e9      	b.n	9001f4ae <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
9001f4da:	4355      	muls	r5, r2
9001f4dc:	0076      	lsls	r6, r6, #1
9001f4de:	ea4f 0b42 	mov.w	fp, r2, lsl #1
9001f4e2:	eb04 0345 	add.w	r3, r4, r5, lsl #1
9001f4e6:	9303      	str	r3, [sp, #12]
9001f4e8:	9b03      	ldr	r3, [sp, #12]
9001f4ea:	429c      	cmp	r4, r3
9001f4ec:	d2df      	bcs.n	9001f4ae <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
9001f4ee:	6838      	ldr	r0, [r7, #0]
9001f4f0:	464a      	mov	r2, r9
9001f4f2:	4621      	mov	r1, r4
9001f4f4:	44d1      	add	r9, sl
9001f4f6:	6803      	ldr	r3, [r0, #0]
9001f4f8:	445c      	add	r4, fp
9001f4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001f4fc:	461d      	mov	r5, r3
9001f4fe:	4633      	mov	r3, r6
9001f500:	47a8      	blx	r5
9001f502:	e7f1      	b.n	9001f4e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
9001f504:	20026cdc 	.word	0x20026cdc
9001f508:	9003056b 	.word	0x9003056b
9001f50c:	90030ddb 	.word	0x90030ddb
9001f510:	90030774 	.word	0x90030774
9001f514:	9003061d 	.word	0x9003061d
9001f518:	90030672 	.word	0x90030672
9001f51c:	20026cd6 	.word	0x20026cd6
9001f520:	20026cd8 	.word	0x20026cd8
9001f524:	900306b0 	.word	0x900306b0

9001f528 <_ZN8touchgfx8LCD16bppC1Ev>:
9001f528:	2200      	movs	r2, #0
9001f52a:	4910      	ldr	r1, [pc, #64]	; (9001f56c <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
9001f52c:	6042      	str	r2, [r0, #4]
9001f52e:	6001      	str	r1, [r0, #0]
9001f530:	e9c0 2202 	strd	r2, r2, [r0, #8]
9001f534:	e9c0 2204 	strd	r2, r2, [r0, #16]
9001f538:	e9c0 2206 	strd	r2, r2, [r0, #24]
9001f53c:	e9c0 2208 	strd	r2, r2, [r0, #32]
9001f540:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
9001f544:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
9001f548:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
9001f54c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
9001f550:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
9001f554:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
9001f558:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
9001f55c:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
9001f560:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
9001f564:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
9001f568:	4770      	bx	lr
9001f56a:	bf00      	nop
9001f56c:	90030a54 	.word	0x90030a54

9001f570 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
9001f570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f574:	b08b      	sub	sp, #44	; 0x2c
9001f576:	460d      	mov	r5, r1
9001f578:	4604      	mov	r4, r0
9001f57a:	4699      	mov	r9, r3
9001f57c:	6808      	ldr	r0, [r1, #0]
9001f57e:	ab06      	add	r3, sp, #24
9001f580:	6849      	ldr	r1, [r1, #4]
9001f582:	c303      	stmia	r3!, {r0, r1}
9001f584:	6810      	ldr	r0, [r2, #0]
9001f586:	ab08      	add	r3, sp, #32
9001f588:	6851      	ldr	r1, [r2, #4]
9001f58a:	c303      	stmia	r3!, {r0, r1}
9001f58c:	a806      	add	r0, sp, #24
9001f58e:	f7f9 fb77 	bl	90018c80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001f592:	4629      	mov	r1, r5
9001f594:	a808      	add	r0, sp, #32
9001f596:	4d63      	ldr	r5, [pc, #396]	; (9001f724 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
9001f598:	f7f9 fb5a 	bl	90018c50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001f59c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
9001f5a0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
9001f5a4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
9001f5a8:	6828      	ldr	r0, [r5, #0]
9001f5aa:	fb11 2103 	smlabb	r1, r1, r3, r2
9001f5ae:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
9001f5b2:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
9001f5b6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
9001f5ba:	f8bd 1018 	ldrh.w	r1, [sp, #24]
9001f5be:	440a      	add	r2, r1
9001f5c0:	f8ad 2020 	strh.w	r2, [sp, #32]
9001f5c4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
9001f5c8:	4413      	add	r3, r2
9001f5ca:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
9001f5ce:	6803      	ldr	r3, [r0, #0]
9001f5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001f5d2:	4798      	blx	r3
9001f5d4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001f5d8:	d118      	bne.n	9001f60c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
9001f5da:	f010 0f20 	tst.w	r0, #32
9001f5de:	6828      	ldr	r0, [r5, #0]
9001f5e0:	d017      	beq.n	9001f612 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
9001f5e2:	f8bd 501c 	ldrh.w	r5, [sp, #28]
9001f5e6:	b2b6      	uxth	r6, r6
9001f5e8:	6801      	ldr	r1, [r0, #0]
9001f5ea:	9502      	str	r5, [sp, #8]
9001f5ec:	fa1f f588 	uxth.w	r5, r8
9001f5f0:	f8cd 900c 	str.w	r9, [sp, #12]
9001f5f4:	9601      	str	r6, [sp, #4]
9001f5f6:	9500      	str	r5, [sp, #0]
9001f5f8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
9001f5fc:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
9001f5fe:	4621      	mov	r1, r4
9001f600:	f8bd 2020 	ldrh.w	r2, [sp, #32]
9001f604:	47a8      	blx	r5
9001f606:	b00b      	add	sp, #44	; 0x2c
9001f608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001f60c:	f010 0f40 	tst.w	r0, #64	; 0x40
9001f610:	e7e5      	b.n	9001f5de <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
9001f612:	6803      	ldr	r3, [r0, #0]
9001f614:	6a1b      	ldr	r3, [r3, #32]
9001f616:	4798      	blx	r3
9001f618:	4a43      	ldr	r2, [pc, #268]	; (9001f728 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
9001f61a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
9001f61e:	f8b2 e000 	ldrh.w	lr, [r2]
9001f622:	4692      	mov	sl, r2
9001f624:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
9001f628:	fb0e 1303 	mla	r3, lr, r3, r1
9001f62c:	fb0e fe06 	mul.w	lr, lr, r6
9001f630:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001f634:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001f638:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
9001f63c:	9305      	str	r3, [sp, #20]
9001f63e:	4570      	cmp	r0, lr
9001f640:	d26a      	bcs.n	9001f718 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a8>
9001f642:	9b05      	ldr	r3, [sp, #20]
9001f644:	4621      	mov	r1, r4
9001f646:	eb00 0b03 	add.w	fp, r0, r3
9001f64a:	4558      	cmp	r0, fp
9001f64c:	d257      	bcs.n	9001f6fe <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18e>
9001f64e:	f851 4b04 	ldr.w	r4, [r1], #4
9001f652:	0e22      	lsrs	r2, r4, #24
9001f654:	d012      	beq.n	9001f67c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
9001f656:	2aff      	cmp	r2, #255	; 0xff
9001f658:	ea4f 2714 	mov.w	r7, r4, lsr #8
9001f65c:	d110      	bne.n	9001f680 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
9001f65e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001f662:	d10d      	bne.n	9001f680 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
9001f664:	0963      	lsrs	r3, r4, #5
9001f666:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
9001f66a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001f66e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001f672:	f027 0707 	bic.w	r7, r7, #7
9001f676:	431f      	orrs	r7, r3
9001f678:	433c      	orrs	r4, r7
9001f67a:	8004      	strh	r4, [r0, #0]
9001f67c:	3002      	adds	r0, #2
9001f67e:	e7e4      	b.n	9001f64a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xda>
9001f680:	fb09 f302 	mul.w	r3, r9, r2
9001f684:	f8b0 c000 	ldrh.w	ip, [r0]
9001f688:	f3c4 4507 	ubfx	r5, r4, #16, #8
9001f68c:	b2ff      	uxtb	r7, r7
9001f68e:	1c5a      	adds	r2, r3, #1
9001f690:	ea4f 262c 	mov.w	r6, ip, asr #8
9001f694:	b2e4      	uxtb	r4, r4
9001f696:	eb02 2223 	add.w	r2, r2, r3, asr #8
9001f69a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001f69e:	1212      	asrs	r2, r2, #8
9001f6a0:	b293      	uxth	r3, r2
9001f6a2:	43d2      	mvns	r2, r2
9001f6a4:	fb15 f503 	smulbb	r5, r5, r3
9001f6a8:	b2d2      	uxtb	r2, r2
9001f6aa:	fb17 f703 	smulbb	r7, r7, r3
9001f6ae:	fb06 5602 	mla	r6, r6, r2, r5
9001f6b2:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001f6b6:	fb14 f403 	smulbb	r4, r4, r3
9001f6ba:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001f6be:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001f6c2:	b2b6      	uxth	r6, r6
9001f6c4:	fa5f fc8c 	uxtb.w	ip, ip
9001f6c8:	fb05 7702 	mla	r7, r5, r2, r7
9001f6cc:	1c73      	adds	r3, r6, #1
9001f6ce:	fb0c 4202 	mla	r2, ip, r2, r4
9001f6d2:	b2bf      	uxth	r7, r7
9001f6d4:	b292      	uxth	r2, r2
9001f6d6:	1c7d      	adds	r5, r7, #1
9001f6d8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
9001f6dc:	f102 0c01 	add.w	ip, r2, #1
9001f6e0:	eb05 2717 	add.w	r7, r5, r7, lsr #8
9001f6e4:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
9001f6e8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
9001f6ec:	097f      	lsrs	r7, r7, #5
9001f6ee:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001f6f2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001f6f6:	4316      	orrs	r6, r2
9001f6f8:	433e      	orrs	r6, r7
9001f6fa:	8006      	strh	r6, [r0, #0]
9001f6fc:	e7be      	b.n	9001f67c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
9001f6fe:	f8ba 3000 	ldrh.w	r3, [sl]
9001f702:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
9001f706:	eba3 0308 	sub.w	r3, r3, r8
9001f70a:	eba4 0408 	sub.w	r4, r4, r8
9001f70e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001f712:	eb01 0484 	add.w	r4, r1, r4, lsl #2
9001f716:	e792      	b.n	9001f63e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
9001f718:	4b02      	ldr	r3, [pc, #8]	; (9001f724 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
9001f71a:	6818      	ldr	r0, [r3, #0]
9001f71c:	6803      	ldr	r3, [r0, #0]
9001f71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001f720:	4798      	blx	r3
9001f722:	e770      	b.n	9001f606 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
9001f724:	20026cdc 	.word	0x20026cdc
9001f728:	20026cd6 	.word	0x20026cd6

9001f72c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
9001f72c:	b570      	push	{r4, r5, r6, lr}
9001f72e:	9d04      	ldr	r5, [sp, #16]
9001f730:	460c      	mov	r4, r1
9001f732:	f89d 6018 	ldrb.w	r6, [sp, #24]
9001f736:	4619      	mov	r1, r3
9001f738:	f89d 3014 	ldrb.w	r3, [sp, #20]
9001f73c:	2a0d      	cmp	r2, #13
9001f73e:	d820      	bhi.n	9001f782 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
9001f740:	e8df f002 	tbb	[pc, r2]
9001f744:	18121807 	.word	0x18121807
9001f748:	18181818 	.word	0x18181818
9001f74c:	18181818 	.word	0x18181818
9001f750:	1818      	.short	0x1818
9001f752:	6802      	ldr	r2, [r0, #0]
9001f754:	e9cd 3604 	strd	r3, r6, [sp, #16]
9001f758:	68d6      	ldr	r6, [r2, #12]
9001f75a:	462b      	mov	r3, r5
9001f75c:	460a      	mov	r2, r1
9001f75e:	4621      	mov	r1, r4
9001f760:	46b4      	mov	ip, r6
9001f762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001f766:	4760      	bx	ip
9001f768:	462a      	mov	r2, r5
9001f76a:	4620      	mov	r0, r4
9001f76c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001f770:	f7ff befe 	b.w	9001f570 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001f774:	4b03      	ldr	r3, [pc, #12]	; (9001f784 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
9001f776:	f240 21c1 	movw	r1, #705	; 0x2c1
9001f77a:	4a03      	ldr	r2, [pc, #12]	; (9001f788 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
9001f77c:	4803      	ldr	r0, [pc, #12]	; (9001f78c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
9001f77e:	f009 fa59 	bl	90028c34 <__assert_func>
9001f782:	bd70      	pop	{r4, r5, r6, pc}
9001f784:	90030710 	.word	0x90030710
9001f788:	90030e61 	.word	0x90030e61
9001f78c:	90030774 	.word	0x90030774

9001f790 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
9001f790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f794:	b093      	sub	sp, #76	; 0x4c
9001f796:	880f      	ldrh	r7, [r1, #0]
9001f798:	4604      	mov	r4, r0
9001f79a:	4688      	mov	r8, r1
9001f79c:	4616      	mov	r6, r2
9001f79e:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
9001f7a2:	b12f      	cbz	r7, 9001f7b0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
9001f7a4:	4b6f      	ldr	r3, [pc, #444]	; (9001f964 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d4>)
9001f7a6:	21e2      	movs	r1, #226	; 0xe2
9001f7a8:	4a6f      	ldr	r2, [pc, #444]	; (9001f968 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
9001f7aa:	4870      	ldr	r0, [pc, #448]	; (9001f96c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
9001f7ac:	f009 fa42 	bl	90028c34 <__assert_func>
9001f7b0:	6810      	ldr	r0, [r2, #0]
9001f7b2:	ad0e      	add	r5, sp, #56	; 0x38
9001f7b4:	6851      	ldr	r1, [r2, #4]
9001f7b6:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 9001f974 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>
9001f7ba:	c503      	stmia	r5!, {r0, r1}
9001f7bc:	6818      	ldr	r0, [r3, #0]
9001f7be:	ad10      	add	r5, sp, #64	; 0x40
9001f7c0:	6859      	ldr	r1, [r3, #4]
9001f7c2:	c503      	stmia	r5!, {r0, r1}
9001f7c4:	a80e      	add	r0, sp, #56	; 0x38
9001f7c6:	f7f9 fa5b 	bl	90018c80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001f7ca:	4631      	mov	r1, r6
9001f7cc:	a810      	add	r0, sp, #64	; 0x40
9001f7ce:	4e68      	ldr	r6, [pc, #416]	; (9001f970 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
9001f7d0:	f7f9 fa3e 	bl	90018c50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001f7d4:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
9001f7d8:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
9001f7dc:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
9001f7e0:	f8db 0000 	ldr.w	r0, [fp]
9001f7e4:	fb11 2103 	smlabb	r1, r1, r3, r2
9001f7e8:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
9001f7ec:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
9001f7f0:	440c      	add	r4, r1
9001f7f2:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
9001f7f6:	440a      	add	r2, r1
9001f7f8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
9001f7fc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001f800:	4413      	add	r3, r2
9001f802:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
9001f806:	6803      	ldr	r3, [r0, #0]
9001f808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9001f80c:	4798      	blx	r3
9001f80e:	2801      	cmp	r0, #1
9001f810:	d11d      	bne.n	9001f84e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
9001f812:	220b      	movs	r2, #11
9001f814:	9708      	str	r7, [sp, #32]
9001f816:	b2ad      	uxth	r5, r5
9001f818:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
9001f81c:	9207      	str	r2, [sp, #28]
9001f81e:	4621      	mov	r1, r4
9001f820:	8832      	ldrh	r2, [r6, #0]
9001f822:	f8cd a010 	str.w	sl, [sp, #16]
9001f826:	9502      	str	r5, [sp, #8]
9001f828:	e9cd 0205 	strd	r0, r2, [sp, #20]
9001f82c:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
9001f830:	9203      	str	r2, [sp, #12]
9001f832:	fa1f f289 	uxth.w	r2, r9
9001f836:	9201      	str	r2, [sp, #4]
9001f838:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
9001f83c:	9200      	str	r2, [sp, #0]
9001f83e:	4642      	mov	r2, r8
9001f840:	f8db 0000 	ldr.w	r0, [fp]
9001f844:	f7f5 fe76 	bl	90015534 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
9001f848:	b013      	add	sp, #76	; 0x4c
9001f84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001f84e:	f8db 0000 	ldr.w	r0, [fp]
9001f852:	6803      	ldr	r3, [r0, #0]
9001f854:	6a1b      	ldr	r3, [r3, #32]
9001f856:	4798      	blx	r3
9001f858:	8832      	ldrh	r2, [r6, #0]
9001f85a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
9001f85e:	f04f 0e04 	mov.w	lr, #4
9001f862:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
9001f866:	4355      	muls	r5, r2
9001f868:	960d      	str	r6, [sp, #52]	; 0x34
9001f86a:	fb02 1303 	mla	r3, r2, r3, r1
9001f86e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001f872:	eb00 0345 	add.w	r3, r0, r5, lsl #1
9001f876:	930c      	str	r3, [sp, #48]	; 0x30
9001f878:	ea4f 0349 	mov.w	r3, r9, lsl #1
9001f87c:	930b      	str	r3, [sp, #44]	; 0x2c
9001f87e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001f880:	4298      	cmp	r0, r3
9001f882:	d269      	bcs.n	9001f958 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
9001f884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001f886:	4621      	mov	r1, r4
9001f888:	eb00 0b03 	add.w	fp, r0, r3
9001f88c:	4558      	cmp	r0, fp
9001f88e:	460b      	mov	r3, r1
9001f890:	d256      	bcs.n	9001f940 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b0>
9001f892:	781b      	ldrb	r3, [r3, #0]
9001f894:	3101      	adds	r1, #1
9001f896:	fb1e e303 	smlabb	r3, lr, r3, lr
9001f89a:	f858 2003 	ldr.w	r2, [r8, r3]
9001f89e:	0e14      	lsrs	r4, r2, #24
9001f8a0:	d012      	beq.n	9001f8c8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
9001f8a2:	2cff      	cmp	r4, #255	; 0xff
9001f8a4:	ea4f 2612 	mov.w	r6, r2, lsr #8
9001f8a8:	d110      	bne.n	9001f8cc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
9001f8aa:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
9001f8ae:	d10d      	bne.n	9001f8cc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
9001f8b0:	0953      	lsrs	r3, r2, #5
9001f8b2:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
9001f8b6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001f8ba:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001f8be:	f026 0607 	bic.w	r6, r6, #7
9001f8c2:	431e      	orrs	r6, r3
9001f8c4:	4332      	orrs	r2, r6
9001f8c6:	8002      	strh	r2, [r0, #0]
9001f8c8:	3002      	adds	r0, #2
9001f8ca:	e7df      	b.n	9001f88c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfc>
9001f8cc:	fb0a f404 	mul.w	r4, sl, r4
9001f8d0:	8807      	ldrh	r7, [r0, #0]
9001f8d2:	b2f6      	uxtb	r6, r6
9001f8d4:	1c63      	adds	r3, r4, #1
9001f8d6:	123d      	asrs	r5, r7, #8
9001f8d8:	eb03 2324 	add.w	r3, r3, r4, asr #8
9001f8dc:	f3c2 4407 	ubfx	r4, r2, #16, #8
9001f8e0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001f8e4:	b2d2      	uxtb	r2, r2
9001f8e6:	121b      	asrs	r3, r3, #8
9001f8e8:	fa1f fc83 	uxth.w	ip, r3
9001f8ec:	43db      	mvns	r3, r3
9001f8ee:	fb14 f40c 	smulbb	r4, r4, ip
9001f8f2:	b2db      	uxtb	r3, r3
9001f8f4:	fb12 f20c 	smulbb	r2, r2, ip
9001f8f8:	fb05 4503 	mla	r5, r5, r3, r4
9001f8fc:	10fc      	asrs	r4, r7, #3
9001f8fe:	fb16 f60c 	smulbb	r6, r6, ip
9001f902:	00ff      	lsls	r7, r7, #3
9001f904:	b2ad      	uxth	r5, r5
9001f906:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
9001f90a:	b2ff      	uxtb	r7, r7
9001f90c:	fb04 6603 	mla	r6, r4, r3, r6
9001f910:	fb07 2203 	mla	r2, r7, r3, r2
9001f914:	1c6b      	adds	r3, r5, #1
9001f916:	b2b6      	uxth	r6, r6
9001f918:	b292      	uxth	r2, r2
9001f91a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001f91e:	1c54      	adds	r4, r2, #1
9001f920:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001f924:	eb04 2412 	add.w	r4, r4, r2, lsr #8
9001f928:	f3c4 24c4 	ubfx	r4, r4, #11, #5
9001f92c:	4325      	orrs	r5, r4
9001f92e:	1c74      	adds	r4, r6, #1
9001f930:	eb04 2616 	add.w	r6, r4, r6, lsr #8
9001f934:	0976      	lsrs	r6, r6, #5
9001f936:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001f93a:	4335      	orrs	r5, r6
9001f93c:	8005      	strh	r5, [r0, #0]
9001f93e:	e7c3      	b.n	9001f8c8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
9001f940:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001f942:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
9001f946:	881b      	ldrh	r3, [r3, #0]
9001f948:	eba4 0409 	sub.w	r4, r4, r9
9001f94c:	eba3 0309 	sub.w	r3, r3, r9
9001f950:	440c      	add	r4, r1
9001f952:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001f956:	e792      	b.n	9001f87e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
9001f958:	4b06      	ldr	r3, [pc, #24]	; (9001f974 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
9001f95a:	6818      	ldr	r0, [r3, #0]
9001f95c:	6803      	ldr	r3, [r0, #0]
9001f95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001f960:	4798      	blx	r3
9001f962:	e771      	b.n	9001f848 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
9001f964:	9003051b 	.word	0x9003051b
9001f968:	90030c32 	.word	0x90030c32
9001f96c:	90030774 	.word	0x90030774
9001f970:	20026cd6 	.word	0x20026cd6
9001f974:	20026cdc 	.word	0x20026cdc

9001f978 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
9001f978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f97c:	4614      	mov	r4, r2
9001f97e:	880a      	ldrh	r2, [r1, #0]
9001f980:	b091      	sub	sp, #68	; 0x44
9001f982:	4607      	mov	r7, r0
9001f984:	2a02      	cmp	r2, #2
9001f986:	4689      	mov	r9, r1
9001f988:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
9001f98c:	d006      	beq.n	9001f99c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
9001f98e:	4b77      	ldr	r3, [pc, #476]	; (9001fb6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f4>)
9001f990:	f240 113b 	movw	r1, #315	; 0x13b
9001f994:	4a76      	ldr	r2, [pc, #472]	; (9001fb70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f8>)
9001f996:	4877      	ldr	r0, [pc, #476]	; (9001fb74 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1fc>)
9001f998:	f009 f94c 	bl	90028c34 <__assert_func>
9001f99c:	2e00      	cmp	r6, #0
9001f99e:	d04b      	beq.n	9001fa38 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
9001f9a0:	6820      	ldr	r0, [r4, #0]
9001f9a2:	ad0c      	add	r5, sp, #48	; 0x30
9001f9a4:	6861      	ldr	r1, [r4, #4]
9001f9a6:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 9001fb7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>
9001f9aa:	c503      	stmia	r5!, {r0, r1}
9001f9ac:	6818      	ldr	r0, [r3, #0]
9001f9ae:	ad0e      	add	r5, sp, #56	; 0x38
9001f9b0:	6859      	ldr	r1, [r3, #4]
9001f9b2:	c503      	stmia	r5!, {r0, r1}
9001f9b4:	a80c      	add	r0, sp, #48	; 0x30
9001f9b6:	f7f9 f963 	bl	90018c80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001f9ba:	4621      	mov	r1, r4
9001f9bc:	a80e      	add	r0, sp, #56	; 0x38
9001f9be:	f7f9 f947 	bl	90018c50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001f9c2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
9001f9c6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001f9ca:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
9001f9ce:	f8da 0000 	ldr.w	r0, [sl]
9001f9d2:	fb11 2103 	smlabb	r1, r1, r3, r2
9001f9d6:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
9001f9da:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
9001f9de:	187c      	adds	r4, r7, r1
9001f9e0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
9001f9e4:	4f64      	ldr	r7, [pc, #400]	; (9001fb78 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
9001f9e6:	440a      	add	r2, r1
9001f9e8:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
9001f9ec:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
9001f9f0:	4413      	add	r3, r2
9001f9f2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
9001f9f6:	6803      	ldr	r3, [r0, #0]
9001f9f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9001f9fc:	4798      	blx	r3
9001f9fe:	2801      	cmp	r0, #1
9001fa00:	d11d      	bne.n	9001fa3e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
9001fa02:	2200      	movs	r2, #0
9001fa04:	210b      	movs	r1, #11
9001fa06:	b2ad      	uxth	r5, r5
9001fa08:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
9001fa0c:	e9cd 1207 	strd	r1, r2, [sp, #28]
9001fa10:	8839      	ldrh	r1, [r7, #0]
9001fa12:	9604      	str	r6, [sp, #16]
9001fa14:	9502      	str	r5, [sp, #8]
9001fa16:	e9cd 2105 	strd	r2, r1, [sp, #20]
9001fa1a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
9001fa1e:	4621      	mov	r1, r4
9001fa20:	9203      	str	r2, [sp, #12]
9001fa22:	fa1f f288 	uxth.w	r2, r8
9001fa26:	9201      	str	r2, [sp, #4]
9001fa28:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001fa2c:	9200      	str	r2, [sp, #0]
9001fa2e:	464a      	mov	r2, r9
9001fa30:	f8da 0000 	ldr.w	r0, [sl]
9001fa34:	f7f5 fd7e 	bl	90015534 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
9001fa38:	b011      	add	sp, #68	; 0x44
9001fa3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001fa3e:	f8da 0000 	ldr.w	r0, [sl]
9001fa42:	ea4f 0b48 	mov.w	fp, r8, lsl #1
9001fa46:	6803      	ldr	r3, [r0, #0]
9001fa48:	6a1b      	ldr	r3, [r3, #32]
9001fa4a:	4798      	blx	r3
9001fa4c:	8839      	ldrh	r1, [r7, #0]
9001fa4e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
9001fa52:	2eff      	cmp	r6, #255	; 0xff
9001fa54:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001fa58:	fb05 f501 	mul.w	r5, r5, r1
9001fa5c:	fb01 2303 	mla	r3, r1, r3, r2
9001fa60:	f109 0204 	add.w	r2, r9, #4
9001fa64:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001fa68:	d05f      	beq.n	9001fb2a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b2>
9001fa6a:	f1c6 09ff 	rsb	r9, r6, #255	; 0xff
9001fa6e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
9001fa72:	b2b6      	uxth	r6, r6
9001fa74:	970b      	str	r7, [sp, #44]	; 0x2c
9001fa76:	fa1f f989 	uxth.w	r9, r9
9001fa7a:	42a8      	cmp	r0, r5
9001fa7c:	d26f      	bcs.n	9001fb5e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
9001fa7e:	eb00 010b 	add.w	r1, r0, fp
9001fa82:	4288      	cmp	r0, r1
9001fa84:	4623      	mov	r3, r4
9001fa86:	d244      	bcs.n	9001fb12 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19a>
9001fa88:	8807      	ldrh	r7, [r0, #0]
9001fa8a:	3401      	adds	r4, #1
9001fa8c:	781b      	ldrb	r3, [r3, #0]
9001fa8e:	ea4f 2c27 	mov.w	ip, r7, asr #8
9001fa92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9001fa96:	ea4f 0ae7 	mov.w	sl, r7, asr #3
9001fa9a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001fa9e:	00ff      	lsls	r7, r7, #3
9001faa0:	ea4f 2e23 	mov.w	lr, r3, asr #8
9001faa4:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001faa8:	fb1c fc09 	smulbb	ip, ip, r9
9001faac:	b2ff      	uxtb	r7, r7
9001faae:	fb1a fa09 	smulbb	sl, sl, r9
9001fab2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9001fab6:	fb17 f709 	smulbb	r7, r7, r9
9001faba:	fb0e ce06 	mla	lr, lr, r6, ip
9001fabe:	ea4f 0ce3 	mov.w	ip, r3, asr #3
9001fac2:	00db      	lsls	r3, r3, #3
9001fac4:	fa1f fe8e 	uxth.w	lr, lr
9001fac8:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
9001facc:	b2db      	uxtb	r3, r3
9001face:	fb0c ac06 	mla	ip, ip, r6, sl
9001fad2:	f10e 0a01 	add.w	sl, lr, #1
9001fad6:	fb03 7306 	mla	r3, r3, r6, r7
9001fada:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
9001fade:	b29b      	uxth	r3, r3
9001fae0:	f40e 4a78 	and.w	sl, lr, #63488	; 0xf800
9001fae4:	fa1f fc8c 	uxth.w	ip, ip
9001fae8:	f103 0e01 	add.w	lr, r3, #1
9001faec:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
9001faf0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001faf4:	ea4a 0e03 	orr.w	lr, sl, r3
9001faf8:	f10c 0a01 	add.w	sl, ip, #1
9001fafc:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
9001fb00:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
9001fb04:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
9001fb08:	ea4e 0e0c 	orr.w	lr, lr, ip
9001fb0c:	f820 eb02 	strh.w	lr, [r0], #2
9001fb10:	e7b7      	b.n	9001fa82 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
9001fb12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001fb14:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
9001fb18:	881b      	ldrh	r3, [r3, #0]
9001fb1a:	eba1 0108 	sub.w	r1, r1, r8
9001fb1e:	eba3 0308 	sub.w	r3, r3, r8
9001fb22:	440c      	add	r4, r1
9001fb24:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001fb28:	e7a7      	b.n	9001fa7a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
9001fb2a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
9001fb2e:	42a8      	cmp	r0, r5
9001fb30:	d215      	bcs.n	9001fb5e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
9001fb32:	eb00 010b 	add.w	r1, r0, fp
9001fb36:	4288      	cmp	r0, r1
9001fb38:	d206      	bcs.n	9001fb48 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1d0>
9001fb3a:	f814 3b01 	ldrb.w	r3, [r4], #1
9001fb3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9001fb42:	f820 3b02 	strh.w	r3, [r0], #2
9001fb46:	e7f6      	b.n	9001fb36 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1be>
9001fb48:	883b      	ldrh	r3, [r7, #0]
9001fb4a:	eba3 0308 	sub.w	r3, r3, r8
9001fb4e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001fb52:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001fb56:	eba3 0308 	sub.w	r3, r3, r8
9001fb5a:	441c      	add	r4, r3
9001fb5c:	e7e7      	b.n	9001fb2e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b6>
9001fb5e:	4b07      	ldr	r3, [pc, #28]	; (9001fb7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
9001fb60:	6818      	ldr	r0, [r3, #0]
9001fb62:	6803      	ldr	r3, [r0, #0]
9001fb64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001fb66:	4798      	blx	r3
9001fb68:	e766      	b.n	9001fa38 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
9001fb6a:	bf00      	nop
9001fb6c:	900303d9 	.word	0x900303d9
9001fb70:	90030a9c 	.word	0x90030a9c
9001fb74:	90030774 	.word	0x90030774
9001fb78:	20026cd6 	.word	0x20026cd6
9001fb7c:	20026cdc 	.word	0x20026cdc

9001fb80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
9001fb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001fb84:	4614      	mov	r4, r2
9001fb86:	880a      	ldrh	r2, [r1, #0]
9001fb88:	b091      	sub	sp, #68	; 0x44
9001fb8a:	4606      	mov	r6, r0
9001fb8c:	2a01      	cmp	r2, #1
9001fb8e:	4688      	mov	r8, r1
9001fb90:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
9001fb94:	d006      	beq.n	9001fba4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
9001fb96:	4b7c      	ldr	r3, [pc, #496]	; (9001fd88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x208>)
9001fb98:	f240 1197 	movw	r1, #407	; 0x197
9001fb9c:	4a7b      	ldr	r2, [pc, #492]	; (9001fd8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20c>)
9001fb9e:	487c      	ldr	r0, [pc, #496]	; (9001fd90 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x210>)
9001fba0:	f009 f848 	bl	90028c34 <__assert_func>
9001fba4:	2f00      	cmp	r7, #0
9001fba6:	d04b      	beq.n	9001fc40 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
9001fba8:	6820      	ldr	r0, [r4, #0]
9001fbaa:	ad0c      	add	r5, sp, #48	; 0x30
9001fbac:	6861      	ldr	r1, [r4, #4]
9001fbae:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 9001fd9c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
9001fbb2:	c503      	stmia	r5!, {r0, r1}
9001fbb4:	6818      	ldr	r0, [r3, #0]
9001fbb6:	ad0e      	add	r5, sp, #56	; 0x38
9001fbb8:	6859      	ldr	r1, [r3, #4]
9001fbba:	c503      	stmia	r5!, {r0, r1}
9001fbbc:	a80c      	add	r0, sp, #48	; 0x30
9001fbbe:	f7f9 f85f 	bl	90018c80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001fbc2:	4621      	mov	r1, r4
9001fbc4:	a80e      	add	r0, sp, #56	; 0x38
9001fbc6:	f7f9 f843 	bl	90018c50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001fbca:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
9001fbce:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001fbd2:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
9001fbd6:	f8da 0000 	ldr.w	r0, [sl]
9001fbda:	fb11 2103 	smlabb	r1, r1, r3, r2
9001fbde:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
9001fbe2:	f9bd 903e 	ldrsh.w	r9, [sp, #62]	; 0x3e
9001fbe6:	1874      	adds	r4, r6, r1
9001fbe8:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
9001fbec:	4e69      	ldr	r6, [pc, #420]	; (9001fd94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x214>)
9001fbee:	440a      	add	r2, r1
9001fbf0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
9001fbf4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
9001fbf8:	4413      	add	r3, r2
9001fbfa:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
9001fbfe:	6803      	ldr	r3, [r0, #0]
9001fc00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9001fc04:	4798      	blx	r3
9001fc06:	2801      	cmp	r0, #1
9001fc08:	d11d      	bne.n	9001fc46 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
9001fc0a:	220b      	movs	r2, #11
9001fc0c:	2100      	movs	r1, #0
9001fc0e:	b2ad      	uxth	r5, r5
9001fc10:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
9001fc14:	e9cd 2107 	strd	r2, r1, [sp, #28]
9001fc18:	8832      	ldrh	r2, [r6, #0]
9001fc1a:	4621      	mov	r1, r4
9001fc1c:	9704      	str	r7, [sp, #16]
9001fc1e:	9501      	str	r5, [sp, #4]
9001fc20:	e9cd 0205 	strd	r0, r2, [sp, #20]
9001fc24:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
9001fc28:	9203      	str	r2, [sp, #12]
9001fc2a:	fa1f f289 	uxth.w	r2, r9
9001fc2e:	9202      	str	r2, [sp, #8]
9001fc30:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001fc34:	9200      	str	r2, [sp, #0]
9001fc36:	4642      	mov	r2, r8
9001fc38:	f8da 0000 	ldr.w	r0, [sl]
9001fc3c:	f7f5 fc7a 	bl	90015534 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
9001fc40:	b011      	add	sp, #68	; 0x44
9001fc42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001fc46:	f8da 0000 	ldr.w	r0, [sl]
9001fc4a:	6803      	ldr	r3, [r0, #0]
9001fc4c:	6a1b      	ldr	r3, [r3, #32]
9001fc4e:	4798      	blx	r3
9001fc50:	8832      	ldrh	r2, [r6, #0]
9001fc52:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001fc56:	2fff      	cmp	r7, #255	; 0xff
9001fc58:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
9001fc5c:	ea4f 0e45 	mov.w	lr, r5, lsl #1
9001fc60:	fb09 f902 	mul.w	r9, r9, r2
9001fc64:	fb02 1303 	mla	r3, r2, r3, r1
9001fc68:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001fc6c:	d056      	beq.n	9001fd1c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
9001fc6e:	ea6f 0c07 	mvn.w	ip, r7
9001fc72:	eb00 0949 	add.w	r9, r0, r9, lsl #1
9001fc76:	b2bb      	uxth	r3, r7
9001fc78:	960b      	str	r6, [sp, #44]	; 0x2c
9001fc7a:	fa5f fc8c 	uxtb.w	ip, ip
9001fc7e:	4548      	cmp	r0, r9
9001fc80:	d27b      	bcs.n	9001fd7a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
9001fc82:	eb00 0a0e 	add.w	sl, r0, lr
9001fc86:	4550      	cmp	r0, sl
9001fc88:	4622      	mov	r2, r4
9001fc8a:	d23d      	bcs.n	9001fd08 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x188>
9001fc8c:	7811      	ldrb	r1, [r2, #0]
9001fc8e:	2604      	movs	r6, #4
9001fc90:	2203      	movs	r2, #3
9001fc92:	3401      	adds	r4, #1
9001fc94:	fb12 6101 	smlabb	r1, r2, r1, r6
9001fc98:	8802      	ldrh	r2, [r0, #0]
9001fc9a:	eb08 0b01 	add.w	fp, r8, r1
9001fc9e:	1217      	asrs	r7, r2, #8
9001fca0:	f818 1001 	ldrb.w	r1, [r8, r1]
9001fca4:	f89b 6002 	ldrb.w	r6, [fp, #2]
9001fca8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001fcac:	f89b b001 	ldrb.w	fp, [fp, #1]
9001fcb0:	fb16 f603 	smulbb	r6, r6, r3
9001fcb4:	fb1b fb03 	smulbb	fp, fp, r3
9001fcb8:	fb07 670c 	mla	r7, r7, ip, r6
9001fcbc:	10d6      	asrs	r6, r2, #3
9001fcbe:	00d2      	lsls	r2, r2, #3
9001fcc0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001fcc4:	b2bf      	uxth	r7, r7
9001fcc6:	b2d2      	uxtb	r2, r2
9001fcc8:	fb06 b60c 	mla	r6, r6, ip, fp
9001fccc:	fb12 f20c 	smulbb	r2, r2, ip
9001fcd0:	b2b6      	uxth	r6, r6
9001fcd2:	fb01 2103 	mla	r1, r1, r3, r2
9001fcd6:	1c7a      	adds	r2, r7, #1
9001fcd8:	f106 0b01 	add.w	fp, r6, #1
9001fcdc:	b289      	uxth	r1, r1
9001fcde:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001fce2:	1c4a      	adds	r2, r1, #1
9001fce4:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
9001fce8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001fcec:	eb02 2211 	add.w	r2, r2, r1, lsr #8
9001fcf0:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
9001fcf4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001fcf8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001fcfc:	4317      	orrs	r7, r2
9001fcfe:	ea47 070b 	orr.w	r7, r7, fp
9001fd02:	f820 7b02 	strh.w	r7, [r0], #2
9001fd06:	e7be      	b.n	9001fc86 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
9001fd08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001fd0a:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
9001fd0e:	8812      	ldrh	r2, [r2, #0]
9001fd10:	1b49      	subs	r1, r1, r5
9001fd12:	1b52      	subs	r2, r2, r5
9001fd14:	440c      	add	r4, r1
9001fd16:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001fd1a:	e7b0      	b.n	9001fc7e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfe>
9001fd1c:	eb00 0949 	add.w	r9, r0, r9, lsl #1
9001fd20:	2203      	movs	r2, #3
9001fd22:	2704      	movs	r7, #4
9001fd24:	491c      	ldr	r1, [pc, #112]	; (9001fd98 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
9001fd26:	4548      	cmp	r0, r9
9001fd28:	d227      	bcs.n	9001fd7a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
9001fd2a:	eb00 0c0e 	add.w	ip, r0, lr
9001fd2e:	4560      	cmp	r0, ip
9001fd30:	4623      	mov	r3, r4
9001fd32:	d219      	bcs.n	9001fd68 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e8>
9001fd34:	f893 a000 	ldrb.w	sl, [r3]
9001fd38:	3401      	adds	r4, #1
9001fd3a:	fb12 7a0a 	smlabb	sl, r2, sl, r7
9001fd3e:	eb08 0b0a 	add.w	fp, r8, sl
9001fd42:	f818 a00a 	ldrb.w	sl, [r8, sl]
9001fd46:	f89b 3002 	ldrb.w	r3, [fp, #2]
9001fd4a:	f89b b001 	ldrb.w	fp, [fp, #1]
9001fd4e:	ea01 2303 	and.w	r3, r1, r3, lsl #8
9001fd52:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
9001fd56:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001fd5a:	ea43 030b 	orr.w	r3, r3, fp
9001fd5e:	ea43 03da 	orr.w	r3, r3, sl, lsr #3
9001fd62:	f820 3b02 	strh.w	r3, [r0], #2
9001fd66:	e7e2      	b.n	9001fd2e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
9001fd68:	8833      	ldrh	r3, [r6, #0]
9001fd6a:	1b5b      	subs	r3, r3, r5
9001fd6c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001fd70:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001fd74:	1b5b      	subs	r3, r3, r5
9001fd76:	441c      	add	r4, r3
9001fd78:	e7d5      	b.n	9001fd26 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
9001fd7a:	4b08      	ldr	r3, [pc, #32]	; (9001fd9c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
9001fd7c:	6818      	ldr	r0, [r3, #0]
9001fd7e:	6803      	ldr	r3, [r0, #0]
9001fd80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001fd82:	4798      	blx	r3
9001fd84:	e75c      	b.n	9001fc40 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
9001fd86:	bf00      	nop
9001fd88:	90030427 	.word	0x90030427
9001fd8c:	90030b25 	.word	0x90030b25
9001fd90:	90030774 	.word	0x90030774
9001fd94:	20026cd6 	.word	0x20026cd6
9001fd98:	fffff800 	.word	0xfffff800
9001fd9c:	20026cdc 	.word	0x20026cdc

9001fda0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
9001fda0:	b430      	push	{r4, r5}
9001fda2:	780d      	ldrb	r5, [r1, #0]
9001fda4:	f89d 4008 	ldrb.w	r4, [sp, #8]
9001fda8:	2d01      	cmp	r5, #1
9001fdaa:	d00a      	beq.n	9001fdc2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
9001fdac:	d305      	bcc.n	9001fdba <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
9001fdae:	2d02      	cmp	r5, #2
9001fdb0:	d10b      	bne.n	9001fdca <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
9001fdb2:	9402      	str	r4, [sp, #8]
9001fdb4:	bc30      	pop	{r4, r5}
9001fdb6:	f7ff bddf 	b.w	9001f978 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
9001fdba:	9402      	str	r4, [sp, #8]
9001fdbc:	bc30      	pop	{r4, r5}
9001fdbe:	f7ff bce7 	b.w	9001f790 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
9001fdc2:	9402      	str	r4, [sp, #8]
9001fdc4:	bc30      	pop	{r4, r5}
9001fdc6:	f7ff bedb 	b.w	9001fb80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
9001fdca:	bc30      	pop	{r4, r5}
9001fdcc:	4770      	bx	lr
	...

9001fdd0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
9001fdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001fdd4:	b087      	sub	sp, #28
9001fdd6:	4604      	mov	r4, r0
9001fdd8:	460e      	mov	r6, r1
9001fdda:	6810      	ldr	r0, [r2, #0]
9001fddc:	6851      	ldr	r1, [r2, #4]
9001fdde:	ad02      	add	r5, sp, #8
9001fde0:	4617      	mov	r7, r2
9001fde2:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
9001fde6:	f8df 9230 	ldr.w	r9, [pc, #560]	; 90020018 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
9001fdea:	c503      	stmia	r5!, {r0, r1}
9001fdec:	6818      	ldr	r0, [r3, #0]
9001fdee:	ad04      	add	r5, sp, #16
9001fdf0:	6859      	ldr	r1, [r3, #4]
9001fdf2:	c503      	stmia	r5!, {r0, r1}
9001fdf4:	a802      	add	r0, sp, #8
9001fdf6:	f7f8 ff43 	bl	90018c80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001fdfa:	4639      	mov	r1, r7
9001fdfc:	a804      	add	r0, sp, #16
9001fdfe:	f7f8 ff27 	bl	90018c50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001fe02:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001fe06:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001fe0a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
9001fe0e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
9001fe12:	fb11 2103 	smlabb	r1, r1, r3, r2
9001fe16:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
9001fe1a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
9001fe1e:	440e      	add	r6, r1
9001fe20:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001fe24:	440a      	add	r2, r1
9001fe26:	f8ad 2010 	strh.w	r2, [sp, #16]
9001fe2a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001fe2e:	4413      	add	r3, r2
9001fe30:	f8ad 3012 	strh.w	r3, [sp, #18]
9001fe34:	4b77      	ldr	r3, [pc, #476]	; (90020014 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
9001fe36:	6818      	ldr	r0, [r3, #0]
9001fe38:	6803      	ldr	r3, [r0, #0]
9001fe3a:	6a1b      	ldr	r3, [r3, #32]
9001fe3c:	4798      	blx	r3
9001fe3e:	f8b9 b000 	ldrh.w	fp, [r9]
9001fe42:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001fe46:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
9001fe4a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001fe4e:	fb05 f50b 	mul.w	r5, r5, fp
9001fe52:	fb0b 2303 	mla	r3, fp, r3, r2
9001fe56:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001fe5a:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001fe5e:	9300      	str	r3, [sp, #0]
9001fe60:	d068      	beq.n	9001ff34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x164>
9001fe62:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
9001fe66:	4558      	cmp	r0, fp
9001fe68:	f080 80cc 	bcs.w	90020004 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001fe6c:	9b00      	ldr	r3, [sp, #0]
9001fe6e:	4631      	mov	r1, r6
9001fe70:	18c3      	adds	r3, r0, r3
9001fe72:	9301      	str	r3, [sp, #4]
9001fe74:	9b01      	ldr	r3, [sp, #4]
9001fe76:	4298      	cmp	r0, r3
9001fe78:	d24e      	bcs.n	9001ff18 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x148>
9001fe7a:	f811 2b01 	ldrb.w	r2, [r1], #1
9001fe7e:	2a00      	cmp	r2, #0
9001fe80:	d047      	beq.n	9001ff12 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
9001fe82:	fb0a f202 	mul.w	r2, sl, r2
9001fe86:	1c53      	adds	r3, r2, #1
9001fe88:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001fe8c:	121b      	asrs	r3, r3, #8
9001fe8e:	d040      	beq.n	9001ff12 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
9001fe90:	8802      	ldrh	r2, [r0, #0]
9001fe92:	b29e      	uxth	r6, r3
9001fe94:	f8b4 c000 	ldrh.w	ip, [r4]
9001fe98:	43db      	mvns	r3, r3
9001fe9a:	1215      	asrs	r5, r2, #8
9001fe9c:	b2db      	uxtb	r3, r3
9001fe9e:	ea4f 272c 	mov.w	r7, ip, asr #8
9001fea2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001fea6:	ea4f 0ee2 	mov.w	lr, r2, asr #3
9001feaa:	fb15 f503 	smulbb	r5, r5, r3
9001feae:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001feb2:	00d2      	lsls	r2, r2, #3
9001feb4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9001feb8:	fb07 5706 	mla	r7, r7, r6, r5
9001febc:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001fec0:	b2d2      	uxtb	r2, r2
9001fec2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001fec6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001feca:	fb1e fe03 	smulbb	lr, lr, r3
9001fece:	b2bf      	uxth	r7, r7
9001fed0:	fb12 f203 	smulbb	r2, r2, r3
9001fed4:	fa5f fc8c 	uxtb.w	ip, ip
9001fed8:	fb05 e506 	mla	r5, r5, r6, lr
9001fedc:	1c7b      	adds	r3, r7, #1
9001fede:	fb0c 2c06 	mla	ip, ip, r6, r2
9001fee2:	b2ad      	uxth	r5, r5
9001fee4:	fa1f fc8c 	uxth.w	ip, ip
9001fee8:	f105 0e01 	add.w	lr, r5, #1
9001feec:	eb03 2717 	add.w	r7, r3, r7, lsr #8
9001fef0:	f10c 0601 	add.w	r6, ip, #1
9001fef4:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
9001fef8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001fefc:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
9001ff00:	096d      	lsrs	r5, r5, #5
9001ff02:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001ff06:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001ff0a:	ea47 070c 	orr.w	r7, r7, ip
9001ff0e:	432f      	orrs	r7, r5
9001ff10:	8007      	strh	r7, [r0, #0]
9001ff12:	3002      	adds	r0, #2
9001ff14:	3402      	adds	r4, #2
9001ff16:	e7ad      	b.n	9001fe74 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
9001ff18:	f8b9 3000 	ldrh.w	r3, [r9]
9001ff1c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
9001ff20:	eba3 0308 	sub.w	r3, r3, r8
9001ff24:	eba6 0608 	sub.w	r6, r6, r8
9001ff28:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ff2c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
9001ff30:	440e      	add	r6, r1
9001ff32:	e798      	b.n	9001fe66 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
9001ff34:	eb00 0545 	add.w	r5, r0, r5, lsl #1
9001ff38:	42a8      	cmp	r0, r5
9001ff3a:	d263      	bcs.n	90020004 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001ff3c:	9b00      	ldr	r3, [sp, #0]
9001ff3e:	4631      	mov	r1, r6
9001ff40:	eb00 0b03 	add.w	fp, r0, r3
9001ff44:	4558      	cmp	r0, fp
9001ff46:	d24f      	bcs.n	9001ffe8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
9001ff48:	f811 3b01 	ldrb.w	r3, [r1], #1
9001ff4c:	b12b      	cbz	r3, 9001ff5a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
9001ff4e:	2bff      	cmp	r3, #255	; 0xff
9001ff50:	f8b4 e000 	ldrh.w	lr, [r4]
9001ff54:	d104      	bne.n	9001ff60 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x190>
9001ff56:	f8a0 e000 	strh.w	lr, [r0]
9001ff5a:	3002      	adds	r0, #2
9001ff5c:	3402      	adds	r4, #2
9001ff5e:	e7f1      	b.n	9001ff44 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x174>
9001ff60:	8802      	ldrh	r2, [r0, #0]
9001ff62:	b29f      	uxth	r7, r3
9001ff64:	43db      	mvns	r3, r3
9001ff66:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001ff6a:	1216      	asrs	r6, r2, #8
9001ff6c:	b2db      	uxtb	r3, r3
9001ff6e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001ff72:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001ff76:	ea4f 0ae2 	mov.w	sl, r2, asr #3
9001ff7a:	00d2      	lsls	r2, r2, #3
9001ff7c:	fb16 f603 	smulbb	r6, r6, r3
9001ff80:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001ff84:	b2d2      	uxtb	r2, r2
9001ff86:	fb0c 6c07 	mla	ip, ip, r7, r6
9001ff8a:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001ff8e:	fb1a fa03 	smulbb	sl, sl, r3
9001ff92:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001ff96:	fb12 f303 	smulbb	r3, r2, r3
9001ff9a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001ff9e:	fa5f fe8e 	uxtb.w	lr, lr
9001ffa2:	fb06 a607 	mla	r6, r6, r7, sl
9001ffa6:	fa1f fc8c 	uxth.w	ip, ip
9001ffaa:	fb0e 3e07 	mla	lr, lr, r7, r3
9001ffae:	b2b6      	uxth	r6, r6
9001ffb0:	f10c 0201 	add.w	r2, ip, #1
9001ffb4:	fa1f fe8e 	uxth.w	lr, lr
9001ffb8:	f106 0a01 	add.w	sl, r6, #1
9001ffbc:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
9001ffc0:	f10e 0301 	add.w	r3, lr, #1
9001ffc4:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
9001ffc8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001ffcc:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
9001ffd0:	0976      	lsrs	r6, r6, #5
9001ffd2:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
9001ffd6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001ffda:	ea4c 0c0e 	orr.w	ip, ip, lr
9001ffde:	ea4c 0c06 	orr.w	ip, ip, r6
9001ffe2:	f8a0 c000 	strh.w	ip, [r0]
9001ffe6:	e7b8      	b.n	9001ff5a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
9001ffe8:	f8b9 3000 	ldrh.w	r3, [r9]
9001ffec:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
9001fff0:	eba3 0308 	sub.w	r3, r3, r8
9001fff4:	eba6 0608 	sub.w	r6, r6, r8
9001fff8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001fffc:	eb04 0446 	add.w	r4, r4, r6, lsl #1
90020000:	440e      	add	r6, r1
90020002:	e799      	b.n	9001ff38 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
90020004:	4b03      	ldr	r3, [pc, #12]	; (90020014 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
90020006:	6818      	ldr	r0, [r3, #0]
90020008:	6803      	ldr	r3, [r0, #0]
9002000a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9002000c:	4798      	blx	r3
9002000e:	b007      	add	sp, #28
90020010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90020014:	20026cdc 	.word	0x20026cdc
90020018:	20026cd6 	.word	0x20026cd6

9002001c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
9002001c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020020:	b089      	sub	sp, #36	; 0x24
90020022:	4682      	mov	sl, r0
90020024:	460d      	mov	r5, r1
90020026:	4691      	mov	r9, r2
90020028:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
9002002c:	4698      	mov	r8, r3
9002002e:	9c12      	ldr	r4, [sp, #72]	; 0x48
90020030:	b3ae      	cbz	r6, 9002009e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
90020032:	4608      	mov	r0, r1
90020034:	f7fc f9fe 	bl	9001c434 <_ZNK8touchgfx6Bitmap8getWidthEv>
90020038:	4607      	mov	r7, r0
9002003a:	4628      	mov	r0, r5
9002003c:	f7fc fa34 	bl	9001c4a8 <_ZNK8touchgfx6Bitmap9getHeightEv>
90020040:	f8ad 000e 	strh.w	r0, [sp, #14]
90020044:	4628      	mov	r0, r5
90020046:	f8ad 9008 	strh.w	r9, [sp, #8]
9002004a:	f8ad 800a 	strh.w	r8, [sp, #10]
9002004e:	f8ad 700c 	strh.w	r7, [sp, #12]
90020052:	f7fc fb81 	bl	9001c758 <_ZNK8touchgfx6Bitmap9getFormatEv>
90020056:	b178      	cbz	r0, 90020078 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
90020058:	4628      	mov	r0, r5
9002005a:	f7fc fb7d 	bl	9001c758 <_ZNK8touchgfx6Bitmap9getFormatEv>
9002005e:	2802      	cmp	r0, #2
90020060:	d00a      	beq.n	90020078 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
90020062:	4628      	mov	r0, r5
90020064:	f7fc fb78 	bl	9001c758 <_ZNK8touchgfx6Bitmap9getFormatEv>
90020068:	280b      	cmp	r0, #11
9002006a:	d005      	beq.n	90020078 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
9002006c:	4b69      	ldr	r3, [pc, #420]	; (90020214 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
9002006e:	214b      	movs	r1, #75	; 0x4b
90020070:	4a69      	ldr	r2, [pc, #420]	; (90020218 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
90020072:	486a      	ldr	r0, [pc, #424]	; (9002021c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
90020074:	f008 fdde 	bl	90028c34 <__assert_func>
90020078:	4628      	mov	r0, r5
9002007a:	f7fc fae3 	bl	9001c644 <_ZNK8touchgfx6Bitmap7getDataEv>
9002007e:	4607      	mov	r7, r0
90020080:	4628      	mov	r0, r5
90020082:	f7fc fb11 	bl	9001c6a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
90020086:	4681      	mov	r9, r0
90020088:	4628      	mov	r0, r5
9002008a:	f7fc fb65 	bl	9001c758 <_ZNK8touchgfx6Bitmap9getFormatEv>
9002008e:	2802      	cmp	r0, #2
90020090:	d108      	bne.n	900200a4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
90020092:	4633      	mov	r3, r6
90020094:	4622      	mov	r2, r4
90020096:	a902      	add	r1, sp, #8
90020098:	4638      	mov	r0, r7
9002009a:	f7ff fa69 	bl	9001f570 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9002009e:	b009      	add	sp, #36	; 0x24
900200a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900200a4:	4628      	mov	r0, r5
900200a6:	f7fc fb57 	bl	9001c758 <_ZNK8touchgfx6Bitmap9getFormatEv>
900200aa:	280b      	cmp	r0, #11
900200ac:	d107      	bne.n	900200be <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
900200ae:	9600      	str	r6, [sp, #0]
900200b0:	4623      	mov	r3, r4
900200b2:	aa02      	add	r2, sp, #8
900200b4:	4649      	mov	r1, r9
900200b6:	4638      	mov	r0, r7
900200b8:	f7ff fe72 	bl	9001fda0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
900200bc:	e7ef      	b.n	9002009e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
900200be:	4628      	mov	r0, r5
900200c0:	f7fc fa86 	bl	9001c5d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
900200c4:	b950      	cbnz	r0, 900200dc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
900200c6:	f8da 3000 	ldr.w	r3, [sl]
900200ca:	aa02      	add	r2, sp, #8
900200cc:	4639      	mov	r1, r7
900200ce:	e9cd 6000 	strd	r6, r0, [sp]
900200d2:	4650      	mov	r0, sl
900200d4:	68dd      	ldr	r5, [r3, #12]
900200d6:	4623      	mov	r3, r4
900200d8:	47a8      	blx	r5
900200da:	e7e0      	b.n	9002009e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
900200dc:	f10d 0818 	add.w	r8, sp, #24
900200e0:	4629      	mov	r1, r5
900200e2:	ad04      	add	r5, sp, #16
900200e4:	4640      	mov	r0, r8
900200e6:	f7fc fa19 	bl	9001c51c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
900200ea:	e898 0003 	ldmia.w	r8, {r0, r1}
900200ee:	e885 0003 	stmia.w	r5, {r0, r1}
900200f2:	4628      	mov	r0, r5
900200f4:	4621      	mov	r1, r4
900200f6:	f7f4 f931 	bl	9001435c <_ZN8touchgfx4RectaNERKS0_>
900200fa:	4628      	mov	r0, r5
900200fc:	f7f4 f971 	bl	900143e2 <_ZNK8touchgfx4Rect7isEmptyEv>
90020100:	b138      	cbz	r0, 90020112 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
90020102:	4623      	mov	r3, r4
90020104:	9600      	str	r6, [sp, #0]
90020106:	aa02      	add	r2, sp, #8
90020108:	4649      	mov	r1, r9
9002010a:	4638      	mov	r0, r7
9002010c:	f7ff fe60 	bl	9001fdd0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
90020110:	e7c5      	b.n	9002009e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
90020112:	f8da 3000 	ldr.w	r3, [sl]
90020116:	aa02      	add	r2, sp, #8
90020118:	4639      	mov	r1, r7
9002011a:	e9cd 6000 	strd	r6, r0, [sp]
9002011e:	4650      	mov	r0, sl
90020120:	f8d3 b00c 	ldr.w	fp, [r3, #12]
90020124:	462b      	mov	r3, r5
90020126:	47d8      	blx	fp
90020128:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9002012c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
90020130:	4293      	cmp	r3, r2
90020132:	dd13      	ble.n	9002015c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
90020134:	f9b4 0000 	ldrsh.w	r0, [r4]
90020138:	1a9b      	subs	r3, r3, r2
9002013a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9002013e:	f8ad 0018 	strh.w	r0, [sp, #24]
90020142:	4638      	mov	r0, r7
90020144:	f8ad 201a 	strh.w	r2, [sp, #26]
90020148:	aa02      	add	r2, sp, #8
9002014a:	f8ad 101c 	strh.w	r1, [sp, #28]
9002014e:	4649      	mov	r1, r9
90020150:	f8ad 301e 	strh.w	r3, [sp, #30]
90020154:	4643      	mov	r3, r8
90020156:	9600      	str	r6, [sp, #0]
90020158:	f7ff fe3a 	bl	9001fdd0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9002015c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
90020160:	f9b4 2000 	ldrsh.w	r2, [r4]
90020164:	4293      	cmp	r3, r2
90020166:	dd13      	ble.n	90020190 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
90020168:	1a9b      	subs	r3, r3, r2
9002016a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
9002016e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
90020172:	f8ad 2018 	strh.w	r2, [sp, #24]
90020176:	aa02      	add	r2, sp, #8
90020178:	f8ad 001a 	strh.w	r0, [sp, #26]
9002017c:	4638      	mov	r0, r7
9002017e:	f8ad 301c 	strh.w	r3, [sp, #28]
90020182:	4643      	mov	r3, r8
90020184:	f8ad 101e 	strh.w	r1, [sp, #30]
90020188:	4649      	mov	r1, r9
9002018a:	9600      	str	r6, [sp, #0]
9002018c:	f7ff fe20 	bl	9001fdd0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
90020190:	88a2      	ldrh	r2, [r4, #4]
90020192:	8823      	ldrh	r3, [r4, #0]
90020194:	f8bd 1014 	ldrh.w	r1, [sp, #20]
90020198:	4413      	add	r3, r2
9002019a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9002019e:	440a      	add	r2, r1
900201a0:	b29b      	uxth	r3, r3
900201a2:	b292      	uxth	r2, r2
900201a4:	b218      	sxth	r0, r3
900201a6:	b211      	sxth	r1, r2
900201a8:	4288      	cmp	r0, r1
900201aa:	dd13      	ble.n	900201d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
900201ac:	1a9b      	subs	r3, r3, r2
900201ae:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
900201b2:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
900201b6:	aa02      	add	r2, sp, #8
900201b8:	f8ad 1018 	strh.w	r1, [sp, #24]
900201bc:	4649      	mov	r1, r9
900201be:	f8ad 301c 	strh.w	r3, [sp, #28]
900201c2:	4643      	mov	r3, r8
900201c4:	f8ad 001e 	strh.w	r0, [sp, #30]
900201c8:	4638      	mov	r0, r7
900201ca:	9600      	str	r6, [sp, #0]
900201cc:	f8ad 501a 	strh.w	r5, [sp, #26]
900201d0:	f7ff fdfe 	bl	9001fdd0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
900201d4:	88e2      	ldrh	r2, [r4, #6]
900201d6:	8863      	ldrh	r3, [r4, #2]
900201d8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
900201dc:	4413      	add	r3, r2
900201de:	f8bd 2012 	ldrh.w	r2, [sp, #18]
900201e2:	440a      	add	r2, r1
900201e4:	b29b      	uxth	r3, r3
900201e6:	b292      	uxth	r2, r2
900201e8:	b218      	sxth	r0, r3
900201ea:	b211      	sxth	r1, r2
900201ec:	4288      	cmp	r0, r1
900201ee:	f77f af56 	ble.w	9002009e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
900201f2:	f9b4 5000 	ldrsh.w	r5, [r4]
900201f6:	1a9b      	subs	r3, r3, r2
900201f8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
900201fc:	f8ad 301e 	strh.w	r3, [sp, #30]
90020200:	4643      	mov	r3, r8
90020202:	f8ad 5018 	strh.w	r5, [sp, #24]
90020206:	f8ad 101a 	strh.w	r1, [sp, #26]
9002020a:	f8ad 001c 	strh.w	r0, [sp, #28]
9002020e:	9600      	str	r6, [sp, #0]
90020210:	e779      	b.n	90020106 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
90020212:	bf00      	nop
90020214:	90030475 	.word	0x90030475
90020218:	90030bae 	.word	0x90030bae
9002021c:	90030774 	.word	0x90030774

90020220 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
90020220:	b508      	push	{r3, lr}
90020222:	b180      	cbz	r0, 90020246 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
90020224:	2902      	cmp	r1, #2
90020226:	d014      	beq.n	90020252 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
90020228:	2903      	cmp	r1, #3
9002022a:	d01d      	beq.n	90020268 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
9002022c:	2901      	cmp	r1, #1
9002022e:	d101      	bne.n	90020234 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
90020230:	2001      	movs	r0, #1
90020232:	bd08      	pop	{r3, pc}
90020234:	4b0e      	ldr	r3, [pc, #56]	; (90020270 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
90020236:	8818      	ldrh	r0, [r3, #0]
90020238:	b990      	cbnz	r0, 90020260 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9002023a:	4b0e      	ldr	r3, [pc, #56]	; (90020274 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
9002023c:	2154      	movs	r1, #84	; 0x54
9002023e:	4a0e      	ldr	r2, [pc, #56]	; (90020278 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
90020240:	480e      	ldr	r0, [pc, #56]	; (9002027c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
90020242:	f008 fcf7 	bl	90028c34 <__assert_func>
90020246:	2902      	cmp	r1, #2
90020248:	d00e      	beq.n	90020268 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
9002024a:	2903      	cmp	r1, #3
9002024c:	d0f2      	beq.n	90020234 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
9002024e:	2901      	cmp	r1, #1
90020250:	d1ee      	bne.n	90020230 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
90020252:	4b07      	ldr	r3, [pc, #28]	; (90020270 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
90020254:	8818      	ldrh	r0, [r3, #0]
90020256:	2800      	cmp	r0, #0
90020258:	d0ef      	beq.n	9002023a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
9002025a:	f3c0 000e 	ubfx	r0, r0, #0, #15
9002025e:	e7e8      	b.n	90020232 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
90020260:	f3c0 000e 	ubfx	r0, r0, #0, #15
90020264:	4240      	negs	r0, r0
90020266:	e7e4      	b.n	90020232 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
90020268:	f04f 30ff 	mov.w	r0, #4294967295
9002026c:	e7e1      	b.n	90020232 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
9002026e:	bf00      	nop
90020270:	20026cd6 	.word	0x20026cd6
90020274:	900307a6 	.word	0x900307a6
90020278:	90030d2b 	.word	0x90030d2b
9002027c:	900307e8 	.word	0x900307e8

90020280 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
90020280:	b508      	push	{r3, lr}
90020282:	b180      	cbz	r0, 900202a6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
90020284:	2902      	cmp	r1, #2
90020286:	d014      	beq.n	900202b2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
90020288:	2903      	cmp	r1, #3
9002028a:	d018      	beq.n	900202be <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
9002028c:	2901      	cmp	r1, #1
9002028e:	d001      	beq.n	90020294 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
90020290:	2001      	movs	r0, #1
90020292:	e013      	b.n	900202bc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
90020294:	4b0e      	ldr	r3, [pc, #56]	; (900202d0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
90020296:	8818      	ldrh	r0, [r3, #0]
90020298:	b970      	cbnz	r0, 900202b8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
9002029a:	4b0e      	ldr	r3, [pc, #56]	; (900202d4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
9002029c:	2154      	movs	r1, #84	; 0x54
9002029e:	4a0e      	ldr	r2, [pc, #56]	; (900202d8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
900202a0:	480e      	ldr	r0, [pc, #56]	; (900202dc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
900202a2:	f008 fcc7 	bl	90028c34 <__assert_func>
900202a6:	2902      	cmp	r1, #2
900202a8:	d009      	beq.n	900202be <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
900202aa:	2903      	cmp	r1, #3
900202ac:	d0f0      	beq.n	90020290 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
900202ae:	2901      	cmp	r1, #1
900202b0:	d1f0      	bne.n	90020294 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
900202b2:	f04f 30ff 	mov.w	r0, #4294967295
900202b6:	e001      	b.n	900202bc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
900202b8:	f3c0 000e 	ubfx	r0, r0, #0, #15
900202bc:	bd08      	pop	{r3, pc}
900202be:	4b04      	ldr	r3, [pc, #16]	; (900202d0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
900202c0:	8818      	ldrh	r0, [r3, #0]
900202c2:	2800      	cmp	r0, #0
900202c4:	d0e9      	beq.n	9002029a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
900202c6:	f3c0 000e 	ubfx	r0, r0, #0, #15
900202ca:	4240      	negs	r0, r0
900202cc:	e7f6      	b.n	900202bc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
900202ce:	bf00      	nop
900202d0:	20026cd6 	.word	0x20026cd6
900202d4:	900307a6 	.word	0x900307a6
900202d8:	90030d2b 	.word	0x90030d2b
900202dc:	900307e8 	.word	0x900307e8

900202e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
900202e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900202e4:	b099      	sub	sp, #100	; 0x64
900202e6:	910b      	str	r1, [sp, #44]	; 0x2c
900202e8:	a914      	add	r1, sp, #80	; 0x50
900202ea:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
900202ee:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
900202f2:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
900202f6:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
900202fa:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
900202fe:	e881 000c 	stmia.w	r1, {r2, r3}
90020302:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
90020306:	f89d 10a4 	ldrb.w	r1, [sp, #164]	; 0xa4
9002030a:	9308      	str	r3, [sp, #32]
9002030c:	910c      	str	r1, [sp, #48]	; 0x30
9002030e:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
90020312:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
90020316:	910d      	str	r1, [sp, #52]	; 0x34
90020318:	f893 b00d 	ldrb.w	fp, [r3, #13]
9002031c:	7998      	ldrb	r0, [r3, #6]
9002031e:	ea4f 114b 	mov.w	r1, fp, lsl #5
90020322:	f401 7180 	and.w	r1, r1, #256	; 0x100
90020326:	4301      	orrs	r1, r0
90020328:	9109      	str	r1, [sp, #36]	; 0x24
9002032a:	f000 81e4 	beq.w	900206f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
9002032e:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
90020332:	79d9      	ldrb	r1, [r3, #7]
90020334:	f40b 7b80 	and.w	fp, fp, #256	; 0x100
90020338:	ea51 0b0b 	orrs.w	fp, r1, fp
9002033c:	f000 81db 	beq.w	900206f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
90020340:	f993 3009 	ldrsb.w	r3, [r3, #9]
90020344:	b29b      	uxth	r3, r3
90020346:	2e00      	cmp	r6, #0
90020348:	f000 80fd 	beq.w	90020546 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
9002034c:	1af6      	subs	r6, r6, r3
9002034e:	b2b6      	uxth	r6, r6
90020350:	0433      	lsls	r3, r6, #16
90020352:	d502      	bpl.n	9002035a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
90020354:	1bad      	subs	r5, r5, r6
90020356:	2600      	movs	r6, #0
90020358:	b22d      	sxth	r5, r5
9002035a:	f9b2 1000 	ldrsh.w	r1, [r2]
9002035e:	a814      	add	r0, sp, #80	; 0x50
90020360:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
90020364:	428d      	cmp	r5, r1
90020366:	b28b      	uxth	r3, r1
90020368:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
9002036c:	bfbf      	itttt	lt
9002036e:	18f6      	addlt	r6, r6, r3
90020370:	1b75      	sublt	r5, r6, r5
90020372:	b2ae      	uxthlt	r6, r5
90020374:	460d      	movlt	r5, r1
90020376:	8891      	ldrh	r1, [r2, #4]
90020378:	440b      	add	r3, r1
9002037a:	4629      	mov	r1, r5
9002037c:	b21b      	sxth	r3, r3
9002037e:	9311      	str	r3, [sp, #68]	; 0x44
90020380:	8853      	ldrh	r3, [r2, #2]
90020382:	88d2      	ldrh	r2, [r2, #6]
90020384:	4413      	add	r3, r2
90020386:	9a08      	ldr	r2, [sp, #32]
90020388:	b21b      	sxth	r3, r3
9002038a:	9310      	str	r3, [sp, #64]	; 0x40
9002038c:	4bb1      	ldr	r3, [pc, #708]	; (90020654 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
9002038e:	f893 9000 	ldrb.w	r9, [r3]
90020392:	f109 3cff 	add.w	ip, r9, #4294967295
90020396:	f1dc 0300 	rsbs	r3, ip, #0
9002039a:	eb43 030c 	adc.w	r3, r3, ip
9002039e:	930f      	str	r3, [sp, #60]	; 0x3c
900203a0:	4653      	mov	r3, sl
900203a2:	f7f8 faaa 	bl	900188fa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
900203a6:	4629      	mov	r1, r5
900203a8:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
900203ac:	4653      	mov	r3, sl
900203ae:	9a08      	ldr	r2, [sp, #32]
900203b0:	a814      	add	r0, sp, #80	; 0x50
900203b2:	f7f8 faba 	bl	9001892a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
900203b6:	a918      	add	r1, sp, #96	; 0x60
900203b8:	f821 0d02 	strh.w	r0, [r1, #-2]!
900203bc:	a817      	add	r0, sp, #92	; 0x5c
900203be:	f7f8 fc15 	bl	90018bec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
900203c2:	f1ba 0f00 	cmp.w	sl, #0
900203c6:	f040 80c1 	bne.w	9002054c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26c>
900203ca:	f1b9 0f01 	cmp.w	r9, #1
900203ce:	f040 80c5 	bne.w	9002055c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27c>
900203d2:	2301      	movs	r3, #1
900203d4:	f1b8 0f01 	cmp.w	r8, #1
900203d8:	fa03 f308 	lsl.w	r3, r3, r8
900203dc:	f103 33ff 	add.w	r3, r3, #4294967295
900203e0:	b2db      	uxtb	r3, r3
900203e2:	930a      	str	r3, [sp, #40]	; 0x28
900203e4:	f000 80e5 	beq.w	900205b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d2>
900203e8:	f1b8 0f02 	cmp.w	r8, #2
900203ec:	f000 80e4 	beq.w	900205b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
900203f0:	f1b8 0f04 	cmp.w	r8, #4
900203f4:	bf15      	itete	ne
900203f6:	46c1      	movne	r9, r8
900203f8:	f04f 0904 	moveq.w	r9, #4
900203fc:	2301      	movne	r3, #1
900203fe:	2311      	moveq	r3, #17
90020400:	9307      	str	r3, [sp, #28]
90020402:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90020404:	b153      	cbz	r3, 9002041c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
90020406:	2408      	movs	r4, #8
90020408:	9a09      	ldr	r2, [sp, #36]	; 0x24
9002040a:	fb94 f3f9 	sdiv	r3, r4, r9
9002040e:	1e5c      	subs	r4, r3, #1
90020410:	4414      	add	r4, r2
90020412:	fb94 f4f3 	sdiv	r4, r4, r3
90020416:	fb14 f403 	smulbb	r4, r4, r3
9002041a:	b2a4      	uxth	r4, r4
9002041c:	b906      	cbnz	r6, 90020420 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
9002041e:	b16f      	cbz	r7, 9002043c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15c>
90020420:	fb07 6304 	mla	r3, r7, r4, r6
90020424:	9a28      	ldr	r2, [sp, #160]	; 0xa0
90020426:	4639      	mov	r1, r7
90020428:	fb08 f303 	mul.w	r3, r8, r3
9002042c:	f003 0707 	and.w	r7, r3, #7
90020430:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
90020434:	9328      	str	r3, [sp, #160]	; 0xa0
90020436:	ebab 0301 	sub.w	r3, fp, r1
9002043a:	930e      	str	r3, [sp, #56]	; 0x38
9002043c:	4651      	mov	r1, sl
9002043e:	980f      	ldr	r0, [sp, #60]	; 0x3c
90020440:	f7ff feee 	bl	90020220 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
90020444:	4651      	mov	r1, sl
90020446:	4683      	mov	fp, r0
90020448:	980f      	ldr	r0, [sp, #60]	; 0x3c
9002044a:	f7ff ff19 	bl	90020280 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
9002044e:	9a08      	ldr	r2, [sp, #32]
90020450:	9b10      	ldr	r3, [sp, #64]	; 0x40
90020452:	4682      	mov	sl, r0
90020454:	1a9b      	subs	r3, r3, r2
90020456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
90020458:	429a      	cmp	r2, r3
9002045a:	bfa8      	it	ge
9002045c:	461a      	movge	r2, r3
9002045e:	2a00      	cmp	r2, #0
90020460:	9208      	str	r2, [sp, #32]
90020462:	f340 8148 	ble.w	900206f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
90020466:	1bad      	subs	r5, r5, r6
90020468:	9b11      	ldr	r3, [sp, #68]	; 0x44
9002046a:	1b5d      	subs	r5, r3, r5
9002046c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002046e:	429d      	cmp	r5, r3
90020470:	bfd4      	ite	le
90020472:	ebc6 0605 	rsble	r6, r6, r5
90020476:	ebc6 0603 	rsbgt	r6, r6, r3
9002047a:	2e00      	cmp	r6, #0
9002047c:	f340 813b 	ble.w	900206f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
90020480:	1ba4      	subs	r4, r4, r6
90020482:	fb09 f304 	mul.w	r3, r9, r4
90020486:	930e      	str	r3, [sp, #56]	; 0x38
90020488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9002048a:	2b00      	cmp	r3, #0
9002048c:	f040 809d 	bne.w	900205ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ea>
90020490:	4b71      	ldr	r3, [pc, #452]	; (90020658 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
90020492:	6818      	ldr	r0, [r3, #0]
90020494:	6803      	ldr	r3, [r0, #0]
90020496:	6a1b      	ldr	r3, [r3, #32]
90020498:	4798      	blx	r3
9002049a:	4970      	ldr	r1, [pc, #448]	; (9002065c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
9002049c:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
900204a0:	880c      	ldrh	r4, [r1, #0]
900204a2:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
900204a6:	fb04 1303 	mla	r3, r4, r3, r1
900204aa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
900204ae:	9309      	str	r3, [sp, #36]	; 0x24
900204b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900204b2:	7819      	ldrb	r1, [r3, #0]
900204b4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
900204b6:	4139      	asrs	r1, r7
900204b8:	0a1b      	lsrs	r3, r3, #8
900204ba:	b2c9      	uxtb	r1, r1
900204bc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
900204c0:	930f      	str	r3, [sp, #60]	; 0x3c
900204c2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
900204c4:	08db      	lsrs	r3, r3, #3
900204c6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
900204ca:	9310      	str	r3, [sp, #64]	; 0x40
900204cc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
900204ce:	00db      	lsls	r3, r3, #3
900204d0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
900204d4:	9311      	str	r3, [sp, #68]	; 0x44
900204d6:	ea4f 034b 	mov.w	r3, fp, lsl #1
900204da:	fb0b ab16 	mls	fp, fp, r6, sl
900204de:	fb03 fa06 	mul.w	sl, r3, r6
900204e2:	930c      	str	r3, [sp, #48]	; 0x30
900204e4:	eb0a 034b 	add.w	r3, sl, fp, lsl #1
900204e8:	9312      	str	r3, [sp, #72]	; 0x48
900204ea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
900204ec:	b29b      	uxth	r3, r3
900204ee:	9313      	str	r3, [sp, #76]	; 0x4c
900204f0:	9b08      	ldr	r3, [sp, #32]
900204f2:	3b01      	subs	r3, #1
900204f4:	9308      	str	r3, [sp, #32]
900204f6:	3301      	adds	r3, #1
900204f8:	f000 80c4 	beq.w	90020684 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
900204fc:	46b2      	mov	sl, r6
900204fe:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
90020502:	f11a 3aff 	adds.w	sl, sl, #4294967295
90020506:	f0c0 80ab 	bcc.w	90020660 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
9002050a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002050c:	400b      	ands	r3, r1
9002050e:	d00a      	beq.n	90020526 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x246>
90020510:	9807      	ldr	r0, [sp, #28]
90020512:	fb13 f300 	smulbb	r3, r3, r0
90020516:	2bfe      	cmp	r3, #254	; 0xfe
90020518:	dd59      	ble.n	900205ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
9002051a:	980d      	ldr	r0, [sp, #52]	; 0x34
9002051c:	28ff      	cmp	r0, #255	; 0xff
9002051e:	d156      	bne.n	900205ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
90020520:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90020522:	f8ae 4000 	strh.w	r4, [lr]
90020526:	4447      	add	r7, r8
90020528:	b2bf      	uxth	r7, r7
9002052a:	2f07      	cmp	r7, #7
9002052c:	bf89      	itett	hi
9002052e:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
90020530:	fa41 f109 	asrls.w	r1, r1, r9
90020534:	2700      	movhi	r7, #0
90020536:	7859      	ldrbhi	r1, [r3, #1]
90020538:	bf8a      	itet	hi
9002053a:	3301      	addhi	r3, #1
9002053c:	b2c9      	uxtbls	r1, r1
9002053e:	9328      	strhi	r3, [sp, #160]	; 0xa0
90020540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90020542:	449e      	add	lr, r3
90020544:	e7dd      	b.n	90020502 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x222>
90020546:	441d      	add	r5, r3
90020548:	b22d      	sxth	r5, r5
9002054a:	e706      	b.n	9002035a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9002054c:	f1ba 0f01 	cmp.w	sl, #1
90020550:	f47f af3f 	bne.w	900203d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
90020554:	f1b9 0f01 	cmp.w	r9, #1
90020558:	f47f af3b 	bne.w	900203d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
9002055c:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 90020658 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
90020560:	f8d9 0000 	ldr.w	r0, [r9]
90020564:	6803      	ldr	r3, [r0, #0]
90020566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90020568:	4798      	blx	r3
9002056a:	f010 0380 	ands.w	r3, r0, #128	; 0x80
9002056e:	464a      	mov	r2, r9
90020570:	d006      	beq.n	90020580 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
90020572:	f1b8 0f04 	cmp.w	r8, #4
90020576:	d11a      	bne.n	900205ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
90020578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9002057a:	3300      	adds	r3, #0
9002057c:	bf18      	it	ne
9002057e:	2301      	movne	r3, #1
90020580:	05c0      	lsls	r0, r0, #23
90020582:	f140 8088 	bpl.w	90020696 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
90020586:	f1b8 0f08 	cmp.w	r8, #8
9002058a:	f040 8084 	bne.w	90020696 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
9002058e:	2b00      	cmp	r3, #0
90020590:	bf14      	ite	ne
90020592:	2180      	movne	r1, #128	; 0x80
90020594:	f44f 7180 	moveq.w	r1, #256	; 0x100
90020598:	2e00      	cmp	r6, #0
9002059a:	f040 80af 	bne.w	900206fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x41c>
9002059e:	2f00      	cmp	r7, #0
900205a0:	f000 8083 	beq.w	900206aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
900205a4:	23ff      	movs	r3, #255	; 0xff
900205a6:	46c1      	mov	r9, r8
900205a8:	930a      	str	r3, [sp, #40]	; 0x28
900205aa:	2301      	movs	r3, #1
900205ac:	e728      	b.n	90020400 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
900205ae:	2300      	movs	r3, #0
900205b0:	e7e6      	b.n	90020580 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
900205b2:	46c1      	mov	r9, r8
900205b4:	23ff      	movs	r3, #255	; 0xff
900205b6:	e723      	b.n	90020400 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
900205b8:	46c1      	mov	r9, r8
900205ba:	2355      	movs	r3, #85	; 0x55
900205bc:	e720      	b.n	90020400 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
900205be:	23ff      	movs	r3, #255	; 0xff
900205c0:	46c1      	mov	r9, r8
900205c2:	930a      	str	r3, [sp, #40]	; 0x28
900205c4:	2301      	movs	r3, #1
900205c6:	9307      	str	r3, [sp, #28]
900205c8:	e71d      	b.n	90020406 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x126>
900205ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
900205cc:	e765      	b.n	9002049a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ba>
900205ce:	980d      	ldr	r0, [sp, #52]	; 0x34
900205d0:	f8be 5000 	ldrh.w	r5, [lr]
900205d4:	fb10 f303 	smulbb	r3, r0, r3
900205d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
900205da:	122c      	asrs	r4, r5, #8
900205dc:	b29b      	uxth	r3, r3
900205de:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
900205e2:	1c58      	adds	r0, r3, #1
900205e4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
900205e8:	980f      	ldr	r0, [sp, #60]	; 0x3c
900205ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
900205ee:	fa1f fc83 	uxth.w	ip, r3
900205f2:	43db      	mvns	r3, r3
900205f4:	fb10 f00c 	smulbb	r0, r0, ip
900205f8:	b2db      	uxtb	r3, r3
900205fa:	fb1c fb02 	smulbb	fp, ip, r2
900205fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
90020600:	fb04 0403 	mla	r4, r4, r3, r0
90020604:	10e8      	asrs	r0, r5, #3
90020606:	fb1c fc02 	smulbb	ip, ip, r2
9002060a:	00ed      	lsls	r5, r5, #3
9002060c:	b2a4      	uxth	r4, r4
9002060e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90020612:	b2ed      	uxtb	r5, r5
90020614:	fb00 b003 	mla	r0, r0, r3, fp
90020618:	fb05 cc03 	mla	ip, r5, r3, ip
9002061c:	1c63      	adds	r3, r4, #1
9002061e:	b280      	uxth	r0, r0
90020620:	fa1f fc8c 	uxth.w	ip, ip
90020624:	eb03 2414 	add.w	r4, r3, r4, lsr #8
90020628:	f10c 0b01 	add.w	fp, ip, #1
9002062c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
90020630:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
90020634:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
90020638:	ea44 040b 	orr.w	r4, r4, fp
9002063c:	f100 0b01 	add.w	fp, r0, #1
90020640:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
90020644:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
90020648:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9002064c:	ea44 040b 	orr.w	r4, r4, fp
90020650:	e767      	b.n	90020522 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x242>
90020652:	bf00      	nop
90020654:	20026cd4 	.word	0x20026cd4
90020658:	20026cdc 	.word	0x20026cdc
9002065c:	20026cd6 	.word	0x20026cd6
90020660:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90020662:	b153      	cbz	r3, 9002067a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
90020664:	441f      	add	r7, r3
90020666:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90020668:	b2bf      	uxth	r7, r7
9002066a:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
9002066e:	f007 0707 	and.w	r7, r7, #7
90020672:	7819      	ldrb	r1, [r3, #0]
90020674:	9328      	str	r3, [sp, #160]	; 0xa0
90020676:	4139      	asrs	r1, r7
90020678:	b2c9      	uxtb	r1, r1
9002067a:	9a09      	ldr	r2, [sp, #36]	; 0x24
9002067c:	9b12      	ldr	r3, [sp, #72]	; 0x48
9002067e:	441a      	add	r2, r3
90020680:	9209      	str	r2, [sp, #36]	; 0x24
90020682:	e735      	b.n	900204f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x210>
90020684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90020686:	2b00      	cmp	r3, #0
90020688:	d135      	bne.n	900206f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
9002068a:	4b21      	ldr	r3, [pc, #132]	; (90020710 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x430>)
9002068c:	6818      	ldr	r0, [r3, #0]
9002068e:	6803      	ldr	r3, [r0, #0]
90020690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90020692:	4798      	blx	r3
90020694:	e02f      	b.n	900206f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
90020696:	2b00      	cmp	r3, #0
90020698:	f43f ae9b 	beq.w	900203d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
9002069c:	2e00      	cmp	r6, #0
9002069e:	f47f ae98 	bne.w	900203d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
900206a2:	2f00      	cmp	r7, #0
900206a4:	f47f ae95 	bne.w	900203d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
900206a8:	2180      	movs	r1, #128	; 0x80
900206aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
900206ac:	9811      	ldr	r0, [sp, #68]	; 0x44
900206ae:	18eb      	adds	r3, r5, r3
900206b0:	4283      	cmp	r3, r0
900206b2:	f73f ae8e 	bgt.w	900203d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
900206b6:	9b08      	ldr	r3, [sp, #32]
900206b8:	9810      	ldr	r0, [sp, #64]	; 0x40
900206ba:	445b      	add	r3, fp
900206bc:	4283      	cmp	r3, r0
900206be:	f73f ae88 	bgt.w	900203d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
900206c2:	f1b8 0f08 	cmp.w	r8, #8
900206c6:	6810      	ldr	r0, [r2, #0]
900206c8:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
900206cc:	bf18      	it	ne
900206ce:	3401      	addne	r4, #1
900206d0:	6805      	ldr	r5, [r0, #0]
900206d2:	9105      	str	r1, [sp, #20]
900206d4:	bf18      	it	ne
900206d6:	f024 0401 	bicne.w	r4, r4, #1
900206da:	990d      	ldr	r1, [sp, #52]	; 0x34
900206dc:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
900206e0:	bf18      	it	ne
900206e2:	b2a4      	uxthne	r4, r4
900206e4:	9104      	str	r1, [sp, #16]
900206e6:	992a      	ldr	r1, [sp, #168]	; 0xa8
900206e8:	e9cd 4b00 	strd	r4, fp, [sp]
900206ec:	e9cd 4102 	strd	r4, r1, [sp, #8]
900206f0:	9928      	ldr	r1, [sp, #160]	; 0xa0
900206f2:	6c2c      	ldr	r4, [r5, #64]	; 0x40
900206f4:	47a0      	blx	r4
900206f6:	b019      	add	sp, #100	; 0x64
900206f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900206fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900206fe:	2b00      	cmp	r3, #0
90020700:	f47f af5d 	bne.w	900205be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
90020704:	23ff      	movs	r3, #255	; 0xff
90020706:	46c1      	mov	r9, r8
90020708:	930a      	str	r3, [sp, #40]	; 0x28
9002070a:	2301      	movs	r3, #1
9002070c:	9307      	str	r3, [sp, #28]
9002070e:	e687      	b.n	90020420 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
90020710:	20026cdc 	.word	0x20026cdc

90020714 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
90020714:	b538      	push	{r3, r4, r5, lr}
90020716:	4c15      	ldr	r4, [pc, #84]	; (9002076c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
90020718:	4605      	mov	r5, r0
9002071a:	7823      	ldrb	r3, [r4, #0]
9002071c:	f3bf 8f5b 	dmb	ish
90020720:	07da      	lsls	r2, r3, #31
90020722:	d40b      	bmi.n	9002073c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
90020724:	4620      	mov	r0, r4
90020726:	f007 fcab 	bl	90028080 <__cxa_guard_acquire>
9002072a:	b138      	cbz	r0, 9002073c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9002072c:	4620      	mov	r0, r4
9002072e:	f007 fcb3 	bl	90028098 <__cxa_guard_release>
90020732:	4a0f      	ldr	r2, [pc, #60]	; (90020770 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
90020734:	490f      	ldr	r1, [pc, #60]	; (90020774 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
90020736:	4810      	ldr	r0, [pc, #64]	; (90020778 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
90020738:	f007 fc9b 	bl	90028072 <__aeabi_atexit>
9002073c:	4c0f      	ldr	r4, [pc, #60]	; (9002077c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
9002073e:	7823      	ldrb	r3, [r4, #0]
90020740:	f3bf 8f5b 	dmb	ish
90020744:	07db      	lsls	r3, r3, #31
90020746:	d40b      	bmi.n	90020760 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
90020748:	4620      	mov	r0, r4
9002074a:	f007 fc99 	bl	90028080 <__cxa_guard_acquire>
9002074e:	b138      	cbz	r0, 90020760 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
90020750:	4620      	mov	r0, r4
90020752:	f007 fca1 	bl	90028098 <__cxa_guard_release>
90020756:	4a06      	ldr	r2, [pc, #24]	; (90020770 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
90020758:	4909      	ldr	r1, [pc, #36]	; (90020780 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
9002075a:	480a      	ldr	r0, [pc, #40]	; (90020784 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9002075c:	f007 fc89 	bl	90028072 <__aeabi_atexit>
90020760:	4b05      	ldr	r3, [pc, #20]	; (90020778 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
90020762:	612b      	str	r3, [r5, #16]
90020764:	4b07      	ldr	r3, [pc, #28]	; (90020784 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
90020766:	616b      	str	r3, [r5, #20]
90020768:	bd38      	pop	{r3, r4, r5, pc}
9002076a:	bf00      	nop
9002076c:	20026da8 	.word	0x20026da8
90020770:	20000000 	.word	0x20000000
90020774:	9001ed05 	.word	0x9001ed05
90020778:	20000094 	.word	0x20000094
9002077c:	20026dac 	.word	0x20026dac
90020780:	9001ed03 	.word	0x9001ed03
90020784:	20000098 	.word	0x20000098

90020788 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
90020788:	b538      	push	{r3, r4, r5, lr}
9002078a:	4c15      	ldr	r4, [pc, #84]	; (900207e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
9002078c:	4605      	mov	r5, r0
9002078e:	7823      	ldrb	r3, [r4, #0]
90020790:	f3bf 8f5b 	dmb	ish
90020794:	07da      	lsls	r2, r3, #31
90020796:	d40b      	bmi.n	900207b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
90020798:	4620      	mov	r0, r4
9002079a:	f007 fc71 	bl	90028080 <__cxa_guard_acquire>
9002079e:	b138      	cbz	r0, 900207b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
900207a0:	4620      	mov	r0, r4
900207a2:	f007 fc79 	bl	90028098 <__cxa_guard_release>
900207a6:	4a0f      	ldr	r2, [pc, #60]	; (900207e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
900207a8:	490f      	ldr	r1, [pc, #60]	; (900207e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
900207aa:	4810      	ldr	r0, [pc, #64]	; (900207ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
900207ac:	f007 fc61 	bl	90028072 <__aeabi_atexit>
900207b0:	4c0f      	ldr	r4, [pc, #60]	; (900207f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
900207b2:	7823      	ldrb	r3, [r4, #0]
900207b4:	f3bf 8f5b 	dmb	ish
900207b8:	07db      	lsls	r3, r3, #31
900207ba:	d40b      	bmi.n	900207d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
900207bc:	4620      	mov	r0, r4
900207be:	f007 fc5f 	bl	90028080 <__cxa_guard_acquire>
900207c2:	b138      	cbz	r0, 900207d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
900207c4:	4620      	mov	r0, r4
900207c6:	f007 fc67 	bl	90028098 <__cxa_guard_release>
900207ca:	4a06      	ldr	r2, [pc, #24]	; (900207e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
900207cc:	4909      	ldr	r1, [pc, #36]	; (900207f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
900207ce:	480a      	ldr	r0, [pc, #40]	; (900207f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
900207d0:	f007 fc4f 	bl	90028072 <__aeabi_atexit>
900207d4:	4b05      	ldr	r3, [pc, #20]	; (900207ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
900207d6:	60ab      	str	r3, [r5, #8]
900207d8:	4b07      	ldr	r3, [pc, #28]	; (900207f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
900207da:	60eb      	str	r3, [r5, #12]
900207dc:	bd38      	pop	{r3, r4, r5, pc}
900207de:	bf00      	nop
900207e0:	20026d80 	.word	0x20026d80
900207e4:	20000000 	.word	0x20000000
900207e8:	9001ed09 	.word	0x9001ed09
900207ec:	2000006c 	.word	0x2000006c
900207f0:	20026d84 	.word	0x20026d84
900207f4:	9001ed07 	.word	0x9001ed07
900207f8:	20000070 	.word	0x20000070

900207fc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
900207fc:	b510      	push	{r4, lr}
900207fe:	4604      	mov	r4, r0
90020800:	f7ff ff88 	bl	90020714 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
90020804:	4620      	mov	r0, r4
90020806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9002080a:	f7ff bfbd 	b.w	90020788 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

90020810 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
90020810:	b538      	push	{r3, r4, r5, lr}
90020812:	4c15      	ldr	r4, [pc, #84]	; (90020868 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
90020814:	4605      	mov	r5, r0
90020816:	7823      	ldrb	r3, [r4, #0]
90020818:	f3bf 8f5b 	dmb	ish
9002081c:	07da      	lsls	r2, r3, #31
9002081e:	d40b      	bmi.n	90020838 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
90020820:	4620      	mov	r0, r4
90020822:	f007 fc2d 	bl	90028080 <__cxa_guard_acquire>
90020826:	b138      	cbz	r0, 90020838 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
90020828:	4620      	mov	r0, r4
9002082a:	f007 fc35 	bl	90028098 <__cxa_guard_release>
9002082e:	4a0f      	ldr	r2, [pc, #60]	; (9002086c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
90020830:	490f      	ldr	r1, [pc, #60]	; (90020870 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
90020832:	4810      	ldr	r0, [pc, #64]	; (90020874 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
90020834:	f007 fc1d 	bl	90028072 <__aeabi_atexit>
90020838:	4c0f      	ldr	r4, [pc, #60]	; (90020878 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
9002083a:	7823      	ldrb	r3, [r4, #0]
9002083c:	f3bf 8f5b 	dmb	ish
90020840:	07db      	lsls	r3, r3, #31
90020842:	d40b      	bmi.n	9002085c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
90020844:	4620      	mov	r0, r4
90020846:	f007 fc1b 	bl	90028080 <__cxa_guard_acquire>
9002084a:	b138      	cbz	r0, 9002085c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9002084c:	4620      	mov	r0, r4
9002084e:	f007 fc23 	bl	90028098 <__cxa_guard_release>
90020852:	4a06      	ldr	r2, [pc, #24]	; (9002086c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
90020854:	4909      	ldr	r1, [pc, #36]	; (9002087c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
90020856:	480a      	ldr	r0, [pc, #40]	; (90020880 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
90020858:	f007 fc0b 	bl	90028072 <__aeabi_atexit>
9002085c:	4b05      	ldr	r3, [pc, #20]	; (90020874 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9002085e:	622b      	str	r3, [r5, #32]
90020860:	4b07      	ldr	r3, [pc, #28]	; (90020880 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
90020862:	626b      	str	r3, [r5, #36]	; 0x24
90020864:	bd38      	pop	{r3, r4, r5, pc}
90020866:	bf00      	nop
90020868:	20026db0 	.word	0x20026db0
9002086c:	20000000 	.word	0x20000000
90020870:	9001ecfd 	.word	0x9001ecfd
90020874:	2000009c 	.word	0x2000009c
90020878:	20026db4 	.word	0x20026db4
9002087c:	9001ecfb 	.word	0x9001ecfb
90020880:	200000a0 	.word	0x200000a0

90020884 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
90020884:	b538      	push	{r3, r4, r5, lr}
90020886:	4c15      	ldr	r4, [pc, #84]	; (900208dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
90020888:	4605      	mov	r5, r0
9002088a:	7823      	ldrb	r3, [r4, #0]
9002088c:	f3bf 8f5b 	dmb	ish
90020890:	07da      	lsls	r2, r3, #31
90020892:	d40b      	bmi.n	900208ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
90020894:	4620      	mov	r0, r4
90020896:	f007 fbf3 	bl	90028080 <__cxa_guard_acquire>
9002089a:	b138      	cbz	r0, 900208ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9002089c:	4620      	mov	r0, r4
9002089e:	f007 fbfb 	bl	90028098 <__cxa_guard_release>
900208a2:	4a0f      	ldr	r2, [pc, #60]	; (900208e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
900208a4:	490f      	ldr	r1, [pc, #60]	; (900208e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
900208a6:	4810      	ldr	r0, [pc, #64]	; (900208e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
900208a8:	f007 fbe3 	bl	90028072 <__aeabi_atexit>
900208ac:	4c0f      	ldr	r4, [pc, #60]	; (900208ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
900208ae:	7823      	ldrb	r3, [r4, #0]
900208b0:	f3bf 8f5b 	dmb	ish
900208b4:	07db      	lsls	r3, r3, #31
900208b6:	d40b      	bmi.n	900208d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
900208b8:	4620      	mov	r0, r4
900208ba:	f007 fbe1 	bl	90028080 <__cxa_guard_acquire>
900208be:	b138      	cbz	r0, 900208d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
900208c0:	4620      	mov	r0, r4
900208c2:	f007 fbe9 	bl	90028098 <__cxa_guard_release>
900208c6:	4a06      	ldr	r2, [pc, #24]	; (900208e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
900208c8:	4909      	ldr	r1, [pc, #36]	; (900208f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
900208ca:	480a      	ldr	r0, [pc, #40]	; (900208f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
900208cc:	f007 fbd1 	bl	90028072 <__aeabi_atexit>
900208d0:	4b05      	ldr	r3, [pc, #20]	; (900208e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
900208d2:	61ab      	str	r3, [r5, #24]
900208d4:	4b07      	ldr	r3, [pc, #28]	; (900208f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
900208d6:	61eb      	str	r3, [r5, #28]
900208d8:	bd38      	pop	{r3, r4, r5, pc}
900208da:	bf00      	nop
900208dc:	20026d88 	.word	0x20026d88
900208e0:	20000000 	.word	0x20000000
900208e4:	9001ed01 	.word	0x9001ed01
900208e8:	20000074 	.word	0x20000074
900208ec:	20026d8c 	.word	0x20026d8c
900208f0:	9001ecff 	.word	0x9001ecff
900208f4:	20000078 	.word	0x20000078

900208f8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
900208f8:	b510      	push	{r4, lr}
900208fa:	4604      	mov	r4, r0
900208fc:	f7ff ff88 	bl	90020810 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
90020900:	4620      	mov	r0, r4
90020902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90020906:	f7ff bfbd 	b.w	90020884 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

9002090c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
9002090c:	b538      	push	{r3, r4, r5, lr}
9002090e:	4c15      	ldr	r4, [pc, #84]	; (90020964 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
90020910:	4605      	mov	r5, r0
90020912:	7823      	ldrb	r3, [r4, #0]
90020914:	f3bf 8f5b 	dmb	ish
90020918:	07da      	lsls	r2, r3, #31
9002091a:	d40b      	bmi.n	90020934 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9002091c:	4620      	mov	r0, r4
9002091e:	f007 fbaf 	bl	90028080 <__cxa_guard_acquire>
90020922:	b138      	cbz	r0, 90020934 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
90020924:	4620      	mov	r0, r4
90020926:	f007 fbb7 	bl	90028098 <__cxa_guard_release>
9002092a:	4a0f      	ldr	r2, [pc, #60]	; (90020968 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9002092c:	490f      	ldr	r1, [pc, #60]	; (9002096c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
9002092e:	4810      	ldr	r0, [pc, #64]	; (90020970 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
90020930:	f007 fb9f 	bl	90028072 <__aeabi_atexit>
90020934:	4c0f      	ldr	r4, [pc, #60]	; (90020974 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
90020936:	7823      	ldrb	r3, [r4, #0]
90020938:	f3bf 8f5b 	dmb	ish
9002093c:	07db      	lsls	r3, r3, #31
9002093e:	d40b      	bmi.n	90020958 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
90020940:	4620      	mov	r0, r4
90020942:	f007 fb9d 	bl	90028080 <__cxa_guard_acquire>
90020946:	b138      	cbz	r0, 90020958 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
90020948:	4620      	mov	r0, r4
9002094a:	f007 fba5 	bl	90028098 <__cxa_guard_release>
9002094e:	4a06      	ldr	r2, [pc, #24]	; (90020968 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
90020950:	4909      	ldr	r1, [pc, #36]	; (90020978 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
90020952:	480a      	ldr	r0, [pc, #40]	; (9002097c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
90020954:	f007 fb8d 	bl	90028072 <__aeabi_atexit>
90020958:	4b05      	ldr	r3, [pc, #20]	; (90020970 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9002095a:	632b      	str	r3, [r5, #48]	; 0x30
9002095c:	4b07      	ldr	r3, [pc, #28]	; (9002097c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9002095e:	636b      	str	r3, [r5, #52]	; 0x34
90020960:	bd38      	pop	{r3, r4, r5, pc}
90020962:	bf00      	nop
90020964:	20026dc0 	.word	0x20026dc0
90020968:	20000000 	.word	0x20000000
9002096c:	9001ecf5 	.word	0x9001ecf5
90020970:	200000ac 	.word	0x200000ac
90020974:	20026dc4 	.word	0x20026dc4
90020978:	9001ecf3 	.word	0x9001ecf3
9002097c:	200000b0 	.word	0x200000b0

90020980 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
90020980:	b538      	push	{r3, r4, r5, lr}
90020982:	4c15      	ldr	r4, [pc, #84]	; (900209d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
90020984:	4605      	mov	r5, r0
90020986:	7823      	ldrb	r3, [r4, #0]
90020988:	f3bf 8f5b 	dmb	ish
9002098c:	07da      	lsls	r2, r3, #31
9002098e:	d40b      	bmi.n	900209a8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
90020990:	4620      	mov	r0, r4
90020992:	f007 fb75 	bl	90028080 <__cxa_guard_acquire>
90020996:	b138      	cbz	r0, 900209a8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
90020998:	4620      	mov	r0, r4
9002099a:	f007 fb7d 	bl	90028098 <__cxa_guard_release>
9002099e:	4a0f      	ldr	r2, [pc, #60]	; (900209dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
900209a0:	490f      	ldr	r1, [pc, #60]	; (900209e0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
900209a2:	4810      	ldr	r0, [pc, #64]	; (900209e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
900209a4:	f007 fb65 	bl	90028072 <__aeabi_atexit>
900209a8:	4c0f      	ldr	r4, [pc, #60]	; (900209e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
900209aa:	7823      	ldrb	r3, [r4, #0]
900209ac:	f3bf 8f5b 	dmb	ish
900209b0:	07db      	lsls	r3, r3, #31
900209b2:	d40b      	bmi.n	900209cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
900209b4:	4620      	mov	r0, r4
900209b6:	f007 fb63 	bl	90028080 <__cxa_guard_acquire>
900209ba:	b138      	cbz	r0, 900209cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
900209bc:	4620      	mov	r0, r4
900209be:	f007 fb6b 	bl	90028098 <__cxa_guard_release>
900209c2:	4a06      	ldr	r2, [pc, #24]	; (900209dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
900209c4:	4909      	ldr	r1, [pc, #36]	; (900209ec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
900209c6:	480a      	ldr	r0, [pc, #40]	; (900209f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
900209c8:	f007 fb53 	bl	90028072 <__aeabi_atexit>
900209cc:	4b05      	ldr	r3, [pc, #20]	; (900209e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
900209ce:	62ab      	str	r3, [r5, #40]	; 0x28
900209d0:	4b07      	ldr	r3, [pc, #28]	; (900209f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
900209d2:	62eb      	str	r3, [r5, #44]	; 0x2c
900209d4:	bd38      	pop	{r3, r4, r5, pc}
900209d6:	bf00      	nop
900209d8:	20026d90 	.word	0x20026d90
900209dc:	20000000 	.word	0x20000000
900209e0:	9001ecf9 	.word	0x9001ecf9
900209e4:	2000007c 	.word	0x2000007c
900209e8:	20026d94 	.word	0x20026d94
900209ec:	9001ecf7 	.word	0x9001ecf7
900209f0:	20000080 	.word	0x20000080

900209f4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
900209f4:	b510      	push	{r4, lr}
900209f6:	4604      	mov	r4, r0
900209f8:	f7ff ff88 	bl	9002090c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
900209fc:	4620      	mov	r0, r4
900209fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90020a02:	f7ff bfbd 	b.w	90020980 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

90020a08 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
90020a08:	b538      	push	{r3, r4, r5, lr}
90020a0a:	4c15      	ldr	r4, [pc, #84]	; (90020a60 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
90020a0c:	4605      	mov	r5, r0
90020a0e:	7823      	ldrb	r3, [r4, #0]
90020a10:	f3bf 8f5b 	dmb	ish
90020a14:	07da      	lsls	r2, r3, #31
90020a16:	d40b      	bmi.n	90020a30 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
90020a18:	4620      	mov	r0, r4
90020a1a:	f007 fb31 	bl	90028080 <__cxa_guard_acquire>
90020a1e:	b138      	cbz	r0, 90020a30 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
90020a20:	4620      	mov	r0, r4
90020a22:	f007 fb39 	bl	90028098 <__cxa_guard_release>
90020a26:	4a0f      	ldr	r2, [pc, #60]	; (90020a64 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
90020a28:	490f      	ldr	r1, [pc, #60]	; (90020a68 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
90020a2a:	4810      	ldr	r0, [pc, #64]	; (90020a6c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
90020a2c:	f007 fb21 	bl	90028072 <__aeabi_atexit>
90020a30:	4c0f      	ldr	r4, [pc, #60]	; (90020a70 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
90020a32:	7823      	ldrb	r3, [r4, #0]
90020a34:	f3bf 8f5b 	dmb	ish
90020a38:	07db      	lsls	r3, r3, #31
90020a3a:	d40b      	bmi.n	90020a54 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
90020a3c:	4620      	mov	r0, r4
90020a3e:	f007 fb1f 	bl	90028080 <__cxa_guard_acquire>
90020a42:	b138      	cbz	r0, 90020a54 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
90020a44:	4620      	mov	r0, r4
90020a46:	f007 fb27 	bl	90028098 <__cxa_guard_release>
90020a4a:	4a06      	ldr	r2, [pc, #24]	; (90020a64 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
90020a4c:	4909      	ldr	r1, [pc, #36]	; (90020a74 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
90020a4e:	480a      	ldr	r0, [pc, #40]	; (90020a78 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
90020a50:	f007 fb0f 	bl	90028072 <__aeabi_atexit>
90020a54:	4b05      	ldr	r3, [pc, #20]	; (90020a6c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
90020a56:	652b      	str	r3, [r5, #80]	; 0x50
90020a58:	4b07      	ldr	r3, [pc, #28]	; (90020a78 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
90020a5a:	656b      	str	r3, [r5, #84]	; 0x54
90020a5c:	bd38      	pop	{r3, r4, r5, pc}
90020a5e:	bf00      	nop
90020a60:	20026dc8 	.word	0x20026dc8
90020a64:	20000000 	.word	0x20000000
90020a68:	9001ece5 	.word	0x9001ece5
90020a6c:	200000b4 	.word	0x200000b4
90020a70:	20026dcc 	.word	0x20026dcc
90020a74:	9001ece3 	.word	0x9001ece3
90020a78:	200000b8 	.word	0x200000b8

90020a7c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
90020a7c:	b538      	push	{r3, r4, r5, lr}
90020a7e:	4c15      	ldr	r4, [pc, #84]	; (90020ad4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
90020a80:	4605      	mov	r5, r0
90020a82:	7823      	ldrb	r3, [r4, #0]
90020a84:	f3bf 8f5b 	dmb	ish
90020a88:	07da      	lsls	r2, r3, #31
90020a8a:	d40b      	bmi.n	90020aa4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
90020a8c:	4620      	mov	r0, r4
90020a8e:	f007 faf7 	bl	90028080 <__cxa_guard_acquire>
90020a92:	b138      	cbz	r0, 90020aa4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
90020a94:	4620      	mov	r0, r4
90020a96:	f007 faff 	bl	90028098 <__cxa_guard_release>
90020a9a:	4a0f      	ldr	r2, [pc, #60]	; (90020ad8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
90020a9c:	490f      	ldr	r1, [pc, #60]	; (90020adc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
90020a9e:	4810      	ldr	r0, [pc, #64]	; (90020ae0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
90020aa0:	f007 fae7 	bl	90028072 <__aeabi_atexit>
90020aa4:	4c0f      	ldr	r4, [pc, #60]	; (90020ae4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
90020aa6:	7823      	ldrb	r3, [r4, #0]
90020aa8:	f3bf 8f5b 	dmb	ish
90020aac:	07db      	lsls	r3, r3, #31
90020aae:	d40b      	bmi.n	90020ac8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
90020ab0:	4620      	mov	r0, r4
90020ab2:	f007 fae5 	bl	90028080 <__cxa_guard_acquire>
90020ab6:	b138      	cbz	r0, 90020ac8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
90020ab8:	4620      	mov	r0, r4
90020aba:	f007 faed 	bl	90028098 <__cxa_guard_release>
90020abe:	4a06      	ldr	r2, [pc, #24]	; (90020ad8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
90020ac0:	4909      	ldr	r1, [pc, #36]	; (90020ae8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
90020ac2:	480a      	ldr	r0, [pc, #40]	; (90020aec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
90020ac4:	f007 fad5 	bl	90028072 <__aeabi_atexit>
90020ac8:	4b05      	ldr	r3, [pc, #20]	; (90020ae0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
90020aca:	64ab      	str	r3, [r5, #72]	; 0x48
90020acc:	4b07      	ldr	r3, [pc, #28]	; (90020aec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
90020ace:	64eb      	str	r3, [r5, #76]	; 0x4c
90020ad0:	bd38      	pop	{r3, r4, r5, pc}
90020ad2:	bf00      	nop
90020ad4:	20026dd0 	.word	0x20026dd0
90020ad8:	20000000 	.word	0x20000000
90020adc:	9001ece9 	.word	0x9001ece9
90020ae0:	200000bc 	.word	0x200000bc
90020ae4:	20026dd4 	.word	0x20026dd4
90020ae8:	9001ece7 	.word	0x9001ece7
90020aec:	200000c0 	.word	0x200000c0

90020af0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
90020af0:	b538      	push	{r3, r4, r5, lr}
90020af2:	4c15      	ldr	r4, [pc, #84]	; (90020b48 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
90020af4:	4605      	mov	r5, r0
90020af6:	7823      	ldrb	r3, [r4, #0]
90020af8:	f3bf 8f5b 	dmb	ish
90020afc:	07da      	lsls	r2, r3, #31
90020afe:	d40b      	bmi.n	90020b18 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
90020b00:	4620      	mov	r0, r4
90020b02:	f007 fabd 	bl	90028080 <__cxa_guard_acquire>
90020b06:	b138      	cbz	r0, 90020b18 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
90020b08:	4620      	mov	r0, r4
90020b0a:	f007 fac5 	bl	90028098 <__cxa_guard_release>
90020b0e:	4a0f      	ldr	r2, [pc, #60]	; (90020b4c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
90020b10:	490f      	ldr	r1, [pc, #60]	; (90020b50 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
90020b12:	4810      	ldr	r0, [pc, #64]	; (90020b54 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
90020b14:	f007 faad 	bl	90028072 <__aeabi_atexit>
90020b18:	4c0f      	ldr	r4, [pc, #60]	; (90020b58 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
90020b1a:	7823      	ldrb	r3, [r4, #0]
90020b1c:	f3bf 8f5b 	dmb	ish
90020b20:	07db      	lsls	r3, r3, #31
90020b22:	d40b      	bmi.n	90020b3c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
90020b24:	4620      	mov	r0, r4
90020b26:	f007 faab 	bl	90028080 <__cxa_guard_acquire>
90020b2a:	b138      	cbz	r0, 90020b3c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
90020b2c:	4620      	mov	r0, r4
90020b2e:	f007 fab3 	bl	90028098 <__cxa_guard_release>
90020b32:	4a06      	ldr	r2, [pc, #24]	; (90020b4c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
90020b34:	4909      	ldr	r1, [pc, #36]	; (90020b5c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
90020b36:	480a      	ldr	r0, [pc, #40]	; (90020b60 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
90020b38:	f007 fa9b 	bl	90028072 <__aeabi_atexit>
90020b3c:	4b05      	ldr	r3, [pc, #20]	; (90020b54 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
90020b3e:	642b      	str	r3, [r5, #64]	; 0x40
90020b40:	4b07      	ldr	r3, [pc, #28]	; (90020b60 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
90020b42:	646b      	str	r3, [r5, #68]	; 0x44
90020b44:	bd38      	pop	{r3, r4, r5, pc}
90020b46:	bf00      	nop
90020b48:	20026d98 	.word	0x20026d98
90020b4c:	20000000 	.word	0x20000000
90020b50:	9001eced 	.word	0x9001eced
90020b54:	20000084 	.word	0x20000084
90020b58:	20026d9c 	.word	0x20026d9c
90020b5c:	9001eceb 	.word	0x9001eceb
90020b60:	20000088 	.word	0x20000088

90020b64 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
90020b64:	b538      	push	{r3, r4, r5, lr}
90020b66:	4c15      	ldr	r4, [pc, #84]	; (90020bbc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
90020b68:	4605      	mov	r5, r0
90020b6a:	7823      	ldrb	r3, [r4, #0]
90020b6c:	f3bf 8f5b 	dmb	ish
90020b70:	07da      	lsls	r2, r3, #31
90020b72:	d40b      	bmi.n	90020b8c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
90020b74:	4620      	mov	r0, r4
90020b76:	f007 fa83 	bl	90028080 <__cxa_guard_acquire>
90020b7a:	b138      	cbz	r0, 90020b8c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
90020b7c:	4620      	mov	r0, r4
90020b7e:	f007 fa8b 	bl	90028098 <__cxa_guard_release>
90020b82:	4a0f      	ldr	r2, [pc, #60]	; (90020bc0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
90020b84:	490f      	ldr	r1, [pc, #60]	; (90020bc4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
90020b86:	4810      	ldr	r0, [pc, #64]	; (90020bc8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
90020b88:	f007 fa73 	bl	90028072 <__aeabi_atexit>
90020b8c:	4c0f      	ldr	r4, [pc, #60]	; (90020bcc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
90020b8e:	7823      	ldrb	r3, [r4, #0]
90020b90:	f3bf 8f5b 	dmb	ish
90020b94:	07db      	lsls	r3, r3, #31
90020b96:	d40b      	bmi.n	90020bb0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
90020b98:	4620      	mov	r0, r4
90020b9a:	f007 fa71 	bl	90028080 <__cxa_guard_acquire>
90020b9e:	b138      	cbz	r0, 90020bb0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
90020ba0:	4620      	mov	r0, r4
90020ba2:	f007 fa79 	bl	90028098 <__cxa_guard_release>
90020ba6:	4a06      	ldr	r2, [pc, #24]	; (90020bc0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
90020ba8:	4909      	ldr	r1, [pc, #36]	; (90020bd0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
90020baa:	480a      	ldr	r0, [pc, #40]	; (90020bd4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
90020bac:	f007 fa61 	bl	90028072 <__aeabi_atexit>
90020bb0:	4b05      	ldr	r3, [pc, #20]	; (90020bc8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
90020bb2:	63ab      	str	r3, [r5, #56]	; 0x38
90020bb4:	4b07      	ldr	r3, [pc, #28]	; (90020bd4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
90020bb6:	63eb      	str	r3, [r5, #60]	; 0x3c
90020bb8:	bd38      	pop	{r3, r4, r5, pc}
90020bba:	bf00      	nop
90020bbc:	20026db8 	.word	0x20026db8
90020bc0:	20000000 	.word	0x20000000
90020bc4:	9001ecf1 	.word	0x9001ecf1
90020bc8:	200000a4 	.word	0x200000a4
90020bcc:	20026dbc 	.word	0x20026dbc
90020bd0:	9001ecef 	.word	0x9001ecef
90020bd4:	200000a8 	.word	0x200000a8

90020bd8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
90020bd8:	b510      	push	{r4, lr}
90020bda:	4604      	mov	r4, r0
90020bdc:	f7ff ff14 	bl	90020a08 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
90020be0:	4620      	mov	r0, r4
90020be2:	f7ff ff85 	bl	90020af0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
90020be6:	4620      	mov	r0, r4
90020be8:	f7ff ff48 	bl	90020a7c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
90020bec:	4620      	mov	r0, r4
90020bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90020bf2:	f7ff bfb7 	b.w	90020b64 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

90020bf8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
90020bf8:	b538      	push	{r3, r4, r5, lr}
90020bfa:	4c15      	ldr	r4, [pc, #84]	; (90020c50 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
90020bfc:	4605      	mov	r5, r0
90020bfe:	7823      	ldrb	r3, [r4, #0]
90020c00:	f3bf 8f5b 	dmb	ish
90020c04:	07da      	lsls	r2, r3, #31
90020c06:	d40b      	bmi.n	90020c20 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
90020c08:	4620      	mov	r0, r4
90020c0a:	f007 fa39 	bl	90028080 <__cxa_guard_acquire>
90020c0e:	b138      	cbz	r0, 90020c20 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
90020c10:	4620      	mov	r0, r4
90020c12:	f007 fa41 	bl	90028098 <__cxa_guard_release>
90020c16:	4a0f      	ldr	r2, [pc, #60]	; (90020c54 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
90020c18:	490f      	ldr	r1, [pc, #60]	; (90020c58 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
90020c1a:	4810      	ldr	r0, [pc, #64]	; (90020c5c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
90020c1c:	f007 fa29 	bl	90028072 <__aeabi_atexit>
90020c20:	4c0f      	ldr	r4, [pc, #60]	; (90020c60 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
90020c22:	7823      	ldrb	r3, [r4, #0]
90020c24:	f3bf 8f5b 	dmb	ish
90020c28:	07db      	lsls	r3, r3, #31
90020c2a:	d40b      	bmi.n	90020c44 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
90020c2c:	4620      	mov	r0, r4
90020c2e:	f007 fa27 	bl	90028080 <__cxa_guard_acquire>
90020c32:	b138      	cbz	r0, 90020c44 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
90020c34:	4620      	mov	r0, r4
90020c36:	f007 fa2f 	bl	90028098 <__cxa_guard_release>
90020c3a:	4a06      	ldr	r2, [pc, #24]	; (90020c54 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
90020c3c:	4909      	ldr	r1, [pc, #36]	; (90020c64 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
90020c3e:	480a      	ldr	r0, [pc, #40]	; (90020c68 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
90020c40:	f007 fa17 	bl	90028072 <__aeabi_atexit>
90020c44:	4b05      	ldr	r3, [pc, #20]	; (90020c5c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
90020c46:	662b      	str	r3, [r5, #96]	; 0x60
90020c48:	4b07      	ldr	r3, [pc, #28]	; (90020c68 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
90020c4a:	666b      	str	r3, [r5, #100]	; 0x64
90020c4c:	bd38      	pop	{r3, r4, r5, pc}
90020c4e:	bf00      	nop
90020c50:	20026da0 	.word	0x20026da0
90020c54:	20000000 	.word	0x20000000
90020c58:	9001ecdd 	.word	0x9001ecdd
90020c5c:	2000008c 	.word	0x2000008c
90020c60:	20026da4 	.word	0x20026da4
90020c64:	9001ecdb 	.word	0x9001ecdb
90020c68:	20000090 	.word	0x20000090

90020c6c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
90020c6c:	b538      	push	{r3, r4, r5, lr}
90020c6e:	4c15      	ldr	r4, [pc, #84]	; (90020cc4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
90020c70:	4605      	mov	r5, r0
90020c72:	7823      	ldrb	r3, [r4, #0]
90020c74:	f3bf 8f5b 	dmb	ish
90020c78:	07da      	lsls	r2, r3, #31
90020c7a:	d40b      	bmi.n	90020c94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
90020c7c:	4620      	mov	r0, r4
90020c7e:	f007 f9ff 	bl	90028080 <__cxa_guard_acquire>
90020c82:	b138      	cbz	r0, 90020c94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
90020c84:	4620      	mov	r0, r4
90020c86:	f007 fa07 	bl	90028098 <__cxa_guard_release>
90020c8a:	4a0f      	ldr	r2, [pc, #60]	; (90020cc8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
90020c8c:	490f      	ldr	r1, [pc, #60]	; (90020ccc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
90020c8e:	4810      	ldr	r0, [pc, #64]	; (90020cd0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
90020c90:	f007 f9ef 	bl	90028072 <__aeabi_atexit>
90020c94:	4c0f      	ldr	r4, [pc, #60]	; (90020cd4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
90020c96:	7823      	ldrb	r3, [r4, #0]
90020c98:	f3bf 8f5b 	dmb	ish
90020c9c:	07db      	lsls	r3, r3, #31
90020c9e:	d40b      	bmi.n	90020cb8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
90020ca0:	4620      	mov	r0, r4
90020ca2:	f007 f9ed 	bl	90028080 <__cxa_guard_acquire>
90020ca6:	b138      	cbz	r0, 90020cb8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
90020ca8:	4620      	mov	r0, r4
90020caa:	f007 f9f5 	bl	90028098 <__cxa_guard_release>
90020cae:	4a06      	ldr	r2, [pc, #24]	; (90020cc8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
90020cb0:	4909      	ldr	r1, [pc, #36]	; (90020cd8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
90020cb2:	480a      	ldr	r0, [pc, #40]	; (90020cdc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
90020cb4:	f007 f9dd 	bl	90028072 <__aeabi_atexit>
90020cb8:	4b05      	ldr	r3, [pc, #20]	; (90020cd0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
90020cba:	65ab      	str	r3, [r5, #88]	; 0x58
90020cbc:	4b07      	ldr	r3, [pc, #28]	; (90020cdc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
90020cbe:	65eb      	str	r3, [r5, #92]	; 0x5c
90020cc0:	bd38      	pop	{r3, r4, r5, pc}
90020cc2:	bf00      	nop
90020cc4:	20026d78 	.word	0x20026d78
90020cc8:	20000000 	.word	0x20000000
90020ccc:	9001ece1 	.word	0x9001ece1
90020cd0:	20000064 	.word	0x20000064
90020cd4:	20026d7c 	.word	0x20026d7c
90020cd8:	9001ecdf 	.word	0x9001ecdf
90020cdc:	20000068 	.word	0x20000068

90020ce0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
90020ce0:	b510      	push	{r4, lr}
90020ce2:	4604      	mov	r4, r0
90020ce4:	f7ff ff88 	bl	90020bf8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
90020ce8:	4620      	mov	r0, r4
90020cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90020cee:	f7ff bfbd 	b.w	90020c6c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

90020cf4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
90020cf4:	b538      	push	{r3, r4, r5, lr}
90020cf6:	4c15      	ldr	r4, [pc, #84]	; (90020d4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
90020cf8:	4605      	mov	r5, r0
90020cfa:	7823      	ldrb	r3, [r4, #0]
90020cfc:	f3bf 8f5b 	dmb	ish
90020d00:	07da      	lsls	r2, r3, #31
90020d02:	d40b      	bmi.n	90020d1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
90020d04:	4620      	mov	r0, r4
90020d06:	f007 f9bb 	bl	90028080 <__cxa_guard_acquire>
90020d0a:	b138      	cbz	r0, 90020d1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
90020d0c:	4620      	mov	r0, r4
90020d0e:	f007 f9c3 	bl	90028098 <__cxa_guard_release>
90020d12:	4a0f      	ldr	r2, [pc, #60]	; (90020d50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
90020d14:	490f      	ldr	r1, [pc, #60]	; (90020d54 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
90020d16:	4810      	ldr	r0, [pc, #64]	; (90020d58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
90020d18:	f007 f9ab 	bl	90028072 <__aeabi_atexit>
90020d1c:	4c0f      	ldr	r4, [pc, #60]	; (90020d5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
90020d1e:	7823      	ldrb	r3, [r4, #0]
90020d20:	f3bf 8f5b 	dmb	ish
90020d24:	07db      	lsls	r3, r3, #31
90020d26:	d40b      	bmi.n	90020d40 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
90020d28:	4620      	mov	r0, r4
90020d2a:	f007 f9a9 	bl	90028080 <__cxa_guard_acquire>
90020d2e:	b138      	cbz	r0, 90020d40 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
90020d30:	4620      	mov	r0, r4
90020d32:	f007 f9b1 	bl	90028098 <__cxa_guard_release>
90020d36:	4a06      	ldr	r2, [pc, #24]	; (90020d50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
90020d38:	4909      	ldr	r1, [pc, #36]	; (90020d60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
90020d3a:	480a      	ldr	r0, [pc, #40]	; (90020d64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
90020d3c:	f007 f999 	bl	90028072 <__aeabi_atexit>
90020d40:	4b05      	ldr	r3, [pc, #20]	; (90020d58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
90020d42:	672b      	str	r3, [r5, #112]	; 0x70
90020d44:	4b07      	ldr	r3, [pc, #28]	; (90020d64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
90020d46:	676b      	str	r3, [r5, #116]	; 0x74
90020d48:	bd38      	pop	{r3, r4, r5, pc}
90020d4a:	bf00      	nop
90020d4c:	20026d70 	.word	0x20026d70
90020d50:	20000000 	.word	0x20000000
90020d54:	9001ecd5 	.word	0x9001ecd5
90020d58:	2000005c 	.word	0x2000005c
90020d5c:	20026d74 	.word	0x20026d74
90020d60:	9001ecd3 	.word	0x9001ecd3
90020d64:	20000060 	.word	0x20000060

90020d68 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
90020d68:	b538      	push	{r3, r4, r5, lr}
90020d6a:	4c15      	ldr	r4, [pc, #84]	; (90020dc0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
90020d6c:	4605      	mov	r5, r0
90020d6e:	7823      	ldrb	r3, [r4, #0]
90020d70:	f3bf 8f5b 	dmb	ish
90020d74:	07da      	lsls	r2, r3, #31
90020d76:	d40b      	bmi.n	90020d90 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
90020d78:	4620      	mov	r0, r4
90020d7a:	f007 f981 	bl	90028080 <__cxa_guard_acquire>
90020d7e:	b138      	cbz	r0, 90020d90 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
90020d80:	4620      	mov	r0, r4
90020d82:	f007 f989 	bl	90028098 <__cxa_guard_release>
90020d86:	4a0f      	ldr	r2, [pc, #60]	; (90020dc4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
90020d88:	490f      	ldr	r1, [pc, #60]	; (90020dc8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
90020d8a:	4810      	ldr	r0, [pc, #64]	; (90020dcc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
90020d8c:	f007 f971 	bl	90028072 <__aeabi_atexit>
90020d90:	4c0f      	ldr	r4, [pc, #60]	; (90020dd0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
90020d92:	7823      	ldrb	r3, [r4, #0]
90020d94:	f3bf 8f5b 	dmb	ish
90020d98:	07db      	lsls	r3, r3, #31
90020d9a:	d40b      	bmi.n	90020db4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
90020d9c:	4620      	mov	r0, r4
90020d9e:	f007 f96f 	bl	90028080 <__cxa_guard_acquire>
90020da2:	b138      	cbz	r0, 90020db4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
90020da4:	4620      	mov	r0, r4
90020da6:	f007 f977 	bl	90028098 <__cxa_guard_release>
90020daa:	4a06      	ldr	r2, [pc, #24]	; (90020dc4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
90020dac:	4909      	ldr	r1, [pc, #36]	; (90020dd4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
90020dae:	480a      	ldr	r0, [pc, #40]	; (90020dd8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
90020db0:	f007 f95f 	bl	90028072 <__aeabi_atexit>
90020db4:	4b05      	ldr	r3, [pc, #20]	; (90020dcc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
90020db6:	66ab      	str	r3, [r5, #104]	; 0x68
90020db8:	4b07      	ldr	r3, [pc, #28]	; (90020dd8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
90020dba:	66eb      	str	r3, [r5, #108]	; 0x6c
90020dbc:	bd38      	pop	{r3, r4, r5, pc}
90020dbe:	bf00      	nop
90020dc0:	20026d68 	.word	0x20026d68
90020dc4:	20000000 	.word	0x20000000
90020dc8:	9001ecd9 	.word	0x9001ecd9
90020dcc:	20000054 	.word	0x20000054
90020dd0:	20026d6c 	.word	0x20026d6c
90020dd4:	9001ecd7 	.word	0x9001ecd7
90020dd8:	20000058 	.word	0x20000058

90020ddc <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
90020ddc:	b510      	push	{r4, lr}
90020dde:	4604      	mov	r4, r0
90020de0:	f7ff ff88 	bl	90020cf4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
90020de4:	4620      	mov	r0, r4
90020de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90020dea:	f7ff bfbd 	b.w	90020d68 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

90020dee <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
90020dee:	b510      	push	{r4, lr}
90020df0:	4604      	mov	r4, r0
90020df2:	f7ff fff3 	bl	90020ddc <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
90020df6:	4620      	mov	r0, r4
90020df8:	f7ff ff72 	bl	90020ce0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
90020dfc:	4620      	mov	r0, r4
90020dfe:	f7ff fdf9 	bl	900209f4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
90020e02:	4620      	mov	r0, r4
90020e04:	f7ff fcfa 	bl	900207fc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
90020e08:	4620      	mov	r0, r4
90020e0a:	f7ff fd75 	bl	900208f8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
90020e0e:	4620      	mov	r0, r4
90020e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90020e14:	f7ff bee0 	b.w	90020bd8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

90020e18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
90020e18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020e1c:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
90020e20:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
90020e24:	f1be 0f00 	cmp.w	lr, #0
90020e28:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
90020e2c:	fb0e 4708 	mla	r7, lr, r8, r4
90020e30:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
90020e34:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
90020e38:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
90020e3c:	eb02 0a07 	add.w	sl, r2, r7
90020e40:	8808      	ldrh	r0, [r1, #0]
90020e42:	db37      	blt.n	90020eb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
90020e44:	45f3      	cmp	fp, lr
90020e46:	dd35      	ble.n	90020eb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
90020e48:	2c00      	cmp	r4, #0
90020e4a:	db31      	blt.n	90020eb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
90020e4c:	45a0      	cmp	r8, r4
90020e4e:	dd2f      	ble.n	90020eb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
90020e50:	5dd2      	ldrb	r2, [r2, r7]
90020e52:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
90020e56:	1c62      	adds	r2, r4, #1
90020e58:	d42f      	bmi.n	90020eba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
90020e5a:	4590      	cmp	r8, r2
90020e5c:	dd2d      	ble.n	90020eba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
90020e5e:	b366      	cbz	r6, 90020eba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
90020e60:	f89a 2001 	ldrb.w	r2, [sl, #1]
90020e64:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
90020e68:	f11e 0e01 	adds.w	lr, lr, #1
90020e6c:	d429      	bmi.n	90020ec2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
90020e6e:	45f3      	cmp	fp, lr
90020e70:	dd27      	ble.n	90020ec2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
90020e72:	f1bc 0f00 	cmp.w	ip, #0
90020e76:	f000 80a0 	beq.w	90020fba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a2>
90020e7a:	2c00      	cmp	r4, #0
90020e7c:	db1f      	blt.n	90020ebe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
90020e7e:	45a0      	cmp	r8, r4
90020e80:	dd1d      	ble.n	90020ebe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
90020e82:	f81a 2008 	ldrb.w	r2, [sl, r8]
90020e86:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
90020e8a:	3401      	adds	r4, #1
90020e8c:	d41c      	bmi.n	90020ec8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
90020e8e:	45a0      	cmp	r8, r4
90020e90:	dd1a      	ble.n	90020ec8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
90020e92:	b1de      	cbz	r6, 90020ecc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
90020e94:	44d0      	add	r8, sl
90020e96:	f898 2001 	ldrb.w	r2, [r8, #1]
90020e9a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
90020e9e:	2e0f      	cmp	r6, #15
90020ea0:	d915      	bls.n	90020ece <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
90020ea2:	4b49      	ldr	r3, [pc, #292]	; (90020fc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
90020ea4:	f240 11ef 	movw	r1, #495	; 0x1ef
90020ea8:	4a48      	ldr	r2, [pc, #288]	; (90020fcc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
90020eaa:	4849      	ldr	r0, [pc, #292]	; (90020fd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
90020eac:	f007 fec2 	bl	90028c34 <__assert_func>
90020eb0:	4681      	mov	r9, r0
90020eb2:	e7d0      	b.n	90020e56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
90020eb4:	4607      	mov	r7, r0
90020eb6:	4681      	mov	r9, r0
90020eb8:	e7d6      	b.n	90020e68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
90020eba:	4607      	mov	r7, r0
90020ebc:	e7d4      	b.n	90020e68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
90020ebe:	4686      	mov	lr, r0
90020ec0:	e7e3      	b.n	90020e8a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
90020ec2:	4603      	mov	r3, r0
90020ec4:	4686      	mov	lr, r0
90020ec6:	e7ea      	b.n	90020e9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
90020ec8:	4603      	mov	r3, r0
90020eca:	e7e8      	b.n	90020e9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
90020ecc:	4603      	mov	r3, r0
90020ece:	f1bc 0f0f 	cmp.w	ip, #15
90020ed2:	d8e6      	bhi.n	90020ea2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
90020ed4:	fb16 f80c 	smulbb	r8, r6, ip
90020ed8:	ea4f 4409 	mov.w	r4, r9, lsl #16
90020edc:	ea4f 4a07 	mov.w	sl, r7, lsl #16
90020ee0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90020ee4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
90020ee8:	ea4f 08e8 	mov.w	r8, r8, asr #3
90020eec:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90020ef0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
90020ef4:	ea44 0909 	orr.w	r9, r4, r9
90020ef8:	f1cc 0410 	rsb	r4, ip, #16
90020efc:	041a      	lsls	r2, r3, #16
90020efe:	ea4a 0707 	orr.w	r7, sl, r7
90020f02:	1ba4      	subs	r4, r4, r6
90020f04:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
90020f08:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90020f0c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90020f10:	4377      	muls	r7, r6
90020f12:	eb08 0444 	add.w	r4, r8, r4, lsl #1
90020f16:	4313      	orrs	r3, r2
90020f18:	ea4f 420e 	mov.w	r2, lr, lsl #16
90020f1c:	fb04 7409 	mla	r4, r4, r9, r7
90020f20:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
90020f24:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90020f28:	b2af      	uxth	r7, r5
90020f2a:	fb08 4303 	mla	r3, r8, r3, r4
90020f2e:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
90020f32:	43ed      	mvns	r5, r5
90020f34:	10c6      	asrs	r6, r0, #3
90020f36:	4322      	orrs	r2, r4
90020f38:	b2ed      	uxtb	r5, r5
90020f3a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90020f3e:	fb0c 3202 	mla	r2, ip, r2, r3
90020f42:	fb16 f605 	smulbb	r6, r6, r5
90020f46:	0d53      	lsrs	r3, r2, #21
90020f48:	0952      	lsrs	r2, r2, #5
90020f4a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020f4e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90020f52:	431a      	orrs	r2, r3
90020f54:	b293      	uxth	r3, r2
90020f56:	1202      	asrs	r2, r0, #8
90020f58:	ea4f 2c23 	mov.w	ip, r3, asr #8
90020f5c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
90020f60:	00dc      	lsls	r4, r3, #3
90020f62:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90020f66:	fb12 f205 	smulbb	r2, r2, r5
90020f6a:	b2e4      	uxtb	r4, r4
90020f6c:	fb0c 2c07 	mla	ip, ip, r7, r2
90020f70:	10da      	asrs	r2, r3, #3
90020f72:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90020f76:	fa1f fc8c 	uxth.w	ip, ip
90020f7a:	fb02 6207 	mla	r2, r2, r7, r6
90020f7e:	f10c 0301 	add.w	r3, ip, #1
90020f82:	b296      	uxth	r6, r2
90020f84:	00c2      	lsls	r2, r0, #3
90020f86:	eb03 231c 	add.w	r3, r3, ip, lsr #8
90020f8a:	b2d2      	uxtb	r2, r2
90020f8c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
90020f90:	fb12 f205 	smulbb	r2, r2, r5
90020f94:	fb04 2207 	mla	r2, r4, r7, r2
90020f98:	b292      	uxth	r2, r2
90020f9a:	1c50      	adds	r0, r2, #1
90020f9c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
90020fa0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90020fa4:	4313      	orrs	r3, r2
90020fa6:	1c72      	adds	r2, r6, #1
90020fa8:	eb02 2216 	add.w	r2, r2, r6, lsr #8
90020fac:	0952      	lsrs	r2, r2, #5
90020fae:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90020fb2:	4313      	orrs	r3, r2
90020fb4:	800b      	strh	r3, [r1, #0]
90020fb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
90020fba:	2e0f      	cmp	r6, #15
90020fbc:	f63f af71 	bhi.w	90020ea2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
90020fc0:	4603      	mov	r3, r0
90020fc2:	4686      	mov	lr, r0
90020fc4:	e786      	b.n	90020ed4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
90020fc6:	bf00      	nop
90020fc8:	900306ff 	.word	0x900306ff
90020fcc:	90030d66 	.word	0x90030d66
90020fd0:	900307e8 	.word	0x900307e8

90020fd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90020fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020fd8:	ed2d 8b08 	vpush	{d8-d11}
90020fdc:	b099      	sub	sp, #100	; 0x64
90020fde:	eeb0 aa40 	vmov.f32	s20, s0
90020fe2:	eef0 9a60 	vmov.f32	s19, s1
90020fe6:	9215      	str	r2, [sp, #84]	; 0x54
90020fe8:	eeb0 9a41 	vmov.f32	s18, s2
90020fec:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
90020fee:	eeb0 8a62 	vmov.f32	s16, s5
90020ff2:	9309      	str	r3, [sp, #36]	; 0x24
90020ff4:	eef0 8a43 	vmov.f32	s17, s6
90020ff8:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
90020ffc:	eef0 ba44 	vmov.f32	s23, s8
90021000:	9016      	str	r0, [sp, #88]	; 0x58
90021002:	eeb0 ba64 	vmov.f32	s22, s9
90021006:	930d      	str	r3, [sp, #52]	; 0x34
90021008:	eef0 aa45 	vmov.f32	s21, s10
9002100c:	6850      	ldr	r0, [r2, #4]
9002100e:	910c      	str	r1, [sp, #48]	; 0x30
90021010:	6812      	ldr	r2, [r2, #0]
90021012:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
90021016:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
9002101a:	fb00 1303 	mla	r3, r0, r3, r1
9002101e:	eb02 0843 	add.w	r8, r2, r3, lsl #1
90021022:	9b32      	ldr	r3, [sp, #200]	; 0xc8
90021024:	681b      	ldr	r3, [r3, #0]
90021026:	930b      	str	r3, [sp, #44]	; 0x2c
90021028:	9b32      	ldr	r3, [sp, #200]	; 0xc8
9002102a:	685e      	ldr	r6, [r3, #4]
9002102c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9002102e:	3604      	adds	r6, #4
90021030:	43db      	mvns	r3, r3
90021032:	b2db      	uxtb	r3, r3
90021034:	930a      	str	r3, [sp, #40]	; 0x28
90021036:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90021038:	2b00      	cmp	r3, #0
9002103a:	dc03      	bgt.n	90021044 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9002103c:	9b15      	ldr	r3, [sp, #84]	; 0x54
9002103e:	2b00      	cmp	r3, #0
90021040:	f340 8226 	ble.w	90021490 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
90021044:	9b32      	ldr	r3, [sp, #200]	; 0xc8
90021046:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9002104a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9002104e:	1e48      	subs	r0, r1, #1
90021050:	1e57      	subs	r7, r2, #1
90021052:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021054:	2b00      	cmp	r3, #0
90021056:	f340 80e4 	ble.w	90021222 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
9002105a:	ea5f 4c2a 	movs.w	ip, sl, asr #16
9002105e:	ea4f 4325 	mov.w	r3, r5, asr #16
90021062:	d406      	bmi.n	90021072 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90021064:	4584      	cmp	ip, r0
90021066:	da04      	bge.n	90021072 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90021068:	2b00      	cmp	r3, #0
9002106a:	db02      	blt.n	90021072 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9002106c:	42bb      	cmp	r3, r7
9002106e:	f2c0 80d9 	blt.w	90021224 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
90021072:	f11c 0c01 	adds.w	ip, ip, #1
90021076:	f100 80ca 	bmi.w	9002120e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
9002107a:	4561      	cmp	r1, ip
9002107c:	f2c0 80c7 	blt.w	9002120e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
90021080:	3301      	adds	r3, #1
90021082:	f100 80c4 	bmi.w	9002120e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
90021086:	429a      	cmp	r2, r3
90021088:	f2c0 80c1 	blt.w	9002120e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
9002108c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
90021090:	4647      	mov	r7, r8
90021092:	f1bb 0f00 	cmp.w	fp, #0
90021096:	f340 80e4 	ble.w	90021262 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
9002109a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
9002109c:	ea4f 4c25 	mov.w	ip, r5, asr #16
900210a0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
900210a2:	f3ca 3003 	ubfx	r0, sl, #12, #4
900210a6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
900210aa:	ea5f 422a 	movs.w	r2, sl, asr #16
900210ae:	f3c5 3103 	ubfx	r1, r5, #12, #4
900210b2:	689b      	ldr	r3, [r3, #8]
900210b4:	f100 8122 	bmi.w	900212fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
900210b8:	f103 39ff 	add.w	r9, r3, #4294967295
900210bc:	454a      	cmp	r2, r9
900210be:	f280 811d 	bge.w	900212fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
900210c2:	f1bc 0f00 	cmp.w	ip, #0
900210c6:	f2c0 8119 	blt.w	900212fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
900210ca:	f10e 39ff 	add.w	r9, lr, #4294967295
900210ce:	45cc      	cmp	ip, r9
900210d0:	f280 8114 	bge.w	900212fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
900210d4:	b21b      	sxth	r3, r3
900210d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
900210d8:	fb0c 2203 	mla	r2, ip, r3, r2
900210dc:	eb04 0902 	add.w	r9, r4, r2
900210e0:	5ca2      	ldrb	r2, [r4, r2]
900210e2:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
900210e6:	2800      	cmp	r0, #0
900210e8:	f000 80ff 	beq.w	900212ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
900210ec:	f899 2001 	ldrb.w	r2, [r9, #1]
900210f0:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
900210f4:	9211      	str	r2, [sp, #68]	; 0x44
900210f6:	b151      	cbz	r1, 9002110e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
900210f8:	eb09 0203 	add.w	r2, r9, r3
900210fc:	f819 3003 	ldrb.w	r3, [r9, r3]
90021100:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
90021104:	930f      	str	r3, [sp, #60]	; 0x3c
90021106:	7853      	ldrb	r3, [r2, #1]
90021108:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9002110c:	9312      	str	r3, [sp, #72]	; 0x48
9002110e:	9b11      	ldr	r3, [sp, #68]	; 0x44
90021110:	fb10 f201 	smulbb	r2, r0, r1
90021114:	9c12      	ldr	r4, [sp, #72]	; 0x48
90021116:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9002111a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9002111e:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
90021122:	10d2      	asrs	r2, r2, #3
90021124:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
90021128:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
9002112c:	ea4c 0c03 	orr.w	ip, ip, r3
90021130:	9b12      	ldr	r3, [sp, #72]	; 0x48
90021132:	041b      	lsls	r3, r3, #16
90021134:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90021138:	4323      	orrs	r3, r4
9002113a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9002113c:	4353      	muls	r3, r2
9002113e:	fb09 330c 	mla	r3, r9, ip, r3
90021142:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
90021146:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9002114a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9002114e:	ea4c 0e0e 	orr.w	lr, ip, lr
90021152:	f1c1 0c10 	rsb	ip, r1, #16
90021156:	ebac 0c00 	sub.w	ip, ip, r0
9002115a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9002115e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
90021162:	fb0c 3c0e 	mla	ip, ip, lr, r3
90021166:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90021168:	0418      	lsls	r0, r3, #16
9002116a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9002116e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90021172:	4318      	orrs	r0, r3
90021174:	fb02 c200 	mla	r2, r2, r0, ip
90021178:	f8b7 c000 	ldrh.w	ip, [r7]
9002117c:	0d53      	lsrs	r3, r2, #21
9002117e:	0952      	lsrs	r2, r2, #5
90021180:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90021184:	ea4f 212c 	mov.w	r1, ip, asr #8
90021188:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9002118c:	ea4f 0eec 	mov.w	lr, ip, asr #3
90021190:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90021194:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90021198:	431a      	orrs	r2, r3
9002119a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
9002119e:	fb11 f104 	smulbb	r1, r1, r4
900211a2:	fa5f fc8c 	uxtb.w	ip, ip
900211a6:	b292      	uxth	r2, r2
900211a8:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
900211ac:	fb1c fc04 	smulbb	ip, ip, r4
900211b0:	fb1e fe04 	smulbb	lr, lr, r4
900211b4:	1210      	asrs	r0, r2, #8
900211b6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900211ba:	fb00 1003 	mla	r0, r0, r3, r1
900211be:	10d1      	asrs	r1, r2, #3
900211c0:	00d2      	lsls	r2, r2, #3
900211c2:	b280      	uxth	r0, r0
900211c4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900211c8:	b2d2      	uxtb	r2, r2
900211ca:	fb01 e103 	mla	r1, r1, r3, lr
900211ce:	fb02 c203 	mla	r2, r2, r3, ip
900211d2:	1c43      	adds	r3, r0, #1
900211d4:	b289      	uxth	r1, r1
900211d6:	b292      	uxth	r2, r2
900211d8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
900211dc:	f102 0c01 	add.w	ip, r2, #1
900211e0:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
900211e4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
900211e8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
900211ec:	4313      	orrs	r3, r2
900211ee:	1c4a      	adds	r2, r1, #1
900211f0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
900211f4:	0949      	lsrs	r1, r1, #5
900211f6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
900211fa:	430b      	orrs	r3, r1
900211fc:	803b      	strh	r3, [r7, #0]
900211fe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
90021200:	3702      	adds	r7, #2
90021202:	f10b 3bff 	add.w	fp, fp, #4294967295
90021206:	449a      	add	sl, r3
90021208:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
9002120a:	441d      	add	r5, r3
9002120c:	e741      	b.n	90021092 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
9002120e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
90021210:	f108 0802 	add.w	r8, r8, #2
90021214:	449a      	add	sl, r3
90021216:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90021218:	441d      	add	r5, r3
9002121a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002121c:	3b01      	subs	r3, #1
9002121e:	9309      	str	r3, [sp, #36]	; 0x24
90021220:	e717      	b.n	90021052 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90021222:	d023      	beq.n	9002126c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
90021224:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021226:	982d      	ldr	r0, [sp, #180]	; 0xb4
90021228:	3b01      	subs	r3, #1
9002122a:	fb00 a003 	mla	r0, r0, r3, sl
9002122e:	1400      	asrs	r0, r0, #16
90021230:	f53f af2c 	bmi.w	9002108c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
90021234:	3901      	subs	r1, #1
90021236:	4288      	cmp	r0, r1
90021238:	f6bf af28 	bge.w	9002108c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
9002123c:	992e      	ldr	r1, [sp, #184]	; 0xb8
9002123e:	fb01 5303 	mla	r3, r1, r3, r5
90021242:	141b      	asrs	r3, r3, #16
90021244:	f53f af22 	bmi.w	9002108c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
90021248:	3a01      	subs	r2, #1
9002124a:	4293      	cmp	r3, r2
9002124c:	f6bf af1e 	bge.w	9002108c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
90021250:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
90021254:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
90021258:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
9002125c:	f1be 0f00 	cmp.w	lr, #0
90021260:	dc6c      	bgt.n	9002133c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
90021262:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021264:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
90021268:	eb08 0844 	add.w	r8, r8, r4, lsl #1
9002126c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9002126e:	2b00      	cmp	r3, #0
90021270:	f340 810e 	ble.w	90021490 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
90021274:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90021278:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9002127a:	ee3a aa2b 	vadd.f32	s20, s20, s23
9002127e:	ee79 9a8b 	vadd.f32	s19, s19, s22
90021282:	eef0 6a48 	vmov.f32	s13, s16
90021286:	eec7 7a0a 	vdiv.f32	s15, s14, s20
9002128a:	ee39 9a2a 	vadd.f32	s18, s18, s21
9002128e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021292:	ee16 aa90 	vmov	sl, s13
90021296:	eef0 6a68 	vmov.f32	s13, s17
9002129a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002129e:	ee16 5a90 	vmov	r5, s13
900212a2:	ee29 7aa7 	vmul.f32	s14, s19, s15
900212a6:	ee69 7a27 	vmul.f32	s15, s18, s15
900212aa:	ee37 8a48 	vsub.f32	s16, s14, s16
900212ae:	ee77 8ae8 	vsub.f32	s17, s15, s17
900212b2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
900212b6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
900212ba:	ee18 2a10 	vmov	r2, s16
900212be:	eeb0 8a47 	vmov.f32	s16, s14
900212c2:	fb92 f3f3 	sdiv	r3, r2, r3
900212c6:	ee18 2a90 	vmov	r2, s17
900212ca:	932d      	str	r3, [sp, #180]	; 0xb4
900212cc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
900212ce:	eef0 8a67 	vmov.f32	s17, s15
900212d2:	fb92 f3f3 	sdiv	r3, r2, r3
900212d6:	932e      	str	r3, [sp, #184]	; 0xb8
900212d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900212da:	9a15      	ldr	r2, [sp, #84]	; 0x54
900212dc:	3b01      	subs	r3, #1
900212de:	930c      	str	r3, [sp, #48]	; 0x30
900212e0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
900212e2:	bf08      	it	eq
900212e4:	4613      	moveq	r3, r2
900212e6:	9309      	str	r3, [sp, #36]	; 0x24
900212e8:	e6a5      	b.n	90021036 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
900212ea:	2900      	cmp	r1, #0
900212ec:	f43f af0f 	beq.w	9002110e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
900212f0:	f819 3003 	ldrb.w	r3, [r9, r3]
900212f4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
900212f8:	930f      	str	r3, [sp, #60]	; 0x3c
900212fa:	e708      	b.n	9002110e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
900212fc:	f112 0901 	adds.w	r9, r2, #1
90021300:	f53f af7d 	bmi.w	900211fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
90021304:	454b      	cmp	r3, r9
90021306:	f6ff af7a 	blt.w	900211fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9002130a:	f11c 0901 	adds.w	r9, ip, #1
9002130e:	f53f af76 	bmi.w	900211fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
90021312:	45ce      	cmp	lr, r9
90021314:	f6ff af73 	blt.w	900211fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
90021318:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9002131a:	b21b      	sxth	r3, r3
9002131c:	9202      	str	r2, [sp, #8]
9002131e:	fa0f f28e 	sxth.w	r2, lr
90021322:	9300      	str	r3, [sp, #0]
90021324:	4633      	mov	r3, r6
90021326:	9201      	str	r2, [sp, #4]
90021328:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9002132a:	e9cd 1405 	strd	r1, r4, [sp, #20]
9002132e:	e9cd c003 	strd	ip, r0, [sp, #12]
90021332:	4639      	mov	r1, r7
90021334:	9816      	ldr	r0, [sp, #88]	; 0x58
90021336:	f7ff fd6f 	bl	90020e18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
9002133a:	e760      	b.n	900211fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9002133c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
9002133e:	ea4f 422a 	mov.w	r2, sl, asr #16
90021342:	1429      	asrs	r1, r5, #16
90021344:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90021346:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
9002134a:	f3ca 3c03 	ubfx	ip, sl, #12, #4
9002134e:	f3c5 3003 	ubfx	r0, r5, #12, #4
90021352:	fb03 2101 	mla	r1, r3, r1, r2
90021356:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90021358:	440a      	add	r2, r1
9002135a:	5c61      	ldrb	r1, [r4, r1]
9002135c:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
90021360:	f1bc 0f00 	cmp.w	ip, #0
90021364:	f000 808c 	beq.w	90021480 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
90021368:	7857      	ldrb	r7, [r2, #1]
9002136a:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
9002136e:	9413      	str	r4, [sp, #76]	; 0x4c
90021370:	b140      	cbz	r0, 90021384 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
90021372:	18d7      	adds	r7, r2, r3
90021374:	5cd3      	ldrb	r3, [r2, r3]
90021376:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9002137a:	9310      	str	r3, [sp, #64]	; 0x40
9002137c:	787b      	ldrb	r3, [r7, #1]
9002137e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
90021382:	9314      	str	r3, [sp, #80]	; 0x50
90021384:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90021386:	fb1c f200 	smulbb	r2, ip, r0
9002138a:	9c14      	ldr	r4, [sp, #80]	; 0x50
9002138c:	f10e 3eff 	add.w	lr, lr, #4294967295
90021390:	041f      	lsls	r7, r3, #16
90021392:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90021396:	10d2      	asrs	r2, r2, #3
90021398:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
9002139c:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
900213a0:	431f      	orrs	r7, r3
900213a2:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
900213a6:	9317      	str	r3, [sp, #92]	; 0x5c
900213a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
900213aa:	9c17      	ldr	r4, [sp, #92]	; 0x5c
900213ac:	041b      	lsls	r3, r3, #16
900213ae:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900213b2:	ea43 030b 	orr.w	r3, r3, fp
900213b6:	ea4f 4b01 	mov.w	fp, r1, lsl #16
900213ba:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
900213be:	4353      	muls	r3, r2
900213c0:	fb04 3707 	mla	r7, r4, r7, r3
900213c4:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
900213c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
900213ca:	ea43 0b01 	orr.w	fp, r3, r1
900213ce:	f1c0 0110 	rsb	r1, r0, #16
900213d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
900213d4:	eba1 0c0c 	sub.w	ip, r1, ip
900213d8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
900213dc:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
900213e0:	fb0c 770b 	mla	r7, ip, fp, r7
900213e4:	ea4f 4c03 	mov.w	ip, r3, lsl #16
900213e8:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
900213ec:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
900213f0:	ea4c 0c0b 	orr.w	ip, ip, fp
900213f4:	fb02 770c 	mla	r7, r2, ip, r7
900213f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
900213fa:	0d79      	lsrs	r1, r7, #21
900213fc:	8812      	ldrh	r2, [r2, #0]
900213fe:	097f      	lsrs	r7, r7, #5
90021400:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90021404:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
90021408:	430f      	orrs	r7, r1
9002140a:	1211      	asrs	r1, r2, #8
9002140c:	b2bb      	uxth	r3, r7
9002140e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90021412:	10d7      	asrs	r7, r2, #3
90021414:	fb11 f104 	smulbb	r1, r1, r4
90021418:	1218      	asrs	r0, r3, #8
9002141a:	00d2      	lsls	r2, r2, #3
9002141c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90021420:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90021424:	fb17 f704 	smulbb	r7, r7, r4
90021428:	b2d2      	uxtb	r2, r2
9002142a:	fb00 1009 	mla	r0, r0, r9, r1
9002142e:	10d9      	asrs	r1, r3, #3
90021430:	fb12 f204 	smulbb	r2, r2, r4
90021434:	00db      	lsls	r3, r3, #3
90021436:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9002143a:	b280      	uxth	r0, r0
9002143c:	b2db      	uxtb	r3, r3
9002143e:	fb01 7109 	mla	r1, r1, r9, r7
90021442:	fb03 2309 	mla	r3, r3, r9, r2
90021446:	1c42      	adds	r2, r0, #1
90021448:	b289      	uxth	r1, r1
9002144a:	b29b      	uxth	r3, r3
9002144c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90021450:	1c4f      	adds	r7, r1, #1
90021452:	1c5a      	adds	r2, r3, #1
90021454:	eb07 2111 	add.w	r1, r7, r1, lsr #8
90021458:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9002145c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
90021460:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90021462:	0949      	lsrs	r1, r1, #5
90021464:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90021468:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9002146c:	4310      	orrs	r0, r2
9002146e:	4308      	orrs	r0, r1
90021470:	f823 0b02 	strh.w	r0, [r3], #2
90021474:	930e      	str	r3, [sp, #56]	; 0x38
90021476:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
90021478:	449a      	add	sl, r3
9002147a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
9002147c:	441d      	add	r5, r3
9002147e:	e6ed      	b.n	9002125c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
90021480:	2800      	cmp	r0, #0
90021482:	f43f af7f 	beq.w	90021384 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
90021486:	5cd3      	ldrb	r3, [r2, r3]
90021488:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9002148c:	9310      	str	r3, [sp, #64]	; 0x40
9002148e:	e779      	b.n	90021384 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
90021490:	b019      	add	sp, #100	; 0x64
90021492:	ecbd 8b08 	vpop	{d8-d11}
90021496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

9002149c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
9002149c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
900214a0:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
900214a4:	f9bd e020 	ldrsh.w	lr, [sp, #32]
900214a8:	2e00      	cmp	r6, #0
900214aa:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
900214ae:	fb06 570e 	mla	r7, r6, lr, r5
900214b2:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
900214b6:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
900214ba:	eb02 0807 	add.w	r8, r2, r7
900214be:	8808      	ldrh	r0, [r1, #0]
900214c0:	db38      	blt.n	90021534 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
900214c2:	45b1      	cmp	r9, r6
900214c4:	dd36      	ble.n	90021534 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
900214c6:	2d00      	cmp	r5, #0
900214c8:	db32      	blt.n	90021530 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
900214ca:	45ae      	cmp	lr, r5
900214cc:	dd30      	ble.n	90021530 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
900214ce:	5dd2      	ldrb	r2, [r2, r7]
900214d0:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
900214d4:	1c6a      	adds	r2, r5, #1
900214d6:	d430      	bmi.n	9002153a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
900214d8:	4596      	cmp	lr, r2
900214da:	dd2e      	ble.n	9002153a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
900214dc:	b36c      	cbz	r4, 9002153a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
900214de:	f898 2001 	ldrb.w	r2, [r8, #1]
900214e2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
900214e6:	3601      	adds	r6, #1
900214e8:	d42b      	bmi.n	90021542 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
900214ea:	45b1      	cmp	r9, r6
900214ec:	dd29      	ble.n	90021542 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
900214ee:	f1bc 0f00 	cmp.w	ip, #0
900214f2:	d028      	beq.n	90021546 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
900214f4:	2d00      	cmp	r5, #0
900214f6:	db22      	blt.n	9002153e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
900214f8:	45ae      	cmp	lr, r5
900214fa:	dd20      	ble.n	9002153e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
900214fc:	f818 600e 	ldrb.w	r6, [r8, lr]
90021500:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
90021504:	3501      	adds	r5, #1
90021506:	d407      	bmi.n	90021518 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
90021508:	45ae      	cmp	lr, r5
9002150a:	dd05      	ble.n	90021518 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
9002150c:	b134      	cbz	r4, 9002151c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9002150e:	44c6      	add	lr, r8
90021510:	f89e 0001 	ldrb.w	r0, [lr, #1]
90021514:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
90021518:	2c0f      	cmp	r4, #15
9002151a:	d802      	bhi.n	90021522 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
9002151c:	f1bc 0f0f 	cmp.w	ip, #15
90021520:	d914      	bls.n	9002154c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
90021522:	4b26      	ldr	r3, [pc, #152]	; (900215bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
90021524:	f240 11ef 	movw	r1, #495	; 0x1ef
90021528:	4a25      	ldr	r2, [pc, #148]	; (900215c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
9002152a:	4826      	ldr	r0, [pc, #152]	; (900215c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
9002152c:	f007 fb82 	bl	90028c34 <__assert_func>
90021530:	4607      	mov	r7, r0
90021532:	e7cf      	b.n	900214d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
90021534:	4602      	mov	r2, r0
90021536:	4607      	mov	r7, r0
90021538:	e7d5      	b.n	900214e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
9002153a:	4602      	mov	r2, r0
9002153c:	e7d3      	b.n	900214e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
9002153e:	4606      	mov	r6, r0
90021540:	e7e0      	b.n	90021504 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
90021542:	4606      	mov	r6, r0
90021544:	e7e8      	b.n	90021518 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
90021546:	2c0f      	cmp	r4, #15
90021548:	d8eb      	bhi.n	90021522 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
9002154a:	4606      	mov	r6, r0
9002154c:	fb14 f30c 	smulbb	r3, r4, ip
90021550:	043d      	lsls	r5, r7, #16
90021552:	ea4f 4e02 	mov.w	lr, r2, lsl #16
90021556:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9002155a:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
9002155e:	10db      	asrs	r3, r3, #3
90021560:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
90021564:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90021568:	432f      	orrs	r7, r5
9002156a:	f1cc 0510 	rsb	r5, ip, #16
9002156e:	ea4e 0202 	orr.w	r2, lr, r2
90021572:	1b2d      	subs	r5, r5, r4
90021574:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
90021578:	eb03 0545 	add.w	r5, r3, r5, lsl #1
9002157c:	4354      	muls	r4, r2
9002157e:	fb05 4507 	mla	r5, r5, r7, r4
90021582:	0404      	lsls	r4, r0, #16
90021584:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90021588:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9002158c:	4320      	orrs	r0, r4
9002158e:	fb03 5400 	mla	r4, r3, r0, r5
90021592:	0430      	lsls	r0, r6, #16
90021594:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
90021598:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
9002159c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
900215a0:	4330      	orrs	r0, r6
900215a2:	fb03 4000 	mla	r0, r3, r0, r4
900215a6:	0d43      	lsrs	r3, r0, #21
900215a8:	0940      	lsrs	r0, r0, #5
900215aa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900215ae:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900215b2:	4318      	orrs	r0, r3
900215b4:	8008      	strh	r0, [r1, #0]
900215b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
900215ba:	bf00      	nop
900215bc:	900306ff 	.word	0x900306ff
900215c0:	90030d66 	.word	0x90030d66
900215c4:	900307e8 	.word	0x900307e8

900215c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900215c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900215cc:	ed2d 8b0a 	vpush	{d8-d12}
900215d0:	b093      	sub	sp, #76	; 0x4c
900215d2:	eeb0 aa40 	vmov.f32	s20, s0
900215d6:	eef0 9a60 	vmov.f32	s19, s1
900215da:	920f      	str	r2, [sp, #60]	; 0x3c
900215dc:	eeb0 9a41 	vmov.f32	s18, s2
900215e0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
900215e2:	eeb0 8a62 	vmov.f32	s16, s5
900215e6:	9010      	str	r0, [sp, #64]	; 0x40
900215e8:	eef0 8a43 	vmov.f32	s17, s6
900215ec:	6850      	ldr	r0, [r2, #4]
900215ee:	eeb0 ca44 	vmov.f32	s24, s8
900215f2:	9108      	str	r1, [sp, #32]
900215f4:	eef0 ba64 	vmov.f32	s23, s9
900215f8:	9306      	str	r3, [sp, #24]
900215fa:	eeb0 ba45 	vmov.f32	s22, s10
900215fe:	6812      	ldr	r2, [r2, #0]
90021600:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
90021604:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
90021608:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
9002160c:	fb00 1303 	mla	r3, r0, r3, r1
90021610:	eb02 0943 	add.w	r9, r2, r3, lsl #1
90021614:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90021616:	681b      	ldr	r3, [r3, #0]
90021618:	9307      	str	r3, [sp, #28]
9002161a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
9002161c:	685f      	ldr	r7, [r3, #4]
9002161e:	3704      	adds	r7, #4
90021620:	9b08      	ldr	r3, [sp, #32]
90021622:	2b00      	cmp	r3, #0
90021624:	dc03      	bgt.n	9002162e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90021626:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90021628:	2b00      	cmp	r3, #0
9002162a:	f340 81b2 	ble.w	90021992 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
9002162e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90021630:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90021634:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90021638:	1e48      	subs	r0, r1, #1
9002163a:	f102 3cff 	add.w	ip, r2, #4294967295
9002163e:	9b06      	ldr	r3, [sp, #24]
90021640:	2b00      	cmp	r3, #0
90021642:	f340 80a9 	ble.w	90021798 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
90021646:	ea5f 4e24 	movs.w	lr, r4, asr #16
9002164a:	ea4f 4326 	mov.w	r3, r6, asr #16
9002164e:	d406      	bmi.n	9002165e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90021650:	4586      	cmp	lr, r0
90021652:	da04      	bge.n	9002165e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90021654:	2b00      	cmp	r3, #0
90021656:	db02      	blt.n	9002165e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90021658:	4563      	cmp	r3, ip
9002165a:	f2c0 809e 	blt.w	9002179a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
9002165e:	f11e 0e01 	adds.w	lr, lr, #1
90021662:	f100 808f 	bmi.w	90021784 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
90021666:	4571      	cmp	r1, lr
90021668:	f2c0 808c 	blt.w	90021784 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
9002166c:	3301      	adds	r3, #1
9002166e:	f100 8089 	bmi.w	90021784 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
90021672:	429a      	cmp	r2, r3
90021674:	f2c0 8086 	blt.w	90021784 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
90021678:	f8dd b018 	ldr.w	fp, [sp, #24]
9002167c:	46c8      	mov	r8, r9
9002167e:	f1bb 0f00 	cmp.w	fp, #0
90021682:	f340 80a6 	ble.w	900217d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
90021686:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
90021688:	ea4f 4c26 	mov.w	ip, r6, asr #16
9002168c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
9002168e:	f3c4 3003 	ubfx	r0, r4, #12, #4
90021692:	f8d2 e00c 	ldr.w	lr, [r2, #12]
90021696:	1422      	asrs	r2, r4, #16
90021698:	f3c6 3103 	ubfx	r1, r6, #12, #4
9002169c:	689b      	ldr	r3, [r3, #8]
9002169e:	f100 80e3 	bmi.w	90021868 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
900216a2:	f103 3aff 	add.w	sl, r3, #4294967295
900216a6:	4552      	cmp	r2, sl
900216a8:	f280 80de 	bge.w	90021868 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
900216ac:	f1bc 0f00 	cmp.w	ip, #0
900216b0:	f2c0 80da 	blt.w	90021868 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
900216b4:	f10e 3aff 	add.w	sl, lr, #4294967295
900216b8:	45d4      	cmp	ip, sl
900216ba:	f280 80d5 	bge.w	90021868 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
900216be:	b21b      	sxth	r3, r3
900216c0:	9d07      	ldr	r5, [sp, #28]
900216c2:	fb0c 2203 	mla	r2, ip, r3, r2
900216c6:	eb05 0a02 	add.w	sl, r5, r2
900216ca:	5caa      	ldrb	r2, [r5, r2]
900216cc:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
900216d0:	2800      	cmp	r0, #0
900216d2:	f000 80c0 	beq.w	90021856 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
900216d6:	f89a 2001 	ldrb.w	r2, [sl, #1]
900216da:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
900216de:	920b      	str	r2, [sp, #44]	; 0x2c
900216e0:	b151      	cbz	r1, 900216f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
900216e2:	eb0a 0203 	add.w	r2, sl, r3
900216e6:	f81a 3003 	ldrb.w	r3, [sl, r3]
900216ea:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
900216ee:	9309      	str	r3, [sp, #36]	; 0x24
900216f0:	7853      	ldrb	r3, [r2, #1]
900216f2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
900216f6:	930c      	str	r3, [sp, #48]	; 0x30
900216f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
900216fa:	fb10 f201 	smulbb	r2, r0, r1
900216fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90021700:	ea4f 4c03 	mov.w	ip, r3, lsl #16
90021704:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90021708:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9002170c:	10d2      	asrs	r2, r2, #3
9002170e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
90021712:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
90021716:	ea4c 0c03 	orr.w	ip, ip, r3
9002171a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9002171c:	041b      	lsls	r3, r3, #16
9002171e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90021722:	432b      	orrs	r3, r5
90021724:	4353      	muls	r3, r2
90021726:	fb0a 330c 	mla	r3, sl, ip, r3
9002172a:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
9002172e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
90021732:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
90021736:	ea4c 0e0e 	orr.w	lr, ip, lr
9002173a:	f1c1 0c10 	rsb	ip, r1, #16
9002173e:	ebac 0c00 	sub.w	ip, ip, r0
90021742:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
90021746:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
9002174a:	fb0c 3c0e 	mla	ip, ip, lr, r3
9002174e:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021750:	0418      	lsls	r0, r3, #16
90021752:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90021756:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9002175a:	4318      	orrs	r0, r3
9002175c:	fb02 c200 	mla	r2, r2, r0, ip
90021760:	0d53      	lsrs	r3, r2, #21
90021762:	0952      	lsrs	r2, r2, #5
90021764:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90021768:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9002176c:	431a      	orrs	r2, r3
9002176e:	f8a8 2000 	strh.w	r2, [r8]
90021772:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90021774:	f108 0802 	add.w	r8, r8, #2
90021778:	f10b 3bff 	add.w	fp, fp, #4294967295
9002177c:	441c      	add	r4, r3
9002177e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90021780:	441e      	add	r6, r3
90021782:	e77c      	b.n	9002167e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
90021784:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90021786:	f109 0902 	add.w	r9, r9, #2
9002178a:	441c      	add	r4, r3
9002178c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9002178e:	441e      	add	r6, r3
90021790:	9b06      	ldr	r3, [sp, #24]
90021792:	3b01      	subs	r3, #1
90021794:	9306      	str	r3, [sp, #24]
90021796:	e752      	b.n	9002163e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90021798:	d020      	beq.n	900217dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9002179a:	9b06      	ldr	r3, [sp, #24]
9002179c:	9829      	ldr	r0, [sp, #164]	; 0xa4
9002179e:	3b01      	subs	r3, #1
900217a0:	fb00 4003 	mla	r0, r0, r3, r4
900217a4:	1400      	asrs	r0, r0, #16
900217a6:	f53f af67 	bmi.w	90021678 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
900217aa:	3901      	subs	r1, #1
900217ac:	4288      	cmp	r0, r1
900217ae:	f6bf af63 	bge.w	90021678 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
900217b2:	992a      	ldr	r1, [sp, #168]	; 0xa8
900217b4:	fb01 6303 	mla	r3, r1, r3, r6
900217b8:	141b      	asrs	r3, r3, #16
900217ba:	f53f af5d 	bmi.w	90021678 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
900217be:	3a01      	subs	r2, #1
900217c0:	4293      	cmp	r3, r2
900217c2:	f6bf af59 	bge.w	90021678 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
900217c6:	f8dd 8018 	ldr.w	r8, [sp, #24]
900217ca:	46ca      	mov	sl, r9
900217cc:	f1b8 0f00 	cmp.w	r8, #0
900217d0:	dc67      	bgt.n	900218a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
900217d2:	9b06      	ldr	r3, [sp, #24]
900217d4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
900217d8:	eb09 0945 	add.w	r9, r9, r5, lsl #1
900217dc:	9b08      	ldr	r3, [sp, #32]
900217de:	2b00      	cmp	r3, #0
900217e0:	f340 80d7 	ble.w	90021992 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
900217e4:	ee3a aa0c 	vadd.f32	s20, s20, s24
900217e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
900217ea:	ee79 9aab 	vadd.f32	s19, s19, s23
900217ee:	eef0 6a48 	vmov.f32	s13, s16
900217f2:	eeca 7a8a 	vdiv.f32	s15, s21, s20
900217f6:	ee39 9a0b 	vadd.f32	s18, s18, s22
900217fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900217fe:	ee16 4a90 	vmov	r4, s13
90021802:	eef0 6a68 	vmov.f32	s13, s17
90021806:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002180a:	ee16 6a90 	vmov	r6, s13
9002180e:	ee29 7aa7 	vmul.f32	s14, s19, s15
90021812:	ee69 7a27 	vmul.f32	s15, s18, s15
90021816:	ee37 8a48 	vsub.f32	s16, s14, s16
9002181a:	ee77 8ae8 	vsub.f32	s17, s15, s17
9002181e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
90021822:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
90021826:	ee18 2a10 	vmov	r2, s16
9002182a:	eeb0 8a47 	vmov.f32	s16, s14
9002182e:	fb92 f3f3 	sdiv	r3, r2, r3
90021832:	ee18 2a90 	vmov	r2, s17
90021836:	9329      	str	r3, [sp, #164]	; 0xa4
90021838:	9b26      	ldr	r3, [sp, #152]	; 0x98
9002183a:	eef0 8a67 	vmov.f32	s17, s15
9002183e:	fb92 f3f3 	sdiv	r3, r2, r3
90021842:	932a      	str	r3, [sp, #168]	; 0xa8
90021844:	9b08      	ldr	r3, [sp, #32]
90021846:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90021848:	3b01      	subs	r3, #1
9002184a:	9308      	str	r3, [sp, #32]
9002184c:	9b26      	ldr	r3, [sp, #152]	; 0x98
9002184e:	bf08      	it	eq
90021850:	4613      	moveq	r3, r2
90021852:	9306      	str	r3, [sp, #24]
90021854:	e6e4      	b.n	90021620 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90021856:	2900      	cmp	r1, #0
90021858:	f43f af4e 	beq.w	900216f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
9002185c:	f81a 3003 	ldrb.w	r3, [sl, r3]
90021860:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90021864:	9309      	str	r3, [sp, #36]	; 0x24
90021866:	e747      	b.n	900216f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
90021868:	f112 0a01 	adds.w	sl, r2, #1
9002186c:	d481      	bmi.n	90021772 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
9002186e:	4553      	cmp	r3, sl
90021870:	f6ff af7f 	blt.w	90021772 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
90021874:	f11c 0a01 	adds.w	sl, ip, #1
90021878:	f53f af7b 	bmi.w	90021772 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
9002187c:	45d6      	cmp	lr, sl
9002187e:	f6ff af78 	blt.w	90021772 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
90021882:	b21b      	sxth	r3, r3
90021884:	e9cd 2c02 	strd	r2, ip, [sp, #8]
90021888:	fa0f f28e 	sxth.w	r2, lr
9002188c:	9300      	str	r3, [sp, #0]
9002188e:	463b      	mov	r3, r7
90021890:	9201      	str	r2, [sp, #4]
90021892:	9a07      	ldr	r2, [sp, #28]
90021894:	e9cd 0104 	strd	r0, r1, [sp, #16]
90021898:	4641      	mov	r1, r8
9002189a:	9810      	ldr	r0, [sp, #64]	; 0x40
9002189c:	f7ff fdfe 	bl	9002149c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
900218a0:	e767      	b.n	90021772 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
900218a2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
900218a4:	1422      	asrs	r2, r4, #16
900218a6:	1431      	asrs	r1, r6, #16
900218a8:	9d07      	ldr	r5, [sp, #28]
900218aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
900218ae:	f3c4 3e03 	ubfx	lr, r4, #12, #4
900218b2:	f3c6 3003 	ubfx	r0, r6, #12, #4
900218b6:	fb03 2101 	mla	r1, r3, r1, r2
900218ba:	9a07      	ldr	r2, [sp, #28]
900218bc:	440a      	add	r2, r1
900218be:	5c69      	ldrb	r1, [r5, r1]
900218c0:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
900218c4:	f1be 0f00 	cmp.w	lr, #0
900218c8:	d05c      	beq.n	90021984 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
900218ca:	f892 c001 	ldrb.w	ip, [r2, #1]
900218ce:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
900218d2:	950d      	str	r5, [sp, #52]	; 0x34
900218d4:	b150      	cbz	r0, 900218ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
900218d6:	eb02 0c03 	add.w	ip, r2, r3
900218da:	5cd3      	ldrb	r3, [r2, r3]
900218dc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
900218e0:	930a      	str	r3, [sp, #40]	; 0x28
900218e2:	f89c 3001 	ldrb.w	r3, [ip, #1]
900218e6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
900218ea:	930e      	str	r3, [sp, #56]	; 0x38
900218ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900218ee:	fb1e f200 	smulbb	r2, lr, r0
900218f2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900218f4:	f108 38ff 	add.w	r8, r8, #4294967295
900218f8:	ea4f 4c03 	mov.w	ip, r3, lsl #16
900218fc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90021900:	10d2      	asrs	r2, r2, #3
90021902:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
90021906:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9002190a:	ea4c 0c03 	orr.w	ip, ip, r3
9002190e:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
90021912:	9311      	str	r3, [sp, #68]	; 0x44
90021914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90021916:	9d11      	ldr	r5, [sp, #68]	; 0x44
90021918:	041b      	lsls	r3, r3, #16
9002191a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9002191e:	ea43 030b 	orr.w	r3, r3, fp
90021922:	ea4f 4b01 	mov.w	fp, r1, lsl #16
90021926:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9002192a:	4353      	muls	r3, r2
9002192c:	fb05 3c0c 	mla	ip, r5, ip, r3
90021930:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
90021934:	ea43 0b01 	orr.w	fp, r3, r1
90021938:	f1c0 0110 	rsb	r1, r0, #16
9002193c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002193e:	eba1 0e0e 	sub.w	lr, r1, lr
90021942:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
90021946:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
9002194a:	fb0e cc0b 	mla	ip, lr, fp, ip
9002194e:	ea4f 4b03 	mov.w	fp, r3, lsl #16
90021952:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
90021956:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9002195a:	ea4b 0e0e 	orr.w	lr, fp, lr
9002195e:	fb02 cc0e 	mla	ip, r2, lr, ip
90021962:	ea4f 535c 	mov.w	r3, ip, lsr #21
90021966:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
9002196a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002196e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90021972:	ea43 0c0c 	orr.w	ip, r3, ip
90021976:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90021978:	441c      	add	r4, r3
9002197a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9002197c:	f82a cb02 	strh.w	ip, [sl], #2
90021980:	441e      	add	r6, r3
90021982:	e723      	b.n	900217cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90021984:	2800      	cmp	r0, #0
90021986:	d0b1      	beq.n	900218ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
90021988:	5cd3      	ldrb	r3, [r2, r3]
9002198a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9002198e:	930a      	str	r3, [sp, #40]	; 0x28
90021990:	e7ac      	b.n	900218ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
90021992:	b013      	add	sp, #76	; 0x4c
90021994:	ecbd 8b0a 	vpop	{d8-d12}
90021998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9002199c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
9002199c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900219a0:	468b      	mov	fp, r1
900219a2:	8809      	ldrh	r1, [r1, #0]
900219a4:	b089      	sub	sp, #36	; 0x24
900219a6:	10cd      	asrs	r5, r1, #3
900219a8:	ea4f 2921 	mov.w	r9, r1, asr #8
900219ac:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
900219b0:	00c9      	lsls	r1, r1, #3
900219b2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
900219b6:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
900219ba:	9202      	str	r2, [sp, #8]
900219bc:	b2c9      	uxtb	r1, r1
900219be:	9500      	str	r5, [sp, #0]
900219c0:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
900219c4:	9101      	str	r1, [sp, #4]
900219c6:	9900      	ldr	r1, [sp, #0]
900219c8:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
900219cc:	0209      	lsls	r1, r1, #8
900219ce:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
900219d2:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
900219d6:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
900219da:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
900219de:	fb04 650e 	mla	r5, r4, lr, r6
900219e2:	2c00      	cmp	r4, #0
900219e4:	eb02 0805 	add.w	r8, r2, r5
900219e8:	9a01      	ldr	r2, [sp, #4]
900219ea:	ea41 0102 	orr.w	r1, r1, r2
900219ee:	9107      	str	r1, [sp, #28]
900219f0:	db43      	blt.n	90021a7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
900219f2:	45a2      	cmp	sl, r4
900219f4:	dd41      	ble.n	90021a7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
900219f6:	2e00      	cmp	r6, #0
900219f8:	db3d      	blt.n	90021a76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
900219fa:	45b6      	cmp	lr, r6
900219fc:	dd3b      	ble.n	90021a76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
900219fe:	9a02      	ldr	r2, [sp, #8]
90021a00:	5d55      	ldrb	r5, [r2, r5]
90021a02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
90021a06:	441d      	add	r5, r3
90021a08:	1c72      	adds	r2, r6, #1
90021a0a:	d439      	bmi.n	90021a80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
90021a0c:	4596      	cmp	lr, r2
90021a0e:	dd37      	ble.n	90021a80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
90021a10:	2f00      	cmp	r7, #0
90021a12:	d035      	beq.n	90021a80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
90021a14:	f898 1001 	ldrb.w	r1, [r8, #1]
90021a18:	eb01 0141 	add.w	r1, r1, r1, lsl #1
90021a1c:	4419      	add	r1, r3
90021a1e:	3401      	adds	r4, #1
90021a20:	d432      	bmi.n	90021a88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
90021a22:	45a2      	cmp	sl, r4
90021a24:	dd30      	ble.n	90021a88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
90021a26:	b378      	cbz	r0, 90021a88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
90021a28:	2e00      	cmp	r6, #0
90021a2a:	db2b      	blt.n	90021a84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
90021a2c:	45b6      	cmp	lr, r6
90021a2e:	dd29      	ble.n	90021a84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
90021a30:	f818 400e 	ldrb.w	r4, [r8, lr]
90021a34:	eb04 0444 	add.w	r4, r4, r4, lsl #1
90021a38:	441c      	add	r4, r3
90021a3a:	3601      	adds	r6, #1
90021a3c:	d427      	bmi.n	90021a8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
90021a3e:	45b6      	cmp	lr, r6
90021a40:	dd25      	ble.n	90021a8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
90021a42:	b327      	cbz	r7, 90021a8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
90021a44:	44c6      	add	lr, r8
90021a46:	f89e 2001 	ldrb.w	r2, [lr, #1]
90021a4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90021a4e:	4413      	add	r3, r2
90021a50:	782a      	ldrb	r2, [r5, #0]
90021a52:	2f0f      	cmp	r7, #15
90021a54:	9202      	str	r2, [sp, #8]
90021a56:	780a      	ldrb	r2, [r1, #0]
90021a58:	9203      	str	r2, [sp, #12]
90021a5a:	7822      	ldrb	r2, [r4, #0]
90021a5c:	9204      	str	r2, [sp, #16]
90021a5e:	781a      	ldrb	r2, [r3, #0]
90021a60:	9205      	str	r2, [sp, #20]
90021a62:	d801      	bhi.n	90021a68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
90021a64:	280f      	cmp	r0, #15
90021a66:	d914      	bls.n	90021a92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
90021a68:	4b3f      	ldr	r3, [pc, #252]	; (90021b68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
90021a6a:	f240 210d 	movw	r1, #525	; 0x20d
90021a6e:	4a3f      	ldr	r2, [pc, #252]	; (90021b6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
90021a70:	483f      	ldr	r0, [pc, #252]	; (90021b70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
90021a72:	f007 f8df 	bl	90028c34 <__assert_func>
90021a76:	ad07      	add	r5, sp, #28
90021a78:	e7c6      	b.n	90021a08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
90021a7a:	a907      	add	r1, sp, #28
90021a7c:	460d      	mov	r5, r1
90021a7e:	e7ce      	b.n	90021a1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
90021a80:	a907      	add	r1, sp, #28
90021a82:	e7cc      	b.n	90021a1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
90021a84:	ac07      	add	r4, sp, #28
90021a86:	e7d8      	b.n	90021a3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
90021a88:	ab07      	add	r3, sp, #28
90021a8a:	461c      	mov	r4, r3
90021a8c:	e7e0      	b.n	90021a50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
90021a8e:	ab07      	add	r3, sp, #28
90021a90:	e7de      	b.n	90021a50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
90021a92:	b2ba      	uxth	r2, r7
90021a94:	f891 8002 	ldrb.w	r8, [r1, #2]
90021a98:	b280      	uxth	r0, r0
90021a9a:	7849      	ldrb	r1, [r1, #1]
90021a9c:	78ae      	ldrb	r6, [r5, #2]
90021a9e:	fa1f f78c 	uxth.w	r7, ip
90021aa2:	fb02 fa00 	mul.w	sl, r2, r0
90021aa6:	0112      	lsls	r2, r2, #4
90021aa8:	786d      	ldrb	r5, [r5, #1]
90021aaa:	ea6f 0c0c 	mvn.w	ip, ip
90021aae:	ebca 1000 	rsb	r0, sl, r0, lsl #4
90021ab2:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
90021ab6:	eba2 020a 	sub.w	r2, r2, sl
90021aba:	fa5f fc8c 	uxtb.w	ip, ip
90021abe:	b280      	uxth	r0, r0
90021ac0:	fb19 f90c 	smulbb	r9, r9, ip
90021ac4:	b292      	uxth	r2, r2
90021ac6:	ebae 0e00 	sub.w	lr, lr, r0
90021aca:	4351      	muls	r1, r2
90021acc:	fa1f fe8e 	uxth.w	lr, lr
90021ad0:	fb02 f808 	mul.w	r8, r2, r8
90021ad4:	fb0e 1505 	mla	r5, lr, r5, r1
90021ad8:	7861      	ldrb	r1, [r4, #1]
90021ada:	fb0e 8806 	mla	r8, lr, r6, r8
90021ade:	78a6      	ldrb	r6, [r4, #2]
90021ae0:	fb00 5501 	mla	r5, r0, r1, r5
90021ae4:	7859      	ldrb	r1, [r3, #1]
90021ae6:	fb00 8806 	mla	r8, r0, r6, r8
90021aea:	789e      	ldrb	r6, [r3, #2]
90021aec:	9b00      	ldr	r3, [sp, #0]
90021aee:	fb0a 5101 	mla	r1, sl, r1, r5
90021af2:	fb0a 8606 	mla	r6, sl, r6, r8
90021af6:	fb13 f50c 	smulbb	r5, r3, ip
90021afa:	9b03      	ldr	r3, [sp, #12]
90021afc:	f3c6 2607 	ubfx	r6, r6, #8, #8
90021b00:	f3c1 2107 	ubfx	r1, r1, #8, #8
90021b04:	435a      	muls	r2, r3
90021b06:	9b02      	ldr	r3, [sp, #8]
90021b08:	fb06 9607 	mla	r6, r6, r7, r9
90021b0c:	fb0e 2203 	mla	r2, lr, r3, r2
90021b10:	9b04      	ldr	r3, [sp, #16]
90021b12:	fb01 5107 	mla	r1, r1, r7, r5
90021b16:	b2b6      	uxth	r6, r6
90021b18:	fb00 2003 	mla	r0, r0, r3, r2
90021b1c:	9b05      	ldr	r3, [sp, #20]
90021b1e:	b289      	uxth	r1, r1
90021b20:	f106 0901 	add.w	r9, r6, #1
90021b24:	fb0a 0a03 	mla	sl, sl, r3, r0
90021b28:	9b01      	ldr	r3, [sp, #4]
90021b2a:	1c4d      	adds	r5, r1, #1
90021b2c:	eb09 2616 	add.w	r6, r9, r6, lsr #8
90021b30:	fb13 fc0c 	smulbb	ip, r3, ip
90021b34:	f3ca 2a07 	ubfx	sl, sl, #8, #8
90021b38:	eb05 2111 	add.w	r1, r5, r1, lsr #8
90021b3c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
90021b40:	fb0a c707 	mla	r7, sl, r7, ip
90021b44:	0949      	lsrs	r1, r1, #5
90021b46:	b2bf      	uxth	r7, r7
90021b48:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90021b4c:	f107 0c01 	add.w	ip, r7, #1
90021b50:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
90021b54:	f3c7 27c4 	ubfx	r7, r7, #11, #5
90021b58:	433e      	orrs	r6, r7
90021b5a:	430e      	orrs	r6, r1
90021b5c:	f8ab 6000 	strh.w	r6, [fp]
90021b60:	b009      	add	sp, #36	; 0x24
90021b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90021b66:	bf00      	nop
90021b68:	900306ff 	.word	0x900306ff
90021b6c:	90030cbd 	.word	0x90030cbd
90021b70:	900307e8 	.word	0x900307e8

90021b74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90021b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021b78:	ed2d 8b08 	vpush	{d8-d11}
90021b7c:	b095      	sub	sp, #84	; 0x54
90021b7e:	eeb0 aa40 	vmov.f32	s20, s0
90021b82:	eef0 9a60 	vmov.f32	s19, s1
90021b86:	9212      	str	r2, [sp, #72]	; 0x48
90021b88:	eeb0 9a41 	vmov.f32	s18, s2
90021b8c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
90021b8e:	eeb0 8a62 	vmov.f32	s16, s5
90021b92:	9309      	str	r3, [sp, #36]	; 0x24
90021b94:	eef0 8a43 	vmov.f32	s17, s6
90021b98:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
90021b9c:	eef0 ba44 	vmov.f32	s23, s8
90021ba0:	9013      	str	r0, [sp, #76]	; 0x4c
90021ba2:	eeb0 ba64 	vmov.f32	s22, s9
90021ba6:	930f      	str	r3, [sp, #60]	; 0x3c
90021ba8:	eef0 aa45 	vmov.f32	s21, s10
90021bac:	6850      	ldr	r0, [r2, #4]
90021bae:	910e      	str	r1, [sp, #56]	; 0x38
90021bb0:	6812      	ldr	r2, [r2, #0]
90021bb2:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
90021bb6:	fb00 1303 	mla	r3, r0, r3, r1
90021bba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90021bbe:	930a      	str	r3, [sp, #40]	; 0x28
90021bc0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90021bc2:	681b      	ldr	r3, [r3, #0]
90021bc4:	930d      	str	r3, [sp, #52]	; 0x34
90021bc6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90021bc8:	685c      	ldr	r4, [r3, #4]
90021bca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90021bcc:	3404      	adds	r4, #4
90021bce:	43db      	mvns	r3, r3
90021bd0:	b2db      	uxtb	r3, r3
90021bd2:	930b      	str	r3, [sp, #44]	; 0x2c
90021bd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90021bd6:	2b00      	cmp	r3, #0
90021bd8:	dc03      	bgt.n	90021be2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90021bda:	9b12      	ldr	r3, [sp, #72]	; 0x48
90021bdc:	2b00      	cmp	r3, #0
90021bde:	f340 8258 	ble.w	90022092 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
90021be2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90021be4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90021be8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90021bec:	1e48      	subs	r0, r1, #1
90021bee:	1e55      	subs	r5, r2, #1
90021bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021bf2:	2b00      	cmp	r3, #0
90021bf4:	f340 80fc 	ble.w	90021df0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
90021bf8:	9e27      	ldr	r6, [sp, #156]	; 0x9c
90021bfa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021bfc:	1436      	asrs	r6, r6, #16
90021bfe:	ea4f 4323 	mov.w	r3, r3, asr #16
90021c02:	d406      	bmi.n	90021c12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90021c04:	4286      	cmp	r6, r0
90021c06:	da04      	bge.n	90021c12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90021c08:	2b00      	cmp	r3, #0
90021c0a:	db02      	blt.n	90021c12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90021c0c:	42ab      	cmp	r3, r5
90021c0e:	f2c0 80f0 	blt.w	90021df2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
90021c12:	3601      	adds	r6, #1
90021c14:	f100 80dd 	bmi.w	90021dd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
90021c18:	42b1      	cmp	r1, r6
90021c1a:	f2c0 80da 	blt.w	90021dd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
90021c1e:	3301      	adds	r3, #1
90021c20:	f100 80d7 	bmi.w	90021dd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
90021c24:	429a      	cmp	r2, r3
90021c26:	f2c0 80d4 	blt.w	90021dd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
90021c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021c2c:	9311      	str	r3, [sp, #68]	; 0x44
90021c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90021c30:	930c      	str	r3, [sp, #48]	; 0x30
90021c32:	9b11      	ldr	r3, [sp, #68]	; 0x44
90021c34:	2b00      	cmp	r3, #0
90021c36:	f340 80fd 	ble.w	90021e34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
90021c3a:	982e      	ldr	r0, [sp, #184]	; 0xb8
90021c3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021c3e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
90021c40:	68c6      	ldr	r6, [r0, #12]
90021c42:	141d      	asrs	r5, r3, #16
90021c44:	9827      	ldr	r0, [sp, #156]	; 0x9c
90021c46:	f3c2 3103 	ubfx	r1, r2, #12, #4
90021c4a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90021c4c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
90021c4e:	1400      	asrs	r0, r0, #16
90021c50:	f3c3 3303 	ubfx	r3, r3, #12, #4
90021c54:	6892      	ldr	r2, [r2, #8]
90021c56:	f100 8141 	bmi.w	90021edc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
90021c5a:	1e57      	subs	r7, r2, #1
90021c5c:	42b8      	cmp	r0, r7
90021c5e:	f280 813d 	bge.w	90021edc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
90021c62:	2d00      	cmp	r5, #0
90021c64:	f2c0 813a 	blt.w	90021edc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
90021c68:	1e77      	subs	r7, r6, #1
90021c6a:	42bd      	cmp	r5, r7
90021c6c:	f280 8136 	bge.w	90021edc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
90021c70:	b212      	sxth	r2, r2
90021c72:	fb05 0002 	mla	r0, r5, r2, r0
90021c76:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90021c78:	f815 a000 	ldrb.w	sl, [r5, r0]
90021c7c:	182e      	adds	r6, r5, r0
90021c7e:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
90021c82:	eb04 050a 	add.w	r5, r4, sl
90021c86:	2b00      	cmp	r3, #0
90021c88:	f000 811a 	beq.w	90021ec0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
90021c8c:	f896 c001 	ldrb.w	ip, [r6, #1]
90021c90:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
90021c94:	44a4      	add	ip, r4
90021c96:	2900      	cmp	r1, #0
90021c98:	f000 811a 	beq.w	90021ed0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
90021c9c:	18b0      	adds	r0, r6, r2
90021c9e:	5cb2      	ldrb	r2, [r6, r2]
90021ca0:	7840      	ldrb	r0, [r0, #1]
90021ca2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90021ca6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90021caa:	4422      	add	r2, r4
90021cac:	4420      	add	r0, r4
90021cae:	b29b      	uxth	r3, r3
90021cb0:	f89c 7002 	ldrb.w	r7, [ip, #2]
90021cb4:	b289      	uxth	r1, r1
90021cb6:	f895 b002 	ldrb.w	fp, [r5, #2]
90021cba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
90021cbc:	fb03 f901 	mul.w	r9, r3, r1
90021cc0:	011b      	lsls	r3, r3, #4
90021cc2:	f8b6 e000 	ldrh.w	lr, [r6]
90021cc6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90021cca:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
90021cce:	eba3 0309 	sub.w	r3, r3, r9
90021cd2:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
90021cd6:	b289      	uxth	r1, r1
90021cd8:	f814 a00a 	ldrb.w	sl, [r4, sl]
90021cdc:	b29b      	uxth	r3, r3
90021cde:	eba8 0801 	sub.w	r8, r8, r1
90021ce2:	435f      	muls	r7, r3
90021ce4:	fa1f f888 	uxth.w	r8, r8
90021ce8:	9310      	str	r3, [sp, #64]	; 0x40
90021cea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90021cec:	fb08 770b 	mla	r7, r8, fp, r7
90021cf0:	f892 b002 	ldrb.w	fp, [r2, #2]
90021cf4:	fb01 770b 	mla	r7, r1, fp, r7
90021cf8:	f890 b002 	ldrb.w	fp, [r0, #2]
90021cfc:	fb09 770b 	mla	r7, r9, fp, r7
90021d00:	ea4f 2b2e 	mov.w	fp, lr, asr #8
90021d04:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
90021d08:	f3c7 2707 	ubfx	r7, r7, #8, #8
90021d0c:	fb1b fb03 	smulbb	fp, fp, r3
90021d10:	9b10      	ldr	r3, [sp, #64]	; 0x40
90021d12:	fb07 b706 	mla	r7, r7, r6, fp
90021d16:	f895 b001 	ldrb.w	fp, [r5, #1]
90021d1a:	f89c 5001 	ldrb.w	r5, [ip, #1]
90021d1e:	f89c c000 	ldrb.w	ip, [ip]
90021d22:	b2bf      	uxth	r7, r7
90021d24:	435d      	muls	r5, r3
90021d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90021d28:	fb08 550b 	mla	r5, r8, fp, r5
90021d2c:	f892 b001 	ldrb.w	fp, [r2, #1]
90021d30:	fb01 550b 	mla	r5, r1, fp, r5
90021d34:	f890 b001 	ldrb.w	fp, [r0, #1]
90021d38:	fb09 550b 	mla	r5, r9, fp, r5
90021d3c:	ea4f 0bee 	mov.w	fp, lr, asr #3
90021d40:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90021d44:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
90021d48:	f3c5 2507 	ubfx	r5, r5, #8, #8
90021d4c:	fa5f fe8e 	uxtb.w	lr, lr
90021d50:	fb1b fb03 	smulbb	fp, fp, r3
90021d54:	9b10      	ldr	r3, [sp, #64]	; 0x40
90021d56:	fb03 f30c 	mul.w	r3, r3, ip
90021d5a:	f892 c000 	ldrb.w	ip, [r2]
90021d5e:	fb05 b506 	mla	r5, r5, r6, fp
90021d62:	1c7a      	adds	r2, r7, #1
90021d64:	fb08 330a 	mla	r3, r8, sl, r3
90021d68:	b2ad      	uxth	r5, r5
90021d6a:	fb01 330c 	mla	r3, r1, ip, r3
90021d6e:	f890 c000 	ldrb.w	ip, [r0]
90021d72:	f105 0b01 	add.w	fp, r5, #1
90021d76:	eb02 2717 	add.w	r7, r2, r7, lsr #8
90021d7a:	fb09 3c0c 	mla	ip, r9, ip, r3
90021d7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90021d80:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
90021d84:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90021d88:	fb1e fe03 	smulbb	lr, lr, r3
90021d8c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
90021d90:	096d      	lsrs	r5, r5, #5
90021d92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90021d94:	fb0c ee06 	mla	lr, ip, r6, lr
90021d98:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90021d9c:	fa1f fe8e 	uxth.w	lr, lr
90021da0:	f10e 0c01 	add.w	ip, lr, #1
90021da4:	eb0c 2e1e 	add.w	lr, ip, lr, lsr #8
90021da8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
90021dac:	ea47 070e 	orr.w	r7, r7, lr
90021db0:	433d      	orrs	r5, r7
90021db2:	801d      	strh	r5, [r3, #0]
90021db4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90021db6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
90021db8:	3302      	adds	r3, #2
90021dba:	930c      	str	r3, [sp, #48]	; 0x30
90021dbc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90021dbe:	4413      	add	r3, r2
90021dc0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
90021dc2:	9327      	str	r3, [sp, #156]	; 0x9c
90021dc4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021dc6:	4413      	add	r3, r2
90021dc8:	9328      	str	r3, [sp, #160]	; 0xa0
90021dca:	9b11      	ldr	r3, [sp, #68]	; 0x44
90021dcc:	3b01      	subs	r3, #1
90021dce:	9311      	str	r3, [sp, #68]	; 0x44
90021dd0:	e72f      	b.n	90021c32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
90021dd2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90021dd4:	9e29      	ldr	r6, [sp, #164]	; 0xa4
90021dd6:	4433      	add	r3, r6
90021dd8:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
90021dda:	9327      	str	r3, [sp, #156]	; 0x9c
90021ddc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021dde:	4433      	add	r3, r6
90021de0:	9328      	str	r3, [sp, #160]	; 0xa0
90021de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021de4:	3b01      	subs	r3, #1
90021de6:	9309      	str	r3, [sp, #36]	; 0x24
90021de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90021dea:	3302      	adds	r3, #2
90021dec:	930a      	str	r3, [sp, #40]	; 0x28
90021dee:	e6ff      	b.n	90021bf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90021df0:	d027      	beq.n	90021e42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
90021df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021df4:	9829      	ldr	r0, [sp, #164]	; 0xa4
90021df6:	3b01      	subs	r3, #1
90021df8:	9d27      	ldr	r5, [sp, #156]	; 0x9c
90021dfa:	fb00 5003 	mla	r0, r0, r3, r5
90021dfe:	1400      	asrs	r0, r0, #16
90021e00:	f53f af13 	bmi.w	90021c2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
90021e04:	3901      	subs	r1, #1
90021e06:	4288      	cmp	r0, r1
90021e08:	f6bf af0f 	bge.w	90021c2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
90021e0c:	992a      	ldr	r1, [sp, #168]	; 0xa8
90021e0e:	9828      	ldr	r0, [sp, #160]	; 0xa0
90021e10:	fb01 0303 	mla	r3, r1, r3, r0
90021e14:	141b      	asrs	r3, r3, #16
90021e16:	f53f af08 	bmi.w	90021c2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
90021e1a:	3a01      	subs	r2, #1
90021e1c:	4293      	cmp	r3, r2
90021e1e:	f6bf af04 	bge.w	90021c2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
90021e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021e24:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
90021e28:	9311      	str	r3, [sp, #68]	; 0x44
90021e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90021e2c:	930c      	str	r3, [sp, #48]	; 0x30
90021e2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
90021e30:	2b00      	cmp	r3, #0
90021e32:	dc70      	bgt.n	90021f16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
90021e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021e36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90021e38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90021e3c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90021e40:	930a      	str	r3, [sp, #40]	; 0x28
90021e42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90021e44:	2b00      	cmp	r3, #0
90021e46:	f340 8124 	ble.w	90022092 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
90021e4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90021e4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
90021e50:	ee3a aa2b 	vadd.f32	s20, s20, s23
90021e54:	ee79 9a8b 	vadd.f32	s19, s19, s22
90021e58:	eef0 6a48 	vmov.f32	s13, s16
90021e5c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
90021e60:	ee39 9a2a 	vadd.f32	s18, s18, s21
90021e64:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021e68:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
90021e6c:	eef0 6a68 	vmov.f32	s13, s17
90021e70:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021e74:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
90021e78:	ee29 7aa7 	vmul.f32	s14, s19, s15
90021e7c:	ee69 7a27 	vmul.f32	s15, s18, s15
90021e80:	ee37 8a48 	vsub.f32	s16, s14, s16
90021e84:	ee77 8ae8 	vsub.f32	s17, s15, s17
90021e88:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
90021e8c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
90021e90:	ee18 2a10 	vmov	r2, s16
90021e94:	eeb0 8a47 	vmov.f32	s16, s14
90021e98:	fb92 f3f3 	sdiv	r3, r2, r3
90021e9c:	ee18 2a90 	vmov	r2, s17
90021ea0:	9329      	str	r3, [sp, #164]	; 0xa4
90021ea2:	9b26      	ldr	r3, [sp, #152]	; 0x98
90021ea4:	eef0 8a67 	vmov.f32	s17, s15
90021ea8:	fb92 f3f3 	sdiv	r3, r2, r3
90021eac:	932a      	str	r3, [sp, #168]	; 0xa8
90021eae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90021eb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
90021eb2:	3b01      	subs	r3, #1
90021eb4:	930e      	str	r3, [sp, #56]	; 0x38
90021eb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
90021eb8:	bf08      	it	eq
90021eba:	4613      	moveq	r3, r2
90021ebc:	9309      	str	r3, [sp, #36]	; 0x24
90021ebe:	e689      	b.n	90021bd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90021ec0:	b149      	cbz	r1, 90021ed6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90021ec2:	5cb2      	ldrb	r2, [r6, r2]
90021ec4:	4628      	mov	r0, r5
90021ec6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90021eca:	4422      	add	r2, r4
90021ecc:	46ac      	mov	ip, r5
90021ece:	e6ee      	b.n	90021cae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
90021ed0:	4628      	mov	r0, r5
90021ed2:	462a      	mov	r2, r5
90021ed4:	e6eb      	b.n	90021cae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
90021ed6:	4628      	mov	r0, r5
90021ed8:	462a      	mov	r2, r5
90021eda:	e7f7      	b.n	90021ecc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021edc:	1c47      	adds	r7, r0, #1
90021ede:	f53f af69 	bmi.w	90021db4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
90021ee2:	42ba      	cmp	r2, r7
90021ee4:	f6ff af66 	blt.w	90021db4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
90021ee8:	1c6f      	adds	r7, r5, #1
90021eea:	f53f af63 	bmi.w	90021db4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
90021eee:	42be      	cmp	r6, r7
90021ef0:	f6ff af60 	blt.w	90021db4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
90021ef4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
90021ef6:	b236      	sxth	r6, r6
90021ef8:	b212      	sxth	r2, r2
90021efa:	9002      	str	r0, [sp, #8]
90021efc:	9601      	str	r6, [sp, #4]
90021efe:	9200      	str	r2, [sp, #0]
90021f00:	9813      	ldr	r0, [sp, #76]	; 0x4c
90021f02:	e9cd 1705 	strd	r1, r7, [sp, #20]
90021f06:	e9cd 5303 	strd	r5, r3, [sp, #12]
90021f0a:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
90021f0e:	4623      	mov	r3, r4
90021f10:	f7ff fd44 	bl	9002199c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
90021f14:	e74e      	b.n	90021db4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
90021f16:	9a28      	ldr	r2, [sp, #160]	; 0xa0
90021f18:	9828      	ldr	r0, [sp, #160]	; 0xa0
90021f1a:	f3c2 3103 	ubfx	r1, r2, #12, #4
90021f1e:	9d27      	ldr	r5, [sp, #156]	; 0x9c
90021f20:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
90021f22:	1400      	asrs	r0, r0, #16
90021f24:	142d      	asrs	r5, r5, #16
90021f26:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90021f28:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
90021f2c:	f3c3 3303 	ubfx	r3, r3, #12, #4
90021f30:	fb02 5000 	mla	r0, r2, r0, r5
90021f34:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90021f36:	f815 9000 	ldrb.w	r9, [r5, r0]
90021f3a:	182e      	adds	r6, r5, r0
90021f3c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
90021f40:	eb04 0509 	add.w	r5, r4, r9
90021f44:	2b00      	cmp	r3, #0
90021f46:	f000 8096 	beq.w	90022076 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x502>
90021f4a:	7877      	ldrb	r7, [r6, #1]
90021f4c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
90021f50:	4427      	add	r7, r4
90021f52:	2900      	cmp	r1, #0
90021f54:	f000 8097 	beq.w	90022086 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
90021f58:	18b0      	adds	r0, r6, r2
90021f5a:	5cb2      	ldrb	r2, [r6, r2]
90021f5c:	7840      	ldrb	r0, [r0, #1]
90021f5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90021f62:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90021f66:	4422      	add	r2, r4
90021f68:	4420      	add	r0, r4
90021f6a:	b29b      	uxth	r3, r3
90021f6c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
90021f6e:	b289      	uxth	r1, r1
90021f70:	f895 b002 	ldrb.w	fp, [r5, #2]
90021f74:	f8b6 c000 	ldrh.w	ip, [r6]
90021f78:	fb03 f801 	mul.w	r8, r3, r1
90021f7c:	011b      	lsls	r3, r3, #4
90021f7e:	78be      	ldrb	r6, [r7, #2]
90021f80:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
90021f84:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
90021f88:	eba3 0308 	sub.w	r3, r3, r8
90021f8c:	f814 9009 	ldrb.w	r9, [r4, r9]
90021f90:	b289      	uxth	r1, r1
90021f92:	b29b      	uxth	r3, r3
90021f94:	ebae 0e01 	sub.w	lr, lr, r1
90021f98:	435e      	muls	r6, r3
90021f9a:	fa1f fe8e 	uxth.w	lr, lr
90021f9e:	9310      	str	r3, [sp, #64]	; 0x40
90021fa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90021fa2:	fb0e 660b 	mla	r6, lr, fp, r6
90021fa6:	f892 b002 	ldrb.w	fp, [r2, #2]
90021faa:	fb01 660b 	mla	r6, r1, fp, r6
90021fae:	f890 b002 	ldrb.w	fp, [r0, #2]
90021fb2:	fb08 660b 	mla	r6, r8, fp, r6
90021fb6:	ea4f 2b2c 	mov.w	fp, ip, asr #8
90021fba:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
90021fbe:	f3c6 2607 	ubfx	r6, r6, #8, #8
90021fc2:	fb1b fb03 	smulbb	fp, fp, r3
90021fc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
90021fc8:	fb06 b60a 	mla	r6, r6, sl, fp
90021fcc:	f895 b001 	ldrb.w	fp, [r5, #1]
90021fd0:	787d      	ldrb	r5, [r7, #1]
90021fd2:	783f      	ldrb	r7, [r7, #0]
90021fd4:	b2b6      	uxth	r6, r6
90021fd6:	435d      	muls	r5, r3
90021fd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90021fda:	fb0e 550b 	mla	r5, lr, fp, r5
90021fde:	f892 b001 	ldrb.w	fp, [r2, #1]
90021fe2:	fb01 550b 	mla	r5, r1, fp, r5
90021fe6:	f890 b001 	ldrb.w	fp, [r0, #1]
90021fea:	fb08 550b 	mla	r5, r8, fp, r5
90021fee:	ea4f 0bec 	mov.w	fp, ip, asr #3
90021ff2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90021ff6:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
90021ffa:	f3c5 2507 	ubfx	r5, r5, #8, #8
90021ffe:	fa5f fc8c 	uxtb.w	ip, ip
90022002:	fb1b fb03 	smulbb	fp, fp, r3
90022006:	9b10      	ldr	r3, [sp, #64]	; 0x40
90022008:	437b      	muls	r3, r7
9002200a:	7817      	ldrb	r7, [r2, #0]
9002200c:	fb05 b50a 	mla	r5, r5, sl, fp
90022010:	fb0e 3309 	mla	r3, lr, r9, r3
90022014:	b2ad      	uxth	r5, r5
90022016:	fb01 3307 	mla	r3, r1, r7, r3
9002201a:	7807      	ldrb	r7, [r0, #0]
9002201c:	f105 0b01 	add.w	fp, r5, #1
90022020:	fb08 3707 	mla	r7, r8, r7, r3
90022024:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90022026:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
9002202a:	fb1c fc03 	smulbb	ip, ip, r3
9002202e:	f3c7 2707 	ubfx	r7, r7, #8, #8
90022032:	1c73      	adds	r3, r6, #1
90022034:	096d      	lsrs	r5, r5, #5
90022036:	fb07 c70a 	mla	r7, r7, sl, ip
9002203a:	eb03 2616 	add.w	r6, r3, r6, lsr #8
9002203e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90022042:	b2bf      	uxth	r7, r7
90022044:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90022046:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
9002204a:	1c7a      	adds	r2, r7, #1
9002204c:	eb02 2217 	add.w	r2, r2, r7, lsr #8
90022050:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90022054:	4316      	orrs	r6, r2
90022056:	9a29      	ldr	r2, [sp, #164]	; 0xa4
90022058:	432e      	orrs	r6, r5
9002205a:	f823 6b02 	strh.w	r6, [r3], #2
9002205e:	930c      	str	r3, [sp, #48]	; 0x30
90022060:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90022062:	4413      	add	r3, r2
90022064:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
90022066:	9327      	str	r3, [sp, #156]	; 0x9c
90022068:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002206a:	4413      	add	r3, r2
9002206c:	9328      	str	r3, [sp, #160]	; 0xa0
9002206e:	9b11      	ldr	r3, [sp, #68]	; 0x44
90022070:	3b01      	subs	r3, #1
90022072:	9311      	str	r3, [sp, #68]	; 0x44
90022074:	e6db      	b.n	90021e2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
90022076:	b149      	cbz	r1, 9002208c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
90022078:	5cb2      	ldrb	r2, [r6, r2]
9002207a:	4628      	mov	r0, r5
9002207c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90022080:	4422      	add	r2, r4
90022082:	462f      	mov	r7, r5
90022084:	e771      	b.n	90021f6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
90022086:	4628      	mov	r0, r5
90022088:	462a      	mov	r2, r5
9002208a:	e76e      	b.n	90021f6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
9002208c:	4628      	mov	r0, r5
9002208e:	462a      	mov	r2, r5
90022090:	e7f7      	b.n	90022082 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50e>
90022092:	b015      	add	sp, #84	; 0x54
90022094:	ecbd 8b08 	vpop	{d8-d11}
90022098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9002209c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
9002209c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900220a0:	880e      	ldrh	r6, [r1, #0]
900220a2:	b085      	sub	sp, #20
900220a4:	4691      	mov	r9, r2
900220a6:	0230      	lsls	r0, r6, #8
900220a8:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
900220ac:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
900220b0:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
900220b4:	0170      	lsls	r0, r6, #5
900220b6:	00f6      	lsls	r6, r6, #3
900220b8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
900220bc:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
900220c0:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
900220c4:	b2f6      	uxtb	r6, r6
900220c6:	ea4b 0000 	orr.w	r0, fp, r0
900220ca:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
900220ce:	4306      	orrs	r6, r0
900220d0:	fb05 7a0c 	mla	sl, r5, ip, r7
900220d4:	2d00      	cmp	r5, #0
900220d6:	9603      	str	r6, [sp, #12]
900220d8:	eb09 0e0a 	add.w	lr, r9, sl
900220dc:	db42      	blt.n	90022164 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
900220de:	45a8      	cmp	r8, r5
900220e0:	dd40      	ble.n	90022164 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
900220e2:	2f00      	cmp	r7, #0
900220e4:	db3c      	blt.n	90022160 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
900220e6:	45bc      	cmp	ip, r7
900220e8:	dd3a      	ble.n	90022160 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
900220ea:	f819 600a 	ldrb.w	r6, [r9, sl]
900220ee:	eb06 0646 	add.w	r6, r6, r6, lsl #1
900220f2:	441e      	add	r6, r3
900220f4:	1c78      	adds	r0, r7, #1
900220f6:	d438      	bmi.n	9002216a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
900220f8:	4584      	cmp	ip, r0
900220fa:	dd36      	ble.n	9002216a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
900220fc:	b3aa      	cbz	r2, 9002216a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
900220fe:	f89e 0001 	ldrb.w	r0, [lr, #1]
90022102:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90022106:	4418      	add	r0, r3
90022108:	3501      	adds	r5, #1
9002210a:	d432      	bmi.n	90022172 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
9002210c:	45a8      	cmp	r8, r5
9002210e:	dd30      	ble.n	90022172 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
90022110:	b37c      	cbz	r4, 90022172 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
90022112:	2f00      	cmp	r7, #0
90022114:	db2b      	blt.n	9002216e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
90022116:	45bc      	cmp	ip, r7
90022118:	dd29      	ble.n	9002216e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
9002211a:	f81e 500c 	ldrb.w	r5, [lr, ip]
9002211e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
90022122:	441d      	add	r5, r3
90022124:	3701      	adds	r7, #1
90022126:	d427      	bmi.n	90022178 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
90022128:	45bc      	cmp	ip, r7
9002212a:	dd25      	ble.n	90022178 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
9002212c:	b322      	cbz	r2, 90022178 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
9002212e:	44f4      	add	ip, lr
90022130:	f89c 7001 	ldrb.w	r7, [ip, #1]
90022134:	eb07 0747 	add.w	r7, r7, r7, lsl #1
90022138:	443b      	add	r3, r7
9002213a:	781f      	ldrb	r7, [r3, #0]
9002213c:	2a0f      	cmp	r2, #15
9002213e:	f896 a000 	ldrb.w	sl, [r6]
90022142:	f890 b000 	ldrb.w	fp, [r0]
90022146:	f895 9000 	ldrb.w	r9, [r5]
9002214a:	9700      	str	r7, [sp, #0]
9002214c:	d801      	bhi.n	90022152 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb6>
9002214e:	2c0f      	cmp	r4, #15
90022150:	d914      	bls.n	9002217c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe0>
90022152:	4b2c      	ldr	r3, [pc, #176]	; (90022204 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x168>)
90022154:	f240 210d 	movw	r1, #525	; 0x20d
90022158:	4a2b      	ldr	r2, [pc, #172]	; (90022208 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
9002215a:	482c      	ldr	r0, [pc, #176]	; (9002220c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
9002215c:	f006 fd6a 	bl	90028c34 <__assert_func>
90022160:	ae03      	add	r6, sp, #12
90022162:	e7c7      	b.n	900220f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x58>
90022164:	a803      	add	r0, sp, #12
90022166:	4606      	mov	r6, r0
90022168:	e7ce      	b.n	90022108 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
9002216a:	a803      	add	r0, sp, #12
9002216c:	e7cc      	b.n	90022108 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
9002216e:	ad03      	add	r5, sp, #12
90022170:	e7d8      	b.n	90022124 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x88>
90022172:	ab03      	add	r3, sp, #12
90022174:	461d      	mov	r5, r3
90022176:	e7e0      	b.n	9002213a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
90022178:	ab03      	add	r3, sp, #12
9002217a:	e7de      	b.n	9002213a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
9002217c:	b292      	uxth	r2, r2
9002217e:	f890 e002 	ldrb.w	lr, [r0, #2]
90022182:	b2a4      	uxth	r4, r4
90022184:	78b7      	ldrb	r7, [r6, #2]
90022186:	7840      	ldrb	r0, [r0, #1]
90022188:	fb02 f804 	mul.w	r8, r2, r4
9002218c:	0112      	lsls	r2, r2, #4
9002218e:	7876      	ldrb	r6, [r6, #1]
90022190:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
90022194:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
90022198:	eba2 0208 	sub.w	r2, r2, r8
9002219c:	b2a4      	uxth	r4, r4
9002219e:	b292      	uxth	r2, r2
900221a0:	ebac 0c04 	sub.w	ip, ip, r4
900221a4:	fb02 fe0e 	mul.w	lr, r2, lr
900221a8:	fa1f fc8c 	uxth.w	ip, ip
900221ac:	fb0c ee07 	mla	lr, ip, r7, lr
900221b0:	78af      	ldrb	r7, [r5, #2]
900221b2:	fb04 ee07 	mla	lr, r4, r7, lr
900221b6:	789f      	ldrb	r7, [r3, #2]
900221b8:	785b      	ldrb	r3, [r3, #1]
900221ba:	fb08 e707 	mla	r7, r8, r7, lr
900221be:	fb02 fe0b 	mul.w	lr, r2, fp
900221c2:	4342      	muls	r2, r0
900221c4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
900221c8:	7868      	ldrb	r0, [r5, #1]
900221ca:	fb0c ee0a 	mla	lr, ip, sl, lr
900221ce:	fb0c 2206 	mla	r2, ip, r6, r2
900221d2:	9701      	str	r7, [sp, #4]
900221d4:	fb04 ee09 	mla	lr, r4, r9, lr
900221d8:	9f00      	ldr	r7, [sp, #0]
900221da:	fb04 2400 	mla	r4, r4, r0, r2
900221de:	fb08 ee07 	mla	lr, r8, r7, lr
900221e2:	9f01      	ldr	r7, [sp, #4]
900221e4:	fb08 4803 	mla	r8, r8, r3, r4
900221e8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
900221ec:	ea4f 1858 	mov.w	r8, r8, lsr #5
900221f0:	ea47 070e 	orr.w	r7, r7, lr
900221f4:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
900221f8:	ea47 0708 	orr.w	r7, r7, r8
900221fc:	800f      	strh	r7, [r1, #0]
900221fe:	b005      	add	sp, #20
90022200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90022204:	900306ff 	.word	0x900306ff
90022208:	90030cbd 	.word	0x90030cbd
9002220c:	900307e8 	.word	0x900307e8

90022210 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90022210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90022214:	ed2d 8b08 	vpush	{d8-d11}
90022218:	b08f      	sub	sp, #60	; 0x3c
9002221a:	eeb0 aa40 	vmov.f32	s20, s0
9002221e:	eef0 9a60 	vmov.f32	s19, s1
90022222:	920c      	str	r2, [sp, #48]	; 0x30
90022224:	eeb0 9a41 	vmov.f32	s18, s2
90022228:	9a25      	ldr	r2, [sp, #148]	; 0x94
9002222a:	eeb0 8a62 	vmov.f32	s16, s5
9002222e:	900d      	str	r0, [sp, #52]	; 0x34
90022230:	eef0 8a43 	vmov.f32	s17, s6
90022234:	6850      	ldr	r0, [r2, #4]
90022236:	eef0 ba44 	vmov.f32	s23, s8
9002223a:	910a      	str	r1, [sp, #40]	; 0x28
9002223c:	eeb0 ba64 	vmov.f32	s22, s9
90022240:	9306      	str	r3, [sp, #24]
90022242:	eef0 aa45 	vmov.f32	s21, s10
90022246:	6812      	ldr	r2, [r2, #0]
90022248:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
9002224c:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
90022250:	fb00 1303 	mla	r3, r0, r3, r1
90022254:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90022258:	9307      	str	r3, [sp, #28]
9002225a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002225c:	681b      	ldr	r3, [r3, #0]
9002225e:	9308      	str	r3, [sp, #32]
90022260:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022262:	685c      	ldr	r4, [r3, #4]
90022264:	3404      	adds	r4, #4
90022266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90022268:	2b00      	cmp	r3, #0
9002226a:	dc03      	bgt.n	90022274 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
9002226c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9002226e:	2b00      	cmp	r3, #0
90022270:	f340 81d5 	ble.w	9002261e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
90022274:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022276:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9002227a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9002227e:	1e48      	subs	r0, r1, #1
90022280:	1e56      	subs	r6, r2, #1
90022282:	9b06      	ldr	r3, [sp, #24]
90022284:	2b00      	cmp	r3, #0
90022286:	f340 80b6 	ble.w	900223f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
9002228a:	ea5f 472b 	movs.w	r7, fp, asr #16
9002228e:	ea4f 4325 	mov.w	r3, r5, asr #16
90022292:	d406      	bmi.n	900222a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90022294:	4287      	cmp	r7, r0
90022296:	da04      	bge.n	900222a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90022298:	2b00      	cmp	r3, #0
9002229a:	db02      	blt.n	900222a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9002229c:	42b3      	cmp	r3, r6
9002229e:	f2c0 80ab 	blt.w	900223f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
900222a2:	3701      	adds	r7, #1
900222a4:	f100 809c 	bmi.w	900223e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
900222a8:	42b9      	cmp	r1, r7
900222aa:	f2c0 8099 	blt.w	900223e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
900222ae:	3301      	adds	r3, #1
900222b0:	f100 8096 	bmi.w	900223e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
900222b4:	429a      	cmp	r2, r3
900222b6:	f2c0 8093 	blt.w	900223e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
900222ba:	9b06      	ldr	r3, [sp, #24]
900222bc:	930b      	str	r3, [sp, #44]	; 0x2c
900222be:	9b07      	ldr	r3, [sp, #28]
900222c0:	9309      	str	r3, [sp, #36]	; 0x24
900222c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
900222c4:	2b00      	cmp	r3, #0
900222c6:	f340 80b4 	ble.w	90022432 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
900222ca:	9828      	ldr	r0, [sp, #160]	; 0xa0
900222cc:	142e      	asrs	r6, r5, #16
900222ce:	9a28      	ldr	r2, [sp, #160]	; 0xa0
900222d0:	f3cb 3303 	ubfx	r3, fp, #12, #4
900222d4:	68c7      	ldr	r7, [r0, #12]
900222d6:	ea5f 402b 	movs.w	r0, fp, asr #16
900222da:	f3c5 3103 	ubfx	r1, r5, #12, #4
900222de:	6892      	ldr	r2, [r2, #8]
900222e0:	f100 80fb 	bmi.w	900224da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
900222e4:	f102 3cff 	add.w	ip, r2, #4294967295
900222e8:	4560      	cmp	r0, ip
900222ea:	f280 80f6 	bge.w	900224da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
900222ee:	2e00      	cmp	r6, #0
900222f0:	f2c0 80f3 	blt.w	900224da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
900222f4:	f107 3cff 	add.w	ip, r7, #4294967295
900222f8:	4566      	cmp	r6, ip
900222fa:	f280 80ee 	bge.w	900224da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
900222fe:	b212      	sxth	r2, r2
90022300:	fb06 0002 	mla	r0, r6, r2, r0
90022304:	9e08      	ldr	r6, [sp, #32]
90022306:	1837      	adds	r7, r6, r0
90022308:	5c30      	ldrb	r0, [r6, r0]
9002230a:	eb00 0840 	add.w	r8, r0, r0, lsl #1
9002230e:	eb04 0c08 	add.w	ip, r4, r8
90022312:	2b00      	cmp	r3, #0
90022314:	f000 80d3 	beq.w	900224be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
90022318:	787e      	ldrb	r6, [r7, #1]
9002231a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9002231e:	4426      	add	r6, r4
90022320:	2900      	cmp	r1, #0
90022322:	f000 80d4 	beq.w	900224ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
90022326:	18b8      	adds	r0, r7, r2
90022328:	5cba      	ldrb	r2, [r7, r2]
9002232a:	7840      	ldrb	r0, [r0, #1]
9002232c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90022330:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90022334:	4422      	add	r2, r4
90022336:	4420      	add	r0, r4
90022338:	b29b      	uxth	r3, r3
9002233a:	78b7      	ldrb	r7, [r6, #2]
9002233c:	b289      	uxth	r1, r1
9002233e:	f89c a002 	ldrb.w	sl, [ip, #2]
90022342:	f89c c001 	ldrb.w	ip, [ip, #1]
90022346:	fb03 f901 	mul.w	r9, r3, r1
9002234a:	011b      	lsls	r3, r3, #4
9002234c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90022350:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
90022354:	eba3 0309 	sub.w	r3, r3, r9
90022358:	b289      	uxth	r1, r1
9002235a:	b29b      	uxth	r3, r3
9002235c:	ebae 0e01 	sub.w	lr, lr, r1
90022360:	435f      	muls	r7, r3
90022362:	fa1f fe8e 	uxth.w	lr, lr
90022366:	fb0e 770a 	mla	r7, lr, sl, r7
9002236a:	f892 a002 	ldrb.w	sl, [r2, #2]
9002236e:	fb01 770a 	mla	r7, r1, sl, r7
90022372:	f890 a002 	ldrb.w	sl, [r0, #2]
90022376:	fb09 7a0a 	mla	sl, r9, sl, r7
9002237a:	f814 7008 	ldrb.w	r7, [r4, r8]
9002237e:	f896 8000 	ldrb.w	r8, [r6]
90022382:	7876      	ldrb	r6, [r6, #1]
90022384:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
90022388:	fb03 f808 	mul.w	r8, r3, r8
9002238c:	4373      	muls	r3, r6
9002238e:	fb0e 8807 	mla	r8, lr, r7, r8
90022392:	7817      	ldrb	r7, [r2, #0]
90022394:	fb0e 330c 	mla	r3, lr, ip, r3
90022398:	fb01 8807 	mla	r8, r1, r7, r8
9002239c:	7807      	ldrb	r7, [r0, #0]
9002239e:	fb09 8707 	mla	r7, r9, r7, r8
900223a2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
900223a6:	ea4a 0707 	orr.w	r7, sl, r7
900223aa:	f892 a001 	ldrb.w	sl, [r2, #1]
900223ae:	fb01 310a 	mla	r1, r1, sl, r3
900223b2:	f890 a001 	ldrb.w	sl, [r0, #1]
900223b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
900223b8:	fb09 1a0a 	mla	sl, r9, sl, r1
900223bc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900223c0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900223c4:	ea47 070a 	orr.w	r7, r7, sl
900223c8:	801f      	strh	r7, [r3, #0]
900223ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
900223cc:	3302      	adds	r3, #2
900223ce:	9309      	str	r3, [sp, #36]	; 0x24
900223d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
900223d2:	449b      	add	fp, r3
900223d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
900223d6:	441d      	add	r5, r3
900223d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
900223da:	3b01      	subs	r3, #1
900223dc:	930b      	str	r3, [sp, #44]	; 0x2c
900223de:	e770      	b.n	900222c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
900223e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
900223e2:	449b      	add	fp, r3
900223e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
900223e6:	441d      	add	r5, r3
900223e8:	9b06      	ldr	r3, [sp, #24]
900223ea:	3b01      	subs	r3, #1
900223ec:	9306      	str	r3, [sp, #24]
900223ee:	9b07      	ldr	r3, [sp, #28]
900223f0:	3302      	adds	r3, #2
900223f2:	9307      	str	r3, [sp, #28]
900223f4:	e745      	b.n	90022282 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
900223f6:	d023      	beq.n	90022440 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
900223f8:	9b06      	ldr	r3, [sp, #24]
900223fa:	9823      	ldr	r0, [sp, #140]	; 0x8c
900223fc:	3b01      	subs	r3, #1
900223fe:	fb00 b003 	mla	r0, r0, r3, fp
90022402:	1400      	asrs	r0, r0, #16
90022404:	f53f af59 	bmi.w	900222ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
90022408:	3901      	subs	r1, #1
9002240a:	4288      	cmp	r0, r1
9002240c:	f6bf af55 	bge.w	900222ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
90022410:	9924      	ldr	r1, [sp, #144]	; 0x90
90022412:	fb01 5303 	mla	r3, r1, r3, r5
90022416:	141b      	asrs	r3, r3, #16
90022418:	f53f af4f 	bmi.w	900222ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
9002241c:	3a01      	subs	r2, #1
9002241e:	4293      	cmp	r3, r2
90022420:	f6bf af4b 	bge.w	900222ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
90022424:	9b06      	ldr	r3, [sp, #24]
90022426:	9309      	str	r3, [sp, #36]	; 0x24
90022428:	9b07      	ldr	r3, [sp, #28]
9002242a:	930b      	str	r3, [sp, #44]	; 0x2c
9002242c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002242e:	2b00      	cmp	r3, #0
90022430:	dc70      	bgt.n	90022514 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
90022432:	9b06      	ldr	r3, [sp, #24]
90022434:	9a07      	ldr	r2, [sp, #28]
90022436:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9002243a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9002243e:	9307      	str	r3, [sp, #28]
90022440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90022442:	2b00      	cmp	r3, #0
90022444:	f340 80eb 	ble.w	9002261e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
90022448:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9002244c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002244e:	ee3a aa2b 	vadd.f32	s20, s20, s23
90022452:	ee79 9a8b 	vadd.f32	s19, s19, s22
90022456:	eef0 6a48 	vmov.f32	s13, s16
9002245a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
9002245e:	ee39 9a2a 	vadd.f32	s18, s18, s21
90022462:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022466:	ee16 ba90 	vmov	fp, s13
9002246a:	eef0 6a68 	vmov.f32	s13, s17
9002246e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022472:	ee16 5a90 	vmov	r5, s13
90022476:	ee29 7aa7 	vmul.f32	s14, s19, s15
9002247a:	ee69 7a27 	vmul.f32	s15, s18, s15
9002247e:	ee37 8a48 	vsub.f32	s16, s14, s16
90022482:	ee77 8ae8 	vsub.f32	s17, s15, s17
90022486:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
9002248a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
9002248e:	ee18 2a10 	vmov	r2, s16
90022492:	eeb0 8a47 	vmov.f32	s16, s14
90022496:	fb92 f3f3 	sdiv	r3, r2, r3
9002249a:	ee18 2a90 	vmov	r2, s17
9002249e:	9323      	str	r3, [sp, #140]	; 0x8c
900224a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
900224a2:	eef0 8a67 	vmov.f32	s17, s15
900224a6:	fb92 f3f3 	sdiv	r3, r2, r3
900224aa:	9324      	str	r3, [sp, #144]	; 0x90
900224ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900224ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
900224b0:	3b01      	subs	r3, #1
900224b2:	930a      	str	r3, [sp, #40]	; 0x28
900224b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
900224b6:	bf08      	it	eq
900224b8:	4613      	moveq	r3, r2
900224ba:	9306      	str	r3, [sp, #24]
900224bc:	e6d3      	b.n	90022266 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
900224be:	b149      	cbz	r1, 900224d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
900224c0:	5cba      	ldrb	r2, [r7, r2]
900224c2:	4660      	mov	r0, ip
900224c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
900224c8:	4422      	add	r2, r4
900224ca:	4666      	mov	r6, ip
900224cc:	e734      	b.n	90022338 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
900224ce:	4660      	mov	r0, ip
900224d0:	4662      	mov	r2, ip
900224d2:	e731      	b.n	90022338 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
900224d4:	4660      	mov	r0, ip
900224d6:	4662      	mov	r2, ip
900224d8:	e7f7      	b.n	900224ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
900224da:	f110 0c01 	adds.w	ip, r0, #1
900224de:	f53f af74 	bmi.w	900223ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
900224e2:	4562      	cmp	r2, ip
900224e4:	f6ff af71 	blt.w	900223ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
900224e8:	f116 0c01 	adds.w	ip, r6, #1
900224ec:	f53f af6d 	bmi.w	900223ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
900224f0:	4567      	cmp	r7, ip
900224f2:	f6ff af6a 	blt.w	900223ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
900224f6:	b23f      	sxth	r7, r7
900224f8:	b212      	sxth	r2, r2
900224fa:	9701      	str	r7, [sp, #4]
900224fc:	9200      	str	r2, [sp, #0]
900224fe:	e9cd 3104 	strd	r3, r1, [sp, #16]
90022502:	e9cd 0602 	strd	r0, r6, [sp, #8]
90022506:	4623      	mov	r3, r4
90022508:	980d      	ldr	r0, [sp, #52]	; 0x34
9002250a:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9002250e:	f7ff fdc5 	bl	9002209c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
90022512:	e75a      	b.n	900223ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
90022514:	9a28      	ldr	r2, [sp, #160]	; 0xa0
90022516:	ea4f 462b 	mov.w	r6, fp, asr #16
9002251a:	1428      	asrs	r0, r5, #16
9002251c:	f3cb 3303 	ubfx	r3, fp, #12, #4
90022520:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
90022524:	f3c5 3103 	ubfx	r1, r5, #12, #4
90022528:	fb02 6000 	mla	r0, r2, r0, r6
9002252c:	9e08      	ldr	r6, [sp, #32]
9002252e:	f816 8000 	ldrb.w	r8, [r6, r0]
90022532:	1837      	adds	r7, r6, r0
90022534:	eb08 0848 	add.w	r8, r8, r8, lsl #1
90022538:	eb04 0c08 	add.w	ip, r4, r8
9002253c:	2b00      	cmp	r3, #0
9002253e:	d060      	beq.n	90022602 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
90022540:	787e      	ldrb	r6, [r7, #1]
90022542:	eb06 0646 	add.w	r6, r6, r6, lsl #1
90022546:	4426      	add	r6, r4
90022548:	2900      	cmp	r1, #0
9002254a:	d062      	beq.n	90022612 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
9002254c:	18b8      	adds	r0, r7, r2
9002254e:	5cba      	ldrb	r2, [r7, r2]
90022550:	7840      	ldrb	r0, [r0, #1]
90022552:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90022556:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9002255a:	4422      	add	r2, r4
9002255c:	4420      	add	r0, r4
9002255e:	b29b      	uxth	r3, r3
90022560:	78b7      	ldrb	r7, [r6, #2]
90022562:	b289      	uxth	r1, r1
90022564:	f89c a002 	ldrb.w	sl, [ip, #2]
90022568:	f89c c001 	ldrb.w	ip, [ip, #1]
9002256c:	fb03 f901 	mul.w	r9, r3, r1
90022570:	011b      	lsls	r3, r3, #4
90022572:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90022576:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
9002257a:	eba3 0309 	sub.w	r3, r3, r9
9002257e:	b289      	uxth	r1, r1
90022580:	b29b      	uxth	r3, r3
90022582:	ebae 0e01 	sub.w	lr, lr, r1
90022586:	435f      	muls	r7, r3
90022588:	fa1f fe8e 	uxth.w	lr, lr
9002258c:	fb0e 770a 	mla	r7, lr, sl, r7
90022590:	f892 a002 	ldrb.w	sl, [r2, #2]
90022594:	fb01 770a 	mla	r7, r1, sl, r7
90022598:	f890 a002 	ldrb.w	sl, [r0, #2]
9002259c:	fb09 7a0a 	mla	sl, r9, sl, r7
900225a0:	f814 7008 	ldrb.w	r7, [r4, r8]
900225a4:	f896 8000 	ldrb.w	r8, [r6]
900225a8:	7876      	ldrb	r6, [r6, #1]
900225aa:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
900225ae:	fb03 f808 	mul.w	r8, r3, r8
900225b2:	4373      	muls	r3, r6
900225b4:	7856      	ldrb	r6, [r2, #1]
900225b6:	fb0e 8807 	mla	r8, lr, r7, r8
900225ba:	7817      	ldrb	r7, [r2, #0]
900225bc:	fb0e 330c 	mla	r3, lr, ip, r3
900225c0:	fb01 8807 	mla	r8, r1, r7, r8
900225c4:	7807      	ldrb	r7, [r0, #0]
900225c6:	fb01 3306 	mla	r3, r1, r6, r3
900225ca:	fb09 8707 	mla	r7, r9, r7, r8
900225ce:	f3c7 27c4 	ubfx	r7, r7, #11, #5
900225d2:	ea4a 0707 	orr.w	r7, sl, r7
900225d6:	f890 a001 	ldrb.w	sl, [r0, #1]
900225da:	fb09 3a0a 	mla	sl, r9, sl, r3
900225de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
900225e0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900225e4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900225e8:	ea47 070a 	orr.w	r7, r7, sl
900225ec:	f823 7b02 	strh.w	r7, [r3], #2
900225f0:	930b      	str	r3, [sp, #44]	; 0x2c
900225f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
900225f4:	449b      	add	fp, r3
900225f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
900225f8:	441d      	add	r5, r3
900225fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
900225fc:	3b01      	subs	r3, #1
900225fe:	9309      	str	r3, [sp, #36]	; 0x24
90022600:	e714      	b.n	9002242c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
90022602:	b149      	cbz	r1, 90022618 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
90022604:	5cba      	ldrb	r2, [r7, r2]
90022606:	4660      	mov	r0, ip
90022608:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9002260c:	4422      	add	r2, r4
9002260e:	4666      	mov	r6, ip
90022610:	e7a5      	b.n	9002255e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
90022612:	4660      	mov	r0, ip
90022614:	4662      	mov	r2, ip
90022616:	e7a2      	b.n	9002255e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
90022618:	4660      	mov	r0, ip
9002261a:	4662      	mov	r2, ip
9002261c:	e7f7      	b.n	9002260e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
9002261e:	b00f      	add	sp, #60	; 0x3c
90022620:	ecbd 8b08 	vpop	{d8-d11}
90022624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90022628 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
90022628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002262c:	880e      	ldrh	r6, [r1, #0]
9002262e:	b085      	sub	sp, #20
90022630:	4691      	mov	r9, r2
90022632:	ea4f 2e26 	mov.w	lr, r6, asr #8
90022636:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
9002263a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
9002263e:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
90022642:	ea4f 0ee6 	mov.w	lr, r6, asr #3
90022646:	00f6      	lsls	r6, r6, #3
90022648:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
9002264c:	9200      	str	r2, [sp, #0]
9002264e:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
90022652:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
90022656:	9201      	str	r2, [sp, #4]
90022658:	b2f2      	uxtb	r2, r6
9002265a:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
9002265e:	9202      	str	r2, [sp, #8]
90022660:	fb04 560c 	mla	r6, r4, ip, r5
90022664:	2c00      	cmp	r4, #0
90022666:	eb09 0e06 	add.w	lr, r9, r6
9002266a:	db3e      	blt.n	900226ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
9002266c:	45a0      	cmp	r8, r4
9002266e:	dd3c      	ble.n	900226ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
90022670:	2d00      	cmp	r5, #0
90022672:	db38      	blt.n	900226e6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
90022674:	45ac      	cmp	ip, r5
90022676:	dd36      	ble.n	900226e6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
90022678:	f819 2006 	ldrb.w	r2, [r9, r6]
9002267c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
90022680:	1c6e      	adds	r6, r5, #1
90022682:	d435      	bmi.n	900226f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
90022684:	45b4      	cmp	ip, r6
90022686:	dd33      	ble.n	900226f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
90022688:	b3a0      	cbz	r0, 900226f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
9002268a:	f89e 6001 	ldrb.w	r6, [lr, #1]
9002268e:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
90022692:	3401      	adds	r4, #1
90022694:	d432      	bmi.n	900226fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
90022696:	45a0      	cmp	r8, r4
90022698:	dd30      	ble.n	900226fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
9002269a:	b397      	cbz	r7, 90022702 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
9002269c:	2d00      	cmp	r5, #0
9002269e:	db2b      	blt.n	900226f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
900226a0:	45ac      	cmp	ip, r5
900226a2:	dd29      	ble.n	900226f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
900226a4:	f81e 400c 	ldrb.w	r4, [lr, ip]
900226a8:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
900226ac:	3501      	adds	r5, #1
900226ae:	d42b      	bmi.n	90022708 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
900226b0:	45ac      	cmp	ip, r5
900226b2:	dd29      	ble.n	90022708 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
900226b4:	b350      	cbz	r0, 9002270c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe4>
900226b6:	44f4      	add	ip, lr
900226b8:	f89c 5001 	ldrb.w	r5, [ip, #1]
900226bc:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
900226c0:	280f      	cmp	r0, #15
900226c2:	ea4f 6b12 	mov.w	fp, r2, lsr #24
900226c6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
900226ca:	ea4f 6914 	mov.w	r9, r4, lsr #24
900226ce:	ea4f 6813 	mov.w	r8, r3, lsr #24
900226d2:	d801      	bhi.n	900226d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb0>
900226d4:	2f0f      	cmp	r7, #15
900226d6:	d91b      	bls.n	90022710 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe8>
900226d8:	4b85      	ldr	r3, [pc, #532]	; (900228f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
900226da:	f240 210d 	movw	r1, #525	; 0x20d
900226de:	4a85      	ldr	r2, [pc, #532]	; (900228f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
900226e0:	4885      	ldr	r0, [pc, #532]	; (900228f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2d0>)
900226e2:	f006 faa7 	bl	90028c34 <__assert_func>
900226e6:	2200      	movs	r2, #0
900226e8:	e7ca      	b.n	90022680 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x58>
900226ea:	2600      	movs	r6, #0
900226ec:	4632      	mov	r2, r6
900226ee:	e7d0      	b.n	90022692 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
900226f0:	2600      	movs	r6, #0
900226f2:	e7ce      	b.n	90022692 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
900226f4:	4606      	mov	r6, r0
900226f6:	e7cc      	b.n	90022692 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
900226f8:	2400      	movs	r4, #0
900226fa:	e7d7      	b.n	900226ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x84>
900226fc:	2300      	movs	r3, #0
900226fe:	461c      	mov	r4, r3
90022700:	e7de      	b.n	900226c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
90022702:	463b      	mov	r3, r7
90022704:	463c      	mov	r4, r7
90022706:	e7db      	b.n	900226c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
90022708:	2300      	movs	r3, #0
9002270a:	e7d9      	b.n	900226c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
9002270c:	4603      	mov	r3, r0
9002270e:	e7d7      	b.n	900226c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
90022710:	b280      	uxth	r0, r0
90022712:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
90022716:	b2bf      	uxth	r7, r7
90022718:	fb00 fe07 	mul.w	lr, r0, r7
9002271c:	ea4f 1000 	mov.w	r0, r0, lsl #4
90022720:	ebce 1707 	rsb	r7, lr, r7, lsl #4
90022724:	eba0 0c0e 	sub.w	ip, r0, lr
90022728:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
9002272c:	b2bf      	uxth	r7, r7
9002272e:	fa1f fc8c 	uxth.w	ip, ip
90022732:	eba5 0507 	sub.w	r5, r5, r7
90022736:	fb0c f00a 	mul.w	r0, ip, sl
9002273a:	b2ad      	uxth	r5, r5
9002273c:	fb05 000b 	mla	r0, r5, fp, r0
90022740:	fb07 0009 	mla	r0, r7, r9, r0
90022744:	fb0e 0008 	mla	r0, lr, r8, r0
90022748:	f3c0 2007 	ubfx	r0, r0, #8, #8
9002274c:	9003      	str	r0, [sp, #12]
9002274e:	d018      	beq.n	90022782 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x15a>
90022750:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
90022754:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90022758:	fb0b f000 	mul.w	r0, fp, r0
9002275c:	fb0b fb02 	mul.w	fp, fp, r2
90022760:	0a02      	lsrs	r2, r0, #8
90022762:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
90022766:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9002276a:	4402      	add	r2, r0
9002276c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
90022770:	eb00 201b 	add.w	r0, r0, fp, lsr #8
90022774:	0a12      	lsrs	r2, r2, #8
90022776:	0a00      	lsrs	r0, r0, #8
90022778:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9002277c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
90022780:	4302      	orrs	r2, r0
90022782:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
90022786:	d019      	beq.n	900227bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x194>
90022788:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
9002278c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
90022790:	fb0a fb0b 	mul.w	fp, sl, fp
90022794:	fb0a fa06 	mul.w	sl, sl, r6
90022798:	ea4f 261b 	mov.w	r6, fp, lsr #8
9002279c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
900227a0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
900227a4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
900227a8:	eb00 201a 	add.w	r0, r0, sl, lsr #8
900227ac:	445e      	add	r6, fp
900227ae:	0a00      	lsrs	r0, r0, #8
900227b0:	0a36      	lsrs	r6, r6, #8
900227b2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
900227b6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
900227ba:	4306      	orrs	r6, r0
900227bc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
900227c0:	d019      	beq.n	900227f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1ce>
900227c2:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
900227c6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
900227ca:	fb09 fa0a 	mul.w	sl, r9, sl
900227ce:	fb09 f904 	mul.w	r9, r9, r4
900227d2:	ea4f 241a 	mov.w	r4, sl, lsr #8
900227d6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
900227da:	f509 7080 	add.w	r0, r9, #256	; 0x100
900227de:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
900227e2:	eb00 2019 	add.w	r0, r0, r9, lsr #8
900227e6:	4454      	add	r4, sl
900227e8:	0a00      	lsrs	r0, r0, #8
900227ea:	0a24      	lsrs	r4, r4, #8
900227ec:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
900227f0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
900227f4:	4304      	orrs	r4, r0
900227f6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
900227fa:	d019      	beq.n	90022830 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x208>
900227fc:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
90022800:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90022804:	fb08 f909 	mul.w	r9, r8, r9
90022808:	fb08 f803 	mul.w	r8, r8, r3
9002280c:	ea4f 2319 	mov.w	r3, r9, lsr #8
90022810:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
90022814:	f508 7080 	add.w	r0, r8, #256	; 0x100
90022818:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9002281c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
90022820:	444b      	add	r3, r9
90022822:	0a00      	lsrs	r0, r0, #8
90022824:	0a1b      	lsrs	r3, r3, #8
90022826:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
9002282a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9002282e:	4303      	orrs	r3, r0
90022830:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
90022834:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
90022838:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
9002283c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90022840:	fb0c f808 	mul.w	r8, ip, r8
90022844:	fb0c f606 	mul.w	r6, ip, r6
90022848:	fb05 8800 	mla	r8, r5, r0, r8
9002284c:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
90022850:	fb05 6202 	mla	r2, r5, r2, r6
90022854:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
90022858:	fb07 8800 	mla	r8, r7, r0, r8
9002285c:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
90022860:	b2ad      	uxth	r5, r5
90022862:	fb0e 8000 	mla	r0, lr, r0, r8
90022866:	0a00      	lsrs	r0, r0, #8
90022868:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
9002286c:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
90022870:	9c00      	ldr	r4, [sp, #0]
90022872:	fb07 2700 	mla	r7, r7, r0, r2
90022876:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
9002287a:	9b03      	ldr	r3, [sp, #12]
9002287c:	fb0e 7000 	mla	r0, lr, r0, r7
90022880:	436b      	muls	r3, r5
90022882:	0a00      	lsrs	r0, r0, #8
90022884:	1c5a      	adds	r2, r3, #1
90022886:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
9002288a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
9002288e:	ea48 0000 	orr.w	r0, r8, r0
90022892:	ea6f 2212 	mvn.w	r2, r2, lsr #8
90022896:	0c03      	lsrs	r3, r0, #16
90022898:	b2d2      	uxtb	r2, r2
9002289a:	fb14 f602 	smulbb	r6, r4, r2
9002289e:	f3c0 2407 	ubfx	r4, r0, #8, #8
900228a2:	b2c0      	uxtb	r0, r0
900228a4:	fb03 6305 	mla	r3, r3, r5, r6
900228a8:	b29e      	uxth	r6, r3
900228aa:	9b01      	ldr	r3, [sp, #4]
900228ac:	fb13 f302 	smulbb	r3, r3, r2
900228b0:	fb04 3405 	mla	r4, r4, r5, r3
900228b4:	9b02      	ldr	r3, [sp, #8]
900228b6:	fb13 f202 	smulbb	r2, r3, r2
900228ba:	b2a4      	uxth	r4, r4
900228bc:	1c73      	adds	r3, r6, #1
900228be:	fb00 2005 	mla	r0, r0, r5, r2
900228c2:	eb03 2316 	add.w	r3, r3, r6, lsr #8
900228c6:	b280      	uxth	r0, r0
900228c8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
900228cc:	1c42      	adds	r2, r0, #1
900228ce:	eb02 2010 	add.w	r0, r2, r0, lsr #8
900228d2:	1c62      	adds	r2, r4, #1
900228d4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
900228d8:	f3c0 20c4 	ubfx	r0, r0, #11, #5
900228dc:	0952      	lsrs	r2, r2, #5
900228de:	4303      	orrs	r3, r0
900228e0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900228e4:	4313      	orrs	r3, r2
900228e6:	800b      	strh	r3, [r1, #0]
900228e8:	b005      	add	sp, #20
900228ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900228ee:	bf00      	nop
900228f0:	900306ff 	.word	0x900306ff
900228f4:	90030cbd 	.word	0x90030cbd
900228f8:	900307e8 	.word	0x900307e8

900228fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900228fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90022900:	ed2d 8b08 	vpush	{d8-d11}
90022904:	b09f      	sub	sp, #124	; 0x7c
90022906:	eeb0 aa40 	vmov.f32	s20, s0
9002290a:	eef0 9a60 	vmov.f32	s19, s1
9002290e:	921b      	str	r2, [sp, #108]	; 0x6c
90022910:	eeb0 9a41 	vmov.f32	s18, s2
90022914:	9a35      	ldr	r2, [sp, #212]	; 0xd4
90022916:	eeb0 8a62 	vmov.f32	s16, s5
9002291a:	9309      	str	r3, [sp, #36]	; 0x24
9002291c:	eef0 8a43 	vmov.f32	s17, s6
90022920:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
90022924:	eef0 ba44 	vmov.f32	s23, s8
90022928:	901d      	str	r0, [sp, #116]	; 0x74
9002292a:	eeb0 ba64 	vmov.f32	s22, s9
9002292e:	931c      	str	r3, [sp, #112]	; 0x70
90022930:	eef0 aa45 	vmov.f32	s21, s10
90022934:	6850      	ldr	r0, [r2, #4]
90022936:	9119      	str	r1, [sp, #100]	; 0x64
90022938:	6812      	ldr	r2, [r2, #0]
9002293a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
9002293c:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
90022940:	fb00 1303 	mla	r3, r0, r3, r1
90022944:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90022948:	930c      	str	r3, [sp, #48]	; 0x30
9002294a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
9002294c:	681b      	ldr	r3, [r3, #0]
9002294e:	9312      	str	r3, [sp, #72]	; 0x48
90022950:	9b38      	ldr	r3, [sp, #224]	; 0xe0
90022952:	685e      	ldr	r6, [r3, #4]
90022954:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
90022958:	3604      	adds	r6, #4
9002295a:	930d      	str	r3, [sp, #52]	; 0x34
9002295c:	9b19      	ldr	r3, [sp, #100]	; 0x64
9002295e:	2b00      	cmp	r3, #0
90022960:	dc03      	bgt.n	9002296a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90022962:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
90022964:	2b00      	cmp	r3, #0
90022966:	f340 838d 	ble.w	90023084 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x788>
9002296a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
9002296c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90022970:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90022974:	1e48      	subs	r0, r1, #1
90022976:	1e57      	subs	r7, r2, #1
90022978:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002297a:	2b00      	cmp	r3, #0
9002297c:	f340 819a 	ble.w	90022cb4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
90022980:	9c31      	ldr	r4, [sp, #196]	; 0xc4
90022982:	142b      	asrs	r3, r5, #16
90022984:	ea5f 4c24 	movs.w	ip, r4, asr #16
90022988:	d406      	bmi.n	90022998 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9002298a:	4584      	cmp	ip, r0
9002298c:	da04      	bge.n	90022998 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9002298e:	2b00      	cmp	r3, #0
90022990:	db02      	blt.n	90022998 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
90022992:	42bb      	cmp	r3, r7
90022994:	f2c0 818f 	blt.w	90022cb6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
90022998:	f11c 0c01 	adds.w	ip, ip, #1
9002299c:	f100 817d 	bmi.w	90022c9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
900229a0:	4561      	cmp	r1, ip
900229a2:	f2c0 817a 	blt.w	90022c9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
900229a6:	3301      	adds	r3, #1
900229a8:	f100 8177 	bmi.w	90022c9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
900229ac:	429a      	cmp	r2, r3
900229ae:	f2c0 8174 	blt.w	90022c9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
900229b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
900229b4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
900229b6:	931a      	str	r3, [sp, #104]	; 0x68
900229b8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
900229ba:	2b00      	cmp	r3, #0
900229bc:	f340 8199 	ble.w	90022cf2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
900229c0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
900229c2:	ea4f 4c25 	mov.w	ip, r5, asr #16
900229c6:	f3c5 3103 	ubfx	r1, r5, #12, #4
900229ca:	f3c3 3203 	ubfx	r2, r3, #12, #4
900229ce:	9b38      	ldr	r3, [sp, #224]	; 0xe0
900229d0:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
900229d4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
900229d6:	141b      	asrs	r3, r3, #16
900229d8:	f100 81dc 	bmi.w	90022d94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
900229dc:	f100 38ff 	add.w	r8, r0, #4294967295
900229e0:	4543      	cmp	r3, r8
900229e2:	f280 81d7 	bge.w	90022d94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
900229e6:	f1bc 0f00 	cmp.w	ip, #0
900229ea:	f2c0 81d3 	blt.w	90022d94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
900229ee:	f10e 38ff 	add.w	r8, lr, #4294967295
900229f2:	45c4      	cmp	ip, r8
900229f4:	f280 81ce 	bge.w	90022d94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
900229f8:	b200      	sxth	r0, r0
900229fa:	9c12      	ldr	r4, [sp, #72]	; 0x48
900229fc:	fb0c 3300 	mla	r3, ip, r0, r3
90022a00:	eb04 0803 	add.w	r8, r4, r3
90022a04:	5ce3      	ldrb	r3, [r4, r3]
90022a06:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
90022a0a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
90022a0e:	2a00      	cmp	r2, #0
90022a10:	f000 81b5 	beq.w	90022d7e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
90022a14:	f898 c001 	ldrb.w	ip, [r8, #1]
90022a18:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
90022a1c:	940e      	str	r4, [sp, #56]	; 0x38
90022a1e:	0e24      	lsrs	r4, r4, #24
90022a20:	9415      	str	r4, [sp, #84]	; 0x54
90022a22:	b179      	cbz	r1, 90022a44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90022a24:	eb08 0c00 	add.w	ip, r8, r0
90022a28:	f818 0000 	ldrb.w	r0, [r8, r0]
90022a2c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
90022a30:	900a      	str	r0, [sp, #40]	; 0x28
90022a32:	0e00      	lsrs	r0, r0, #24
90022a34:	9013      	str	r0, [sp, #76]	; 0x4c
90022a36:	f89c 0001 	ldrb.w	r0, [ip, #1]
90022a3a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
90022a3e:	900f      	str	r0, [sp, #60]	; 0x3c
90022a40:	0e00      	lsrs	r0, r0, #24
90022a42:	9016      	str	r0, [sp, #88]	; 0x58
90022a44:	b292      	uxth	r2, r2
90022a46:	9815      	ldr	r0, [sp, #84]	; 0x54
90022a48:	b289      	uxth	r1, r1
90022a4a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90022a4c:	fb02 f901 	mul.w	r9, r2, r1
90022a50:	0112      	lsls	r2, r2, #4
90022a52:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90022a56:	eba2 0809 	sub.w	r8, r2, r9
90022a5a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
90022a5e:	b289      	uxth	r1, r1
90022a60:	fa1f f888 	uxth.w	r8, r8
90022a64:	1a52      	subs	r2, r2, r1
90022a66:	fb08 f000 	mul.w	r0, r8, r0
90022a6a:	b292      	uxth	r2, r2
90022a6c:	fb02 000e 	mla	r0, r2, lr, r0
90022a70:	fb01 0004 	mla	r0, r1, r4, r0
90022a74:	9c16      	ldr	r4, [sp, #88]	; 0x58
90022a76:	fb09 0004 	mla	r0, r9, r4, r0
90022a7a:	f3c0 2007 	ubfx	r0, r0, #8, #8
90022a7e:	2800      	cmp	r0, #0
90022a80:	f000 8100 	beq.w	90022c84 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
90022a84:	f1be 0fff 	cmp.w	lr, #255	; 0xff
90022a88:	d01b      	beq.n	90022ac2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
90022a8a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90022a8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90022a92:	fb0e fa0a 	mul.w	sl, lr, sl
90022a96:	fb0e fe03 	mul.w	lr, lr, r3
90022a9a:	ea4f 231a 	mov.w	r3, sl, lsr #8
90022a9e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90022aa2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
90022aa6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90022aaa:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90022aae:	4453      	add	r3, sl
90022ab0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022ab4:	0a1b      	lsrs	r3, r3, #8
90022ab6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90022aba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90022abe:	ea43 030c 	orr.w	r3, r3, ip
90022ac2:	9c15      	ldr	r4, [sp, #84]	; 0x54
90022ac4:	2cff      	cmp	r4, #255	; 0xff
90022ac6:	d021      	beq.n	90022b0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
90022ac8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90022aca:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
90022ace:	9c15      	ldr	r4, [sp, #84]	; 0x54
90022ad0:	fb04 fb0b 	mul.w	fp, r4, fp
90022ad4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90022ad6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022ada:	9c15      	ldr	r4, [sp, #84]	; 0x54
90022adc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90022ae0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90022ae4:	fb04 fa0a 	mul.w	sl, r4, sl
90022ae8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90022aec:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90022af0:	44de      	add	lr, fp
90022af2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90022af6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90022afa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022afe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90022b02:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022b06:	ea4e 040a 	orr.w	r4, lr, sl
90022b0a:	940e      	str	r4, [sp, #56]	; 0x38
90022b0c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90022b0e:	2cff      	cmp	r4, #255	; 0xff
90022b10:	d021      	beq.n	90022b56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
90022b12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90022b14:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
90022b18:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90022b1a:	fb04 fb0b 	mul.w	fp, r4, fp
90022b1e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90022b20:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022b24:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90022b26:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90022b2a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90022b2e:	fb04 fa0a 	mul.w	sl, r4, sl
90022b32:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90022b36:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90022b3a:	44de      	add	lr, fp
90022b3c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90022b40:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90022b44:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022b48:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90022b4c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022b50:	ea4e 040a 	orr.w	r4, lr, sl
90022b54:	940a      	str	r4, [sp, #40]	; 0x28
90022b56:	9c16      	ldr	r4, [sp, #88]	; 0x58
90022b58:	2cff      	cmp	r4, #255	; 0xff
90022b5a:	d021      	beq.n	90022ba0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
90022b5c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
90022b5e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
90022b62:	9c16      	ldr	r4, [sp, #88]	; 0x58
90022b64:	fb04 fb0b 	mul.w	fp, r4, fp
90022b68:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
90022b6a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022b6e:	9c16      	ldr	r4, [sp, #88]	; 0x58
90022b70:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90022b74:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90022b78:	fb04 fa0a 	mul.w	sl, r4, sl
90022b7c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90022b80:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90022b84:	44de      	add	lr, fp
90022b86:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90022b8a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90022b8e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022b92:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90022b96:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022b9a:	ea4e 040a 	orr.w	r4, lr, sl
90022b9e:	940f      	str	r4, [sp, #60]	; 0x3c
90022ba0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90022ba2:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
90022ba6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90022baa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90022bae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90022bb0:	fb08 fc0c 	mul.w	ip, r8, ip
90022bb4:	fb02 cc0e 	mla	ip, r2, lr, ip
90022bb8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
90022bbc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
90022bbe:	fb01 cc0e 	mla	ip, r1, lr, ip
90022bc2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
90022bc6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90022bc8:	fb09 cc0e 	mla	ip, r9, lr, ip
90022bcc:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
90022bd0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90022bd2:	fb08 f80e 	mul.w	r8, r8, lr
90022bd6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022bda:	f8b7 e000 	ldrh.w	lr, [r7]
90022bde:	fb02 8303 	mla	r3, r2, r3, r8
90022be2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90022be4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022be8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
90022bec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90022bee:	fb01 330a 	mla	r3, r1, sl, r3
90022bf2:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
90022bf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90022bf8:	fb09 3901 	mla	r9, r9, r1, r3
90022bfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90022bfe:	ea4f 2919 	mov.w	r9, r9, lsr #8
90022c02:	4343      	muls	r3, r0
90022c04:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
90022c08:	1c58      	adds	r0, r3, #1
90022c0a:	ea4c 0c09 	orr.w	ip, ip, r9
90022c0e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
90022c12:	ea4f 232e 	mov.w	r3, lr, asr #8
90022c16:	ea4f 411c 	mov.w	r1, ip, lsr #16
90022c1a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
90022c1e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
90022c22:	fb11 f102 	smulbb	r1, r1, r2
90022c26:	b2c0      	uxtb	r0, r0
90022c28:	ea4f 02ee 	mov.w	r2, lr, asr #3
90022c2c:	fb03 1300 	mla	r3, r3, r0, r1
90022c30:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90022c34:	b299      	uxth	r1, r3
90022c36:	f3cc 2307 	ubfx	r3, ip, #8, #8
90022c3a:	fa5f fc8c 	uxtb.w	ip, ip
90022c3e:	fb13 f304 	smulbb	r3, r3, r4
90022c42:	fb1c fc04 	smulbb	ip, ip, r4
90022c46:	fb02 3200 	mla	r2, r2, r0, r3
90022c4a:	ea4f 03ce 	mov.w	r3, lr, lsl #3
90022c4e:	b2db      	uxtb	r3, r3
90022c50:	b292      	uxth	r2, r2
90022c52:	fb03 cc00 	mla	ip, r3, r0, ip
90022c56:	1c4b      	adds	r3, r1, #1
90022c58:	fa1f fc8c 	uxth.w	ip, ip
90022c5c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
90022c60:	1c51      	adds	r1, r2, #1
90022c62:	f10c 0001 	add.w	r0, ip, #1
90022c66:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90022c6a:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
90022c6e:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
90022c72:	0952      	lsrs	r2, r2, #5
90022c74:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
90022c78:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90022c7c:	ea43 030c 	orr.w	r3, r3, ip
90022c80:	4313      	orrs	r3, r2
90022c82:	803b      	strh	r3, [r7, #0]
90022c84:	9b33      	ldr	r3, [sp, #204]	; 0xcc
90022c86:	3702      	adds	r7, #2
90022c88:	9a31      	ldr	r2, [sp, #196]	; 0xc4
90022c8a:	441a      	add	r2, r3
90022c8c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
90022c8e:	441d      	add	r5, r3
90022c90:	9b1a      	ldr	r3, [sp, #104]	; 0x68
90022c92:	9231      	str	r2, [sp, #196]	; 0xc4
90022c94:	3b01      	subs	r3, #1
90022c96:	931a      	str	r3, [sp, #104]	; 0x68
90022c98:	e68e      	b.n	900229b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
90022c9a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
90022c9c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
90022c9e:	441c      	add	r4, r3
90022ca0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
90022ca2:	441d      	add	r5, r3
90022ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
90022ca6:	9431      	str	r4, [sp, #196]	; 0xc4
90022ca8:	3b01      	subs	r3, #1
90022caa:	9309      	str	r3, [sp, #36]	; 0x24
90022cac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90022cae:	3302      	adds	r3, #2
90022cb0:	930c      	str	r3, [sp, #48]	; 0x30
90022cb2:	e661      	b.n	90022978 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90022cb4:	d024      	beq.n	90022d00 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
90022cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
90022cb8:	9833      	ldr	r0, [sp, #204]	; 0xcc
90022cba:	3b01      	subs	r3, #1
90022cbc:	9c31      	ldr	r4, [sp, #196]	; 0xc4
90022cbe:	fb00 4003 	mla	r0, r0, r3, r4
90022cc2:	1400      	asrs	r0, r0, #16
90022cc4:	f53f ae75 	bmi.w	900229b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
90022cc8:	3901      	subs	r1, #1
90022cca:	4288      	cmp	r0, r1
90022ccc:	f6bf ae71 	bge.w	900229b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
90022cd0:	9934      	ldr	r1, [sp, #208]	; 0xd0
90022cd2:	fb01 5303 	mla	r3, r1, r3, r5
90022cd6:	141b      	asrs	r3, r3, #16
90022cd8:	f53f ae6b 	bmi.w	900229b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
90022cdc:	3a01      	subs	r2, #1
90022cde:	4293      	cmp	r3, r2
90022ce0:	f6bf ae67 	bge.w	900229b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
90022ce4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
90022ce8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
90022cec:	f1bb 0f00 	cmp.w	fp, #0
90022cf0:	dc70      	bgt.n	90022dd4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
90022cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
90022cf4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
90022cf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90022cfa:	eb03 0344 	add.w	r3, r3, r4, lsl #1
90022cfe:	930c      	str	r3, [sp, #48]	; 0x30
90022d00:	9b19      	ldr	r3, [sp, #100]	; 0x64
90022d02:	2b00      	cmp	r3, #0
90022d04:	f340 81be 	ble.w	90023084 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x788>
90022d08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90022d0c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90022d0e:	ee3a aa2b 	vadd.f32	s20, s20, s23
90022d12:	ee79 9a8b 	vadd.f32	s19, s19, s22
90022d16:	eef0 6a48 	vmov.f32	s13, s16
90022d1a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
90022d1e:	ee39 9a2a 	vadd.f32	s18, s18, s21
90022d22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022d26:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
90022d2a:	eef0 6a68 	vmov.f32	s13, s17
90022d2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022d32:	ee16 5a90 	vmov	r5, s13
90022d36:	ee29 7aa7 	vmul.f32	s14, s19, s15
90022d3a:	ee69 7a27 	vmul.f32	s15, s18, s15
90022d3e:	ee37 8a48 	vsub.f32	s16, s14, s16
90022d42:	ee77 8ae8 	vsub.f32	s17, s15, s17
90022d46:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
90022d4a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
90022d4e:	ee18 2a10 	vmov	r2, s16
90022d52:	eeb0 8a47 	vmov.f32	s16, s14
90022d56:	fb92 f3f3 	sdiv	r3, r2, r3
90022d5a:	ee18 2a90 	vmov	r2, s17
90022d5e:	9333      	str	r3, [sp, #204]	; 0xcc
90022d60:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90022d62:	eef0 8a67 	vmov.f32	s17, s15
90022d66:	fb92 f3f3 	sdiv	r3, r2, r3
90022d6a:	9334      	str	r3, [sp, #208]	; 0xd0
90022d6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
90022d6e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
90022d70:	3b01      	subs	r3, #1
90022d72:	9319      	str	r3, [sp, #100]	; 0x64
90022d74:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90022d76:	bf08      	it	eq
90022d78:	4613      	moveq	r3, r2
90022d7a:	9309      	str	r3, [sp, #36]	; 0x24
90022d7c:	e5ee      	b.n	9002295c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90022d7e:	2900      	cmp	r1, #0
90022d80:	f43f ae60 	beq.w	90022a44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90022d84:	f818 0000 	ldrb.w	r0, [r8, r0]
90022d88:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
90022d8c:	900a      	str	r0, [sp, #40]	; 0x28
90022d8e:	0e00      	lsrs	r0, r0, #24
90022d90:	9013      	str	r0, [sp, #76]	; 0x4c
90022d92:	e657      	b.n	90022a44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90022d94:	f113 0801 	adds.w	r8, r3, #1
90022d98:	f53f af74 	bmi.w	90022c84 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
90022d9c:	4540      	cmp	r0, r8
90022d9e:	f6ff af71 	blt.w	90022c84 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
90022da2:	f11c 0801 	adds.w	r8, ip, #1
90022da6:	f53f af6d 	bmi.w	90022c84 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
90022daa:	45c6      	cmp	lr, r8
90022dac:	f6ff af6a 	blt.w	90022c84 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
90022db0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
90022db2:	b200      	sxth	r0, r0
90022db4:	9302      	str	r3, [sp, #8]
90022db6:	fa0f f38e 	sxth.w	r3, lr
90022dba:	9000      	str	r0, [sp, #0]
90022dbc:	9301      	str	r3, [sp, #4]
90022dbe:	4633      	mov	r3, r6
90022dc0:	981d      	ldr	r0, [sp, #116]	; 0x74
90022dc2:	e9cd 1405 	strd	r1, r4, [sp, #20]
90022dc6:	e9cd c203 	strd	ip, r2, [sp, #12]
90022dca:	4639      	mov	r1, r7
90022dcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
90022dce:	f7ff fc2b 	bl	90022628 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
90022dd2:	e757      	b.n	90022c84 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
90022dd4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
90022dd6:	f3c5 3003 	ubfx	r0, r5, #12, #4
90022dda:	9c31      	ldr	r4, [sp, #196]	; 0xc4
90022ddc:	f3c3 3203 	ubfx	r2, r3, #12, #4
90022de0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
90022de2:	1427      	asrs	r7, r4, #16
90022de4:	9c12      	ldr	r4, [sp, #72]	; 0x48
90022de6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90022dea:	142b      	asrs	r3, r5, #16
90022dec:	fb01 7303 	mla	r3, r1, r3, r7
90022df0:	18e7      	adds	r7, r4, r3
90022df2:	5ce3      	ldrb	r3, [r4, r3]
90022df4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
90022df8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
90022dfc:	2a00      	cmp	r2, #0
90022dfe:	f000 8137 	beq.w	90023070 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>
90022e02:	f897 e001 	ldrb.w	lr, [r7, #1]
90022e06:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
90022e0a:	9410      	str	r4, [sp, #64]	; 0x40
90022e0c:	0e24      	lsrs	r4, r4, #24
90022e0e:	9417      	str	r4, [sp, #92]	; 0x5c
90022e10:	b170      	cbz	r0, 90022e30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
90022e12:	eb07 0e01 	add.w	lr, r7, r1
90022e16:	5c79      	ldrb	r1, [r7, r1]
90022e18:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90022e1c:	910b      	str	r1, [sp, #44]	; 0x2c
90022e1e:	0e09      	lsrs	r1, r1, #24
90022e20:	9114      	str	r1, [sp, #80]	; 0x50
90022e22:	f89e 1001 	ldrb.w	r1, [lr, #1]
90022e26:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90022e2a:	9111      	str	r1, [sp, #68]	; 0x44
90022e2c:	0e09      	lsrs	r1, r1, #24
90022e2e:	9118      	str	r1, [sp, #96]	; 0x60
90022e30:	b292      	uxth	r2, r2
90022e32:	9917      	ldr	r1, [sp, #92]	; 0x5c
90022e34:	b280      	uxth	r0, r0
90022e36:	9c14      	ldr	r4, [sp, #80]	; 0x50
90022e38:	fb02 f800 	mul.w	r8, r2, r0
90022e3c:	0112      	lsls	r2, r2, #4
90022e3e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
90022e42:	eba2 0e08 	sub.w	lr, r2, r8
90022e46:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
90022e4a:	b280      	uxth	r0, r0
90022e4c:	fa1f fe8e 	uxth.w	lr, lr
90022e50:	1a12      	subs	r2, r2, r0
90022e52:	fb0e f101 	mul.w	r1, lr, r1
90022e56:	b292      	uxth	r2, r2
90022e58:	fb02 110c 	mla	r1, r2, ip, r1
90022e5c:	fb00 1104 	mla	r1, r0, r4, r1
90022e60:	9c18      	ldr	r4, [sp, #96]	; 0x60
90022e62:	fb08 1104 	mla	r1, r8, r4, r1
90022e66:	f3c1 2107 	ubfx	r1, r1, #8, #8
90022e6a:	2900      	cmp	r1, #0
90022e6c:	f000 80f5 	beq.w	9002305a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
90022e70:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90022e74:	d019      	beq.n	90022eaa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ae>
90022e76:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90022e7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90022e7e:	fb0c fa0a 	mul.w	sl, ip, sl
90022e82:	fb0c fc03 	mul.w	ip, ip, r3
90022e86:	ea4f 231a 	mov.w	r3, sl, lsr #8
90022e8a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90022e8e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
90022e92:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90022e96:	eb07 271c 	add.w	r7, r7, ip, lsr #8
90022e9a:	4453      	add	r3, sl
90022e9c:	0a3f      	lsrs	r7, r7, #8
90022e9e:	0a1b      	lsrs	r3, r3, #8
90022ea0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90022ea4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90022ea8:	433b      	orrs	r3, r7
90022eaa:	9c17      	ldr	r4, [sp, #92]	; 0x5c
90022eac:	2cff      	cmp	r4, #255	; 0xff
90022eae:	d020      	beq.n	90022ef2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
90022eb0:	9c10      	ldr	r4, [sp, #64]	; 0x40
90022eb2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90022eb6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
90022eb8:	4367      	muls	r7, r4
90022eba:	9c10      	ldr	r4, [sp, #64]	; 0x40
90022ebc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022ec0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022ec4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
90022ec6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90022eca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022ece:	fb04 fa0a 	mul.w	sl, r4, sl
90022ed2:	44bc      	add	ip, r7
90022ed4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90022ed8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022edc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90022ee0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022ee4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022ee8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022eec:	ea4c 040a 	orr.w	r4, ip, sl
90022ef0:	9410      	str	r4, [sp, #64]	; 0x40
90022ef2:	9c14      	ldr	r4, [sp, #80]	; 0x50
90022ef4:	2cff      	cmp	r4, #255	; 0xff
90022ef6:	d020      	beq.n	90022f3a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x63e>
90022ef8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90022efa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90022efe:	9c14      	ldr	r4, [sp, #80]	; 0x50
90022f00:	4367      	muls	r7, r4
90022f02:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90022f04:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022f08:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022f0c:	9c14      	ldr	r4, [sp, #80]	; 0x50
90022f0e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90022f12:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022f16:	fb04 fa0a 	mul.w	sl, r4, sl
90022f1a:	44bc      	add	ip, r7
90022f1c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90022f20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022f24:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90022f28:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022f2c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022f30:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022f34:	ea4c 040a 	orr.w	r4, ip, sl
90022f38:	940b      	str	r4, [sp, #44]	; 0x2c
90022f3a:	9c18      	ldr	r4, [sp, #96]	; 0x60
90022f3c:	2cff      	cmp	r4, #255	; 0xff
90022f3e:	d020      	beq.n	90022f82 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x686>
90022f40:	9c11      	ldr	r4, [sp, #68]	; 0x44
90022f42:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90022f46:	9c18      	ldr	r4, [sp, #96]	; 0x60
90022f48:	4367      	muls	r7, r4
90022f4a:	9c11      	ldr	r4, [sp, #68]	; 0x44
90022f4c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022f50:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022f54:	9c18      	ldr	r4, [sp, #96]	; 0x60
90022f56:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90022f5a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022f5e:	fb04 fa0a 	mul.w	sl, r4, sl
90022f62:	44bc      	add	ip, r7
90022f64:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90022f68:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022f6c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90022f70:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022f74:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022f78:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022f7c:	ea4c 040a 	orr.w	r4, ip, sl
90022f80:	9411      	str	r4, [sp, #68]	; 0x44
90022f82:	9c10      	ldr	r4, [sp, #64]	; 0x40
90022f84:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90022f88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90022f8c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90022f90:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90022f92:	fb0e f707 	mul.w	r7, lr, r7
90022f96:	fb02 770c 	mla	r7, r2, ip, r7
90022f9a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90022f9e:	9c11      	ldr	r4, [sp, #68]	; 0x44
90022fa0:	fb00 770c 	mla	r7, r0, ip, r7
90022fa4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90022fa8:	9c10      	ldr	r4, [sp, #64]	; 0x40
90022faa:	fb08 770c 	mla	r7, r8, ip, r7
90022fae:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
90022fb2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90022fb4:	fb0e fe0c 	mul.w	lr, lr, ip
90022fb8:	0a3f      	lsrs	r7, r7, #8
90022fba:	fb02 e303 	mla	r3, r2, r3, lr
90022fbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90022fc0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
90022fc4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
90022fc8:	9a11      	ldr	r2, [sp, #68]	; 0x44
90022fca:	fb00 330a 	mla	r3, r0, sl, r3
90022fce:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
90022fd2:	f8b9 0000 	ldrh.w	r0, [r9]
90022fd6:	fb08 3c0c 	mla	ip, r8, ip, r3
90022fda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90022fdc:	1202      	asrs	r2, r0, #8
90022fde:	434b      	muls	r3, r1
90022fe0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022fe4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
90022fe8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90022fec:	1c59      	adds	r1, r3, #1
90022fee:	ea47 070c 	orr.w	r7, r7, ip
90022ff2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
90022ff6:	0c3b      	lsrs	r3, r7, #16
90022ff8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
90022ffc:	f3c7 2c07 	ubfx	ip, r7, #8, #8
90023000:	b2ff      	uxtb	r7, r7
90023002:	fb13 f304 	smulbb	r3, r3, r4
90023006:	b2c9      	uxtb	r1, r1
90023008:	fb1c fc04 	smulbb	ip, ip, r4
9002300c:	fb02 3201 	mla	r2, r2, r1, r3
90023010:	10c3      	asrs	r3, r0, #3
90023012:	fb17 f704 	smulbb	r7, r7, r4
90023016:	00c0      	lsls	r0, r0, #3
90023018:	b292      	uxth	r2, r2
9002301a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9002301e:	b2c0      	uxtb	r0, r0
90023020:	fb03 c301 	mla	r3, r3, r1, ip
90023024:	f102 0c01 	add.w	ip, r2, #1
90023028:	fb00 7001 	mla	r0, r0, r1, r7
9002302c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
90023030:	b280      	uxth	r0, r0
90023032:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
90023036:	b29b      	uxth	r3, r3
90023038:	1c42      	adds	r2, r0, #1
9002303a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9002303e:	f3c0 20c4 	ubfx	r0, r0, #11, #5
90023042:	ea4c 0200 	orr.w	r2, ip, r0
90023046:	f103 0c01 	add.w	ip, r3, #1
9002304a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
9002304e:	095b      	lsrs	r3, r3, #5
90023050:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90023054:	431a      	orrs	r2, r3
90023056:	f8a9 2000 	strh.w	r2, [r9]
9002305a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
9002305c:	f109 0902 	add.w	r9, r9, #2
90023060:	9a31      	ldr	r2, [sp, #196]	; 0xc4
90023062:	f10b 3bff 	add.w	fp, fp, #4294967295
90023066:	441a      	add	r2, r3
90023068:	9b34      	ldr	r3, [sp, #208]	; 0xd0
9002306a:	9231      	str	r2, [sp, #196]	; 0xc4
9002306c:	441d      	add	r5, r3
9002306e:	e63d      	b.n	90022cec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
90023070:	2800      	cmp	r0, #0
90023072:	f43f aedd 	beq.w	90022e30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
90023076:	5c79      	ldrb	r1, [r7, r1]
90023078:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9002307c:	910b      	str	r1, [sp, #44]	; 0x2c
9002307e:	0e09      	lsrs	r1, r1, #24
90023080:	9114      	str	r1, [sp, #80]	; 0x50
90023082:	e6d5      	b.n	90022e30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
90023084:	b01f      	add	sp, #124	; 0x7c
90023086:	ecbd 8b08 	vpop	{d8-d11}
9002308a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

90023090 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
90023090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90023094:	880e      	ldrh	r6, [r1, #0]
90023096:	b085      	sub	sp, #20
90023098:	4691      	mov	r9, r2
9002309a:	ea4f 2e26 	mov.w	lr, r6, asr #8
9002309e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
900230a2:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
900230a6:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
900230aa:	ea4f 0ee6 	mov.w	lr, r6, asr #3
900230ae:	00f6      	lsls	r6, r6, #3
900230b0:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
900230b4:	9200      	str	r2, [sp, #0]
900230b6:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
900230ba:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
900230be:	9201      	str	r2, [sp, #4]
900230c0:	b2f2      	uxtb	r2, r6
900230c2:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
900230c6:	9202      	str	r2, [sp, #8]
900230c8:	fb04 560c 	mla	r6, r4, ip, r5
900230cc:	2c00      	cmp	r4, #0
900230ce:	eb09 0e06 	add.w	lr, r9, r6
900230d2:	db3e      	blt.n	90023152 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc2>
900230d4:	45a0      	cmp	r8, r4
900230d6:	dd3c      	ble.n	90023152 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc2>
900230d8:	2d00      	cmp	r5, #0
900230da:	db38      	blt.n	9002314e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
900230dc:	45ac      	cmp	ip, r5
900230de:	dd36      	ble.n	9002314e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
900230e0:	f819 2006 	ldrb.w	r2, [r9, r6]
900230e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
900230e8:	1c6e      	adds	r6, r5, #1
900230ea:	d435      	bmi.n	90023158 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc8>
900230ec:	45b4      	cmp	ip, r6
900230ee:	dd33      	ble.n	90023158 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc8>
900230f0:	b3a0      	cbz	r0, 9002315c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
900230f2:	f89e 6001 	ldrb.w	r6, [lr, #1]
900230f6:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
900230fa:	3401      	adds	r4, #1
900230fc:	d432      	bmi.n	90023164 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd4>
900230fe:	45a0      	cmp	r8, r4
90023100:	dd30      	ble.n	90023164 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd4>
90023102:	b397      	cbz	r7, 9002316a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
90023104:	2d00      	cmp	r5, #0
90023106:	db2b      	blt.n	90023160 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
90023108:	45ac      	cmp	ip, r5
9002310a:	dd29      	ble.n	90023160 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
9002310c:	f81e 400c 	ldrb.w	r4, [lr, ip]
90023110:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
90023114:	3501      	adds	r5, #1
90023116:	d42b      	bmi.n	90023170 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe0>
90023118:	45ac      	cmp	ip, r5
9002311a:	dd29      	ble.n	90023170 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe0>
9002311c:	b350      	cbz	r0, 90023174 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe4>
9002311e:	44f4      	add	ip, lr
90023120:	f89c 5001 	ldrb.w	r5, [ip, #1]
90023124:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
90023128:	280f      	cmp	r0, #15
9002312a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
9002312e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
90023132:	ea4f 6914 	mov.w	r9, r4, lsr #24
90023136:	ea4f 6813 	mov.w	r8, r3, lsr #24
9002313a:	d801      	bhi.n	90023140 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb0>
9002313c:	2f0f      	cmp	r7, #15
9002313e:	d91b      	bls.n	90023178 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe8>
90023140:	4b7e      	ldr	r3, [pc, #504]	; (9002333c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
90023142:	f240 210d 	movw	r1, #525	; 0x20d
90023146:	4a7e      	ldr	r2, [pc, #504]	; (90023340 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
90023148:	487e      	ldr	r0, [pc, #504]	; (90023344 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
9002314a:	f005 fd73 	bl	90028c34 <__assert_func>
9002314e:	2200      	movs	r2, #0
90023150:	e7ca      	b.n	900230e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
90023152:	2600      	movs	r6, #0
90023154:	4632      	mov	r2, r6
90023156:	e7d0      	b.n	900230fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
90023158:	2600      	movs	r6, #0
9002315a:	e7ce      	b.n	900230fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
9002315c:	4606      	mov	r6, r0
9002315e:	e7cc      	b.n	900230fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
90023160:	2400      	movs	r4, #0
90023162:	e7d7      	b.n	90023114 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x84>
90023164:	2300      	movs	r3, #0
90023166:	461c      	mov	r4, r3
90023168:	e7de      	b.n	90023128 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
9002316a:	463b      	mov	r3, r7
9002316c:	463c      	mov	r4, r7
9002316e:	e7db      	b.n	90023128 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
90023170:	2300      	movs	r3, #0
90023172:	e7d9      	b.n	90023128 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
90023174:	4603      	mov	r3, r0
90023176:	e7d7      	b.n	90023128 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
90023178:	b280      	uxth	r0, r0
9002317a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
9002317e:	b2bf      	uxth	r7, r7
90023180:	fb00 fe07 	mul.w	lr, r0, r7
90023184:	ea4f 1000 	mov.w	r0, r0, lsl #4
90023188:	ebce 1707 	rsb	r7, lr, r7, lsl #4
9002318c:	eba0 0c0e 	sub.w	ip, r0, lr
90023190:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
90023194:	b2bf      	uxth	r7, r7
90023196:	fa1f fc8c 	uxth.w	ip, ip
9002319a:	eba5 0507 	sub.w	r5, r5, r7
9002319e:	fb0c f00a 	mul.w	r0, ip, sl
900231a2:	b2ad      	uxth	r5, r5
900231a4:	fb05 000b 	mla	r0, r5, fp, r0
900231a8:	fb07 0009 	mla	r0, r7, r9, r0
900231ac:	fb0e 0008 	mla	r0, lr, r8, r0
900231b0:	f3c0 2007 	ubfx	r0, r0, #8, #8
900231b4:	9003      	str	r0, [sp, #12]
900231b6:	d018      	beq.n	900231ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15a>
900231b8:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
900231bc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
900231c0:	fb0b f000 	mul.w	r0, fp, r0
900231c4:	fb0b fb02 	mul.w	fp, fp, r2
900231c8:	0a02      	lsrs	r2, r0, #8
900231ca:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
900231ce:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
900231d2:	4402      	add	r2, r0
900231d4:	f50b 7080 	add.w	r0, fp, #256	; 0x100
900231d8:	eb00 201b 	add.w	r0, r0, fp, lsr #8
900231dc:	0a12      	lsrs	r2, r2, #8
900231de:	0a00      	lsrs	r0, r0, #8
900231e0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
900231e4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
900231e8:	4302      	orrs	r2, r0
900231ea:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
900231ee:	d019      	beq.n	90023224 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x194>
900231f0:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
900231f4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
900231f8:	fb0a fb0b 	mul.w	fp, sl, fp
900231fc:	fb0a fa06 	mul.w	sl, sl, r6
90023200:	ea4f 261b 	mov.w	r6, fp, lsr #8
90023204:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90023208:	f50a 7080 	add.w	r0, sl, #256	; 0x100
9002320c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
90023210:	eb00 201a 	add.w	r0, r0, sl, lsr #8
90023214:	445e      	add	r6, fp
90023216:	0a00      	lsrs	r0, r0, #8
90023218:	0a36      	lsrs	r6, r6, #8
9002321a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
9002321e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
90023222:	4306      	orrs	r6, r0
90023224:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90023228:	d019      	beq.n	9002325e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1ce>
9002322a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
9002322e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
90023232:	fb09 fa0a 	mul.w	sl, r9, sl
90023236:	fb09 f904 	mul.w	r9, r9, r4
9002323a:	ea4f 241a 	mov.w	r4, sl, lsr #8
9002323e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90023242:	f509 7080 	add.w	r0, r9, #256	; 0x100
90023246:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
9002324a:	eb00 2019 	add.w	r0, r0, r9, lsr #8
9002324e:	4454      	add	r4, sl
90023250:	0a00      	lsrs	r0, r0, #8
90023252:	0a24      	lsrs	r4, r4, #8
90023254:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
90023258:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
9002325c:	4304      	orrs	r4, r0
9002325e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
90023262:	d019      	beq.n	90023298 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x208>
90023264:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
90023268:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9002326c:	fb08 f909 	mul.w	r9, r8, r9
90023270:	fb08 f803 	mul.w	r8, r8, r3
90023274:	ea4f 2319 	mov.w	r3, r9, lsr #8
90023278:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
9002327c:	f508 7080 	add.w	r0, r8, #256	; 0x100
90023280:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90023284:	eb00 2018 	add.w	r0, r0, r8, lsr #8
90023288:	444b      	add	r3, r9
9002328a:	0a00      	lsrs	r0, r0, #8
9002328c:	0a1b      	lsrs	r3, r3, #8
9002328e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
90023292:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90023296:	4303      	orrs	r3, r0
90023298:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
9002329c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
900232a0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
900232a4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
900232a8:	fb0c f808 	mul.w	r8, ip, r8
900232ac:	fb0c f606 	mul.w	r6, ip, r6
900232b0:	fb05 8800 	mla	r8, r5, r0, r8
900232b4:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
900232b8:	fb05 6202 	mla	r2, r5, r2, r6
900232bc:	9d01      	ldr	r5, [sp, #4]
900232be:	fb07 8800 	mla	r8, r7, r0, r8
900232c2:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
900232c6:	fb0e 8000 	mla	r0, lr, r0, r8
900232ca:	0a00      	lsrs	r0, r0, #8
900232cc:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
900232d0:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
900232d4:	9c02      	ldr	r4, [sp, #8]
900232d6:	fb07 2700 	mla	r7, r7, r0, r2
900232da:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
900232de:	9b03      	ldr	r3, [sp, #12]
900232e0:	fb0e 7000 	mla	r0, lr, r0, r7
900232e4:	43da      	mvns	r2, r3
900232e6:	9b00      	ldr	r3, [sp, #0]
900232e8:	0a00      	lsrs	r0, r0, #8
900232ea:	b2d2      	uxtb	r2, r2
900232ec:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
900232f0:	4353      	muls	r3, r2
900232f2:	4354      	muls	r4, r2
900232f4:	ea48 0000 	orr.w	r0, r8, r0
900232f8:	4355      	muls	r5, r2
900232fa:	4622      	mov	r2, r4
900232fc:	1c5c      	adds	r4, r3, #1
900232fe:	eb04 2413 	add.w	r4, r4, r3, lsr #8
90023302:	0c03      	lsrs	r3, r0, #16
90023304:	eb03 2414 	add.w	r4, r3, r4, lsr #8
90023308:	4b0f      	ldr	r3, [pc, #60]	; (90023348 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b8>)
9002330a:	ea03 2304 	and.w	r3, r3, r4, lsl #8
9002330e:	1c54      	adds	r4, r2, #1
90023310:	eb04 2412 	add.w	r4, r4, r2, lsr #8
90023314:	b2c2      	uxtb	r2, r0
90023316:	f3c0 2007 	ubfx	r0, r0, #8, #8
9002331a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
9002331e:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
90023322:	1c6a      	adds	r2, r5, #1
90023324:	eb02 2215 	add.w	r2, r2, r5, lsr #8
90023328:	eb00 2012 	add.w	r0, r0, r2, lsr #8
9002332c:	00c0      	lsls	r0, r0, #3
9002332e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023332:	4318      	orrs	r0, r3
90023334:	8008      	strh	r0, [r1, #0]
90023336:	b005      	add	sp, #20
90023338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002333c:	900306ff 	.word	0x900306ff
90023340:	90030cbd 	.word	0x90030cbd
90023344:	900307e8 	.word	0x900307e8
90023348:	fffff800 	.word	0xfffff800

9002334c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9002334c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90023350:	ed2d 8b08 	vpush	{d8-d11}
90023354:	b09b      	sub	sp, #108	; 0x6c
90023356:	eeb0 aa40 	vmov.f32	s20, s0
9002335a:	eef0 9a60 	vmov.f32	s19, s1
9002335e:	9218      	str	r2, [sp, #96]	; 0x60
90023360:	eeb0 9a41 	vmov.f32	s18, s2
90023364:	9a31      	ldr	r2, [sp, #196]	; 0xc4
90023366:	eeb0 8a62 	vmov.f32	s16, s5
9002336a:	9019      	str	r0, [sp, #100]	; 0x64
9002336c:	eef0 8a43 	vmov.f32	s17, s6
90023370:	6850      	ldr	r0, [r2, #4]
90023372:	eef0 ba44 	vmov.f32	s23, s8
90023376:	9116      	str	r1, [sp, #88]	; 0x58
90023378:	eeb0 ba64 	vmov.f32	s22, s9
9002337c:	9307      	str	r3, [sp, #28]
9002337e:	eef0 aa45 	vmov.f32	s21, s10
90023382:	6812      	ldr	r2, [r2, #0]
90023384:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
90023386:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
9002338a:	fb00 1303 	mla	r3, r0, r3, r1
9002338e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90023392:	930a      	str	r3, [sp, #40]	; 0x28
90023394:	9b34      	ldr	r3, [sp, #208]	; 0xd0
90023396:	681b      	ldr	r3, [r3, #0]
90023398:	930f      	str	r3, [sp, #60]	; 0x3c
9002339a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
9002339c:	685e      	ldr	r6, [r3, #4]
9002339e:	3604      	adds	r6, #4
900233a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
900233a2:	2b00      	cmp	r3, #0
900233a4:	dc03      	bgt.n	900233ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
900233a6:	9b18      	ldr	r3, [sp, #96]	; 0x60
900233a8:	2b00      	cmp	r3, #0
900233aa:	f340 836f 	ble.w	90023a8c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
900233ae:	9b34      	ldr	r3, [sp, #208]	; 0xd0
900233b0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900233b4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900233b8:	1e48      	subs	r0, r1, #1
900233ba:	1e57      	subs	r7, r2, #1
900233bc:	9b07      	ldr	r3, [sp, #28]
900233be:	2b00      	cmp	r3, #0
900233c0:	f340 8188 	ble.w	900236d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
900233c4:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
900233c6:	142b      	asrs	r3, r5, #16
900233c8:	ea5f 4c24 	movs.w	ip, r4, asr #16
900233cc:	d406      	bmi.n	900233dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900233ce:	4584      	cmp	ip, r0
900233d0:	da04      	bge.n	900233dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900233d2:	2b00      	cmp	r3, #0
900233d4:	db02      	blt.n	900233dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900233d6:	42bb      	cmp	r3, r7
900233d8:	f2c0 817d 	blt.w	900236d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
900233dc:	f11c 0c01 	adds.w	ip, ip, #1
900233e0:	f100 816b 	bmi.w	900236ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
900233e4:	4561      	cmp	r1, ip
900233e6:	f2c0 8168 	blt.w	900236ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
900233ea:	3301      	adds	r3, #1
900233ec:	f100 8165 	bmi.w	900236ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
900233f0:	429a      	cmp	r2, r3
900233f2:	f2c0 8162 	blt.w	900236ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
900233f6:	9b07      	ldr	r3, [sp, #28]
900233f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
900233fa:	9317      	str	r3, [sp, #92]	; 0x5c
900233fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
900233fe:	2b00      	cmp	r3, #0
90023400:	f340 8187 	ble.w	90023712 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
90023404:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
90023406:	ea4f 4c25 	mov.w	ip, r5, asr #16
9002340a:	f3c5 3003 	ubfx	r0, r5, #12, #4
9002340e:	f3c3 3203 	ubfx	r2, r3, #12, #4
90023412:	9b34      	ldr	r3, [sp, #208]	; 0xd0
90023414:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
90023418:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
9002341a:	141b      	asrs	r3, r3, #16
9002341c:	f100 81ca 	bmi.w	900237b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
90023420:	f101 38ff 	add.w	r8, r1, #4294967295
90023424:	4543      	cmp	r3, r8
90023426:	f280 81c5 	bge.w	900237b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9002342a:	f1bc 0f00 	cmp.w	ip, #0
9002342e:	f2c0 81c1 	blt.w	900237b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
90023432:	f10e 38ff 	add.w	r8, lr, #4294967295
90023436:	45c4      	cmp	ip, r8
90023438:	f280 81bc 	bge.w	900237b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9002343c:	b209      	sxth	r1, r1
9002343e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
90023440:	fb0c 3301 	mla	r3, ip, r1, r3
90023444:	eb04 0803 	add.w	r8, r4, r3
90023448:	5ce3      	ldrb	r3, [r4, r3]
9002344a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9002344e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
90023452:	2a00      	cmp	r2, #0
90023454:	f000 81a3 	beq.w	9002379e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90023458:	f898 c001 	ldrb.w	ip, [r8, #1]
9002345c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
90023460:	940b      	str	r4, [sp, #44]	; 0x2c
90023462:	0e24      	lsrs	r4, r4, #24
90023464:	9412      	str	r4, [sp, #72]	; 0x48
90023466:	b178      	cbz	r0, 90023488 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
90023468:	eb08 0c01 	add.w	ip, r8, r1
9002346c:	f818 1001 	ldrb.w	r1, [r8, r1]
90023470:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90023474:	9108      	str	r1, [sp, #32]
90023476:	0e09      	lsrs	r1, r1, #24
90023478:	9110      	str	r1, [sp, #64]	; 0x40
9002347a:	f89c 1001 	ldrb.w	r1, [ip, #1]
9002347e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90023482:	910c      	str	r1, [sp, #48]	; 0x30
90023484:	0e09      	lsrs	r1, r1, #24
90023486:	9113      	str	r1, [sp, #76]	; 0x4c
90023488:	b292      	uxth	r2, r2
9002348a:	9912      	ldr	r1, [sp, #72]	; 0x48
9002348c:	b280      	uxth	r0, r0
9002348e:	9c10      	ldr	r4, [sp, #64]	; 0x40
90023490:	fb02 f900 	mul.w	r9, r2, r0
90023494:	0112      	lsls	r2, r2, #4
90023496:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
9002349a:	eba2 0809 	sub.w	r8, r2, r9
9002349e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
900234a2:	b280      	uxth	r0, r0
900234a4:	fa1f f888 	uxth.w	r8, r8
900234a8:	1a12      	subs	r2, r2, r0
900234aa:	fb08 f101 	mul.w	r1, r8, r1
900234ae:	b292      	uxth	r2, r2
900234b0:	fb02 110e 	mla	r1, r2, lr, r1
900234b4:	fb00 1104 	mla	r1, r0, r4, r1
900234b8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
900234ba:	fb09 1104 	mla	r1, r9, r4, r1
900234be:	f3c1 2107 	ubfx	r1, r1, #8, #8
900234c2:	2900      	cmp	r1, #0
900234c4:	f000 80ee 	beq.w	900236a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900234c8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
900234cc:	d01b      	beq.n	90023506 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
900234ce:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
900234d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900234d6:	fb0e fa0a 	mul.w	sl, lr, sl
900234da:	fb0e fe03 	mul.w	lr, lr, r3
900234de:	ea4f 231a 	mov.w	r3, sl, lsr #8
900234e2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
900234e6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
900234ea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
900234ee:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
900234f2:	4453      	add	r3, sl
900234f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900234f8:	0a1b      	lsrs	r3, r3, #8
900234fa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
900234fe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90023502:	ea43 030c 	orr.w	r3, r3, ip
90023506:	9c12      	ldr	r4, [sp, #72]	; 0x48
90023508:	2cff      	cmp	r4, #255	; 0xff
9002350a:	d021      	beq.n	90023550 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9002350c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9002350e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
90023512:	9c12      	ldr	r4, [sp, #72]	; 0x48
90023514:	fb04 fb0b 	mul.w	fp, r4, fp
90023518:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9002351a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9002351e:	9c12      	ldr	r4, [sp, #72]	; 0x48
90023520:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90023524:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90023528:	fb04 fa0a 	mul.w	sl, r4, sl
9002352c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90023530:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90023534:	44de      	add	lr, fp
90023536:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9002353a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9002353e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90023542:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90023546:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002354a:	ea4e 040a 	orr.w	r4, lr, sl
9002354e:	940b      	str	r4, [sp, #44]	; 0x2c
90023550:	9c10      	ldr	r4, [sp, #64]	; 0x40
90023552:	2cff      	cmp	r4, #255	; 0xff
90023554:	d021      	beq.n	9002359a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
90023556:	9c08      	ldr	r4, [sp, #32]
90023558:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9002355c:	9c10      	ldr	r4, [sp, #64]	; 0x40
9002355e:	fb04 fb0b 	mul.w	fp, r4, fp
90023562:	9c08      	ldr	r4, [sp, #32]
90023564:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90023568:	9c10      	ldr	r4, [sp, #64]	; 0x40
9002356a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9002356e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90023572:	fb04 fa0a 	mul.w	sl, r4, sl
90023576:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002357a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9002357e:	44de      	add	lr, fp
90023580:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90023584:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90023588:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002358c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90023590:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90023594:	ea4e 040a 	orr.w	r4, lr, sl
90023598:	9408      	str	r4, [sp, #32]
9002359a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9002359c:	2cff      	cmp	r4, #255	; 0xff
9002359e:	d021      	beq.n	900235e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
900235a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
900235a2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
900235a6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
900235a8:	fb04 fb0b 	mul.w	fp, r4, fp
900235ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
900235ae:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
900235b2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
900235b4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
900235b8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
900235bc:	fb04 fa0a 	mul.w	sl, r4, sl
900235c0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900235c4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900235c8:	44de      	add	lr, fp
900235ca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900235ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900235d2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900235d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900235da:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900235de:	ea4e 040a 	orr.w	r4, lr, sl
900235e2:	940c      	str	r4, [sp, #48]	; 0x30
900235e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
900235e6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
900235ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900235ee:	43c9      	mvns	r1, r1
900235f0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
900235f4:	9c08      	ldr	r4, [sp, #32]
900235f6:	b2c9      	uxtb	r1, r1
900235f8:	fb08 fc0c 	mul.w	ip, r8, ip
900235fc:	fb02 cc0e 	mla	ip, r2, lr, ip
90023600:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
90023604:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90023606:	fb00 cc0e 	mla	ip, r0, lr, ip
9002360a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9002360e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90023610:	fb09 cc0e 	mla	ip, r9, lr, ip
90023614:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
90023618:	fb08 f80e 	mul.w	r8, r8, lr
9002361c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90023620:	fb02 8303 	mla	r3, r2, r3, r8
90023624:	9a08      	ldr	r2, [sp, #32]
90023626:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002362a:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9002362e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90023630:	fb00 330a 	mla	r3, r0, sl, r3
90023634:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
90023638:	fb09 3900 	mla	r9, r9, r0, r3
9002363c:	883b      	ldrh	r3, [r7, #0]
9002363e:	1218      	asrs	r0, r3, #8
90023640:	10da      	asrs	r2, r3, #3
90023642:	ea4f 2919 	mov.w	r9, r9, lsr #8
90023646:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9002364a:	00db      	lsls	r3, r3, #3
9002364c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90023650:	4348      	muls	r0, r1
90023652:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
90023656:	b2db      	uxtb	r3, r3
90023658:	434a      	muls	r2, r1
9002365a:	ea4c 0c09 	orr.w	ip, ip, r9
9002365e:	434b      	muls	r3, r1
90023660:	1c41      	adds	r1, r0, #1
90023662:	eb01 2110 	add.w	r1, r1, r0, lsr #8
90023666:	ea4f 401c 	mov.w	r0, ip, lsr #16
9002366a:	eb00 2011 	add.w	r0, r0, r1, lsr #8
9002366e:	4960      	ldr	r1, [pc, #384]	; (900237f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
90023670:	ea01 2000 	and.w	r0, r1, r0, lsl #8
90023674:	1c59      	adds	r1, r3, #1
90023676:	eb01 2113 	add.w	r1, r1, r3, lsr #8
9002367a:	fa5f f38c 	uxtb.w	r3, ip
9002367e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
90023682:	eb03 2311 	add.w	r3, r3, r1, lsr #8
90023686:	1c51      	adds	r1, r2, #1
90023688:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9002368c:	ea40 03d3 	orr.w	r3, r0, r3, lsr #3
90023690:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
90023694:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90023698:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
9002369c:	ea43 0c0c 	orr.w	ip, r3, ip
900236a0:	f8a7 c000 	strh.w	ip, [r7]
900236a4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
900236a6:	3702      	adds	r7, #2
900236a8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
900236aa:	441a      	add	r2, r3
900236ac:	9b30      	ldr	r3, [sp, #192]	; 0xc0
900236ae:	441d      	add	r5, r3
900236b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
900236b2:	922d      	str	r2, [sp, #180]	; 0xb4
900236b4:	3b01      	subs	r3, #1
900236b6:	9317      	str	r3, [sp, #92]	; 0x5c
900236b8:	e6a0      	b.n	900233fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
900236ba:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
900236bc:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
900236be:	441c      	add	r4, r3
900236c0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
900236c2:	441d      	add	r5, r3
900236c4:	9b07      	ldr	r3, [sp, #28]
900236c6:	942d      	str	r4, [sp, #180]	; 0xb4
900236c8:	3b01      	subs	r3, #1
900236ca:	9307      	str	r3, [sp, #28]
900236cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900236ce:	3302      	adds	r3, #2
900236d0:	930a      	str	r3, [sp, #40]	; 0x28
900236d2:	e673      	b.n	900233bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
900236d4:	d024      	beq.n	90023720 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
900236d6:	9b07      	ldr	r3, [sp, #28]
900236d8:	982f      	ldr	r0, [sp, #188]	; 0xbc
900236da:	3b01      	subs	r3, #1
900236dc:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
900236de:	fb00 4003 	mla	r0, r0, r3, r4
900236e2:	1400      	asrs	r0, r0, #16
900236e4:	f53f ae87 	bmi.w	900233f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
900236e8:	3901      	subs	r1, #1
900236ea:	4288      	cmp	r0, r1
900236ec:	f6bf ae83 	bge.w	900233f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
900236f0:	9930      	ldr	r1, [sp, #192]	; 0xc0
900236f2:	fb01 5303 	mla	r3, r1, r3, r5
900236f6:	141b      	asrs	r3, r3, #16
900236f8:	f53f ae7d 	bmi.w	900233f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
900236fc:	3a01      	subs	r2, #1
900236fe:	4293      	cmp	r3, r2
90023700:	f6bf ae79 	bge.w	900233f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
90023704:	f8dd b01c 	ldr.w	fp, [sp, #28]
90023708:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
9002370c:	f1bb 0f00 	cmp.w	fp, #0
90023710:	dc70      	bgt.n	900237f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
90023712:	9b07      	ldr	r3, [sp, #28]
90023714:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
90023718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002371a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9002371e:	930a      	str	r3, [sp, #40]	; 0x28
90023720:	9b16      	ldr	r3, [sp, #88]	; 0x58
90023722:	2b00      	cmp	r3, #0
90023724:	f340 81b2 	ble.w	90023a8c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
90023728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9002372c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9002372e:	ee3a aa2b 	vadd.f32	s20, s20, s23
90023732:	ee79 9a8b 	vadd.f32	s19, s19, s22
90023736:	eef0 6a48 	vmov.f32	s13, s16
9002373a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
9002373e:	ee39 9a2a 	vadd.f32	s18, s18, s21
90023742:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90023746:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
9002374a:	eef0 6a68 	vmov.f32	s13, s17
9002374e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90023752:	ee16 5a90 	vmov	r5, s13
90023756:	ee29 7aa7 	vmul.f32	s14, s19, s15
9002375a:	ee69 7a27 	vmul.f32	s15, s18, s15
9002375e:	ee37 8a48 	vsub.f32	s16, s14, s16
90023762:	ee77 8ae8 	vsub.f32	s17, s15, s17
90023766:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
9002376a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
9002376e:	ee18 2a10 	vmov	r2, s16
90023772:	eeb0 8a47 	vmov.f32	s16, s14
90023776:	fb92 f3f3 	sdiv	r3, r2, r3
9002377a:	ee18 2a90 	vmov	r2, s17
9002377e:	932f      	str	r3, [sp, #188]	; 0xbc
90023780:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90023782:	eef0 8a67 	vmov.f32	s17, s15
90023786:	fb92 f3f3 	sdiv	r3, r2, r3
9002378a:	9330      	str	r3, [sp, #192]	; 0xc0
9002378c:	9b16      	ldr	r3, [sp, #88]	; 0x58
9002378e:	9a18      	ldr	r2, [sp, #96]	; 0x60
90023790:	3b01      	subs	r3, #1
90023792:	9316      	str	r3, [sp, #88]	; 0x58
90023794:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90023796:	bf08      	it	eq
90023798:	4613      	moveq	r3, r2
9002379a:	9307      	str	r3, [sp, #28]
9002379c:	e600      	b.n	900233a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
9002379e:	2800      	cmp	r0, #0
900237a0:	f43f ae72 	beq.w	90023488 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
900237a4:	f818 1001 	ldrb.w	r1, [r8, r1]
900237a8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
900237ac:	9108      	str	r1, [sp, #32]
900237ae:	0e09      	lsrs	r1, r1, #24
900237b0:	9110      	str	r1, [sp, #64]	; 0x40
900237b2:	e669      	b.n	90023488 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
900237b4:	f113 0801 	adds.w	r8, r3, #1
900237b8:	f53f af74 	bmi.w	900236a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900237bc:	4541      	cmp	r1, r8
900237be:	f6ff af71 	blt.w	900236a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900237c2:	f11c 0801 	adds.w	r8, ip, #1
900237c6:	f53f af6d 	bmi.w	900236a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900237ca:	45c6      	cmp	lr, r8
900237cc:	f6ff af6a 	blt.w	900236a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900237d0:	b209      	sxth	r1, r1
900237d2:	e9cd 3c02 	strd	r3, ip, [sp, #8]
900237d6:	fa0f f38e 	sxth.w	r3, lr
900237da:	9100      	str	r1, [sp, #0]
900237dc:	4639      	mov	r1, r7
900237de:	9301      	str	r3, [sp, #4]
900237e0:	4633      	mov	r3, r6
900237e2:	e9cd 2004 	strd	r2, r0, [sp, #16]
900237e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900237e8:	9819      	ldr	r0, [sp, #100]	; 0x64
900237ea:	f7ff fc51 	bl	90023090 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
900237ee:	e759      	b.n	900236a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900237f0:	fffff800 	.word	0xfffff800
900237f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
900237f6:	f3c5 3003 	ubfx	r0, r5, #12, #4
900237fa:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
900237fc:	f3c3 3203 	ubfx	r2, r3, #12, #4
90023800:	9b34      	ldr	r3, [sp, #208]	; 0xd0
90023802:	1427      	asrs	r7, r4, #16
90023804:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
90023806:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9002380a:	142b      	asrs	r3, r5, #16
9002380c:	fb01 7303 	mla	r3, r1, r3, r7
90023810:	18e7      	adds	r7, r4, r3
90023812:	5ce3      	ldrb	r3, [r4, r3]
90023814:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
90023818:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9002381c:	2a00      	cmp	r2, #0
9002381e:	f000 812b 	beq.w	90023a78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
90023822:	f897 e001 	ldrb.w	lr, [r7, #1]
90023826:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
9002382a:	940d      	str	r4, [sp, #52]	; 0x34
9002382c:	0e24      	lsrs	r4, r4, #24
9002382e:	9414      	str	r4, [sp, #80]	; 0x50
90023830:	b170      	cbz	r0, 90023850 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
90023832:	eb07 0e01 	add.w	lr, r7, r1
90023836:	5c79      	ldrb	r1, [r7, r1]
90023838:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9002383c:	9109      	str	r1, [sp, #36]	; 0x24
9002383e:	0e09      	lsrs	r1, r1, #24
90023840:	9111      	str	r1, [sp, #68]	; 0x44
90023842:	f89e 1001 	ldrb.w	r1, [lr, #1]
90023846:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9002384a:	910e      	str	r1, [sp, #56]	; 0x38
9002384c:	0e09      	lsrs	r1, r1, #24
9002384e:	9115      	str	r1, [sp, #84]	; 0x54
90023850:	b292      	uxth	r2, r2
90023852:	9c11      	ldr	r4, [sp, #68]	; 0x44
90023854:	b280      	uxth	r0, r0
90023856:	fb02 f800 	mul.w	r8, r2, r0
9002385a:	0112      	lsls	r2, r2, #4
9002385c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
90023860:	eba2 0e08 	sub.w	lr, r2, r8
90023864:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
90023868:	9a14      	ldr	r2, [sp, #80]	; 0x50
9002386a:	b280      	uxth	r0, r0
9002386c:	fa1f fe8e 	uxth.w	lr, lr
90023870:	1a09      	subs	r1, r1, r0
90023872:	fb0e f202 	mul.w	r2, lr, r2
90023876:	b289      	uxth	r1, r1
90023878:	fb01 220c 	mla	r2, r1, ip, r2
9002387c:	fb00 2204 	mla	r2, r0, r4, r2
90023880:	9c15      	ldr	r4, [sp, #84]	; 0x54
90023882:	fb08 2204 	mla	r2, r8, r4, r2
90023886:	f3c2 2207 	ubfx	r2, r2, #8, #8
9002388a:	2a00      	cmp	r2, #0
9002388c:	f000 80e9 	beq.w	90023a62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
90023890:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90023894:	d019      	beq.n	900238ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
90023896:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9002389a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9002389e:	fb0c fa0a 	mul.w	sl, ip, sl
900238a2:	fb0c fc03 	mul.w	ip, ip, r3
900238a6:	ea4f 231a 	mov.w	r3, sl, lsr #8
900238aa:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
900238ae:	f50c 7780 	add.w	r7, ip, #256	; 0x100
900238b2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
900238b6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
900238ba:	4453      	add	r3, sl
900238bc:	0a3f      	lsrs	r7, r7, #8
900238be:	0a1b      	lsrs	r3, r3, #8
900238c0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
900238c4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
900238c8:	433b      	orrs	r3, r7
900238ca:	9c14      	ldr	r4, [sp, #80]	; 0x50
900238cc:	2cff      	cmp	r4, #255	; 0xff
900238ce:	d020      	beq.n	90023912 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
900238d0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
900238d2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
900238d6:	9c14      	ldr	r4, [sp, #80]	; 0x50
900238d8:	4367      	muls	r7, r4
900238da:	9c0d      	ldr	r4, [sp, #52]	; 0x34
900238dc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
900238e0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
900238e4:	9c14      	ldr	r4, [sp, #80]	; 0x50
900238e6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
900238ea:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900238ee:	fb04 fa0a 	mul.w	sl, r4, sl
900238f2:	44bc      	add	ip, r7
900238f4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
900238f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900238fc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90023900:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90023904:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90023908:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002390c:	ea4c 040a 	orr.w	r4, ip, sl
90023910:	940d      	str	r4, [sp, #52]	; 0x34
90023912:	9c11      	ldr	r4, [sp, #68]	; 0x44
90023914:	2cff      	cmp	r4, #255	; 0xff
90023916:	d020      	beq.n	9002395a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
90023918:	9c09      	ldr	r4, [sp, #36]	; 0x24
9002391a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9002391e:	9c11      	ldr	r4, [sp, #68]	; 0x44
90023920:	4367      	muls	r7, r4
90023922:	9c09      	ldr	r4, [sp, #36]	; 0x24
90023924:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90023928:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9002392c:	9c11      	ldr	r4, [sp, #68]	; 0x44
9002392e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90023932:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90023936:	fb04 fa0a 	mul.w	sl, r4, sl
9002393a:	44bc      	add	ip, r7
9002393c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90023940:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90023944:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90023948:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002394c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90023950:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90023954:	ea4c 040a 	orr.w	r4, ip, sl
90023958:	9409      	str	r4, [sp, #36]	; 0x24
9002395a:	9c15      	ldr	r4, [sp, #84]	; 0x54
9002395c:	2cff      	cmp	r4, #255	; 0xff
9002395e:	d020      	beq.n	900239a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
90023960:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90023962:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90023966:	9c15      	ldr	r4, [sp, #84]	; 0x54
90023968:	4367      	muls	r7, r4
9002396a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9002396c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90023970:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90023974:	9c15      	ldr	r4, [sp, #84]	; 0x54
90023976:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9002397a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002397e:	fb04 fa0a 	mul.w	sl, r4, sl
90023982:	44bc      	add	ip, r7
90023984:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90023988:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002398c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90023990:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90023994:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90023998:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002399c:	ea4c 040a 	orr.w	r4, ip, sl
900239a0:	940e      	str	r4, [sp, #56]	; 0x38
900239a2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
900239a4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
900239a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900239ac:	43d2      	mvns	r2, r2
900239ae:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
900239b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
900239b4:	b2d2      	uxtb	r2, r2
900239b6:	fb0e f707 	mul.w	r7, lr, r7
900239ba:	fb01 770c 	mla	r7, r1, ip, r7
900239be:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
900239c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
900239c4:	fb00 770c 	mla	r7, r0, ip, r7
900239c8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
900239cc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
900239ce:	fb08 770c 	mla	r7, r8, ip, r7
900239d2:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
900239d6:	fb0e fe0c 	mul.w	lr, lr, ip
900239da:	0a3f      	lsrs	r7, r7, #8
900239dc:	fb01 e303 	mla	r3, r1, r3, lr
900239e0:	9909      	ldr	r1, [sp, #36]	; 0x24
900239e2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
900239e6:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
900239ea:	990e      	ldr	r1, [sp, #56]	; 0x38
900239ec:	fb00 330a 	mla	r3, r0, sl, r3
900239f0:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
900239f4:	fb08 3c0c 	mla	ip, r8, ip, r3
900239f8:	f8b9 3000 	ldrh.w	r3, [r9]
900239fc:	1218      	asrs	r0, r3, #8
900239fe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90023a02:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90023a06:	10d9      	asrs	r1, r3, #3
90023a08:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90023a0c:	00db      	lsls	r3, r3, #3
90023a0e:	4350      	muls	r0, r2
90023a10:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90023a14:	ea47 070c 	orr.w	r7, r7, ip
90023a18:	b2db      	uxtb	r3, r3
90023a1a:	f100 0c01 	add.w	ip, r0, #1
90023a1e:	4351      	muls	r1, r2
90023a20:	4353      	muls	r3, r2
90023a22:	4a1d      	ldr	r2, [pc, #116]	; (90023a98 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
90023a24:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
90023a28:	ea4f 4c17 	mov.w	ip, r7, lsr #16
90023a2c:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
90023a30:	f103 0c01 	add.w	ip, r3, #1
90023a34:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
90023a38:	fa5f fc87 	uxtb.w	ip, r7
90023a3c:	f3c7 2707 	ubfx	r7, r7, #8, #8
90023a40:	ea02 2000 	and.w	r0, r2, r0, lsl #8
90023a44:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
90023a48:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
90023a4c:	1c4b      	adds	r3, r1, #1
90023a4e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90023a52:	eb07 2711 	add.w	r7, r7, r1, lsr #8
90023a56:	00ff      	lsls	r7, r7, #3
90023a58:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023a5c:	4338      	orrs	r0, r7
90023a5e:	f8a9 0000 	strh.w	r0, [r9]
90023a62:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
90023a64:	f109 0902 	add.w	r9, r9, #2
90023a68:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
90023a6a:	f10b 3bff 	add.w	fp, fp, #4294967295
90023a6e:	441a      	add	r2, r3
90023a70:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90023a72:	922d      	str	r2, [sp, #180]	; 0xb4
90023a74:	441d      	add	r5, r3
90023a76:	e649      	b.n	9002370c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
90023a78:	2800      	cmp	r0, #0
90023a7a:	f43f aee9 	beq.w	90023850 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
90023a7e:	5c79      	ldrb	r1, [r7, r1]
90023a80:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90023a84:	9109      	str	r1, [sp, #36]	; 0x24
90023a86:	0e09      	lsrs	r1, r1, #24
90023a88:	9111      	str	r1, [sp, #68]	; 0x44
90023a8a:	e6e1      	b.n	90023850 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
90023a8c:	b01b      	add	sp, #108	; 0x6c
90023a8e:	ecbd 8b08 	vpop	{d8-d11}
90023a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90023a96:	bf00      	nop
90023a98:	fffff800 	.word	0xfffff800

90023a9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
90023a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90023aa0:	b085      	sub	sp, #20
90023aa2:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
90023aa6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
90023aaa:	9103      	str	r1, [sp, #12]
90023aac:	2d00      	cmp	r5, #0
90023aae:	fb05 7106 	mla	r1, r5, r6, r7
90023ab2:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
90023ab6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
90023aba:	eb02 0441 	add.w	r4, r2, r1, lsl #1
90023abe:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
90023ac2:	eb03 0901 	add.w	r9, r3, r1
90023ac6:	9401      	str	r4, [sp, #4]
90023ac8:	f2c0 80c0 	blt.w	90023c4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
90023acc:	45a8      	cmp	r8, r5
90023ace:	f340 80bd 	ble.w	90023c4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
90023ad2:	2f00      	cmp	r7, #0
90023ad4:	f2c0 80b6 	blt.w	90023c44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
90023ad8:	42be      	cmp	r6, r7
90023ada:	f340 80b3 	ble.w	90023c44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
90023ade:	f813 c001 	ldrb.w	ip, [r3, r1]
90023ae2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
90023ae6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90023aea:	d019      	beq.n	90023b20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
90023aec:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
90023af0:	ea4f 02ec 	mov.w	r2, ip, asr #3
90023af4:	435a      	muls	r2, r3
90023af6:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
90023afa:	f64f 011f 	movw	r1, #63519	; 0xf81f
90023afe:	fb0c f403 	mul.w	r4, ip, r3
90023b02:	ea01 1352 	and.w	r3, r1, r2, lsr #5
90023b06:	f602 0201 	addw	r2, r2, #2049	; 0x801
90023b0a:	441a      	add	r2, r3
90023b0c:	f104 0320 	add.w	r3, r4, #32
90023b10:	eb03 2314 	add.w	r3, r3, r4, lsr #8
90023b14:	ea01 1152 	and.w	r1, r1, r2, lsr #5
90023b18:	0a1b      	lsrs	r3, r3, #8
90023b1a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90023b1e:	4319      	orrs	r1, r3
90023b20:	b289      	uxth	r1, r1
90023b22:	1c7b      	adds	r3, r7, #1
90023b24:	f100 8097 	bmi.w	90023c56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
90023b28:	429e      	cmp	r6, r3
90023b2a:	f340 8094 	ble.w	90023c56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
90023b2e:	2800      	cmp	r0, #0
90023b30:	f000 8094 	beq.w	90023c5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
90023b34:	f899 4001 	ldrb.w	r4, [r9, #1]
90023b38:	9b01      	ldr	r3, [sp, #4]
90023b3a:	2cff      	cmp	r4, #255	; 0xff
90023b3c:	885b      	ldrh	r3, [r3, #2]
90023b3e:	d01b      	beq.n	90023b78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
90023b40:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
90023b44:	ea4f 0ae4 	mov.w	sl, r4, asr #3
90023b48:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90023b4c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
90023b50:	fb0a f202 	mul.w	r2, sl, r2
90023b54:	fb04 fa03 	mul.w	sl, r4, r3
90023b58:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
90023b5c:	f602 0201 	addw	r2, r2, #2049	; 0x801
90023b60:	441a      	add	r2, r3
90023b62:	f10a 0320 	add.w	r3, sl, #32
90023b66:	eb03 231a 	add.w	r3, r3, sl, lsr #8
90023b6a:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
90023b6e:	0a1b      	lsrs	r3, r3, #8
90023b70:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90023b74:	ea4b 0303 	orr.w	r3, fp, r3
90023b78:	b29b      	uxth	r3, r3
90023b7a:	3501      	adds	r5, #1
90023b7c:	d474      	bmi.n	90023c68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
90023b7e:	45a8      	cmp	r8, r5
90023b80:	dd72      	ble.n	90023c68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
90023b82:	f1be 0f00 	cmp.w	lr, #0
90023b86:	f000 8120 	beq.w	90023dca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
90023b8a:	2f00      	cmp	r7, #0
90023b8c:	db69      	blt.n	90023c62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
90023b8e:	42be      	cmp	r6, r7
90023b90:	dd67      	ble.n	90023c62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
90023b92:	f819 5006 	ldrb.w	r5, [r9, r6]
90023b96:	9a01      	ldr	r2, [sp, #4]
90023b98:	2dff      	cmp	r5, #255	; 0xff
90023b9a:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
90023b9e:	d01c      	beq.n	90023bda <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
90023ba0:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
90023ba4:	ea4f 08e5 	mov.w	r8, r5, asr #3
90023ba8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
90023bac:	fb08 f802 	mul.w	r8, r8, r2
90023bb0:	fb05 fa0b 	mul.w	sl, r5, fp
90023bb4:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
90023bb8:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
90023bbc:	f608 0801 	addw	r8, r8, #2049	; 0x801
90023bc0:	4490      	add	r8, r2
90023bc2:	f10a 0220 	add.w	r2, sl, #32
90023bc6:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
90023bca:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
90023bce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90023bd2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90023bd6:	ea4b 0b0a 	orr.w	fp, fp, sl
90023bda:	fa1f fb8b 	uxth.w	fp, fp
90023bde:	3701      	adds	r7, #1
90023be0:	d447      	bmi.n	90023c72 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
90023be2:	42be      	cmp	r6, r7
90023be4:	dd45      	ble.n	90023c72 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
90023be6:	2800      	cmp	r0, #0
90023be8:	d046      	beq.n	90023c78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
90023bea:	3601      	adds	r6, #1
90023bec:	9a01      	ldr	r2, [sp, #4]
90023bee:	f819 7006 	ldrb.w	r7, [r9, r6]
90023bf2:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
90023bf6:	2fff      	cmp	r7, #255	; 0xff
90023bf8:	d01a      	beq.n	90023c30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
90023bfa:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
90023bfe:	ea4f 08e7 	mov.w	r8, r7, asr #3
90023c02:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90023c06:	fb08 f806 	mul.w	r8, r8, r6
90023c0a:	fb07 f902 	mul.w	r9, r7, r2
90023c0e:	f64f 021f 	movw	r2, #63519	; 0xf81f
90023c12:	ea02 1658 	and.w	r6, r2, r8, lsr #5
90023c16:	f608 0801 	addw	r8, r8, #2049	; 0x801
90023c1a:	44b0      	add	r8, r6
90023c1c:	f109 0620 	add.w	r6, r9, #32
90023c20:	eb06 2619 	add.w	r6, r6, r9, lsr #8
90023c24:	ea02 1258 	and.w	r2, r2, r8, lsr #5
90023c28:	0a36      	lsrs	r6, r6, #8
90023c2a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90023c2e:	4332      	orrs	r2, r6
90023c30:	b292      	uxth	r2, r2
90023c32:	280f      	cmp	r0, #15
90023c34:	d922      	bls.n	90023c7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
90023c36:	4b69      	ldr	r3, [pc, #420]	; (90023ddc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
90023c38:	f240 210d 	movw	r1, #525	; 0x20d
90023c3c:	4a68      	ldr	r2, [pc, #416]	; (90023de0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
90023c3e:	4869      	ldr	r0, [pc, #420]	; (90023de4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
90023c40:	f004 fff8 	bl	90028c34 <__assert_func>
90023c44:	f04f 0c00 	mov.w	ip, #0
90023c48:	4661      	mov	r1, ip
90023c4a:	e76a      	b.n	90023b22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
90023c4c:	2400      	movs	r4, #0
90023c4e:	46a4      	mov	ip, r4
90023c50:	4623      	mov	r3, r4
90023c52:	4621      	mov	r1, r4
90023c54:	e791      	b.n	90023b7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
90023c56:	2400      	movs	r4, #0
90023c58:	4623      	mov	r3, r4
90023c5a:	e78e      	b.n	90023b7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
90023c5c:	4604      	mov	r4, r0
90023c5e:	4603      	mov	r3, r0
90023c60:	e78b      	b.n	90023b7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
90023c62:	2500      	movs	r5, #0
90023c64:	46ab      	mov	fp, r5
90023c66:	e7ba      	b.n	90023bde <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
90023c68:	2700      	movs	r7, #0
90023c6a:	463d      	mov	r5, r7
90023c6c:	463a      	mov	r2, r7
90023c6e:	46bb      	mov	fp, r7
90023c70:	e7df      	b.n	90023c32 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
90023c72:	2700      	movs	r7, #0
90023c74:	463a      	mov	r2, r7
90023c76:	e7dc      	b.n	90023c32 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
90023c78:	4607      	mov	r7, r0
90023c7a:	4602      	mov	r2, r0
90023c7c:	f1be 0f0f 	cmp.w	lr, #15
90023c80:	d8d9      	bhi.n	90023c36 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
90023c82:	b286      	uxth	r6, r0
90023c84:	fa1f f98e 	uxth.w	r9, lr
90023c88:	ea4f 4a01 	mov.w	sl, r1, lsl #16
90023c8c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90023c90:	fb06 f809 	mul.w	r8, r6, r9
90023c94:	0136      	lsls	r6, r6, #4
90023c96:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023c9a:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
90023c9e:	9601      	str	r6, [sp, #4]
90023ca0:	ea4a 0101 	orr.w	r1, sl, r1
90023ca4:	ea4f 4a03 	mov.w	sl, r3, lsl #16
90023ca8:	fa1f f689 	uxth.w	r6, r9
90023cac:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90023cb0:	fb10 f90e 	smulbb	r9, r0, lr
90023cb4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023cb8:	9602      	str	r6, [sp, #8]
90023cba:	460e      	mov	r6, r1
90023cbc:	ea4f 09e9 	mov.w	r9, r9, asr #3
90023cc0:	f1ce 0110 	rsb	r1, lr, #16
90023cc4:	ea4a 0303 	orr.w	r3, sl, r3
90023cc8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
90023ccc:	1a09      	subs	r1, r1, r0
90023cce:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
90023cd2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023cd6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90023cda:	4343      	muls	r3, r0
90023cdc:	eb09 0141 	add.w	r1, r9, r1, lsl #1
90023ce0:	9801      	ldr	r0, [sp, #4]
90023ce2:	ea4a 0202 	orr.w	r2, sl, r2
90023ce6:	fb01 3106 	mla	r1, r1, r6, r3
90023cea:	9e02      	ldr	r6, [sp, #8]
90023cec:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
90023cf0:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
90023cf4:	fb09 1302 	mla	r3, r9, r2, r1
90023cf8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
90023cfc:	1b80      	subs	r0, r0, r6
90023cfe:	9e01      	ldr	r6, [sp, #4]
90023d00:	9a03      	ldr	r2, [sp, #12]
90023d02:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023d06:	eba6 0608 	sub.w	r6, r6, r8
90023d0a:	b280      	uxth	r0, r0
90023d0c:	8811      	ldrh	r1, [r2, #0]
90023d0e:	ea4a 0b0b 	orr.w	fp, sl, fp
90023d12:	b2b6      	uxth	r6, r6
90023d14:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
90023d18:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
90023d1c:	4374      	muls	r4, r6
90023d1e:	b292      	uxth	r2, r2
90023d20:	fb0e 3e0b 	mla	lr, lr, fp, r3
90023d24:	fb0c 4400 	mla	r4, ip, r0, r4
90023d28:	9802      	ldr	r0, [sp, #8]
90023d2a:	ea4f 535e 	mov.w	r3, lr, lsr #21
90023d2e:	fb00 4505 	mla	r5, r0, r5, r4
90023d32:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
90023d36:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90023d3a:	1208      	asrs	r0, r1, #8
90023d3c:	fb08 5707 	mla	r7, r8, r7, r5
90023d40:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
90023d44:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90023d48:	10cd      	asrs	r5, r1, #3
90023d4a:	f3c7 2707 	ubfx	r7, r7, #8, #8
90023d4e:	ea43 0e0e 	orr.w	lr, r3, lr
90023d52:	00c9      	lsls	r1, r1, #3
90023d54:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
90023d58:	4357      	muls	r7, r2
90023d5a:	fa1f f38e 	uxth.w	r3, lr
90023d5e:	b2c9      	uxtb	r1, r1
90023d60:	f107 0801 	add.w	r8, r7, #1
90023d64:	121c      	asrs	r4, r3, #8
90023d66:	eb08 2717 	add.w	r7, r8, r7, lsr #8
90023d6a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
90023d6e:	ea6f 2717 	mvn.w	r7, r7, lsr #8
90023d72:	b2ff      	uxtb	r7, r7
90023d74:	fb10 f007 	smulbb	r0, r0, r7
90023d78:	fb11 f107 	smulbb	r1, r1, r7
90023d7c:	fb04 0402 	mla	r4, r4, r2, r0
90023d80:	10d8      	asrs	r0, r3, #3
90023d82:	fb15 f507 	smulbb	r5, r5, r7
90023d86:	00db      	lsls	r3, r3, #3
90023d88:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90023d8c:	b2a4      	uxth	r4, r4
90023d8e:	b2db      	uxtb	r3, r3
90023d90:	fb00 5002 	mla	r0, r0, r2, r5
90023d94:	fb03 1202 	mla	r2, r3, r2, r1
90023d98:	1c63      	adds	r3, r4, #1
90023d9a:	b280      	uxth	r0, r0
90023d9c:	b292      	uxth	r2, r2
90023d9e:	eb03 2314 	add.w	r3, r3, r4, lsr #8
90023da2:	1c51      	adds	r1, r2, #1
90023da4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
90023da8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90023dac:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90023db0:	4313      	orrs	r3, r2
90023db2:	1c42      	adds	r2, r0, #1
90023db4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90023db8:	9a03      	ldr	r2, [sp, #12]
90023dba:	0940      	lsrs	r0, r0, #5
90023dbc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023dc0:	4303      	orrs	r3, r0
90023dc2:	8013      	strh	r3, [r2, #0]
90023dc4:	b005      	add	sp, #20
90023dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90023dca:	280f      	cmp	r0, #15
90023dcc:	f63f af33 	bhi.w	90023c36 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
90023dd0:	4677      	mov	r7, lr
90023dd2:	4675      	mov	r5, lr
90023dd4:	4672      	mov	r2, lr
90023dd6:	46f3      	mov	fp, lr
90023dd8:	e753      	b.n	90023c82 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
90023dda:	bf00      	nop
90023ddc:	900306ff 	.word	0x900306ff
90023de0:	90030cbd 	.word	0x90030cbd
90023de4:	900307e8 	.word	0x900307e8

90023de8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90023de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90023dec:	ed2d 8b08 	vpush	{d8-d11}
90023df0:	b097      	sub	sp, #92	; 0x5c
90023df2:	eeb0 aa40 	vmov.f32	s20, s0
90023df6:	eef0 9a60 	vmov.f32	s19, s1
90023dfa:	9214      	str	r2, [sp, #80]	; 0x50
90023dfc:	eeb0 9a41 	vmov.f32	s18, s2
90023e00:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
90023e02:	eeb0 8a62 	vmov.f32	s16, s5
90023e06:	9308      	str	r3, [sp, #32]
90023e08:	eef0 8a43 	vmov.f32	s17, s6
90023e0c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
90023e10:	eef0 ba44 	vmov.f32	s23, s8
90023e14:	9015      	str	r0, [sp, #84]	; 0x54
90023e16:	eeb0 ba64 	vmov.f32	s22, s9
90023e1a:	9312      	str	r3, [sp, #72]	; 0x48
90023e1c:	eef0 aa45 	vmov.f32	s21, s10
90023e20:	6850      	ldr	r0, [r2, #4]
90023e22:	9111      	str	r1, [sp, #68]	; 0x44
90023e24:	6812      	ldr	r2, [r2, #0]
90023e26:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
90023e2a:	fb00 1303 	mla	r3, r0, r3, r1
90023e2e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90023e32:	9309      	str	r3, [sp, #36]	; 0x24
90023e34:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90023e36:	681b      	ldr	r3, [r3, #0]
90023e38:	930b      	str	r3, [sp, #44]	; 0x2c
90023e3a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90023e3c:	685b      	ldr	r3, [r3, #4]
90023e3e:	930c      	str	r3, [sp, #48]	; 0x30
90023e40:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90023e44:	930a      	str	r3, [sp, #40]	; 0x28
90023e46:	9b11      	ldr	r3, [sp, #68]	; 0x44
90023e48:	2b00      	cmp	r3, #0
90023e4a:	dc03      	bgt.n	90023e54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90023e4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
90023e4e:	2b00      	cmp	r3, #0
90023e50:	f340 83cd 	ble.w	900245ee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
90023e54:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90023e56:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90023e5a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90023e5e:	1e48      	subs	r0, r1, #1
90023e60:	1e55      	subs	r5, r2, #1
90023e62:	9b08      	ldr	r3, [sp, #32]
90023e64:	2b00      	cmp	r3, #0
90023e66:	f340 81a5 	ble.w	900241b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
90023e6a:	9e29      	ldr	r6, [sp, #164]	; 0xa4
90023e6c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90023e6e:	1436      	asrs	r6, r6, #16
90023e70:	ea4f 4323 	mov.w	r3, r3, asr #16
90023e74:	d406      	bmi.n	90023e84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
90023e76:	4286      	cmp	r6, r0
90023e78:	da04      	bge.n	90023e84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
90023e7a:	2b00      	cmp	r3, #0
90023e7c:	db02      	blt.n	90023e84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
90023e7e:	42ab      	cmp	r3, r5
90023e80:	f2c0 8199 	blt.w	900241b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
90023e84:	3601      	adds	r6, #1
90023e86:	f100 8186 	bmi.w	90024196 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
90023e8a:	42b1      	cmp	r1, r6
90023e8c:	f2c0 8183 	blt.w	90024196 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
90023e90:	3301      	adds	r3, #1
90023e92:	f100 8180 	bmi.w	90024196 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
90023e96:	429a      	cmp	r2, r3
90023e98:	f2c0 817d 	blt.w	90024196 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
90023e9c:	9b08      	ldr	r3, [sp, #32]
90023e9e:	f64f 061f 	movw	r6, #63519	; 0xf81f
90023ea2:	9f09      	ldr	r7, [sp, #36]	; 0x24
90023ea4:	9313      	str	r3, [sp, #76]	; 0x4c
90023ea6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90023ea8:	2b00      	cmp	r3, #0
90023eaa:	f340 81a6 	ble.w	900241fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
90023eae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90023eb0:	9d29      	ldr	r5, [sp, #164]	; 0xa4
90023eb2:	1418      	asrs	r0, r3, #16
90023eb4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90023eb6:	142d      	asrs	r5, r5, #16
90023eb8:	f3c3 3103 	ubfx	r1, r3, #12, #4
90023ebc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90023ebe:	f3c3 3c03 	ubfx	ip, r3, #12, #4
90023ec2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90023ec4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
90023ec8:	f100 81fa 	bmi.w	900242c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
90023ecc:	f102 3eff 	add.w	lr, r2, #4294967295
90023ed0:	4575      	cmp	r5, lr
90023ed2:	f280 81f5 	bge.w	900242c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
90023ed6:	2800      	cmp	r0, #0
90023ed8:	f2c0 81f2 	blt.w	900242c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
90023edc:	f103 3eff 	add.w	lr, r3, #4294967295
90023ee0:	4570      	cmp	r0, lr
90023ee2:	f280 81ed 	bge.w	900242c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
90023ee6:	b212      	sxth	r2, r2
90023ee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90023eea:	fa1f fe81 	uxth.w	lr, r1
90023eee:	fb00 5002 	mla	r0, r0, r2, r5
90023ef2:	ea4f 150e 	mov.w	r5, lr, lsl #4
90023ef6:	eb03 0a00 	add.w	sl, r3, r0
90023efa:	f813 9000 	ldrb.w	r9, [r3, r0]
90023efe:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
90023f02:	f89a 8001 	ldrb.w	r8, [sl, #1]
90023f06:	b29b      	uxth	r3, r3
90023f08:	f1bc 0f00 	cmp.w	ip, #0
90023f0c:	f000 81bb 	beq.w	90024286 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
90023f10:	f81a 4002 	ldrb.w	r4, [sl, r2]
90023f14:	eb0a 0b02 	add.w	fp, sl, r2
90023f18:	fa1f fa8c 	uxth.w	sl, ip
90023f1c:	940d      	str	r4, [sp, #52]	; 0x34
90023f1e:	fb0a fe0e 	mul.w	lr, sl, lr
90023f22:	f89b 4001 	ldrb.w	r4, [fp, #1]
90023f26:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
90023f2a:	eba5 050e 	sub.w	r5, r5, lr
90023f2e:	940e      	str	r4, [sp, #56]	; 0x38
90023f30:	fa1f fa8a 	uxth.w	sl, sl
90023f34:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90023f36:	b2ad      	uxth	r5, r5
90023f38:	eba3 030a 	sub.w	r3, r3, sl
90023f3c:	fb08 f505 	mul.w	r5, r8, r5
90023f40:	b29b      	uxth	r3, r3
90023f42:	fb09 5303 	mla	r3, r9, r3, r5
90023f46:	fb0a 3304 	mla	r3, sl, r4, r3
90023f4a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90023f4c:	fb0e 3304 	mla	r3, lr, r4, r3
90023f50:	f3c3 2307 	ubfx	r3, r3, #8, #8
90023f54:	2b00      	cmp	r3, #0
90023f56:	f000 8111 	beq.w	9002417c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
90023f5a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90023f5c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90023f60:	eb04 0540 	add.w	r5, r4, r0, lsl #1
90023f64:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
90023f68:	f000 8192 	beq.w	90024290 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
90023f6c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
90023f70:	ea4f 0ae9 	mov.w	sl, r9, asr #3
90023f74:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023f78:	fb0a fe0e 	mul.w	lr, sl, lr
90023f7c:	fb09 f000 	mul.w	r0, r9, r0
90023f80:	ea06 195e 	and.w	r9, r6, lr, lsr #5
90023f84:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
90023f88:	f100 0b20 	add.w	fp, r0, #32
90023f8c:	44ce      	add	lr, r9
90023f8e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
90023f92:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
90023f96:	ea4f 2919 	mov.w	r9, r9, lsr #8
90023f9a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90023f9e:	ea4e 0909 	orr.w	r9, lr, r9
90023fa2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
90023fa6:	8868      	ldrh	r0, [r5, #2]
90023fa8:	d019      	beq.n	90023fde <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
90023faa:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
90023fae:	ea4f 0ae8 	mov.w	sl, r8, asr #3
90023fb2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023fb6:	fb0a fe0e 	mul.w	lr, sl, lr
90023fba:	fb08 f800 	mul.w	r8, r8, r0
90023fbe:	ea06 105e 	and.w	r0, r6, lr, lsr #5
90023fc2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
90023fc6:	f108 0b20 	add.w	fp, r8, #32
90023fca:	4486      	add	lr, r0
90023fcc:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
90023fd0:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
90023fd4:	0a00      	lsrs	r0, r0, #8
90023fd6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023fda:	ea4e 0000 	orr.w	r0, lr, r0
90023fde:	ea4f 4e09 	mov.w	lr, r9, lsl #16
90023fe2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90023fe6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
90023fea:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90023fee:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
90023ff2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023ff6:	ea4e 0909 	orr.w	r9, lr, r9
90023ffa:	ea4a 0000 	orr.w	r0, sl, r0
90023ffe:	f1bc 0f00 	cmp.w	ip, #0
90024002:	f000 8147 	beq.w	90024294 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
90024006:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
9002400a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9002400c:	3a01      	subs	r2, #1
9002400e:	2cff      	cmp	r4, #255	; 0xff
90024010:	ea4f 0242 	mov.w	r2, r2, lsl #1
90024014:	f102 0202 	add.w	r2, r2, #2
90024018:	eb05 0e02 	add.w	lr, r5, r2
9002401c:	5aaa      	ldrh	r2, [r5, r2]
9002401e:	d018      	beq.n	90024052 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
90024020:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
90024024:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90024028:	ea4f 08e4 	mov.w	r8, r4, asr #3
9002402c:	fb04 fa02 	mul.w	sl, r4, r2
90024030:	fb08 f805 	mul.w	r8, r8, r5
90024034:	f10a 0520 	add.w	r5, sl, #32
90024038:	ea06 1258 	and.w	r2, r6, r8, lsr #5
9002403c:	f608 0801 	addw	r8, r8, #2049	; 0x801
90024040:	eb05 251a 	add.w	r5, r5, sl, lsr #8
90024044:	4442      	add	r2, r8
90024046:	0a2d      	lsrs	r5, r5, #8
90024048:	ea06 1252 	and.w	r2, r6, r2, lsr #5
9002404c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90024050:	432a      	orrs	r2, r5
90024052:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90024054:	f8be 5002 	ldrh.w	r5, [lr, #2]
90024058:	2cff      	cmp	r4, #255	; 0xff
9002405a:	d01a      	beq.n	90024092 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
9002405c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
90024060:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90024064:	ea4f 08e4 	mov.w	r8, r4, asr #3
90024068:	fb04 fa05 	mul.w	sl, r4, r5
9002406c:	fb08 f80e 	mul.w	r8, r8, lr
90024070:	f10a 0e20 	add.w	lr, sl, #32
90024074:	ea06 1558 	and.w	r5, r6, r8, lsr #5
90024078:	f608 0801 	addw	r8, r8, #2049	; 0x801
9002407c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
90024080:	4445      	add	r5, r8
90024082:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90024086:	ea06 1555 	and.w	r5, r6, r5, lsr #5
9002408a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
9002408e:	ea45 050e 	orr.w	r5, r5, lr
90024092:	fb1c fe01 	smulbb	lr, ip, r1
90024096:	f1cc 0810 	rsb	r8, ip, #16
9002409a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9002409e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900240a2:	ea4f 0eee 	mov.w	lr, lr, asr #3
900240a6:	eba8 0801 	sub.w	r8, r8, r1
900240aa:	ea4f 4b05 	mov.w	fp, r5, lsl #16
900240ae:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900240b2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
900240b6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
900240ba:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
900240be:	ea4a 0202 	orr.w	r2, sl, r2
900240c2:	4341      	muls	r1, r0
900240c4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
900240c8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
900240cc:	fb09 1108 	mla	r1, r9, r8, r1
900240d0:	ea4b 0505 	orr.w	r5, fp, r5
900240d4:	fb0c 1102 	mla	r1, ip, r2, r1
900240d8:	fb0e 1e05 	mla	lr, lr, r5, r1
900240dc:	ea4f 525e 	mov.w	r2, lr, lsr #21
900240e0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
900240e4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900240e8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
900240ec:	ea42 0e0e 	orr.w	lr, r2, lr
900240f0:	fa1f f28e 	uxth.w	r2, lr
900240f4:	2bff      	cmp	r3, #255	; 0xff
900240f6:	d103      	bne.n	90024100 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
900240f8:	9912      	ldr	r1, [sp, #72]	; 0x48
900240fa:	29ff      	cmp	r1, #255	; 0xff
900240fc:	f000 80de 	beq.w	900242bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
90024100:	990a      	ldr	r1, [sp, #40]	; 0x28
90024102:	8838      	ldrh	r0, [r7, #0]
90024104:	434b      	muls	r3, r1
90024106:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90024108:	1205      	asrs	r5, r0, #8
9002410a:	f103 0c01 	add.w	ip, r3, #1
9002410e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90024112:	eb0c 2323 	add.w	r3, ip, r3, asr #8
90024116:	ea6f 2c23 	mvn.w	ip, r3, asr #8
9002411a:	1213      	asrs	r3, r2, #8
9002411c:	fa5f fc8c 	uxtb.w	ip, ip
90024120:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
90024124:	fb15 f50c 	smulbb	r5, r5, ip
90024128:	fb03 5301 	mla	r3, r3, r1, r5
9002412c:	10d1      	asrs	r1, r2, #3
9002412e:	00d2      	lsls	r2, r2, #3
90024130:	b29d      	uxth	r5, r3
90024132:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90024136:	10c3      	asrs	r3, r0, #3
90024138:	00c0      	lsls	r0, r0, #3
9002413a:	b2d2      	uxtb	r2, r2
9002413c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
90024140:	b2c0      	uxtb	r0, r0
90024142:	fb13 f30c 	smulbb	r3, r3, ip
90024146:	fb10 f00c 	smulbb	r0, r0, ip
9002414a:	fb01 3104 	mla	r1, r1, r4, r3
9002414e:	1c6b      	adds	r3, r5, #1
90024150:	fb02 0204 	mla	r2, r2, r4, r0
90024154:	eb03 2315 	add.w	r3, r3, r5, lsr #8
90024158:	b292      	uxth	r2, r2
9002415a:	b289      	uxth	r1, r1
9002415c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
90024160:	1c50      	adds	r0, r2, #1
90024162:	eb00 2212 	add.w	r2, r0, r2, lsr #8
90024166:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9002416a:	4313      	orrs	r3, r2
9002416c:	1c4a      	adds	r2, r1, #1
9002416e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
90024172:	0949      	lsrs	r1, r1, #5
90024174:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90024178:	430b      	orrs	r3, r1
9002417a:	803b      	strh	r3, [r7, #0]
9002417c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9002417e:	3702      	adds	r7, #2
90024180:	9a2b      	ldr	r2, [sp, #172]	; 0xac
90024182:	4413      	add	r3, r2
90024184:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
90024186:	9329      	str	r3, [sp, #164]	; 0xa4
90024188:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9002418a:	441a      	add	r2, r3
9002418c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9002418e:	3b01      	subs	r3, #1
90024190:	922a      	str	r2, [sp, #168]	; 0xa8
90024192:	9313      	str	r3, [sp, #76]	; 0x4c
90024194:	e687      	b.n	90023ea6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
90024196:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90024198:	9e2b      	ldr	r6, [sp, #172]	; 0xac
9002419a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
9002419c:	4433      	add	r3, r6
9002419e:	9329      	str	r3, [sp, #164]	; 0xa4
900241a0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900241a2:	441c      	add	r4, r3
900241a4:	9b08      	ldr	r3, [sp, #32]
900241a6:	3b01      	subs	r3, #1
900241a8:	942a      	str	r4, [sp, #168]	; 0xa8
900241aa:	9308      	str	r3, [sp, #32]
900241ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
900241ae:	3302      	adds	r3, #2
900241b0:	9309      	str	r3, [sp, #36]	; 0x24
900241b2:	e656      	b.n	90023e62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
900241b4:	d028      	beq.n	90024208 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
900241b6:	9b08      	ldr	r3, [sp, #32]
900241b8:	982b      	ldr	r0, [sp, #172]	; 0xac
900241ba:	3b01      	subs	r3, #1
900241bc:	9d29      	ldr	r5, [sp, #164]	; 0xa4
900241be:	fb00 5003 	mla	r0, r0, r3, r5
900241c2:	1400      	asrs	r0, r0, #16
900241c4:	f53f ae6a 	bmi.w	90023e9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
900241c8:	3901      	subs	r1, #1
900241ca:	4288      	cmp	r0, r1
900241cc:	f6bf ae66 	bge.w	90023e9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
900241d0:	992c      	ldr	r1, [sp, #176]	; 0xb0
900241d2:	982a      	ldr	r0, [sp, #168]	; 0xa8
900241d4:	fb01 0303 	mla	r3, r1, r3, r0
900241d8:	141b      	asrs	r3, r3, #16
900241da:	f53f ae5f 	bmi.w	90023e9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
900241de:	3a01      	subs	r2, #1
900241e0:	4293      	cmp	r3, r2
900241e2:	f6bf ae5b 	bge.w	90023e9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
900241e6:	9b08      	ldr	r3, [sp, #32]
900241e8:	f64f 061f 	movw	r6, #63519	; 0xf81f
900241ec:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
900241f0:	9313      	str	r3, [sp, #76]	; 0x4c
900241f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
900241f4:	2b00      	cmp	r3, #0
900241f6:	f300 8082 	bgt.w	900242fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
900241fa:	9b08      	ldr	r3, [sp, #32]
900241fc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
90024200:	9b09      	ldr	r3, [sp, #36]	; 0x24
90024202:	eb03 0344 	add.w	r3, r3, r4, lsl #1
90024206:	9309      	str	r3, [sp, #36]	; 0x24
90024208:	9b11      	ldr	r3, [sp, #68]	; 0x44
9002420a:	2b00      	cmp	r3, #0
9002420c:	f340 81ef 	ble.w	900245ee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
90024210:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90024214:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90024216:	ee3a aa2b 	vadd.f32	s20, s20, s23
9002421a:	ee79 9a8b 	vadd.f32	s19, s19, s22
9002421e:	eef0 6a48 	vmov.f32	s13, s16
90024222:	eec7 7a0a 	vdiv.f32	s15, s14, s20
90024226:	ee39 9a2a 	vadd.f32	s18, s18, s21
9002422a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002422e:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
90024232:	eef0 6a68 	vmov.f32	s13, s17
90024236:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002423a:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
9002423e:	ee29 7aa7 	vmul.f32	s14, s19, s15
90024242:	ee69 7a27 	vmul.f32	s15, s18, s15
90024246:	ee37 8a48 	vsub.f32	s16, s14, s16
9002424a:	ee77 8ae8 	vsub.f32	s17, s15, s17
9002424e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
90024252:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
90024256:	ee18 2a10 	vmov	r2, s16
9002425a:	eeb0 8a47 	vmov.f32	s16, s14
9002425e:	fb92 f3f3 	sdiv	r3, r2, r3
90024262:	ee18 2a90 	vmov	r2, s17
90024266:	932b      	str	r3, [sp, #172]	; 0xac
90024268:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002426a:	eef0 8a67 	vmov.f32	s17, s15
9002426e:	fb92 f3f3 	sdiv	r3, r2, r3
90024272:	932c      	str	r3, [sp, #176]	; 0xb0
90024274:	9b11      	ldr	r3, [sp, #68]	; 0x44
90024276:	9a14      	ldr	r2, [sp, #80]	; 0x50
90024278:	3b01      	subs	r3, #1
9002427a:	9311      	str	r3, [sp, #68]	; 0x44
9002427c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002427e:	bf08      	it	eq
90024280:	4613      	moveq	r3, r2
90024282:	9308      	str	r3, [sp, #32]
90024284:	e5df      	b.n	90023e46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
90024286:	fb08 f505 	mul.w	r5, r8, r5
9002428a:	fb09 5303 	mla	r3, r9, r3, r5
9002428e:	e65f      	b.n	90023f50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
90024290:	4681      	mov	r9, r0
90024292:	e686      	b.n	90023fa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
90024294:	f1c1 0210 	rsb	r2, r1, #16
90024298:	4341      	muls	r1, r0
9002429a:	fb09 1902 	mla	r9, r9, r2, r1
9002429e:	ea4f 0949 	mov.w	r9, r9, lsl #1
900242a2:	ea4f 5259 	mov.w	r2, r9, lsr #21
900242a6:	ea4f 1959 	mov.w	r9, r9, lsr #5
900242aa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900242ae:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
900242b2:	ea42 0909 	orr.w	r9, r2, r9
900242b6:	fa1f f289 	uxth.w	r2, r9
900242ba:	e71b      	b.n	900240f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
900242bc:	803a      	strh	r2, [r7, #0]
900242be:	e75d      	b.n	9002417c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
900242c0:	f115 0e01 	adds.w	lr, r5, #1
900242c4:	f53f af5a 	bmi.w	9002417c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
900242c8:	4572      	cmp	r2, lr
900242ca:	f6ff af57 	blt.w	9002417c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
900242ce:	f110 0e01 	adds.w	lr, r0, #1
900242d2:	f53f af53 	bmi.w	9002417c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
900242d6:	4573      	cmp	r3, lr
900242d8:	f6ff af50 	blt.w	9002417c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
900242dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
900242de:	b21b      	sxth	r3, r3
900242e0:	b212      	sxth	r2, r2
900242e2:	9502      	str	r5, [sp, #8]
900242e4:	9301      	str	r3, [sp, #4]
900242e6:	9200      	str	r2, [sp, #0]
900242e8:	e9cd 0103 	strd	r0, r1, [sp, #12]
900242ec:	e9cd c405 	strd	ip, r4, [sp, #20]
900242f0:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
900242f4:	4639      	mov	r1, r7
900242f6:	9815      	ldr	r0, [sp, #84]	; 0x54
900242f8:	f7ff fbd0 	bl	90023a9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
900242fc:	e73e      	b.n	9002417c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
900242fe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90024300:	f3c3 3203 	ubfx	r2, r3, #12, #4
90024304:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90024306:	f3c3 3503 	ubfx	r5, r3, #12, #4
9002430a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9002430c:	fa1f fc82 	uxth.w	ip, r2
90024310:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90024314:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90024316:	ea4f 100c 	mov.w	r0, ip, lsl #4
9002431a:	141f      	asrs	r7, r3, #16
9002431c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9002431e:	141b      	asrs	r3, r3, #16
90024320:	fb01 3707 	mla	r7, r1, r7, r3
90024324:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90024326:	eb03 0a07 	add.w	sl, r3, r7
9002432a:	f813 9007 	ldrb.w	r9, [r3, r7]
9002432e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
90024332:	f89a 8001 	ldrb.w	r8, [sl, #1]
90024336:	b29b      	uxth	r3, r3
90024338:	2d00      	cmp	r5, #0
9002433a:	f000 813d 	beq.w	900245b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
9002433e:	f81a 4001 	ldrb.w	r4, [sl, r1]
90024342:	eb0a 0b01 	add.w	fp, sl, r1
90024346:	fa1f fa85 	uxth.w	sl, r5
9002434a:	940f      	str	r4, [sp, #60]	; 0x3c
9002434c:	fb0a fc0c 	mul.w	ip, sl, ip
90024350:	f89b 4001 	ldrb.w	r4, [fp, #1]
90024354:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
90024358:	eba0 000c 	sub.w	r0, r0, ip
9002435c:	9410      	str	r4, [sp, #64]	; 0x40
9002435e:	fa1f fa8a 	uxth.w	sl, sl
90024362:	b280      	uxth	r0, r0
90024364:	eba3 030a 	sub.w	r3, r3, sl
90024368:	fb08 f000 	mul.w	r0, r8, r0
9002436c:	b29b      	uxth	r3, r3
9002436e:	fb09 0303 	mla	r3, r9, r3, r0
90024372:	980f      	ldr	r0, [sp, #60]	; 0x3c
90024374:	fb0a 3300 	mla	r3, sl, r0, r3
90024378:	fb0c 3304 	mla	r3, ip, r4, r3
9002437c:	f3c3 2307 	ubfx	r3, r3, #8, #8
90024380:	2b00      	cmp	r3, #0
90024382:	f000 810b 	beq.w	9002459c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
90024386:	980b      	ldr	r0, [sp, #44]	; 0x2c
90024388:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9002438c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9002438e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
90024392:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
90024396:	f000 8114 	beq.w	900245c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
9002439a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9002439e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
900243a2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
900243a6:	fb0a fc0c 	mul.w	ip, sl, ip
900243aa:	fb09 f707 	mul.w	r7, r9, r7
900243ae:	ea06 195c 	and.w	r9, r6, ip, lsr #5
900243b2:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
900243b6:	f107 0b20 	add.w	fp, r7, #32
900243ba:	44cc      	add	ip, r9
900243bc:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
900243c0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
900243c4:	ea4f 2919 	mov.w	r9, r9, lsr #8
900243c8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
900243cc:	ea4c 0909 	orr.w	r9, ip, r9
900243d0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
900243d4:	8847      	ldrh	r7, [r0, #2]
900243d6:	d019      	beq.n	9002440c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
900243d8:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
900243dc:	ea4f 0ae8 	mov.w	sl, r8, asr #3
900243e0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
900243e4:	fb0a fc0c 	mul.w	ip, sl, ip
900243e8:	fb08 f807 	mul.w	r8, r8, r7
900243ec:	ea06 175c 	and.w	r7, r6, ip, lsr #5
900243f0:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
900243f4:	f108 0b20 	add.w	fp, r8, #32
900243f8:	44bc      	add	ip, r7
900243fa:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
900243fe:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
90024402:	0a3f      	lsrs	r7, r7, #8
90024404:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90024408:	ea4c 0707 	orr.w	r7, ip, r7
9002440c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
90024410:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90024414:	ea4f 4a07 	mov.w	sl, r7, lsl #16
90024418:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9002441c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
90024420:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90024424:	ea4c 0909 	orr.w	r9, ip, r9
90024428:	ea4a 0707 	orr.w	r7, sl, r7
9002442c:	2d00      	cmp	r5, #0
9002442e:	f000 80ca 	beq.w	900245c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
90024432:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
90024436:	3901      	subs	r1, #1
90024438:	0049      	lsls	r1, r1, #1
9002443a:	3102      	adds	r1, #2
9002443c:	eb00 0c01 	add.w	ip, r0, r1
90024440:	5a41      	ldrh	r1, [r0, r1]
90024442:	980f      	ldr	r0, [sp, #60]	; 0x3c
90024444:	28ff      	cmp	r0, #255	; 0xff
90024446:	d019      	beq.n	9002447c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
90024448:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
9002444c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9002444e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90024452:	ea4f 08e4 	mov.w	r8, r4, asr #3
90024456:	fb04 fa01 	mul.w	sl, r4, r1
9002445a:	fb08 f800 	mul.w	r8, r8, r0
9002445e:	f10a 0020 	add.w	r0, sl, #32
90024462:	ea06 1158 	and.w	r1, r6, r8, lsr #5
90024466:	f608 0801 	addw	r8, r8, #2049	; 0x801
9002446a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
9002446e:	4441      	add	r1, r8
90024470:	0a00      	lsrs	r0, r0, #8
90024472:	ea06 1151 	and.w	r1, r6, r1, lsr #5
90024476:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002447a:	4301      	orrs	r1, r0
9002447c:	9c10      	ldr	r4, [sp, #64]	; 0x40
9002447e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
90024482:	2cff      	cmp	r4, #255	; 0xff
90024484:	d01a      	beq.n	900244bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
90024486:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
9002448a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002448e:	ea4f 08e4 	mov.w	r8, r4, asr #3
90024492:	fb04 fa00 	mul.w	sl, r4, r0
90024496:	fb08 f80c 	mul.w	r8, r8, ip
9002449a:	f10a 0c20 	add.w	ip, sl, #32
9002449e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
900244a2:	f608 0801 	addw	r8, r8, #2049	; 0x801
900244a6:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
900244aa:	4440      	add	r0, r8
900244ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900244b0:	ea06 1050 	and.w	r0, r6, r0, lsr #5
900244b4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
900244b8:	ea40 000c 	orr.w	r0, r0, ip
900244bc:	fb15 fc02 	smulbb	ip, r5, r2
900244c0:	f1c5 0810 	rsb	r8, r5, #16
900244c4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
900244c8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
900244cc:	ea4f 0cec 	mov.w	ip, ip, asr #3
900244d0:	eba8 0802 	sub.w	r8, r8, r2
900244d4:	ea4f 4b00 	mov.w	fp, r0, lsl #16
900244d8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900244dc:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
900244e0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900244e4:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
900244e8:	ea4a 0101 	orr.w	r1, sl, r1
900244ec:	437a      	muls	r2, r7
900244ee:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
900244f2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
900244f6:	fb09 2208 	mla	r2, r9, r8, r2
900244fa:	ea4b 0000 	orr.w	r0, fp, r0
900244fe:	fb05 2201 	mla	r2, r5, r1, r2
90024502:	fb0c 2200 	mla	r2, ip, r0, r2
90024506:	0d57      	lsrs	r7, r2, #21
90024508:	0952      	lsrs	r2, r2, #5
9002450a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9002450e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90024512:	433a      	orrs	r2, r7
90024514:	2bff      	cmp	r3, #255	; 0xff
90024516:	b292      	uxth	r2, r2
90024518:	d102      	bne.n	90024520 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
9002451a:	9912      	ldr	r1, [sp, #72]	; 0x48
9002451c:	29ff      	cmp	r1, #255	; 0xff
9002451e:	d063      	beq.n	900245e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
90024520:	980a      	ldr	r0, [sp, #40]	; 0x28
90024522:	1215      	asrs	r5, r2, #8
90024524:	f8be 1000 	ldrh.w	r1, [lr]
90024528:	4343      	muls	r3, r0
9002452a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9002452c:	10cf      	asrs	r7, r1, #3
9002452e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90024532:	1c58      	adds	r0, r3, #1
90024534:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90024538:	eb00 2323 	add.w	r3, r0, r3, asr #8
9002453c:	1208      	asrs	r0, r1, #8
9002453e:	ea6f 2323 	mvn.w	r3, r3, asr #8
90024542:	00c9      	lsls	r1, r1, #3
90024544:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90024548:	b2db      	uxtb	r3, r3
9002454a:	b2c9      	uxtb	r1, r1
9002454c:	fb10 f003 	smulbb	r0, r0, r3
90024550:	fb11 f103 	smulbb	r1, r1, r3
90024554:	fb05 0504 	mla	r5, r5, r4, r0
90024558:	10d0      	asrs	r0, r2, #3
9002455a:	fb17 f703 	smulbb	r7, r7, r3
9002455e:	00d2      	lsls	r2, r2, #3
90024560:	b2ad      	uxth	r5, r5
90024562:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90024566:	b2d2      	uxtb	r2, r2
90024568:	fb00 7004 	mla	r0, r0, r4, r7
9002456c:	1c6b      	adds	r3, r5, #1
9002456e:	fb02 1204 	mla	r2, r2, r4, r1
90024572:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90024576:	b292      	uxth	r2, r2
90024578:	b280      	uxth	r0, r0
9002457a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9002457e:	1c57      	adds	r7, r2, #1
90024580:	eb07 2712 	add.w	r7, r7, r2, lsr #8
90024584:	f3c7 27c4 	ubfx	r7, r7, #11, #5
90024588:	433d      	orrs	r5, r7
9002458a:	1c47      	adds	r7, r0, #1
9002458c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
90024590:	097f      	lsrs	r7, r7, #5
90024592:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90024596:	433d      	orrs	r5, r7
90024598:	f8ae 5000 	strh.w	r5, [lr]
9002459c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9002459e:	f10e 0e02 	add.w	lr, lr, #2
900245a2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
900245a4:	4413      	add	r3, r2
900245a6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
900245a8:	9329      	str	r3, [sp, #164]	; 0xa4
900245aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900245ac:	441a      	add	r2, r3
900245ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
900245b0:	3b01      	subs	r3, #1
900245b2:	922a      	str	r2, [sp, #168]	; 0xa8
900245b4:	9313      	str	r3, [sp, #76]	; 0x4c
900245b6:	e61c      	b.n	900241f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
900245b8:	fb08 f000 	mul.w	r0, r8, r0
900245bc:	fb09 0303 	mla	r3, r9, r3, r0
900245c0:	e6dc      	b.n	9002437c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
900245c2:	46b9      	mov	r9, r7
900245c4:	e704      	b.n	900243d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
900245c6:	f1c2 0110 	rsb	r1, r2, #16
900245ca:	437a      	muls	r2, r7
900245cc:	fb09 2901 	mla	r9, r9, r1, r2
900245d0:	ea4f 0949 	mov.w	r9, r9, lsl #1
900245d4:	ea4f 5059 	mov.w	r0, r9, lsr #21
900245d8:	ea4f 1259 	mov.w	r2, r9, lsr #5
900245dc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900245e0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900245e4:	4302      	orrs	r2, r0
900245e6:	e795      	b.n	90024514 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
900245e8:	f8ae 2000 	strh.w	r2, [lr]
900245ec:	e7d6      	b.n	9002459c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
900245ee:	b017      	add	sp, #92	; 0x5c
900245f0:	ecbd 8b08 	vpop	{d8-d11}
900245f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900245f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
900245f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900245fc:	b085      	sub	sp, #20
900245fe:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
90024602:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
90024606:	9103      	str	r1, [sp, #12]
90024608:	2d00      	cmp	r5, #0
9002460a:	fb05 7106 	mla	r1, r5, r6, r7
9002460e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
90024612:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
90024616:	eb03 0441 	add.w	r4, r3, r1, lsl #1
9002461a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
9002461e:	eb02 0901 	add.w	r9, r2, r1
90024622:	9401      	str	r4, [sp, #4]
90024624:	f2c0 80c0 	blt.w	900247a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
90024628:	45a8      	cmp	r8, r5
9002462a:	f340 80bd 	ble.w	900247a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
9002462e:	2f00      	cmp	r7, #0
90024630:	f2c0 80b6 	blt.w	900247a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
90024634:	42be      	cmp	r6, r7
90024636:	f340 80b3 	ble.w	900247a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
9002463a:	f812 c001 	ldrb.w	ip, [r2, r1]
9002463e:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
90024642:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90024646:	d019      	beq.n	9002467c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
90024648:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
9002464c:	ea4f 02ec 	mov.w	r2, ip, asr #3
90024650:	435a      	muls	r2, r3
90024652:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
90024656:	f64f 011f 	movw	r1, #63519	; 0xf81f
9002465a:	fb0c f403 	mul.w	r4, ip, r3
9002465e:	ea01 1352 	and.w	r3, r1, r2, lsr #5
90024662:	f602 0201 	addw	r2, r2, #2049	; 0x801
90024666:	441a      	add	r2, r3
90024668:	f104 0320 	add.w	r3, r4, #32
9002466c:	eb03 2314 	add.w	r3, r3, r4, lsr #8
90024670:	ea01 1152 	and.w	r1, r1, r2, lsr #5
90024674:	0a1b      	lsrs	r3, r3, #8
90024676:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002467a:	4319      	orrs	r1, r3
9002467c:	b289      	uxth	r1, r1
9002467e:	1c7b      	adds	r3, r7, #1
90024680:	f100 8097 	bmi.w	900247b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
90024684:	429e      	cmp	r6, r3
90024686:	f340 8094 	ble.w	900247b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
9002468a:	2800      	cmp	r0, #0
9002468c:	f000 8094 	beq.w	900247b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
90024690:	f899 4001 	ldrb.w	r4, [r9, #1]
90024694:	9b01      	ldr	r3, [sp, #4]
90024696:	2cff      	cmp	r4, #255	; 0xff
90024698:	885b      	ldrh	r3, [r3, #2]
9002469a:	d01b      	beq.n	900246d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
9002469c:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
900246a0:	ea4f 0ae4 	mov.w	sl, r4, asr #3
900246a4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900246a8:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
900246ac:	fb0a f202 	mul.w	r2, sl, r2
900246b0:	fb04 fa03 	mul.w	sl, r4, r3
900246b4:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
900246b8:	f602 0201 	addw	r2, r2, #2049	; 0x801
900246bc:	441a      	add	r2, r3
900246be:	f10a 0320 	add.w	r3, sl, #32
900246c2:	eb03 231a 	add.w	r3, r3, sl, lsr #8
900246c6:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
900246ca:	0a1b      	lsrs	r3, r3, #8
900246cc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900246d0:	ea4b 0303 	orr.w	r3, fp, r3
900246d4:	b29b      	uxth	r3, r3
900246d6:	3501      	adds	r5, #1
900246d8:	d474      	bmi.n	900247c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
900246da:	45a8      	cmp	r8, r5
900246dc:	dd72      	ble.n	900247c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
900246de:	f1be 0f00 	cmp.w	lr, #0
900246e2:	f000 8111 	beq.w	90024908 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x310>
900246e6:	2f00      	cmp	r7, #0
900246e8:	db69      	blt.n	900247be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
900246ea:	42be      	cmp	r6, r7
900246ec:	dd67      	ble.n	900247be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
900246ee:	f819 5006 	ldrb.w	r5, [r9, r6]
900246f2:	9a01      	ldr	r2, [sp, #4]
900246f4:	2dff      	cmp	r5, #255	; 0xff
900246f6:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
900246fa:	d01c      	beq.n	90024736 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
900246fc:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
90024700:	ea4f 08e5 	mov.w	r8, r5, asr #3
90024704:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
90024708:	fb08 f802 	mul.w	r8, r8, r2
9002470c:	fb05 fa0b 	mul.w	sl, r5, fp
90024710:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
90024714:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
90024718:	f608 0801 	addw	r8, r8, #2049	; 0x801
9002471c:	4490      	add	r8, r2
9002471e:	f10a 0220 	add.w	r2, sl, #32
90024722:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
90024726:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
9002472a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002472e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90024732:	ea4b 0b0a 	orr.w	fp, fp, sl
90024736:	fa1f fb8b 	uxth.w	fp, fp
9002473a:	3701      	adds	r7, #1
9002473c:	d447      	bmi.n	900247ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
9002473e:	42be      	cmp	r6, r7
90024740:	dd45      	ble.n	900247ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
90024742:	2800      	cmp	r0, #0
90024744:	d046      	beq.n	900247d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
90024746:	3601      	adds	r6, #1
90024748:	9a01      	ldr	r2, [sp, #4]
9002474a:	f819 7006 	ldrb.w	r7, [r9, r6]
9002474e:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
90024752:	2fff      	cmp	r7, #255	; 0xff
90024754:	d01a      	beq.n	9002478c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
90024756:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
9002475a:	ea4f 08e7 	mov.w	r8, r7, asr #3
9002475e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90024762:	fb08 f806 	mul.w	r8, r8, r6
90024766:	fb07 f902 	mul.w	r9, r7, r2
9002476a:	f64f 021f 	movw	r2, #63519	; 0xf81f
9002476e:	ea02 1658 	and.w	r6, r2, r8, lsr #5
90024772:	f608 0801 	addw	r8, r8, #2049	; 0x801
90024776:	44b0      	add	r8, r6
90024778:	f109 0620 	add.w	r6, r9, #32
9002477c:	eb06 2619 	add.w	r6, r6, r9, lsr #8
90024780:	ea02 1258 	and.w	r2, r2, r8, lsr #5
90024784:	0a36      	lsrs	r6, r6, #8
90024786:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9002478a:	4332      	orrs	r2, r6
9002478c:	b292      	uxth	r2, r2
9002478e:	280f      	cmp	r0, #15
90024790:	d922      	bls.n	900247d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
90024792:	4b61      	ldr	r3, [pc, #388]	; (90024918 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
90024794:	f240 210d 	movw	r1, #525	; 0x20d
90024798:	4a60      	ldr	r2, [pc, #384]	; (9002491c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
9002479a:	4861      	ldr	r0, [pc, #388]	; (90024920 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
9002479c:	f004 fa4a 	bl	90028c34 <__assert_func>
900247a0:	f04f 0c00 	mov.w	ip, #0
900247a4:	4661      	mov	r1, ip
900247a6:	e76a      	b.n	9002467e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
900247a8:	2400      	movs	r4, #0
900247aa:	46a4      	mov	ip, r4
900247ac:	4623      	mov	r3, r4
900247ae:	4621      	mov	r1, r4
900247b0:	e791      	b.n	900246d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
900247b2:	2400      	movs	r4, #0
900247b4:	4623      	mov	r3, r4
900247b6:	e78e      	b.n	900246d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
900247b8:	4604      	mov	r4, r0
900247ba:	4603      	mov	r3, r0
900247bc:	e78b      	b.n	900246d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
900247be:	2500      	movs	r5, #0
900247c0:	46ab      	mov	fp, r5
900247c2:	e7ba      	b.n	9002473a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
900247c4:	2700      	movs	r7, #0
900247c6:	463d      	mov	r5, r7
900247c8:	463a      	mov	r2, r7
900247ca:	46bb      	mov	fp, r7
900247cc:	e7df      	b.n	9002478e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
900247ce:	2700      	movs	r7, #0
900247d0:	463a      	mov	r2, r7
900247d2:	e7dc      	b.n	9002478e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
900247d4:	4607      	mov	r7, r0
900247d6:	4602      	mov	r2, r0
900247d8:	f1be 0f0f 	cmp.w	lr, #15
900247dc:	d8d9      	bhi.n	90024792 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
900247de:	b286      	uxth	r6, r0
900247e0:	fa1f f98e 	uxth.w	r9, lr
900247e4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
900247e8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
900247ec:	fb06 f809 	mul.w	r8, r6, r9
900247f0:	0136      	lsls	r6, r6, #4
900247f2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900247f6:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
900247fa:	9601      	str	r6, [sp, #4]
900247fc:	ea4a 0101 	orr.w	r1, sl, r1
90024800:	ea4f 4a03 	mov.w	sl, r3, lsl #16
90024804:	fa1f f689 	uxth.w	r6, r9
90024808:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9002480c:	fb10 f90e 	smulbb	r9, r0, lr
90024810:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90024814:	9602      	str	r6, [sp, #8]
90024816:	460e      	mov	r6, r1
90024818:	ea4f 09e9 	mov.w	r9, r9, asr #3
9002481c:	f1ce 0110 	rsb	r1, lr, #16
90024820:	ea4a 0303 	orr.w	r3, sl, r3
90024824:	ea4f 4a02 	mov.w	sl, r2, lsl #16
90024828:	1a09      	subs	r1, r1, r0
9002482a:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
9002482e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90024832:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90024836:	4343      	muls	r3, r0
90024838:	eb09 0141 	add.w	r1, r9, r1, lsl #1
9002483c:	ea4a 0202 	orr.w	r2, sl, r2
90024840:	9802      	ldr	r0, [sp, #8]
90024842:	fb01 3106 	mla	r1, r1, r6, r3
90024846:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
9002484a:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
9002484e:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
90024852:	fb09 1302 	mla	r3, r9, r2, r1
90024856:	9901      	ldr	r1, [sp, #4]
90024858:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9002485c:	9a03      	ldr	r2, [sp, #12]
9002485e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
90024862:	ea4a 0b0b 	orr.w	fp, sl, fp
90024866:	8812      	ldrh	r2, [r2, #0]
90024868:	1a09      	subs	r1, r1, r0
9002486a:	9801      	ldr	r0, [sp, #4]
9002486c:	fb0e 3e0b 	mla	lr, lr, fp, r3
90024870:	eba0 0608 	sub.w	r6, r0, r8
90024874:	b289      	uxth	r1, r1
90024876:	ea4f 535e 	mov.w	r3, lr, lsr #21
9002487a:	b2b6      	uxth	r6, r6
9002487c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
90024880:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90024884:	4374      	muls	r4, r6
90024886:	10d0      	asrs	r0, r2, #3
90024888:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9002488c:	fb0c 4401 	mla	r4, ip, r1, r4
90024890:	9902      	ldr	r1, [sp, #8]
90024892:	ea43 0e0e 	orr.w	lr, r3, lr
90024896:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9002489a:	fb01 4505 	mla	r5, r1, r5, r4
9002489e:	1211      	asrs	r1, r2, #8
900248a0:	00d2      	lsls	r2, r2, #3
900248a2:	fb08 5707 	mla	r7, r8, r7, r5
900248a6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
900248aa:	b2d2      	uxtb	r2, r2
900248ac:	ea6f 2727 	mvn.w	r7, r7, asr #8
900248b0:	fa1f f38e 	uxth.w	r3, lr
900248b4:	b2ff      	uxtb	r7, r7
900248b6:	4379      	muls	r1, r7
900248b8:	4378      	muls	r0, r7
900248ba:	4357      	muls	r7, r2
900248bc:	1c4a      	adds	r2, r1, #1
900248be:	eb02 2211 	add.w	r2, r2, r1, lsr #8
900248c2:	1219      	asrs	r1, r3, #8
900248c4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
900248c8:	eb01 2112 	add.w	r1, r1, r2, lsr #8
900248cc:	4a15      	ldr	r2, [pc, #84]	; (90024924 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x32c>)
900248ce:	ea02 2101 	and.w	r1, r2, r1, lsl #8
900248d2:	1c42      	adds	r2, r0, #1
900248d4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
900248d8:	10da      	asrs	r2, r3, #3
900248da:	00db      	lsls	r3, r3, #3
900248dc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
900248e0:	b2db      	uxtb	r3, r3
900248e2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
900248e6:	00d2      	lsls	r2, r2, #3
900248e8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900248ec:	430a      	orrs	r2, r1
900248ee:	1c79      	adds	r1, r7, #1
900248f0:	eb01 2717 	add.w	r7, r1, r7, lsr #8
900248f4:	eb03 2317 	add.w	r3, r3, r7, lsr #8
900248f8:	f3c3 03c4 	ubfx	r3, r3, #3, #5
900248fc:	4313      	orrs	r3, r2
900248fe:	9a03      	ldr	r2, [sp, #12]
90024900:	8013      	strh	r3, [r2, #0]
90024902:	b005      	add	sp, #20
90024904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90024908:	280f      	cmp	r0, #15
9002490a:	f63f af42 	bhi.w	90024792 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
9002490e:	4677      	mov	r7, lr
90024910:	4675      	mov	r5, lr
90024912:	4672      	mov	r2, lr
90024914:	46f3      	mov	fp, lr
90024916:	e762      	b.n	900247de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
90024918:	900306ff 	.word	0x900306ff
9002491c:	90030cbd 	.word	0x90030cbd
90024920:	900307e8 	.word	0x900307e8
90024924:	fffff800 	.word	0xfffff800

90024928 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90024928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002492c:	ed2d 8b08 	vpush	{d8-d11}
90024930:	b093      	sub	sp, #76	; 0x4c
90024932:	eeb0 aa40 	vmov.f32	s20, s0
90024936:	eef0 9a60 	vmov.f32	s19, s1
9002493a:	9210      	str	r2, [sp, #64]	; 0x40
9002493c:	eeb0 9a41 	vmov.f32	s18, s2
90024940:	9a29      	ldr	r2, [sp, #164]	; 0xa4
90024942:	eeb0 8a62 	vmov.f32	s16, s5
90024946:	9011      	str	r0, [sp, #68]	; 0x44
90024948:	eef0 8a43 	vmov.f32	s17, s6
9002494c:	6850      	ldr	r0, [r2, #4]
9002494e:	eef0 ba44 	vmov.f32	s23, s8
90024952:	910e      	str	r1, [sp, #56]	; 0x38
90024954:	eeb0 ba64 	vmov.f32	s22, s9
90024958:	9306      	str	r3, [sp, #24]
9002495a:	eef0 aa45 	vmov.f32	s21, s10
9002495e:	6812      	ldr	r2, [r2, #0]
90024960:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
90024964:	fb00 1303 	mla	r3, r0, r3, r1
90024968:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9002496c:	9307      	str	r3, [sp, #28]
9002496e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90024970:	681b      	ldr	r3, [r3, #0]
90024972:	9308      	str	r3, [sp, #32]
90024974:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90024976:	685b      	ldr	r3, [r3, #4]
90024978:	9309      	str	r3, [sp, #36]	; 0x24
9002497a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9002497c:	2b00      	cmp	r3, #0
9002497e:	dc03      	bgt.n	90024988 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90024980:	9b10      	ldr	r3, [sp, #64]	; 0x40
90024982:	2b00      	cmp	r3, #0
90024984:	f340 83b8 	ble.w	900250f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
90024988:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9002498a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9002498e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90024992:	1e48      	subs	r0, r1, #1
90024994:	1e55      	subs	r5, r2, #1
90024996:	9b06      	ldr	r3, [sp, #24]
90024998:	2b00      	cmp	r3, #0
9002499a:	f340 819b 	ble.w	90024cd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
9002499e:	9e25      	ldr	r6, [sp, #148]	; 0x94
900249a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
900249a2:	1436      	asrs	r6, r6, #16
900249a4:	ea4f 4323 	mov.w	r3, r3, asr #16
900249a8:	d406      	bmi.n	900249b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900249aa:	4286      	cmp	r6, r0
900249ac:	da04      	bge.n	900249b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900249ae:	2b00      	cmp	r3, #0
900249b0:	db02      	blt.n	900249b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900249b2:	42ab      	cmp	r3, r5
900249b4:	f2c0 818f 	blt.w	90024cd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
900249b8:	3601      	adds	r6, #1
900249ba:	f100 817c 	bmi.w	90024cb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
900249be:	42b1      	cmp	r1, r6
900249c0:	f2c0 8179 	blt.w	90024cb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
900249c4:	3301      	adds	r3, #1
900249c6:	f100 8176 	bmi.w	90024cb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
900249ca:	429a      	cmp	r2, r3
900249cc:	f2c0 8173 	blt.w	90024cb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
900249d0:	9b06      	ldr	r3, [sp, #24]
900249d2:	f64f 061f 	movw	r6, #63519	; 0xf81f
900249d6:	9f07      	ldr	r7, [sp, #28]
900249d8:	930f      	str	r3, [sp, #60]	; 0x3c
900249da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
900249dc:	2b00      	cmp	r3, #0
900249de:	f340 819c 	ble.w	90024d1a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
900249e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
900249e4:	9d25      	ldr	r5, [sp, #148]	; 0x94
900249e6:	1418      	asrs	r0, r3, #16
900249e8:	9b25      	ldr	r3, [sp, #148]	; 0x94
900249ea:	142d      	asrs	r5, r5, #16
900249ec:	f3c3 3103 	ubfx	r1, r3, #12, #4
900249f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
900249f2:	f3c3 3c03 	ubfx	ip, r3, #12, #4
900249f6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900249f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
900249fc:	f100 81f0 	bmi.w	90024de0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
90024a00:	f102 3eff 	add.w	lr, r2, #4294967295
90024a04:	4575      	cmp	r5, lr
90024a06:	f280 81eb 	bge.w	90024de0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
90024a0a:	2800      	cmp	r0, #0
90024a0c:	f2c0 81e8 	blt.w	90024de0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
90024a10:	f103 3eff 	add.w	lr, r3, #4294967295
90024a14:	4570      	cmp	r0, lr
90024a16:	f280 81e3 	bge.w	90024de0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
90024a1a:	b212      	sxth	r2, r2
90024a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
90024a1e:	fa1f fe81 	uxth.w	lr, r1
90024a22:	fb00 5002 	mla	r0, r0, r2, r5
90024a26:	ea4f 150e 	mov.w	r5, lr, lsl #4
90024a2a:	eb03 0a00 	add.w	sl, r3, r0
90024a2e:	f813 9000 	ldrb.w	r9, [r3, r0]
90024a32:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
90024a36:	f89a 8001 	ldrb.w	r8, [sl, #1]
90024a3a:	b29b      	uxth	r3, r3
90024a3c:	f1bc 0f00 	cmp.w	ip, #0
90024a40:	f000 81b1 	beq.w	90024da6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47e>
90024a44:	f81a 4002 	ldrb.w	r4, [sl, r2]
90024a48:	eb0a 0b02 	add.w	fp, sl, r2
90024a4c:	fa1f fa8c 	uxth.w	sl, ip
90024a50:	940a      	str	r4, [sp, #40]	; 0x28
90024a52:	fb0a fe0e 	mul.w	lr, sl, lr
90024a56:	f89b 4001 	ldrb.w	r4, [fp, #1]
90024a5a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
90024a5e:	eba5 050e 	sub.w	r5, r5, lr
90024a62:	940b      	str	r4, [sp, #44]	; 0x2c
90024a64:	fa1f fa8a 	uxth.w	sl, sl
90024a68:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90024a6a:	b2ad      	uxth	r5, r5
90024a6c:	eba3 030a 	sub.w	r3, r3, sl
90024a70:	fb08 f505 	mul.w	r5, r8, r5
90024a74:	b29b      	uxth	r3, r3
90024a76:	fb09 5303 	mla	r3, r9, r3, r5
90024a7a:	fb0a 3304 	mla	r3, sl, r4, r3
90024a7e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90024a80:	fb0e 3304 	mla	r3, lr, r4, r3
90024a84:	f3c3 2307 	ubfx	r3, r3, #8, #8
90024a88:	2b00      	cmp	r3, #0
90024a8a:	f000 8107 	beq.w	90024c9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
90024a8e:	9c08      	ldr	r4, [sp, #32]
90024a90:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90024a94:	eb04 0540 	add.w	r5, r4, r0, lsl #1
90024a98:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
90024a9c:	f000 8188 	beq.w	90024db0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
90024aa0:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
90024aa4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
90024aa8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90024aac:	fb0a fe0e 	mul.w	lr, sl, lr
90024ab0:	fb09 f000 	mul.w	r0, r9, r0
90024ab4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
90024ab8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
90024abc:	f100 0b20 	add.w	fp, r0, #32
90024ac0:	44ce      	add	lr, r9
90024ac2:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
90024ac6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
90024aca:	ea4f 2919 	mov.w	r9, r9, lsr #8
90024ace:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90024ad2:	ea4e 0909 	orr.w	r9, lr, r9
90024ad6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
90024ada:	8868      	ldrh	r0, [r5, #2]
90024adc:	d019      	beq.n	90024b12 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
90024ade:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
90024ae2:	ea4f 0ae8 	mov.w	sl, r8, asr #3
90024ae6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90024aea:	fb0a fe0e 	mul.w	lr, sl, lr
90024aee:	fb08 f800 	mul.w	r8, r8, r0
90024af2:	ea06 105e 	and.w	r0, r6, lr, lsr #5
90024af6:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
90024afa:	f108 0b20 	add.w	fp, r8, #32
90024afe:	4486      	add	lr, r0
90024b00:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
90024b04:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
90024b08:	0a00      	lsrs	r0, r0, #8
90024b0a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90024b0e:	ea4e 0000 	orr.w	r0, lr, r0
90024b12:	ea4f 4e09 	mov.w	lr, r9, lsl #16
90024b16:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90024b1a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
90024b1e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90024b22:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
90024b26:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90024b2a:	ea4e 0909 	orr.w	r9, lr, r9
90024b2e:	ea4a 0000 	orr.w	r0, sl, r0
90024b32:	f1bc 0f00 	cmp.w	ip, #0
90024b36:	f000 813d 	beq.w	90024db4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
90024b3a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
90024b3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90024b40:	3a01      	subs	r2, #1
90024b42:	2cff      	cmp	r4, #255	; 0xff
90024b44:	ea4f 0242 	mov.w	r2, r2, lsl #1
90024b48:	f102 0202 	add.w	r2, r2, #2
90024b4c:	eb05 0e02 	add.w	lr, r5, r2
90024b50:	5aaa      	ldrh	r2, [r5, r2]
90024b52:	d018      	beq.n	90024b86 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
90024b54:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
90024b58:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90024b5c:	ea4f 08e4 	mov.w	r8, r4, asr #3
90024b60:	fb04 fa02 	mul.w	sl, r4, r2
90024b64:	fb08 f805 	mul.w	r8, r8, r5
90024b68:	f10a 0520 	add.w	r5, sl, #32
90024b6c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
90024b70:	f608 0801 	addw	r8, r8, #2049	; 0x801
90024b74:	eb05 251a 	add.w	r5, r5, sl, lsr #8
90024b78:	4442      	add	r2, r8
90024b7a:	0a2d      	lsrs	r5, r5, #8
90024b7c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
90024b80:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90024b84:	432a      	orrs	r2, r5
90024b86:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90024b88:	f8be 5002 	ldrh.w	r5, [lr, #2]
90024b8c:	2cff      	cmp	r4, #255	; 0xff
90024b8e:	d01a      	beq.n	90024bc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
90024b90:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
90024b94:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90024b98:	ea4f 08e4 	mov.w	r8, r4, asr #3
90024b9c:	fb04 fa05 	mul.w	sl, r4, r5
90024ba0:	fb08 f80e 	mul.w	r8, r8, lr
90024ba4:	f10a 0e20 	add.w	lr, sl, #32
90024ba8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
90024bac:	f608 0801 	addw	r8, r8, #2049	; 0x801
90024bb0:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
90024bb4:	4445      	add	r5, r8
90024bb6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90024bba:	ea06 1555 	and.w	r5, r6, r5, lsr #5
90024bbe:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
90024bc2:	ea45 050e 	orr.w	r5, r5, lr
90024bc6:	fb1c fe01 	smulbb	lr, ip, r1
90024bca:	f1cc 0810 	rsb	r8, ip, #16
90024bce:	ea4f 4a02 	mov.w	sl, r2, lsl #16
90024bd2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90024bd6:	ea4f 0eee 	mov.w	lr, lr, asr #3
90024bda:	eba8 0801 	sub.w	r8, r8, r1
90024bde:	ea4f 4b05 	mov.w	fp, r5, lsl #16
90024be2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90024be6:	ebce 0141 	rsb	r1, lr, r1, lsl #1
90024bea:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
90024bee:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
90024bf2:	ea4a 0202 	orr.w	r2, sl, r2
90024bf6:	4341      	muls	r1, r0
90024bf8:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
90024bfc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90024c00:	fb09 1108 	mla	r1, r9, r8, r1
90024c04:	ea4b 0505 	orr.w	r5, fp, r5
90024c08:	fb0c 1102 	mla	r1, ip, r2, r1
90024c0c:	fb0e 1e05 	mla	lr, lr, r5, r1
90024c10:	ea4f 525e 	mov.w	r2, lr, lsr #21
90024c14:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
90024c18:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90024c1c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
90024c20:	ea42 0e0e 	orr.w	lr, r2, lr
90024c24:	fa1f f28e 	uxth.w	r2, lr
90024c28:	2bff      	cmp	r3, #255	; 0xff
90024c2a:	f000 80d7 	beq.w	90024ddc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
90024c2e:	f8b7 c000 	ldrh.w	ip, [r7]
90024c32:	43db      	mvns	r3, r3
90024c34:	ea4f 202c 	mov.w	r0, ip, asr #8
90024c38:	fa5f fe83 	uxtb.w	lr, r3
90024c3c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90024c40:	ea4f 05ec 	mov.w	r5, ip, asr #3
90024c44:	ea4f 03cc 	mov.w	r3, ip, lsl #3
90024c48:	fb00 f00e 	mul.w	r0, r0, lr
90024c4c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
90024c50:	b2db      	uxtb	r3, r3
90024c52:	1c41      	adds	r1, r0, #1
90024c54:	fb05 f50e 	mul.w	r5, r5, lr
90024c58:	fb03 f30e 	mul.w	r3, r3, lr
90024c5c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
90024c60:	1210      	asrs	r0, r2, #8
90024c62:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90024c66:	eb00 2011 	add.w	r0, r0, r1, lsr #8
90024c6a:	496c      	ldr	r1, [pc, #432]	; (90024e1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>)
90024c6c:	ea01 2000 	and.w	r0, r1, r0, lsl #8
90024c70:	1c69      	adds	r1, r5, #1
90024c72:	eb01 2515 	add.w	r5, r1, r5, lsr #8
90024c76:	10d1      	asrs	r1, r2, #3
90024c78:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90024c7c:	eb01 2115 	add.w	r1, r1, r5, lsr #8
90024c80:	00c9      	lsls	r1, r1, #3
90024c82:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90024c86:	4301      	orrs	r1, r0
90024c88:	1c58      	adds	r0, r3, #1
90024c8a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
90024c8e:	00d3      	lsls	r3, r2, #3
90024c90:	b2db      	uxtb	r3, r3
90024c92:	eb03 2310 	add.w	r3, r3, r0, lsr #8
90024c96:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
90024c9a:	803b      	strh	r3, [r7, #0]
90024c9c:	9b25      	ldr	r3, [sp, #148]	; 0x94
90024c9e:	3702      	adds	r7, #2
90024ca0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
90024ca2:	4413      	add	r3, r2
90024ca4:	9a26      	ldr	r2, [sp, #152]	; 0x98
90024ca6:	9325      	str	r3, [sp, #148]	; 0x94
90024ca8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90024caa:	441a      	add	r2, r3
90024cac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90024cae:	3b01      	subs	r3, #1
90024cb0:	9226      	str	r2, [sp, #152]	; 0x98
90024cb2:	930f      	str	r3, [sp, #60]	; 0x3c
90024cb4:	e691      	b.n	900249da <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
90024cb6:	9b25      	ldr	r3, [sp, #148]	; 0x94
90024cb8:	9e27      	ldr	r6, [sp, #156]	; 0x9c
90024cba:	9c26      	ldr	r4, [sp, #152]	; 0x98
90024cbc:	4433      	add	r3, r6
90024cbe:	9325      	str	r3, [sp, #148]	; 0x94
90024cc0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90024cc2:	441c      	add	r4, r3
90024cc4:	9b06      	ldr	r3, [sp, #24]
90024cc6:	3b01      	subs	r3, #1
90024cc8:	9426      	str	r4, [sp, #152]	; 0x98
90024cca:	9306      	str	r3, [sp, #24]
90024ccc:	9b07      	ldr	r3, [sp, #28]
90024cce:	3302      	adds	r3, #2
90024cd0:	9307      	str	r3, [sp, #28]
90024cd2:	e660      	b.n	90024996 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90024cd4:	d028      	beq.n	90024d28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
90024cd6:	9b06      	ldr	r3, [sp, #24]
90024cd8:	9827      	ldr	r0, [sp, #156]	; 0x9c
90024cda:	3b01      	subs	r3, #1
90024cdc:	9d25      	ldr	r5, [sp, #148]	; 0x94
90024cde:	fb00 5003 	mla	r0, r0, r3, r5
90024ce2:	1400      	asrs	r0, r0, #16
90024ce4:	f53f ae74 	bmi.w	900249d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
90024ce8:	3901      	subs	r1, #1
90024cea:	4288      	cmp	r0, r1
90024cec:	f6bf ae70 	bge.w	900249d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
90024cf0:	9928      	ldr	r1, [sp, #160]	; 0xa0
90024cf2:	9826      	ldr	r0, [sp, #152]	; 0x98
90024cf4:	fb01 0303 	mla	r3, r1, r3, r0
90024cf8:	141b      	asrs	r3, r3, #16
90024cfa:	f53f ae69 	bmi.w	900249d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
90024cfe:	3a01      	subs	r2, #1
90024d00:	4293      	cmp	r3, r2
90024d02:	f6bf ae65 	bge.w	900249d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
90024d06:	9b06      	ldr	r3, [sp, #24]
90024d08:	f64f 061f 	movw	r6, #63519	; 0xf81f
90024d0c:	f8dd e01c 	ldr.w	lr, [sp, #28]
90024d10:	930f      	str	r3, [sp, #60]	; 0x3c
90024d12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90024d14:	2b00      	cmp	r3, #0
90024d16:	f300 8083 	bgt.w	90024e20 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f8>
90024d1a:	9b06      	ldr	r3, [sp, #24]
90024d1c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
90024d20:	9b07      	ldr	r3, [sp, #28]
90024d22:	eb03 0344 	add.w	r3, r3, r4, lsl #1
90024d26:	9307      	str	r3, [sp, #28]
90024d28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90024d2a:	2b00      	cmp	r3, #0
90024d2c:	f340 81e4 	ble.w	900250f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
90024d30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90024d34:	9b24      	ldr	r3, [sp, #144]	; 0x90
90024d36:	ee3a aa2b 	vadd.f32	s20, s20, s23
90024d3a:	ee79 9a8b 	vadd.f32	s19, s19, s22
90024d3e:	eef0 6a48 	vmov.f32	s13, s16
90024d42:	eec7 7a0a 	vdiv.f32	s15, s14, s20
90024d46:	ee39 9a2a 	vadd.f32	s18, s18, s21
90024d4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90024d4e:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
90024d52:	eef0 6a68 	vmov.f32	s13, s17
90024d56:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90024d5a:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
90024d5e:	ee29 7aa7 	vmul.f32	s14, s19, s15
90024d62:	ee69 7a27 	vmul.f32	s15, s18, s15
90024d66:	ee37 8a48 	vsub.f32	s16, s14, s16
90024d6a:	ee77 8ae8 	vsub.f32	s17, s15, s17
90024d6e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
90024d72:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
90024d76:	ee18 2a10 	vmov	r2, s16
90024d7a:	eeb0 8a47 	vmov.f32	s16, s14
90024d7e:	fb92 f3f3 	sdiv	r3, r2, r3
90024d82:	ee18 2a90 	vmov	r2, s17
90024d86:	9327      	str	r3, [sp, #156]	; 0x9c
90024d88:	9b24      	ldr	r3, [sp, #144]	; 0x90
90024d8a:	eef0 8a67 	vmov.f32	s17, s15
90024d8e:	fb92 f3f3 	sdiv	r3, r2, r3
90024d92:	9328      	str	r3, [sp, #160]	; 0xa0
90024d94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90024d96:	9a10      	ldr	r2, [sp, #64]	; 0x40
90024d98:	3b01      	subs	r3, #1
90024d9a:	930e      	str	r3, [sp, #56]	; 0x38
90024d9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
90024d9e:	bf08      	it	eq
90024da0:	4613      	moveq	r3, r2
90024da2:	9306      	str	r3, [sp, #24]
90024da4:	e5e9      	b.n	9002497a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
90024da6:	fb08 f505 	mul.w	r5, r8, r5
90024daa:	fb09 5303 	mla	r3, r9, r3, r5
90024dae:	e669      	b.n	90024a84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
90024db0:	4681      	mov	r9, r0
90024db2:	e690      	b.n	90024ad6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
90024db4:	f1c1 0210 	rsb	r2, r1, #16
90024db8:	4341      	muls	r1, r0
90024dba:	fb09 1902 	mla	r9, r9, r2, r1
90024dbe:	ea4f 0949 	mov.w	r9, r9, lsl #1
90024dc2:	ea4f 5259 	mov.w	r2, r9, lsr #21
90024dc6:	ea4f 1959 	mov.w	r9, r9, lsr #5
90024dca:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90024dce:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90024dd2:	ea42 0909 	orr.w	r9, r2, r9
90024dd6:	fa1f f289 	uxth.w	r2, r9
90024dda:	e725      	b.n	90024c28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
90024ddc:	803a      	strh	r2, [r7, #0]
90024dde:	e75d      	b.n	90024c9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
90024de0:	f115 0e01 	adds.w	lr, r5, #1
90024de4:	f53f af5a 	bmi.w	90024c9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
90024de8:	4572      	cmp	r2, lr
90024dea:	f6ff af57 	blt.w	90024c9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
90024dee:	f110 0e01 	adds.w	lr, r0, #1
90024df2:	f53f af53 	bmi.w	90024c9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
90024df6:	4573      	cmp	r3, lr
90024df8:	f6ff af50 	blt.w	90024c9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
90024dfc:	b21b      	sxth	r3, r3
90024dfe:	b212      	sxth	r2, r2
90024e00:	9301      	str	r3, [sp, #4]
90024e02:	9200      	str	r2, [sp, #0]
90024e04:	e9cd 1c04 	strd	r1, ip, [sp, #16]
90024e08:	e9cd 5002 	strd	r5, r0, [sp, #8]
90024e0c:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
90024e10:	4639      	mov	r1, r7
90024e12:	9811      	ldr	r0, [sp, #68]	; 0x44
90024e14:	f7ff fbf0 	bl	900245f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
90024e18:	e740      	b.n	90024c9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
90024e1a:	bf00      	nop
90024e1c:	fffff800 	.word	0xfffff800
90024e20:	9b25      	ldr	r3, [sp, #148]	; 0x94
90024e22:	f3c3 3203 	ubfx	r2, r3, #12, #4
90024e26:	9b26      	ldr	r3, [sp, #152]	; 0x98
90024e28:	f3c3 3503 	ubfx	r5, r3, #12, #4
90024e2c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90024e2e:	fa1f fc82 	uxth.w	ip, r2
90024e32:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90024e36:	9b26      	ldr	r3, [sp, #152]	; 0x98
90024e38:	ea4f 100c 	mov.w	r0, ip, lsl #4
90024e3c:	141f      	asrs	r7, r3, #16
90024e3e:	9b25      	ldr	r3, [sp, #148]	; 0x94
90024e40:	141b      	asrs	r3, r3, #16
90024e42:	fb01 3707 	mla	r7, r1, r7, r3
90024e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
90024e48:	eb03 0a07 	add.w	sl, r3, r7
90024e4c:	f813 9007 	ldrb.w	r9, [r3, r7]
90024e50:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
90024e54:	f89a 8001 	ldrb.w	r8, [sl, #1]
90024e58:	b29b      	uxth	r3, r3
90024e5a:	2d00      	cmp	r5, #0
90024e5c:	f000 8131 	beq.w	900250c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x79a>
90024e60:	f81a 4001 	ldrb.w	r4, [sl, r1]
90024e64:	eb0a 0b01 	add.w	fp, sl, r1
90024e68:	fa1f fa85 	uxth.w	sl, r5
90024e6c:	940c      	str	r4, [sp, #48]	; 0x30
90024e6e:	fb0a fc0c 	mul.w	ip, sl, ip
90024e72:	f89b 4001 	ldrb.w	r4, [fp, #1]
90024e76:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
90024e7a:	eba0 000c 	sub.w	r0, r0, ip
90024e7e:	940d      	str	r4, [sp, #52]	; 0x34
90024e80:	fa1f fa8a 	uxth.w	sl, sl
90024e84:	b280      	uxth	r0, r0
90024e86:	eba3 030a 	sub.w	r3, r3, sl
90024e8a:	fb08 f000 	mul.w	r0, r8, r0
90024e8e:	b29b      	uxth	r3, r3
90024e90:	fb09 0303 	mla	r3, r9, r3, r0
90024e94:	980c      	ldr	r0, [sp, #48]	; 0x30
90024e96:	fb0a 3300 	mla	r3, sl, r0, r3
90024e9a:	fb0c 3304 	mla	r3, ip, r4, r3
90024e9e:	f3c3 2307 	ubfx	r3, r3, #8, #8
90024ea2:	2b00      	cmp	r3, #0
90024ea4:	f000 80ff 	beq.w	900250a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
90024ea8:	9808      	ldr	r0, [sp, #32]
90024eaa:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90024eae:	9c08      	ldr	r4, [sp, #32]
90024eb0:	eb00 0047 	add.w	r0, r0, r7, lsl #1
90024eb4:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
90024eb8:	f000 8108 	beq.w	900250cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
90024ebc:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
90024ec0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
90024ec4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90024ec8:	fb0a fc0c 	mul.w	ip, sl, ip
90024ecc:	fb09 f707 	mul.w	r7, r9, r7
90024ed0:	ea06 195c 	and.w	r9, r6, ip, lsr #5
90024ed4:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
90024ed8:	f107 0b20 	add.w	fp, r7, #32
90024edc:	44cc      	add	ip, r9
90024ede:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
90024ee2:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
90024ee6:	ea4f 2919 	mov.w	r9, r9, lsr #8
90024eea:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90024eee:	ea4c 0909 	orr.w	r9, ip, r9
90024ef2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
90024ef6:	8847      	ldrh	r7, [r0, #2]
90024ef8:	d019      	beq.n	90024f2e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x606>
90024efa:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
90024efe:	ea4f 0ae8 	mov.w	sl, r8, asr #3
90024f02:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90024f06:	fb0a fc0c 	mul.w	ip, sl, ip
90024f0a:	fb08 f807 	mul.w	r8, r8, r7
90024f0e:	ea06 175c 	and.w	r7, r6, ip, lsr #5
90024f12:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
90024f16:	f108 0b20 	add.w	fp, r8, #32
90024f1a:	44bc      	add	ip, r7
90024f1c:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
90024f20:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
90024f24:	0a3f      	lsrs	r7, r7, #8
90024f26:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90024f2a:	ea4c 0707 	orr.w	r7, ip, r7
90024f2e:	ea4f 4c09 	mov.w	ip, r9, lsl #16
90024f32:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90024f36:	ea4f 4a07 	mov.w	sl, r7, lsl #16
90024f3a:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
90024f3e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
90024f42:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90024f46:	ea4c 0909 	orr.w	r9, ip, r9
90024f4a:	ea4a 0707 	orr.w	r7, sl, r7
90024f4e:	2d00      	cmp	r5, #0
90024f50:	f000 80be 	beq.w	900250d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
90024f54:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
90024f58:	3901      	subs	r1, #1
90024f5a:	0049      	lsls	r1, r1, #1
90024f5c:	3102      	adds	r1, #2
90024f5e:	eb00 0c01 	add.w	ip, r0, r1
90024f62:	5a41      	ldrh	r1, [r0, r1]
90024f64:	980c      	ldr	r0, [sp, #48]	; 0x30
90024f66:	28ff      	cmp	r0, #255	; 0xff
90024f68:	d019      	beq.n	90024f9e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
90024f6a:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
90024f6e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90024f70:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90024f74:	ea4f 08e4 	mov.w	r8, r4, asr #3
90024f78:	fb04 fa01 	mul.w	sl, r4, r1
90024f7c:	fb08 f800 	mul.w	r8, r8, r0
90024f80:	f10a 0020 	add.w	r0, sl, #32
90024f84:	ea06 1158 	and.w	r1, r6, r8, lsr #5
90024f88:	f608 0801 	addw	r8, r8, #2049	; 0x801
90024f8c:	eb00 201a 	add.w	r0, r0, sl, lsr #8
90024f90:	4441      	add	r1, r8
90024f92:	0a00      	lsrs	r0, r0, #8
90024f94:	ea06 1151 	and.w	r1, r6, r1, lsr #5
90024f98:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90024f9c:	4301      	orrs	r1, r0
90024f9e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90024fa0:	f8bc 0002 	ldrh.w	r0, [ip, #2]
90024fa4:	2cff      	cmp	r4, #255	; 0xff
90024fa6:	d01a      	beq.n	90024fde <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
90024fa8:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
90024fac:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90024fb0:	ea4f 08e4 	mov.w	r8, r4, asr #3
90024fb4:	fb04 fa00 	mul.w	sl, r4, r0
90024fb8:	fb08 f80c 	mul.w	r8, r8, ip
90024fbc:	f10a 0c20 	add.w	ip, sl, #32
90024fc0:	ea06 1058 	and.w	r0, r6, r8, lsr #5
90024fc4:	f608 0801 	addw	r8, r8, #2049	; 0x801
90024fc8:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
90024fcc:	4440      	add	r0, r8
90024fce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90024fd2:	ea06 1050 	and.w	r0, r6, r0, lsr #5
90024fd6:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90024fda:	ea40 000c 	orr.w	r0, r0, ip
90024fde:	fb15 fc02 	smulbb	ip, r5, r2
90024fe2:	f1c5 0810 	rsb	r8, r5, #16
90024fe6:	ea4f 4a01 	mov.w	sl, r1, lsl #16
90024fea:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90024fee:	ea4f 0cec 	mov.w	ip, ip, asr #3
90024ff2:	eba8 0802 	sub.w	r8, r8, r2
90024ff6:	ea4f 4b00 	mov.w	fp, r0, lsl #16
90024ffa:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90024ffe:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
90025002:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90025006:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
9002500a:	ea4a 0101 	orr.w	r1, sl, r1
9002500e:	437a      	muls	r2, r7
90025010:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
90025014:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90025018:	fb09 2208 	mla	r2, r9, r8, r2
9002501c:	ea4b 0000 	orr.w	r0, fp, r0
90025020:	fb05 2201 	mla	r2, r5, r1, r2
90025024:	fb0c 2200 	mla	r2, ip, r0, r2
90025028:	0d57      	lsrs	r7, r2, #21
9002502a:	0952      	lsrs	r2, r2, #5
9002502c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90025030:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90025034:	433a      	orrs	r2, r7
90025036:	2bff      	cmp	r3, #255	; 0xff
90025038:	b292      	uxth	r2, r2
9002503a:	d05a      	beq.n	900250f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ca>
9002503c:	f8be 7000 	ldrh.w	r7, [lr]
90025040:	43db      	mvns	r3, r3
90025042:	4c30      	ldr	r4, [pc, #192]	; (90025104 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>)
90025044:	1238      	asrs	r0, r7, #8
90025046:	fa5f fc83 	uxtb.w	ip, r3
9002504a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9002504e:	10fd      	asrs	r5, r7, #3
90025050:	00fb      	lsls	r3, r7, #3
90025052:	fb00 f00c 	mul.w	r0, r0, ip
90025056:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9002505a:	b2db      	uxtb	r3, r3
9002505c:	fb05 f10c 	mul.w	r1, r5, ip
90025060:	1c45      	adds	r5, r0, #1
90025062:	fb03 f30c 	mul.w	r3, r3, ip
90025066:	eb05 2010 	add.w	r0, r5, r0, lsr #8
9002506a:	1215      	asrs	r5, r2, #8
9002506c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90025070:	eb05 2010 	add.w	r0, r5, r0, lsr #8
90025074:	1c4d      	adds	r5, r1, #1
90025076:	eb05 2511 	add.w	r5, r5, r1, lsr #8
9002507a:	10d1      	asrs	r1, r2, #3
9002507c:	ea04 2000 	and.w	r0, r4, r0, lsl #8
90025080:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90025084:	00d2      	lsls	r2, r2, #3
90025086:	eb01 2115 	add.w	r1, r1, r5, lsr #8
9002508a:	00c9      	lsls	r1, r1, #3
9002508c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90025090:	4308      	orrs	r0, r1
90025092:	1c59      	adds	r1, r3, #1
90025094:	eb01 2313 	add.w	r3, r1, r3, lsr #8
90025098:	b2d1      	uxtb	r1, r2
9002509a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
9002509e:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
900250a2:	f8ae 0000 	strh.w	r0, [lr]
900250a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
900250a8:	f10e 0e02 	add.w	lr, lr, #2
900250ac:	9a27      	ldr	r2, [sp, #156]	; 0x9c
900250ae:	4413      	add	r3, r2
900250b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
900250b2:	9325      	str	r3, [sp, #148]	; 0x94
900250b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900250b6:	441a      	add	r2, r3
900250b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
900250ba:	3b01      	subs	r3, #1
900250bc:	9226      	str	r2, [sp, #152]	; 0x98
900250be:	930f      	str	r3, [sp, #60]	; 0x3c
900250c0:	e627      	b.n	90024d12 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
900250c2:	fb08 f000 	mul.w	r0, r8, r0
900250c6:	fb09 0303 	mla	r3, r9, r3, r0
900250ca:	e6e8      	b.n	90024e9e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x576>
900250cc:	46b9      	mov	r9, r7
900250ce:	e710      	b.n	90024ef2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
900250d0:	f1c2 0110 	rsb	r1, r2, #16
900250d4:	437a      	muls	r2, r7
900250d6:	fb09 2901 	mla	r9, r9, r1, r2
900250da:	ea4f 0949 	mov.w	r9, r9, lsl #1
900250de:	ea4f 5059 	mov.w	r0, r9, lsr #21
900250e2:	ea4f 1259 	mov.w	r2, r9, lsr #5
900250e6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900250ea:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900250ee:	4302      	orrs	r2, r0
900250f0:	e7a1      	b.n	90025036 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70e>
900250f2:	f8ae 2000 	strh.w	r2, [lr]
900250f6:	e7d6      	b.n	900250a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
900250f8:	b013      	add	sp, #76	; 0x4c
900250fa:	ecbd 8b08 	vpop	{d8-d11}
900250fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90025102:	bf00      	nop
90025104:	fffff800 	.word	0xfffff800

90025108 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
90025108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9002510c:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
90025110:	f9bd a020 	ldrsh.w	sl, [sp, #32]
90025114:	fb0c 4e03 	mla	lr, ip, r3, r4
90025118:	f1bc 0f00 	cmp.w	ip, #0
9002511c:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
90025120:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
90025124:	eb02 084e 	add.w	r8, r2, lr, lsl #1
90025128:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
9002512c:	8808      	ldrh	r0, [r1, #0]
9002512e:	db2f      	blt.n	90025190 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
90025130:	45e2      	cmp	sl, ip
90025132:	dd2d      	ble.n	90025190 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
90025134:	2c00      	cmp	r4, #0
90025136:	db29      	blt.n	9002518c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
90025138:	42a3      	cmp	r3, r4
9002513a:	dd27      	ble.n	9002518c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
9002513c:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
90025140:	1c62      	adds	r2, r4, #1
90025142:	d428      	bmi.n	90025196 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
90025144:	4293      	cmp	r3, r2
90025146:	dd26      	ble.n	90025196 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
90025148:	b32f      	cbz	r7, 90025196 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
9002514a:	f8b8 e002 	ldrh.w	lr, [r8, #2]
9002514e:	f11c 0c01 	adds.w	ip, ip, #1
90025152:	d424      	bmi.n	9002519e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
90025154:	45e2      	cmp	sl, ip
90025156:	dd22      	ble.n	9002519e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
90025158:	2e00      	cmp	r6, #0
9002515a:	f000 809c 	beq.w	90025296 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18e>
9002515e:	2c00      	cmp	r4, #0
90025160:	db1b      	blt.n	9002519a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
90025162:	42a3      	cmp	r3, r4
90025164:	dd19      	ble.n	9002519a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
90025166:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
9002516a:	3401      	adds	r4, #1
9002516c:	d41a      	bmi.n	900251a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
9002516e:	42a3      	cmp	r3, r4
90025170:	dd18      	ble.n	900251a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
90025172:	b1cf      	cbz	r7, 900251a8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
90025174:	3301      	adds	r3, #1
90025176:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
9002517a:	2f0f      	cmp	r7, #15
9002517c:	d915      	bls.n	900251aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
9002517e:	4b49      	ldr	r3, [pc, #292]	; (900252a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
90025180:	f240 11ef 	movw	r1, #495	; 0x1ef
90025184:	4a48      	ldr	r2, [pc, #288]	; (900252a8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
90025186:	4849      	ldr	r0, [pc, #292]	; (900252ac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
90025188:	f003 fd54 	bl	90028c34 <__assert_func>
9002518c:	4681      	mov	r9, r0
9002518e:	e7d7      	b.n	90025140 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
90025190:	4686      	mov	lr, r0
90025192:	4681      	mov	r9, r0
90025194:	e7db      	b.n	9002514e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
90025196:	4686      	mov	lr, r0
90025198:	e7d9      	b.n	9002514e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
9002519a:	4684      	mov	ip, r0
9002519c:	e7e5      	b.n	9002516a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
9002519e:	4603      	mov	r3, r0
900251a0:	4684      	mov	ip, r0
900251a2:	e7ea      	b.n	9002517a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
900251a4:	4603      	mov	r3, r0
900251a6:	e7e8      	b.n	9002517a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
900251a8:	4603      	mov	r3, r0
900251aa:	2e0f      	cmp	r6, #15
900251ac:	d8e7      	bhi.n	9002517e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
900251ae:	fb17 f806 	smulbb	r8, r7, r6
900251b2:	ea4f 4409 	mov.w	r4, r9, lsl #16
900251b6:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
900251ba:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
900251be:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
900251c2:	ea4f 08e8 	mov.w	r8, r8, asr #3
900251c6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900251ca:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
900251ce:	ea44 0909 	orr.w	r9, r4, r9
900251d2:	f1c6 0410 	rsb	r4, r6, #16
900251d6:	041a      	lsls	r2, r3, #16
900251d8:	ea4a 0e0e 	orr.w	lr, sl, lr
900251dc:	1be4      	subs	r4, r4, r7
900251de:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
900251e2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
900251e6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
900251ea:	fb07 fe0e 	mul.w	lr, r7, lr
900251ee:	eb08 0444 	add.w	r4, r8, r4, lsl #1
900251f2:	4313      	orrs	r3, r2
900251f4:	ea4f 420c 	mov.w	r2, ip, lsl #16
900251f8:	fb04 e409 	mla	r4, r4, r9, lr
900251fc:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
90025200:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90025204:	b2af      	uxth	r7, r5
90025206:	fb08 4303 	mla	r3, r8, r3, r4
9002520a:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
9002520e:	43ed      	mvns	r5, r5
90025210:	4322      	orrs	r2, r4
90025212:	b2ed      	uxtb	r5, r5
90025214:	fb06 3202 	mla	r2, r6, r2, r3
90025218:	10c6      	asrs	r6, r0, #3
9002521a:	0d53      	lsrs	r3, r2, #21
9002521c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90025220:	0952      	lsrs	r2, r2, #5
90025222:	fb16 f605 	smulbb	r6, r6, r5
90025226:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002522a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9002522e:	431a      	orrs	r2, r3
90025230:	b293      	uxth	r3, r2
90025232:	1202      	asrs	r2, r0, #8
90025234:	ea4f 2c23 	mov.w	ip, r3, asr #8
90025238:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9002523c:	00dc      	lsls	r4, r3, #3
9002523e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90025242:	fb12 f205 	smulbb	r2, r2, r5
90025246:	b2e4      	uxtb	r4, r4
90025248:	fb0c 2c07 	mla	ip, ip, r7, r2
9002524c:	10da      	asrs	r2, r3, #3
9002524e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90025252:	fa1f fc8c 	uxth.w	ip, ip
90025256:	fb02 6207 	mla	r2, r2, r7, r6
9002525a:	f10c 0301 	add.w	r3, ip, #1
9002525e:	b296      	uxth	r6, r2
90025260:	00c2      	lsls	r2, r0, #3
90025262:	eb03 231c 	add.w	r3, r3, ip, lsr #8
90025266:	b2d2      	uxtb	r2, r2
90025268:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
9002526c:	fb12 f205 	smulbb	r2, r2, r5
90025270:	fb04 2207 	mla	r2, r4, r7, r2
90025274:	b292      	uxth	r2, r2
90025276:	1c50      	adds	r0, r2, #1
90025278:	eb00 2212 	add.w	r2, r0, r2, lsr #8
9002527c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90025280:	4313      	orrs	r3, r2
90025282:	1c72      	adds	r2, r6, #1
90025284:	eb02 2216 	add.w	r2, r2, r6, lsr #8
90025288:	0952      	lsrs	r2, r2, #5
9002528a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002528e:	4313      	orrs	r3, r2
90025290:	800b      	strh	r3, [r1, #0]
90025292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90025296:	2f0f      	cmp	r7, #15
90025298:	f63f af71 	bhi.w	9002517e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
9002529c:	4603      	mov	r3, r0
9002529e:	4684      	mov	ip, r0
900252a0:	e785      	b.n	900251ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
900252a2:	bf00      	nop
900252a4:	900306ff 	.word	0x900306ff
900252a8:	90030d66 	.word	0x90030d66
900252ac:	900307e8 	.word	0x900307e8

900252b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900252b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900252b4:	ed2d 8b08 	vpush	{d8-d11}
900252b8:	b093      	sub	sp, #76	; 0x4c
900252ba:	461d      	mov	r5, r3
900252bc:	eeb0 aa40 	vmov.f32	s20, s0
900252c0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
900252c2:	eef0 9a60 	vmov.f32	s19, s1
900252c6:	9210      	str	r2, [sp, #64]	; 0x40
900252c8:	eeb0 9a41 	vmov.f32	s18, s2
900252cc:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
900252d0:	eeb0 8a62 	vmov.f32	s16, s5
900252d4:	910a      	str	r1, [sp, #40]	; 0x28
900252d6:	eef0 8a43 	vmov.f32	s17, s6
900252da:	920b      	str	r2, [sp, #44]	; 0x2c
900252dc:	eef0 ba44 	vmov.f32	s23, s8
900252e0:	6859      	ldr	r1, [r3, #4]
900252e2:	eeb0 ba64 	vmov.f32	s22, s9
900252e6:	681b      	ldr	r3, [r3, #0]
900252e8:	eef0 aa45 	vmov.f32	s21, s10
900252ec:	9011      	str	r0, [sp, #68]	; 0x44
900252ee:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
900252f2:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
900252f6:	fb01 2707 	mla	r7, r1, r7, r2
900252fa:	eb03 0347 	add.w	r3, r3, r7, lsl #1
900252fe:	9307      	str	r3, [sp, #28]
90025300:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90025302:	681b      	ldr	r3, [r3, #0]
90025304:	9309      	str	r3, [sp, #36]	; 0x24
90025306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90025308:	43db      	mvns	r3, r3
9002530a:	b2db      	uxtb	r3, r3
9002530c:	9308      	str	r3, [sp, #32]
9002530e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90025310:	2b00      	cmp	r3, #0
90025312:	dc03      	bgt.n	9002531c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90025314:	9b10      	ldr	r3, [sp, #64]	; 0x40
90025316:	2b00      	cmp	r3, #0
90025318:	f340 8205 	ble.w	90025726 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
9002531c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9002531e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90025322:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90025326:	1e48      	subs	r0, r1, #1
90025328:	f102 3cff 	add.w	ip, r2, #4294967295
9002532c:	2d00      	cmp	r5, #0
9002532e:	f340 80da 	ble.w	900254e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
90025332:	ea5f 4e24 	movs.w	lr, r4, asr #16
90025336:	ea4f 4326 	mov.w	r3, r6, asr #16
9002533a:	d406      	bmi.n	9002534a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9002533c:	4586      	cmp	lr, r0
9002533e:	da04      	bge.n	9002534a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
90025340:	2b00      	cmp	r3, #0
90025342:	db02      	blt.n	9002534a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
90025344:	4563      	cmp	r3, ip
90025346:	f2c0 80cf 	blt.w	900254e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
9002534a:	f11e 0e01 	adds.w	lr, lr, #1
9002534e:	f100 80c1 	bmi.w	900254d4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
90025352:	4571      	cmp	r1, lr
90025354:	f2c0 80be 	blt.w	900254d4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
90025358:	3301      	adds	r3, #1
9002535a:	f100 80bb 	bmi.w	900254d4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
9002535e:	429a      	cmp	r2, r3
90025360:	f2c0 80b8 	blt.w	900254d4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
90025364:	46a9      	mov	r9, r5
90025366:	f8dd 801c 	ldr.w	r8, [sp, #28]
9002536a:	f1b9 0f00 	cmp.w	r9, #0
9002536e:	f340 80d8 	ble.w	90025522 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
90025372:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90025374:	1421      	asrs	r1, r4, #16
90025376:	ea4f 4026 	mov.w	r0, r6, asr #16
9002537a:	f3c4 3203 	ubfx	r2, r4, #12, #4
9002537e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90025382:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
90025386:	f100 8112 	bmi.w	900255ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9002538a:	f10e 3aff 	add.w	sl, lr, #4294967295
9002538e:	4551      	cmp	r1, sl
90025390:	f280 810d 	bge.w	900255ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
90025394:	2800      	cmp	r0, #0
90025396:	f2c0 810a 	blt.w	900255ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9002539a:	f103 3aff 	add.w	sl, r3, #4294967295
9002539e:	4550      	cmp	r0, sl
900253a0:	f280 8105 	bge.w	900255ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
900253a4:	fa0f f38e 	sxth.w	r3, lr
900253a8:	fb00 1103 	mla	r1, r0, r3, r1
900253ac:	9809      	ldr	r0, [sp, #36]	; 0x24
900253ae:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
900253b2:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
900253b6:	f8ba 1002 	ldrh.w	r1, [sl, #2]
900253ba:	f1bc 0f00 	cmp.w	ip, #0
900253be:	d007      	beq.n	900253d0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
900253c0:	005b      	lsls	r3, r3, #1
900253c2:	eb0a 0003 	add.w	r0, sl, r3
900253c6:	f83a 3003 	ldrh.w	r3, [sl, r3]
900253ca:	930c      	str	r3, [sp, #48]	; 0x30
900253cc:	8843      	ldrh	r3, [r0, #2]
900253ce:	930d      	str	r3, [sp, #52]	; 0x34
900253d0:	ea4f 400e 	mov.w	r0, lr, lsl #16
900253d4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
900253d8:	fb12 f30c 	smulbb	r3, r2, ip
900253dc:	ea4f 4a01 	mov.w	sl, r1, lsl #16
900253e0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
900253e4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
900253e8:	10db      	asrs	r3, r3, #3
900253ea:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900253ee:	ea40 000e 	orr.w	r0, r0, lr
900253f2:	f1cc 0e10 	rsb	lr, ip, #16
900253f6:	ea4a 0101 	orr.w	r1, sl, r1
900253fa:	9f08      	ldr	r7, [sp, #32]
900253fc:	ebae 0e02 	sub.w	lr, lr, r2
90025400:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90025404:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
90025408:	4351      	muls	r1, r2
9002540a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9002540c:	fb0e 1e00 	mla	lr, lr, r0, r1
90025410:	990c      	ldr	r1, [sp, #48]	; 0x30
90025412:	0410      	lsls	r0, r2, #16
90025414:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90025418:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9002541c:	4310      	orrs	r0, r2
9002541e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90025420:	0412      	lsls	r2, r2, #16
90025422:	fb03 e000 	mla	r0, r3, r0, lr
90025426:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
9002542a:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
9002542e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90025432:	f8b8 c000 	ldrh.w	ip, [r8]
90025436:	ea42 020e 	orr.w	r2, r2, lr
9002543a:	ea4f 212c 	mov.w	r1, ip, asr #8
9002543e:	ea4f 0eec 	mov.w	lr, ip, asr #3
90025442:	fb03 0302 	mla	r3, r3, r2, r0
90025446:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9002544a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9002544e:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
90025452:	fb11 f107 	smulbb	r1, r1, r7
90025456:	0d5a      	lsrs	r2, r3, #21
90025458:	095b      	lsrs	r3, r3, #5
9002545a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002545e:	fa5f fc8c 	uxtb.w	ip, ip
90025462:	fb1e fe07 	smulbb	lr, lr, r7
90025466:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9002546a:	fb1c fc07 	smulbb	ip, ip, r7
9002546e:	4313      	orrs	r3, r2
90025470:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
90025474:	b29b      	uxth	r3, r3
90025476:	1218      	asrs	r0, r3, #8
90025478:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9002547c:	fb00 1002 	mla	r0, r0, r2, r1
90025480:	10d9      	asrs	r1, r3, #3
90025482:	00db      	lsls	r3, r3, #3
90025484:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90025488:	b280      	uxth	r0, r0
9002548a:	b2db      	uxtb	r3, r3
9002548c:	fb01 e102 	mla	r1, r1, r2, lr
90025490:	fb03 c202 	mla	r2, r3, r2, ip
90025494:	1c43      	adds	r3, r0, #1
90025496:	b289      	uxth	r1, r1
90025498:	b292      	uxth	r2, r2
9002549a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9002549e:	f102 0c01 	add.w	ip, r2, #1
900254a2:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
900254a6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
900254aa:	f3c2 22c4 	ubfx	r2, r2, #11, #5
900254ae:	4313      	orrs	r3, r2
900254b0:	1c4a      	adds	r2, r1, #1
900254b2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
900254b6:	0949      	lsrs	r1, r1, #5
900254b8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
900254bc:	430b      	orrs	r3, r1
900254be:	f8a8 3000 	strh.w	r3, [r8]
900254c2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
900254c4:	f108 0802 	add.w	r8, r8, #2
900254c8:	f109 39ff 	add.w	r9, r9, #4294967295
900254cc:	441c      	add	r4, r3
900254ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900254d0:	441e      	add	r6, r3
900254d2:	e74a      	b.n	9002536a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
900254d4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
900254d6:	3d01      	subs	r5, #1
900254d8:	441c      	add	r4, r3
900254da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900254dc:	441e      	add	r6, r3
900254de:	9b07      	ldr	r3, [sp, #28]
900254e0:	3302      	adds	r3, #2
900254e2:	9307      	str	r3, [sp, #28]
900254e4:	e722      	b.n	9002532c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900254e6:	d022      	beq.n	9002552e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
900254e8:	1e6b      	subs	r3, r5, #1
900254ea:	9827      	ldr	r0, [sp, #156]	; 0x9c
900254ec:	fb00 4003 	mla	r0, r0, r3, r4
900254f0:	1400      	asrs	r0, r0, #16
900254f2:	f53f af37 	bmi.w	90025364 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
900254f6:	3901      	subs	r1, #1
900254f8:	4288      	cmp	r0, r1
900254fa:	f6bf af33 	bge.w	90025364 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
900254fe:	9928      	ldr	r1, [sp, #160]	; 0xa0
90025500:	fb01 6303 	mla	r3, r1, r3, r6
90025504:	141b      	asrs	r3, r3, #16
90025506:	f53f af2d 	bmi.w	90025364 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
9002550a:	3a01      	subs	r2, #1
9002550c:	4293      	cmp	r3, r2
9002550e:	f6bf af29 	bge.w	90025364 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
90025512:	46a8      	mov	r8, r5
90025514:	f8dd 901c 	ldr.w	r9, [sp, #28]
90025518:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
9002551c:	f1b8 0f00 	cmp.w	r8, #0
90025520:	dc60      	bgt.n	900255e4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
90025522:	9b07      	ldr	r3, [sp, #28]
90025524:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
90025528:	eb03 0345 	add.w	r3, r3, r5, lsl #1
9002552c:	9307      	str	r3, [sp, #28]
9002552e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90025530:	2b00      	cmp	r3, #0
90025532:	f340 80f8 	ble.w	90025726 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
90025536:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9002553a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002553c:	ee3a aa2b 	vadd.f32	s20, s20, s23
90025540:	ee79 9a8b 	vadd.f32	s19, s19, s22
90025544:	eef0 6a48 	vmov.f32	s13, s16
90025548:	eec7 7a0a 	vdiv.f32	s15, s14, s20
9002554c:	ee39 9a2a 	vadd.f32	s18, s18, s21
90025550:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90025554:	ee16 4a90 	vmov	r4, s13
90025558:	eef0 6a68 	vmov.f32	s13, s17
9002555c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90025560:	ee16 6a90 	vmov	r6, s13
90025564:	ee29 7aa7 	vmul.f32	s14, s19, s15
90025568:	ee69 7a27 	vmul.f32	s15, s18, s15
9002556c:	ee37 8a48 	vsub.f32	s16, s14, s16
90025570:	ee77 8ae8 	vsub.f32	s17, s15, s17
90025574:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
90025578:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
9002557c:	ee18 2a10 	vmov	r2, s16
90025580:	eeb0 8a47 	vmov.f32	s16, s14
90025584:	fb92 f3f3 	sdiv	r3, r2, r3
90025588:	ee18 2a90 	vmov	r2, s17
9002558c:	9327      	str	r3, [sp, #156]	; 0x9c
9002558e:	9b24      	ldr	r3, [sp, #144]	; 0x90
90025590:	eef0 8a67 	vmov.f32	s17, s15
90025594:	fb92 f3f3 	sdiv	r3, r2, r3
90025598:	9328      	str	r3, [sp, #160]	; 0xa0
9002559a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002559c:	9a10      	ldr	r2, [sp, #64]	; 0x40
9002559e:	3b01      	subs	r3, #1
900255a0:	930a      	str	r3, [sp, #40]	; 0x28
900255a2:	bf08      	it	eq
900255a4:	4615      	moveq	r5, r2
900255a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
900255a8:	bf18      	it	ne
900255aa:	461d      	movne	r5, r3
900255ac:	e6af      	b.n	9002530e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
900255ae:	f111 0a01 	adds.w	sl, r1, #1
900255b2:	d486      	bmi.n	900254c2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
900255b4:	45d6      	cmp	lr, sl
900255b6:	db84      	blt.n	900254c2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
900255b8:	f110 0a01 	adds.w	sl, r0, #1
900255bc:	d481      	bmi.n	900254c2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
900255be:	4553      	cmp	r3, sl
900255c0:	f6ff af7f 	blt.w	900254c2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
900255c4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
900255c6:	b21b      	sxth	r3, r3
900255c8:	9101      	str	r1, [sp, #4]
900255ca:	4641      	mov	r1, r8
900255cc:	9300      	str	r3, [sp, #0]
900255ce:	fa0f f38e 	sxth.w	r3, lr
900255d2:	e9cd 0202 	strd	r0, r2, [sp, #8]
900255d6:	e9cd c704 	strd	ip, r7, [sp, #16]
900255da:	9a09      	ldr	r2, [sp, #36]	; 0x24
900255dc:	9811      	ldr	r0, [sp, #68]	; 0x44
900255de:	f7ff fd93 	bl	90025108 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
900255e2:	e76e      	b.n	900254c2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
900255e4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900255e6:	1430      	asrs	r0, r6, #16
900255e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
900255ea:	f3c6 3e03 	ubfx	lr, r6, #12, #4
900255ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900255f2:	1423      	asrs	r3, r4, #16
900255f4:	f3c4 3203 	ubfx	r2, r4, #12, #4
900255f8:	fb01 3000 	mla	r0, r1, r0, r3
900255fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
900255fe:	eb03 0340 	add.w	r3, r3, r0, lsl #1
90025602:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
90025606:	8858      	ldrh	r0, [r3, #2]
90025608:	f1be 0f00 	cmp.w	lr, #0
9002560c:	d00b      	beq.n	90025626 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
9002560e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
90025612:	3901      	subs	r1, #1
90025614:	0049      	lsls	r1, r1, #1
90025616:	3102      	adds	r1, #2
90025618:	eb03 0b01 	add.w	fp, r3, r1
9002561c:	5a5b      	ldrh	r3, [r3, r1]
9002561e:	930e      	str	r3, [sp, #56]	; 0x38
90025620:	f8bb 3002 	ldrh.w	r3, [fp, #2]
90025624:	930f      	str	r3, [sp, #60]	; 0x3c
90025626:	ea4f 410c 	mov.w	r1, ip, lsl #16
9002562a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9002562e:	fb12 f30e 	smulbb	r3, r2, lr
90025632:	ea4f 4b00 	mov.w	fp, r0, lsl #16
90025636:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
9002563a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9002563e:	10db      	asrs	r3, r3, #3
90025640:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90025644:	ea41 010c 	orr.w	r1, r1, ip
90025648:	f1ce 0c10 	rsb	ip, lr, #16
9002564c:	ea4b 0000 	orr.w	r0, fp, r0
90025650:	9f08      	ldr	r7, [sp, #32]
90025652:	ebac 0c02 	sub.w	ip, ip, r2
90025656:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
9002565a:	f108 38ff 	add.w	r8, r8, #4294967295
9002565e:	4350      	muls	r0, r2
90025660:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
90025664:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90025666:	fb0c 0c01 	mla	ip, ip, r1, r0
9002566a:	980e      	ldr	r0, [sp, #56]	; 0x38
9002566c:	ea4f 4b02 	mov.w	fp, r2, lsl #16
90025670:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
90025674:	9a0e      	ldr	r2, [sp, #56]	; 0x38
90025676:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9002567a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9002567e:	0412      	lsls	r2, r2, #16
90025680:	ea4b 0101 	orr.w	r1, fp, r1
90025684:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90025688:	fb03 c101 	mla	r1, r3, r1, ip
9002568c:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
90025690:	4302      	orrs	r2, r0
90025692:	fb03 1202 	mla	r2, r3, r2, r1
90025696:	ea4f 5b52 	mov.w	fp, r2, lsr #21
9002569a:	0952      	lsrs	r2, r2, #5
9002569c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
900256a0:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
900256a4:	f8b9 2000 	ldrh.w	r2, [r9]
900256a8:	ea4b 0303 	orr.w	r3, fp, r3
900256ac:	1211      	asrs	r1, r2, #8
900256ae:	ea4f 0ce2 	mov.w	ip, r2, asr #3
900256b2:	b29b      	uxth	r3, r3
900256b4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
900256b8:	00d2      	lsls	r2, r2, #3
900256ba:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
900256be:	fb11 f107 	smulbb	r1, r1, r7
900256c2:	1218      	asrs	r0, r3, #8
900256c4:	fb1c fc07 	smulbb	ip, ip, r7
900256c8:	b2d2      	uxtb	r2, r2
900256ca:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900256ce:	fb12 f207 	smulbb	r2, r2, r7
900256d2:	fb00 100a 	mla	r0, r0, sl, r1
900256d6:	10d9      	asrs	r1, r3, #3
900256d8:	00db      	lsls	r3, r3, #3
900256da:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900256de:	b280      	uxth	r0, r0
900256e0:	b2db      	uxtb	r3, r3
900256e2:	fb01 c10a 	mla	r1, r1, sl, ip
900256e6:	fb03 230a 	mla	r3, r3, sl, r2
900256ea:	1c42      	adds	r2, r0, #1
900256ec:	b289      	uxth	r1, r1
900256ee:	b29b      	uxth	r3, r3
900256f0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
900256f4:	f101 0c01 	add.w	ip, r1, #1
900256f8:	1c5a      	adds	r2, r3, #1
900256fa:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
900256fe:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
90025702:	eb02 2213 	add.w	r2, r2, r3, lsr #8
90025706:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90025708:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
9002570c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90025710:	441c      	add	r4, r3
90025712:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90025716:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90025718:	4310      	orrs	r0, r2
9002571a:	441e      	add	r6, r3
9002571c:	ea40 000c 	orr.w	r0, r0, ip
90025720:	f829 0b02 	strh.w	r0, [r9], #2
90025724:	e6fa      	b.n	9002551c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
90025726:	b013      	add	sp, #76	; 0x4c
90025728:	ecbd 8b08 	vpop	{d8-d11}
9002572c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90025730 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
90025730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90025734:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
90025738:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
9002573c:	fb06 5c03 	mla	ip, r6, r3, r5
90025740:	2e00      	cmp	r6, #0
90025742:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
90025746:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
9002574a:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
9002574e:	8808      	ldrh	r0, [r1, #0]
90025750:	db2e      	blt.n	900257b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
90025752:	45b0      	cmp	r8, r6
90025754:	dd2c      	ble.n	900257b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
90025756:	2d00      	cmp	r5, #0
90025758:	db28      	blt.n	900257ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
9002575a:	42ab      	cmp	r3, r5
9002575c:	dd26      	ble.n	900257ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
9002575e:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
90025762:	1c6a      	adds	r2, r5, #1
90025764:	d427      	bmi.n	900257b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
90025766:	4293      	cmp	r3, r2
90025768:	dd25      	ble.n	900257b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
9002576a:	b324      	cbz	r4, 900257b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
9002576c:	f8be 2002 	ldrh.w	r2, [lr, #2]
90025770:	3601      	adds	r6, #1
90025772:	d424      	bmi.n	900257be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
90025774:	45b0      	cmp	r8, r6
90025776:	dd22      	ble.n	900257be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
90025778:	b31f      	cbz	r7, 900257c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
9002577a:	2d00      	cmp	r5, #0
9002577c:	db1d      	blt.n	900257ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
9002577e:	42ab      	cmp	r3, r5
90025780:	dd1b      	ble.n	900257ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
90025782:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
90025786:	3501      	adds	r5, #1
90025788:	d405      	bmi.n	90025796 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
9002578a:	42ab      	cmp	r3, r5
9002578c:	dd03      	ble.n	90025796 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
9002578e:	b124      	cbz	r4, 9002579a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
90025790:	3301      	adds	r3, #1
90025792:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
90025796:	2c0f      	cmp	r4, #15
90025798:	d801      	bhi.n	9002579e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
9002579a:	2f0f      	cmp	r7, #15
9002579c:	d914      	bls.n	900257c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
9002579e:	4b27      	ldr	r3, [pc, #156]	; (9002583c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
900257a0:	f240 11ef 	movw	r1, #495	; 0x1ef
900257a4:	4a26      	ldr	r2, [pc, #152]	; (90025840 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
900257a6:	4827      	ldr	r0, [pc, #156]	; (90025844 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
900257a8:	f003 fa44 	bl	90028c34 <__assert_func>
900257ac:	4684      	mov	ip, r0
900257ae:	e7d8      	b.n	90025762 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
900257b0:	4602      	mov	r2, r0
900257b2:	4684      	mov	ip, r0
900257b4:	e7dc      	b.n	90025770 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
900257b6:	4602      	mov	r2, r0
900257b8:	e7da      	b.n	90025770 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
900257ba:	4606      	mov	r6, r0
900257bc:	e7e3      	b.n	90025786 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
900257be:	4606      	mov	r6, r0
900257c0:	e7e9      	b.n	90025796 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
900257c2:	2c0f      	cmp	r4, #15
900257c4:	d8eb      	bhi.n	9002579e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
900257c6:	4606      	mov	r6, r0
900257c8:	fb14 f307 	smulbb	r3, r4, r7
900257cc:	ea4f 450c 	mov.w	r5, ip, lsl #16
900257d0:	ea4f 4e02 	mov.w	lr, r2, lsl #16
900257d4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
900257d8:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
900257dc:	10db      	asrs	r3, r3, #3
900257de:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
900257e2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900257e6:	ea45 0c0c 	orr.w	ip, r5, ip
900257ea:	f1c7 0510 	rsb	r5, r7, #16
900257ee:	ea4e 0202 	orr.w	r2, lr, r2
900257f2:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
900257f6:	1b2d      	subs	r5, r5, r4
900257f8:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
900257fc:	eb03 0545 	add.w	r5, r3, r5, lsl #1
90025800:	4354      	muls	r4, r2
90025802:	fb05 450c 	mla	r5, r5, ip, r4
90025806:	0404      	lsls	r4, r0, #16
90025808:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9002580c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
90025810:	4320      	orrs	r0, r4
90025812:	fb03 5400 	mla	r4, r3, r0, r5
90025816:	0430      	lsls	r0, r6, #16
90025818:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
9002581c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90025820:	4330      	orrs	r0, r6
90025822:	fb07 4000 	mla	r0, r7, r0, r4
90025826:	0d43      	lsrs	r3, r0, #21
90025828:	0940      	lsrs	r0, r0, #5
9002582a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002582e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90025832:	4318      	orrs	r0, r3
90025834:	8008      	strh	r0, [r1, #0]
90025836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9002583a:	bf00      	nop
9002583c:	900306ff 	.word	0x900306ff
90025840:	90030d66 	.word	0x90030d66
90025844:	900307e8 	.word	0x900307e8

90025848 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90025848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002584c:	ed2d 8b08 	vpush	{d8-d11}
90025850:	b08f      	sub	sp, #60	; 0x3c
90025852:	461d      	mov	r5, r3
90025854:	eeb0 aa40 	vmov.f32	s20, s0
90025858:	9b25      	ldr	r3, [sp, #148]	; 0x94
9002585a:	eef0 9a60 	vmov.f32	s19, s1
9002585e:	9107      	str	r1, [sp, #28]
90025860:	eeb0 9a41 	vmov.f32	s18, s2
90025864:	6859      	ldr	r1, [r3, #4]
90025866:	eeb0 8a62 	vmov.f32	s16, s5
9002586a:	920c      	str	r2, [sp, #48]	; 0x30
9002586c:	eef0 8a43 	vmov.f32	s17, s6
90025870:	681b      	ldr	r3, [r3, #0]
90025872:	eef0 ba44 	vmov.f32	s23, s8
90025876:	eeb0 ba64 	vmov.f32	s22, s9
9002587a:	900d      	str	r0, [sp, #52]	; 0x34
9002587c:	eef0 aa45 	vmov.f32	s21, s10
90025880:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
90025884:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
90025888:	fb01 2707 	mla	r7, r1, r7, r2
9002588c:	eb03 0747 	add.w	r7, r3, r7, lsl #1
90025890:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90025892:	f8d3 8000 	ldr.w	r8, [r3]
90025896:	9b07      	ldr	r3, [sp, #28]
90025898:	2b00      	cmp	r3, #0
9002589a:	dc03      	bgt.n	900258a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
9002589c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9002589e:	2b00      	cmp	r3, #0
900258a0:	f340 8182 	ble.w	90025ba8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
900258a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900258a6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900258aa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900258ae:	1e48      	subs	r0, r1, #1
900258b0:	f102 3cff 	add.w	ip, r2, #4294967295
900258b4:	2d00      	cmp	r5, #0
900258b6:	f340 809b 	ble.w	900259f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
900258ba:	ea5f 4e24 	movs.w	lr, r4, asr #16
900258be:	ea4f 4326 	mov.w	r3, r6, asr #16
900258c2:	d406      	bmi.n	900258d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900258c4:	4586      	cmp	lr, r0
900258c6:	da04      	bge.n	900258d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900258c8:	2b00      	cmp	r3, #0
900258ca:	db02      	blt.n	900258d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900258cc:	4563      	cmp	r3, ip
900258ce:	f2c0 8090 	blt.w	900259f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
900258d2:	f11e 0e01 	adds.w	lr, lr, #1
900258d6:	f100 8084 	bmi.w	900259e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900258da:	4571      	cmp	r1, lr
900258dc:	f2c0 8081 	blt.w	900259e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900258e0:	3301      	adds	r3, #1
900258e2:	d47e      	bmi.n	900259e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900258e4:	429a      	cmp	r2, r3
900258e6:	db7c      	blt.n	900259e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900258e8:	46aa      	mov	sl, r5
900258ea:	46b9      	mov	r9, r7
900258ec:	f1ba 0f00 	cmp.w	sl, #0
900258f0:	f340 8099 	ble.w	90025a26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
900258f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900258f6:	1421      	asrs	r1, r4, #16
900258f8:	ea4f 4026 	mov.w	r0, r6, asr #16
900258fc:	f3c4 3203 	ubfx	r2, r4, #12, #4
90025900:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90025904:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
90025908:	f100 80d1 	bmi.w	90025aae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
9002590c:	f10e 3bff 	add.w	fp, lr, #4294967295
90025910:	4559      	cmp	r1, fp
90025912:	f280 80cc 	bge.w	90025aae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
90025916:	2800      	cmp	r0, #0
90025918:	f2c0 80c9 	blt.w	90025aae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
9002591c:	f103 3bff 	add.w	fp, r3, #4294967295
90025920:	4558      	cmp	r0, fp
90025922:	f280 80c4 	bge.w	90025aae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
90025926:	fa0f fe8e 	sxth.w	lr, lr
9002592a:	fb00 110e 	mla	r1, r0, lr, r1
9002592e:	eb08 0041 	add.w	r0, r8, r1, lsl #1
90025932:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
90025936:	8841      	ldrh	r1, [r0, #2]
90025938:	f1bc 0f00 	cmp.w	ip, #0
9002593c:	d00b      	beq.n	90025956 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
9002593e:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
90025942:	3b01      	subs	r3, #1
90025944:	005b      	lsls	r3, r3, #1
90025946:	3302      	adds	r3, #2
90025948:	eb00 0e03 	add.w	lr, r0, r3
9002594c:	5ac3      	ldrh	r3, [r0, r3]
9002594e:	9308      	str	r3, [sp, #32]
90025950:	f8be 3002 	ldrh.w	r3, [lr, #2]
90025954:	9309      	str	r3, [sp, #36]	; 0x24
90025956:	ea4f 400b 	mov.w	r0, fp, lsl #16
9002595a:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
9002595e:	fb12 f30c 	smulbb	r3, r2, ip
90025962:	f1cc 0e10 	rsb	lr, ip, #16
90025966:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9002596a:	10db      	asrs	r3, r3, #3
9002596c:	ebae 0e02 	sub.w	lr, lr, r2
90025970:	ea40 000b 	orr.w	r0, r0, fp
90025974:	ea4f 4b01 	mov.w	fp, r1, lsl #16
90025978:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9002597c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90025980:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90025984:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
90025988:	ea4b 0101 	orr.w	r1, fp, r1
9002598c:	4351      	muls	r1, r2
9002598e:	9a09      	ldr	r2, [sp, #36]	; 0x24
90025990:	fb0e 1e00 	mla	lr, lr, r0, r1
90025994:	0410      	lsls	r0, r2, #16
90025996:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9002599a:	9908      	ldr	r1, [sp, #32]
9002599c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
900259a0:	4310      	orrs	r0, r2
900259a2:	9a08      	ldr	r2, [sp, #32]
900259a4:	0412      	lsls	r2, r2, #16
900259a6:	fb03 e000 	mla	r0, r3, r0, lr
900259aa:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
900259ae:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
900259b2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
900259b6:	ea42 020e 	orr.w	r2, r2, lr
900259ba:	fb03 0302 	mla	r3, r3, r2, r0
900259be:	0d5a      	lsrs	r2, r3, #21
900259c0:	095b      	lsrs	r3, r3, #5
900259c2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900259c6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
900259ca:	4313      	orrs	r3, r2
900259cc:	f8a9 3000 	strh.w	r3, [r9]
900259d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
900259d2:	f109 0902 	add.w	r9, r9, #2
900259d6:	f10a 3aff 	add.w	sl, sl, #4294967295
900259da:	441c      	add	r4, r3
900259dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
900259de:	441e      	add	r6, r3
900259e0:	e784      	b.n	900258ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
900259e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
900259e4:	3d01      	subs	r5, #1
900259e6:	3702      	adds	r7, #2
900259e8:	441c      	add	r4, r3
900259ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
900259ec:	441e      	add	r6, r3
900259ee:	e761      	b.n	900258b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
900259f0:	d01d      	beq.n	90025a2e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
900259f2:	1e6b      	subs	r3, r5, #1
900259f4:	9823      	ldr	r0, [sp, #140]	; 0x8c
900259f6:	fb00 4003 	mla	r0, r0, r3, r4
900259fa:	1400      	asrs	r0, r0, #16
900259fc:	f53f af74 	bmi.w	900258e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90025a00:	3901      	subs	r1, #1
90025a02:	4288      	cmp	r0, r1
90025a04:	f6bf af70 	bge.w	900258e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90025a08:	9924      	ldr	r1, [sp, #144]	; 0x90
90025a0a:	fb01 6303 	mla	r3, r1, r3, r6
90025a0e:	141b      	asrs	r3, r3, #16
90025a10:	f53f af6a 	bmi.w	900258e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90025a14:	3a01      	subs	r2, #1
90025a16:	4293      	cmp	r3, r2
90025a18:	f6bf af66 	bge.w	900258e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90025a1c:	46a9      	mov	r9, r5
90025a1e:	46ba      	mov	sl, r7
90025a20:	f1b9 0f00 	cmp.w	r9, #0
90025a24:	dc5b      	bgt.n	90025ade <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
90025a26:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
90025a2a:	eb07 0745 	add.w	r7, r7, r5, lsl #1
90025a2e:	9b07      	ldr	r3, [sp, #28]
90025a30:	2b00      	cmp	r3, #0
90025a32:	f340 80b9 	ble.w	90025ba8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
90025a36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90025a3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
90025a3c:	ee3a aa2b 	vadd.f32	s20, s20, s23
90025a40:	ee79 9a8b 	vadd.f32	s19, s19, s22
90025a44:	eef0 6a48 	vmov.f32	s13, s16
90025a48:	eec7 7a0a 	vdiv.f32	s15, s14, s20
90025a4c:	ee39 9a2a 	vadd.f32	s18, s18, s21
90025a50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90025a54:	ee16 4a90 	vmov	r4, s13
90025a58:	eef0 6a68 	vmov.f32	s13, s17
90025a5c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90025a60:	ee16 6a90 	vmov	r6, s13
90025a64:	ee29 7aa7 	vmul.f32	s14, s19, s15
90025a68:	ee69 7a27 	vmul.f32	s15, s18, s15
90025a6c:	ee37 8a48 	vsub.f32	s16, s14, s16
90025a70:	ee77 8ae8 	vsub.f32	s17, s15, s17
90025a74:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
90025a78:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
90025a7c:	ee18 2a10 	vmov	r2, s16
90025a80:	eeb0 8a47 	vmov.f32	s16, s14
90025a84:	fb92 f3f3 	sdiv	r3, r2, r3
90025a88:	ee18 2a90 	vmov	r2, s17
90025a8c:	9323      	str	r3, [sp, #140]	; 0x8c
90025a8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
90025a90:	eef0 8a67 	vmov.f32	s17, s15
90025a94:	fb92 f3f3 	sdiv	r3, r2, r3
90025a98:	9324      	str	r3, [sp, #144]	; 0x90
90025a9a:	9b07      	ldr	r3, [sp, #28]
90025a9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90025a9e:	3b01      	subs	r3, #1
90025aa0:	9307      	str	r3, [sp, #28]
90025aa2:	bf08      	it	eq
90025aa4:	4615      	moveq	r5, r2
90025aa6:	9b20      	ldr	r3, [sp, #128]	; 0x80
90025aa8:	bf18      	it	ne
90025aaa:	461d      	movne	r5, r3
90025aac:	e6f3      	b.n	90025896 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
90025aae:	f111 0b01 	adds.w	fp, r1, #1
90025ab2:	d48d      	bmi.n	900259d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
90025ab4:	45de      	cmp	lr, fp
90025ab6:	db8b      	blt.n	900259d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
90025ab8:	f110 0b01 	adds.w	fp, r0, #1
90025abc:	d488      	bmi.n	900259d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
90025abe:	455b      	cmp	r3, fp
90025ac0:	db86      	blt.n	900259d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
90025ac2:	b21b      	sxth	r3, r3
90025ac4:	e9cd 1001 	strd	r1, r0, [sp, #4]
90025ac8:	e9cd 2c03 	strd	r2, ip, [sp, #12]
90025acc:	9300      	str	r3, [sp, #0]
90025ace:	4642      	mov	r2, r8
90025ad0:	fa0f f38e 	sxth.w	r3, lr
90025ad4:	4649      	mov	r1, r9
90025ad6:	980d      	ldr	r0, [sp, #52]	; 0x34
90025ad8:	f7ff fe2a 	bl	90025730 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
90025adc:	e778      	b.n	900259d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
90025ade:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90025ae0:	1420      	asrs	r0, r4, #16
90025ae2:	1431      	asrs	r1, r6, #16
90025ae4:	f3c6 3e03 	ubfx	lr, r6, #12, #4
90025ae8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
90025aec:	f3c4 3203 	ubfx	r2, r4, #12, #4
90025af0:	fb03 0101 	mla	r1, r3, r1, r0
90025af4:	eb08 0041 	add.w	r0, r8, r1, lsl #1
90025af8:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
90025afc:	8841      	ldrh	r1, [r0, #2]
90025afe:	f1be 0f00 	cmp.w	lr, #0
90025b02:	d00b      	beq.n	90025b1c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
90025b04:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
90025b08:	3b01      	subs	r3, #1
90025b0a:	005b      	lsls	r3, r3, #1
90025b0c:	3302      	adds	r3, #2
90025b0e:	eb00 0b03 	add.w	fp, r0, r3
90025b12:	5ac3      	ldrh	r3, [r0, r3]
90025b14:	930a      	str	r3, [sp, #40]	; 0x28
90025b16:	f8bb 3002 	ldrh.w	r3, [fp, #2]
90025b1a:	930b      	str	r3, [sp, #44]	; 0x2c
90025b1c:	ea4f 400c 	mov.w	r0, ip, lsl #16
90025b20:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90025b24:	fb12 f30e 	smulbb	r3, r2, lr
90025b28:	ea4f 4b01 	mov.w	fp, r1, lsl #16
90025b2c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90025b30:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90025b34:	10db      	asrs	r3, r3, #3
90025b36:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90025b3a:	ea40 000c 	orr.w	r0, r0, ip
90025b3e:	f1ce 0c10 	rsb	ip, lr, #16
90025b42:	ea4b 0101 	orr.w	r1, fp, r1
90025b46:	f109 39ff 	add.w	r9, r9, #4294967295
90025b4a:	ebac 0c02 	sub.w	ip, ip, r2
90025b4e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90025b52:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
90025b56:	4351      	muls	r1, r2
90025b58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90025b5a:	fb0c 1c00 	mla	ip, ip, r0, r1
90025b5e:	990a      	ldr	r1, [sp, #40]	; 0x28
90025b60:	ea4f 4b02 	mov.w	fp, r2, lsl #16
90025b64:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
90025b68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90025b6a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90025b6e:	0412      	lsls	r2, r2, #16
90025b70:	ea4b 0000 	orr.w	r0, fp, r0
90025b74:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
90025b78:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90025b7c:	fb03 c000 	mla	r0, r3, r0, ip
90025b80:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
90025b84:	ea42 0b0b 	orr.w	fp, r2, fp
90025b88:	fb03 000b 	mla	r0, r3, fp, r0
90025b8c:	0d43      	lsrs	r3, r0, #21
90025b8e:	0940      	lsrs	r0, r0, #5
90025b90:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90025b94:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90025b98:	4318      	orrs	r0, r3
90025b9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90025b9c:	441c      	add	r4, r3
90025b9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
90025ba0:	f82a 0b02 	strh.w	r0, [sl], #2
90025ba4:	441e      	add	r6, r3
90025ba6:	e73b      	b.n	90025a20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
90025ba8:	b00f      	add	sp, #60	; 0x3c
90025baa:	ecbd 8b08 	vpop	{d8-d11}
90025bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

90025bb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
90025bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90025bb8:	880e      	ldrh	r6, [r1, #0]
90025bba:	b085      	sub	sp, #20
90025bbc:	4690      	mov	r8, r2
90025bbe:	ea4f 2c26 	mov.w	ip, r6, asr #8
90025bc2:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
90025bc6:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
90025bca:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
90025bce:	ea4f 0ce6 	mov.w	ip, r6, asr #3
90025bd2:	00f6      	lsls	r6, r6, #3
90025bd4:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
90025bd8:	9200      	str	r2, [sp, #0]
90025bda:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
90025bde:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
90025be2:	9201      	str	r2, [sp, #4]
90025be4:	b2f2      	uxtb	r2, r6
90025be6:	2c00      	cmp	r4, #0
90025be8:	fb04 5603 	mla	r6, r4, r3, r5
90025bec:	9202      	str	r2, [sp, #8]
90025bee:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
90025bf2:	db36      	blt.n	90025c62 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
90025bf4:	45a6      	cmp	lr, r4
90025bf6:	dd34      	ble.n	90025c62 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
90025bf8:	2d00      	cmp	r5, #0
90025bfa:	db30      	blt.n	90025c5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
90025bfc:	42ab      	cmp	r3, r5
90025bfe:	dd2e      	ble.n	90025c5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
90025c00:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
90025c04:	1c6e      	adds	r6, r5, #1
90025c06:	d42f      	bmi.n	90025c68 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
90025c08:	42b3      	cmp	r3, r6
90025c0a:	dd2d      	ble.n	90025c68 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
90025c0c:	b370      	cbz	r0, 90025c6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb8>
90025c0e:	f8dc 6004 	ldr.w	r6, [ip, #4]
90025c12:	3401      	adds	r4, #1
90025c14:	d42e      	bmi.n	90025c74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
90025c16:	45a6      	cmp	lr, r4
90025c18:	dd2c      	ble.n	90025c74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
90025c1a:	b377      	cbz	r7, 90025c7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc6>
90025c1c:	2d00      	cmp	r5, #0
90025c1e:	db27      	blt.n	90025c70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
90025c20:	42ab      	cmp	r3, r5
90025c22:	dd25      	ble.n	90025c70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
90025c24:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
90025c28:	3501      	adds	r5, #1
90025c2a:	d429      	bmi.n	90025c80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
90025c2c:	42ab      	cmp	r3, r5
90025c2e:	dd27      	ble.n	90025c80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
90025c30:	b340      	cbz	r0, 90025c84 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
90025c32:	3301      	adds	r3, #1
90025c34:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
90025c38:	280f      	cmp	r0, #15
90025c3a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
90025c3e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
90025c42:	ea4f 6914 	mov.w	r9, r4, lsr #24
90025c46:	ea4f 6813 	mov.w	r8, r3, lsr #24
90025c4a:	d801      	bhi.n	90025c50 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
90025c4c:	2f0f      	cmp	r7, #15
90025c4e:	d91b      	bls.n	90025c88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd4>
90025c50:	4b85      	ldr	r3, [pc, #532]	; (90025e68 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
90025c52:	f240 210d 	movw	r1, #525	; 0x20d
90025c56:	4a85      	ldr	r2, [pc, #532]	; (90025e6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
90025c58:	4885      	ldr	r0, [pc, #532]	; (90025e70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
90025c5a:	f002 ffeb 	bl	90028c34 <__assert_func>
90025c5e:	2200      	movs	r2, #0
90025c60:	e7d0      	b.n	90025c04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x50>
90025c62:	2600      	movs	r6, #0
90025c64:	4632      	mov	r2, r6
90025c66:	e7d4      	b.n	90025c12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
90025c68:	2600      	movs	r6, #0
90025c6a:	e7d2      	b.n	90025c12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
90025c6c:	4606      	mov	r6, r0
90025c6e:	e7d0      	b.n	90025c12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
90025c70:	2400      	movs	r4, #0
90025c72:	e7d9      	b.n	90025c28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
90025c74:	2300      	movs	r3, #0
90025c76:	461c      	mov	r4, r3
90025c78:	e7de      	b.n	90025c38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
90025c7a:	463b      	mov	r3, r7
90025c7c:	463c      	mov	r4, r7
90025c7e:	e7db      	b.n	90025c38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
90025c80:	2300      	movs	r3, #0
90025c82:	e7d9      	b.n	90025c38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
90025c84:	4603      	mov	r3, r0
90025c86:	e7d7      	b.n	90025c38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
90025c88:	b280      	uxth	r0, r0
90025c8a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
90025c8e:	b2bf      	uxth	r7, r7
90025c90:	fb00 fe07 	mul.w	lr, r0, r7
90025c94:	ea4f 1000 	mov.w	r0, r0, lsl #4
90025c98:	ebce 1707 	rsb	r7, lr, r7, lsl #4
90025c9c:	eba0 0c0e 	sub.w	ip, r0, lr
90025ca0:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
90025ca4:	b2bf      	uxth	r7, r7
90025ca6:	fa1f fc8c 	uxth.w	ip, ip
90025caa:	eba5 0507 	sub.w	r5, r5, r7
90025cae:	fb0c f00a 	mul.w	r0, ip, sl
90025cb2:	b2ad      	uxth	r5, r5
90025cb4:	fb05 000b 	mla	r0, r5, fp, r0
90025cb8:	fb07 0009 	mla	r0, r7, r9, r0
90025cbc:	fb0e 0008 	mla	r0, lr, r8, r0
90025cc0:	f3c0 2007 	ubfx	r0, r0, #8, #8
90025cc4:	9003      	str	r0, [sp, #12]
90025cc6:	d018      	beq.n	90025cfa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x146>
90025cc8:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
90025ccc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90025cd0:	fb0b f000 	mul.w	r0, fp, r0
90025cd4:	fb0b fb02 	mul.w	fp, fp, r2
90025cd8:	0a02      	lsrs	r2, r0, #8
90025cda:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
90025cde:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90025ce2:	4402      	add	r2, r0
90025ce4:	f50b 7080 	add.w	r0, fp, #256	; 0x100
90025ce8:	eb00 201b 	add.w	r0, r0, fp, lsr #8
90025cec:	0a12      	lsrs	r2, r2, #8
90025cee:	0a00      	lsrs	r0, r0, #8
90025cf0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90025cf4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
90025cf8:	4302      	orrs	r2, r0
90025cfa:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
90025cfe:	d019      	beq.n	90025d34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x180>
90025d00:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
90025d04:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
90025d08:	fb0a fb0b 	mul.w	fp, sl, fp
90025d0c:	fb0a fa06 	mul.w	sl, sl, r6
90025d10:	ea4f 261b 	mov.w	r6, fp, lsr #8
90025d14:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90025d18:	f50a 7080 	add.w	r0, sl, #256	; 0x100
90025d1c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
90025d20:	eb00 201a 	add.w	r0, r0, sl, lsr #8
90025d24:	445e      	add	r6, fp
90025d26:	0a00      	lsrs	r0, r0, #8
90025d28:	0a36      	lsrs	r6, r6, #8
90025d2a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
90025d2e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
90025d32:	4306      	orrs	r6, r0
90025d34:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90025d38:	d019      	beq.n	90025d6e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1ba>
90025d3a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
90025d3e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
90025d42:	fb09 fa0a 	mul.w	sl, r9, sl
90025d46:	fb09 f904 	mul.w	r9, r9, r4
90025d4a:	ea4f 241a 	mov.w	r4, sl, lsr #8
90025d4e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90025d52:	f509 7080 	add.w	r0, r9, #256	; 0x100
90025d56:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
90025d5a:	eb00 2019 	add.w	r0, r0, r9, lsr #8
90025d5e:	4454      	add	r4, sl
90025d60:	0a00      	lsrs	r0, r0, #8
90025d62:	0a24      	lsrs	r4, r4, #8
90025d64:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
90025d68:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
90025d6c:	4304      	orrs	r4, r0
90025d6e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
90025d72:	d019      	beq.n	90025da8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1f4>
90025d74:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
90025d78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90025d7c:	fb08 f909 	mul.w	r9, r8, r9
90025d80:	fb08 f803 	mul.w	r8, r8, r3
90025d84:	ea4f 2319 	mov.w	r3, r9, lsr #8
90025d88:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
90025d8c:	f508 7080 	add.w	r0, r8, #256	; 0x100
90025d90:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90025d94:	eb00 2018 	add.w	r0, r0, r8, lsr #8
90025d98:	444b      	add	r3, r9
90025d9a:	0a00      	lsrs	r0, r0, #8
90025d9c:	0a1b      	lsrs	r3, r3, #8
90025d9e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
90025da2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90025da6:	4303      	orrs	r3, r0
90025da8:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
90025dac:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
90025db0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
90025db4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90025db8:	fb0c f808 	mul.w	r8, ip, r8
90025dbc:	fb0c f606 	mul.w	r6, ip, r6
90025dc0:	fb05 8800 	mla	r8, r5, r0, r8
90025dc4:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
90025dc8:	fb05 6202 	mla	r2, r5, r2, r6
90025dcc:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
90025dd0:	fb07 8800 	mla	r8, r7, r0, r8
90025dd4:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
90025dd8:	b2ad      	uxth	r5, r5
90025dda:	fb0e 8000 	mla	r0, lr, r0, r8
90025dde:	0a00      	lsrs	r0, r0, #8
90025de0:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
90025de4:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
90025de8:	9c00      	ldr	r4, [sp, #0]
90025dea:	fb07 2700 	mla	r7, r7, r0, r2
90025dee:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
90025df2:	9b03      	ldr	r3, [sp, #12]
90025df4:	fb0e 7000 	mla	r0, lr, r0, r7
90025df8:	436b      	muls	r3, r5
90025dfa:	0a00      	lsrs	r0, r0, #8
90025dfc:	1c5a      	adds	r2, r3, #1
90025dfe:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
90025e02:	eb02 2213 	add.w	r2, r2, r3, lsr #8
90025e06:	ea48 0000 	orr.w	r0, r8, r0
90025e0a:	ea6f 2212 	mvn.w	r2, r2, lsr #8
90025e0e:	0c03      	lsrs	r3, r0, #16
90025e10:	b2d2      	uxtb	r2, r2
90025e12:	fb14 f602 	smulbb	r6, r4, r2
90025e16:	f3c0 2407 	ubfx	r4, r0, #8, #8
90025e1a:	b2c0      	uxtb	r0, r0
90025e1c:	fb03 6305 	mla	r3, r3, r5, r6
90025e20:	b29e      	uxth	r6, r3
90025e22:	9b01      	ldr	r3, [sp, #4]
90025e24:	fb13 f302 	smulbb	r3, r3, r2
90025e28:	fb04 3405 	mla	r4, r4, r5, r3
90025e2c:	9b02      	ldr	r3, [sp, #8]
90025e2e:	fb13 f202 	smulbb	r2, r3, r2
90025e32:	b2a4      	uxth	r4, r4
90025e34:	1c73      	adds	r3, r6, #1
90025e36:	fb00 2005 	mla	r0, r0, r5, r2
90025e3a:	eb03 2316 	add.w	r3, r3, r6, lsr #8
90025e3e:	b280      	uxth	r0, r0
90025e40:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
90025e44:	1c42      	adds	r2, r0, #1
90025e46:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90025e4a:	1c62      	adds	r2, r4, #1
90025e4c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
90025e50:	f3c0 20c4 	ubfx	r0, r0, #11, #5
90025e54:	0952      	lsrs	r2, r2, #5
90025e56:	4303      	orrs	r3, r0
90025e58:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90025e5c:	4313      	orrs	r3, r2
90025e5e:	800b      	strh	r3, [r1, #0]
90025e60:	b005      	add	sp, #20
90025e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90025e66:	bf00      	nop
90025e68:	900306ff 	.word	0x900306ff
90025e6c:	90030cbd 	.word	0x90030cbd
90025e70:	900307e8 	.word	0x900307e8

90025e74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90025e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90025e78:	ed2d 8b08 	vpush	{d8-d11}
90025e7c:	b09d      	sub	sp, #116	; 0x74
90025e7e:	eeb0 aa40 	vmov.f32	s20, s0
90025e82:	eef0 9a60 	vmov.f32	s19, s1
90025e86:	9219      	str	r2, [sp, #100]	; 0x64
90025e88:	eeb0 9a41 	vmov.f32	s18, s2
90025e8c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
90025e8e:	eeb0 8a62 	vmov.f32	s16, s5
90025e92:	9307      	str	r3, [sp, #28]
90025e94:	eef0 8a43 	vmov.f32	s17, s6
90025e98:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
90025e9c:	eef0 ba44 	vmov.f32	s23, s8
90025ea0:	901b      	str	r0, [sp, #108]	; 0x6c
90025ea2:	eeb0 ba64 	vmov.f32	s22, s9
90025ea6:	931a      	str	r3, [sp, #104]	; 0x68
90025ea8:	eef0 aa45 	vmov.f32	s21, s10
90025eac:	6850      	ldr	r0, [r2, #4]
90025eae:	9117      	str	r1, [sp, #92]	; 0x5c
90025eb0:	6812      	ldr	r2, [r2, #0]
90025eb2:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
90025eb6:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
90025eba:	fb00 1303 	mla	r3, r0, r3, r1
90025ebe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90025ec2:	930a      	str	r3, [sp, #40]	; 0x28
90025ec4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
90025ec6:	681b      	ldr	r3, [r3, #0]
90025ec8:	9310      	str	r3, [sp, #64]	; 0x40
90025eca:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
90025ece:	930b      	str	r3, [sp, #44]	; 0x2c
90025ed0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90025ed2:	2b00      	cmp	r3, #0
90025ed4:	dc03      	bgt.n	90025ede <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
90025ed6:	9b19      	ldr	r3, [sp, #100]	; 0x64
90025ed8:	2b00      	cmp	r3, #0
90025eda:	f340 837b 	ble.w	900265d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
90025ede:	9b36      	ldr	r3, [sp, #216]	; 0xd8
90025ee0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90025ee4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90025ee8:	1e48      	subs	r0, r1, #1
90025eea:	1e57      	subs	r7, r2, #1
90025eec:	9b07      	ldr	r3, [sp, #28]
90025eee:	2b00      	cmp	r3, #0
90025ef0:	f340 8194 	ble.w	9002621c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
90025ef4:	ea5f 4c24 	movs.w	ip, r4, asr #16
90025ef8:	ea4f 4326 	mov.w	r3, r6, asr #16
90025efc:	d406      	bmi.n	90025f0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90025efe:	4584      	cmp	ip, r0
90025f00:	da04      	bge.n	90025f0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90025f02:	2b00      	cmp	r3, #0
90025f04:	db02      	blt.n	90025f0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90025f06:	42bb      	cmp	r3, r7
90025f08:	f2c0 8189 	blt.w	9002621e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
90025f0c:	f11c 0c01 	adds.w	ip, ip, #1
90025f10:	f100 8179 	bmi.w	90026206 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
90025f14:	4561      	cmp	r1, ip
90025f16:	f2c0 8176 	blt.w	90026206 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
90025f1a:	3301      	adds	r3, #1
90025f1c:	f100 8173 	bmi.w	90026206 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
90025f20:	429a      	cmp	r2, r3
90025f22:	f2c0 8170 	blt.w	90026206 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
90025f26:	9b07      	ldr	r3, [sp, #28]
90025f28:	9f0a      	ldr	r7, [sp, #40]	; 0x28
90025f2a:	9318      	str	r3, [sp, #96]	; 0x60
90025f2c:	9b18      	ldr	r3, [sp, #96]	; 0x60
90025f2e:	2b00      	cmp	r3, #0
90025f30:	f340 8192 	ble.w	90026258 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
90025f34:	9a36      	ldr	r2, [sp, #216]	; 0xd8
90025f36:	ea4f 4c26 	mov.w	ip, r6, asr #16
90025f3a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
90025f3c:	f3c4 3003 	ubfx	r0, r4, #12, #4
90025f40:	f8d2 e00c 	ldr.w	lr, [r2, #12]
90025f44:	1422      	asrs	r2, r4, #16
90025f46:	f3c6 3103 	ubfx	r1, r6, #12, #4
90025f4a:	689b      	ldr	r3, [r3, #8]
90025f4c:	f100 81d3 	bmi.w	900262f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
90025f50:	f103 38ff 	add.w	r8, r3, #4294967295
90025f54:	4542      	cmp	r2, r8
90025f56:	f280 81ce 	bge.w	900262f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
90025f5a:	f1bc 0f00 	cmp.w	ip, #0
90025f5e:	f2c0 81ca 	blt.w	900262f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
90025f62:	f10e 38ff 	add.w	r8, lr, #4294967295
90025f66:	45c4      	cmp	ip, r8
90025f68:	f280 81c5 	bge.w	900262f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
90025f6c:	b21b      	sxth	r3, r3
90025f6e:	9d10      	ldr	r5, [sp, #64]	; 0x40
90025f70:	fb0c 2203 	mla	r2, ip, r3, r2
90025f74:	eb05 0882 	add.w	r8, r5, r2, lsl #2
90025f78:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
90025f7c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
90025f80:	2800      	cmp	r0, #0
90025f82:	f000 81af 	beq.w	900262e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
90025f86:	f8d8 5004 	ldr.w	r5, [r8, #4]
90025f8a:	950c      	str	r5, [sp, #48]	; 0x30
90025f8c:	0e2d      	lsrs	r5, r5, #24
90025f8e:	9513      	str	r5, [sp, #76]	; 0x4c
90025f90:	b181      	cbz	r1, 90025fb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
90025f92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
90025f96:	3b01      	subs	r3, #1
90025f98:	009b      	lsls	r3, r3, #2
90025f9a:	3304      	adds	r3, #4
90025f9c:	eb08 0c03 	add.w	ip, r8, r3
90025fa0:	f858 3003 	ldr.w	r3, [r8, r3]
90025fa4:	9308      	str	r3, [sp, #32]
90025fa6:	0e1b      	lsrs	r3, r3, #24
90025fa8:	9311      	str	r3, [sp, #68]	; 0x44
90025faa:	f8dc 3004 	ldr.w	r3, [ip, #4]
90025fae:	930d      	str	r3, [sp, #52]	; 0x34
90025fb0:	0e1b      	lsrs	r3, r3, #24
90025fb2:	9314      	str	r3, [sp, #80]	; 0x50
90025fb4:	b280      	uxth	r0, r0
90025fb6:	9d11      	ldr	r5, [sp, #68]	; 0x44
90025fb8:	b289      	uxth	r1, r1
90025fba:	fb00 f901 	mul.w	r9, r0, r1
90025fbe:	0100      	lsls	r0, r0, #4
90025fc0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90025fc4:	eba0 0809 	sub.w	r8, r0, r9
90025fc8:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
90025fcc:	9813      	ldr	r0, [sp, #76]	; 0x4c
90025fce:	b289      	uxth	r1, r1
90025fd0:	fa1f f888 	uxth.w	r8, r8
90025fd4:	1a5b      	subs	r3, r3, r1
90025fd6:	fb08 f000 	mul.w	r0, r8, r0
90025fda:	b29b      	uxth	r3, r3
90025fdc:	fb03 000e 	mla	r0, r3, lr, r0
90025fe0:	fb01 0005 	mla	r0, r1, r5, r0
90025fe4:	9d14      	ldr	r5, [sp, #80]	; 0x50
90025fe6:	fb09 0005 	mla	r0, r9, r5, r0
90025fea:	f3c0 2007 	ubfx	r0, r0, #8, #8
90025fee:	2800      	cmp	r0, #0
90025ff0:	f000 8100 	beq.w	900261f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
90025ff4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
90025ff8:	d01b      	beq.n	90026032 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
90025ffa:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
90025ffe:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90026002:	fb0e fa0a 	mul.w	sl, lr, sl
90026006:	fb0e fe02 	mul.w	lr, lr, r2
9002600a:	ea4f 221a 	mov.w	r2, sl, lsr #8
9002600e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90026012:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
90026016:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9002601a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9002601e:	4452      	add	r2, sl
90026020:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90026024:	0a12      	lsrs	r2, r2, #8
90026026:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9002602a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9002602e:	ea42 020c 	orr.w	r2, r2, ip
90026032:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90026034:	2dff      	cmp	r5, #255	; 0xff
90026036:	d021      	beq.n	9002607c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
90026038:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9002603a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
9002603e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90026040:	fb05 fb0b 	mul.w	fp, r5, fp
90026044:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90026046:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9002604a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9002604c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90026050:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90026054:	fb05 fa0a 	mul.w	sl, r5, sl
90026058:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002605c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90026060:	44de      	add	lr, fp
90026062:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90026066:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9002606a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002606e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90026072:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90026076:	ea4e 050a 	orr.w	r5, lr, sl
9002607a:	950c      	str	r5, [sp, #48]	; 0x30
9002607c:	9d11      	ldr	r5, [sp, #68]	; 0x44
9002607e:	2dff      	cmp	r5, #255	; 0xff
90026080:	d021      	beq.n	900260c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
90026082:	9d08      	ldr	r5, [sp, #32]
90026084:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90026088:	9d11      	ldr	r5, [sp, #68]	; 0x44
9002608a:	fb05 fb0b 	mul.w	fp, r5, fp
9002608e:	9d08      	ldr	r5, [sp, #32]
90026090:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90026094:	9d11      	ldr	r5, [sp, #68]	; 0x44
90026096:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9002609a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9002609e:	fb05 fa0a 	mul.w	sl, r5, sl
900260a2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900260a6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900260aa:	44de      	add	lr, fp
900260ac:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900260b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900260b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900260b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900260bc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900260c0:	ea4e 050a 	orr.w	r5, lr, sl
900260c4:	9508      	str	r5, [sp, #32]
900260c6:	9d14      	ldr	r5, [sp, #80]	; 0x50
900260c8:	2dff      	cmp	r5, #255	; 0xff
900260ca:	d021      	beq.n	90026110 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
900260cc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
900260ce:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
900260d2:	9d14      	ldr	r5, [sp, #80]	; 0x50
900260d4:	fb05 fb0b 	mul.w	fp, r5, fp
900260d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
900260da:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900260de:	9d14      	ldr	r5, [sp, #80]	; 0x50
900260e0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
900260e4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
900260e8:	fb05 fa0a 	mul.w	sl, r5, sl
900260ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900260f0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900260f4:	44de      	add	lr, fp
900260f6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900260fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900260fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90026102:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90026106:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002610a:	ea4e 050a 	orr.w	r5, lr, sl
9002610e:	950d      	str	r5, [sp, #52]	; 0x34
90026110:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90026112:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
90026116:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9002611a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9002611e:	9d08      	ldr	r5, [sp, #32]
90026120:	fb08 fc0c 	mul.w	ip, r8, ip
90026124:	fb03 cc0e 	mla	ip, r3, lr, ip
90026128:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
9002612c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9002612e:	fb01 cc0e 	mla	ip, r1, lr, ip
90026132:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90026136:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90026138:	fb09 cc0e 	mla	ip, r9, lr, ip
9002613c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
90026140:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90026142:	fb08 f80e 	mul.w	r8, r8, lr
90026146:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002614a:	f8b7 e000 	ldrh.w	lr, [r7]
9002614e:	fb03 8202 	mla	r2, r3, r2, r8
90026152:	9b08      	ldr	r3, [sp, #32]
90026154:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90026158:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
9002615c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9002615e:	fb01 220a 	mla	r2, r1, sl, r2
90026162:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
90026166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90026168:	fb09 2901 	mla	r9, r9, r1, r2
9002616c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9002616e:	4343      	muls	r3, r0
90026170:	ea4f 2919 	mov.w	r9, r9, lsr #8
90026174:	1c58      	adds	r0, r3, #1
90026176:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9002617a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
9002617e:	ea4c 0c09 	orr.w	ip, ip, r9
90026182:	ea4f 232e 	mov.w	r3, lr, asr #8
90026186:	ea6f 2010 	mvn.w	r0, r0, lsr #8
9002618a:	ea4f 411c 	mov.w	r1, ip, lsr #16
9002618e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
90026192:	b2c0      	uxtb	r0, r0
90026194:	fb11 f102 	smulbb	r1, r1, r2
90026198:	ea4f 02ee 	mov.w	r2, lr, asr #3
9002619c:	fb03 1300 	mla	r3, r3, r0, r1
900261a0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
900261a4:	b299      	uxth	r1, r3
900261a6:	f3cc 2307 	ubfx	r3, ip, #8, #8
900261aa:	fa5f fc8c 	uxtb.w	ip, ip
900261ae:	fb13 f305 	smulbb	r3, r3, r5
900261b2:	fb1c fc05 	smulbb	ip, ip, r5
900261b6:	fb02 3200 	mla	r2, r2, r0, r3
900261ba:	ea4f 03ce 	mov.w	r3, lr, lsl #3
900261be:	b2db      	uxtb	r3, r3
900261c0:	b292      	uxth	r2, r2
900261c2:	fb03 cc00 	mla	ip, r3, r0, ip
900261c6:	1c4b      	adds	r3, r1, #1
900261c8:	fa1f fc8c 	uxth.w	ip, ip
900261cc:	eb03 2311 	add.w	r3, r3, r1, lsr #8
900261d0:	1c51      	adds	r1, r2, #1
900261d2:	f10c 0001 	add.w	r0, ip, #1
900261d6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
900261da:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
900261de:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
900261e2:	0952      	lsrs	r2, r2, #5
900261e4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
900261e8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900261ec:	ea43 030c 	orr.w	r3, r3, ip
900261f0:	4313      	orrs	r3, r2
900261f2:	803b      	strh	r3, [r7, #0]
900261f4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
900261f6:	3702      	adds	r7, #2
900261f8:	441c      	add	r4, r3
900261fa:	9b32      	ldr	r3, [sp, #200]	; 0xc8
900261fc:	441e      	add	r6, r3
900261fe:	9b18      	ldr	r3, [sp, #96]	; 0x60
90026200:	3b01      	subs	r3, #1
90026202:	9318      	str	r3, [sp, #96]	; 0x60
90026204:	e692      	b.n	90025f2c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
90026206:	9b31      	ldr	r3, [sp, #196]	; 0xc4
90026208:	441c      	add	r4, r3
9002620a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
9002620c:	441e      	add	r6, r3
9002620e:	9b07      	ldr	r3, [sp, #28]
90026210:	3b01      	subs	r3, #1
90026212:	9307      	str	r3, [sp, #28]
90026214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90026216:	3302      	adds	r3, #2
90026218:	930a      	str	r3, [sp, #40]	; 0x28
9002621a:	e667      	b.n	90025eec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9002621c:	d023      	beq.n	90026266 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
9002621e:	9b07      	ldr	r3, [sp, #28]
90026220:	9831      	ldr	r0, [sp, #196]	; 0xc4
90026222:	3b01      	subs	r3, #1
90026224:	fb00 4003 	mla	r0, r0, r3, r4
90026228:	1400      	asrs	r0, r0, #16
9002622a:	f53f ae7c 	bmi.w	90025f26 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
9002622e:	3901      	subs	r1, #1
90026230:	4288      	cmp	r0, r1
90026232:	f6bf ae78 	bge.w	90025f26 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
90026236:	9932      	ldr	r1, [sp, #200]	; 0xc8
90026238:	fb01 6303 	mla	r3, r1, r3, r6
9002623c:	141b      	asrs	r3, r3, #16
9002623e:	f53f ae72 	bmi.w	90025f26 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
90026242:	3a01      	subs	r2, #1
90026244:	4293      	cmp	r3, r2
90026246:	f6bf ae6e 	bge.w	90025f26 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
9002624a:	f8dd b01c 	ldr.w	fp, [sp, #28]
9002624e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
90026252:	f1bb 0f00 	cmp.w	fp, #0
90026256:	dc6c      	bgt.n	90026332 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4be>
90026258:	9b07      	ldr	r3, [sp, #28]
9002625a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
9002625e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90026260:	eb03 0345 	add.w	r3, r3, r5, lsl #1
90026264:	930a      	str	r3, [sp, #40]	; 0x28
90026266:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90026268:	2b00      	cmp	r3, #0
9002626a:	f340 81b3 	ble.w	900265d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
9002626e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90026272:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90026274:	ee3a aa2b 	vadd.f32	s20, s20, s23
90026278:	ee79 9a8b 	vadd.f32	s19, s19, s22
9002627c:	eef0 6a48 	vmov.f32	s13, s16
90026280:	eec7 7a0a 	vdiv.f32	s15, s14, s20
90026284:	ee39 9a2a 	vadd.f32	s18, s18, s21
90026288:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002628c:	ee16 4a90 	vmov	r4, s13
90026290:	eef0 6a68 	vmov.f32	s13, s17
90026294:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90026298:	ee16 6a90 	vmov	r6, s13
9002629c:	ee29 7aa7 	vmul.f32	s14, s19, s15
900262a0:	ee69 7a27 	vmul.f32	s15, s18, s15
900262a4:	ee37 8a48 	vsub.f32	s16, s14, s16
900262a8:	ee77 8ae8 	vsub.f32	s17, s15, s17
900262ac:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
900262b0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
900262b4:	ee18 2a10 	vmov	r2, s16
900262b8:	eeb0 8a47 	vmov.f32	s16, s14
900262bc:	fb92 f3f3 	sdiv	r3, r2, r3
900262c0:	ee18 2a90 	vmov	r2, s17
900262c4:	9331      	str	r3, [sp, #196]	; 0xc4
900262c6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
900262c8:	eef0 8a67 	vmov.f32	s17, s15
900262cc:	fb92 f3f3 	sdiv	r3, r2, r3
900262d0:	9332      	str	r3, [sp, #200]	; 0xc8
900262d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
900262d4:	9a19      	ldr	r2, [sp, #100]	; 0x64
900262d6:	3b01      	subs	r3, #1
900262d8:	9317      	str	r3, [sp, #92]	; 0x5c
900262da:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
900262dc:	bf08      	it	eq
900262de:	4613      	moveq	r3, r2
900262e0:	9307      	str	r3, [sp, #28]
900262e2:	e5f5      	b.n	90025ed0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
900262e4:	2900      	cmp	r1, #0
900262e6:	f43f ae65 	beq.w	90025fb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
900262ea:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
900262ee:	9308      	str	r3, [sp, #32]
900262f0:	0e1b      	lsrs	r3, r3, #24
900262f2:	9311      	str	r3, [sp, #68]	; 0x44
900262f4:	e65e      	b.n	90025fb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
900262f6:	f112 0801 	adds.w	r8, r2, #1
900262fa:	f53f af7b 	bmi.w	900261f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
900262fe:	4543      	cmp	r3, r8
90026300:	f6ff af78 	blt.w	900261f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
90026304:	f11c 0801 	adds.w	r8, ip, #1
90026308:	f53f af74 	bmi.w	900261f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
9002630c:	45c6      	cmp	lr, r8
9002630e:	f6ff af71 	blt.w	900261f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
90026312:	9d1a      	ldr	r5, [sp, #104]	; 0x68
90026314:	b21b      	sxth	r3, r3
90026316:	9201      	str	r2, [sp, #4]
90026318:	fa0f f28e 	sxth.w	r2, lr
9002631c:	e9cd 1504 	strd	r1, r5, [sp, #16]
90026320:	e9cd c002 	strd	ip, r0, [sp, #8]
90026324:	9200      	str	r2, [sp, #0]
90026326:	4639      	mov	r1, r7
90026328:	9a10      	ldr	r2, [sp, #64]	; 0x40
9002632a:	981b      	ldr	r0, [sp, #108]	; 0x6c
9002632c:	f7ff fc42 	bl	90025bb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
90026330:	e760      	b.n	900261f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
90026332:	9b36      	ldr	r3, [sp, #216]	; 0xd8
90026334:	1427      	asrs	r7, r4, #16
90026336:	9d10      	ldr	r5, [sp, #64]	; 0x40
90026338:	f3c4 3203 	ubfx	r2, r4, #12, #4
9002633c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90026340:	1433      	asrs	r3, r6, #16
90026342:	f3c6 3003 	ubfx	r0, r6, #12, #4
90026346:	fb01 7303 	mla	r3, r1, r3, r7
9002634a:	eb05 0783 	add.w	r7, r5, r3, lsl #2
9002634e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
90026352:	ea4f 6c13 	mov.w	ip, r3, lsr #24
90026356:	2a00      	cmp	r2, #0
90026358:	f000 8133 	beq.w	900265c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74e>
9002635c:	687d      	ldr	r5, [r7, #4]
9002635e:	950e      	str	r5, [sp, #56]	; 0x38
90026360:	0e2d      	lsrs	r5, r5, #24
90026362:	9515      	str	r5, [sp, #84]	; 0x54
90026364:	b178      	cbz	r0, 90026386 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
90026366:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
9002636a:	3901      	subs	r1, #1
9002636c:	0089      	lsls	r1, r1, #2
9002636e:	3104      	adds	r1, #4
90026370:	eb07 0e01 	add.w	lr, r7, r1
90026374:	5879      	ldr	r1, [r7, r1]
90026376:	9109      	str	r1, [sp, #36]	; 0x24
90026378:	0e09      	lsrs	r1, r1, #24
9002637a:	9112      	str	r1, [sp, #72]	; 0x48
9002637c:	f8de 1004 	ldr.w	r1, [lr, #4]
90026380:	910f      	str	r1, [sp, #60]	; 0x3c
90026382:	0e09      	lsrs	r1, r1, #24
90026384:	9116      	str	r1, [sp, #88]	; 0x58
90026386:	b292      	uxth	r2, r2
90026388:	9915      	ldr	r1, [sp, #84]	; 0x54
9002638a:	b280      	uxth	r0, r0
9002638c:	9d12      	ldr	r5, [sp, #72]	; 0x48
9002638e:	fb02 f800 	mul.w	r8, r2, r0
90026392:	0112      	lsls	r2, r2, #4
90026394:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
90026398:	eba2 0e08 	sub.w	lr, r2, r8
9002639c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
900263a0:	b280      	uxth	r0, r0
900263a2:	fa1f fe8e 	uxth.w	lr, lr
900263a6:	1a12      	subs	r2, r2, r0
900263a8:	fb0e f101 	mul.w	r1, lr, r1
900263ac:	b292      	uxth	r2, r2
900263ae:	fb02 110c 	mla	r1, r2, ip, r1
900263b2:	fb00 1105 	mla	r1, r0, r5, r1
900263b6:	9d16      	ldr	r5, [sp, #88]	; 0x58
900263b8:	fb08 1105 	mla	r1, r8, r5, r1
900263bc:	f3c1 2107 	ubfx	r1, r1, #8, #8
900263c0:	2900      	cmp	r1, #0
900263c2:	f000 80f5 	beq.w	900265b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
900263c6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
900263ca:	d019      	beq.n	90026400 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
900263cc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
900263d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900263d4:	fb0c fa0a 	mul.w	sl, ip, sl
900263d8:	fb0c fc03 	mul.w	ip, ip, r3
900263dc:	ea4f 231a 	mov.w	r3, sl, lsr #8
900263e0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
900263e4:	f50c 7780 	add.w	r7, ip, #256	; 0x100
900263e8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
900263ec:	eb07 271c 	add.w	r7, r7, ip, lsr #8
900263f0:	4453      	add	r3, sl
900263f2:	0a3f      	lsrs	r7, r7, #8
900263f4:	0a1b      	lsrs	r3, r3, #8
900263f6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
900263fa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
900263fe:	433b      	orrs	r3, r7
90026400:	9d15      	ldr	r5, [sp, #84]	; 0x54
90026402:	2dff      	cmp	r5, #255	; 0xff
90026404:	d020      	beq.n	90026448 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d4>
90026406:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90026408:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9002640c:	9d15      	ldr	r5, [sp, #84]	; 0x54
9002640e:	436f      	muls	r7, r5
90026410:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90026412:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90026416:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9002641a:	9d15      	ldr	r5, [sp, #84]	; 0x54
9002641c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90026420:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90026424:	fb05 fa0a 	mul.w	sl, r5, sl
90026428:	44bc      	add	ip, r7
9002642a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9002642e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90026432:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90026436:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002643a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002643e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90026442:	ea4c 050a 	orr.w	r5, ip, sl
90026446:	950e      	str	r5, [sp, #56]	; 0x38
90026448:	9d12      	ldr	r5, [sp, #72]	; 0x48
9002644a:	2dff      	cmp	r5, #255	; 0xff
9002644c:	d020      	beq.n	90026490 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
9002644e:	9d09      	ldr	r5, [sp, #36]	; 0x24
90026450:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90026454:	9d12      	ldr	r5, [sp, #72]	; 0x48
90026456:	436f      	muls	r7, r5
90026458:	9d09      	ldr	r5, [sp, #36]	; 0x24
9002645a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9002645e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90026462:	9d12      	ldr	r5, [sp, #72]	; 0x48
90026464:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90026468:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002646c:	fb05 fa0a 	mul.w	sl, r5, sl
90026470:	44bc      	add	ip, r7
90026472:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90026476:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002647a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9002647e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90026482:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90026486:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002648a:	ea4c 050a 	orr.w	r5, ip, sl
9002648e:	9509      	str	r5, [sp, #36]	; 0x24
90026490:	9d16      	ldr	r5, [sp, #88]	; 0x58
90026492:	2dff      	cmp	r5, #255	; 0xff
90026494:	d020      	beq.n	900264d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x664>
90026496:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90026498:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9002649c:	9d16      	ldr	r5, [sp, #88]	; 0x58
9002649e:	436f      	muls	r7, r5
900264a0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
900264a2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
900264a6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900264aa:	9d16      	ldr	r5, [sp, #88]	; 0x58
900264ac:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
900264b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900264b4:	fb05 fa0a 	mul.w	sl, r5, sl
900264b8:	44bc      	add	ip, r7
900264ba:	f50a 7780 	add.w	r7, sl, #256	; 0x100
900264be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900264c2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
900264c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900264ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900264ce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900264d2:	ea4c 050a 	orr.w	r5, ip, sl
900264d6:	950f      	str	r5, [sp, #60]	; 0x3c
900264d8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900264da:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
900264de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900264e2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
900264e6:	9d09      	ldr	r5, [sp, #36]	; 0x24
900264e8:	fb0e f707 	mul.w	r7, lr, r7
900264ec:	fb02 770c 	mla	r7, r2, ip, r7
900264f0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
900264f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
900264f6:	fb00 770c 	mla	r7, r0, ip, r7
900264fa:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
900264fe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90026500:	fb08 770c 	mla	r7, r8, ip, r7
90026504:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90026508:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
9002650a:	fb0e fe0c 	mul.w	lr, lr, ip
9002650e:	0a3f      	lsrs	r7, r7, #8
90026510:	fb02 e303 	mla	r3, r2, r3, lr
90026514:	9a09      	ldr	r2, [sp, #36]	; 0x24
90026516:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
9002651a:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9002651e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90026520:	fb00 330a 	mla	r3, r0, sl, r3
90026524:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
90026528:	f8b9 0000 	ldrh.w	r0, [r9]
9002652c:	fb08 3c0c 	mla	ip, r8, ip, r3
90026530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90026532:	1202      	asrs	r2, r0, #8
90026534:	4359      	muls	r1, r3
90026536:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002653a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9002653e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90026542:	1c4b      	adds	r3, r1, #1
90026544:	ea47 070c 	orr.w	r7, r7, ip
90026548:	eb03 2111 	add.w	r1, r3, r1, lsr #8
9002654c:	0c3b      	lsrs	r3, r7, #16
9002654e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
90026552:	f3c7 2c07 	ubfx	ip, r7, #8, #8
90026556:	b2ff      	uxtb	r7, r7
90026558:	fb13 f305 	smulbb	r3, r3, r5
9002655c:	b2c9      	uxtb	r1, r1
9002655e:	fb17 f705 	smulbb	r7, r7, r5
90026562:	fb02 3201 	mla	r2, r2, r1, r3
90026566:	10c3      	asrs	r3, r0, #3
90026568:	fb1c fc05 	smulbb	ip, ip, r5
9002656c:	00c0      	lsls	r0, r0, #3
9002656e:	b292      	uxth	r2, r2
90026570:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
90026574:	b2c0      	uxtb	r0, r0
90026576:	fb03 c301 	mla	r3, r3, r1, ip
9002657a:	fb00 7001 	mla	r0, r0, r1, r7
9002657e:	1c51      	adds	r1, r2, #1
90026580:	b29b      	uxth	r3, r3
90026582:	b280      	uxth	r0, r0
90026584:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90026588:	f100 0c01 	add.w	ip, r0, #1
9002658c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
90026590:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
90026594:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
90026598:	ea42 020c 	orr.w	r2, r2, ip
9002659c:	f103 0c01 	add.w	ip, r3, #1
900265a0:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
900265a4:	095b      	lsrs	r3, r3, #5
900265a6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900265aa:	431a      	orrs	r2, r3
900265ac:	f8a9 2000 	strh.w	r2, [r9]
900265b0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
900265b2:	f109 0902 	add.w	r9, r9, #2
900265b6:	f10b 3bff 	add.w	fp, fp, #4294967295
900265ba:	441c      	add	r4, r3
900265bc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
900265be:	441e      	add	r6, r3
900265c0:	e647      	b.n	90026252 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
900265c2:	2800      	cmp	r0, #0
900265c4:	f43f aedf 	beq.w	90026386 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
900265c8:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
900265cc:	9109      	str	r1, [sp, #36]	; 0x24
900265ce:	0e09      	lsrs	r1, r1, #24
900265d0:	9112      	str	r1, [sp, #72]	; 0x48
900265d2:	e6d8      	b.n	90026386 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
900265d4:	b01d      	add	sp, #116	; 0x74
900265d6:	ecbd 8b08 	vpop	{d8-d11}
900265da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

900265e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
900265e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900265e4:	880e      	ldrh	r6, [r1, #0]
900265e6:	b085      	sub	sp, #20
900265e8:	4690      	mov	r8, r2
900265ea:	ea4f 2c26 	mov.w	ip, r6, asr #8
900265ee:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
900265f2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
900265f6:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
900265fa:	ea4f 0ce6 	mov.w	ip, r6, asr #3
900265fe:	00f6      	lsls	r6, r6, #3
90026600:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
90026604:	9200      	str	r2, [sp, #0]
90026606:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
9002660a:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
9002660e:	9201      	str	r2, [sp, #4]
90026610:	b2f2      	uxtb	r2, r6
90026612:	2c00      	cmp	r4, #0
90026614:	fb04 5603 	mla	r6, r4, r3, r5
90026618:	9202      	str	r2, [sp, #8]
9002661a:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
9002661e:	db36      	blt.n	9002668e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
90026620:	45a6      	cmp	lr, r4
90026622:	dd34      	ble.n	9002668e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
90026624:	2d00      	cmp	r5, #0
90026626:	db30      	blt.n	9002668a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xaa>
90026628:	42ab      	cmp	r3, r5
9002662a:	dd2e      	ble.n	9002668a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xaa>
9002662c:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
90026630:	1c6e      	adds	r6, r5, #1
90026632:	d42f      	bmi.n	90026694 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb4>
90026634:	42b3      	cmp	r3, r6
90026636:	dd2d      	ble.n	90026694 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb4>
90026638:	b370      	cbz	r0, 90026698 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb8>
9002663a:	f8dc 6004 	ldr.w	r6, [ip, #4]
9002663e:	3401      	adds	r4, #1
90026640:	d42e      	bmi.n	900266a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc0>
90026642:	45a6      	cmp	lr, r4
90026644:	dd2c      	ble.n	900266a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc0>
90026646:	b377      	cbz	r7, 900266a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc6>
90026648:	2d00      	cmp	r5, #0
9002664a:	db27      	blt.n	9002669c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbc>
9002664c:	42ab      	cmp	r3, r5
9002664e:	dd25      	ble.n	9002669c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbc>
90026650:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
90026654:	3501      	adds	r5, #1
90026656:	d429      	bmi.n	900266ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
90026658:	42ab      	cmp	r3, r5
9002665a:	dd27      	ble.n	900266ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
9002665c:	b340      	cbz	r0, 900266b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
9002665e:	3301      	adds	r3, #1
90026660:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
90026664:	280f      	cmp	r0, #15
90026666:	ea4f 6b12 	mov.w	fp, r2, lsr #24
9002666a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
9002666e:	ea4f 6914 	mov.w	r9, r4, lsr #24
90026672:	ea4f 6813 	mov.w	r8, r3, lsr #24
90026676:	d801      	bhi.n	9002667c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9c>
90026678:	2f0f      	cmp	r7, #15
9002667a:	d91b      	bls.n	900266b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd4>
9002667c:	4b7e      	ldr	r3, [pc, #504]	; (90026878 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x298>)
9002667e:	f240 210d 	movw	r1, #525	; 0x20d
90026682:	4a7e      	ldr	r2, [pc, #504]	; (9002687c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
90026684:	487e      	ldr	r0, [pc, #504]	; (90026880 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
90026686:	f002 fad5 	bl	90028c34 <__assert_func>
9002668a:	2200      	movs	r2, #0
9002668c:	e7d0      	b.n	90026630 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x50>
9002668e:	2600      	movs	r6, #0
90026690:	4632      	mov	r2, r6
90026692:	e7d4      	b.n	9002663e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
90026694:	2600      	movs	r6, #0
90026696:	e7d2      	b.n	9002663e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
90026698:	4606      	mov	r6, r0
9002669a:	e7d0      	b.n	9002663e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
9002669c:	2400      	movs	r4, #0
9002669e:	e7d9      	b.n	90026654 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x74>
900266a0:	2300      	movs	r3, #0
900266a2:	461c      	mov	r4, r3
900266a4:	e7de      	b.n	90026664 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
900266a6:	463b      	mov	r3, r7
900266a8:	463c      	mov	r4, r7
900266aa:	e7db      	b.n	90026664 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
900266ac:	2300      	movs	r3, #0
900266ae:	e7d9      	b.n	90026664 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
900266b0:	4603      	mov	r3, r0
900266b2:	e7d7      	b.n	90026664 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
900266b4:	b280      	uxth	r0, r0
900266b6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
900266ba:	b2bf      	uxth	r7, r7
900266bc:	fb00 fe07 	mul.w	lr, r0, r7
900266c0:	ea4f 1000 	mov.w	r0, r0, lsl #4
900266c4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
900266c8:	eba0 0c0e 	sub.w	ip, r0, lr
900266cc:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
900266d0:	b2bf      	uxth	r7, r7
900266d2:	fa1f fc8c 	uxth.w	ip, ip
900266d6:	eba5 0507 	sub.w	r5, r5, r7
900266da:	fb0c f00a 	mul.w	r0, ip, sl
900266de:	b2ad      	uxth	r5, r5
900266e0:	fb05 000b 	mla	r0, r5, fp, r0
900266e4:	fb07 0009 	mla	r0, r7, r9, r0
900266e8:	fb0e 0008 	mla	r0, lr, r8, r0
900266ec:	f3c0 2007 	ubfx	r0, r0, #8, #8
900266f0:	9003      	str	r0, [sp, #12]
900266f2:	d018      	beq.n	90026726 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x146>
900266f4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
900266f8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
900266fc:	fb0b f000 	mul.w	r0, fp, r0
90026700:	fb0b fb02 	mul.w	fp, fp, r2
90026704:	0a02      	lsrs	r2, r0, #8
90026706:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
9002670a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9002670e:	4402      	add	r2, r0
90026710:	f50b 7080 	add.w	r0, fp, #256	; 0x100
90026714:	eb00 201b 	add.w	r0, r0, fp, lsr #8
90026718:	0a12      	lsrs	r2, r2, #8
9002671a:	0a00      	lsrs	r0, r0, #8
9002671c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90026720:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
90026724:	4302      	orrs	r2, r0
90026726:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
9002672a:	d019      	beq.n	90026760 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x180>
9002672c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
90026730:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
90026734:	fb0a fb0b 	mul.w	fp, sl, fp
90026738:	fb0a fa06 	mul.w	sl, sl, r6
9002673c:	ea4f 261b 	mov.w	r6, fp, lsr #8
90026740:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90026744:	f50a 7080 	add.w	r0, sl, #256	; 0x100
90026748:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
9002674c:	eb00 201a 	add.w	r0, r0, sl, lsr #8
90026750:	445e      	add	r6, fp
90026752:	0a00      	lsrs	r0, r0, #8
90026754:	0a36      	lsrs	r6, r6, #8
90026756:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
9002675a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
9002675e:	4306      	orrs	r6, r0
90026760:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90026764:	d019      	beq.n	9002679a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1ba>
90026766:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
9002676a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
9002676e:	fb09 fa0a 	mul.w	sl, r9, sl
90026772:	fb09 f904 	mul.w	r9, r9, r4
90026776:	ea4f 241a 	mov.w	r4, sl, lsr #8
9002677a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9002677e:	f509 7080 	add.w	r0, r9, #256	; 0x100
90026782:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
90026786:	eb00 2019 	add.w	r0, r0, r9, lsr #8
9002678a:	4454      	add	r4, sl
9002678c:	0a00      	lsrs	r0, r0, #8
9002678e:	0a24      	lsrs	r4, r4, #8
90026790:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
90026794:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
90026798:	4304      	orrs	r4, r0
9002679a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9002679e:	d019      	beq.n	900267d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1f4>
900267a0:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
900267a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900267a8:	fb08 f909 	mul.w	r9, r8, r9
900267ac:	fb08 f803 	mul.w	r8, r8, r3
900267b0:	ea4f 2319 	mov.w	r3, r9, lsr #8
900267b4:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
900267b8:	f508 7080 	add.w	r0, r8, #256	; 0x100
900267bc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
900267c0:	eb00 2018 	add.w	r0, r0, r8, lsr #8
900267c4:	444b      	add	r3, r9
900267c6:	0a00      	lsrs	r0, r0, #8
900267c8:	0a1b      	lsrs	r3, r3, #8
900267ca:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
900267ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
900267d2:	4303      	orrs	r3, r0
900267d4:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
900267d8:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
900267dc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
900267e0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
900267e4:	fb0c f808 	mul.w	r8, ip, r8
900267e8:	fb0c f606 	mul.w	r6, ip, r6
900267ec:	fb05 8800 	mla	r8, r5, r0, r8
900267f0:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
900267f4:	fb05 6202 	mla	r2, r5, r2, r6
900267f8:	9d01      	ldr	r5, [sp, #4]
900267fa:	fb07 8800 	mla	r8, r7, r0, r8
900267fe:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
90026802:	fb0e 8000 	mla	r0, lr, r0, r8
90026806:	0a00      	lsrs	r0, r0, #8
90026808:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
9002680c:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
90026810:	9c02      	ldr	r4, [sp, #8]
90026812:	fb07 2700 	mla	r7, r7, r0, r2
90026816:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
9002681a:	9b03      	ldr	r3, [sp, #12]
9002681c:	fb0e 7000 	mla	r0, lr, r0, r7
90026820:	43da      	mvns	r2, r3
90026822:	9b00      	ldr	r3, [sp, #0]
90026824:	0a00      	lsrs	r0, r0, #8
90026826:	b2d2      	uxtb	r2, r2
90026828:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
9002682c:	4353      	muls	r3, r2
9002682e:	4354      	muls	r4, r2
90026830:	ea48 0000 	orr.w	r0, r8, r0
90026834:	4355      	muls	r5, r2
90026836:	4622      	mov	r2, r4
90026838:	1c5c      	adds	r4, r3, #1
9002683a:	eb04 2413 	add.w	r4, r4, r3, lsr #8
9002683e:	0c03      	lsrs	r3, r0, #16
90026840:	eb03 2414 	add.w	r4, r3, r4, lsr #8
90026844:	4b0f      	ldr	r3, [pc, #60]	; (90026884 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
90026846:	ea03 2304 	and.w	r3, r3, r4, lsl #8
9002684a:	1c54      	adds	r4, r2, #1
9002684c:	eb04 2412 	add.w	r4, r4, r2, lsr #8
90026850:	b2c2      	uxtb	r2, r0
90026852:	f3c0 2007 	ubfx	r0, r0, #8, #8
90026856:	eb02 2214 	add.w	r2, r2, r4, lsr #8
9002685a:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
9002685e:	1c6a      	adds	r2, r5, #1
90026860:	eb02 2215 	add.w	r2, r2, r5, lsr #8
90026864:	eb00 2012 	add.w	r0, r0, r2, lsr #8
90026868:	00c0      	lsls	r0, r0, #3
9002686a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002686e:	4318      	orrs	r0, r3
90026870:	8008      	strh	r0, [r1, #0]
90026872:	b005      	add	sp, #20
90026874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90026878:	900306ff 	.word	0x900306ff
9002687c:	90030cbd 	.word	0x90030cbd
90026880:	900307e8 	.word	0x900307e8
90026884:	fffff800 	.word	0xfffff800

90026888 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90026888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002688c:	ed2d 8b08 	vpush	{d8-d11}
90026890:	b09b      	sub	sp, #108	; 0x6c
90026892:	eeb0 aa40 	vmov.f32	s20, s0
90026896:	eef0 9a60 	vmov.f32	s19, s1
9002689a:	9218      	str	r2, [sp, #96]	; 0x60
9002689c:	eeb0 9a41 	vmov.f32	s18, s2
900268a0:	9a31      	ldr	r2, [sp, #196]	; 0xc4
900268a2:	eeb0 8a62 	vmov.f32	s16, s5
900268a6:	9019      	str	r0, [sp, #100]	; 0x64
900268a8:	eef0 8a43 	vmov.f32	s17, s6
900268ac:	6850      	ldr	r0, [r2, #4]
900268ae:	eef0 ba44 	vmov.f32	s23, s8
900268b2:	9116      	str	r1, [sp, #88]	; 0x58
900268b4:	eeb0 ba64 	vmov.f32	s22, s9
900268b8:	9307      	str	r3, [sp, #28]
900268ba:	eef0 aa45 	vmov.f32	s21, s10
900268be:	6812      	ldr	r2, [r2, #0]
900268c0:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
900268c4:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
900268c8:	fb00 1303 	mla	r3, r0, r3, r1
900268cc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
900268d0:	930a      	str	r3, [sp, #40]	; 0x28
900268d2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
900268d4:	681b      	ldr	r3, [r3, #0]
900268d6:	930f      	str	r3, [sp, #60]	; 0x3c
900268d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
900268da:	2b00      	cmp	r3, #0
900268dc:	dc03      	bgt.n	900268e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
900268de:	9b18      	ldr	r3, [sp, #96]	; 0x60
900268e0:	2b00      	cmp	r3, #0
900268e2:	f340 838b 	ble.w	90026ffc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>
900268e6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
900268e8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900268ec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900268f0:	1e48      	subs	r0, r1, #1
900268f2:	1e57      	subs	r7, r2, #1
900268f4:	9b07      	ldr	r3, [sp, #28]
900268f6:	2b00      	cmp	r3, #0
900268f8:	f340 818b 	ble.w	90026c12 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
900268fc:	ea5f 4c24 	movs.w	ip, r4, asr #16
90026900:	ea4f 4326 	mov.w	r3, r6, asr #16
90026904:	d406      	bmi.n	90026914 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
90026906:	4584      	cmp	ip, r0
90026908:	da04      	bge.n	90026914 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9002690a:	2b00      	cmp	r3, #0
9002690c:	db02      	blt.n	90026914 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9002690e:	42bb      	cmp	r3, r7
90026910:	f2c0 8180 	blt.w	90026c14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
90026914:	f11c 0c01 	adds.w	ip, ip, #1
90026918:	f100 8170 	bmi.w	90026bfc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
9002691c:	4561      	cmp	r1, ip
9002691e:	f2c0 816d 	blt.w	90026bfc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
90026922:	3301      	adds	r3, #1
90026924:	f100 816a 	bmi.w	90026bfc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
90026928:	429a      	cmp	r2, r3
9002692a:	f2c0 8167 	blt.w	90026bfc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
9002692e:	9b07      	ldr	r3, [sp, #28]
90026930:	9f0a      	ldr	r7, [sp, #40]	; 0x28
90026932:	9317      	str	r3, [sp, #92]	; 0x5c
90026934:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90026936:	2b00      	cmp	r3, #0
90026938:	f340 8189 	ble.w	90026c4e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
9002693c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
9002693e:	ea4f 4c26 	mov.w	ip, r6, asr #16
90026942:	9b34      	ldr	r3, [sp, #208]	; 0xd0
90026944:	f3c4 3103 	ubfx	r1, r4, #12, #4
90026948:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9002694c:	1422      	asrs	r2, r4, #16
9002694e:	f3c6 3003 	ubfx	r0, r6, #12, #4
90026952:	689b      	ldr	r3, [r3, #8]
90026954:	f100 81d8 	bmi.w	90026d08 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
90026958:	f103 38ff 	add.w	r8, r3, #4294967295
9002695c:	4542      	cmp	r2, r8
9002695e:	f280 81d3 	bge.w	90026d08 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
90026962:	f1bc 0f00 	cmp.w	ip, #0
90026966:	f2c0 81cf 	blt.w	90026d08 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
9002696a:	f10e 38ff 	add.w	r8, lr, #4294967295
9002696e:	45c4      	cmp	ip, r8
90026970:	f280 81ca 	bge.w	90026d08 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
90026974:	b21b      	sxth	r3, r3
90026976:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90026978:	fb0c 2203 	mla	r2, ip, r3, r2
9002697c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
90026980:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
90026984:	ea4f 6e12 	mov.w	lr, r2, lsr #24
90026988:	2900      	cmp	r1, #0
9002698a:	f000 81a6 	beq.w	90026cda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9002698e:	f8d8 5004 	ldr.w	r5, [r8, #4]
90026992:	950b      	str	r5, [sp, #44]	; 0x2c
90026994:	0e2d      	lsrs	r5, r5, #24
90026996:	9512      	str	r5, [sp, #72]	; 0x48
90026998:	b180      	cbz	r0, 900269bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
9002699a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
9002699e:	3b01      	subs	r3, #1
900269a0:	009b      	lsls	r3, r3, #2
900269a2:	3304      	adds	r3, #4
900269a4:	eb08 0c03 	add.w	ip, r8, r3
900269a8:	f858 3003 	ldr.w	r3, [r8, r3]
900269ac:	9308      	str	r3, [sp, #32]
900269ae:	0e1b      	lsrs	r3, r3, #24
900269b0:	9310      	str	r3, [sp, #64]	; 0x40
900269b2:	f8dc 3004 	ldr.w	r3, [ip, #4]
900269b6:	930c      	str	r3, [sp, #48]	; 0x30
900269b8:	0e1b      	lsrs	r3, r3, #24
900269ba:	9313      	str	r3, [sp, #76]	; 0x4c
900269bc:	b289      	uxth	r1, r1
900269be:	9b12      	ldr	r3, [sp, #72]	; 0x48
900269c0:	b280      	uxth	r0, r0
900269c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
900269c4:	fb01 f900 	mul.w	r9, r1, r0
900269c8:	0109      	lsls	r1, r1, #4
900269ca:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
900269ce:	eba1 0809 	sub.w	r8, r1, r9
900269d2:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
900269d6:	b280      	uxth	r0, r0
900269d8:	fa1f f888 	uxth.w	r8, r8
900269dc:	1a09      	subs	r1, r1, r0
900269de:	fb08 f303 	mul.w	r3, r8, r3
900269e2:	b289      	uxth	r1, r1
900269e4:	fb01 330e 	mla	r3, r1, lr, r3
900269e8:	fb00 3305 	mla	r3, r0, r5, r3
900269ec:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900269ee:	fb09 3305 	mla	r3, r9, r5, r3
900269f2:	f3c3 2307 	ubfx	r3, r3, #8, #8
900269f6:	2b00      	cmp	r3, #0
900269f8:	f000 80f7 	beq.w	90026bea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
900269fc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
90026a00:	d01b      	beq.n	90026a3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
90026a02:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
90026a06:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90026a0a:	fb0e fa0a 	mul.w	sl, lr, sl
90026a0e:	fb0e fe02 	mul.w	lr, lr, r2
90026a12:	ea4f 221a 	mov.w	r2, sl, lsr #8
90026a16:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90026a1a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
90026a1e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90026a22:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90026a26:	4452      	add	r2, sl
90026a28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90026a2c:	0a12      	lsrs	r2, r2, #8
90026a2e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90026a32:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90026a36:	ea42 020c 	orr.w	r2, r2, ip
90026a3a:	9d12      	ldr	r5, [sp, #72]	; 0x48
90026a3c:	2dff      	cmp	r5, #255	; 0xff
90026a3e:	d021      	beq.n	90026a84 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
90026a40:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90026a42:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90026a46:	9d12      	ldr	r5, [sp, #72]	; 0x48
90026a48:	fb05 fb0b 	mul.w	fp, r5, fp
90026a4c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90026a4e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90026a52:	9d12      	ldr	r5, [sp, #72]	; 0x48
90026a54:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90026a58:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90026a5c:	fb05 fa0a 	mul.w	sl, r5, sl
90026a60:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90026a64:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90026a68:	44de      	add	lr, fp
90026a6a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90026a6e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90026a72:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90026a76:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90026a7a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90026a7e:	ea4e 050a 	orr.w	r5, lr, sl
90026a82:	950b      	str	r5, [sp, #44]	; 0x2c
90026a84:	9d10      	ldr	r5, [sp, #64]	; 0x40
90026a86:	2dff      	cmp	r5, #255	; 0xff
90026a88:	d021      	beq.n	90026ace <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
90026a8a:	9d08      	ldr	r5, [sp, #32]
90026a8c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90026a90:	9d10      	ldr	r5, [sp, #64]	; 0x40
90026a92:	fb05 fb0b 	mul.w	fp, r5, fp
90026a96:	9d08      	ldr	r5, [sp, #32]
90026a98:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
90026a9c:	9d10      	ldr	r5, [sp, #64]	; 0x40
90026a9e:	fb05 fa0e 	mul.w	sl, r5, lr
90026aa2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90026aa6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90026aaa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90026aae:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90026ab2:	44de      	add	lr, fp
90026ab4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90026ab8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90026abc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90026ac0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90026ac4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90026ac8:	ea4e 050a 	orr.w	r5, lr, sl
90026acc:	9508      	str	r5, [sp, #32]
90026ace:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90026ad0:	2dff      	cmp	r5, #255	; 0xff
90026ad2:	d021      	beq.n	90026b18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
90026ad4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90026ad6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90026ada:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90026adc:	fb05 fb0b 	mul.w	fp, r5, fp
90026ae0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90026ae2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90026ae6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90026ae8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90026aec:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90026af0:	fb05 fa0a 	mul.w	sl, r5, sl
90026af4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90026af8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90026afc:	44de      	add	lr, fp
90026afe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90026b02:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90026b06:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90026b0a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90026b0e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90026b12:	ea4e 050a 	orr.w	r5, lr, sl
90026b16:	950c      	str	r5, [sp, #48]	; 0x30
90026b18:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90026b1a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
90026b1e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90026b22:	2bff      	cmp	r3, #255	; 0xff
90026b24:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90026b28:	9d08      	ldr	r5, [sp, #32]
90026b2a:	fb08 fc0c 	mul.w	ip, r8, ip
90026b2e:	fb01 cc0e 	mla	ip, r1, lr, ip
90026b32:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90026b36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90026b38:	fb00 cc0e 	mla	ip, r0, lr, ip
90026b3c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90026b40:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90026b42:	fb09 cc0e 	mla	ip, r9, lr, ip
90026b46:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
90026b4a:	fb08 f80e 	mul.w	r8, r8, lr
90026b4e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90026b52:	fb01 8202 	mla	r2, r1, r2, r8
90026b56:	9908      	ldr	r1, [sp, #32]
90026b58:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90026b5c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90026b60:	990c      	ldr	r1, [sp, #48]	; 0x30
90026b62:	fb00 220a 	mla	r2, r0, sl, r2
90026b66:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
90026b6a:	fb09 2900 	mla	r9, r9, r0, r2
90026b6e:	ea4f 2919 	mov.w	r9, r9, lsr #8
90026b72:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
90026b76:	ea4c 0c09 	orr.w	ip, ip, r9
90026b7a:	ea4f 221c 	mov.w	r2, ip, lsr #8
90026b7e:	f000 80b5 	beq.w	90026cec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
90026b82:	8839      	ldrh	r1, [r7, #0]
90026b84:	43db      	mvns	r3, r3
90026b86:	ea4f 2e21 	mov.w	lr, r1, asr #8
90026b8a:	fa5f f883 	uxtb.w	r8, r3
90026b8e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
90026b92:	10c8      	asrs	r0, r1, #3
90026b94:	00cb      	lsls	r3, r1, #3
90026b96:	fb0e fe08 	mul.w	lr, lr, r8
90026b9a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90026b9e:	b2db      	uxtb	r3, r3
90026ba0:	f10e 0101 	add.w	r1, lr, #1
90026ba4:	fb00 f008 	mul.w	r0, r0, r8
90026ba8:	fb03 f308 	mul.w	r3, r3, r8
90026bac:	eb01 211e 	add.w	r1, r1, lr, lsr #8
90026bb0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
90026bb4:	fa5f fc8c 	uxtb.w	ip, ip
90026bb8:	eb0e 2e11 	add.w	lr, lr, r1, lsr #8
90026bbc:	4960      	ldr	r1, [pc, #384]	; (90026d40 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>)
90026bbe:	ea01 2e0e 	and.w	lr, r1, lr, lsl #8
90026bc2:	1c59      	adds	r1, r3, #1
90026bc4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
90026bc8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
90026bcc:	1c43      	adds	r3, r0, #1
90026bce:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90026bd2:	b2d3      	uxtb	r3, r2
90026bd4:	ea4e 0cdc 	orr.w	ip, lr, ip, lsr #3
90026bd8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
90026bdc:	00db      	lsls	r3, r3, #3
90026bde:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90026be2:	ea4c 0c03 	orr.w	ip, ip, r3
90026be6:	f8a7 c000 	strh.w	ip, [r7]
90026bea:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
90026bec:	3702      	adds	r7, #2
90026bee:	441c      	add	r4, r3
90026bf0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90026bf2:	441e      	add	r6, r3
90026bf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90026bf6:	3b01      	subs	r3, #1
90026bf8:	9317      	str	r3, [sp, #92]	; 0x5c
90026bfa:	e69b      	b.n	90026934 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
90026bfc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
90026bfe:	441c      	add	r4, r3
90026c00:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90026c02:	441e      	add	r6, r3
90026c04:	9b07      	ldr	r3, [sp, #28]
90026c06:	3b01      	subs	r3, #1
90026c08:	9307      	str	r3, [sp, #28]
90026c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90026c0c:	3302      	adds	r3, #2
90026c0e:	930a      	str	r3, [sp, #40]	; 0x28
90026c10:	e670      	b.n	900268f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90026c12:	d023      	beq.n	90026c5c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
90026c14:	9b07      	ldr	r3, [sp, #28]
90026c16:	982f      	ldr	r0, [sp, #188]	; 0xbc
90026c18:	3b01      	subs	r3, #1
90026c1a:	fb00 4003 	mla	r0, r0, r3, r4
90026c1e:	1400      	asrs	r0, r0, #16
90026c20:	f53f ae85 	bmi.w	9002692e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
90026c24:	3901      	subs	r1, #1
90026c26:	4288      	cmp	r0, r1
90026c28:	f6bf ae81 	bge.w	9002692e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
90026c2c:	9930      	ldr	r1, [sp, #192]	; 0xc0
90026c2e:	fb01 6303 	mla	r3, r1, r3, r6
90026c32:	141b      	asrs	r3, r3, #16
90026c34:	f53f ae7b 	bmi.w	9002692e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
90026c38:	3a01      	subs	r2, #1
90026c3a:	4293      	cmp	r3, r2
90026c3c:	f6bf ae77 	bge.w	9002692e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
90026c40:	f8dd b01c 	ldr.w	fp, [sp, #28]
90026c44:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
90026c48:	f1bb 0f00 	cmp.w	fp, #0
90026c4c:	dc7a      	bgt.n	90026d44 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
90026c4e:	9b07      	ldr	r3, [sp, #28]
90026c50:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
90026c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90026c56:	eb03 0345 	add.w	r3, r3, r5, lsl #1
90026c5a:	930a      	str	r3, [sp, #40]	; 0x28
90026c5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
90026c5e:	2b00      	cmp	r3, #0
90026c60:	f340 81cc 	ble.w	90026ffc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>
90026c64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90026c68:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90026c6a:	ee3a aa2b 	vadd.f32	s20, s20, s23
90026c6e:	ee79 9a8b 	vadd.f32	s19, s19, s22
90026c72:	eef0 6a48 	vmov.f32	s13, s16
90026c76:	eec7 7a0a 	vdiv.f32	s15, s14, s20
90026c7a:	ee39 9a2a 	vadd.f32	s18, s18, s21
90026c7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90026c82:	ee16 4a90 	vmov	r4, s13
90026c86:	eef0 6a68 	vmov.f32	s13, s17
90026c8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90026c8e:	ee16 6a90 	vmov	r6, s13
90026c92:	ee29 7aa7 	vmul.f32	s14, s19, s15
90026c96:	ee69 7a27 	vmul.f32	s15, s18, s15
90026c9a:	ee37 8a48 	vsub.f32	s16, s14, s16
90026c9e:	ee77 8ae8 	vsub.f32	s17, s15, s17
90026ca2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
90026ca6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
90026caa:	ee18 2a10 	vmov	r2, s16
90026cae:	eeb0 8a47 	vmov.f32	s16, s14
90026cb2:	fb92 f3f3 	sdiv	r3, r2, r3
90026cb6:	ee18 2a90 	vmov	r2, s17
90026cba:	932f      	str	r3, [sp, #188]	; 0xbc
90026cbc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90026cbe:	eef0 8a67 	vmov.f32	s17, s15
90026cc2:	fb92 f3f3 	sdiv	r3, r2, r3
90026cc6:	9330      	str	r3, [sp, #192]	; 0xc0
90026cc8:	9b16      	ldr	r3, [sp, #88]	; 0x58
90026cca:	9a18      	ldr	r2, [sp, #96]	; 0x60
90026ccc:	3b01      	subs	r3, #1
90026cce:	9316      	str	r3, [sp, #88]	; 0x58
90026cd0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90026cd2:	bf08      	it	eq
90026cd4:	4613      	moveq	r3, r2
90026cd6:	9307      	str	r3, [sp, #28]
90026cd8:	e5fe      	b.n	900268d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
90026cda:	2800      	cmp	r0, #0
90026cdc:	f43f ae6e 	beq.w	900269bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
90026ce0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
90026ce4:	9308      	str	r3, [sp, #32]
90026ce6:	0e1b      	lsrs	r3, r3, #24
90026ce8:	9310      	str	r3, [sp, #64]	; 0x40
90026cea:	e667      	b.n	900269bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
90026cec:	ea4f 135c 	mov.w	r3, ip, lsr #5
90026cf0:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
90026cf4:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
90026cf8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90026cfc:	f022 0207 	bic.w	r2, r2, #7
90026d00:	431a      	orrs	r2, r3
90026d02:	ea42 0c0c 	orr.w	ip, r2, ip
90026d06:	e76e      	b.n	90026be6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
90026d08:	f112 0801 	adds.w	r8, r2, #1
90026d0c:	f53f af6d 	bmi.w	90026bea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90026d10:	4543      	cmp	r3, r8
90026d12:	f6ff af6a 	blt.w	90026bea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90026d16:	f11c 0801 	adds.w	r8, ip, #1
90026d1a:	f53f af66 	bmi.w	90026bea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90026d1e:	45c6      	cmp	lr, r8
90026d20:	f6ff af63 	blt.w	90026bea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90026d24:	b21b      	sxth	r3, r3
90026d26:	e9cd 2c01 	strd	r2, ip, [sp, #4]
90026d2a:	fa0f f28e 	sxth.w	r2, lr
90026d2e:	e9cd 1003 	strd	r1, r0, [sp, #12]
90026d32:	9200      	str	r2, [sp, #0]
90026d34:	4639      	mov	r1, r7
90026d36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90026d38:	9819      	ldr	r0, [sp, #100]	; 0x64
90026d3a:	f7ff fc51 	bl	900265e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
90026d3e:	e754      	b.n	90026bea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90026d40:	fffff800 	.word	0xfffff800
90026d44:	9b34      	ldr	r3, [sp, #208]	; 0xd0
90026d46:	1421      	asrs	r1, r4, #16
90026d48:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90026d4a:	f3c4 3203 	ubfx	r2, r4, #12, #4
90026d4e:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
90026d52:	1433      	asrs	r3, r6, #16
90026d54:	f3c6 3003 	ubfx	r0, r6, #12, #4
90026d58:	fb07 1303 	mla	r3, r7, r3, r1
90026d5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
90026d5e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
90026d62:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
90026d66:	ea4f 6c13 	mov.w	ip, r3, lsr #24
90026d6a:	2a00      	cmp	r2, #0
90026d6c:	f000 812f 	beq.w	90026fce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
90026d70:	684d      	ldr	r5, [r1, #4]
90026d72:	950d      	str	r5, [sp, #52]	; 0x34
90026d74:	0e2d      	lsrs	r5, r5, #24
90026d76:	9514      	str	r5, [sp, #80]	; 0x50
90026d78:	b178      	cbz	r0, 90026d9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
90026d7a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
90026d7e:	3f01      	subs	r7, #1
90026d80:	00bf      	lsls	r7, r7, #2
90026d82:	3704      	adds	r7, #4
90026d84:	eb01 0e07 	add.w	lr, r1, r7
90026d88:	59c9      	ldr	r1, [r1, r7]
90026d8a:	9109      	str	r1, [sp, #36]	; 0x24
90026d8c:	0e09      	lsrs	r1, r1, #24
90026d8e:	9111      	str	r1, [sp, #68]	; 0x44
90026d90:	f8de 1004 	ldr.w	r1, [lr, #4]
90026d94:	910e      	str	r1, [sp, #56]	; 0x38
90026d96:	0e09      	lsrs	r1, r1, #24
90026d98:	9115      	str	r1, [sp, #84]	; 0x54
90026d9a:	b292      	uxth	r2, r2
90026d9c:	9d11      	ldr	r5, [sp, #68]	; 0x44
90026d9e:	b280      	uxth	r0, r0
90026da0:	fb02 f900 	mul.w	r9, r2, r0
90026da4:	0112      	lsls	r2, r2, #4
90026da6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
90026daa:	eba2 0e09 	sub.w	lr, r2, r9
90026dae:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
90026db2:	9a14      	ldr	r2, [sp, #80]	; 0x50
90026db4:	b280      	uxth	r0, r0
90026db6:	fa1f fe8e 	uxth.w	lr, lr
90026dba:	1a09      	subs	r1, r1, r0
90026dbc:	fb0e f202 	mul.w	r2, lr, r2
90026dc0:	b289      	uxth	r1, r1
90026dc2:	fb01 220c 	mla	r2, r1, ip, r2
90026dc6:	fb00 2205 	mla	r2, r0, r5, r2
90026dca:	9d15      	ldr	r5, [sp, #84]	; 0x54
90026dcc:	fb09 2205 	mla	r2, r9, r5, r2
90026dd0:	f3c2 2207 	ubfx	r2, r2, #8, #8
90026dd4:	2a00      	cmp	r2, #0
90026dd6:	f000 80f1 	beq.w	90026fbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
90026dda:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90026dde:	d019      	beq.n	90026e14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
90026de0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90026de4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90026de8:	fb0c fa0a 	mul.w	sl, ip, sl
90026dec:	fb0c fc03 	mul.w	ip, ip, r3
90026df0:	ea4f 231a 	mov.w	r3, sl, lsr #8
90026df4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90026df8:	f50c 7780 	add.w	r7, ip, #256	; 0x100
90026dfc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90026e00:	eb07 271c 	add.w	r7, r7, ip, lsr #8
90026e04:	4453      	add	r3, sl
90026e06:	0a3f      	lsrs	r7, r7, #8
90026e08:	0a1b      	lsrs	r3, r3, #8
90026e0a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90026e0e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90026e12:	433b      	orrs	r3, r7
90026e14:	9d14      	ldr	r5, [sp, #80]	; 0x50
90026e16:	2dff      	cmp	r5, #255	; 0xff
90026e18:	d020      	beq.n	90026e5c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d4>
90026e1a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90026e1c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90026e20:	9d14      	ldr	r5, [sp, #80]	; 0x50
90026e22:	436f      	muls	r7, r5
90026e24:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90026e26:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90026e2a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90026e2e:	9d14      	ldr	r5, [sp, #80]	; 0x50
90026e30:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90026e34:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90026e38:	fb05 fa0a 	mul.w	sl, r5, sl
90026e3c:	44bc      	add	ip, r7
90026e3e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90026e42:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90026e46:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90026e4a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90026e4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90026e52:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90026e56:	ea4c 050a 	orr.w	r5, ip, sl
90026e5a:	950d      	str	r5, [sp, #52]	; 0x34
90026e5c:	9d11      	ldr	r5, [sp, #68]	; 0x44
90026e5e:	2dff      	cmp	r5, #255	; 0xff
90026e60:	d020      	beq.n	90026ea4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
90026e62:	9d09      	ldr	r5, [sp, #36]	; 0x24
90026e64:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90026e68:	9d11      	ldr	r5, [sp, #68]	; 0x44
90026e6a:	436f      	muls	r7, r5
90026e6c:	9d09      	ldr	r5, [sp, #36]	; 0x24
90026e6e:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90026e72:	9d11      	ldr	r5, [sp, #68]	; 0x44
90026e74:	fb05 fa0c 	mul.w	sl, r5, ip
90026e78:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90026e7c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90026e80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90026e84:	44bc      	add	ip, r7
90026e86:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90026e8a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90026e8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90026e92:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90026e96:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90026e9a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90026e9e:	ea4c 050a 	orr.w	r5, ip, sl
90026ea2:	9509      	str	r5, [sp, #36]	; 0x24
90026ea4:	9d15      	ldr	r5, [sp, #84]	; 0x54
90026ea6:	2dff      	cmp	r5, #255	; 0xff
90026ea8:	d020      	beq.n	90026eec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x664>
90026eaa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90026eac:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90026eb0:	9d15      	ldr	r5, [sp, #84]	; 0x54
90026eb2:	436f      	muls	r7, r5
90026eb4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90026eb6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90026eba:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90026ebe:	9d15      	ldr	r5, [sp, #84]	; 0x54
90026ec0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90026ec4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90026ec8:	fb05 fa0a 	mul.w	sl, r5, sl
90026ecc:	44bc      	add	ip, r7
90026ece:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90026ed2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90026ed6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90026eda:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90026ede:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90026ee2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90026ee6:	ea4c 050a 	orr.w	r5, ip, sl
90026eea:	950e      	str	r5, [sp, #56]	; 0x38
90026eec:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90026eee:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90026ef2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90026ef6:	2aff      	cmp	r2, #255	; 0xff
90026ef8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90026efc:	9d09      	ldr	r5, [sp, #36]	; 0x24
90026efe:	fb0e f707 	mul.w	r7, lr, r7
90026f02:	fb01 770c 	mla	r7, r1, ip, r7
90026f06:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90026f0a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90026f0c:	fb00 770c 	mla	r7, r0, ip, r7
90026f10:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90026f14:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90026f16:	fb09 770c 	mla	r7, r9, ip, r7
90026f1a:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90026f1e:	fb0e fe0c 	mul.w	lr, lr, ip
90026f22:	ea4f 2717 	mov.w	r7, r7, lsr #8
90026f26:	fb01 e303 	mla	r3, r1, r3, lr
90026f2a:	9909      	ldr	r1, [sp, #36]	; 0x24
90026f2c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
90026f30:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90026f34:	990e      	ldr	r1, [sp, #56]	; 0x38
90026f36:	fb00 330a 	mla	r3, r0, sl, r3
90026f3a:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
90026f3e:	fb09 3c0c 	mla	ip, r9, ip, r3
90026f42:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90026f46:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90026f4a:	ea47 070c 	orr.w	r7, r7, ip
90026f4e:	ea4f 2317 	mov.w	r3, r7, lsr #8
90026f52:	d045      	beq.n	90026fe0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
90026f54:	f8b8 1000 	ldrh.w	r1, [r8]
90026f58:	43d2      	mvns	r2, r2
90026f5a:	ea4f 2c21 	mov.w	ip, r1, asr #8
90026f5e:	fa5f fe82 	uxtb.w	lr, r2
90026f62:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90026f66:	10c8      	asrs	r0, r1, #3
90026f68:	00ca      	lsls	r2, r1, #3
90026f6a:	fb0c fc0e 	mul.w	ip, ip, lr
90026f6e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90026f72:	b2d2      	uxtb	r2, r2
90026f74:	f10c 0101 	add.w	r1, ip, #1
90026f78:	fb00 f00e 	mul.w	r0, r0, lr
90026f7c:	fb02 f20e 	mul.w	r2, r2, lr
90026f80:	eb01 211c 	add.w	r1, r1, ip, lsr #8
90026f84:	ea4f 4c17 	mov.w	ip, r7, lsr #16
90026f88:	b2ff      	uxtb	r7, r7
90026f8a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
90026f8e:	491e      	ldr	r1, [pc, #120]	; (90027008 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x780>)
90026f90:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
90026f94:	1c51      	adds	r1, r2, #1
90026f96:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90026f9a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
90026f9e:	1c42      	adds	r2, r0, #1
90026fa0:	ea4c 0cd7 	orr.w	ip, ip, r7, lsr #3
90026fa4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90026fa8:	b2df      	uxtb	r7, r3
90026faa:	eb07 2710 	add.w	r7, r7, r0, lsr #8
90026fae:	00ff      	lsls	r7, r7, #3
90026fb0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90026fb4:	ea4c 0c07 	orr.w	ip, ip, r7
90026fb8:	f8a8 c000 	strh.w	ip, [r8]
90026fbc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
90026fbe:	f108 0802 	add.w	r8, r8, #2
90026fc2:	f10b 3bff 	add.w	fp, fp, #4294967295
90026fc6:	441c      	add	r4, r3
90026fc8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90026fca:	441e      	add	r6, r3
90026fcc:	e63c      	b.n	90026c48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
90026fce:	2800      	cmp	r0, #0
90026fd0:	f43f aee3 	beq.w	90026d9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
90026fd4:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
90026fd8:	9109      	str	r1, [sp, #36]	; 0x24
90026fda:	0e09      	lsrs	r1, r1, #24
90026fdc:	9111      	str	r1, [sp, #68]	; 0x44
90026fde:	e6dc      	b.n	90026d9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
90026fe0:	097a      	lsrs	r2, r7, #5
90026fe2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
90026fe6:	f3c7 07c4 	ubfx	r7, r7, #3, #5
90026fea:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90026fee:	f023 0307 	bic.w	r3, r3, #7
90026ff2:	4313      	orrs	r3, r2
90026ff4:	431f      	orrs	r7, r3
90026ff6:	f8a8 7000 	strh.w	r7, [r8]
90026ffa:	e7df      	b.n	90026fbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
90026ffc:	b01b      	add	sp, #108	; 0x6c
90026ffe:	ecbd 8b08 	vpop	{d8-d11}
90027002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90027006:	bf00      	nop
90027008:	fffff800 	.word	0xfffff800

9002700c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
9002700c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90027010:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
90027014:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
90027018:	2c00      	cmp	r4, #0
9002701a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
9002701e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
90027022:	fb04 ce03 	mla	lr, r4, r3, ip
90027026:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
9002702a:	db60      	blt.n	900270ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
9002702c:	45a1      	cmp	r9, r4
9002702e:	dd5e      	ble.n	900270ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
90027030:	f1bc 0f00 	cmp.w	ip, #0
90027034:	db59      	blt.n	900270ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
90027036:	45e0      	cmp	r8, ip
90027038:	dd57      	ble.n	900270ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
9002703a:	ea4f 005e 	mov.w	r0, lr, lsr #1
9002703e:	f01e 0f01 	tst.w	lr, #1
90027042:	5c16      	ldrb	r6, [r2, r0]
90027044:	bf0c      	ite	eq
90027046:	f006 060f 	andeq.w	r6, r6, #15
9002704a:	1136      	asrne	r6, r6, #4
9002704c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
90027050:	b2f6      	uxtb	r6, r6
90027052:	f11c 0001 	adds.w	r0, ip, #1
90027056:	d44d      	bmi.n	900270f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
90027058:	4580      	cmp	r8, r0
9002705a:	dd4b      	ble.n	900270f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
9002705c:	2d00      	cmp	r5, #0
9002705e:	d04b      	beq.n	900270f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
90027060:	f10e 0a01 	add.w	sl, lr, #1
90027064:	ea4f 005a 	mov.w	r0, sl, lsr #1
90027068:	f01a 0f01 	tst.w	sl, #1
9002706c:	5c10      	ldrb	r0, [r2, r0]
9002706e:	bf0c      	ite	eq
90027070:	f000 000f 	andeq.w	r0, r0, #15
90027074:	1100      	asrne	r0, r0, #4
90027076:	eb00 1000 	add.w	r0, r0, r0, lsl #4
9002707a:	b2c0      	uxtb	r0, r0
9002707c:	3401      	adds	r4, #1
9002707e:	d43f      	bmi.n	90027100 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
90027080:	45a1      	cmp	r9, r4
90027082:	dd3d      	ble.n	90027100 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
90027084:	2f00      	cmp	r7, #0
90027086:	f000 809e 	beq.w	900271c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ba>
9002708a:	f1bc 0f00 	cmp.w	ip, #0
9002708e:	db35      	blt.n	900270fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
90027090:	45e0      	cmp	r8, ip
90027092:	dd33      	ble.n	900270fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
90027094:	eb03 090e 	add.w	r9, r3, lr
90027098:	ea4f 0459 	mov.w	r4, r9, lsr #1
9002709c:	f019 0f01 	tst.w	r9, #1
900270a0:	5d14      	ldrb	r4, [r2, r4]
900270a2:	bf0c      	ite	eq
900270a4:	f004 040f 	andeq.w	r4, r4, #15
900270a8:	1124      	asrne	r4, r4, #4
900270aa:	eb04 1404 	add.w	r4, r4, r4, lsl #4
900270ae:	b2e4      	uxtb	r4, r4
900270b0:	f11c 0c01 	adds.w	ip, ip, #1
900270b4:	d427      	bmi.n	90027106 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
900270b6:	45e0      	cmp	r8, ip
900270b8:	dd25      	ble.n	90027106 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
900270ba:	b335      	cbz	r5, 9002710a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
900270bc:	3301      	adds	r3, #1
900270be:	449e      	add	lr, r3
900270c0:	ea4f 035e 	mov.w	r3, lr, lsr #1
900270c4:	f01e 0f01 	tst.w	lr, #1
900270c8:	5cd2      	ldrb	r2, [r2, r3]
900270ca:	bf0c      	ite	eq
900270cc:	f002 020f 	andeq.w	r2, r2, #15
900270d0:	1112      	asrne	r2, r2, #4
900270d2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
900270d6:	b2d3      	uxtb	r3, r2
900270d8:	2d0f      	cmp	r5, #15
900270da:	d917      	bls.n	9002710c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
900270dc:	4b3c      	ldr	r3, [pc, #240]	; (900271d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c4>)
900270de:	f240 210d 	movw	r1, #525	; 0x20d
900270e2:	4a3c      	ldr	r2, [pc, #240]	; (900271d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
900270e4:	483c      	ldr	r0, [pc, #240]	; (900271d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
900270e6:	f001 fda5 	bl	90028c34 <__assert_func>
900270ea:	2600      	movs	r6, #0
900270ec:	e7b1      	b.n	90027052 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
900270ee:	2000      	movs	r0, #0
900270f0:	4606      	mov	r6, r0
900270f2:	e7c3      	b.n	9002707c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
900270f4:	2000      	movs	r0, #0
900270f6:	e7c1      	b.n	9002707c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
900270f8:	4628      	mov	r0, r5
900270fa:	e7bf      	b.n	9002707c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
900270fc:	2400      	movs	r4, #0
900270fe:	e7d7      	b.n	900270b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
90027100:	2300      	movs	r3, #0
90027102:	461c      	mov	r4, r3
90027104:	e7e8      	b.n	900270d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
90027106:	2300      	movs	r3, #0
90027108:	e7e6      	b.n	900270d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
9002710a:	462b      	mov	r3, r5
9002710c:	2f0f      	cmp	r7, #15
9002710e:	d8e5      	bhi.n	900270dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
90027110:	b2ad      	uxth	r5, r5
90027112:	b2bf      	uxth	r7, r7
90027114:	fb05 fc07 	mul.w	ip, r5, r7
90027118:	012d      	lsls	r5, r5, #4
9002711a:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
9002711e:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
90027122:	eba5 050c 	sub.w	r5, r5, ip
90027126:	b2bf      	uxth	r7, r7
90027128:	b2ad      	uxth	r5, r5
9002712a:	1bd2      	subs	r2, r2, r7
9002712c:	4368      	muls	r0, r5
9002712e:	b292      	uxth	r2, r2
90027130:	fb06 0002 	mla	r0, r6, r2, r0
90027134:	fb07 0404 	mla	r4, r7, r4, r0
90027138:	fb0c 4303 	mla	r3, ip, r3, r4
9002713c:	f3c3 2307 	ubfx	r3, r3, #8, #8
90027140:	2b00      	cmp	r3, #0
90027142:	d03e      	beq.n	900271c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1b6>
90027144:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
90027148:	4a24      	ldr	r2, [pc, #144]	; (900271dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d0>)
9002714a:	4343      	muls	r3, r0
9002714c:	6816      	ldr	r6, [r2, #0]
9002714e:	1c58      	adds	r0, r3, #1
90027150:	880a      	ldrh	r2, [r1, #0]
90027152:	eb00 2013 	add.w	r0, r0, r3, lsr #8
90027156:	1215      	asrs	r5, r2, #8
90027158:	1200      	asrs	r0, r0, #8
9002715a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9002715e:	10d7      	asrs	r7, r2, #3
90027160:	b284      	uxth	r4, r0
90027162:	43c0      	mvns	r0, r0
90027164:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90027168:	00d2      	lsls	r2, r2, #3
9002716a:	b2c3      	uxtb	r3, r0
9002716c:	0a30      	lsrs	r0, r6, #8
9002716e:	fb15 f503 	smulbb	r5, r5, r3
90027172:	b2d2      	uxtb	r2, r2
90027174:	fb17 f703 	smulbb	r7, r7, r3
90027178:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9002717c:	fb12 f303 	smulbb	r3, r2, r3
90027180:	fb00 5004 	mla	r0, r0, r4, r5
90027184:	08f5      	lsrs	r5, r6, #3
90027186:	00f6      	lsls	r6, r6, #3
90027188:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9002718c:	b280      	uxth	r0, r0
9002718e:	b2f6      	uxtb	r6, r6
90027190:	fb05 7504 	mla	r5, r5, r4, r7
90027194:	fb06 3304 	mla	r3, r6, r4, r3
90027198:	1c44      	adds	r4, r0, #1
9002719a:	b2ad      	uxth	r5, r5
9002719c:	b29a      	uxth	r2, r3
9002719e:	1c6b      	adds	r3, r5, #1
900271a0:	eb04 2010 	add.w	r0, r4, r0, lsr #8
900271a4:	eb03 2315 	add.w	r3, r3, r5, lsr #8
900271a8:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
900271ac:	095b      	lsrs	r3, r3, #5
900271ae:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900271b2:	4303      	orrs	r3, r0
900271b4:	1c50      	adds	r0, r2, #1
900271b6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
900271ba:	f3c2 22c4 	ubfx	r2, r2, #11, #5
900271be:	4313      	orrs	r3, r2
900271c0:	800b      	strh	r3, [r1, #0]
900271c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900271c6:	2d0f      	cmp	r5, #15
900271c8:	d888      	bhi.n	900270dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
900271ca:	463b      	mov	r3, r7
900271cc:	463c      	mov	r4, r7
900271ce:	e79f      	b.n	90027110 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
900271d0:	900306ff 	.word	0x900306ff
900271d4:	90030cbd 	.word	0x90030cbd
900271d8:	900307e8 	.word	0x900307e8
900271dc:	20026ce4 	.word	0x20026ce4

900271e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900271e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900271e4:	ed2d 8b08 	vpush	{d8-d11}
900271e8:	b097      	sub	sp, #92	; 0x5c
900271ea:	eeb0 aa40 	vmov.f32	s20, s0
900271ee:	eef0 9a60 	vmov.f32	s19, s1
900271f2:	9214      	str	r2, [sp, #80]	; 0x50
900271f4:	eeb0 9a41 	vmov.f32	s18, s2
900271f8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
900271fa:	eeb0 8a62 	vmov.f32	s16, s5
900271fe:	9309      	str	r3, [sp, #36]	; 0x24
90027200:	eef0 8a43 	vmov.f32	s17, s6
90027204:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
90027208:	eef0 ba44 	vmov.f32	s23, s8
9002720c:	9015      	str	r0, [sp, #84]	; 0x54
9002720e:	eeb0 ba64 	vmov.f32	s22, s9
90027212:	6850      	ldr	r0, [r2, #4]
90027214:	eef0 aa45 	vmov.f32	s21, s10
90027218:	910d      	str	r1, [sp, #52]	; 0x34
9002721a:	930e      	str	r3, [sp, #56]	; 0x38
9002721c:	6812      	ldr	r2, [r2, #0]
9002721e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
90027222:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
90027226:	fb00 1303 	mla	r3, r0, r3, r1
9002722a:	eb02 0a43 	add.w	sl, r2, r3, lsl #1
9002722e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90027230:	689b      	ldr	r3, [r3, #8]
90027232:	3301      	adds	r3, #1
90027234:	f023 0301 	bic.w	r3, r3, #1
90027238:	930a      	str	r3, [sp, #40]	; 0x28
9002723a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9002723c:	681f      	ldr	r7, [r3, #0]
9002723e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90027240:	2b00      	cmp	r3, #0
90027242:	dc03      	bgt.n	9002724c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90027244:	9b14      	ldr	r3, [sp, #80]	; 0x50
90027246:	2b00      	cmp	r3, #0
90027248:	f340 826b 	ble.w	90027722 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x542>
9002724c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9002724e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90027252:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90027256:	1e48      	subs	r0, r1, #1
90027258:	f102 3cff 	add.w	ip, r2, #4294967295
9002725c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002725e:	2b00      	cmp	r3, #0
90027260:	f340 80f4 	ble.w	9002744c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
90027264:	ea5f 4e24 	movs.w	lr, r4, asr #16
90027268:	ea4f 4326 	mov.w	r3, r6, asr #16
9002726c:	d406      	bmi.n	9002727c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9002726e:	4586      	cmp	lr, r0
90027270:	da04      	bge.n	9002727c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
90027272:	2b00      	cmp	r3, #0
90027274:	db02      	blt.n	9002727c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
90027276:	4563      	cmp	r3, ip
90027278:	f2c0 80e9 	blt.w	9002744e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
9002727c:	f11e 0e01 	adds.w	lr, lr, #1
90027280:	f100 80da 	bmi.w	90027438 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
90027284:	4571      	cmp	r1, lr
90027286:	f2c0 80d7 	blt.w	90027438 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
9002728a:	3301      	adds	r3, #1
9002728c:	f100 80d4 	bmi.w	90027438 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
90027290:	429a      	cmp	r2, r3
90027292:	f2c0 80d1 	blt.w	90027438 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
90027296:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
9002729a:	46d0      	mov	r8, sl
9002729c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
900272a0:	930f      	str	r3, [sp, #60]	; 0x3c
900272a2:	f1b9 0f00 	cmp.w	r9, #0
900272a6:	f340 80f1 	ble.w	9002748c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
900272aa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
900272ac:	1430      	asrs	r0, r6, #16
900272ae:	f3c4 3203 	ubfx	r2, r4, #12, #4
900272b2:	f3c6 3103 	ubfx	r1, r6, #12, #4
900272b6:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
900272ba:	1423      	asrs	r3, r4, #16
900272bc:	f100 813b 	bmi.w	90027536 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
900272c0:	f10c 3bff 	add.w	fp, ip, #4294967295
900272c4:	455b      	cmp	r3, fp
900272c6:	f280 8136 	bge.w	90027536 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
900272ca:	2800      	cmp	r0, #0
900272cc:	f2c0 8133 	blt.w	90027536 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
900272d0:	f10e 3bff 	add.w	fp, lr, #4294967295
900272d4:	4558      	cmp	r0, fp
900272d6:	f280 812e 	bge.w	90027536 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
900272da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
900272dc:	fb00 3305 	mla	r3, r0, r5, r3
900272e0:	0858      	lsrs	r0, r3, #1
900272e2:	07dd      	lsls	r5, r3, #31
900272e4:	f817 c000 	ldrb.w	ip, [r7, r0]
900272e8:	bf54      	ite	pl
900272ea:	f00c 0c0f 	andpl.w	ip, ip, #15
900272ee:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
900272f2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900272f6:	fa5f fc8c 	uxtb.w	ip, ip
900272fa:	2a00      	cmp	r2, #0
900272fc:	f000 810a 	beq.w	90027514 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
90027300:	1c58      	adds	r0, r3, #1
90027302:	ea4f 0e50 	mov.w	lr, r0, lsr #1
90027306:	07c0      	lsls	r0, r0, #31
90027308:	f817 e00e 	ldrb.w	lr, [r7, lr]
9002730c:	bf54      	ite	pl
9002730e:	f00e 0e0f 	andpl.w	lr, lr, #15
90027312:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
90027316:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
9002731a:	fa5f f08e 	uxtb.w	r0, lr
9002731e:	9010      	str	r0, [sp, #64]	; 0x40
90027320:	b1e1      	cbz	r1, 9002735c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90027322:	980f      	ldr	r0, [sp, #60]	; 0x3c
90027324:	4403      	add	r3, r0
90027326:	0858      	lsrs	r0, r3, #1
90027328:	07dd      	lsls	r5, r3, #31
9002732a:	f103 0301 	add.w	r3, r3, #1
9002732e:	5c38      	ldrb	r0, [r7, r0]
90027330:	bf54      	ite	pl
90027332:	f000 000f 	andpl.w	r0, r0, #15
90027336:	1100      	asrmi	r0, r0, #4
90027338:	07dd      	lsls	r5, r3, #31
9002733a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
9002733e:	b2c0      	uxtb	r0, r0
90027340:	900b      	str	r0, [sp, #44]	; 0x2c
90027342:	ea4f 0053 	mov.w	r0, r3, lsr #1
90027346:	f817 e000 	ldrb.w	lr, [r7, r0]
9002734a:	bf54      	ite	pl
9002734c:	f00e 030f 	andpl.w	r3, lr, #15
90027350:	ea4f 132e 	movmi.w	r3, lr, asr #4
90027354:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90027358:	b2db      	uxtb	r3, r3
9002735a:	9311      	str	r3, [sp, #68]	; 0x44
9002735c:	b292      	uxth	r2, r2
9002735e:	9d10      	ldr	r5, [sp, #64]	; 0x40
90027360:	b289      	uxth	r1, r1
90027362:	fb02 f301 	mul.w	r3, r2, r1
90027366:	0112      	lsls	r2, r2, #4
90027368:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
9002736c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
90027370:	1ad2      	subs	r2, r2, r3
90027372:	b289      	uxth	r1, r1
90027374:	b292      	uxth	r2, r2
90027376:	1a40      	subs	r0, r0, r1
90027378:	436a      	muls	r2, r5
9002737a:	b280      	uxth	r0, r0
9002737c:	fb0c 2c00 	mla	ip, ip, r0, r2
90027380:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90027382:	fb01 c102 	mla	r1, r1, r2, ip
90027386:	9a11      	ldr	r2, [sp, #68]	; 0x44
90027388:	fb03 1302 	mla	r3, r3, r2, r1
9002738c:	f3c3 2307 	ubfx	r3, r3, #8, #8
90027390:	2b00      	cmp	r3, #0
90027392:	d048      	beq.n	90027426 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
90027394:	990e      	ldr	r1, [sp, #56]	; 0x38
90027396:	4a78      	ldr	r2, [pc, #480]	; (90027578 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>)
90027398:	434b      	muls	r3, r1
9002739a:	f8d2 e000 	ldr.w	lr, [r2]
9002739e:	1c59      	adds	r1, r3, #1
900273a0:	f8b8 2000 	ldrh.w	r2, [r8]
900273a4:	ea4f 201e 	mov.w	r0, lr, lsr #8
900273a8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
900273ac:	ea4f 2c22 	mov.w	ip, r2, asr #8
900273b0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900273b4:	121b      	asrs	r3, r3, #8
900273b6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900273ba:	ea4f 0be2 	mov.w	fp, r2, asr #3
900273be:	b299      	uxth	r1, r3
900273c0:	43db      	mvns	r3, r3
900273c2:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
900273c6:	00d2      	lsls	r2, r2, #3
900273c8:	b2db      	uxtb	r3, r3
900273ca:	b2d2      	uxtb	r2, r2
900273cc:	fb1c fc03 	smulbb	ip, ip, r3
900273d0:	fb1b fb03 	smulbb	fp, fp, r3
900273d4:	fb00 c001 	mla	r0, r0, r1, ip
900273d8:	ea4f 0cde 	mov.w	ip, lr, lsr #3
900273dc:	fb12 f303 	smulbb	r3, r2, r3
900273e0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
900273e4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
900273e8:	b280      	uxth	r0, r0
900273ea:	fa5f fe8e 	uxtb.w	lr, lr
900273ee:	fb0c bc01 	mla	ip, ip, r1, fp
900273f2:	fb0e 3101 	mla	r1, lr, r1, r3
900273f6:	1c43      	adds	r3, r0, #1
900273f8:	fa1f fc8c 	uxth.w	ip, ip
900273fc:	b289      	uxth	r1, r1
900273fe:	f10c 0201 	add.w	r2, ip, #1
90027402:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90027406:	1c4b      	adds	r3, r1, #1
90027408:	eb02 221c 	add.w	r2, r2, ip, lsr #8
9002740c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
90027410:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90027414:	0952      	lsrs	r2, r2, #5
90027416:	f3c1 21c4 	ubfx	r1, r1, #11, #5
9002741a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002741e:	4310      	orrs	r0, r2
90027420:	4308      	orrs	r0, r1
90027422:	f8a8 0000 	strh.w	r0, [r8]
90027426:	9b2b      	ldr	r3, [sp, #172]	; 0xac
90027428:	f108 0802 	add.w	r8, r8, #2
9002742c:	f109 39ff 	add.w	r9, r9, #4294967295
90027430:	441c      	add	r4, r3
90027432:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90027434:	441e      	add	r6, r3
90027436:	e734      	b.n	900272a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
90027438:	9b2b      	ldr	r3, [sp, #172]	; 0xac
9002743a:	f10a 0a02 	add.w	sl, sl, #2
9002743e:	441c      	add	r4, r3
90027440:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90027442:	441e      	add	r6, r3
90027444:	9b09      	ldr	r3, [sp, #36]	; 0x24
90027446:	3b01      	subs	r3, #1
90027448:	9309      	str	r3, [sp, #36]	; 0x24
9002744a:	e707      	b.n	9002725c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9002744c:	d023      	beq.n	90027496 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
9002744e:	9b09      	ldr	r3, [sp, #36]	; 0x24
90027450:	982b      	ldr	r0, [sp, #172]	; 0xac
90027452:	3b01      	subs	r3, #1
90027454:	fb00 4003 	mla	r0, r0, r3, r4
90027458:	1400      	asrs	r0, r0, #16
9002745a:	f53f af1c 	bmi.w	90027296 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
9002745e:	3901      	subs	r1, #1
90027460:	4288      	cmp	r0, r1
90027462:	f6bf af18 	bge.w	90027296 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
90027466:	992c      	ldr	r1, [sp, #176]	; 0xb0
90027468:	fb01 6303 	mla	r3, r1, r3, r6
9002746c:	141b      	asrs	r3, r3, #16
9002746e:	f53f af12 	bmi.w	90027296 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
90027472:	3a01      	subs	r2, #1
90027474:	4293      	cmp	r3, r2
90027476:	f6bf af0e 	bge.w	90027296 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
9002747a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
9002747e:	46d1      	mov	r9, sl
90027480:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
90027484:	930f      	str	r3, [sp, #60]	; 0x3c
90027486:	f1bb 0f00 	cmp.w	fp, #0
9002748a:	dc77      	bgt.n	9002757c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
9002748c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002748e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
90027492:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
90027496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90027498:	2b00      	cmp	r3, #0
9002749a:	f340 8142 	ble.w	90027722 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x542>
9002749e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900274a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900274a4:	ee3a aa2b 	vadd.f32	s20, s20, s23
900274a8:	ee79 9a8b 	vadd.f32	s19, s19, s22
900274ac:	eef0 6a48 	vmov.f32	s13, s16
900274b0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
900274b4:	ee39 9a2a 	vadd.f32	s18, s18, s21
900274b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900274bc:	ee16 4a90 	vmov	r4, s13
900274c0:	eef0 6a68 	vmov.f32	s13, s17
900274c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900274c8:	ee16 6a90 	vmov	r6, s13
900274cc:	ee29 7aa7 	vmul.f32	s14, s19, s15
900274d0:	ee69 7a27 	vmul.f32	s15, s18, s15
900274d4:	ee37 8a48 	vsub.f32	s16, s14, s16
900274d8:	ee77 8ae8 	vsub.f32	s17, s15, s17
900274dc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
900274e0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
900274e4:	ee18 2a10 	vmov	r2, s16
900274e8:	eeb0 8a47 	vmov.f32	s16, s14
900274ec:	fb92 f3f3 	sdiv	r3, r2, r3
900274f0:	ee18 2a90 	vmov	r2, s17
900274f4:	932b      	str	r3, [sp, #172]	; 0xac
900274f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900274f8:	eef0 8a67 	vmov.f32	s17, s15
900274fc:	fb92 f3f3 	sdiv	r3, r2, r3
90027500:	932c      	str	r3, [sp, #176]	; 0xb0
90027502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90027504:	9a14      	ldr	r2, [sp, #80]	; 0x50
90027506:	3b01      	subs	r3, #1
90027508:	930d      	str	r3, [sp, #52]	; 0x34
9002750a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002750c:	bf08      	it	eq
9002750e:	4613      	moveq	r3, r2
90027510:	9309      	str	r3, [sp, #36]	; 0x24
90027512:	e694      	b.n	9002723e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
90027514:	2900      	cmp	r1, #0
90027516:	f43f af21 	beq.w	9002735c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9002751a:	980f      	ldr	r0, [sp, #60]	; 0x3c
9002751c:	4418      	add	r0, r3
9002751e:	0843      	lsrs	r3, r0, #1
90027520:	07c0      	lsls	r0, r0, #31
90027522:	5cfb      	ldrb	r3, [r7, r3]
90027524:	bf54      	ite	pl
90027526:	f003 030f 	andpl.w	r3, r3, #15
9002752a:	111b      	asrmi	r3, r3, #4
9002752c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90027530:	b2db      	uxtb	r3, r3
90027532:	930b      	str	r3, [sp, #44]	; 0x2c
90027534:	e712      	b.n	9002735c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90027536:	f113 0b01 	adds.w	fp, r3, #1
9002753a:	f53f af74 	bmi.w	90027426 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
9002753e:	45dc      	cmp	ip, fp
90027540:	f6ff af71 	blt.w	90027426 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
90027544:	f110 0b01 	adds.w	fp, r0, #1
90027548:	f53f af6d 	bmi.w	90027426 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
9002754c:	45de      	cmp	lr, fp
9002754e:	f6ff af6a 	blt.w	90027426 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
90027552:	9302      	str	r3, [sp, #8]
90027554:	fa0f f38e 	sxth.w	r3, lr
90027558:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9002755a:	9301      	str	r3, [sp, #4]
9002755c:	fa0f f38c 	sxth.w	r3, ip
90027560:	e9cd 0203 	strd	r0, r2, [sp, #12]
90027564:	e9cd 1505 	strd	r1, r5, [sp, #20]
90027568:	9300      	str	r3, [sp, #0]
9002756a:	463a      	mov	r2, r7
9002756c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9002756e:	4641      	mov	r1, r8
90027570:	9815      	ldr	r0, [sp, #84]	; 0x54
90027572:	f7ff fd4b 	bl	9002700c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
90027576:	e756      	b.n	90027426 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
90027578:	20026ce4 	.word	0x20026ce4
9002757c:	1422      	asrs	r2, r4, #16
9002757e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
90027580:	1433      	asrs	r3, r6, #16
90027582:	f3c4 3103 	ubfx	r1, r4, #12, #4
90027586:	f3c6 3003 	ubfx	r0, r6, #12, #4
9002758a:	fb05 2303 	mla	r3, r5, r3, r2
9002758e:	085a      	lsrs	r2, r3, #1
90027590:	07dd      	lsls	r5, r3, #31
90027592:	5cba      	ldrb	r2, [r7, r2]
90027594:	bf54      	ite	pl
90027596:	f002 020f 	andpl.w	r2, r2, #15
9002759a:	1112      	asrmi	r2, r2, #4
9002759c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
900275a0:	b2d2      	uxtb	r2, r2
900275a2:	2900      	cmp	r1, #0
900275a4:	f000 80a9 	beq.w	900276fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51a>
900275a8:	f103 0e01 	add.w	lr, r3, #1
900275ac:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
900275b0:	f01e 0f01 	tst.w	lr, #1
900275b4:	f817 c00c 	ldrb.w	ip, [r7, ip]
900275b8:	bf0c      	ite	eq
900275ba:	f00c 0c0f 	andeq.w	ip, ip, #15
900275be:	ea4f 1c2c 	movne.w	ip, ip, asr #4
900275c2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900275c6:	fa5f f58c 	uxtb.w	r5, ip
900275ca:	9512      	str	r5, [sp, #72]	; 0x48
900275cc:	b308      	cbz	r0, 90027612 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
900275ce:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
900275d0:	442b      	add	r3, r5
900275d2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
900275d6:	07dd      	lsls	r5, r3, #31
900275d8:	f103 0301 	add.w	r3, r3, #1
900275dc:	f817 c00c 	ldrb.w	ip, [r7, ip]
900275e0:	bf54      	ite	pl
900275e2:	f00c 0c0f 	andpl.w	ip, ip, #15
900275e6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
900275ea:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900275ee:	fa5f f58c 	uxtb.w	r5, ip
900275f2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
900275f6:	950c      	str	r5, [sp, #48]	; 0x30
900275f8:	07dd      	lsls	r5, r3, #31
900275fa:	f817 c00c 	ldrb.w	ip, [r7, ip]
900275fe:	bf54      	ite	pl
90027600:	f00c 0c0f 	andpl.w	ip, ip, #15
90027604:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90027608:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
9002760c:	fa5f f38c 	uxtb.w	r3, ip
90027610:	9313      	str	r3, [sp, #76]	; 0x4c
90027612:	b289      	uxth	r1, r1
90027614:	9d12      	ldr	r5, [sp, #72]	; 0x48
90027616:	b280      	uxth	r0, r0
90027618:	fb01 f300 	mul.w	r3, r1, r0
9002761c:	0109      	lsls	r1, r1, #4
9002761e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
90027622:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
90027626:	1ac9      	subs	r1, r1, r3
90027628:	b280      	uxth	r0, r0
9002762a:	b289      	uxth	r1, r1
9002762c:	ebac 0c00 	sub.w	ip, ip, r0
90027630:	4369      	muls	r1, r5
90027632:	fa1f fc8c 	uxth.w	ip, ip
90027636:	fb02 120c 	mla	r2, r2, ip, r1
9002763a:	990c      	ldr	r1, [sp, #48]	; 0x30
9002763c:	fb00 2001 	mla	r0, r0, r1, r2
90027640:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90027642:	fb03 0302 	mla	r3, r3, r2, r0
90027646:	f3c3 2307 	ubfx	r3, r3, #8, #8
9002764a:	2b00      	cmp	r3, #0
9002764c:	d04c      	beq.n	900276e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
9002764e:	990e      	ldr	r1, [sp, #56]	; 0x38
90027650:	4a36      	ldr	r2, [pc, #216]	; (9002772c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>)
90027652:	434b      	muls	r3, r1
90027654:	f8d2 e000 	ldr.w	lr, [r2]
90027658:	1c59      	adds	r1, r3, #1
9002765a:	f8b9 2000 	ldrh.w	r2, [r9]
9002765e:	ea4f 201e 	mov.w	r0, lr, lsr #8
90027662:	eb01 2313 	add.w	r3, r1, r3, lsr #8
90027666:	ea4f 2c22 	mov.w	ip, r2, asr #8
9002766a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9002766e:	121b      	asrs	r3, r3, #8
90027670:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90027674:	ea4f 08e2 	mov.w	r8, r2, asr #3
90027678:	b299      	uxth	r1, r3
9002767a:	43db      	mvns	r3, r3
9002767c:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
90027680:	00d2      	lsls	r2, r2, #3
90027682:	b2db      	uxtb	r3, r3
90027684:	b2d2      	uxtb	r2, r2
90027686:	fb1c fc03 	smulbb	ip, ip, r3
9002768a:	fb18 f803 	smulbb	r8, r8, r3
9002768e:	fb00 c001 	mla	r0, r0, r1, ip
90027692:	ea4f 0cde 	mov.w	ip, lr, lsr #3
90027696:	fb12 f203 	smulbb	r2, r2, r3
9002769a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9002769e:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
900276a2:	b280      	uxth	r0, r0
900276a4:	fa5f fe8e 	uxtb.w	lr, lr
900276a8:	fb0c 8c01 	mla	ip, ip, r1, r8
900276ac:	fb0e 2201 	mla	r2, lr, r1, r2
900276b0:	fa1f fc8c 	uxth.w	ip, ip
900276b4:	b292      	uxth	r2, r2
900276b6:	f10c 0801 	add.w	r8, ip, #1
900276ba:	1c51      	adds	r1, r2, #1
900276bc:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
900276c0:	f100 0801 	add.w	r8, r0, #1
900276c4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
900276c8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
900276cc:	eb08 2010 	add.w	r0, r8, r0, lsr #8
900276d0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
900276d4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
900276d8:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
900276dc:	ea4c 0c00 	orr.w	ip, ip, r0
900276e0:	ea4c 0c02 	orr.w	ip, ip, r2
900276e4:	f8a9 c000 	strh.w	ip, [r9]
900276e8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
900276ea:	f109 0902 	add.w	r9, r9, #2
900276ee:	f10b 3bff 	add.w	fp, fp, #4294967295
900276f2:	441c      	add	r4, r3
900276f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900276f6:	441e      	add	r6, r3
900276f8:	e6c5      	b.n	90027486 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
900276fa:	2800      	cmp	r0, #0
900276fc:	d089      	beq.n	90027612 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
900276fe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90027700:	442b      	add	r3, r5
90027702:	ea4f 0c53 	mov.w	ip, r3, lsr #1
90027706:	07db      	lsls	r3, r3, #31
90027708:	f817 c00c 	ldrb.w	ip, [r7, ip]
9002770c:	bf54      	ite	pl
9002770e:	f00c 0c0f 	andpl.w	ip, ip, #15
90027712:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90027716:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
9002771a:	fa5f f38c 	uxtb.w	r3, ip
9002771e:	930c      	str	r3, [sp, #48]	; 0x30
90027720:	e777      	b.n	90027612 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
90027722:	b017      	add	sp, #92	; 0x5c
90027724:	ecbd 8b08 	vpop	{d8-d11}
90027728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002772c:	20026ce4 	.word	0x20026ce4

90027730 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
90027730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90027734:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
90027738:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
9002773c:	2c00      	cmp	r4, #0
9002773e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
90027742:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
90027746:	fb04 ce03 	mla	lr, r4, r3, ip
9002774a:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
9002774e:	db60      	blt.n	90027812 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
90027750:	45a1      	cmp	r9, r4
90027752:	dd5e      	ble.n	90027812 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
90027754:	f1bc 0f00 	cmp.w	ip, #0
90027758:	db59      	blt.n	9002780e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
9002775a:	45e0      	cmp	r8, ip
9002775c:	dd57      	ble.n	9002780e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
9002775e:	ea4f 005e 	mov.w	r0, lr, lsr #1
90027762:	f01e 0f01 	tst.w	lr, #1
90027766:	5c16      	ldrb	r6, [r2, r0]
90027768:	bf0c      	ite	eq
9002776a:	f006 060f 	andeq.w	r6, r6, #15
9002776e:	1136      	asrne	r6, r6, #4
90027770:	eb06 1606 	add.w	r6, r6, r6, lsl #4
90027774:	b2f6      	uxtb	r6, r6
90027776:	f11c 0001 	adds.w	r0, ip, #1
9002777a:	d44d      	bmi.n	90027818 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
9002777c:	4580      	cmp	r8, r0
9002777e:	dd4b      	ble.n	90027818 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
90027780:	2d00      	cmp	r5, #0
90027782:	d04b      	beq.n	9002781c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
90027784:	f10e 0a01 	add.w	sl, lr, #1
90027788:	ea4f 005a 	mov.w	r0, sl, lsr #1
9002778c:	f01a 0f01 	tst.w	sl, #1
90027790:	5c10      	ldrb	r0, [r2, r0]
90027792:	bf0c      	ite	eq
90027794:	f000 000f 	andeq.w	r0, r0, #15
90027798:	1100      	asrne	r0, r0, #4
9002779a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
9002779e:	b2c0      	uxtb	r0, r0
900277a0:	3401      	adds	r4, #1
900277a2:	d43f      	bmi.n	90027824 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
900277a4:	45a1      	cmp	r9, r4
900277a6:	dd3d      	ble.n	90027824 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
900277a8:	2f00      	cmp	r7, #0
900277aa:	f000 8097 	beq.w	900278dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1ac>
900277ae:	f1bc 0f00 	cmp.w	ip, #0
900277b2:	db35      	blt.n	90027820 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
900277b4:	45e0      	cmp	r8, ip
900277b6:	dd33      	ble.n	90027820 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
900277b8:	eb03 090e 	add.w	r9, r3, lr
900277bc:	ea4f 0459 	mov.w	r4, r9, lsr #1
900277c0:	f019 0f01 	tst.w	r9, #1
900277c4:	5d14      	ldrb	r4, [r2, r4]
900277c6:	bf0c      	ite	eq
900277c8:	f004 040f 	andeq.w	r4, r4, #15
900277cc:	1124      	asrne	r4, r4, #4
900277ce:	eb04 1404 	add.w	r4, r4, r4, lsl #4
900277d2:	b2e4      	uxtb	r4, r4
900277d4:	f11c 0c01 	adds.w	ip, ip, #1
900277d8:	d427      	bmi.n	9002782a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
900277da:	45e0      	cmp	r8, ip
900277dc:	dd25      	ble.n	9002782a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
900277de:	b335      	cbz	r5, 9002782e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
900277e0:	3301      	adds	r3, #1
900277e2:	449e      	add	lr, r3
900277e4:	ea4f 035e 	mov.w	r3, lr, lsr #1
900277e8:	f01e 0f01 	tst.w	lr, #1
900277ec:	5cd2      	ldrb	r2, [r2, r3]
900277ee:	bf0c      	ite	eq
900277f0:	f002 020f 	andeq.w	r2, r2, #15
900277f4:	1112      	asrne	r2, r2, #4
900277f6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
900277fa:	b2d3      	uxtb	r3, r2
900277fc:	2d0f      	cmp	r5, #15
900277fe:	d917      	bls.n	90027830 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
90027800:	4b39      	ldr	r3, [pc, #228]	; (900278e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
90027802:	f240 210d 	movw	r1, #525	; 0x20d
90027806:	4a39      	ldr	r2, [pc, #228]	; (900278ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
90027808:	4839      	ldr	r0, [pc, #228]	; (900278f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c0>)
9002780a:	f001 fa13 	bl	90028c34 <__assert_func>
9002780e:	2600      	movs	r6, #0
90027810:	e7b1      	b.n	90027776 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
90027812:	2000      	movs	r0, #0
90027814:	4606      	mov	r6, r0
90027816:	e7c3      	b.n	900277a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
90027818:	2000      	movs	r0, #0
9002781a:	e7c1      	b.n	900277a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
9002781c:	4628      	mov	r0, r5
9002781e:	e7bf      	b.n	900277a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
90027820:	2400      	movs	r4, #0
90027822:	e7d7      	b.n	900277d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
90027824:	2300      	movs	r3, #0
90027826:	461c      	mov	r4, r3
90027828:	e7e8      	b.n	900277fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
9002782a:	2300      	movs	r3, #0
9002782c:	e7e6      	b.n	900277fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
9002782e:	462b      	mov	r3, r5
90027830:	2f0f      	cmp	r7, #15
90027832:	d8e5      	bhi.n	90027800 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
90027834:	b2ad      	uxth	r5, r5
90027836:	b2bf      	uxth	r7, r7
90027838:	fb05 fc07 	mul.w	ip, r5, r7
9002783c:	012d      	lsls	r5, r5, #4
9002783e:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
90027842:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
90027846:	eba5 050c 	sub.w	r5, r5, ip
9002784a:	b2bf      	uxth	r7, r7
9002784c:	b2ad      	uxth	r5, r5
9002784e:	1bd2      	subs	r2, r2, r7
90027850:	4368      	muls	r0, r5
90027852:	b292      	uxth	r2, r2
90027854:	fb06 0002 	mla	r0, r6, r2, r0
90027858:	fb07 0404 	mla	r4, r7, r4, r0
9002785c:	fb0c 4303 	mla	r3, ip, r3, r4
90027860:	f3c3 2307 	ubfx	r3, r3, #8, #8
90027864:	2b00      	cmp	r3, #0
90027866:	d037      	beq.n	900278d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>
90027868:	4a22      	ldr	r2, [pc, #136]	; (900278f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c4>)
9002786a:	b298      	uxth	r0, r3
9002786c:	43db      	mvns	r3, r3
9002786e:	6816      	ldr	r6, [r2, #0]
90027870:	880a      	ldrh	r2, [r1, #0]
90027872:	b2db      	uxtb	r3, r3
90027874:	0a34      	lsrs	r4, r6, #8
90027876:	1215      	asrs	r5, r2, #8
90027878:	10d7      	asrs	r7, r2, #3
9002787a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
9002787e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90027882:	00d2      	lsls	r2, r2, #3
90027884:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90027888:	fb15 f503 	smulbb	r5, r5, r3
9002788c:	b2d2      	uxtb	r2, r2
9002788e:	fb17 f703 	smulbb	r7, r7, r3
90027892:	fb04 5400 	mla	r4, r4, r0, r5
90027896:	08f5      	lsrs	r5, r6, #3
90027898:	fb12 f303 	smulbb	r3, r2, r3
9002789c:	00f6      	lsls	r6, r6, #3
9002789e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
900278a2:	b2a4      	uxth	r4, r4
900278a4:	b2f6      	uxtb	r6, r6
900278a6:	fb05 7500 	mla	r5, r5, r0, r7
900278aa:	1c62      	adds	r2, r4, #1
900278ac:	fb06 3000 	mla	r0, r6, r0, r3
900278b0:	b2ad      	uxth	r5, r5
900278b2:	b280      	uxth	r0, r0
900278b4:	1c6b      	adds	r3, r5, #1
900278b6:	eb02 2414 	add.w	r4, r2, r4, lsr #8
900278ba:	1c42      	adds	r2, r0, #1
900278bc:	eb03 2315 	add.w	r3, r3, r5, lsr #8
900278c0:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
900278c4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
900278c8:	095b      	lsrs	r3, r3, #5
900278ca:	f3c0 20c4 	ubfx	r0, r0, #11, #5
900278ce:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900278d2:	4323      	orrs	r3, r4
900278d4:	4303      	orrs	r3, r0
900278d6:	800b      	strh	r3, [r1, #0]
900278d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900278dc:	2d0f      	cmp	r5, #15
900278de:	d88f      	bhi.n	90027800 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
900278e0:	463b      	mov	r3, r7
900278e2:	463c      	mov	r4, r7
900278e4:	e7a6      	b.n	90027834 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
900278e6:	bf00      	nop
900278e8:	900306ff 	.word	0x900306ff
900278ec:	90030cbd 	.word	0x90030cbd
900278f0:	900307e8 	.word	0x900307e8
900278f4:	20026ce4 	.word	0x20026ce4

900278f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900278f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900278fc:	ed2d 8b08 	vpush	{d8-d11}
90027900:	b093      	sub	sp, #76	; 0x4c
90027902:	461d      	mov	r5, r3
90027904:	eeb0 aa40 	vmov.f32	s20, s0
90027908:	920c      	str	r2, [sp, #48]	; 0x30
9002790a:	eef0 9a60 	vmov.f32	s19, s1
9002790e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
90027910:	eeb0 9a41 	vmov.f32	s18, s2
90027914:	9011      	str	r0, [sp, #68]	; 0x44
90027916:	eeb0 8a62 	vmov.f32	s16, s5
9002791a:	6850      	ldr	r0, [r2, #4]
9002791c:	eef0 8a43 	vmov.f32	s17, s6
90027920:	9107      	str	r1, [sp, #28]
90027922:	eef0 ba44 	vmov.f32	s23, s8
90027926:	6812      	ldr	r2, [r2, #0]
90027928:	eeb0 ba64 	vmov.f32	s22, s9
9002792c:	eef0 aa45 	vmov.f32	s21, s10
90027930:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
90027934:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
90027938:	fb00 1303 	mla	r3, r0, r3, r1
9002793c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
90027940:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90027942:	689b      	ldr	r3, [r3, #8]
90027944:	3301      	adds	r3, #1
90027946:	f023 0301 	bic.w	r3, r3, #1
9002794a:	9306      	str	r3, [sp, #24]
9002794c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9002794e:	681f      	ldr	r7, [r3, #0]
90027950:	9b07      	ldr	r3, [sp, #28]
90027952:	2b00      	cmp	r3, #0
90027954:	dc03      	bgt.n	9002795e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90027956:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90027958:	2b00      	cmp	r3, #0
9002795a:	f340 8262 	ble.w	90027e22 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
9002795e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90027960:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90027964:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90027968:	1e48      	subs	r0, r1, #1
9002796a:	f102 3cff 	add.w	ip, r2, #4294967295
9002796e:	2d00      	cmp	r5, #0
90027970:	f340 80ee 	ble.w	90027b50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
90027974:	ea5f 4e24 	movs.w	lr, r4, asr #16
90027978:	ea4f 4326 	mov.w	r3, r6, asr #16
9002797c:	d406      	bmi.n	9002798c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9002797e:	4586      	cmp	lr, r0
90027980:	da04      	bge.n	9002798c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
90027982:	2b00      	cmp	r3, #0
90027984:	db02      	blt.n	9002798c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
90027986:	4563      	cmp	r3, ip
90027988:	f2c0 80e3 	blt.w	90027b52 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
9002798c:	f11e 0e01 	adds.w	lr, lr, #1
90027990:	f100 80d6 	bmi.w	90027b40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
90027994:	4571      	cmp	r1, lr
90027996:	f2c0 80d3 	blt.w	90027b40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
9002799a:	3301      	adds	r3, #1
9002799c:	f100 80d0 	bmi.w	90027b40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
900279a0:	429a      	cmp	r2, r3
900279a2:	f2c0 80cd 	blt.w	90027b40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
900279a6:	46c8      	mov	r8, r9
900279a8:	f9bd a018 	ldrsh.w	sl, [sp, #24]
900279ac:	9509      	str	r5, [sp, #36]	; 0x24
900279ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
900279b0:	2b00      	cmp	r3, #0
900279b2:	f340 80eb 	ble.w	90027b8c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
900279b6:	f3c4 3303 	ubfx	r3, r4, #12, #4
900279ba:	1430      	asrs	r0, r6, #16
900279bc:	f3c6 3103 	ubfx	r1, r6, #12, #4
900279c0:	9308      	str	r3, [sp, #32]
900279c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900279c4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
900279c8:	1423      	asrs	r3, r4, #16
900279ca:	f100 813c 	bmi.w	90027c46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
900279ce:	f10c 3bff 	add.w	fp, ip, #4294967295
900279d2:	455b      	cmp	r3, fp
900279d4:	f280 8137 	bge.w	90027c46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
900279d8:	2800      	cmp	r0, #0
900279da:	f2c0 8134 	blt.w	90027c46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
900279de:	f10e 3bff 	add.w	fp, lr, #4294967295
900279e2:	4558      	cmp	r0, fp
900279e4:	f280 812f 	bge.w	90027c46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
900279e8:	9a06      	ldr	r2, [sp, #24]
900279ea:	fb00 3302 	mla	r3, r0, r2, r3
900279ee:	0858      	lsrs	r0, r3, #1
900279f0:	07da      	lsls	r2, r3, #31
900279f2:	9a08      	ldr	r2, [sp, #32]
900279f4:	f817 c000 	ldrb.w	ip, [r7, r0]
900279f8:	bf54      	ite	pl
900279fa:	f00c 0c0f 	andpl.w	ip, ip, #15
900279fe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90027a02:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90027a06:	fa5f fc8c 	uxtb.w	ip, ip
90027a0a:	2a00      	cmp	r2, #0
90027a0c:	f000 8102 	beq.w	90027c14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
90027a10:	1c58      	adds	r0, r3, #1
90027a12:	ea4f 0e50 	mov.w	lr, r0, lsr #1
90027a16:	07c0      	lsls	r0, r0, #31
90027a18:	f817 e00e 	ldrb.w	lr, [r7, lr]
90027a1c:	bf54      	ite	pl
90027a1e:	f00e 0e0f 	andpl.w	lr, lr, #15
90027a22:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
90027a26:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
90027a2a:	fa5f fe8e 	uxtb.w	lr, lr
90027a2e:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
90027a32:	b1b9      	cbz	r1, 90027a64 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
90027a34:	4453      	add	r3, sl
90027a36:	0858      	lsrs	r0, r3, #1
90027a38:	07da      	lsls	r2, r3, #31
90027a3a:	5c38      	ldrb	r0, [r7, r0]
90027a3c:	bf54      	ite	pl
90027a3e:	f000 000f 	andpl.w	r0, r0, #15
90027a42:	1100      	asrmi	r0, r0, #4
90027a44:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90027a48:	b2c0      	uxtb	r0, r0
90027a4a:	900a      	str	r0, [sp, #40]	; 0x28
90027a4c:	1c58      	adds	r0, r3, #1
90027a4e:	0843      	lsrs	r3, r0, #1
90027a50:	07c2      	lsls	r2, r0, #31
90027a52:	5cfb      	ldrb	r3, [r7, r3]
90027a54:	bf54      	ite	pl
90027a56:	f003 030f 	andpl.w	r3, r3, #15
90027a5a:	111b      	asrmi	r3, r3, #4
90027a5c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90027a60:	b2db      	uxtb	r3, r3
90027a62:	930e      	str	r3, [sp, #56]	; 0x38
90027a64:	f8bd 2020 	ldrh.w	r2, [sp, #32]
90027a68:	b289      	uxth	r1, r1
90027a6a:	fb02 f301 	mul.w	r3, r2, r1
90027a6e:	0112      	lsls	r2, r2, #4
90027a70:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
90027a74:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
90027a78:	1ad2      	subs	r2, r2, r3
90027a7a:	b289      	uxth	r1, r1
90027a7c:	b292      	uxth	r2, r2
90027a7e:	1a40      	subs	r0, r0, r1
90027a80:	fa1f fe80 	uxth.w	lr, r0
90027a84:	980d      	ldr	r0, [sp, #52]	; 0x34
90027a86:	4342      	muls	r2, r0
90027a88:	fb0c 2c0e 	mla	ip, ip, lr, r2
90027a8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90027a8e:	fb01 c102 	mla	r1, r1, r2, ip
90027a92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
90027a94:	fb03 1302 	mla	r3, r3, r2, r1
90027a98:	f3c3 2307 	ubfx	r3, r3, #8, #8
90027a9c:	2b00      	cmp	r3, #0
90027a9e:	d045      	beq.n	90027b2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
90027aa0:	4a79      	ldr	r2, [pc, #484]	; (90027c88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>)
90027aa2:	2bff      	cmp	r3, #255	; 0xff
90027aa4:	6811      	ldr	r1, [r2, #0]
90027aa6:	ea4f 2e11 	mov.w	lr, r1, lsr #8
90027aaa:	ea4f 02d1 	mov.w	r2, r1, lsr #3
90027aae:	ea4f 01c1 	mov.w	r1, r1, lsl #3
90027ab2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
90027ab6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90027aba:	b2c9      	uxtb	r1, r1
90027abc:	f000 80bb 	beq.w	90027c36 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
90027ac0:	f8b8 c000 	ldrh.w	ip, [r8]
90027ac4:	fa1f fb83 	uxth.w	fp, r3
90027ac8:	43db      	mvns	r3, r3
90027aca:	fb1e fe0b 	smulbb	lr, lr, fp
90027ace:	ea4f 202c 	mov.w	r0, ip, asr #8
90027ad2:	fb12 f20b 	smulbb	r2, r2, fp
90027ad6:	b2db      	uxtb	r3, r3
90027ad8:	fb11 f10b 	smulbb	r1, r1, fp
90027adc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90027ae0:	fb00 e003 	mla	r0, r0, r3, lr
90027ae4:	ea4f 0eec 	mov.w	lr, ip, asr #3
90027ae8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90027aec:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
90027af0:	b280      	uxth	r0, r0
90027af2:	fa5f fc8c 	uxtb.w	ip, ip
90027af6:	fb0e 2203 	mla	r2, lr, r3, r2
90027afa:	fb0c 1303 	mla	r3, ip, r3, r1
90027afe:	1c41      	adds	r1, r0, #1
90027b00:	b292      	uxth	r2, r2
90027b02:	b29b      	uxth	r3, r3
90027b04:	f102 0e01 	add.w	lr, r2, #1
90027b08:	eb01 2010 	add.w	r0, r1, r0, lsr #8
90027b0c:	1c59      	adds	r1, r3, #1
90027b0e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
90027b12:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
90027b16:	eb01 2313 	add.w	r3, r1, r3, lsr #8
90027b1a:	0952      	lsrs	r2, r2, #5
90027b1c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90027b20:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90027b24:	4310      	orrs	r0, r2
90027b26:	4318      	orrs	r0, r3
90027b28:	f8a8 0000 	strh.w	r0, [r8]
90027b2c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90027b2e:	f108 0802 	add.w	r8, r8, #2
90027b32:	441c      	add	r4, r3
90027b34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90027b36:	441e      	add	r6, r3
90027b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
90027b3a:	3b01      	subs	r3, #1
90027b3c:	9309      	str	r3, [sp, #36]	; 0x24
90027b3e:	e736      	b.n	900279ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
90027b40:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90027b42:	3d01      	subs	r5, #1
90027b44:	f109 0902 	add.w	r9, r9, #2
90027b48:	441c      	add	r4, r3
90027b4a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90027b4c:	441e      	add	r6, r3
90027b4e:	e70e      	b.n	9002796e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90027b50:	d020      	beq.n	90027b94 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
90027b52:	1e6b      	subs	r3, r5, #1
90027b54:	9827      	ldr	r0, [sp, #156]	; 0x9c
90027b56:	fb00 4003 	mla	r0, r0, r3, r4
90027b5a:	1400      	asrs	r0, r0, #16
90027b5c:	f53f af23 	bmi.w	900279a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
90027b60:	3901      	subs	r1, #1
90027b62:	4288      	cmp	r0, r1
90027b64:	f6bf af1f 	bge.w	900279a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
90027b68:	9928      	ldr	r1, [sp, #160]	; 0xa0
90027b6a:	fb01 6303 	mla	r3, r1, r3, r6
90027b6e:	141b      	asrs	r3, r3, #16
90027b70:	f53f af19 	bmi.w	900279a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
90027b74:	3a01      	subs	r2, #1
90027b76:	4293      	cmp	r3, r2
90027b78:	f6bf af15 	bge.w	900279a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
90027b7c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90027b80:	46aa      	mov	sl, r5
90027b82:	46c8      	mov	r8, r9
90027b84:	9308      	str	r3, [sp, #32]
90027b86:	f1ba 0f00 	cmp.w	sl, #0
90027b8a:	dc7f      	bgt.n	90027c8c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
90027b8c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
90027b90:	eb09 0945 	add.w	r9, r9, r5, lsl #1
90027b94:	9b07      	ldr	r3, [sp, #28]
90027b96:	2b00      	cmp	r3, #0
90027b98:	f340 8143 	ble.w	90027e22 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
90027b9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90027ba0:	9b24      	ldr	r3, [sp, #144]	; 0x90
90027ba2:	ee3a aa2b 	vadd.f32	s20, s20, s23
90027ba6:	ee79 9a8b 	vadd.f32	s19, s19, s22
90027baa:	eef0 6a48 	vmov.f32	s13, s16
90027bae:	eec7 7a0a 	vdiv.f32	s15, s14, s20
90027bb2:	ee39 9a2a 	vadd.f32	s18, s18, s21
90027bb6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90027bba:	ee16 4a90 	vmov	r4, s13
90027bbe:	eef0 6a68 	vmov.f32	s13, s17
90027bc2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90027bc6:	ee16 6a90 	vmov	r6, s13
90027bca:	ee29 7aa7 	vmul.f32	s14, s19, s15
90027bce:	ee69 7a27 	vmul.f32	s15, s18, s15
90027bd2:	ee37 8a48 	vsub.f32	s16, s14, s16
90027bd6:	ee77 8ae8 	vsub.f32	s17, s15, s17
90027bda:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
90027bde:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
90027be2:	ee18 2a10 	vmov	r2, s16
90027be6:	eeb0 8a47 	vmov.f32	s16, s14
90027bea:	fb92 f3f3 	sdiv	r3, r2, r3
90027bee:	ee18 2a90 	vmov	r2, s17
90027bf2:	9327      	str	r3, [sp, #156]	; 0x9c
90027bf4:	9b24      	ldr	r3, [sp, #144]	; 0x90
90027bf6:	eef0 8a67 	vmov.f32	s17, s15
90027bfa:	fb92 f3f3 	sdiv	r3, r2, r3
90027bfe:	9328      	str	r3, [sp, #160]	; 0xa0
90027c00:	9b07      	ldr	r3, [sp, #28]
90027c02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90027c04:	3b01      	subs	r3, #1
90027c06:	9307      	str	r3, [sp, #28]
90027c08:	bf08      	it	eq
90027c0a:	4615      	moveq	r5, r2
90027c0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
90027c0e:	bf18      	it	ne
90027c10:	461d      	movne	r5, r3
90027c12:	e69d      	b.n	90027950 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90027c14:	2900      	cmp	r1, #0
90027c16:	f43f af25 	beq.w	90027a64 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
90027c1a:	eb0a 0003 	add.w	r0, sl, r3
90027c1e:	0843      	lsrs	r3, r0, #1
90027c20:	07c0      	lsls	r0, r0, #31
90027c22:	5cfb      	ldrb	r3, [r7, r3]
90027c24:	bf54      	ite	pl
90027c26:	f003 030f 	andpl.w	r3, r3, #15
90027c2a:	111b      	asrmi	r3, r3, #4
90027c2c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90027c30:	b2db      	uxtb	r3, r3
90027c32:	930a      	str	r3, [sp, #40]	; 0x28
90027c34:	e716      	b.n	90027a64 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
90027c36:	00d2      	lsls	r2, r2, #3
90027c38:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
90027c3c:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
90027c40:	f8a8 1000 	strh.w	r1, [r8]
90027c44:	e772      	b.n	90027b2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
90027c46:	f113 0b01 	adds.w	fp, r3, #1
90027c4a:	f53f af6f 	bmi.w	90027b2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
90027c4e:	45dc      	cmp	ip, fp
90027c50:	f6ff af6c 	blt.w	90027b2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
90027c54:	f110 0b01 	adds.w	fp, r0, #1
90027c58:	f53f af68 	bmi.w	90027b2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
90027c5c:	45de      	cmp	lr, fp
90027c5e:	f6ff af65 	blt.w	90027b2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
90027c62:	9302      	str	r3, [sp, #8]
90027c64:	fa0f f38e 	sxth.w	r3, lr
90027c68:	9a08      	ldr	r2, [sp, #32]
90027c6a:	9301      	str	r3, [sp, #4]
90027c6c:	fa0f f38c 	sxth.w	r3, ip
90027c70:	9105      	str	r1, [sp, #20]
90027c72:	4641      	mov	r1, r8
90027c74:	9300      	str	r3, [sp, #0]
90027c76:	4653      	mov	r3, sl
90027c78:	e9cd 0203 	strd	r0, r2, [sp, #12]
90027c7c:	463a      	mov	r2, r7
90027c7e:	9811      	ldr	r0, [sp, #68]	; 0x44
90027c80:	f7ff fd56 	bl	90027730 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
90027c84:	e752      	b.n	90027b2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
90027c86:	bf00      	nop
90027c88:	20026ce4 	.word	0x20026ce4
90027c8c:	1422      	asrs	r2, r4, #16
90027c8e:	9906      	ldr	r1, [sp, #24]
90027c90:	1433      	asrs	r3, r6, #16
90027c92:	f3c4 3003 	ubfx	r0, r4, #12, #4
90027c96:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90027c9a:	fb01 2303 	mla	r3, r1, r3, r2
90027c9e:	085a      	lsrs	r2, r3, #1
90027ca0:	07d9      	lsls	r1, r3, #31
90027ca2:	5cba      	ldrb	r2, [r7, r2]
90027ca4:	bf54      	ite	pl
90027ca6:	f002 020f 	andpl.w	r2, r2, #15
90027caa:	1112      	asrmi	r2, r2, #4
90027cac:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90027cb0:	b2d2      	uxtb	r2, r2
90027cb2:	2800      	cmp	r0, #0
90027cb4:	f000 809c 	beq.w	90027df0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f8>
90027cb8:	f103 0e01 	add.w	lr, r3, #1
90027cbc:	ea4f 015e 	mov.w	r1, lr, lsr #1
90027cc0:	f01e 0f01 	tst.w	lr, #1
90027cc4:	5c79      	ldrb	r1, [r7, r1]
90027cc6:	bf0c      	ite	eq
90027cc8:	f001 010f 	andeq.w	r1, r1, #15
90027ccc:	1109      	asrne	r1, r1, #4
90027cce:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90027cd2:	b2c9      	uxtb	r1, r1
90027cd4:	910f      	str	r1, [sp, #60]	; 0x3c
90027cd6:	f1bc 0f00 	cmp.w	ip, #0
90027cda:	d01a      	beq.n	90027d12 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
90027cdc:	9908      	ldr	r1, [sp, #32]
90027cde:	440b      	add	r3, r1
90027ce0:	0859      	lsrs	r1, r3, #1
90027ce2:	f013 0f01 	tst.w	r3, #1
90027ce6:	f103 0301 	add.w	r3, r3, #1
90027cea:	5c79      	ldrb	r1, [r7, r1]
90027cec:	bf0c      	ite	eq
90027cee:	f001 010f 	andeq.w	r1, r1, #15
90027cf2:	1109      	asrne	r1, r1, #4
90027cf4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90027cf8:	b2c9      	uxtb	r1, r1
90027cfa:	910b      	str	r1, [sp, #44]	; 0x2c
90027cfc:	0859      	lsrs	r1, r3, #1
90027cfe:	07db      	lsls	r3, r3, #31
90027d00:	5c79      	ldrb	r1, [r7, r1]
90027d02:	bf54      	ite	pl
90027d04:	f001 010f 	andpl.w	r1, r1, #15
90027d08:	1109      	asrmi	r1, r1, #4
90027d0a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90027d0e:	b2c9      	uxtb	r1, r1
90027d10:	9110      	str	r1, [sp, #64]	; 0x40
90027d12:	b280      	uxth	r0, r0
90027d14:	fa1f fc8c 	uxth.w	ip, ip
90027d18:	fb00 f30c 	mul.w	r3, r0, ip
90027d1c:	0100      	lsls	r0, r0, #4
90027d1e:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
90027d22:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
90027d26:	1ac0      	subs	r0, r0, r3
90027d28:	fa1f fc8c 	uxth.w	ip, ip
90027d2c:	b280      	uxth	r0, r0
90027d2e:	eba1 010c 	sub.w	r1, r1, ip
90027d32:	fa1f fe81 	uxth.w	lr, r1
90027d36:	990f      	ldr	r1, [sp, #60]	; 0x3c
90027d38:	4348      	muls	r0, r1
90027d3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
90027d3c:	fb02 020e 	mla	r2, r2, lr, r0
90027d40:	fb0c 2c01 	mla	ip, ip, r1, r2
90027d44:	9a10      	ldr	r2, [sp, #64]	; 0x40
90027d46:	fb03 c302 	mla	r3, r3, r2, ip
90027d4a:	f3c3 2307 	ubfx	r3, r3, #8, #8
90027d4e:	2b00      	cmp	r3, #0
90027d50:	d045      	beq.n	90027dde <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
90027d52:	4a36      	ldr	r2, [pc, #216]	; (90027e2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>)
90027d54:	2bff      	cmp	r3, #255	; 0xff
90027d56:	6811      	ldr	r1, [r2, #0]
90027d58:	ea4f 2e11 	mov.w	lr, r1, lsr #8
90027d5c:	ea4f 02d1 	mov.w	r2, r1, lsr #3
90027d60:	ea4f 01c1 	mov.w	r1, r1, lsl #3
90027d64:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
90027d68:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90027d6c:	b2c9      	uxtb	r1, r1
90027d6e:	d050      	beq.n	90027e12 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51a>
90027d70:	f8b8 c000 	ldrh.w	ip, [r8]
90027d74:	fa1f fb83 	uxth.w	fp, r3
90027d78:	43db      	mvns	r3, r3
90027d7a:	fb1e fe0b 	smulbb	lr, lr, fp
90027d7e:	ea4f 202c 	mov.w	r0, ip, asr #8
90027d82:	fb12 f20b 	smulbb	r2, r2, fp
90027d86:	b2db      	uxtb	r3, r3
90027d88:	fb11 f10b 	smulbb	r1, r1, fp
90027d8c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90027d90:	fb00 e003 	mla	r0, r0, r3, lr
90027d94:	ea4f 0eec 	mov.w	lr, ip, asr #3
90027d98:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90027d9c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
90027da0:	b280      	uxth	r0, r0
90027da2:	fa5f fc8c 	uxtb.w	ip, ip
90027da6:	fb0e 2203 	mla	r2, lr, r3, r2
90027daa:	fb0c 1103 	mla	r1, ip, r3, r1
90027dae:	b292      	uxth	r2, r2
90027db0:	b289      	uxth	r1, r1
90027db2:	f102 0e01 	add.w	lr, r2, #1
90027db6:	1c4b      	adds	r3, r1, #1
90027db8:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
90027dbc:	f100 0e01 	add.w	lr, r0, #1
90027dc0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90027dc4:	0952      	lsrs	r2, r2, #5
90027dc6:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
90027dca:	f3c1 21c4 	ubfx	r1, r1, #11, #5
90027dce:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90027dd2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
90027dd6:	4302      	orrs	r2, r0
90027dd8:	430a      	orrs	r2, r1
90027dda:	f8a8 2000 	strh.w	r2, [r8]
90027dde:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90027de0:	f108 0802 	add.w	r8, r8, #2
90027de4:	f10a 3aff 	add.w	sl, sl, #4294967295
90027de8:	441c      	add	r4, r3
90027dea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90027dec:	441e      	add	r6, r3
90027dee:	e6ca      	b.n	90027b86 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
90027df0:	f1bc 0f00 	cmp.w	ip, #0
90027df4:	d08d      	beq.n	90027d12 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
90027df6:	9908      	ldr	r1, [sp, #32]
90027df8:	440b      	add	r3, r1
90027dfa:	0859      	lsrs	r1, r3, #1
90027dfc:	07db      	lsls	r3, r3, #31
90027dfe:	5c79      	ldrb	r1, [r7, r1]
90027e00:	bf54      	ite	pl
90027e02:	f001 010f 	andpl.w	r1, r1, #15
90027e06:	1109      	asrmi	r1, r1, #4
90027e08:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90027e0c:	b2c9      	uxtb	r1, r1
90027e0e:	910b      	str	r1, [sp, #44]	; 0x2c
90027e10:	e77f      	b.n	90027d12 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
90027e12:	00d2      	lsls	r2, r2, #3
90027e14:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
90027e18:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
90027e1c:	f8a8 1000 	strh.w	r1, [r8]
90027e20:	e7dd      	b.n	90027dde <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
90027e22:	b013      	add	sp, #76	; 0x4c
90027e24:	ecbd 8b08 	vpop	{d8-d11}
90027e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90027e2c:	20026ce4 	.word	0x20026ce4

90027e30 <CRC_Lock>:
90027e30:	4a1d      	ldr	r2, [pc, #116]	; (90027ea8 <CRC_Lock+0x78>)
90027e32:	b530      	push	{r4, r5, lr}
90027e34:	6813      	ldr	r3, [r2, #0]
90027e36:	f64f 74f0 	movw	r4, #65520	; 0xfff0
90027e3a:	f24c 2540 	movw	r5, #49728	; 0xc240
90027e3e:	f023 0301 	bic.w	r3, r3, #1
90027e42:	6013      	str	r3, [r2, #0]
90027e44:	4b19      	ldr	r3, [pc, #100]	; (90027eac <CRC_Lock+0x7c>)
90027e46:	681a      	ldr	r2, [r3, #0]
90027e48:	4022      	ands	r2, r4
90027e4a:	42aa      	cmp	r2, r5
90027e4c:	d005      	beq.n	90027e5a <CRC_Lock+0x2a>
90027e4e:	681b      	ldr	r3, [r3, #0]
90027e50:	f24c 2270 	movw	r2, #49776	; 0xc270
90027e54:	4023      	ands	r3, r4
90027e56:	4293      	cmp	r3, r2
90027e58:	d11d      	bne.n	90027e96 <CRC_Lock+0x66>
90027e5a:	4b15      	ldr	r3, [pc, #84]	; (90027eb0 <CRC_Lock+0x80>)
90027e5c:	681b      	ldr	r3, [r3, #0]
90027e5e:	b9d3      	cbnz	r3, 90027e96 <CRC_Lock+0x66>
90027e60:	4a14      	ldr	r2, [pc, #80]	; (90027eb4 <CRC_Lock+0x84>)
90027e62:	6813      	ldr	r3, [r2, #0]
90027e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
90027e68:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
90027e6c:	d006      	beq.n	90027e7c <CRC_Lock+0x4c>
90027e6e:	6813      	ldr	r3, [r2, #0]
90027e70:	f240 4283 	movw	r2, #1155	; 0x483
90027e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
90027e78:	4293      	cmp	r3, r2
90027e7a:	d10c      	bne.n	90027e96 <CRC_Lock+0x66>
90027e7c:	4b0e      	ldr	r3, [pc, #56]	; (90027eb8 <CRC_Lock+0x88>)
90027e7e:	2201      	movs	r2, #1
90027e80:	601a      	str	r2, [r3, #0]
90027e82:	681a      	ldr	r2, [r3, #0]
90027e84:	2a00      	cmp	r2, #0
90027e86:	d1fc      	bne.n	90027e82 <CRC_Lock+0x52>
90027e88:	4b0c      	ldr	r3, [pc, #48]	; (90027ebc <CRC_Lock+0x8c>)
90027e8a:	6018      	str	r0, [r3, #0]
90027e8c:	6818      	ldr	r0, [r3, #0]
90027e8e:	1a43      	subs	r3, r0, r1
90027e90:	4258      	negs	r0, r3
90027e92:	4158      	adcs	r0, r3
90027e94:	bd30      	pop	{r4, r5, pc}
90027e96:	4b0a      	ldr	r3, [pc, #40]	; (90027ec0 <CRC_Lock+0x90>)
90027e98:	2201      	movs	r2, #1
90027e9a:	601a      	str	r2, [r3, #0]
90027e9c:	681a      	ldr	r2, [r3, #0]
90027e9e:	2a00      	cmp	r2, #0
90027ea0:	d1fc      	bne.n	90027e9c <CRC_Lock+0x6c>
90027ea2:	4b08      	ldr	r3, [pc, #32]	; (90027ec4 <CRC_Lock+0x94>)
90027ea4:	e7f1      	b.n	90027e8a <CRC_Lock+0x5a>
90027ea6:	bf00      	nop
90027ea8:	e0002000 	.word	0xe0002000
90027eac:	e000ed00 	.word	0xe000ed00
90027eb0:	e0042000 	.word	0xe0042000
90027eb4:	5c001000 	.word	0x5c001000
90027eb8:	58024c08 	.word	0x58024c08
90027ebc:	58024c00 	.word	0x58024c00
90027ec0:	40023008 	.word	0x40023008
90027ec4:	40023000 	.word	0x40023000

90027ec8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
90027ec8:	6101      	str	r1, [r0, #16]
90027eca:	4770      	bx	lr

90027ecc <_ZN8touchgfx8Gestures4tickEv>:
90027ecc:	7b83      	ldrb	r3, [r0, #14]
90027ece:	b14b      	cbz	r3, 90027ee4 <_ZN8touchgfx8Gestures4tickEv+0x18>
90027ed0:	8903      	ldrh	r3, [r0, #8]
90027ed2:	3301      	adds	r3, #1
90027ed4:	b29b      	uxth	r3, r3
90027ed6:	2b07      	cmp	r3, #7
90027ed8:	8103      	strh	r3, [r0, #8]
90027eda:	bf81      	itttt	hi
90027edc:	2300      	movhi	r3, #0
90027ede:	8143      	strhhi	r3, [r0, #10]
90027ee0:	8183      	strhhi	r3, [r0, #12]
90027ee2:	7383      	strbhi	r3, [r0, #14]
90027ee4:	4770      	bx	lr
	...

90027ee8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
90027ee8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
90027eec:	4604      	mov	r4, r0
90027eee:	4698      	mov	r8, r3
90027ef0:	8880      	ldrh	r0, [r0, #4]
90027ef2:	4617      	mov	r7, r2
90027ef4:	4b1d      	ldr	r3, [pc, #116]	; (90027f6c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
90027ef6:	460e      	mov	r6, r1
90027ef8:	f8ad 0006 	strh.w	r0, [sp, #6]
90027efc:	eba8 0000 	sub.w	r0, r8, r0
90027f00:	9300      	str	r3, [sp, #0]
90027f02:	2300      	movs	r3, #0
90027f04:	b280      	uxth	r0, r0
90027f06:	8aa2      	ldrh	r2, [r4, #20]
90027f08:	f88d 3004 	strb.w	r3, [sp, #4]
90027f0c:	b203      	sxth	r3, r0
90027f0e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
90027f12:	88e1      	ldrh	r1, [r4, #6]
90027f14:	2b00      	cmp	r3, #0
90027f16:	f8ad 800a 	strh.w	r8, [sp, #10]
90027f1a:	f8ad 1008 	strh.w	r1, [sp, #8]
90027f1e:	bfb8      	it	lt
90027f20:	4240      	neglt	r0, r0
90027f22:	f8ad 500c 	strh.w	r5, [sp, #12]
90027f26:	bfb8      	it	lt
90027f28:	b203      	sxthlt	r3, r0
90027f2a:	4293      	cmp	r3, r2
90027f2c:	dc08      	bgt.n	90027f40 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
90027f2e:	1a69      	subs	r1, r5, r1
90027f30:	b289      	uxth	r1, r1
90027f32:	b20b      	sxth	r3, r1
90027f34:	2b00      	cmp	r3, #0
90027f36:	bfbc      	itt	lt
90027f38:	4249      	neglt	r1, r1
90027f3a:	b20b      	sxthlt	r3, r1
90027f3c:	429a      	cmp	r2, r3
90027f3e:	da13      	bge.n	90027f68 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
90027f40:	6920      	ldr	r0, [r4, #16]
90027f42:	4669      	mov	r1, sp
90027f44:	eba8 0606 	sub.w	r6, r8, r6
90027f48:	1bef      	subs	r7, r5, r7
90027f4a:	6803      	ldr	r3, [r0, #0]
90027f4c:	685b      	ldr	r3, [r3, #4]
90027f4e:	4798      	blx	r3
90027f50:	2300      	movs	r3, #0
90027f52:	2001      	movs	r0, #1
90027f54:	8166      	strh	r6, [r4, #10]
90027f56:	8123      	strh	r3, [r4, #8]
90027f58:	81a7      	strh	r7, [r4, #12]
90027f5a:	f8a4 8004 	strh.w	r8, [r4, #4]
90027f5e:	80e5      	strh	r5, [r4, #6]
90027f60:	73a0      	strb	r0, [r4, #14]
90027f62:	b004      	add	sp, #16
90027f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90027f68:	2000      	movs	r0, #0
90027f6a:	e7fa      	b.n	90027f62 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
90027f6c:	9002fbc0 	.word	0x9002fbc0

90027f70 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
90027f70:	b5f0      	push	{r4, r5, r6, r7, lr}
90027f72:	461e      	mov	r6, r3
90027f74:	1e4b      	subs	r3, r1, #1
90027f76:	b085      	sub	sp, #20
90027f78:	4604      	mov	r4, r0
90027f7a:	2b01      	cmp	r3, #1
90027f7c:	460d      	mov	r5, r1
90027f7e:	4617      	mov	r7, r2
90027f80:	d84b      	bhi.n	9002801a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
90027f82:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90027f86:	1cd3      	adds	r3, r2, #3
90027f88:	b29b      	uxth	r3, r3
90027f8a:	2b06      	cmp	r3, #6
90027f8c:	d916      	bls.n	90027fbc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
90027f8e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 90028030 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90027f92:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90027f96:	f8cd c004 	str.w	ip, [sp, #4]
90027f9a:	f04f 0c00 	mov.w	ip, #0
90027f9e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90027fa2:	6900      	ldr	r0, [r0, #16]
90027fa4:	f8ad 100c 	strh.w	r1, [sp, #12]
90027fa8:	a901      	add	r1, sp, #4
90027faa:	f88d c008 	strb.w	ip, [sp, #8]
90027fae:	f8ad 200a 	strh.w	r2, [sp, #10]
90027fb2:	f8ad 300e 	strh.w	r3, [sp, #14]
90027fb6:	6803      	ldr	r3, [r0, #0]
90027fb8:	689b      	ldr	r3, [r3, #8]
90027fba:	4798      	blx	r3
90027fbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90027fc0:	1cd3      	adds	r3, r2, #3
90027fc2:	b29b      	uxth	r3, r3
90027fc4:	2b06      	cmp	r3, #6
90027fc6:	d916      	bls.n	90027ff6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90027fc8:	f8df c064 	ldr.w	ip, [pc, #100]	; 90028030 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90027fcc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90027fd0:	f8cd c004 	str.w	ip, [sp, #4]
90027fd4:	f04f 0c01 	mov.w	ip, #1
90027fd8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90027fdc:	6920      	ldr	r0, [r4, #16]
90027fde:	f8ad 100c 	strh.w	r1, [sp, #12]
90027fe2:	a901      	add	r1, sp, #4
90027fe4:	f88d c008 	strb.w	ip, [sp, #8]
90027fe8:	f8ad 200a 	strh.w	r2, [sp, #10]
90027fec:	f8ad 300e 	strh.w	r3, [sp, #14]
90027ff0:	6803      	ldr	r3, [r0, #0]
90027ff2:	689b      	ldr	r3, [r3, #8]
90027ff4:	4798      	blx	r3
90027ff6:	4b0d      	ldr	r3, [pc, #52]	; (9002802c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
90027ff8:	a901      	add	r1, sp, #4
90027ffa:	6920      	ldr	r0, [r4, #16]
90027ffc:	9301      	str	r3, [sp, #4]
90027ffe:	2300      	movs	r3, #0
90028000:	f88d 5008 	strb.w	r5, [sp, #8]
90028004:	f8ad 700a 	strh.w	r7, [sp, #10]
90028008:	f8ad 600c 	strh.w	r6, [sp, #12]
9002800c:	f8ad 300e 	strh.w	r3, [sp, #14]
90028010:	6803      	ldr	r3, [r0, #0]
90028012:	681b      	ldr	r3, [r3, #0]
90028014:	4798      	blx	r3
90028016:	b005      	add	sp, #20
90028018:	bdf0      	pop	{r4, r5, r6, r7, pc}
9002801a:	2900      	cmp	r1, #0
9002801c:	d1eb      	bne.n	90027ff6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
9002801e:	80a2      	strh	r2, [r4, #4]
90028020:	80c6      	strh	r6, [r0, #6]
90028022:	60a1      	str	r1, [r4, #8]
90028024:	81a1      	strh	r1, [r4, #12]
90028026:	73a1      	strb	r1, [r4, #14]
90028028:	e7e5      	b.n	90027ff6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
9002802a:	bf00      	nop
9002802c:	9002fbac 	.word	0x9002fbac
90028030:	9002fbd4 	.word	0x9002fbd4

90028034 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
90028034:	790b      	ldrb	r3, [r1, #4]
90028036:	2b00      	cmp	r3, #0
90028038:	bf0c      	ite	eq
9002803a:	2301      	moveq	r3, #1
9002803c:	2300      	movne	r3, #0
9002803e:	b570      	push	{r4, r5, r6, lr}
90028040:	4604      	mov	r4, r0
90028042:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
90028046:	460e      	mov	r6, r1
90028048:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
9002804c:	d109      	bne.n	90028062 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
9002804e:	b14d      	cbz	r5, 90028064 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
90028050:	7933      	ldrb	r3, [r6, #4]
90028052:	2b01      	cmp	r3, #1
90028054:	d10c      	bne.n	90028070 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
90028056:	6823      	ldr	r3, [r4, #0]
90028058:	4620      	mov	r0, r4
9002805a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
9002805c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90028060:	4718      	bx	r3
90028062:	b12d      	cbz	r5, 90028070 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
90028064:	6823      	ldr	r3, [r4, #0]
90028066:	4620      	mov	r0, r4
90028068:	695b      	ldr	r3, [r3, #20]
9002806a:	4798      	blx	r3
9002806c:	2d00      	cmp	r5, #0
9002806e:	d1ef      	bne.n	90028050 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
90028070:	bd70      	pop	{r4, r5, r6, pc}

90028072 <__aeabi_atexit>:
90028072:	460b      	mov	r3, r1
90028074:	4601      	mov	r1, r0
90028076:	4618      	mov	r0, r3
90028078:	f000 be00 	b.w	90028c7c <__cxa_atexit>

9002807c <_ZdlPvj>:
9002807c:	f000 b812 	b.w	900280a4 <_ZdlPv>

90028080 <__cxa_guard_acquire>:
90028080:	6803      	ldr	r3, [r0, #0]
90028082:	07db      	lsls	r3, r3, #31
90028084:	d406      	bmi.n	90028094 <__cxa_guard_acquire+0x14>
90028086:	7843      	ldrb	r3, [r0, #1]
90028088:	b103      	cbz	r3, 9002808c <__cxa_guard_acquire+0xc>
9002808a:	deff      	udf	#255	; 0xff
9002808c:	2301      	movs	r3, #1
9002808e:	7043      	strb	r3, [r0, #1]
90028090:	4618      	mov	r0, r3
90028092:	4770      	bx	lr
90028094:	2000      	movs	r0, #0
90028096:	4770      	bx	lr

90028098 <__cxa_guard_release>:
90028098:	2301      	movs	r3, #1
9002809a:	6003      	str	r3, [r0, #0]
9002809c:	4770      	bx	lr

9002809e <__cxa_pure_virtual>:
9002809e:	b508      	push	{r3, lr}
900280a0:	f000 f80e 	bl	900280c0 <_ZSt9terminatev>

900280a4 <_ZdlPv>:
900280a4:	f000 be36 	b.w	90028d14 <free>

900280a8 <_ZN10__cxxabiv111__terminateEPFvvE>:
900280a8:	b508      	push	{r3, lr}
900280aa:	4780      	blx	r0
900280ac:	f000 fdba 	bl	90028c24 <abort>

900280b0 <_ZSt13get_terminatev>:
900280b0:	4b02      	ldr	r3, [pc, #8]	; (900280bc <_ZSt13get_terminatev+0xc>)
900280b2:	6818      	ldr	r0, [r3, #0]
900280b4:	f3bf 8f5b 	dmb	ish
900280b8:	4770      	bx	lr
900280ba:	bf00      	nop
900280bc:	200000c4 	.word	0x200000c4

900280c0 <_ZSt9terminatev>:
900280c0:	b508      	push	{r3, lr}
900280c2:	f7ff fff5 	bl	900280b0 <_ZSt13get_terminatev>
900280c6:	f7ff ffef 	bl	900280a8 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

900280cc <cosf>:
900280cc:	ee10 3a10 	vmov	r3, s0
900280d0:	b507      	push	{r0, r1, r2, lr}
900280d2:	4a1c      	ldr	r2, [pc, #112]	; (90028144 <cosf+0x78>)
900280d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
900280d8:	4293      	cmp	r3, r2
900280da:	dc04      	bgt.n	900280e6 <cosf+0x1a>
900280dc:	eddf 0a1a 	vldr	s1, [pc, #104]	; 90028148 <cosf+0x7c>
900280e0:	f000 f9b2 	bl	90028448 <__kernel_cosf>
900280e4:	e004      	b.n	900280f0 <cosf+0x24>
900280e6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
900280ea:	db04      	blt.n	900280f6 <cosf+0x2a>
900280ec:	ee30 0a40 	vsub.f32	s0, s0, s0
900280f0:	b003      	add	sp, #12
900280f2:	f85d fb04 	ldr.w	pc, [sp], #4
900280f6:	4668      	mov	r0, sp
900280f8:	f000 f86a 	bl	900281d0 <__ieee754_rem_pio2f>
900280fc:	f000 0003 	and.w	r0, r0, #3
90028100:	2801      	cmp	r0, #1
90028102:	d007      	beq.n	90028114 <cosf+0x48>
90028104:	2802      	cmp	r0, #2
90028106:	d00e      	beq.n	90028126 <cosf+0x5a>
90028108:	b9a0      	cbnz	r0, 90028134 <cosf+0x68>
9002810a:	eddd 0a01 	vldr	s1, [sp, #4]
9002810e:	ed9d 0a00 	vldr	s0, [sp]
90028112:	e7e5      	b.n	900280e0 <cosf+0x14>
90028114:	eddd 0a01 	vldr	s1, [sp, #4]
90028118:	ed9d 0a00 	vldr	s0, [sp]
9002811c:	f000 fc7e 	bl	90028a1c <__kernel_sinf>
90028120:	eeb1 0a40 	vneg.f32	s0, s0
90028124:	e7e4      	b.n	900280f0 <cosf+0x24>
90028126:	eddd 0a01 	vldr	s1, [sp, #4]
9002812a:	ed9d 0a00 	vldr	s0, [sp]
9002812e:	f000 f98b 	bl	90028448 <__kernel_cosf>
90028132:	e7f5      	b.n	90028120 <cosf+0x54>
90028134:	eddd 0a01 	vldr	s1, [sp, #4]
90028138:	ed9d 0a00 	vldr	s0, [sp]
9002813c:	2001      	movs	r0, #1
9002813e:	f000 fc6d 	bl	90028a1c <__kernel_sinf>
90028142:	e7d5      	b.n	900280f0 <cosf+0x24>
90028144:	3f490fd8 	.word	0x3f490fd8
90028148:	00000000 	.word	0x00000000

9002814c <sinf>:
9002814c:	ee10 3a10 	vmov	r3, s0
90028150:	b507      	push	{r0, r1, r2, lr}
90028152:	4a1d      	ldr	r2, [pc, #116]	; (900281c8 <sinf+0x7c>)
90028154:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
90028158:	4293      	cmp	r3, r2
9002815a:	dc05      	bgt.n	90028168 <sinf+0x1c>
9002815c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 900281cc <sinf+0x80>
90028160:	2000      	movs	r0, #0
90028162:	f000 fc5b 	bl	90028a1c <__kernel_sinf>
90028166:	e004      	b.n	90028172 <sinf+0x26>
90028168:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
9002816c:	db04      	blt.n	90028178 <sinf+0x2c>
9002816e:	ee30 0a40 	vsub.f32	s0, s0, s0
90028172:	b003      	add	sp, #12
90028174:	f85d fb04 	ldr.w	pc, [sp], #4
90028178:	4668      	mov	r0, sp
9002817a:	f000 f829 	bl	900281d0 <__ieee754_rem_pio2f>
9002817e:	f000 0003 	and.w	r0, r0, #3
90028182:	2801      	cmp	r0, #1
90028184:	d008      	beq.n	90028198 <sinf+0x4c>
90028186:	2802      	cmp	r0, #2
90028188:	d00d      	beq.n	900281a6 <sinf+0x5a>
9002818a:	b9b0      	cbnz	r0, 900281ba <sinf+0x6e>
9002818c:	eddd 0a01 	vldr	s1, [sp, #4]
90028190:	ed9d 0a00 	vldr	s0, [sp]
90028194:	2001      	movs	r0, #1
90028196:	e7e4      	b.n	90028162 <sinf+0x16>
90028198:	eddd 0a01 	vldr	s1, [sp, #4]
9002819c:	ed9d 0a00 	vldr	s0, [sp]
900281a0:	f000 f952 	bl	90028448 <__kernel_cosf>
900281a4:	e7e5      	b.n	90028172 <sinf+0x26>
900281a6:	eddd 0a01 	vldr	s1, [sp, #4]
900281aa:	ed9d 0a00 	vldr	s0, [sp]
900281ae:	2001      	movs	r0, #1
900281b0:	f000 fc34 	bl	90028a1c <__kernel_sinf>
900281b4:	eeb1 0a40 	vneg.f32	s0, s0
900281b8:	e7db      	b.n	90028172 <sinf+0x26>
900281ba:	eddd 0a01 	vldr	s1, [sp, #4]
900281be:	ed9d 0a00 	vldr	s0, [sp]
900281c2:	f000 f941 	bl	90028448 <__kernel_cosf>
900281c6:	e7f5      	b.n	900281b4 <sinf+0x68>
900281c8:	3f490fd8 	.word	0x3f490fd8
900281cc:	00000000 	.word	0x00000000

900281d0 <__ieee754_rem_pio2f>:
900281d0:	b5f0      	push	{r4, r5, r6, r7, lr}
900281d2:	ee10 6a10 	vmov	r6, s0
900281d6:	4b8e      	ldr	r3, [pc, #568]	; (90028410 <__ieee754_rem_pio2f+0x240>)
900281d8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
900281dc:	429d      	cmp	r5, r3
900281de:	b087      	sub	sp, #28
900281e0:	eef0 7a40 	vmov.f32	s15, s0
900281e4:	4604      	mov	r4, r0
900281e6:	dc05      	bgt.n	900281f4 <__ieee754_rem_pio2f+0x24>
900281e8:	2300      	movs	r3, #0
900281ea:	ed80 0a00 	vstr	s0, [r0]
900281ee:	6043      	str	r3, [r0, #4]
900281f0:	2000      	movs	r0, #0
900281f2:	e01a      	b.n	9002822a <__ieee754_rem_pio2f+0x5a>
900281f4:	4b87      	ldr	r3, [pc, #540]	; (90028414 <__ieee754_rem_pio2f+0x244>)
900281f6:	429d      	cmp	r5, r3
900281f8:	dc46      	bgt.n	90028288 <__ieee754_rem_pio2f+0xb8>
900281fa:	2e00      	cmp	r6, #0
900281fc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 90028418 <__ieee754_rem_pio2f+0x248>
90028200:	4b86      	ldr	r3, [pc, #536]	; (9002841c <__ieee754_rem_pio2f+0x24c>)
90028202:	f025 050f 	bic.w	r5, r5, #15
90028206:	dd1f      	ble.n	90028248 <__ieee754_rem_pio2f+0x78>
90028208:	429d      	cmp	r5, r3
9002820a:	ee77 7ac0 	vsub.f32	s15, s15, s0
9002820e:	d00e      	beq.n	9002822e <__ieee754_rem_pio2f+0x5e>
90028210:	ed9f 7a83 	vldr	s14, [pc, #524]	; 90028420 <__ieee754_rem_pio2f+0x250>
90028214:	ee37 0ac7 	vsub.f32	s0, s15, s14
90028218:	ee77 7ac0 	vsub.f32	s15, s15, s0
9002821c:	ed80 0a00 	vstr	s0, [r0]
90028220:	ee77 7ac7 	vsub.f32	s15, s15, s14
90028224:	2001      	movs	r0, #1
90028226:	edc4 7a01 	vstr	s15, [r4, #4]
9002822a:	b007      	add	sp, #28
9002822c:	bdf0      	pop	{r4, r5, r6, r7, pc}
9002822e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 90028424 <__ieee754_rem_pio2f+0x254>
90028232:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 90028428 <__ieee754_rem_pio2f+0x258>
90028236:	ee77 7ac0 	vsub.f32	s15, s15, s0
9002823a:	ee77 6ac7 	vsub.f32	s13, s15, s14
9002823e:	ee77 7ae6 	vsub.f32	s15, s15, s13
90028242:	edc0 6a00 	vstr	s13, [r0]
90028246:	e7eb      	b.n	90028220 <__ieee754_rem_pio2f+0x50>
90028248:	429d      	cmp	r5, r3
9002824a:	ee77 7a80 	vadd.f32	s15, s15, s0
9002824e:	d00e      	beq.n	9002826e <__ieee754_rem_pio2f+0x9e>
90028250:	ed9f 7a73 	vldr	s14, [pc, #460]	; 90028420 <__ieee754_rem_pio2f+0x250>
90028254:	ee37 0a87 	vadd.f32	s0, s15, s14
90028258:	ee77 7ac0 	vsub.f32	s15, s15, s0
9002825c:	ed80 0a00 	vstr	s0, [r0]
90028260:	ee77 7a87 	vadd.f32	s15, s15, s14
90028264:	f04f 30ff 	mov.w	r0, #4294967295
90028268:	edc4 7a01 	vstr	s15, [r4, #4]
9002826c:	e7dd      	b.n	9002822a <__ieee754_rem_pio2f+0x5a>
9002826e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 90028424 <__ieee754_rem_pio2f+0x254>
90028272:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 90028428 <__ieee754_rem_pio2f+0x258>
90028276:	ee77 7a80 	vadd.f32	s15, s15, s0
9002827a:	ee77 6a87 	vadd.f32	s13, s15, s14
9002827e:	ee77 7ae6 	vsub.f32	s15, s15, s13
90028282:	edc0 6a00 	vstr	s13, [r0]
90028286:	e7eb      	b.n	90028260 <__ieee754_rem_pio2f+0x90>
90028288:	4b68      	ldr	r3, [pc, #416]	; (9002842c <__ieee754_rem_pio2f+0x25c>)
9002828a:	429d      	cmp	r5, r3
9002828c:	dc72      	bgt.n	90028374 <__ieee754_rem_pio2f+0x1a4>
9002828e:	f000 fc0d 	bl	90028aac <fabsf>
90028292:	ed9f 7a67 	vldr	s14, [pc, #412]	; 90028430 <__ieee754_rem_pio2f+0x260>
90028296:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
9002829a:	eee0 7a07 	vfma.f32	s15, s0, s14
9002829e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
900282a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
900282a6:	ee17 0a90 	vmov	r0, s15
900282aa:	eddf 7a5b 	vldr	s15, [pc, #364]	; 90028418 <__ieee754_rem_pio2f+0x248>
900282ae:	eea7 0a67 	vfms.f32	s0, s14, s15
900282b2:	281f      	cmp	r0, #31
900282b4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 90028420 <__ieee754_rem_pio2f+0x250>
900282b8:	ee67 7a27 	vmul.f32	s15, s14, s15
900282bc:	eeb1 6a47 	vneg.f32	s12, s14
900282c0:	ee70 6a67 	vsub.f32	s13, s0, s15
900282c4:	ee16 2a90 	vmov	r2, s13
900282c8:	dc1c      	bgt.n	90028304 <__ieee754_rem_pio2f+0x134>
900282ca:	495a      	ldr	r1, [pc, #360]	; (90028434 <__ieee754_rem_pio2f+0x264>)
900282cc:	1e47      	subs	r7, r0, #1
900282ce:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
900282d2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
900282d6:	428b      	cmp	r3, r1
900282d8:	d014      	beq.n	90028304 <__ieee754_rem_pio2f+0x134>
900282da:	6022      	str	r2, [r4, #0]
900282dc:	ed94 7a00 	vldr	s14, [r4]
900282e0:	ee30 0a47 	vsub.f32	s0, s0, s14
900282e4:	2e00      	cmp	r6, #0
900282e6:	ee30 0a67 	vsub.f32	s0, s0, s15
900282ea:	ed84 0a01 	vstr	s0, [r4, #4]
900282ee:	da9c      	bge.n	9002822a <__ieee754_rem_pio2f+0x5a>
900282f0:	eeb1 7a47 	vneg.f32	s14, s14
900282f4:	eeb1 0a40 	vneg.f32	s0, s0
900282f8:	ed84 7a00 	vstr	s14, [r4]
900282fc:	ed84 0a01 	vstr	s0, [r4, #4]
90028300:	4240      	negs	r0, r0
90028302:	e792      	b.n	9002822a <__ieee754_rem_pio2f+0x5a>
90028304:	f3c2 51c7 	ubfx	r1, r2, #23, #8
90028308:	15eb      	asrs	r3, r5, #23
9002830a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
9002830e:	2d08      	cmp	r5, #8
90028310:	dde3      	ble.n	900282da <__ieee754_rem_pio2f+0x10a>
90028312:	eddf 7a44 	vldr	s15, [pc, #272]	; 90028424 <__ieee754_rem_pio2f+0x254>
90028316:	eef0 6a40 	vmov.f32	s13, s0
9002831a:	eee6 6a27 	vfma.f32	s13, s12, s15
9002831e:	ee30 0a66 	vsub.f32	s0, s0, s13
90028322:	eea6 0a27 	vfma.f32	s0, s12, s15
90028326:	eddf 7a40 	vldr	s15, [pc, #256]	; 90028428 <__ieee754_rem_pio2f+0x258>
9002832a:	ee97 0a27 	vfnms.f32	s0, s14, s15
9002832e:	ee76 5ac0 	vsub.f32	s11, s13, s0
90028332:	eef0 7a40 	vmov.f32	s15, s0
90028336:	ee15 2a90 	vmov	r2, s11
9002833a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
9002833e:	1a5b      	subs	r3, r3, r1
90028340:	2b19      	cmp	r3, #25
90028342:	dc04      	bgt.n	9002834e <__ieee754_rem_pio2f+0x17e>
90028344:	edc4 5a00 	vstr	s11, [r4]
90028348:	eeb0 0a66 	vmov.f32	s0, s13
9002834c:	e7c6      	b.n	900282dc <__ieee754_rem_pio2f+0x10c>
9002834e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 90028438 <__ieee754_rem_pio2f+0x268>
90028352:	eeb0 0a66 	vmov.f32	s0, s13
90028356:	eea6 0a25 	vfma.f32	s0, s12, s11
9002835a:	ee76 7ac0 	vsub.f32	s15, s13, s0
9002835e:	eddf 6a37 	vldr	s13, [pc, #220]	; 9002843c <__ieee754_rem_pio2f+0x26c>
90028362:	eee6 7a25 	vfma.f32	s15, s12, s11
90028366:	eed7 7a26 	vfnms.f32	s15, s14, s13
9002836a:	ee30 7a67 	vsub.f32	s14, s0, s15
9002836e:	ed84 7a00 	vstr	s14, [r4]
90028372:	e7b3      	b.n	900282dc <__ieee754_rem_pio2f+0x10c>
90028374:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
90028378:	db06      	blt.n	90028388 <__ieee754_rem_pio2f+0x1b8>
9002837a:	ee70 7a40 	vsub.f32	s15, s0, s0
9002837e:	edc0 7a01 	vstr	s15, [r0, #4]
90028382:	edc0 7a00 	vstr	s15, [r0]
90028386:	e733      	b.n	900281f0 <__ieee754_rem_pio2f+0x20>
90028388:	15ea      	asrs	r2, r5, #23
9002838a:	3a86      	subs	r2, #134	; 0x86
9002838c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
90028390:	ee07 3a90 	vmov	s15, r3
90028394:	eebd 7ae7 	vcvt.s32.f32	s14, s15
90028398:	eddf 6a29 	vldr	s13, [pc, #164]	; 90028440 <__ieee754_rem_pio2f+0x270>
9002839c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900283a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
900283a4:	ed8d 7a03 	vstr	s14, [sp, #12]
900283a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
900283ac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
900283b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900283b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
900283b8:	ed8d 7a04 	vstr	s14, [sp, #16]
900283bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
900283c0:	eef5 7a40 	vcmp.f32	s15, #0.0
900283c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900283c8:	edcd 7a05 	vstr	s15, [sp, #20]
900283cc:	d11e      	bne.n	9002840c <__ieee754_rem_pio2f+0x23c>
900283ce:	eeb5 7a40 	vcmp.f32	s14, #0.0
900283d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900283d6:	bf14      	ite	ne
900283d8:	2302      	movne	r3, #2
900283da:	2301      	moveq	r3, #1
900283dc:	4919      	ldr	r1, [pc, #100]	; (90028444 <__ieee754_rem_pio2f+0x274>)
900283de:	9101      	str	r1, [sp, #4]
900283e0:	2102      	movs	r1, #2
900283e2:	9100      	str	r1, [sp, #0]
900283e4:	a803      	add	r0, sp, #12
900283e6:	4621      	mov	r1, r4
900283e8:	f000 f88e 	bl	90028508 <__kernel_rem_pio2f>
900283ec:	2e00      	cmp	r6, #0
900283ee:	f6bf af1c 	bge.w	9002822a <__ieee754_rem_pio2f+0x5a>
900283f2:	edd4 7a00 	vldr	s15, [r4]
900283f6:	eef1 7a67 	vneg.f32	s15, s15
900283fa:	edc4 7a00 	vstr	s15, [r4]
900283fe:	edd4 7a01 	vldr	s15, [r4, #4]
90028402:	eef1 7a67 	vneg.f32	s15, s15
90028406:	edc4 7a01 	vstr	s15, [r4, #4]
9002840a:	e779      	b.n	90028300 <__ieee754_rem_pio2f+0x130>
9002840c:	2303      	movs	r3, #3
9002840e:	e7e5      	b.n	900283dc <__ieee754_rem_pio2f+0x20c>
90028410:	3f490fd8 	.word	0x3f490fd8
90028414:	4016cbe3 	.word	0x4016cbe3
90028418:	3fc90f80 	.word	0x3fc90f80
9002841c:	3fc90fd0 	.word	0x3fc90fd0
90028420:	37354443 	.word	0x37354443
90028424:	37354400 	.word	0x37354400
90028428:	2e85a308 	.word	0x2e85a308
9002842c:	43490f80 	.word	0x43490f80
90028430:	3f22f984 	.word	0x3f22f984
90028434:	90030f58 	.word	0x90030f58
90028438:	2e85a300 	.word	0x2e85a300
9002843c:	248d3132 	.word	0x248d3132
90028440:	43800000 	.word	0x43800000
90028444:	90030fd8 	.word	0x90030fd8

90028448 <__kernel_cosf>:
90028448:	ee10 3a10 	vmov	r3, s0
9002844c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
90028450:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
90028454:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
90028458:	da05      	bge.n	90028466 <__kernel_cosf+0x1e>
9002845a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
9002845e:	ee17 2a90 	vmov	r2, s15
90028462:	2a00      	cmp	r2, #0
90028464:	d03d      	beq.n	900284e2 <__kernel_cosf+0x9a>
90028466:	ee60 5a00 	vmul.f32	s11, s0, s0
9002846a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 900284e8 <__kernel_cosf+0xa0>
9002846e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 900284ec <__kernel_cosf+0xa4>
90028472:	eddf 6a1f 	vldr	s13, [pc, #124]	; 900284f0 <__kernel_cosf+0xa8>
90028476:	4a1f      	ldr	r2, [pc, #124]	; (900284f4 <__kernel_cosf+0xac>)
90028478:	eea5 7aa7 	vfma.f32	s14, s11, s15
9002847c:	4293      	cmp	r3, r2
9002847e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 900284f8 <__kernel_cosf+0xb0>
90028482:	eee7 7a25 	vfma.f32	s15, s14, s11
90028486:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 900284fc <__kernel_cosf+0xb4>
9002848a:	eea7 7aa5 	vfma.f32	s14, s15, s11
9002848e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 90028500 <__kernel_cosf+0xb8>
90028492:	eee7 7a25 	vfma.f32	s15, s14, s11
90028496:	eeb0 7a66 	vmov.f32	s14, s13
9002849a:	eea7 7aa5 	vfma.f32	s14, s15, s11
9002849e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
900284a2:	ee65 7aa6 	vmul.f32	s15, s11, s13
900284a6:	ee67 6a25 	vmul.f32	s13, s14, s11
900284aa:	ee20 7ac0 	vnmul.f32	s14, s1, s0
900284ae:	eea5 7aa6 	vfma.f32	s14, s11, s13
900284b2:	dc04      	bgt.n	900284be <__kernel_cosf+0x76>
900284b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
900284b8:	ee36 0a47 	vsub.f32	s0, s12, s14
900284bc:	4770      	bx	lr
900284be:	4a11      	ldr	r2, [pc, #68]	; (90028504 <__kernel_cosf+0xbc>)
900284c0:	4293      	cmp	r3, r2
900284c2:	bfda      	itte	le
900284c4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
900284c8:	ee06 3a90 	vmovle	s13, r3
900284cc:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
900284d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
900284d4:	ee36 0a66 	vsub.f32	s0, s12, s13
900284d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
900284dc:	ee30 0a67 	vsub.f32	s0, s0, s15
900284e0:	4770      	bx	lr
900284e2:	eeb0 0a46 	vmov.f32	s0, s12
900284e6:	4770      	bx	lr
900284e8:	ad47d74e 	.word	0xad47d74e
900284ec:	310f74f6 	.word	0x310f74f6
900284f0:	3d2aaaab 	.word	0x3d2aaaab
900284f4:	3e999999 	.word	0x3e999999
900284f8:	b493f27c 	.word	0xb493f27c
900284fc:	37d00d01 	.word	0x37d00d01
90028500:	bab60b61 	.word	0xbab60b61
90028504:	3f480000 	.word	0x3f480000

90028508 <__kernel_rem_pio2f>:
90028508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002850c:	ed2d 8b04 	vpush	{d8-d9}
90028510:	b0d7      	sub	sp, #348	; 0x15c
90028512:	4616      	mov	r6, r2
90028514:	4698      	mov	r8, r3
90028516:	9a64      	ldr	r2, [sp, #400]	; 0x190
90028518:	4bbb      	ldr	r3, [pc, #748]	; (90028808 <__kernel_rem_pio2f+0x300>)
9002851a:	9001      	str	r0, [sp, #4]
9002851c:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
90028520:	1d33      	adds	r3, r6, #4
90028522:	460d      	mov	r5, r1
90028524:	f108 39ff 	add.w	r9, r8, #4294967295
90028528:	db29      	blt.n	9002857e <__kernel_rem_pio2f+0x76>
9002852a:	1ef1      	subs	r1, r6, #3
9002852c:	bf48      	it	mi
9002852e:	1d31      	addmi	r1, r6, #4
90028530:	10c9      	asrs	r1, r1, #3
90028532:	1c4c      	adds	r4, r1, #1
90028534:	00e3      	lsls	r3, r4, #3
90028536:	9302      	str	r3, [sp, #8]
90028538:	9b65      	ldr	r3, [sp, #404]	; 0x194
9002853a:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 90028818 <__kernel_rem_pio2f+0x310>
9002853e:	eba1 0009 	sub.w	r0, r1, r9
90028542:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
90028546:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
9002854a:	eb07 0c09 	add.w	ip, r7, r9
9002854e:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
90028552:	2300      	movs	r3, #0
90028554:	4563      	cmp	r3, ip
90028556:	dd14      	ble.n	90028582 <__kernel_rem_pio2f+0x7a>
90028558:	ab1a      	add	r3, sp, #104	; 0x68
9002855a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
9002855e:	46cc      	mov	ip, r9
90028560:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
90028564:	f1c8 0b01 	rsb	fp, r8, #1
90028568:	eb0b 020c 	add.w	r2, fp, ip
9002856c:	4297      	cmp	r7, r2
9002856e:	db27      	blt.n	900285c0 <__kernel_rem_pio2f+0xb8>
90028570:	f8dd e004 	ldr.w	lr, [sp, #4]
90028574:	eddf 7aa8 	vldr	s15, [pc, #672]	; 90028818 <__kernel_rem_pio2f+0x310>
90028578:	4618      	mov	r0, r3
9002857a:	2200      	movs	r2, #0
9002857c:	e016      	b.n	900285ac <__kernel_rem_pio2f+0xa4>
9002857e:	2100      	movs	r1, #0
90028580:	e7d7      	b.n	90028532 <__kernel_rem_pio2f+0x2a>
90028582:	42d8      	cmn	r0, r3
90028584:	bf5d      	ittte	pl
90028586:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
9002858a:	ee07 2a90 	vmovpl	s15, r2
9002858e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
90028592:	eef0 7a47 	vmovmi.f32	s15, s14
90028596:	ecea 7a01 	vstmia	sl!, {s15}
9002859a:	3301      	adds	r3, #1
9002859c:	e7da      	b.n	90028554 <__kernel_rem_pio2f+0x4c>
9002859e:	ecfe 6a01 	vldmia	lr!, {s13}
900285a2:	ed90 7a00 	vldr	s14, [r0]
900285a6:	eee6 7a87 	vfma.f32	s15, s13, s14
900285aa:	3201      	adds	r2, #1
900285ac:	454a      	cmp	r2, r9
900285ae:	f1a0 0004 	sub.w	r0, r0, #4
900285b2:	ddf4      	ble.n	9002859e <__kernel_rem_pio2f+0x96>
900285b4:	ecea 7a01 	vstmia	sl!, {s15}
900285b8:	3304      	adds	r3, #4
900285ba:	f10c 0c01 	add.w	ip, ip, #1
900285be:	e7d3      	b.n	90028568 <__kernel_rem_pio2f+0x60>
900285c0:	ab06      	add	r3, sp, #24
900285c2:	eb03 0387 	add.w	r3, r3, r7, lsl #2
900285c6:	9304      	str	r3, [sp, #16]
900285c8:	9b65      	ldr	r3, [sp, #404]	; 0x194
900285ca:	eddf 8a92 	vldr	s17, [pc, #584]	; 90028814 <__kernel_rem_pio2f+0x30c>
900285ce:	ed9f 9a90 	vldr	s18, [pc, #576]	; 90028810 <__kernel_rem_pio2f+0x308>
900285d2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
900285d6:	9303      	str	r3, [sp, #12]
900285d8:	46ba      	mov	sl, r7
900285da:	ab56      	add	r3, sp, #344	; 0x158
900285dc:	eb03 038a 	add.w	r3, r3, sl, lsl #2
900285e0:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
900285e4:	ab06      	add	r3, sp, #24
900285e6:	4618      	mov	r0, r3
900285e8:	4652      	mov	r2, sl
900285ea:	2a00      	cmp	r2, #0
900285ec:	dc51      	bgt.n	90028692 <__kernel_rem_pio2f+0x18a>
900285ee:	4620      	mov	r0, r4
900285f0:	9305      	str	r3, [sp, #20]
900285f2:	f000 faa5 	bl	90028b40 <scalbnf>
900285f6:	eeb0 8a40 	vmov.f32	s16, s0
900285fa:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
900285fe:	ee28 0a00 	vmul.f32	s0, s16, s0
90028602:	f000 fa5b 	bl	90028abc <floorf>
90028606:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
9002860a:	eea0 8a67 	vfms.f32	s16, s0, s15
9002860e:	2c00      	cmp	r4, #0
90028610:	9b05      	ldr	r3, [sp, #20]
90028612:	eefd 7ac8 	vcvt.s32.f32	s15, s16
90028616:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
9002861a:	edcd 7a00 	vstr	s15, [sp]
9002861e:	ee38 8a40 	vsub.f32	s16, s16, s0
90028622:	dd4b      	ble.n	900286bc <__kernel_rem_pio2f+0x1b4>
90028624:	f10a 3cff 	add.w	ip, sl, #4294967295
90028628:	aa06      	add	r2, sp, #24
9002862a:	f1c4 0e08 	rsb	lr, r4, #8
9002862e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
90028632:	ee17 1a90 	vmov	r1, s15
90028636:	fa42 f00e 	asr.w	r0, r2, lr
9002863a:	4401      	add	r1, r0
9002863c:	9100      	str	r1, [sp, #0]
9002863e:	fa00 f00e 	lsl.w	r0, r0, lr
90028642:	a906      	add	r1, sp, #24
90028644:	1a12      	subs	r2, r2, r0
90028646:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
9002864a:	f1c4 0007 	rsb	r0, r4, #7
9002864e:	fa42 fb00 	asr.w	fp, r2, r0
90028652:	f1bb 0f00 	cmp.w	fp, #0
90028656:	dd43      	ble.n	900286e0 <__kernel_rem_pio2f+0x1d8>
90028658:	9a00      	ldr	r2, [sp, #0]
9002865a:	f04f 0e00 	mov.w	lr, #0
9002865e:	3201      	adds	r2, #1
90028660:	9200      	str	r2, [sp, #0]
90028662:	4670      	mov	r0, lr
90028664:	45f2      	cmp	sl, lr
90028666:	dc6c      	bgt.n	90028742 <__kernel_rem_pio2f+0x23a>
90028668:	2c00      	cmp	r4, #0
9002866a:	dd04      	ble.n	90028676 <__kernel_rem_pio2f+0x16e>
9002866c:	2c01      	cmp	r4, #1
9002866e:	d079      	beq.n	90028764 <__kernel_rem_pio2f+0x25c>
90028670:	2c02      	cmp	r4, #2
90028672:	f000 8082 	beq.w	9002877a <__kernel_rem_pio2f+0x272>
90028676:	f1bb 0f02 	cmp.w	fp, #2
9002867a:	d131      	bne.n	900286e0 <__kernel_rem_pio2f+0x1d8>
9002867c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
90028680:	ee30 8a48 	vsub.f32	s16, s0, s16
90028684:	b360      	cbz	r0, 900286e0 <__kernel_rem_pio2f+0x1d8>
90028686:	4620      	mov	r0, r4
90028688:	f000 fa5a 	bl	90028b40 <scalbnf>
9002868c:	ee38 8a40 	vsub.f32	s16, s16, s0
90028690:	e026      	b.n	900286e0 <__kernel_rem_pio2f+0x1d8>
90028692:	ee60 7a28 	vmul.f32	s15, s0, s17
90028696:	3a01      	subs	r2, #1
90028698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
9002869c:	a942      	add	r1, sp, #264	; 0x108
9002869e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900286a2:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
900286a6:	eea7 0ac9 	vfms.f32	s0, s15, s18
900286aa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
900286ae:	eca0 0a01 	vstmia	r0!, {s0}
900286b2:	ed9c 0a00 	vldr	s0, [ip]
900286b6:	ee37 0a80 	vadd.f32	s0, s15, s0
900286ba:	e796      	b.n	900285ea <__kernel_rem_pio2f+0xe2>
900286bc:	d107      	bne.n	900286ce <__kernel_rem_pio2f+0x1c6>
900286be:	f10a 32ff 	add.w	r2, sl, #4294967295
900286c2:	a906      	add	r1, sp, #24
900286c4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
900286c8:	ea4f 2b22 	mov.w	fp, r2, asr #8
900286cc:	e7c1      	b.n	90028652 <__kernel_rem_pio2f+0x14a>
900286ce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
900286d2:	eeb4 8ae7 	vcmpe.f32	s16, s15
900286d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900286da:	da2f      	bge.n	9002873c <__kernel_rem_pio2f+0x234>
900286dc:	f04f 0b00 	mov.w	fp, #0
900286e0:	eeb5 8a40 	vcmp.f32	s16, #0.0
900286e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900286e8:	f040 8098 	bne.w	9002881c <__kernel_rem_pio2f+0x314>
900286ec:	f10a 33ff 	add.w	r3, sl, #4294967295
900286f0:	469c      	mov	ip, r3
900286f2:	2200      	movs	r2, #0
900286f4:	45bc      	cmp	ip, r7
900286f6:	da48      	bge.n	9002878a <__kernel_rem_pio2f+0x282>
900286f8:	2a00      	cmp	r2, #0
900286fa:	d05f      	beq.n	900287bc <__kernel_rem_pio2f+0x2b4>
900286fc:	aa06      	add	r2, sp, #24
900286fe:	3c08      	subs	r4, #8
90028700:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
90028704:	2900      	cmp	r1, #0
90028706:	d07d      	beq.n	90028804 <__kernel_rem_pio2f+0x2fc>
90028708:	4620      	mov	r0, r4
9002870a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
9002870e:	9301      	str	r3, [sp, #4]
90028710:	f000 fa16 	bl	90028b40 <scalbnf>
90028714:	9b01      	ldr	r3, [sp, #4]
90028716:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 90028814 <__kernel_rem_pio2f+0x30c>
9002871a:	4619      	mov	r1, r3
9002871c:	2900      	cmp	r1, #0
9002871e:	f280 80af 	bge.w	90028880 <__kernel_rem_pio2f+0x378>
90028722:	4618      	mov	r0, r3
90028724:	2400      	movs	r4, #0
90028726:	2800      	cmp	r0, #0
90028728:	f2c0 80d0 	blt.w	900288cc <__kernel_rem_pio2f+0x3c4>
9002872c:	a942      	add	r1, sp, #264	; 0x108
9002872e:	eb01 0680 	add.w	r6, r1, r0, lsl #2
90028732:	4a36      	ldr	r2, [pc, #216]	; (9002880c <__kernel_rem_pio2f+0x304>)
90028734:	eddf 7a38 	vldr	s15, [pc, #224]	; 90028818 <__kernel_rem_pio2f+0x310>
90028738:	2100      	movs	r1, #0
9002873a:	e0bb      	b.n	900288b4 <__kernel_rem_pio2f+0x3ac>
9002873c:	f04f 0b02 	mov.w	fp, #2
90028740:	e78a      	b.n	90028658 <__kernel_rem_pio2f+0x150>
90028742:	681a      	ldr	r2, [r3, #0]
90028744:	b948      	cbnz	r0, 9002875a <__kernel_rem_pio2f+0x252>
90028746:	b11a      	cbz	r2, 90028750 <__kernel_rem_pio2f+0x248>
90028748:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
9002874c:	601a      	str	r2, [r3, #0]
9002874e:	2201      	movs	r2, #1
90028750:	f10e 0e01 	add.w	lr, lr, #1
90028754:	3304      	adds	r3, #4
90028756:	4610      	mov	r0, r2
90028758:	e784      	b.n	90028664 <__kernel_rem_pio2f+0x15c>
9002875a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
9002875e:	601a      	str	r2, [r3, #0]
90028760:	4602      	mov	r2, r0
90028762:	e7f5      	b.n	90028750 <__kernel_rem_pio2f+0x248>
90028764:	f10a 3cff 	add.w	ip, sl, #4294967295
90028768:	ab06      	add	r3, sp, #24
9002876a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
9002876e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90028772:	aa06      	add	r2, sp, #24
90028774:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
90028778:	e77d      	b.n	90028676 <__kernel_rem_pio2f+0x16e>
9002877a:	f10a 3cff 	add.w	ip, sl, #4294967295
9002877e:	ab06      	add	r3, sp, #24
90028780:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
90028784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
90028788:	e7f3      	b.n	90028772 <__kernel_rem_pio2f+0x26a>
9002878a:	a906      	add	r1, sp, #24
9002878c:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
90028790:	f10c 3cff 	add.w	ip, ip, #4294967295
90028794:	4302      	orrs	r2, r0
90028796:	e7ad      	b.n	900286f4 <__kernel_rem_pio2f+0x1ec>
90028798:	3001      	adds	r0, #1
9002879a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
9002879e:	2a00      	cmp	r2, #0
900287a0:	d0fa      	beq.n	90028798 <__kernel_rem_pio2f+0x290>
900287a2:	a91a      	add	r1, sp, #104	; 0x68
900287a4:	eb0a 0208 	add.w	r2, sl, r8
900287a8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
900287ac:	f10a 0301 	add.w	r3, sl, #1
900287b0:	eb0a 0100 	add.w	r1, sl, r0
900287b4:	4299      	cmp	r1, r3
900287b6:	da04      	bge.n	900287c2 <__kernel_rem_pio2f+0x2ba>
900287b8:	468a      	mov	sl, r1
900287ba:	e70e      	b.n	900285da <__kernel_rem_pio2f+0xd2>
900287bc:	9b04      	ldr	r3, [sp, #16]
900287be:	2001      	movs	r0, #1
900287c0:	e7eb      	b.n	9002879a <__kernel_rem_pio2f+0x292>
900287c2:	9803      	ldr	r0, [sp, #12]
900287c4:	f8dd c004 	ldr.w	ip, [sp, #4]
900287c8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
900287cc:	9000      	str	r0, [sp, #0]
900287ce:	ee07 0a90 	vmov	s15, r0
900287d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900287d6:	2000      	movs	r0, #0
900287d8:	ece2 7a01 	vstmia	r2!, {s15}
900287dc:	eddf 7a0e 	vldr	s15, [pc, #56]	; 90028818 <__kernel_rem_pio2f+0x310>
900287e0:	4696      	mov	lr, r2
900287e2:	4548      	cmp	r0, r9
900287e4:	dd06      	ble.n	900287f4 <__kernel_rem_pio2f+0x2ec>
900287e6:	a842      	add	r0, sp, #264	; 0x108
900287e8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
900287ec:	edc0 7a00 	vstr	s15, [r0]
900287f0:	3301      	adds	r3, #1
900287f2:	e7df      	b.n	900287b4 <__kernel_rem_pio2f+0x2ac>
900287f4:	ecfc 6a01 	vldmia	ip!, {s13}
900287f8:	ed3e 7a01 	vldmdb	lr!, {s14}
900287fc:	3001      	adds	r0, #1
900287fe:	eee6 7a87 	vfma.f32	s15, s13, s14
90028802:	e7ee      	b.n	900287e2 <__kernel_rem_pio2f+0x2da>
90028804:	3b01      	subs	r3, #1
90028806:	e779      	b.n	900286fc <__kernel_rem_pio2f+0x1f4>
90028808:	9003131c 	.word	0x9003131c
9002880c:	900312f0 	.word	0x900312f0
90028810:	43800000 	.word	0x43800000
90028814:	3b800000 	.word	0x3b800000
90028818:	00000000 	.word	0x00000000
9002881c:	9b02      	ldr	r3, [sp, #8]
9002881e:	eeb0 0a48 	vmov.f32	s0, s16
90028822:	1b98      	subs	r0, r3, r6
90028824:	f000 f98c 	bl	90028b40 <scalbnf>
90028828:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 90028810 <__kernel_rem_pio2f+0x308>
9002882c:	eeb4 0ac7 	vcmpe.f32	s0, s14
90028830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90028834:	db1b      	blt.n	9002886e <__kernel_rem_pio2f+0x366>
90028836:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 90028814 <__kernel_rem_pio2f+0x30c>
9002883a:	ee60 7a27 	vmul.f32	s15, s0, s15
9002883e:	aa06      	add	r2, sp, #24
90028840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90028844:	a906      	add	r1, sp, #24
90028846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9002884a:	3408      	adds	r4, #8
9002884c:	eea7 0ac7 	vfms.f32	s0, s15, s14
90028850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
90028854:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90028858:	ee10 3a10 	vmov	r3, s0
9002885c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
90028860:	ee17 2a90 	vmov	r2, s15
90028864:	f10a 0301 	add.w	r3, sl, #1
90028868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
9002886c:	e74c      	b.n	90028708 <__kernel_rem_pio2f+0x200>
9002886e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
90028872:	aa06      	add	r2, sp, #24
90028874:	ee10 3a10 	vmov	r3, s0
90028878:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
9002887c:	4653      	mov	r3, sl
9002887e:	e743      	b.n	90028708 <__kernel_rem_pio2f+0x200>
90028880:	aa42      	add	r2, sp, #264	; 0x108
90028882:	eb02 0081 	add.w	r0, r2, r1, lsl #2
90028886:	aa06      	add	r2, sp, #24
90028888:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
9002888c:	9201      	str	r2, [sp, #4]
9002888e:	ee07 2a90 	vmov	s15, r2
90028892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90028896:	3901      	subs	r1, #1
90028898:	ee67 7a80 	vmul.f32	s15, s15, s0
9002889c:	ee20 0a07 	vmul.f32	s0, s0, s14
900288a0:	edc0 7a00 	vstr	s15, [r0]
900288a4:	e73a      	b.n	9002871c <__kernel_rem_pio2f+0x214>
900288a6:	ecf2 6a01 	vldmia	r2!, {s13}
900288aa:	ecb6 7a01 	vldmia	r6!, {s14}
900288ae:	eee6 7a87 	vfma.f32	s15, s13, s14
900288b2:	3101      	adds	r1, #1
900288b4:	42b9      	cmp	r1, r7
900288b6:	dc01      	bgt.n	900288bc <__kernel_rem_pio2f+0x3b4>
900288b8:	428c      	cmp	r4, r1
900288ba:	daf4      	bge.n	900288a6 <__kernel_rem_pio2f+0x39e>
900288bc:	aa56      	add	r2, sp, #344	; 0x158
900288be:	eb02 0184 	add.w	r1, r2, r4, lsl #2
900288c2:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
900288c6:	3801      	subs	r0, #1
900288c8:	3401      	adds	r4, #1
900288ca:	e72c      	b.n	90028726 <__kernel_rem_pio2f+0x21e>
900288cc:	9a64      	ldr	r2, [sp, #400]	; 0x190
900288ce:	2a02      	cmp	r2, #2
900288d0:	dc0a      	bgt.n	900288e8 <__kernel_rem_pio2f+0x3e0>
900288d2:	2a00      	cmp	r2, #0
900288d4:	dc61      	bgt.n	9002899a <__kernel_rem_pio2f+0x492>
900288d6:	d03c      	beq.n	90028952 <__kernel_rem_pio2f+0x44a>
900288d8:	9b00      	ldr	r3, [sp, #0]
900288da:	f003 0007 	and.w	r0, r3, #7
900288de:	b057      	add	sp, #348	; 0x15c
900288e0:	ecbd 8b04 	vpop	{d8-d9}
900288e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900288e8:	9a64      	ldr	r2, [sp, #400]	; 0x190
900288ea:	2a03      	cmp	r2, #3
900288ec:	d1f4      	bne.n	900288d8 <__kernel_rem_pio2f+0x3d0>
900288ee:	aa2e      	add	r2, sp, #184	; 0xb8
900288f0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
900288f4:	4608      	mov	r0, r1
900288f6:	461c      	mov	r4, r3
900288f8:	2c00      	cmp	r4, #0
900288fa:	f1a0 0004 	sub.w	r0, r0, #4
900288fe:	dc59      	bgt.n	900289b4 <__kernel_rem_pio2f+0x4ac>
90028900:	4618      	mov	r0, r3
90028902:	2801      	cmp	r0, #1
90028904:	f1a1 0104 	sub.w	r1, r1, #4
90028908:	dc64      	bgt.n	900289d4 <__kernel_rem_pio2f+0x4cc>
9002890a:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 90028818 <__kernel_rem_pio2f+0x310>
9002890e:	2b01      	cmp	r3, #1
90028910:	dc70      	bgt.n	900289f4 <__kernel_rem_pio2f+0x4ec>
90028912:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
90028916:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
9002891a:	f1bb 0f00 	cmp.w	fp, #0
9002891e:	d172      	bne.n	90028a06 <__kernel_rem_pio2f+0x4fe>
90028920:	edc5 6a00 	vstr	s13, [r5]
90028924:	ed85 7a01 	vstr	s14, [r5, #4]
90028928:	edc5 7a02 	vstr	s15, [r5, #8]
9002892c:	e7d4      	b.n	900288d8 <__kernel_rem_pio2f+0x3d0>
9002892e:	aa2e      	add	r2, sp, #184	; 0xb8
90028930:	eb02 0183 	add.w	r1, r2, r3, lsl #2
90028934:	ed91 7a00 	vldr	s14, [r1]
90028938:	ee77 7a87 	vadd.f32	s15, s15, s14
9002893c:	3b01      	subs	r3, #1
9002893e:	2b00      	cmp	r3, #0
90028940:	daf5      	bge.n	9002892e <__kernel_rem_pio2f+0x426>
90028942:	f1bb 0f00 	cmp.w	fp, #0
90028946:	d001      	beq.n	9002894c <__kernel_rem_pio2f+0x444>
90028948:	eef1 7a67 	vneg.f32	s15, s15
9002894c:	edc5 7a00 	vstr	s15, [r5]
90028950:	e7c2      	b.n	900288d8 <__kernel_rem_pio2f+0x3d0>
90028952:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 90028818 <__kernel_rem_pio2f+0x310>
90028956:	e7f2      	b.n	9002893e <__kernel_rem_pio2f+0x436>
90028958:	aa2e      	add	r2, sp, #184	; 0xb8
9002895a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
9002895e:	edd0 7a00 	vldr	s15, [r0]
90028962:	ee37 7a27 	vadd.f32	s14, s14, s15
90028966:	3901      	subs	r1, #1
90028968:	2900      	cmp	r1, #0
9002896a:	daf5      	bge.n	90028958 <__kernel_rem_pio2f+0x450>
9002896c:	f1bb 0f00 	cmp.w	fp, #0
90028970:	d017      	beq.n	900289a2 <__kernel_rem_pio2f+0x49a>
90028972:	eef1 7a47 	vneg.f32	s15, s14
90028976:	edc5 7a00 	vstr	s15, [r5]
9002897a:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
9002897e:	ee77 7ac7 	vsub.f32	s15, s15, s14
90028982:	a82f      	add	r0, sp, #188	; 0xbc
90028984:	2101      	movs	r1, #1
90028986:	428b      	cmp	r3, r1
90028988:	da0e      	bge.n	900289a8 <__kernel_rem_pio2f+0x4a0>
9002898a:	f1bb 0f00 	cmp.w	fp, #0
9002898e:	d001      	beq.n	90028994 <__kernel_rem_pio2f+0x48c>
90028990:	eef1 7a67 	vneg.f32	s15, s15
90028994:	edc5 7a01 	vstr	s15, [r5, #4]
90028998:	e79e      	b.n	900288d8 <__kernel_rem_pio2f+0x3d0>
9002899a:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 90028818 <__kernel_rem_pio2f+0x310>
9002899e:	4619      	mov	r1, r3
900289a0:	e7e2      	b.n	90028968 <__kernel_rem_pio2f+0x460>
900289a2:	eef0 7a47 	vmov.f32	s15, s14
900289a6:	e7e6      	b.n	90028976 <__kernel_rem_pio2f+0x46e>
900289a8:	ecb0 7a01 	vldmia	r0!, {s14}
900289ac:	3101      	adds	r1, #1
900289ae:	ee77 7a87 	vadd.f32	s15, s15, s14
900289b2:	e7e8      	b.n	90028986 <__kernel_rem_pio2f+0x47e>
900289b4:	edd0 7a00 	vldr	s15, [r0]
900289b8:	edd0 6a01 	vldr	s13, [r0, #4]
900289bc:	ee37 7aa6 	vadd.f32	s14, s15, s13
900289c0:	3c01      	subs	r4, #1
900289c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
900289c6:	ed80 7a00 	vstr	s14, [r0]
900289ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
900289ce:	edc0 7a01 	vstr	s15, [r0, #4]
900289d2:	e791      	b.n	900288f8 <__kernel_rem_pio2f+0x3f0>
900289d4:	edd1 7a00 	vldr	s15, [r1]
900289d8:	edd1 6a01 	vldr	s13, [r1, #4]
900289dc:	ee37 7aa6 	vadd.f32	s14, s15, s13
900289e0:	3801      	subs	r0, #1
900289e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
900289e6:	ed81 7a00 	vstr	s14, [r1]
900289ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
900289ee:	edc1 7a01 	vstr	s15, [r1, #4]
900289f2:	e786      	b.n	90028902 <__kernel_rem_pio2f+0x3fa>
900289f4:	aa2e      	add	r2, sp, #184	; 0xb8
900289f6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
900289fa:	ed91 7a00 	vldr	s14, [r1]
900289fe:	3b01      	subs	r3, #1
90028a00:	ee77 7a87 	vadd.f32	s15, s15, s14
90028a04:	e783      	b.n	9002890e <__kernel_rem_pio2f+0x406>
90028a06:	eef1 6a66 	vneg.f32	s13, s13
90028a0a:	eeb1 7a47 	vneg.f32	s14, s14
90028a0e:	edc5 6a00 	vstr	s13, [r5]
90028a12:	ed85 7a01 	vstr	s14, [r5, #4]
90028a16:	eef1 7a67 	vneg.f32	s15, s15
90028a1a:	e785      	b.n	90028928 <__kernel_rem_pio2f+0x420>

90028a1c <__kernel_sinf>:
90028a1c:	ee10 3a10 	vmov	r3, s0
90028a20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
90028a24:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
90028a28:	da04      	bge.n	90028a34 <__kernel_sinf+0x18>
90028a2a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
90028a2e:	ee17 3a90 	vmov	r3, s15
90028a32:	b35b      	cbz	r3, 90028a8c <__kernel_sinf+0x70>
90028a34:	ee20 7a00 	vmul.f32	s14, s0, s0
90028a38:	eddf 7a15 	vldr	s15, [pc, #84]	; 90028a90 <__kernel_sinf+0x74>
90028a3c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 90028a94 <__kernel_sinf+0x78>
90028a40:	eea7 6a27 	vfma.f32	s12, s14, s15
90028a44:	eddf 7a14 	vldr	s15, [pc, #80]	; 90028a98 <__kernel_sinf+0x7c>
90028a48:	eee6 7a07 	vfma.f32	s15, s12, s14
90028a4c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 90028a9c <__kernel_sinf+0x80>
90028a50:	eea7 6a87 	vfma.f32	s12, s15, s14
90028a54:	eddf 7a12 	vldr	s15, [pc, #72]	; 90028aa0 <__kernel_sinf+0x84>
90028a58:	ee60 6a07 	vmul.f32	s13, s0, s14
90028a5c:	eee6 7a07 	vfma.f32	s15, s12, s14
90028a60:	b930      	cbnz	r0, 90028a70 <__kernel_sinf+0x54>
90028a62:	ed9f 6a10 	vldr	s12, [pc, #64]	; 90028aa4 <__kernel_sinf+0x88>
90028a66:	eea7 6a27 	vfma.f32	s12, s14, s15
90028a6a:	eea6 0a26 	vfma.f32	s0, s12, s13
90028a6e:	4770      	bx	lr
90028a70:	ee67 7ae6 	vnmul.f32	s15, s15, s13
90028a74:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
90028a78:	eee0 7a86 	vfma.f32	s15, s1, s12
90028a7c:	eed7 0a87 	vfnms.f32	s1, s15, s14
90028a80:	eddf 7a09 	vldr	s15, [pc, #36]	; 90028aa8 <__kernel_sinf+0x8c>
90028a84:	eee6 0aa7 	vfma.f32	s1, s13, s15
90028a88:	ee30 0a60 	vsub.f32	s0, s0, s1
90028a8c:	4770      	bx	lr
90028a8e:	bf00      	nop
90028a90:	2f2ec9d3 	.word	0x2f2ec9d3
90028a94:	b2d72f34 	.word	0xb2d72f34
90028a98:	3638ef1b 	.word	0x3638ef1b
90028a9c:	b9500d01 	.word	0xb9500d01
90028aa0:	3c088889 	.word	0x3c088889
90028aa4:	be2aaaab 	.word	0xbe2aaaab
90028aa8:	3e2aaaab 	.word	0x3e2aaaab

90028aac <fabsf>:
90028aac:	ee10 3a10 	vmov	r3, s0
90028ab0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
90028ab4:	ee00 3a10 	vmov	s0, r3
90028ab8:	4770      	bx	lr
	...

90028abc <floorf>:
90028abc:	ee10 3a10 	vmov	r3, s0
90028ac0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
90028ac4:	3a7f      	subs	r2, #127	; 0x7f
90028ac6:	2a16      	cmp	r2, #22
90028ac8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
90028acc:	dc2a      	bgt.n	90028b24 <floorf+0x68>
90028ace:	2a00      	cmp	r2, #0
90028ad0:	da11      	bge.n	90028af6 <floorf+0x3a>
90028ad2:	eddf 7a18 	vldr	s15, [pc, #96]	; 90028b34 <floorf+0x78>
90028ad6:	ee30 0a27 	vadd.f32	s0, s0, s15
90028ada:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
90028ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90028ae2:	dd05      	ble.n	90028af0 <floorf+0x34>
90028ae4:	2b00      	cmp	r3, #0
90028ae6:	da23      	bge.n	90028b30 <floorf+0x74>
90028ae8:	4a13      	ldr	r2, [pc, #76]	; (90028b38 <floorf+0x7c>)
90028aea:	2900      	cmp	r1, #0
90028aec:	bf18      	it	ne
90028aee:	4613      	movne	r3, r2
90028af0:	ee00 3a10 	vmov	s0, r3
90028af4:	4770      	bx	lr
90028af6:	4911      	ldr	r1, [pc, #68]	; (90028b3c <floorf+0x80>)
90028af8:	4111      	asrs	r1, r2
90028afa:	420b      	tst	r3, r1
90028afc:	d0fa      	beq.n	90028af4 <floorf+0x38>
90028afe:	eddf 7a0d 	vldr	s15, [pc, #52]	; 90028b34 <floorf+0x78>
90028b02:	ee30 0a27 	vadd.f32	s0, s0, s15
90028b06:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
90028b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90028b0e:	ddef      	ble.n	90028af0 <floorf+0x34>
90028b10:	2b00      	cmp	r3, #0
90028b12:	bfbe      	ittt	lt
90028b14:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
90028b18:	fa40 f202 	asrlt.w	r2, r0, r2
90028b1c:	189b      	addlt	r3, r3, r2
90028b1e:	ea23 0301 	bic.w	r3, r3, r1
90028b22:	e7e5      	b.n	90028af0 <floorf+0x34>
90028b24:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
90028b28:	d3e4      	bcc.n	90028af4 <floorf+0x38>
90028b2a:	ee30 0a00 	vadd.f32	s0, s0, s0
90028b2e:	4770      	bx	lr
90028b30:	2300      	movs	r3, #0
90028b32:	e7dd      	b.n	90028af0 <floorf+0x34>
90028b34:	7149f2ca 	.word	0x7149f2ca
90028b38:	bf800000 	.word	0xbf800000
90028b3c:	007fffff 	.word	0x007fffff

90028b40 <scalbnf>:
90028b40:	ee10 3a10 	vmov	r3, s0
90028b44:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
90028b48:	d025      	beq.n	90028b96 <scalbnf+0x56>
90028b4a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
90028b4e:	d302      	bcc.n	90028b56 <scalbnf+0x16>
90028b50:	ee30 0a00 	vadd.f32	s0, s0, s0
90028b54:	4770      	bx	lr
90028b56:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
90028b5a:	d122      	bne.n	90028ba2 <scalbnf+0x62>
90028b5c:	4b2a      	ldr	r3, [pc, #168]	; (90028c08 <scalbnf+0xc8>)
90028b5e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 90028c0c <scalbnf+0xcc>
90028b62:	4298      	cmp	r0, r3
90028b64:	ee20 0a27 	vmul.f32	s0, s0, s15
90028b68:	db16      	blt.n	90028b98 <scalbnf+0x58>
90028b6a:	ee10 3a10 	vmov	r3, s0
90028b6e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
90028b72:	3a19      	subs	r2, #25
90028b74:	4402      	add	r2, r0
90028b76:	2afe      	cmp	r2, #254	; 0xfe
90028b78:	dd15      	ble.n	90028ba6 <scalbnf+0x66>
90028b7a:	ee10 3a10 	vmov	r3, s0
90028b7e:	eddf 7a24 	vldr	s15, [pc, #144]	; 90028c10 <scalbnf+0xd0>
90028b82:	eddf 6a24 	vldr	s13, [pc, #144]	; 90028c14 <scalbnf+0xd4>
90028b86:	2b00      	cmp	r3, #0
90028b88:	eeb0 7a67 	vmov.f32	s14, s15
90028b8c:	bfb8      	it	lt
90028b8e:	eef0 7a66 	vmovlt.f32	s15, s13
90028b92:	ee27 0a27 	vmul.f32	s0, s14, s15
90028b96:	4770      	bx	lr
90028b98:	eddf 7a1f 	vldr	s15, [pc, #124]	; 90028c18 <scalbnf+0xd8>
90028b9c:	ee20 0a27 	vmul.f32	s0, s0, s15
90028ba0:	4770      	bx	lr
90028ba2:	0dd2      	lsrs	r2, r2, #23
90028ba4:	e7e6      	b.n	90028b74 <scalbnf+0x34>
90028ba6:	2a00      	cmp	r2, #0
90028ba8:	dd06      	ble.n	90028bb8 <scalbnf+0x78>
90028baa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
90028bae:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
90028bb2:	ee00 3a10 	vmov	s0, r3
90028bb6:	4770      	bx	lr
90028bb8:	f112 0f16 	cmn.w	r2, #22
90028bbc:	da1a      	bge.n	90028bf4 <scalbnf+0xb4>
90028bbe:	f24c 3350 	movw	r3, #50000	; 0xc350
90028bc2:	4298      	cmp	r0, r3
90028bc4:	ee10 3a10 	vmov	r3, s0
90028bc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
90028bcc:	dd0a      	ble.n	90028be4 <scalbnf+0xa4>
90028bce:	ed9f 0a10 	vldr	s0, [pc, #64]	; 90028c10 <scalbnf+0xd0>
90028bd2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 90028c14 <scalbnf+0xd4>
90028bd6:	eef0 7a40 	vmov.f32	s15, s0
90028bda:	2b00      	cmp	r3, #0
90028bdc:	bf18      	it	ne
90028bde:	eeb0 0a47 	vmovne.f32	s0, s14
90028be2:	e7db      	b.n	90028b9c <scalbnf+0x5c>
90028be4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 90028c18 <scalbnf+0xd8>
90028be8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 90028c1c <scalbnf+0xdc>
90028bec:	eef0 7a40 	vmov.f32	s15, s0
90028bf0:	2b00      	cmp	r3, #0
90028bf2:	e7f3      	b.n	90028bdc <scalbnf+0x9c>
90028bf4:	3219      	adds	r2, #25
90028bf6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
90028bfa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
90028bfe:	eddf 7a08 	vldr	s15, [pc, #32]	; 90028c20 <scalbnf+0xe0>
90028c02:	ee07 3a10 	vmov	s14, r3
90028c06:	e7c4      	b.n	90028b92 <scalbnf+0x52>
90028c08:	ffff3cb0 	.word	0xffff3cb0
90028c0c:	4c000000 	.word	0x4c000000
90028c10:	7149f2ca 	.word	0x7149f2ca
90028c14:	f149f2ca 	.word	0xf149f2ca
90028c18:	0da24260 	.word	0x0da24260
90028c1c:	8da24260 	.word	0x8da24260
90028c20:	33000000 	.word	0x33000000

90028c24 <abort>:
90028c24:	b508      	push	{r3, lr}
90028c26:	2006      	movs	r0, #6
90028c28:	f000 fce2 	bl	900295f0 <raise>
90028c2c:	2001      	movs	r0, #1
90028c2e:	f7d9 fd0b 	bl	90002648 <_exit>
	...

90028c34 <__assert_func>:
90028c34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
90028c36:	4614      	mov	r4, r2
90028c38:	461a      	mov	r2, r3
90028c3a:	4b09      	ldr	r3, [pc, #36]	; (90028c60 <__assert_func+0x2c>)
90028c3c:	681b      	ldr	r3, [r3, #0]
90028c3e:	4605      	mov	r5, r0
90028c40:	68d8      	ldr	r0, [r3, #12]
90028c42:	b14c      	cbz	r4, 90028c58 <__assert_func+0x24>
90028c44:	4b07      	ldr	r3, [pc, #28]	; (90028c64 <__assert_func+0x30>)
90028c46:	9100      	str	r1, [sp, #0]
90028c48:	e9cd 3401 	strd	r3, r4, [sp, #4]
90028c4c:	4906      	ldr	r1, [pc, #24]	; (90028c68 <__assert_func+0x34>)
90028c4e:	462b      	mov	r3, r5
90028c50:	f000 f822 	bl	90028c98 <fiprintf>
90028c54:	f7ff ffe6 	bl	90028c24 <abort>
90028c58:	4b04      	ldr	r3, [pc, #16]	; (90028c6c <__assert_func+0x38>)
90028c5a:	461c      	mov	r4, r3
90028c5c:	e7f3      	b.n	90028c46 <__assert_func+0x12>
90028c5e:	bf00      	nop
90028c60:	200000c8 	.word	0x200000c8
90028c64:	90031328 	.word	0x90031328
90028c68:	90031335 	.word	0x90031335
90028c6c:	9002d3e7 	.word	0x9002d3e7

90028c70 <atexit>:
90028c70:	2300      	movs	r3, #0
90028c72:	4601      	mov	r1, r0
90028c74:	461a      	mov	r2, r3
90028c76:	4618      	mov	r0, r3
90028c78:	f000 bdce 	b.w	90029818 <__register_exitproc>

90028c7c <__cxa_atexit>:
90028c7c:	b510      	push	{r4, lr}
90028c7e:	4c05      	ldr	r4, [pc, #20]	; (90028c94 <__cxa_atexit+0x18>)
90028c80:	4613      	mov	r3, r2
90028c82:	b12c      	cbz	r4, 90028c90 <__cxa_atexit+0x14>
90028c84:	460a      	mov	r2, r1
90028c86:	4601      	mov	r1, r0
90028c88:	2002      	movs	r0, #2
90028c8a:	f000 fdc5 	bl	90029818 <__register_exitproc>
90028c8e:	bd10      	pop	{r4, pc}
90028c90:	4620      	mov	r0, r4
90028c92:	e7fc      	b.n	90028c8e <__cxa_atexit+0x12>
90028c94:	90029819 	.word	0x90029819

90028c98 <fiprintf>:
90028c98:	b40e      	push	{r1, r2, r3}
90028c9a:	b503      	push	{r0, r1, lr}
90028c9c:	4601      	mov	r1, r0
90028c9e:	ab03      	add	r3, sp, #12
90028ca0:	4805      	ldr	r0, [pc, #20]	; (90028cb8 <fiprintf+0x20>)
90028ca2:	f853 2b04 	ldr.w	r2, [r3], #4
90028ca6:	6800      	ldr	r0, [r0, #0]
90028ca8:	9301      	str	r3, [sp, #4]
90028caa:	f000 f94d 	bl	90028f48 <_vfiprintf_r>
90028cae:	b002      	add	sp, #8
90028cb0:	f85d eb04 	ldr.w	lr, [sp], #4
90028cb4:	b003      	add	sp, #12
90028cb6:	4770      	bx	lr
90028cb8:	200000c8 	.word	0x200000c8

90028cbc <__libc_init_array>:
90028cbc:	b570      	push	{r4, r5, r6, lr}
90028cbe:	4d0d      	ldr	r5, [pc, #52]	; (90028cf4 <__libc_init_array+0x38>)
90028cc0:	4c0d      	ldr	r4, [pc, #52]	; (90028cf8 <__libc_init_array+0x3c>)
90028cc2:	1b64      	subs	r4, r4, r5
90028cc4:	10a4      	asrs	r4, r4, #2
90028cc6:	2600      	movs	r6, #0
90028cc8:	42a6      	cmp	r6, r4
90028cca:	d109      	bne.n	90028ce0 <__libc_init_array+0x24>
90028ccc:	4d0b      	ldr	r5, [pc, #44]	; (90028cfc <__libc_init_array+0x40>)
90028cce:	4c0c      	ldr	r4, [pc, #48]	; (90028d00 <__libc_init_array+0x44>)
90028cd0:	f001 fa66 	bl	9002a1a0 <_init>
90028cd4:	1b64      	subs	r4, r4, r5
90028cd6:	10a4      	asrs	r4, r4, #2
90028cd8:	2600      	movs	r6, #0
90028cda:	42a6      	cmp	r6, r4
90028cdc:	d105      	bne.n	90028cea <__libc_init_array+0x2e>
90028cde:	bd70      	pop	{r4, r5, r6, pc}
90028ce0:	f855 3b04 	ldr.w	r3, [r5], #4
90028ce4:	4798      	blx	r3
90028ce6:	3601      	adds	r6, #1
90028ce8:	e7ee      	b.n	90028cc8 <__libc_init_array+0xc>
90028cea:	f855 3b04 	ldr.w	r3, [r5], #4
90028cee:	4798      	blx	r3
90028cf0:	3601      	adds	r6, #1
90028cf2:	e7f2      	b.n	90028cda <__libc_init_array+0x1e>
90028cf4:	90031628 	.word	0x90031628
90028cf8:	90031628 	.word	0x90031628
90028cfc:	90031628 	.word	0x90031628
90028d00:	90031640 	.word	0x90031640

90028d04 <malloc>:
90028d04:	4b02      	ldr	r3, [pc, #8]	; (90028d10 <malloc+0xc>)
90028d06:	4601      	mov	r1, r0
90028d08:	6818      	ldr	r0, [r3, #0]
90028d0a:	f000 b899 	b.w	90028e40 <_malloc_r>
90028d0e:	bf00      	nop
90028d10:	200000c8 	.word	0x200000c8

90028d14 <free>:
90028d14:	4b02      	ldr	r3, [pc, #8]	; (90028d20 <free+0xc>)
90028d16:	4601      	mov	r1, r0
90028d18:	6818      	ldr	r0, [r3, #0]
90028d1a:	f000 b841 	b.w	90028da0 <_free_r>
90028d1e:	bf00      	nop
90028d20:	200000c8 	.word	0x200000c8

90028d24 <memcmp>:
90028d24:	b530      	push	{r4, r5, lr}
90028d26:	3901      	subs	r1, #1
90028d28:	2400      	movs	r4, #0
90028d2a:	42a2      	cmp	r2, r4
90028d2c:	d101      	bne.n	90028d32 <memcmp+0xe>
90028d2e:	2000      	movs	r0, #0
90028d30:	e005      	b.n	90028d3e <memcmp+0x1a>
90028d32:	5d03      	ldrb	r3, [r0, r4]
90028d34:	3401      	adds	r4, #1
90028d36:	5d0d      	ldrb	r5, [r1, r4]
90028d38:	42ab      	cmp	r3, r5
90028d3a:	d0f6      	beq.n	90028d2a <memcmp+0x6>
90028d3c:	1b58      	subs	r0, r3, r5
90028d3e:	bd30      	pop	{r4, r5, pc}

90028d40 <memcpy>:
90028d40:	440a      	add	r2, r1
90028d42:	4291      	cmp	r1, r2
90028d44:	f100 33ff 	add.w	r3, r0, #4294967295
90028d48:	d100      	bne.n	90028d4c <memcpy+0xc>
90028d4a:	4770      	bx	lr
90028d4c:	b510      	push	{r4, lr}
90028d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
90028d52:	f803 4f01 	strb.w	r4, [r3, #1]!
90028d56:	4291      	cmp	r1, r2
90028d58:	d1f9      	bne.n	90028d4e <memcpy+0xe>
90028d5a:	bd10      	pop	{r4, pc}

90028d5c <memmove>:
90028d5c:	4288      	cmp	r0, r1
90028d5e:	b510      	push	{r4, lr}
90028d60:	eb01 0402 	add.w	r4, r1, r2
90028d64:	d902      	bls.n	90028d6c <memmove+0x10>
90028d66:	4284      	cmp	r4, r0
90028d68:	4623      	mov	r3, r4
90028d6a:	d807      	bhi.n	90028d7c <memmove+0x20>
90028d6c:	1e43      	subs	r3, r0, #1
90028d6e:	42a1      	cmp	r1, r4
90028d70:	d008      	beq.n	90028d84 <memmove+0x28>
90028d72:	f811 2b01 	ldrb.w	r2, [r1], #1
90028d76:	f803 2f01 	strb.w	r2, [r3, #1]!
90028d7a:	e7f8      	b.n	90028d6e <memmove+0x12>
90028d7c:	4402      	add	r2, r0
90028d7e:	4601      	mov	r1, r0
90028d80:	428a      	cmp	r2, r1
90028d82:	d100      	bne.n	90028d86 <memmove+0x2a>
90028d84:	bd10      	pop	{r4, pc}
90028d86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
90028d8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
90028d8e:	e7f7      	b.n	90028d80 <memmove+0x24>

90028d90 <memset>:
90028d90:	4402      	add	r2, r0
90028d92:	4603      	mov	r3, r0
90028d94:	4293      	cmp	r3, r2
90028d96:	d100      	bne.n	90028d9a <memset+0xa>
90028d98:	4770      	bx	lr
90028d9a:	f803 1b01 	strb.w	r1, [r3], #1
90028d9e:	e7f9      	b.n	90028d94 <memset+0x4>

90028da0 <_free_r>:
90028da0:	b537      	push	{r0, r1, r2, r4, r5, lr}
90028da2:	2900      	cmp	r1, #0
90028da4:	d048      	beq.n	90028e38 <_free_r+0x98>
90028da6:	f851 3c04 	ldr.w	r3, [r1, #-4]
90028daa:	9001      	str	r0, [sp, #4]
90028dac:	2b00      	cmp	r3, #0
90028dae:	f1a1 0404 	sub.w	r4, r1, #4
90028db2:	bfb8      	it	lt
90028db4:	18e4      	addlt	r4, r4, r3
90028db6:	f000 ffb1 	bl	90029d1c <__malloc_lock>
90028dba:	4a20      	ldr	r2, [pc, #128]	; (90028e3c <_free_r+0x9c>)
90028dbc:	9801      	ldr	r0, [sp, #4]
90028dbe:	6813      	ldr	r3, [r2, #0]
90028dc0:	4615      	mov	r5, r2
90028dc2:	b933      	cbnz	r3, 90028dd2 <_free_r+0x32>
90028dc4:	6063      	str	r3, [r4, #4]
90028dc6:	6014      	str	r4, [r2, #0]
90028dc8:	b003      	add	sp, #12
90028dca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
90028dce:	f000 bfab 	b.w	90029d28 <__malloc_unlock>
90028dd2:	42a3      	cmp	r3, r4
90028dd4:	d90b      	bls.n	90028dee <_free_r+0x4e>
90028dd6:	6821      	ldr	r1, [r4, #0]
90028dd8:	1862      	adds	r2, r4, r1
90028dda:	4293      	cmp	r3, r2
90028ddc:	bf04      	itt	eq
90028dde:	681a      	ldreq	r2, [r3, #0]
90028de0:	685b      	ldreq	r3, [r3, #4]
90028de2:	6063      	str	r3, [r4, #4]
90028de4:	bf04      	itt	eq
90028de6:	1852      	addeq	r2, r2, r1
90028de8:	6022      	streq	r2, [r4, #0]
90028dea:	602c      	str	r4, [r5, #0]
90028dec:	e7ec      	b.n	90028dc8 <_free_r+0x28>
90028dee:	461a      	mov	r2, r3
90028df0:	685b      	ldr	r3, [r3, #4]
90028df2:	b10b      	cbz	r3, 90028df8 <_free_r+0x58>
90028df4:	42a3      	cmp	r3, r4
90028df6:	d9fa      	bls.n	90028dee <_free_r+0x4e>
90028df8:	6811      	ldr	r1, [r2, #0]
90028dfa:	1855      	adds	r5, r2, r1
90028dfc:	42a5      	cmp	r5, r4
90028dfe:	d10b      	bne.n	90028e18 <_free_r+0x78>
90028e00:	6824      	ldr	r4, [r4, #0]
90028e02:	4421      	add	r1, r4
90028e04:	1854      	adds	r4, r2, r1
90028e06:	42a3      	cmp	r3, r4
90028e08:	6011      	str	r1, [r2, #0]
90028e0a:	d1dd      	bne.n	90028dc8 <_free_r+0x28>
90028e0c:	681c      	ldr	r4, [r3, #0]
90028e0e:	685b      	ldr	r3, [r3, #4]
90028e10:	6053      	str	r3, [r2, #4]
90028e12:	4421      	add	r1, r4
90028e14:	6011      	str	r1, [r2, #0]
90028e16:	e7d7      	b.n	90028dc8 <_free_r+0x28>
90028e18:	d902      	bls.n	90028e20 <_free_r+0x80>
90028e1a:	230c      	movs	r3, #12
90028e1c:	6003      	str	r3, [r0, #0]
90028e1e:	e7d3      	b.n	90028dc8 <_free_r+0x28>
90028e20:	6825      	ldr	r5, [r4, #0]
90028e22:	1961      	adds	r1, r4, r5
90028e24:	428b      	cmp	r3, r1
90028e26:	bf04      	itt	eq
90028e28:	6819      	ldreq	r1, [r3, #0]
90028e2a:	685b      	ldreq	r3, [r3, #4]
90028e2c:	6063      	str	r3, [r4, #4]
90028e2e:	bf04      	itt	eq
90028e30:	1949      	addeq	r1, r1, r5
90028e32:	6021      	streq	r1, [r4, #0]
90028e34:	6054      	str	r4, [r2, #4]
90028e36:	e7c7      	b.n	90028dc8 <_free_r+0x28>
90028e38:	b003      	add	sp, #12
90028e3a:	bd30      	pop	{r4, r5, pc}
90028e3c:	20026dd8 	.word	0x20026dd8

90028e40 <_malloc_r>:
90028e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90028e42:	1ccd      	adds	r5, r1, #3
90028e44:	f025 0503 	bic.w	r5, r5, #3
90028e48:	3508      	adds	r5, #8
90028e4a:	2d0c      	cmp	r5, #12
90028e4c:	bf38      	it	cc
90028e4e:	250c      	movcc	r5, #12
90028e50:	2d00      	cmp	r5, #0
90028e52:	4606      	mov	r6, r0
90028e54:	db01      	blt.n	90028e5a <_malloc_r+0x1a>
90028e56:	42a9      	cmp	r1, r5
90028e58:	d903      	bls.n	90028e62 <_malloc_r+0x22>
90028e5a:	230c      	movs	r3, #12
90028e5c:	6033      	str	r3, [r6, #0]
90028e5e:	2000      	movs	r0, #0
90028e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90028e62:	f000 ff5b 	bl	90029d1c <__malloc_lock>
90028e66:	4921      	ldr	r1, [pc, #132]	; (90028eec <_malloc_r+0xac>)
90028e68:	680a      	ldr	r2, [r1, #0]
90028e6a:	4614      	mov	r4, r2
90028e6c:	b99c      	cbnz	r4, 90028e96 <_malloc_r+0x56>
90028e6e:	4f20      	ldr	r7, [pc, #128]	; (90028ef0 <_malloc_r+0xb0>)
90028e70:	683b      	ldr	r3, [r7, #0]
90028e72:	b923      	cbnz	r3, 90028e7e <_malloc_r+0x3e>
90028e74:	4621      	mov	r1, r4
90028e76:	4630      	mov	r0, r6
90028e78:	f000 fb82 	bl	90029580 <_sbrk_r>
90028e7c:	6038      	str	r0, [r7, #0]
90028e7e:	4629      	mov	r1, r5
90028e80:	4630      	mov	r0, r6
90028e82:	f000 fb7d 	bl	90029580 <_sbrk_r>
90028e86:	1c43      	adds	r3, r0, #1
90028e88:	d123      	bne.n	90028ed2 <_malloc_r+0x92>
90028e8a:	230c      	movs	r3, #12
90028e8c:	6033      	str	r3, [r6, #0]
90028e8e:	4630      	mov	r0, r6
90028e90:	f000 ff4a 	bl	90029d28 <__malloc_unlock>
90028e94:	e7e3      	b.n	90028e5e <_malloc_r+0x1e>
90028e96:	6823      	ldr	r3, [r4, #0]
90028e98:	1b5b      	subs	r3, r3, r5
90028e9a:	d417      	bmi.n	90028ecc <_malloc_r+0x8c>
90028e9c:	2b0b      	cmp	r3, #11
90028e9e:	d903      	bls.n	90028ea8 <_malloc_r+0x68>
90028ea0:	6023      	str	r3, [r4, #0]
90028ea2:	441c      	add	r4, r3
90028ea4:	6025      	str	r5, [r4, #0]
90028ea6:	e004      	b.n	90028eb2 <_malloc_r+0x72>
90028ea8:	6863      	ldr	r3, [r4, #4]
90028eaa:	42a2      	cmp	r2, r4
90028eac:	bf0c      	ite	eq
90028eae:	600b      	streq	r3, [r1, #0]
90028eb0:	6053      	strne	r3, [r2, #4]
90028eb2:	4630      	mov	r0, r6
90028eb4:	f000 ff38 	bl	90029d28 <__malloc_unlock>
90028eb8:	f104 000b 	add.w	r0, r4, #11
90028ebc:	1d23      	adds	r3, r4, #4
90028ebe:	f020 0007 	bic.w	r0, r0, #7
90028ec2:	1ac2      	subs	r2, r0, r3
90028ec4:	d0cc      	beq.n	90028e60 <_malloc_r+0x20>
90028ec6:	1a1b      	subs	r3, r3, r0
90028ec8:	50a3      	str	r3, [r4, r2]
90028eca:	e7c9      	b.n	90028e60 <_malloc_r+0x20>
90028ecc:	4622      	mov	r2, r4
90028ece:	6864      	ldr	r4, [r4, #4]
90028ed0:	e7cc      	b.n	90028e6c <_malloc_r+0x2c>
90028ed2:	1cc4      	adds	r4, r0, #3
90028ed4:	f024 0403 	bic.w	r4, r4, #3
90028ed8:	42a0      	cmp	r0, r4
90028eda:	d0e3      	beq.n	90028ea4 <_malloc_r+0x64>
90028edc:	1a21      	subs	r1, r4, r0
90028ede:	4630      	mov	r0, r6
90028ee0:	f000 fb4e 	bl	90029580 <_sbrk_r>
90028ee4:	3001      	adds	r0, #1
90028ee6:	d1dd      	bne.n	90028ea4 <_malloc_r+0x64>
90028ee8:	e7cf      	b.n	90028e8a <_malloc_r+0x4a>
90028eea:	bf00      	nop
90028eec:	20026dd8 	.word	0x20026dd8
90028ef0:	20026ddc 	.word	0x20026ddc

90028ef4 <__sfputc_r>:
90028ef4:	6893      	ldr	r3, [r2, #8]
90028ef6:	3b01      	subs	r3, #1
90028ef8:	2b00      	cmp	r3, #0
90028efa:	b410      	push	{r4}
90028efc:	6093      	str	r3, [r2, #8]
90028efe:	da08      	bge.n	90028f12 <__sfputc_r+0x1e>
90028f00:	6994      	ldr	r4, [r2, #24]
90028f02:	42a3      	cmp	r3, r4
90028f04:	db01      	blt.n	90028f0a <__sfputc_r+0x16>
90028f06:	290a      	cmp	r1, #10
90028f08:	d103      	bne.n	90028f12 <__sfputc_r+0x1e>
90028f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
90028f0e:	f000 bbc3 	b.w	90029698 <__swbuf_r>
90028f12:	6813      	ldr	r3, [r2, #0]
90028f14:	1c58      	adds	r0, r3, #1
90028f16:	6010      	str	r0, [r2, #0]
90028f18:	7019      	strb	r1, [r3, #0]
90028f1a:	4608      	mov	r0, r1
90028f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
90028f20:	4770      	bx	lr

90028f22 <__sfputs_r>:
90028f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90028f24:	4606      	mov	r6, r0
90028f26:	460f      	mov	r7, r1
90028f28:	4614      	mov	r4, r2
90028f2a:	18d5      	adds	r5, r2, r3
90028f2c:	42ac      	cmp	r4, r5
90028f2e:	d101      	bne.n	90028f34 <__sfputs_r+0x12>
90028f30:	2000      	movs	r0, #0
90028f32:	e007      	b.n	90028f44 <__sfputs_r+0x22>
90028f34:	f814 1b01 	ldrb.w	r1, [r4], #1
90028f38:	463a      	mov	r2, r7
90028f3a:	4630      	mov	r0, r6
90028f3c:	f7ff ffda 	bl	90028ef4 <__sfputc_r>
90028f40:	1c43      	adds	r3, r0, #1
90028f42:	d1f3      	bne.n	90028f2c <__sfputs_r+0xa>
90028f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

90028f48 <_vfiprintf_r>:
90028f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90028f4c:	460d      	mov	r5, r1
90028f4e:	b09d      	sub	sp, #116	; 0x74
90028f50:	4614      	mov	r4, r2
90028f52:	4698      	mov	r8, r3
90028f54:	4606      	mov	r6, r0
90028f56:	b118      	cbz	r0, 90028f60 <_vfiprintf_r+0x18>
90028f58:	6983      	ldr	r3, [r0, #24]
90028f5a:	b90b      	cbnz	r3, 90028f60 <_vfiprintf_r+0x18>
90028f5c:	f000 fdd8 	bl	90029b10 <__sinit>
90028f60:	4b89      	ldr	r3, [pc, #548]	; (90029188 <_vfiprintf_r+0x240>)
90028f62:	429d      	cmp	r5, r3
90028f64:	d11b      	bne.n	90028f9e <_vfiprintf_r+0x56>
90028f66:	6875      	ldr	r5, [r6, #4]
90028f68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90028f6a:	07d9      	lsls	r1, r3, #31
90028f6c:	d405      	bmi.n	90028f7a <_vfiprintf_r+0x32>
90028f6e:	89ab      	ldrh	r3, [r5, #12]
90028f70:	059a      	lsls	r2, r3, #22
90028f72:	d402      	bmi.n	90028f7a <_vfiprintf_r+0x32>
90028f74:	6da8      	ldr	r0, [r5, #88]	; 0x58
90028f76:	f000 fe69 	bl	90029c4c <__retarget_lock_acquire_recursive>
90028f7a:	89ab      	ldrh	r3, [r5, #12]
90028f7c:	071b      	lsls	r3, r3, #28
90028f7e:	d501      	bpl.n	90028f84 <_vfiprintf_r+0x3c>
90028f80:	692b      	ldr	r3, [r5, #16]
90028f82:	b9eb      	cbnz	r3, 90028fc0 <_vfiprintf_r+0x78>
90028f84:	4629      	mov	r1, r5
90028f86:	4630      	mov	r0, r6
90028f88:	f000 fbd8 	bl	9002973c <__swsetup_r>
90028f8c:	b1c0      	cbz	r0, 90028fc0 <_vfiprintf_r+0x78>
90028f8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90028f90:	07dc      	lsls	r4, r3, #31
90028f92:	d50e      	bpl.n	90028fb2 <_vfiprintf_r+0x6a>
90028f94:	f04f 30ff 	mov.w	r0, #4294967295
90028f98:	b01d      	add	sp, #116	; 0x74
90028f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90028f9e:	4b7b      	ldr	r3, [pc, #492]	; (9002918c <_vfiprintf_r+0x244>)
90028fa0:	429d      	cmp	r5, r3
90028fa2:	d101      	bne.n	90028fa8 <_vfiprintf_r+0x60>
90028fa4:	68b5      	ldr	r5, [r6, #8]
90028fa6:	e7df      	b.n	90028f68 <_vfiprintf_r+0x20>
90028fa8:	4b79      	ldr	r3, [pc, #484]	; (90029190 <_vfiprintf_r+0x248>)
90028faa:	429d      	cmp	r5, r3
90028fac:	bf08      	it	eq
90028fae:	68f5      	ldreq	r5, [r6, #12]
90028fb0:	e7da      	b.n	90028f68 <_vfiprintf_r+0x20>
90028fb2:	89ab      	ldrh	r3, [r5, #12]
90028fb4:	0598      	lsls	r0, r3, #22
90028fb6:	d4ed      	bmi.n	90028f94 <_vfiprintf_r+0x4c>
90028fb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
90028fba:	f000 fe49 	bl	90029c50 <__retarget_lock_release_recursive>
90028fbe:	e7e9      	b.n	90028f94 <_vfiprintf_r+0x4c>
90028fc0:	2300      	movs	r3, #0
90028fc2:	9309      	str	r3, [sp, #36]	; 0x24
90028fc4:	2320      	movs	r3, #32
90028fc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
90028fca:	f8cd 800c 	str.w	r8, [sp, #12]
90028fce:	2330      	movs	r3, #48	; 0x30
90028fd0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 90029194 <_vfiprintf_r+0x24c>
90028fd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
90028fd8:	f04f 0901 	mov.w	r9, #1
90028fdc:	4623      	mov	r3, r4
90028fde:	469a      	mov	sl, r3
90028fe0:	f813 2b01 	ldrb.w	r2, [r3], #1
90028fe4:	b10a      	cbz	r2, 90028fea <_vfiprintf_r+0xa2>
90028fe6:	2a25      	cmp	r2, #37	; 0x25
90028fe8:	d1f9      	bne.n	90028fde <_vfiprintf_r+0x96>
90028fea:	ebba 0b04 	subs.w	fp, sl, r4
90028fee:	d00b      	beq.n	90029008 <_vfiprintf_r+0xc0>
90028ff0:	465b      	mov	r3, fp
90028ff2:	4622      	mov	r2, r4
90028ff4:	4629      	mov	r1, r5
90028ff6:	4630      	mov	r0, r6
90028ff8:	f7ff ff93 	bl	90028f22 <__sfputs_r>
90028ffc:	3001      	adds	r0, #1
90028ffe:	f000 80aa 	beq.w	90029156 <_vfiprintf_r+0x20e>
90029002:	9a09      	ldr	r2, [sp, #36]	; 0x24
90029004:	445a      	add	r2, fp
90029006:	9209      	str	r2, [sp, #36]	; 0x24
90029008:	f89a 3000 	ldrb.w	r3, [sl]
9002900c:	2b00      	cmp	r3, #0
9002900e:	f000 80a2 	beq.w	90029156 <_vfiprintf_r+0x20e>
90029012:	2300      	movs	r3, #0
90029014:	f04f 32ff 	mov.w	r2, #4294967295
90029018:	e9cd 2305 	strd	r2, r3, [sp, #20]
9002901c:	f10a 0a01 	add.w	sl, sl, #1
90029020:	9304      	str	r3, [sp, #16]
90029022:	9307      	str	r3, [sp, #28]
90029024:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
90029028:	931a      	str	r3, [sp, #104]	; 0x68
9002902a:	4654      	mov	r4, sl
9002902c:	2205      	movs	r2, #5
9002902e:	f814 1b01 	ldrb.w	r1, [r4], #1
90029032:	4858      	ldr	r0, [pc, #352]	; (90029194 <_vfiprintf_r+0x24c>)
90029034:	f7d7 f8f4 	bl	90000220 <memchr>
90029038:	9a04      	ldr	r2, [sp, #16]
9002903a:	b9d8      	cbnz	r0, 90029074 <_vfiprintf_r+0x12c>
9002903c:	06d1      	lsls	r1, r2, #27
9002903e:	bf44      	itt	mi
90029040:	2320      	movmi	r3, #32
90029042:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90029046:	0713      	lsls	r3, r2, #28
90029048:	bf44      	itt	mi
9002904a:	232b      	movmi	r3, #43	; 0x2b
9002904c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90029050:	f89a 3000 	ldrb.w	r3, [sl]
90029054:	2b2a      	cmp	r3, #42	; 0x2a
90029056:	d015      	beq.n	90029084 <_vfiprintf_r+0x13c>
90029058:	9a07      	ldr	r2, [sp, #28]
9002905a:	4654      	mov	r4, sl
9002905c:	2000      	movs	r0, #0
9002905e:	f04f 0c0a 	mov.w	ip, #10
90029062:	4621      	mov	r1, r4
90029064:	f811 3b01 	ldrb.w	r3, [r1], #1
90029068:	3b30      	subs	r3, #48	; 0x30
9002906a:	2b09      	cmp	r3, #9
9002906c:	d94e      	bls.n	9002910c <_vfiprintf_r+0x1c4>
9002906e:	b1b0      	cbz	r0, 9002909e <_vfiprintf_r+0x156>
90029070:	9207      	str	r2, [sp, #28]
90029072:	e014      	b.n	9002909e <_vfiprintf_r+0x156>
90029074:	eba0 0308 	sub.w	r3, r0, r8
90029078:	fa09 f303 	lsl.w	r3, r9, r3
9002907c:	4313      	orrs	r3, r2
9002907e:	9304      	str	r3, [sp, #16]
90029080:	46a2      	mov	sl, r4
90029082:	e7d2      	b.n	9002902a <_vfiprintf_r+0xe2>
90029084:	9b03      	ldr	r3, [sp, #12]
90029086:	1d19      	adds	r1, r3, #4
90029088:	681b      	ldr	r3, [r3, #0]
9002908a:	9103      	str	r1, [sp, #12]
9002908c:	2b00      	cmp	r3, #0
9002908e:	bfbb      	ittet	lt
90029090:	425b      	neglt	r3, r3
90029092:	f042 0202 	orrlt.w	r2, r2, #2
90029096:	9307      	strge	r3, [sp, #28]
90029098:	9307      	strlt	r3, [sp, #28]
9002909a:	bfb8      	it	lt
9002909c:	9204      	strlt	r2, [sp, #16]
9002909e:	7823      	ldrb	r3, [r4, #0]
900290a0:	2b2e      	cmp	r3, #46	; 0x2e
900290a2:	d10c      	bne.n	900290be <_vfiprintf_r+0x176>
900290a4:	7863      	ldrb	r3, [r4, #1]
900290a6:	2b2a      	cmp	r3, #42	; 0x2a
900290a8:	d135      	bne.n	90029116 <_vfiprintf_r+0x1ce>
900290aa:	9b03      	ldr	r3, [sp, #12]
900290ac:	1d1a      	adds	r2, r3, #4
900290ae:	681b      	ldr	r3, [r3, #0]
900290b0:	9203      	str	r2, [sp, #12]
900290b2:	2b00      	cmp	r3, #0
900290b4:	bfb8      	it	lt
900290b6:	f04f 33ff 	movlt.w	r3, #4294967295
900290ba:	3402      	adds	r4, #2
900290bc:	9305      	str	r3, [sp, #20]
900290be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 900291a4 <_vfiprintf_r+0x25c>
900290c2:	7821      	ldrb	r1, [r4, #0]
900290c4:	2203      	movs	r2, #3
900290c6:	4650      	mov	r0, sl
900290c8:	f7d7 f8aa 	bl	90000220 <memchr>
900290cc:	b140      	cbz	r0, 900290e0 <_vfiprintf_r+0x198>
900290ce:	2340      	movs	r3, #64	; 0x40
900290d0:	eba0 000a 	sub.w	r0, r0, sl
900290d4:	fa03 f000 	lsl.w	r0, r3, r0
900290d8:	9b04      	ldr	r3, [sp, #16]
900290da:	4303      	orrs	r3, r0
900290dc:	3401      	adds	r4, #1
900290de:	9304      	str	r3, [sp, #16]
900290e0:	f814 1b01 	ldrb.w	r1, [r4], #1
900290e4:	482c      	ldr	r0, [pc, #176]	; (90029198 <_vfiprintf_r+0x250>)
900290e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
900290ea:	2206      	movs	r2, #6
900290ec:	f7d7 f898 	bl	90000220 <memchr>
900290f0:	2800      	cmp	r0, #0
900290f2:	d03f      	beq.n	90029174 <_vfiprintf_r+0x22c>
900290f4:	4b29      	ldr	r3, [pc, #164]	; (9002919c <_vfiprintf_r+0x254>)
900290f6:	bb1b      	cbnz	r3, 90029140 <_vfiprintf_r+0x1f8>
900290f8:	9b03      	ldr	r3, [sp, #12]
900290fa:	3307      	adds	r3, #7
900290fc:	f023 0307 	bic.w	r3, r3, #7
90029100:	3308      	adds	r3, #8
90029102:	9303      	str	r3, [sp, #12]
90029104:	9b09      	ldr	r3, [sp, #36]	; 0x24
90029106:	443b      	add	r3, r7
90029108:	9309      	str	r3, [sp, #36]	; 0x24
9002910a:	e767      	b.n	90028fdc <_vfiprintf_r+0x94>
9002910c:	fb0c 3202 	mla	r2, ip, r2, r3
90029110:	460c      	mov	r4, r1
90029112:	2001      	movs	r0, #1
90029114:	e7a5      	b.n	90029062 <_vfiprintf_r+0x11a>
90029116:	2300      	movs	r3, #0
90029118:	3401      	adds	r4, #1
9002911a:	9305      	str	r3, [sp, #20]
9002911c:	4619      	mov	r1, r3
9002911e:	f04f 0c0a 	mov.w	ip, #10
90029122:	4620      	mov	r0, r4
90029124:	f810 2b01 	ldrb.w	r2, [r0], #1
90029128:	3a30      	subs	r2, #48	; 0x30
9002912a:	2a09      	cmp	r2, #9
9002912c:	d903      	bls.n	90029136 <_vfiprintf_r+0x1ee>
9002912e:	2b00      	cmp	r3, #0
90029130:	d0c5      	beq.n	900290be <_vfiprintf_r+0x176>
90029132:	9105      	str	r1, [sp, #20]
90029134:	e7c3      	b.n	900290be <_vfiprintf_r+0x176>
90029136:	fb0c 2101 	mla	r1, ip, r1, r2
9002913a:	4604      	mov	r4, r0
9002913c:	2301      	movs	r3, #1
9002913e:	e7f0      	b.n	90029122 <_vfiprintf_r+0x1da>
90029140:	ab03      	add	r3, sp, #12
90029142:	9300      	str	r3, [sp, #0]
90029144:	462a      	mov	r2, r5
90029146:	4b16      	ldr	r3, [pc, #88]	; (900291a0 <_vfiprintf_r+0x258>)
90029148:	a904      	add	r1, sp, #16
9002914a:	4630      	mov	r0, r6
9002914c:	f3af 8000 	nop.w
90029150:	4607      	mov	r7, r0
90029152:	1c78      	adds	r0, r7, #1
90029154:	d1d6      	bne.n	90029104 <_vfiprintf_r+0x1bc>
90029156:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90029158:	07d9      	lsls	r1, r3, #31
9002915a:	d405      	bmi.n	90029168 <_vfiprintf_r+0x220>
9002915c:	89ab      	ldrh	r3, [r5, #12]
9002915e:	059a      	lsls	r2, r3, #22
90029160:	d402      	bmi.n	90029168 <_vfiprintf_r+0x220>
90029162:	6da8      	ldr	r0, [r5, #88]	; 0x58
90029164:	f000 fd74 	bl	90029c50 <__retarget_lock_release_recursive>
90029168:	89ab      	ldrh	r3, [r5, #12]
9002916a:	065b      	lsls	r3, r3, #25
9002916c:	f53f af12 	bmi.w	90028f94 <_vfiprintf_r+0x4c>
90029170:	9809      	ldr	r0, [sp, #36]	; 0x24
90029172:	e711      	b.n	90028f98 <_vfiprintf_r+0x50>
90029174:	ab03      	add	r3, sp, #12
90029176:	9300      	str	r3, [sp, #0]
90029178:	462a      	mov	r2, r5
9002917a:	4b09      	ldr	r3, [pc, #36]	; (900291a0 <_vfiprintf_r+0x258>)
9002917c:	a904      	add	r1, sp, #16
9002917e:	4630      	mov	r0, r6
90029180:	f000 f880 	bl	90029284 <_printf_i>
90029184:	e7e4      	b.n	90029150 <_vfiprintf_r+0x208>
90029186:	bf00      	nop
90029188:	90031438 	.word	0x90031438
9002918c:	90031458 	.word	0x90031458
90029190:	90031418 	.word	0x90031418
90029194:	90031368 	.word	0x90031368
90029198:	90031372 	.word	0x90031372
9002919c:	00000000 	.word	0x00000000
900291a0:	90028f23 	.word	0x90028f23
900291a4:	9003136e 	.word	0x9003136e

900291a8 <_printf_common>:
900291a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900291ac:	4616      	mov	r6, r2
900291ae:	4699      	mov	r9, r3
900291b0:	688a      	ldr	r2, [r1, #8]
900291b2:	690b      	ldr	r3, [r1, #16]
900291b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
900291b8:	4293      	cmp	r3, r2
900291ba:	bfb8      	it	lt
900291bc:	4613      	movlt	r3, r2
900291be:	6033      	str	r3, [r6, #0]
900291c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
900291c4:	4607      	mov	r7, r0
900291c6:	460c      	mov	r4, r1
900291c8:	b10a      	cbz	r2, 900291ce <_printf_common+0x26>
900291ca:	3301      	adds	r3, #1
900291cc:	6033      	str	r3, [r6, #0]
900291ce:	6823      	ldr	r3, [r4, #0]
900291d0:	0699      	lsls	r1, r3, #26
900291d2:	bf42      	ittt	mi
900291d4:	6833      	ldrmi	r3, [r6, #0]
900291d6:	3302      	addmi	r3, #2
900291d8:	6033      	strmi	r3, [r6, #0]
900291da:	6825      	ldr	r5, [r4, #0]
900291dc:	f015 0506 	ands.w	r5, r5, #6
900291e0:	d106      	bne.n	900291f0 <_printf_common+0x48>
900291e2:	f104 0a19 	add.w	sl, r4, #25
900291e6:	68e3      	ldr	r3, [r4, #12]
900291e8:	6832      	ldr	r2, [r6, #0]
900291ea:	1a9b      	subs	r3, r3, r2
900291ec:	42ab      	cmp	r3, r5
900291ee:	dc26      	bgt.n	9002923e <_printf_common+0x96>
900291f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
900291f4:	1e13      	subs	r3, r2, #0
900291f6:	6822      	ldr	r2, [r4, #0]
900291f8:	bf18      	it	ne
900291fa:	2301      	movne	r3, #1
900291fc:	0692      	lsls	r2, r2, #26
900291fe:	d42b      	bmi.n	90029258 <_printf_common+0xb0>
90029200:	f104 0243 	add.w	r2, r4, #67	; 0x43
90029204:	4649      	mov	r1, r9
90029206:	4638      	mov	r0, r7
90029208:	47c0      	blx	r8
9002920a:	3001      	adds	r0, #1
9002920c:	d01e      	beq.n	9002924c <_printf_common+0xa4>
9002920e:	6823      	ldr	r3, [r4, #0]
90029210:	68e5      	ldr	r5, [r4, #12]
90029212:	6832      	ldr	r2, [r6, #0]
90029214:	f003 0306 	and.w	r3, r3, #6
90029218:	2b04      	cmp	r3, #4
9002921a:	bf08      	it	eq
9002921c:	1aad      	subeq	r5, r5, r2
9002921e:	68a3      	ldr	r3, [r4, #8]
90029220:	6922      	ldr	r2, [r4, #16]
90029222:	bf0c      	ite	eq
90029224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
90029228:	2500      	movne	r5, #0
9002922a:	4293      	cmp	r3, r2
9002922c:	bfc4      	itt	gt
9002922e:	1a9b      	subgt	r3, r3, r2
90029230:	18ed      	addgt	r5, r5, r3
90029232:	2600      	movs	r6, #0
90029234:	341a      	adds	r4, #26
90029236:	42b5      	cmp	r5, r6
90029238:	d11a      	bne.n	90029270 <_printf_common+0xc8>
9002923a:	2000      	movs	r0, #0
9002923c:	e008      	b.n	90029250 <_printf_common+0xa8>
9002923e:	2301      	movs	r3, #1
90029240:	4652      	mov	r2, sl
90029242:	4649      	mov	r1, r9
90029244:	4638      	mov	r0, r7
90029246:	47c0      	blx	r8
90029248:	3001      	adds	r0, #1
9002924a:	d103      	bne.n	90029254 <_printf_common+0xac>
9002924c:	f04f 30ff 	mov.w	r0, #4294967295
90029250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90029254:	3501      	adds	r5, #1
90029256:	e7c6      	b.n	900291e6 <_printf_common+0x3e>
90029258:	18e1      	adds	r1, r4, r3
9002925a:	1c5a      	adds	r2, r3, #1
9002925c:	2030      	movs	r0, #48	; 0x30
9002925e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
90029262:	4422      	add	r2, r4
90029264:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
90029268:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
9002926c:	3302      	adds	r3, #2
9002926e:	e7c7      	b.n	90029200 <_printf_common+0x58>
90029270:	2301      	movs	r3, #1
90029272:	4622      	mov	r2, r4
90029274:	4649      	mov	r1, r9
90029276:	4638      	mov	r0, r7
90029278:	47c0      	blx	r8
9002927a:	3001      	adds	r0, #1
9002927c:	d0e6      	beq.n	9002924c <_printf_common+0xa4>
9002927e:	3601      	adds	r6, #1
90029280:	e7d9      	b.n	90029236 <_printf_common+0x8e>
	...

90029284 <_printf_i>:
90029284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
90029288:	460c      	mov	r4, r1
9002928a:	4691      	mov	r9, r2
9002928c:	7e27      	ldrb	r7, [r4, #24]
9002928e:	990c      	ldr	r1, [sp, #48]	; 0x30
90029290:	2f78      	cmp	r7, #120	; 0x78
90029292:	4680      	mov	r8, r0
90029294:	469a      	mov	sl, r3
90029296:	f104 0243 	add.w	r2, r4, #67	; 0x43
9002929a:	d807      	bhi.n	900292ac <_printf_i+0x28>
9002929c:	2f62      	cmp	r7, #98	; 0x62
9002929e:	d80a      	bhi.n	900292b6 <_printf_i+0x32>
900292a0:	2f00      	cmp	r7, #0
900292a2:	f000 80d8 	beq.w	90029456 <_printf_i+0x1d2>
900292a6:	2f58      	cmp	r7, #88	; 0x58
900292a8:	f000 80a3 	beq.w	900293f2 <_printf_i+0x16e>
900292ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
900292b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
900292b4:	e03a      	b.n	9002932c <_printf_i+0xa8>
900292b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
900292ba:	2b15      	cmp	r3, #21
900292bc:	d8f6      	bhi.n	900292ac <_printf_i+0x28>
900292be:	a001      	add	r0, pc, #4	; (adr r0, 900292c4 <_printf_i+0x40>)
900292c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
900292c4:	9002931d 	.word	0x9002931d
900292c8:	90029331 	.word	0x90029331
900292cc:	900292ad 	.word	0x900292ad
900292d0:	900292ad 	.word	0x900292ad
900292d4:	900292ad 	.word	0x900292ad
900292d8:	900292ad 	.word	0x900292ad
900292dc:	90029331 	.word	0x90029331
900292e0:	900292ad 	.word	0x900292ad
900292e4:	900292ad 	.word	0x900292ad
900292e8:	900292ad 	.word	0x900292ad
900292ec:	900292ad 	.word	0x900292ad
900292f0:	9002943d 	.word	0x9002943d
900292f4:	90029361 	.word	0x90029361
900292f8:	9002941f 	.word	0x9002941f
900292fc:	900292ad 	.word	0x900292ad
90029300:	900292ad 	.word	0x900292ad
90029304:	9002945f 	.word	0x9002945f
90029308:	900292ad 	.word	0x900292ad
9002930c:	90029361 	.word	0x90029361
90029310:	900292ad 	.word	0x900292ad
90029314:	900292ad 	.word	0x900292ad
90029318:	90029427 	.word	0x90029427
9002931c:	680b      	ldr	r3, [r1, #0]
9002931e:	1d1a      	adds	r2, r3, #4
90029320:	681b      	ldr	r3, [r3, #0]
90029322:	600a      	str	r2, [r1, #0]
90029324:	f104 0642 	add.w	r6, r4, #66	; 0x42
90029328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9002932c:	2301      	movs	r3, #1
9002932e:	e0a3      	b.n	90029478 <_printf_i+0x1f4>
90029330:	6825      	ldr	r5, [r4, #0]
90029332:	6808      	ldr	r0, [r1, #0]
90029334:	062e      	lsls	r6, r5, #24
90029336:	f100 0304 	add.w	r3, r0, #4
9002933a:	d50a      	bpl.n	90029352 <_printf_i+0xce>
9002933c:	6805      	ldr	r5, [r0, #0]
9002933e:	600b      	str	r3, [r1, #0]
90029340:	2d00      	cmp	r5, #0
90029342:	da03      	bge.n	9002934c <_printf_i+0xc8>
90029344:	232d      	movs	r3, #45	; 0x2d
90029346:	426d      	negs	r5, r5
90029348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
9002934c:	485e      	ldr	r0, [pc, #376]	; (900294c8 <_printf_i+0x244>)
9002934e:	230a      	movs	r3, #10
90029350:	e019      	b.n	90029386 <_printf_i+0x102>
90029352:	f015 0f40 	tst.w	r5, #64	; 0x40
90029356:	6805      	ldr	r5, [r0, #0]
90029358:	600b      	str	r3, [r1, #0]
9002935a:	bf18      	it	ne
9002935c:	b22d      	sxthne	r5, r5
9002935e:	e7ef      	b.n	90029340 <_printf_i+0xbc>
90029360:	680b      	ldr	r3, [r1, #0]
90029362:	6825      	ldr	r5, [r4, #0]
90029364:	1d18      	adds	r0, r3, #4
90029366:	6008      	str	r0, [r1, #0]
90029368:	0628      	lsls	r0, r5, #24
9002936a:	d501      	bpl.n	90029370 <_printf_i+0xec>
9002936c:	681d      	ldr	r5, [r3, #0]
9002936e:	e002      	b.n	90029376 <_printf_i+0xf2>
90029370:	0669      	lsls	r1, r5, #25
90029372:	d5fb      	bpl.n	9002936c <_printf_i+0xe8>
90029374:	881d      	ldrh	r5, [r3, #0]
90029376:	4854      	ldr	r0, [pc, #336]	; (900294c8 <_printf_i+0x244>)
90029378:	2f6f      	cmp	r7, #111	; 0x6f
9002937a:	bf0c      	ite	eq
9002937c:	2308      	moveq	r3, #8
9002937e:	230a      	movne	r3, #10
90029380:	2100      	movs	r1, #0
90029382:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
90029386:	6866      	ldr	r6, [r4, #4]
90029388:	60a6      	str	r6, [r4, #8]
9002938a:	2e00      	cmp	r6, #0
9002938c:	bfa2      	ittt	ge
9002938e:	6821      	ldrge	r1, [r4, #0]
90029390:	f021 0104 	bicge.w	r1, r1, #4
90029394:	6021      	strge	r1, [r4, #0]
90029396:	b90d      	cbnz	r5, 9002939c <_printf_i+0x118>
90029398:	2e00      	cmp	r6, #0
9002939a:	d04d      	beq.n	90029438 <_printf_i+0x1b4>
9002939c:	4616      	mov	r6, r2
9002939e:	fbb5 f1f3 	udiv	r1, r5, r3
900293a2:	fb03 5711 	mls	r7, r3, r1, r5
900293a6:	5dc7      	ldrb	r7, [r0, r7]
900293a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
900293ac:	462f      	mov	r7, r5
900293ae:	42bb      	cmp	r3, r7
900293b0:	460d      	mov	r5, r1
900293b2:	d9f4      	bls.n	9002939e <_printf_i+0x11a>
900293b4:	2b08      	cmp	r3, #8
900293b6:	d10b      	bne.n	900293d0 <_printf_i+0x14c>
900293b8:	6823      	ldr	r3, [r4, #0]
900293ba:	07df      	lsls	r7, r3, #31
900293bc:	d508      	bpl.n	900293d0 <_printf_i+0x14c>
900293be:	6923      	ldr	r3, [r4, #16]
900293c0:	6861      	ldr	r1, [r4, #4]
900293c2:	4299      	cmp	r1, r3
900293c4:	bfde      	ittt	le
900293c6:	2330      	movle	r3, #48	; 0x30
900293c8:	f806 3c01 	strble.w	r3, [r6, #-1]
900293cc:	f106 36ff 	addle.w	r6, r6, #4294967295
900293d0:	1b92      	subs	r2, r2, r6
900293d2:	6122      	str	r2, [r4, #16]
900293d4:	f8cd a000 	str.w	sl, [sp]
900293d8:	464b      	mov	r3, r9
900293da:	aa03      	add	r2, sp, #12
900293dc:	4621      	mov	r1, r4
900293de:	4640      	mov	r0, r8
900293e0:	f7ff fee2 	bl	900291a8 <_printf_common>
900293e4:	3001      	adds	r0, #1
900293e6:	d14c      	bne.n	90029482 <_printf_i+0x1fe>
900293e8:	f04f 30ff 	mov.w	r0, #4294967295
900293ec:	b004      	add	sp, #16
900293ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900293f2:	4835      	ldr	r0, [pc, #212]	; (900294c8 <_printf_i+0x244>)
900293f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
900293f8:	6823      	ldr	r3, [r4, #0]
900293fa:	680e      	ldr	r6, [r1, #0]
900293fc:	061f      	lsls	r7, r3, #24
900293fe:	f856 5b04 	ldr.w	r5, [r6], #4
90029402:	600e      	str	r6, [r1, #0]
90029404:	d514      	bpl.n	90029430 <_printf_i+0x1ac>
90029406:	07d9      	lsls	r1, r3, #31
90029408:	bf44      	itt	mi
9002940a:	f043 0320 	orrmi.w	r3, r3, #32
9002940e:	6023      	strmi	r3, [r4, #0]
90029410:	b91d      	cbnz	r5, 9002941a <_printf_i+0x196>
90029412:	6823      	ldr	r3, [r4, #0]
90029414:	f023 0320 	bic.w	r3, r3, #32
90029418:	6023      	str	r3, [r4, #0]
9002941a:	2310      	movs	r3, #16
9002941c:	e7b0      	b.n	90029380 <_printf_i+0xfc>
9002941e:	6823      	ldr	r3, [r4, #0]
90029420:	f043 0320 	orr.w	r3, r3, #32
90029424:	6023      	str	r3, [r4, #0]
90029426:	2378      	movs	r3, #120	; 0x78
90029428:	4828      	ldr	r0, [pc, #160]	; (900294cc <_printf_i+0x248>)
9002942a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9002942e:	e7e3      	b.n	900293f8 <_printf_i+0x174>
90029430:	065e      	lsls	r6, r3, #25
90029432:	bf48      	it	mi
90029434:	b2ad      	uxthmi	r5, r5
90029436:	e7e6      	b.n	90029406 <_printf_i+0x182>
90029438:	4616      	mov	r6, r2
9002943a:	e7bb      	b.n	900293b4 <_printf_i+0x130>
9002943c:	680b      	ldr	r3, [r1, #0]
9002943e:	6826      	ldr	r6, [r4, #0]
90029440:	6960      	ldr	r0, [r4, #20]
90029442:	1d1d      	adds	r5, r3, #4
90029444:	600d      	str	r5, [r1, #0]
90029446:	0635      	lsls	r5, r6, #24
90029448:	681b      	ldr	r3, [r3, #0]
9002944a:	d501      	bpl.n	90029450 <_printf_i+0x1cc>
9002944c:	6018      	str	r0, [r3, #0]
9002944e:	e002      	b.n	90029456 <_printf_i+0x1d2>
90029450:	0671      	lsls	r1, r6, #25
90029452:	d5fb      	bpl.n	9002944c <_printf_i+0x1c8>
90029454:	8018      	strh	r0, [r3, #0]
90029456:	2300      	movs	r3, #0
90029458:	6123      	str	r3, [r4, #16]
9002945a:	4616      	mov	r6, r2
9002945c:	e7ba      	b.n	900293d4 <_printf_i+0x150>
9002945e:	680b      	ldr	r3, [r1, #0]
90029460:	1d1a      	adds	r2, r3, #4
90029462:	600a      	str	r2, [r1, #0]
90029464:	681e      	ldr	r6, [r3, #0]
90029466:	6862      	ldr	r2, [r4, #4]
90029468:	2100      	movs	r1, #0
9002946a:	4630      	mov	r0, r6
9002946c:	f7d6 fed8 	bl	90000220 <memchr>
90029470:	b108      	cbz	r0, 90029476 <_printf_i+0x1f2>
90029472:	1b80      	subs	r0, r0, r6
90029474:	6060      	str	r0, [r4, #4]
90029476:	6863      	ldr	r3, [r4, #4]
90029478:	6123      	str	r3, [r4, #16]
9002947a:	2300      	movs	r3, #0
9002947c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90029480:	e7a8      	b.n	900293d4 <_printf_i+0x150>
90029482:	6923      	ldr	r3, [r4, #16]
90029484:	4632      	mov	r2, r6
90029486:	4649      	mov	r1, r9
90029488:	4640      	mov	r0, r8
9002948a:	47d0      	blx	sl
9002948c:	3001      	adds	r0, #1
9002948e:	d0ab      	beq.n	900293e8 <_printf_i+0x164>
90029490:	6823      	ldr	r3, [r4, #0]
90029492:	079b      	lsls	r3, r3, #30
90029494:	d413      	bmi.n	900294be <_printf_i+0x23a>
90029496:	68e0      	ldr	r0, [r4, #12]
90029498:	9b03      	ldr	r3, [sp, #12]
9002949a:	4298      	cmp	r0, r3
9002949c:	bfb8      	it	lt
9002949e:	4618      	movlt	r0, r3
900294a0:	e7a4      	b.n	900293ec <_printf_i+0x168>
900294a2:	2301      	movs	r3, #1
900294a4:	4632      	mov	r2, r6
900294a6:	4649      	mov	r1, r9
900294a8:	4640      	mov	r0, r8
900294aa:	47d0      	blx	sl
900294ac:	3001      	adds	r0, #1
900294ae:	d09b      	beq.n	900293e8 <_printf_i+0x164>
900294b0:	3501      	adds	r5, #1
900294b2:	68e3      	ldr	r3, [r4, #12]
900294b4:	9903      	ldr	r1, [sp, #12]
900294b6:	1a5b      	subs	r3, r3, r1
900294b8:	42ab      	cmp	r3, r5
900294ba:	dcf2      	bgt.n	900294a2 <_printf_i+0x21e>
900294bc:	e7eb      	b.n	90029496 <_printf_i+0x212>
900294be:	2500      	movs	r5, #0
900294c0:	f104 0619 	add.w	r6, r4, #25
900294c4:	e7f5      	b.n	900294b2 <_printf_i+0x22e>
900294c6:	bf00      	nop
900294c8:	90031379 	.word	0x90031379
900294cc:	9003138a 	.word	0x9003138a

900294d0 <iprintf>:
900294d0:	b40f      	push	{r0, r1, r2, r3}
900294d2:	4b0a      	ldr	r3, [pc, #40]	; (900294fc <iprintf+0x2c>)
900294d4:	b513      	push	{r0, r1, r4, lr}
900294d6:	681c      	ldr	r4, [r3, #0]
900294d8:	b124      	cbz	r4, 900294e4 <iprintf+0x14>
900294da:	69a3      	ldr	r3, [r4, #24]
900294dc:	b913      	cbnz	r3, 900294e4 <iprintf+0x14>
900294de:	4620      	mov	r0, r4
900294e0:	f000 fb16 	bl	90029b10 <__sinit>
900294e4:	ab05      	add	r3, sp, #20
900294e6:	9a04      	ldr	r2, [sp, #16]
900294e8:	68a1      	ldr	r1, [r4, #8]
900294ea:	9301      	str	r3, [sp, #4]
900294ec:	4620      	mov	r0, r4
900294ee:	f7ff fd2b 	bl	90028f48 <_vfiprintf_r>
900294f2:	b002      	add	sp, #8
900294f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900294f8:	b004      	add	sp, #16
900294fa:	4770      	bx	lr
900294fc:	200000c8 	.word	0x200000c8

90029500 <rand>:
90029500:	4b17      	ldr	r3, [pc, #92]	; (90029560 <rand+0x60>)
90029502:	b510      	push	{r4, lr}
90029504:	681c      	ldr	r4, [r3, #0]
90029506:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90029508:	b9b3      	cbnz	r3, 90029538 <rand+0x38>
9002950a:	2018      	movs	r0, #24
9002950c:	f7ff fbfa 	bl	90028d04 <malloc>
90029510:	63a0      	str	r0, [r4, #56]	; 0x38
90029512:	b928      	cbnz	r0, 90029520 <rand+0x20>
90029514:	4602      	mov	r2, r0
90029516:	4b13      	ldr	r3, [pc, #76]	; (90029564 <rand+0x64>)
90029518:	4813      	ldr	r0, [pc, #76]	; (90029568 <rand+0x68>)
9002951a:	214e      	movs	r1, #78	; 0x4e
9002951c:	f7ff fb8a 	bl	90028c34 <__assert_func>
90029520:	4a12      	ldr	r2, [pc, #72]	; (9002956c <rand+0x6c>)
90029522:	4b13      	ldr	r3, [pc, #76]	; (90029570 <rand+0x70>)
90029524:	e9c0 2300 	strd	r2, r3, [r0]
90029528:	4b12      	ldr	r3, [pc, #72]	; (90029574 <rand+0x74>)
9002952a:	6083      	str	r3, [r0, #8]
9002952c:	230b      	movs	r3, #11
9002952e:	8183      	strh	r3, [r0, #12]
90029530:	2201      	movs	r2, #1
90029532:	2300      	movs	r3, #0
90029534:	e9c0 2304 	strd	r2, r3, [r0, #16]
90029538:	6ba1      	ldr	r1, [r4, #56]	; 0x38
9002953a:	480f      	ldr	r0, [pc, #60]	; (90029578 <rand+0x78>)
9002953c:	690a      	ldr	r2, [r1, #16]
9002953e:	694b      	ldr	r3, [r1, #20]
90029540:	4c0e      	ldr	r4, [pc, #56]	; (9002957c <rand+0x7c>)
90029542:	4350      	muls	r0, r2
90029544:	fb04 0003 	mla	r0, r4, r3, r0
90029548:	fba2 3404 	umull	r3, r4, r2, r4
9002954c:	1c5a      	adds	r2, r3, #1
9002954e:	4404      	add	r4, r0
90029550:	f144 0000 	adc.w	r0, r4, #0
90029554:	e9c1 2004 	strd	r2, r0, [r1, #16]
90029558:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
9002955c:	bd10      	pop	{r4, pc}
9002955e:	bf00      	nop
90029560:	200000c8 	.word	0x200000c8
90029564:	900313a0 	.word	0x900313a0
90029568:	900313b7 	.word	0x900313b7
9002956c:	abcd330e 	.word	0xabcd330e
90029570:	e66d1234 	.word	0xe66d1234
90029574:	0005deec 	.word	0x0005deec
90029578:	5851f42d 	.word	0x5851f42d
9002957c:	4c957f2d 	.word	0x4c957f2d

90029580 <_sbrk_r>:
90029580:	b538      	push	{r3, r4, r5, lr}
90029582:	4d06      	ldr	r5, [pc, #24]	; (9002959c <_sbrk_r+0x1c>)
90029584:	2300      	movs	r3, #0
90029586:	4604      	mov	r4, r0
90029588:	4608      	mov	r0, r1
9002958a:	602b      	str	r3, [r5, #0]
9002958c:	f7d9 f888 	bl	900026a0 <_sbrk>
90029590:	1c43      	adds	r3, r0, #1
90029592:	d102      	bne.n	9002959a <_sbrk_r+0x1a>
90029594:	682b      	ldr	r3, [r5, #0]
90029596:	b103      	cbz	r3, 9002959a <_sbrk_r+0x1a>
90029598:	6023      	str	r3, [r4, #0]
9002959a:	bd38      	pop	{r3, r4, r5, pc}
9002959c:	2002cb60 	.word	0x2002cb60

900295a0 <_raise_r>:
900295a0:	291f      	cmp	r1, #31
900295a2:	b538      	push	{r3, r4, r5, lr}
900295a4:	4604      	mov	r4, r0
900295a6:	460d      	mov	r5, r1
900295a8:	d904      	bls.n	900295b4 <_raise_r+0x14>
900295aa:	2316      	movs	r3, #22
900295ac:	6003      	str	r3, [r0, #0]
900295ae:	f04f 30ff 	mov.w	r0, #4294967295
900295b2:	bd38      	pop	{r3, r4, r5, pc}
900295b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
900295b6:	b112      	cbz	r2, 900295be <_raise_r+0x1e>
900295b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
900295bc:	b94b      	cbnz	r3, 900295d2 <_raise_r+0x32>
900295be:	4620      	mov	r0, r4
900295c0:	f000 f830 	bl	90029624 <_getpid_r>
900295c4:	462a      	mov	r2, r5
900295c6:	4601      	mov	r1, r0
900295c8:	4620      	mov	r0, r4
900295ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
900295ce:	f000 b817 	b.w	90029600 <_kill_r>
900295d2:	2b01      	cmp	r3, #1
900295d4:	d00a      	beq.n	900295ec <_raise_r+0x4c>
900295d6:	1c59      	adds	r1, r3, #1
900295d8:	d103      	bne.n	900295e2 <_raise_r+0x42>
900295da:	2316      	movs	r3, #22
900295dc:	6003      	str	r3, [r0, #0]
900295de:	2001      	movs	r0, #1
900295e0:	e7e7      	b.n	900295b2 <_raise_r+0x12>
900295e2:	2400      	movs	r4, #0
900295e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
900295e8:	4628      	mov	r0, r5
900295ea:	4798      	blx	r3
900295ec:	2000      	movs	r0, #0
900295ee:	e7e0      	b.n	900295b2 <_raise_r+0x12>

900295f0 <raise>:
900295f0:	4b02      	ldr	r3, [pc, #8]	; (900295fc <raise+0xc>)
900295f2:	4601      	mov	r1, r0
900295f4:	6818      	ldr	r0, [r3, #0]
900295f6:	f7ff bfd3 	b.w	900295a0 <_raise_r>
900295fa:	bf00      	nop
900295fc:	200000c8 	.word	0x200000c8

90029600 <_kill_r>:
90029600:	b538      	push	{r3, r4, r5, lr}
90029602:	4d07      	ldr	r5, [pc, #28]	; (90029620 <_kill_r+0x20>)
90029604:	2300      	movs	r3, #0
90029606:	4604      	mov	r4, r0
90029608:	4608      	mov	r0, r1
9002960a:	4611      	mov	r1, r2
9002960c:	602b      	str	r3, [r5, #0]
9002960e:	f7d9 f813 	bl	90002638 <_kill>
90029612:	1c43      	adds	r3, r0, #1
90029614:	d102      	bne.n	9002961c <_kill_r+0x1c>
90029616:	682b      	ldr	r3, [r5, #0]
90029618:	b103      	cbz	r3, 9002961c <_kill_r+0x1c>
9002961a:	6023      	str	r3, [r4, #0]
9002961c:	bd38      	pop	{r3, r4, r5, pc}
9002961e:	bf00      	nop
90029620:	2002cb60 	.word	0x2002cb60

90029624 <_getpid_r>:
90029624:	f7d9 b806 	b.w	90002634 <_getpid>

90029628 <siprintf>:
90029628:	b40e      	push	{r1, r2, r3}
9002962a:	b500      	push	{lr}
9002962c:	b09c      	sub	sp, #112	; 0x70
9002962e:	ab1d      	add	r3, sp, #116	; 0x74
90029630:	9002      	str	r0, [sp, #8]
90029632:	9006      	str	r0, [sp, #24]
90029634:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
90029638:	4809      	ldr	r0, [pc, #36]	; (90029660 <siprintf+0x38>)
9002963a:	9107      	str	r1, [sp, #28]
9002963c:	9104      	str	r1, [sp, #16]
9002963e:	4909      	ldr	r1, [pc, #36]	; (90029664 <siprintf+0x3c>)
90029640:	f853 2b04 	ldr.w	r2, [r3], #4
90029644:	9105      	str	r1, [sp, #20]
90029646:	6800      	ldr	r0, [r0, #0]
90029648:	9301      	str	r3, [sp, #4]
9002964a:	a902      	add	r1, sp, #8
9002964c:	f000 fbf4 	bl	90029e38 <_svfiprintf_r>
90029650:	9b02      	ldr	r3, [sp, #8]
90029652:	2200      	movs	r2, #0
90029654:	701a      	strb	r2, [r3, #0]
90029656:	b01c      	add	sp, #112	; 0x70
90029658:	f85d eb04 	ldr.w	lr, [sp], #4
9002965c:	b003      	add	sp, #12
9002965e:	4770      	bx	lr
90029660:	200000c8 	.word	0x200000c8
90029664:	ffff0208 	.word	0xffff0208

90029668 <strstr>:
90029668:	b5f0      	push	{r4, r5, r6, r7, lr}
9002966a:	780c      	ldrb	r4, [r1, #0]
9002966c:	b164      	cbz	r4, 90029688 <strstr+0x20>
9002966e:	4603      	mov	r3, r0
90029670:	781a      	ldrb	r2, [r3, #0]
90029672:	4618      	mov	r0, r3
90029674:	1c5e      	adds	r6, r3, #1
90029676:	b90a      	cbnz	r2, 9002967c <strstr+0x14>
90029678:	4610      	mov	r0, r2
9002967a:	e005      	b.n	90029688 <strstr+0x20>
9002967c:	4294      	cmp	r4, r2
9002967e:	d108      	bne.n	90029692 <strstr+0x2a>
90029680:	460d      	mov	r5, r1
90029682:	f815 2f01 	ldrb.w	r2, [r5, #1]!
90029686:	b902      	cbnz	r2, 9002968a <strstr+0x22>
90029688:	bdf0      	pop	{r4, r5, r6, r7, pc}
9002968a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
9002968e:	4297      	cmp	r7, r2
90029690:	d0f7      	beq.n	90029682 <strstr+0x1a>
90029692:	4633      	mov	r3, r6
90029694:	e7ec      	b.n	90029670 <strstr+0x8>
	...

90029698 <__swbuf_r>:
90029698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9002969a:	460e      	mov	r6, r1
9002969c:	4614      	mov	r4, r2
9002969e:	4605      	mov	r5, r0
900296a0:	b118      	cbz	r0, 900296aa <__swbuf_r+0x12>
900296a2:	6983      	ldr	r3, [r0, #24]
900296a4:	b90b      	cbnz	r3, 900296aa <__swbuf_r+0x12>
900296a6:	f000 fa33 	bl	90029b10 <__sinit>
900296aa:	4b21      	ldr	r3, [pc, #132]	; (90029730 <__swbuf_r+0x98>)
900296ac:	429c      	cmp	r4, r3
900296ae:	d12b      	bne.n	90029708 <__swbuf_r+0x70>
900296b0:	686c      	ldr	r4, [r5, #4]
900296b2:	69a3      	ldr	r3, [r4, #24]
900296b4:	60a3      	str	r3, [r4, #8]
900296b6:	89a3      	ldrh	r3, [r4, #12]
900296b8:	071a      	lsls	r2, r3, #28
900296ba:	d52f      	bpl.n	9002971c <__swbuf_r+0x84>
900296bc:	6923      	ldr	r3, [r4, #16]
900296be:	b36b      	cbz	r3, 9002971c <__swbuf_r+0x84>
900296c0:	6923      	ldr	r3, [r4, #16]
900296c2:	6820      	ldr	r0, [r4, #0]
900296c4:	1ac0      	subs	r0, r0, r3
900296c6:	6963      	ldr	r3, [r4, #20]
900296c8:	b2f6      	uxtb	r6, r6
900296ca:	4283      	cmp	r3, r0
900296cc:	4637      	mov	r7, r6
900296ce:	dc04      	bgt.n	900296da <__swbuf_r+0x42>
900296d0:	4621      	mov	r1, r4
900296d2:	4628      	mov	r0, r5
900296d4:	f000 f988 	bl	900299e8 <_fflush_r>
900296d8:	bb30      	cbnz	r0, 90029728 <__swbuf_r+0x90>
900296da:	68a3      	ldr	r3, [r4, #8]
900296dc:	3b01      	subs	r3, #1
900296de:	60a3      	str	r3, [r4, #8]
900296e0:	6823      	ldr	r3, [r4, #0]
900296e2:	1c5a      	adds	r2, r3, #1
900296e4:	6022      	str	r2, [r4, #0]
900296e6:	701e      	strb	r6, [r3, #0]
900296e8:	6963      	ldr	r3, [r4, #20]
900296ea:	3001      	adds	r0, #1
900296ec:	4283      	cmp	r3, r0
900296ee:	d004      	beq.n	900296fa <__swbuf_r+0x62>
900296f0:	89a3      	ldrh	r3, [r4, #12]
900296f2:	07db      	lsls	r3, r3, #31
900296f4:	d506      	bpl.n	90029704 <__swbuf_r+0x6c>
900296f6:	2e0a      	cmp	r6, #10
900296f8:	d104      	bne.n	90029704 <__swbuf_r+0x6c>
900296fa:	4621      	mov	r1, r4
900296fc:	4628      	mov	r0, r5
900296fe:	f000 f973 	bl	900299e8 <_fflush_r>
90029702:	b988      	cbnz	r0, 90029728 <__swbuf_r+0x90>
90029704:	4638      	mov	r0, r7
90029706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90029708:	4b0a      	ldr	r3, [pc, #40]	; (90029734 <__swbuf_r+0x9c>)
9002970a:	429c      	cmp	r4, r3
9002970c:	d101      	bne.n	90029712 <__swbuf_r+0x7a>
9002970e:	68ac      	ldr	r4, [r5, #8]
90029710:	e7cf      	b.n	900296b2 <__swbuf_r+0x1a>
90029712:	4b09      	ldr	r3, [pc, #36]	; (90029738 <__swbuf_r+0xa0>)
90029714:	429c      	cmp	r4, r3
90029716:	bf08      	it	eq
90029718:	68ec      	ldreq	r4, [r5, #12]
9002971a:	e7ca      	b.n	900296b2 <__swbuf_r+0x1a>
9002971c:	4621      	mov	r1, r4
9002971e:	4628      	mov	r0, r5
90029720:	f000 f80c 	bl	9002973c <__swsetup_r>
90029724:	2800      	cmp	r0, #0
90029726:	d0cb      	beq.n	900296c0 <__swbuf_r+0x28>
90029728:	f04f 37ff 	mov.w	r7, #4294967295
9002972c:	e7ea      	b.n	90029704 <__swbuf_r+0x6c>
9002972e:	bf00      	nop
90029730:	90031438 	.word	0x90031438
90029734:	90031458 	.word	0x90031458
90029738:	90031418 	.word	0x90031418

9002973c <__swsetup_r>:
9002973c:	4b32      	ldr	r3, [pc, #200]	; (90029808 <__swsetup_r+0xcc>)
9002973e:	b570      	push	{r4, r5, r6, lr}
90029740:	681d      	ldr	r5, [r3, #0]
90029742:	4606      	mov	r6, r0
90029744:	460c      	mov	r4, r1
90029746:	b125      	cbz	r5, 90029752 <__swsetup_r+0x16>
90029748:	69ab      	ldr	r3, [r5, #24]
9002974a:	b913      	cbnz	r3, 90029752 <__swsetup_r+0x16>
9002974c:	4628      	mov	r0, r5
9002974e:	f000 f9df 	bl	90029b10 <__sinit>
90029752:	4b2e      	ldr	r3, [pc, #184]	; (9002980c <__swsetup_r+0xd0>)
90029754:	429c      	cmp	r4, r3
90029756:	d10f      	bne.n	90029778 <__swsetup_r+0x3c>
90029758:	686c      	ldr	r4, [r5, #4]
9002975a:	89a3      	ldrh	r3, [r4, #12]
9002975c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90029760:	0719      	lsls	r1, r3, #28
90029762:	d42c      	bmi.n	900297be <__swsetup_r+0x82>
90029764:	06dd      	lsls	r5, r3, #27
90029766:	d411      	bmi.n	9002978c <__swsetup_r+0x50>
90029768:	2309      	movs	r3, #9
9002976a:	6033      	str	r3, [r6, #0]
9002976c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
90029770:	81a3      	strh	r3, [r4, #12]
90029772:	f04f 30ff 	mov.w	r0, #4294967295
90029776:	e03e      	b.n	900297f6 <__swsetup_r+0xba>
90029778:	4b25      	ldr	r3, [pc, #148]	; (90029810 <__swsetup_r+0xd4>)
9002977a:	429c      	cmp	r4, r3
9002977c:	d101      	bne.n	90029782 <__swsetup_r+0x46>
9002977e:	68ac      	ldr	r4, [r5, #8]
90029780:	e7eb      	b.n	9002975a <__swsetup_r+0x1e>
90029782:	4b24      	ldr	r3, [pc, #144]	; (90029814 <__swsetup_r+0xd8>)
90029784:	429c      	cmp	r4, r3
90029786:	bf08      	it	eq
90029788:	68ec      	ldreq	r4, [r5, #12]
9002978a:	e7e6      	b.n	9002975a <__swsetup_r+0x1e>
9002978c:	0758      	lsls	r0, r3, #29
9002978e:	d512      	bpl.n	900297b6 <__swsetup_r+0x7a>
90029790:	6b61      	ldr	r1, [r4, #52]	; 0x34
90029792:	b141      	cbz	r1, 900297a6 <__swsetup_r+0x6a>
90029794:	f104 0344 	add.w	r3, r4, #68	; 0x44
90029798:	4299      	cmp	r1, r3
9002979a:	d002      	beq.n	900297a2 <__swsetup_r+0x66>
9002979c:	4630      	mov	r0, r6
9002979e:	f7ff faff 	bl	90028da0 <_free_r>
900297a2:	2300      	movs	r3, #0
900297a4:	6363      	str	r3, [r4, #52]	; 0x34
900297a6:	89a3      	ldrh	r3, [r4, #12]
900297a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
900297ac:	81a3      	strh	r3, [r4, #12]
900297ae:	2300      	movs	r3, #0
900297b0:	6063      	str	r3, [r4, #4]
900297b2:	6923      	ldr	r3, [r4, #16]
900297b4:	6023      	str	r3, [r4, #0]
900297b6:	89a3      	ldrh	r3, [r4, #12]
900297b8:	f043 0308 	orr.w	r3, r3, #8
900297bc:	81a3      	strh	r3, [r4, #12]
900297be:	6923      	ldr	r3, [r4, #16]
900297c0:	b94b      	cbnz	r3, 900297d6 <__swsetup_r+0x9a>
900297c2:	89a3      	ldrh	r3, [r4, #12]
900297c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
900297c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
900297cc:	d003      	beq.n	900297d6 <__swsetup_r+0x9a>
900297ce:	4621      	mov	r1, r4
900297d0:	4630      	mov	r0, r6
900297d2:	f000 fa63 	bl	90029c9c <__smakebuf_r>
900297d6:	89a0      	ldrh	r0, [r4, #12]
900297d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
900297dc:	f010 0301 	ands.w	r3, r0, #1
900297e0:	d00a      	beq.n	900297f8 <__swsetup_r+0xbc>
900297e2:	2300      	movs	r3, #0
900297e4:	60a3      	str	r3, [r4, #8]
900297e6:	6963      	ldr	r3, [r4, #20]
900297e8:	425b      	negs	r3, r3
900297ea:	61a3      	str	r3, [r4, #24]
900297ec:	6923      	ldr	r3, [r4, #16]
900297ee:	b943      	cbnz	r3, 90029802 <__swsetup_r+0xc6>
900297f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
900297f4:	d1ba      	bne.n	9002976c <__swsetup_r+0x30>
900297f6:	bd70      	pop	{r4, r5, r6, pc}
900297f8:	0781      	lsls	r1, r0, #30
900297fa:	bf58      	it	pl
900297fc:	6963      	ldrpl	r3, [r4, #20]
900297fe:	60a3      	str	r3, [r4, #8]
90029800:	e7f4      	b.n	900297ec <__swsetup_r+0xb0>
90029802:	2000      	movs	r0, #0
90029804:	e7f7      	b.n	900297f6 <__swsetup_r+0xba>
90029806:	bf00      	nop
90029808:	200000c8 	.word	0x200000c8
9002980c:	90031438 	.word	0x90031438
90029810:	90031458 	.word	0x90031458
90029814:	90031418 	.word	0x90031418

90029818 <__register_exitproc>:
90029818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9002981c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 900298d8 <__register_exitproc+0xc0>
90029820:	4606      	mov	r6, r0
90029822:	f8d8 0000 	ldr.w	r0, [r8]
90029826:	461f      	mov	r7, r3
90029828:	460d      	mov	r5, r1
9002982a:	4691      	mov	r9, r2
9002982c:	f000 fa0e 	bl	90029c4c <__retarget_lock_acquire_recursive>
90029830:	4b25      	ldr	r3, [pc, #148]	; (900298c8 <__register_exitproc+0xb0>)
90029832:	681c      	ldr	r4, [r3, #0]
90029834:	b934      	cbnz	r4, 90029844 <__register_exitproc+0x2c>
90029836:	4c25      	ldr	r4, [pc, #148]	; (900298cc <__register_exitproc+0xb4>)
90029838:	601c      	str	r4, [r3, #0]
9002983a:	4b25      	ldr	r3, [pc, #148]	; (900298d0 <__register_exitproc+0xb8>)
9002983c:	b113      	cbz	r3, 90029844 <__register_exitproc+0x2c>
9002983e:	681b      	ldr	r3, [r3, #0]
90029840:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
90029844:	6863      	ldr	r3, [r4, #4]
90029846:	2b1f      	cmp	r3, #31
90029848:	dd07      	ble.n	9002985a <__register_exitproc+0x42>
9002984a:	f8d8 0000 	ldr.w	r0, [r8]
9002984e:	f000 f9ff 	bl	90029c50 <__retarget_lock_release_recursive>
90029852:	f04f 30ff 	mov.w	r0, #4294967295
90029856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9002985a:	b34e      	cbz	r6, 900298b0 <__register_exitproc+0x98>
9002985c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
90029860:	b988      	cbnz	r0, 90029886 <__register_exitproc+0x6e>
90029862:	4b1c      	ldr	r3, [pc, #112]	; (900298d4 <__register_exitproc+0xbc>)
90029864:	b923      	cbnz	r3, 90029870 <__register_exitproc+0x58>
90029866:	f8d8 0000 	ldr.w	r0, [r8]
9002986a:	f000 f9f0 	bl	90029c4e <__retarget_lock_release>
9002986e:	e7f0      	b.n	90029852 <__register_exitproc+0x3a>
90029870:	f44f 7084 	mov.w	r0, #264	; 0x108
90029874:	f7ff fa46 	bl	90028d04 <malloc>
90029878:	2800      	cmp	r0, #0
9002987a:	d0f4      	beq.n	90029866 <__register_exitproc+0x4e>
9002987c:	2300      	movs	r3, #0
9002987e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
90029882:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
90029886:	6863      	ldr	r3, [r4, #4]
90029888:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
9002988c:	2201      	movs	r2, #1
9002988e:	409a      	lsls	r2, r3
90029890:	eb00 0183 	add.w	r1, r0, r3, lsl #2
90029894:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
90029898:	4313      	orrs	r3, r2
9002989a:	2e02      	cmp	r6, #2
9002989c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
900298a0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
900298a4:	bf02      	ittt	eq
900298a6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
900298aa:	431a      	orreq	r2, r3
900298ac:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
900298b0:	6863      	ldr	r3, [r4, #4]
900298b2:	f8d8 0000 	ldr.w	r0, [r8]
900298b6:	1c5a      	adds	r2, r3, #1
900298b8:	3302      	adds	r3, #2
900298ba:	6062      	str	r2, [r4, #4]
900298bc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
900298c0:	f000 f9c6 	bl	90029c50 <__retarget_lock_release_recursive>
900298c4:	2000      	movs	r0, #0
900298c6:	e7c6      	b.n	90029856 <__register_exitproc+0x3e>
900298c8:	20026f74 	.word	0x20026f74
900298cc:	20026ee8 	.word	0x20026ee8
900298d0:	9003139c 	.word	0x9003139c
900298d4:	90028d05 	.word	0x90028d05
900298d8:	2000012c 	.word	0x2000012c

900298dc <__sflush_r>:
900298dc:	898a      	ldrh	r2, [r1, #12]
900298de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900298e2:	4605      	mov	r5, r0
900298e4:	0710      	lsls	r0, r2, #28
900298e6:	460c      	mov	r4, r1
900298e8:	d458      	bmi.n	9002999c <__sflush_r+0xc0>
900298ea:	684b      	ldr	r3, [r1, #4]
900298ec:	2b00      	cmp	r3, #0
900298ee:	dc05      	bgt.n	900298fc <__sflush_r+0x20>
900298f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
900298f2:	2b00      	cmp	r3, #0
900298f4:	dc02      	bgt.n	900298fc <__sflush_r+0x20>
900298f6:	2000      	movs	r0, #0
900298f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900298fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
900298fe:	2e00      	cmp	r6, #0
90029900:	d0f9      	beq.n	900298f6 <__sflush_r+0x1a>
90029902:	2300      	movs	r3, #0
90029904:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
90029908:	682f      	ldr	r7, [r5, #0]
9002990a:	602b      	str	r3, [r5, #0]
9002990c:	d032      	beq.n	90029974 <__sflush_r+0x98>
9002990e:	6d60      	ldr	r0, [r4, #84]	; 0x54
90029910:	89a3      	ldrh	r3, [r4, #12]
90029912:	075a      	lsls	r2, r3, #29
90029914:	d505      	bpl.n	90029922 <__sflush_r+0x46>
90029916:	6863      	ldr	r3, [r4, #4]
90029918:	1ac0      	subs	r0, r0, r3
9002991a:	6b63      	ldr	r3, [r4, #52]	; 0x34
9002991c:	b10b      	cbz	r3, 90029922 <__sflush_r+0x46>
9002991e:	6c23      	ldr	r3, [r4, #64]	; 0x40
90029920:	1ac0      	subs	r0, r0, r3
90029922:	2300      	movs	r3, #0
90029924:	4602      	mov	r2, r0
90029926:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90029928:	6a21      	ldr	r1, [r4, #32]
9002992a:	4628      	mov	r0, r5
9002992c:	47b0      	blx	r6
9002992e:	1c43      	adds	r3, r0, #1
90029930:	89a3      	ldrh	r3, [r4, #12]
90029932:	d106      	bne.n	90029942 <__sflush_r+0x66>
90029934:	6829      	ldr	r1, [r5, #0]
90029936:	291d      	cmp	r1, #29
90029938:	d82c      	bhi.n	90029994 <__sflush_r+0xb8>
9002993a:	4a2a      	ldr	r2, [pc, #168]	; (900299e4 <__sflush_r+0x108>)
9002993c:	40ca      	lsrs	r2, r1
9002993e:	07d6      	lsls	r6, r2, #31
90029940:	d528      	bpl.n	90029994 <__sflush_r+0xb8>
90029942:	2200      	movs	r2, #0
90029944:	6062      	str	r2, [r4, #4]
90029946:	04d9      	lsls	r1, r3, #19
90029948:	6922      	ldr	r2, [r4, #16]
9002994a:	6022      	str	r2, [r4, #0]
9002994c:	d504      	bpl.n	90029958 <__sflush_r+0x7c>
9002994e:	1c42      	adds	r2, r0, #1
90029950:	d101      	bne.n	90029956 <__sflush_r+0x7a>
90029952:	682b      	ldr	r3, [r5, #0]
90029954:	b903      	cbnz	r3, 90029958 <__sflush_r+0x7c>
90029956:	6560      	str	r0, [r4, #84]	; 0x54
90029958:	6b61      	ldr	r1, [r4, #52]	; 0x34
9002995a:	602f      	str	r7, [r5, #0]
9002995c:	2900      	cmp	r1, #0
9002995e:	d0ca      	beq.n	900298f6 <__sflush_r+0x1a>
90029960:	f104 0344 	add.w	r3, r4, #68	; 0x44
90029964:	4299      	cmp	r1, r3
90029966:	d002      	beq.n	9002996e <__sflush_r+0x92>
90029968:	4628      	mov	r0, r5
9002996a:	f7ff fa19 	bl	90028da0 <_free_r>
9002996e:	2000      	movs	r0, #0
90029970:	6360      	str	r0, [r4, #52]	; 0x34
90029972:	e7c1      	b.n	900298f8 <__sflush_r+0x1c>
90029974:	6a21      	ldr	r1, [r4, #32]
90029976:	2301      	movs	r3, #1
90029978:	4628      	mov	r0, r5
9002997a:	47b0      	blx	r6
9002997c:	1c41      	adds	r1, r0, #1
9002997e:	d1c7      	bne.n	90029910 <__sflush_r+0x34>
90029980:	682b      	ldr	r3, [r5, #0]
90029982:	2b00      	cmp	r3, #0
90029984:	d0c4      	beq.n	90029910 <__sflush_r+0x34>
90029986:	2b1d      	cmp	r3, #29
90029988:	d001      	beq.n	9002998e <__sflush_r+0xb2>
9002998a:	2b16      	cmp	r3, #22
9002998c:	d101      	bne.n	90029992 <__sflush_r+0xb6>
9002998e:	602f      	str	r7, [r5, #0]
90029990:	e7b1      	b.n	900298f6 <__sflush_r+0x1a>
90029992:	89a3      	ldrh	r3, [r4, #12]
90029994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90029998:	81a3      	strh	r3, [r4, #12]
9002999a:	e7ad      	b.n	900298f8 <__sflush_r+0x1c>
9002999c:	690f      	ldr	r7, [r1, #16]
9002999e:	2f00      	cmp	r7, #0
900299a0:	d0a9      	beq.n	900298f6 <__sflush_r+0x1a>
900299a2:	0793      	lsls	r3, r2, #30
900299a4:	680e      	ldr	r6, [r1, #0]
900299a6:	bf08      	it	eq
900299a8:	694b      	ldreq	r3, [r1, #20]
900299aa:	600f      	str	r7, [r1, #0]
900299ac:	bf18      	it	ne
900299ae:	2300      	movne	r3, #0
900299b0:	eba6 0807 	sub.w	r8, r6, r7
900299b4:	608b      	str	r3, [r1, #8]
900299b6:	f1b8 0f00 	cmp.w	r8, #0
900299ba:	dd9c      	ble.n	900298f6 <__sflush_r+0x1a>
900299bc:	6a21      	ldr	r1, [r4, #32]
900299be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
900299c0:	4643      	mov	r3, r8
900299c2:	463a      	mov	r2, r7
900299c4:	4628      	mov	r0, r5
900299c6:	47b0      	blx	r6
900299c8:	2800      	cmp	r0, #0
900299ca:	dc06      	bgt.n	900299da <__sflush_r+0xfe>
900299cc:	89a3      	ldrh	r3, [r4, #12]
900299ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900299d2:	81a3      	strh	r3, [r4, #12]
900299d4:	f04f 30ff 	mov.w	r0, #4294967295
900299d8:	e78e      	b.n	900298f8 <__sflush_r+0x1c>
900299da:	4407      	add	r7, r0
900299dc:	eba8 0800 	sub.w	r8, r8, r0
900299e0:	e7e9      	b.n	900299b6 <__sflush_r+0xda>
900299e2:	bf00      	nop
900299e4:	20400001 	.word	0x20400001

900299e8 <_fflush_r>:
900299e8:	b538      	push	{r3, r4, r5, lr}
900299ea:	690b      	ldr	r3, [r1, #16]
900299ec:	4605      	mov	r5, r0
900299ee:	460c      	mov	r4, r1
900299f0:	b913      	cbnz	r3, 900299f8 <_fflush_r+0x10>
900299f2:	2500      	movs	r5, #0
900299f4:	4628      	mov	r0, r5
900299f6:	bd38      	pop	{r3, r4, r5, pc}
900299f8:	b118      	cbz	r0, 90029a02 <_fflush_r+0x1a>
900299fa:	6983      	ldr	r3, [r0, #24]
900299fc:	b90b      	cbnz	r3, 90029a02 <_fflush_r+0x1a>
900299fe:	f000 f887 	bl	90029b10 <__sinit>
90029a02:	4b14      	ldr	r3, [pc, #80]	; (90029a54 <_fflush_r+0x6c>)
90029a04:	429c      	cmp	r4, r3
90029a06:	d11b      	bne.n	90029a40 <_fflush_r+0x58>
90029a08:	686c      	ldr	r4, [r5, #4]
90029a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90029a0e:	2b00      	cmp	r3, #0
90029a10:	d0ef      	beq.n	900299f2 <_fflush_r+0xa>
90029a12:	6e62      	ldr	r2, [r4, #100]	; 0x64
90029a14:	07d0      	lsls	r0, r2, #31
90029a16:	d404      	bmi.n	90029a22 <_fflush_r+0x3a>
90029a18:	0599      	lsls	r1, r3, #22
90029a1a:	d402      	bmi.n	90029a22 <_fflush_r+0x3a>
90029a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
90029a1e:	f000 f915 	bl	90029c4c <__retarget_lock_acquire_recursive>
90029a22:	4628      	mov	r0, r5
90029a24:	4621      	mov	r1, r4
90029a26:	f7ff ff59 	bl	900298dc <__sflush_r>
90029a2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
90029a2c:	07da      	lsls	r2, r3, #31
90029a2e:	4605      	mov	r5, r0
90029a30:	d4e0      	bmi.n	900299f4 <_fflush_r+0xc>
90029a32:	89a3      	ldrh	r3, [r4, #12]
90029a34:	059b      	lsls	r3, r3, #22
90029a36:	d4dd      	bmi.n	900299f4 <_fflush_r+0xc>
90029a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
90029a3a:	f000 f909 	bl	90029c50 <__retarget_lock_release_recursive>
90029a3e:	e7d9      	b.n	900299f4 <_fflush_r+0xc>
90029a40:	4b05      	ldr	r3, [pc, #20]	; (90029a58 <_fflush_r+0x70>)
90029a42:	429c      	cmp	r4, r3
90029a44:	d101      	bne.n	90029a4a <_fflush_r+0x62>
90029a46:	68ac      	ldr	r4, [r5, #8]
90029a48:	e7df      	b.n	90029a0a <_fflush_r+0x22>
90029a4a:	4b04      	ldr	r3, [pc, #16]	; (90029a5c <_fflush_r+0x74>)
90029a4c:	429c      	cmp	r4, r3
90029a4e:	bf08      	it	eq
90029a50:	68ec      	ldreq	r4, [r5, #12]
90029a52:	e7da      	b.n	90029a0a <_fflush_r+0x22>
90029a54:	90031438 	.word	0x90031438
90029a58:	90031458 	.word	0x90031458
90029a5c:	90031418 	.word	0x90031418

90029a60 <std>:
90029a60:	2300      	movs	r3, #0
90029a62:	b510      	push	{r4, lr}
90029a64:	4604      	mov	r4, r0
90029a66:	e9c0 3300 	strd	r3, r3, [r0]
90029a6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
90029a6e:	6083      	str	r3, [r0, #8]
90029a70:	8181      	strh	r1, [r0, #12]
90029a72:	6643      	str	r3, [r0, #100]	; 0x64
90029a74:	81c2      	strh	r2, [r0, #14]
90029a76:	6183      	str	r3, [r0, #24]
90029a78:	4619      	mov	r1, r3
90029a7a:	2208      	movs	r2, #8
90029a7c:	305c      	adds	r0, #92	; 0x5c
90029a7e:	f7ff f987 	bl	90028d90 <memset>
90029a82:	4b05      	ldr	r3, [pc, #20]	; (90029a98 <std+0x38>)
90029a84:	6263      	str	r3, [r4, #36]	; 0x24
90029a86:	4b05      	ldr	r3, [pc, #20]	; (90029a9c <std+0x3c>)
90029a88:	62a3      	str	r3, [r4, #40]	; 0x28
90029a8a:	4b05      	ldr	r3, [pc, #20]	; (90029aa0 <std+0x40>)
90029a8c:	62e3      	str	r3, [r4, #44]	; 0x2c
90029a8e:	4b05      	ldr	r3, [pc, #20]	; (90029aa4 <std+0x44>)
90029a90:	6224      	str	r4, [r4, #32]
90029a92:	6323      	str	r3, [r4, #48]	; 0x30
90029a94:	bd10      	pop	{r4, pc}
90029a96:	bf00      	nop
90029a98:	9002a039 	.word	0x9002a039
90029a9c:	9002a05b 	.word	0x9002a05b
90029aa0:	9002a093 	.word	0x9002a093
90029aa4:	9002a0b7 	.word	0x9002a0b7

90029aa8 <_cleanup_r>:
90029aa8:	4901      	ldr	r1, [pc, #4]	; (90029ab0 <_cleanup_r+0x8>)
90029aaa:	f000 b8af 	b.w	90029c0c <_fwalk_reent>
90029aae:	bf00      	nop
90029ab0:	900299e9 	.word	0x900299e9

90029ab4 <__sfmoreglue>:
90029ab4:	b570      	push	{r4, r5, r6, lr}
90029ab6:	1e4a      	subs	r2, r1, #1
90029ab8:	2568      	movs	r5, #104	; 0x68
90029aba:	4355      	muls	r5, r2
90029abc:	460e      	mov	r6, r1
90029abe:	f105 0174 	add.w	r1, r5, #116	; 0x74
90029ac2:	f7ff f9bd 	bl	90028e40 <_malloc_r>
90029ac6:	4604      	mov	r4, r0
90029ac8:	b140      	cbz	r0, 90029adc <__sfmoreglue+0x28>
90029aca:	2100      	movs	r1, #0
90029acc:	e9c0 1600 	strd	r1, r6, [r0]
90029ad0:	300c      	adds	r0, #12
90029ad2:	60a0      	str	r0, [r4, #8]
90029ad4:	f105 0268 	add.w	r2, r5, #104	; 0x68
90029ad8:	f7ff f95a 	bl	90028d90 <memset>
90029adc:	4620      	mov	r0, r4
90029ade:	bd70      	pop	{r4, r5, r6, pc}

90029ae0 <__sfp_lock_acquire>:
90029ae0:	4801      	ldr	r0, [pc, #4]	; (90029ae8 <__sfp_lock_acquire+0x8>)
90029ae2:	f000 b8b3 	b.w	90029c4c <__retarget_lock_acquire_recursive>
90029ae6:	bf00      	nop
90029ae8:	2002cb94 	.word	0x2002cb94

90029aec <__sfp_lock_release>:
90029aec:	4801      	ldr	r0, [pc, #4]	; (90029af4 <__sfp_lock_release+0x8>)
90029aee:	f000 b8af 	b.w	90029c50 <__retarget_lock_release_recursive>
90029af2:	bf00      	nop
90029af4:	2002cb94 	.word	0x2002cb94

90029af8 <__sinit_lock_acquire>:
90029af8:	4801      	ldr	r0, [pc, #4]	; (90029b00 <__sinit_lock_acquire+0x8>)
90029afa:	f000 b8a7 	b.w	90029c4c <__retarget_lock_acquire_recursive>
90029afe:	bf00      	nop
90029b00:	2002cb8f 	.word	0x2002cb8f

90029b04 <__sinit_lock_release>:
90029b04:	4801      	ldr	r0, [pc, #4]	; (90029b0c <__sinit_lock_release+0x8>)
90029b06:	f000 b8a3 	b.w	90029c50 <__retarget_lock_release_recursive>
90029b0a:	bf00      	nop
90029b0c:	2002cb8f 	.word	0x2002cb8f

90029b10 <__sinit>:
90029b10:	b510      	push	{r4, lr}
90029b12:	4604      	mov	r4, r0
90029b14:	f7ff fff0 	bl	90029af8 <__sinit_lock_acquire>
90029b18:	69a3      	ldr	r3, [r4, #24]
90029b1a:	b11b      	cbz	r3, 90029b24 <__sinit+0x14>
90029b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90029b20:	f7ff bff0 	b.w	90029b04 <__sinit_lock_release>
90029b24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
90029b28:	6523      	str	r3, [r4, #80]	; 0x50
90029b2a:	4b13      	ldr	r3, [pc, #76]	; (90029b78 <__sinit+0x68>)
90029b2c:	4a13      	ldr	r2, [pc, #76]	; (90029b7c <__sinit+0x6c>)
90029b2e:	681b      	ldr	r3, [r3, #0]
90029b30:	62a2      	str	r2, [r4, #40]	; 0x28
90029b32:	42a3      	cmp	r3, r4
90029b34:	bf04      	itt	eq
90029b36:	2301      	moveq	r3, #1
90029b38:	61a3      	streq	r3, [r4, #24]
90029b3a:	4620      	mov	r0, r4
90029b3c:	f000 f820 	bl	90029b80 <__sfp>
90029b40:	6060      	str	r0, [r4, #4]
90029b42:	4620      	mov	r0, r4
90029b44:	f000 f81c 	bl	90029b80 <__sfp>
90029b48:	60a0      	str	r0, [r4, #8]
90029b4a:	4620      	mov	r0, r4
90029b4c:	f000 f818 	bl	90029b80 <__sfp>
90029b50:	2200      	movs	r2, #0
90029b52:	60e0      	str	r0, [r4, #12]
90029b54:	2104      	movs	r1, #4
90029b56:	6860      	ldr	r0, [r4, #4]
90029b58:	f7ff ff82 	bl	90029a60 <std>
90029b5c:	68a0      	ldr	r0, [r4, #8]
90029b5e:	2201      	movs	r2, #1
90029b60:	2109      	movs	r1, #9
90029b62:	f7ff ff7d 	bl	90029a60 <std>
90029b66:	68e0      	ldr	r0, [r4, #12]
90029b68:	2202      	movs	r2, #2
90029b6a:	2112      	movs	r1, #18
90029b6c:	f7ff ff78 	bl	90029a60 <std>
90029b70:	2301      	movs	r3, #1
90029b72:	61a3      	str	r3, [r4, #24]
90029b74:	e7d2      	b.n	90029b1c <__sinit+0xc>
90029b76:	bf00      	nop
90029b78:	90031364 	.word	0x90031364
90029b7c:	90029aa9 	.word	0x90029aa9

90029b80 <__sfp>:
90029b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90029b82:	4607      	mov	r7, r0
90029b84:	f7ff ffac 	bl	90029ae0 <__sfp_lock_acquire>
90029b88:	4b1e      	ldr	r3, [pc, #120]	; (90029c04 <__sfp+0x84>)
90029b8a:	681e      	ldr	r6, [r3, #0]
90029b8c:	69b3      	ldr	r3, [r6, #24]
90029b8e:	b913      	cbnz	r3, 90029b96 <__sfp+0x16>
90029b90:	4630      	mov	r0, r6
90029b92:	f7ff ffbd 	bl	90029b10 <__sinit>
90029b96:	3648      	adds	r6, #72	; 0x48
90029b98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
90029b9c:	3b01      	subs	r3, #1
90029b9e:	d503      	bpl.n	90029ba8 <__sfp+0x28>
90029ba0:	6833      	ldr	r3, [r6, #0]
90029ba2:	b30b      	cbz	r3, 90029be8 <__sfp+0x68>
90029ba4:	6836      	ldr	r6, [r6, #0]
90029ba6:	e7f7      	b.n	90029b98 <__sfp+0x18>
90029ba8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
90029bac:	b9d5      	cbnz	r5, 90029be4 <__sfp+0x64>
90029bae:	4b16      	ldr	r3, [pc, #88]	; (90029c08 <__sfp+0x88>)
90029bb0:	60e3      	str	r3, [r4, #12]
90029bb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
90029bb6:	6665      	str	r5, [r4, #100]	; 0x64
90029bb8:	f000 f847 	bl	90029c4a <__retarget_lock_init_recursive>
90029bbc:	f7ff ff96 	bl	90029aec <__sfp_lock_release>
90029bc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
90029bc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
90029bc8:	6025      	str	r5, [r4, #0]
90029bca:	61a5      	str	r5, [r4, #24]
90029bcc:	2208      	movs	r2, #8
90029bce:	4629      	mov	r1, r5
90029bd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
90029bd4:	f7ff f8dc 	bl	90028d90 <memset>
90029bd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
90029bdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
90029be0:	4620      	mov	r0, r4
90029be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90029be4:	3468      	adds	r4, #104	; 0x68
90029be6:	e7d9      	b.n	90029b9c <__sfp+0x1c>
90029be8:	2104      	movs	r1, #4
90029bea:	4638      	mov	r0, r7
90029bec:	f7ff ff62 	bl	90029ab4 <__sfmoreglue>
90029bf0:	4604      	mov	r4, r0
90029bf2:	6030      	str	r0, [r6, #0]
90029bf4:	2800      	cmp	r0, #0
90029bf6:	d1d5      	bne.n	90029ba4 <__sfp+0x24>
90029bf8:	f7ff ff78 	bl	90029aec <__sfp_lock_release>
90029bfc:	230c      	movs	r3, #12
90029bfe:	603b      	str	r3, [r7, #0]
90029c00:	e7ee      	b.n	90029be0 <__sfp+0x60>
90029c02:	bf00      	nop
90029c04:	90031364 	.word	0x90031364
90029c08:	ffff0001 	.word	0xffff0001

90029c0c <_fwalk_reent>:
90029c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90029c10:	4606      	mov	r6, r0
90029c12:	4688      	mov	r8, r1
90029c14:	f100 0448 	add.w	r4, r0, #72	; 0x48
90029c18:	2700      	movs	r7, #0
90029c1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
90029c1e:	f1b9 0901 	subs.w	r9, r9, #1
90029c22:	d505      	bpl.n	90029c30 <_fwalk_reent+0x24>
90029c24:	6824      	ldr	r4, [r4, #0]
90029c26:	2c00      	cmp	r4, #0
90029c28:	d1f7      	bne.n	90029c1a <_fwalk_reent+0xe>
90029c2a:	4638      	mov	r0, r7
90029c2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90029c30:	89ab      	ldrh	r3, [r5, #12]
90029c32:	2b01      	cmp	r3, #1
90029c34:	d907      	bls.n	90029c46 <_fwalk_reent+0x3a>
90029c36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
90029c3a:	3301      	adds	r3, #1
90029c3c:	d003      	beq.n	90029c46 <_fwalk_reent+0x3a>
90029c3e:	4629      	mov	r1, r5
90029c40:	4630      	mov	r0, r6
90029c42:	47c0      	blx	r8
90029c44:	4307      	orrs	r7, r0
90029c46:	3568      	adds	r5, #104	; 0x68
90029c48:	e7e9      	b.n	90029c1e <_fwalk_reent+0x12>

90029c4a <__retarget_lock_init_recursive>:
90029c4a:	4770      	bx	lr

90029c4c <__retarget_lock_acquire_recursive>:
90029c4c:	4770      	bx	lr

90029c4e <__retarget_lock_release>:
90029c4e:	4770      	bx	lr

90029c50 <__retarget_lock_release_recursive>:
90029c50:	4770      	bx	lr

90029c52 <__swhatbuf_r>:
90029c52:	b570      	push	{r4, r5, r6, lr}
90029c54:	460e      	mov	r6, r1
90029c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90029c5a:	2900      	cmp	r1, #0
90029c5c:	b096      	sub	sp, #88	; 0x58
90029c5e:	4614      	mov	r4, r2
90029c60:	461d      	mov	r5, r3
90029c62:	da07      	bge.n	90029c74 <__swhatbuf_r+0x22>
90029c64:	2300      	movs	r3, #0
90029c66:	602b      	str	r3, [r5, #0]
90029c68:	89b3      	ldrh	r3, [r6, #12]
90029c6a:	061a      	lsls	r2, r3, #24
90029c6c:	d410      	bmi.n	90029c90 <__swhatbuf_r+0x3e>
90029c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
90029c72:	e00e      	b.n	90029c92 <__swhatbuf_r+0x40>
90029c74:	466a      	mov	r2, sp
90029c76:	f000 fa45 	bl	9002a104 <_fstat_r>
90029c7a:	2800      	cmp	r0, #0
90029c7c:	dbf2      	blt.n	90029c64 <__swhatbuf_r+0x12>
90029c7e:	9a01      	ldr	r2, [sp, #4]
90029c80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
90029c84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
90029c88:	425a      	negs	r2, r3
90029c8a:	415a      	adcs	r2, r3
90029c8c:	602a      	str	r2, [r5, #0]
90029c8e:	e7ee      	b.n	90029c6e <__swhatbuf_r+0x1c>
90029c90:	2340      	movs	r3, #64	; 0x40
90029c92:	2000      	movs	r0, #0
90029c94:	6023      	str	r3, [r4, #0]
90029c96:	b016      	add	sp, #88	; 0x58
90029c98:	bd70      	pop	{r4, r5, r6, pc}
	...

90029c9c <__smakebuf_r>:
90029c9c:	898b      	ldrh	r3, [r1, #12]
90029c9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
90029ca0:	079d      	lsls	r5, r3, #30
90029ca2:	4606      	mov	r6, r0
90029ca4:	460c      	mov	r4, r1
90029ca6:	d507      	bpl.n	90029cb8 <__smakebuf_r+0x1c>
90029ca8:	f104 0347 	add.w	r3, r4, #71	; 0x47
90029cac:	6023      	str	r3, [r4, #0]
90029cae:	6123      	str	r3, [r4, #16]
90029cb0:	2301      	movs	r3, #1
90029cb2:	6163      	str	r3, [r4, #20]
90029cb4:	b002      	add	sp, #8
90029cb6:	bd70      	pop	{r4, r5, r6, pc}
90029cb8:	ab01      	add	r3, sp, #4
90029cba:	466a      	mov	r2, sp
90029cbc:	f7ff ffc9 	bl	90029c52 <__swhatbuf_r>
90029cc0:	9900      	ldr	r1, [sp, #0]
90029cc2:	4605      	mov	r5, r0
90029cc4:	4630      	mov	r0, r6
90029cc6:	f7ff f8bb 	bl	90028e40 <_malloc_r>
90029cca:	b948      	cbnz	r0, 90029ce0 <__smakebuf_r+0x44>
90029ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90029cd0:	059a      	lsls	r2, r3, #22
90029cd2:	d4ef      	bmi.n	90029cb4 <__smakebuf_r+0x18>
90029cd4:	f023 0303 	bic.w	r3, r3, #3
90029cd8:	f043 0302 	orr.w	r3, r3, #2
90029cdc:	81a3      	strh	r3, [r4, #12]
90029cde:	e7e3      	b.n	90029ca8 <__smakebuf_r+0xc>
90029ce0:	4b0d      	ldr	r3, [pc, #52]	; (90029d18 <__smakebuf_r+0x7c>)
90029ce2:	62b3      	str	r3, [r6, #40]	; 0x28
90029ce4:	89a3      	ldrh	r3, [r4, #12]
90029ce6:	6020      	str	r0, [r4, #0]
90029ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90029cec:	81a3      	strh	r3, [r4, #12]
90029cee:	9b00      	ldr	r3, [sp, #0]
90029cf0:	6163      	str	r3, [r4, #20]
90029cf2:	9b01      	ldr	r3, [sp, #4]
90029cf4:	6120      	str	r0, [r4, #16]
90029cf6:	b15b      	cbz	r3, 90029d10 <__smakebuf_r+0x74>
90029cf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90029cfc:	4630      	mov	r0, r6
90029cfe:	f000 fa13 	bl	9002a128 <_isatty_r>
90029d02:	b128      	cbz	r0, 90029d10 <__smakebuf_r+0x74>
90029d04:	89a3      	ldrh	r3, [r4, #12]
90029d06:	f023 0303 	bic.w	r3, r3, #3
90029d0a:	f043 0301 	orr.w	r3, r3, #1
90029d0e:	81a3      	strh	r3, [r4, #12]
90029d10:	89a0      	ldrh	r0, [r4, #12]
90029d12:	4305      	orrs	r5, r0
90029d14:	81a5      	strh	r5, [r4, #12]
90029d16:	e7cd      	b.n	90029cb4 <__smakebuf_r+0x18>
90029d18:	90029aa9 	.word	0x90029aa9

90029d1c <__malloc_lock>:
90029d1c:	4801      	ldr	r0, [pc, #4]	; (90029d24 <__malloc_lock+0x8>)
90029d1e:	f7ff bf95 	b.w	90029c4c <__retarget_lock_acquire_recursive>
90029d22:	bf00      	nop
90029d24:	2002cb90 	.word	0x2002cb90

90029d28 <__malloc_unlock>:
90029d28:	4801      	ldr	r0, [pc, #4]	; (90029d30 <__malloc_unlock+0x8>)
90029d2a:	f7ff bf91 	b.w	90029c50 <__retarget_lock_release_recursive>
90029d2e:	bf00      	nop
90029d30:	2002cb90 	.word	0x2002cb90

90029d34 <_realloc_r>:
90029d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90029d36:	4607      	mov	r7, r0
90029d38:	4614      	mov	r4, r2
90029d3a:	460e      	mov	r6, r1
90029d3c:	b921      	cbnz	r1, 90029d48 <_realloc_r+0x14>
90029d3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
90029d42:	4611      	mov	r1, r2
90029d44:	f7ff b87c 	b.w	90028e40 <_malloc_r>
90029d48:	b922      	cbnz	r2, 90029d54 <_realloc_r+0x20>
90029d4a:	f7ff f829 	bl	90028da0 <_free_r>
90029d4e:	4625      	mov	r5, r4
90029d50:	4628      	mov	r0, r5
90029d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90029d54:	f000 fa0a 	bl	9002a16c <_malloc_usable_size_r>
90029d58:	42a0      	cmp	r0, r4
90029d5a:	d20f      	bcs.n	90029d7c <_realloc_r+0x48>
90029d5c:	4621      	mov	r1, r4
90029d5e:	4638      	mov	r0, r7
90029d60:	f7ff f86e 	bl	90028e40 <_malloc_r>
90029d64:	4605      	mov	r5, r0
90029d66:	2800      	cmp	r0, #0
90029d68:	d0f2      	beq.n	90029d50 <_realloc_r+0x1c>
90029d6a:	4631      	mov	r1, r6
90029d6c:	4622      	mov	r2, r4
90029d6e:	f7fe ffe7 	bl	90028d40 <memcpy>
90029d72:	4631      	mov	r1, r6
90029d74:	4638      	mov	r0, r7
90029d76:	f7ff f813 	bl	90028da0 <_free_r>
90029d7a:	e7e9      	b.n	90029d50 <_realloc_r+0x1c>
90029d7c:	4635      	mov	r5, r6
90029d7e:	e7e7      	b.n	90029d50 <_realloc_r+0x1c>

90029d80 <__ssputs_r>:
90029d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90029d84:	688e      	ldr	r6, [r1, #8]
90029d86:	429e      	cmp	r6, r3
90029d88:	4682      	mov	sl, r0
90029d8a:	460c      	mov	r4, r1
90029d8c:	4690      	mov	r8, r2
90029d8e:	461f      	mov	r7, r3
90029d90:	d838      	bhi.n	90029e04 <__ssputs_r+0x84>
90029d92:	898a      	ldrh	r2, [r1, #12]
90029d94:	f412 6f90 	tst.w	r2, #1152	; 0x480
90029d98:	d032      	beq.n	90029e00 <__ssputs_r+0x80>
90029d9a:	6825      	ldr	r5, [r4, #0]
90029d9c:	6909      	ldr	r1, [r1, #16]
90029d9e:	eba5 0901 	sub.w	r9, r5, r1
90029da2:	6965      	ldr	r5, [r4, #20]
90029da4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
90029da8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
90029dac:	3301      	adds	r3, #1
90029dae:	444b      	add	r3, r9
90029db0:	106d      	asrs	r5, r5, #1
90029db2:	429d      	cmp	r5, r3
90029db4:	bf38      	it	cc
90029db6:	461d      	movcc	r5, r3
90029db8:	0553      	lsls	r3, r2, #21
90029dba:	d531      	bpl.n	90029e20 <__ssputs_r+0xa0>
90029dbc:	4629      	mov	r1, r5
90029dbe:	f7ff f83f 	bl	90028e40 <_malloc_r>
90029dc2:	4606      	mov	r6, r0
90029dc4:	b950      	cbnz	r0, 90029ddc <__ssputs_r+0x5c>
90029dc6:	230c      	movs	r3, #12
90029dc8:	f8ca 3000 	str.w	r3, [sl]
90029dcc:	89a3      	ldrh	r3, [r4, #12]
90029dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90029dd2:	81a3      	strh	r3, [r4, #12]
90029dd4:	f04f 30ff 	mov.w	r0, #4294967295
90029dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90029ddc:	6921      	ldr	r1, [r4, #16]
90029dde:	464a      	mov	r2, r9
90029de0:	f7fe ffae 	bl	90028d40 <memcpy>
90029de4:	89a3      	ldrh	r3, [r4, #12]
90029de6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
90029dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90029dee:	81a3      	strh	r3, [r4, #12]
90029df0:	6126      	str	r6, [r4, #16]
90029df2:	6165      	str	r5, [r4, #20]
90029df4:	444e      	add	r6, r9
90029df6:	eba5 0509 	sub.w	r5, r5, r9
90029dfa:	6026      	str	r6, [r4, #0]
90029dfc:	60a5      	str	r5, [r4, #8]
90029dfe:	463e      	mov	r6, r7
90029e00:	42be      	cmp	r6, r7
90029e02:	d900      	bls.n	90029e06 <__ssputs_r+0x86>
90029e04:	463e      	mov	r6, r7
90029e06:	4632      	mov	r2, r6
90029e08:	6820      	ldr	r0, [r4, #0]
90029e0a:	4641      	mov	r1, r8
90029e0c:	f7fe ffa6 	bl	90028d5c <memmove>
90029e10:	68a3      	ldr	r3, [r4, #8]
90029e12:	6822      	ldr	r2, [r4, #0]
90029e14:	1b9b      	subs	r3, r3, r6
90029e16:	4432      	add	r2, r6
90029e18:	60a3      	str	r3, [r4, #8]
90029e1a:	6022      	str	r2, [r4, #0]
90029e1c:	2000      	movs	r0, #0
90029e1e:	e7db      	b.n	90029dd8 <__ssputs_r+0x58>
90029e20:	462a      	mov	r2, r5
90029e22:	f7ff ff87 	bl	90029d34 <_realloc_r>
90029e26:	4606      	mov	r6, r0
90029e28:	2800      	cmp	r0, #0
90029e2a:	d1e1      	bne.n	90029df0 <__ssputs_r+0x70>
90029e2c:	6921      	ldr	r1, [r4, #16]
90029e2e:	4650      	mov	r0, sl
90029e30:	f7fe ffb6 	bl	90028da0 <_free_r>
90029e34:	e7c7      	b.n	90029dc6 <__ssputs_r+0x46>
	...

90029e38 <_svfiprintf_r>:
90029e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90029e3c:	4698      	mov	r8, r3
90029e3e:	898b      	ldrh	r3, [r1, #12]
90029e40:	061b      	lsls	r3, r3, #24
90029e42:	b09d      	sub	sp, #116	; 0x74
90029e44:	4607      	mov	r7, r0
90029e46:	460d      	mov	r5, r1
90029e48:	4614      	mov	r4, r2
90029e4a:	d50e      	bpl.n	90029e6a <_svfiprintf_r+0x32>
90029e4c:	690b      	ldr	r3, [r1, #16]
90029e4e:	b963      	cbnz	r3, 90029e6a <_svfiprintf_r+0x32>
90029e50:	2140      	movs	r1, #64	; 0x40
90029e52:	f7fe fff5 	bl	90028e40 <_malloc_r>
90029e56:	6028      	str	r0, [r5, #0]
90029e58:	6128      	str	r0, [r5, #16]
90029e5a:	b920      	cbnz	r0, 90029e66 <_svfiprintf_r+0x2e>
90029e5c:	230c      	movs	r3, #12
90029e5e:	603b      	str	r3, [r7, #0]
90029e60:	f04f 30ff 	mov.w	r0, #4294967295
90029e64:	e0d1      	b.n	9002a00a <_svfiprintf_r+0x1d2>
90029e66:	2340      	movs	r3, #64	; 0x40
90029e68:	616b      	str	r3, [r5, #20]
90029e6a:	2300      	movs	r3, #0
90029e6c:	9309      	str	r3, [sp, #36]	; 0x24
90029e6e:	2320      	movs	r3, #32
90029e70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
90029e74:	f8cd 800c 	str.w	r8, [sp, #12]
90029e78:	2330      	movs	r3, #48	; 0x30
90029e7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 9002a024 <_svfiprintf_r+0x1ec>
90029e7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
90029e82:	f04f 0901 	mov.w	r9, #1
90029e86:	4623      	mov	r3, r4
90029e88:	469a      	mov	sl, r3
90029e8a:	f813 2b01 	ldrb.w	r2, [r3], #1
90029e8e:	b10a      	cbz	r2, 90029e94 <_svfiprintf_r+0x5c>
90029e90:	2a25      	cmp	r2, #37	; 0x25
90029e92:	d1f9      	bne.n	90029e88 <_svfiprintf_r+0x50>
90029e94:	ebba 0b04 	subs.w	fp, sl, r4
90029e98:	d00b      	beq.n	90029eb2 <_svfiprintf_r+0x7a>
90029e9a:	465b      	mov	r3, fp
90029e9c:	4622      	mov	r2, r4
90029e9e:	4629      	mov	r1, r5
90029ea0:	4638      	mov	r0, r7
90029ea2:	f7ff ff6d 	bl	90029d80 <__ssputs_r>
90029ea6:	3001      	adds	r0, #1
90029ea8:	f000 80aa 	beq.w	9002a000 <_svfiprintf_r+0x1c8>
90029eac:	9a09      	ldr	r2, [sp, #36]	; 0x24
90029eae:	445a      	add	r2, fp
90029eb0:	9209      	str	r2, [sp, #36]	; 0x24
90029eb2:	f89a 3000 	ldrb.w	r3, [sl]
90029eb6:	2b00      	cmp	r3, #0
90029eb8:	f000 80a2 	beq.w	9002a000 <_svfiprintf_r+0x1c8>
90029ebc:	2300      	movs	r3, #0
90029ebe:	f04f 32ff 	mov.w	r2, #4294967295
90029ec2:	e9cd 2305 	strd	r2, r3, [sp, #20]
90029ec6:	f10a 0a01 	add.w	sl, sl, #1
90029eca:	9304      	str	r3, [sp, #16]
90029ecc:	9307      	str	r3, [sp, #28]
90029ece:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
90029ed2:	931a      	str	r3, [sp, #104]	; 0x68
90029ed4:	4654      	mov	r4, sl
90029ed6:	2205      	movs	r2, #5
90029ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
90029edc:	4851      	ldr	r0, [pc, #324]	; (9002a024 <_svfiprintf_r+0x1ec>)
90029ede:	f7d6 f99f 	bl	90000220 <memchr>
90029ee2:	9a04      	ldr	r2, [sp, #16]
90029ee4:	b9d8      	cbnz	r0, 90029f1e <_svfiprintf_r+0xe6>
90029ee6:	06d0      	lsls	r0, r2, #27
90029ee8:	bf44      	itt	mi
90029eea:	2320      	movmi	r3, #32
90029eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90029ef0:	0711      	lsls	r1, r2, #28
90029ef2:	bf44      	itt	mi
90029ef4:	232b      	movmi	r3, #43	; 0x2b
90029ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90029efa:	f89a 3000 	ldrb.w	r3, [sl]
90029efe:	2b2a      	cmp	r3, #42	; 0x2a
90029f00:	d015      	beq.n	90029f2e <_svfiprintf_r+0xf6>
90029f02:	9a07      	ldr	r2, [sp, #28]
90029f04:	4654      	mov	r4, sl
90029f06:	2000      	movs	r0, #0
90029f08:	f04f 0c0a 	mov.w	ip, #10
90029f0c:	4621      	mov	r1, r4
90029f0e:	f811 3b01 	ldrb.w	r3, [r1], #1
90029f12:	3b30      	subs	r3, #48	; 0x30
90029f14:	2b09      	cmp	r3, #9
90029f16:	d94e      	bls.n	90029fb6 <_svfiprintf_r+0x17e>
90029f18:	b1b0      	cbz	r0, 90029f48 <_svfiprintf_r+0x110>
90029f1a:	9207      	str	r2, [sp, #28]
90029f1c:	e014      	b.n	90029f48 <_svfiprintf_r+0x110>
90029f1e:	eba0 0308 	sub.w	r3, r0, r8
90029f22:	fa09 f303 	lsl.w	r3, r9, r3
90029f26:	4313      	orrs	r3, r2
90029f28:	9304      	str	r3, [sp, #16]
90029f2a:	46a2      	mov	sl, r4
90029f2c:	e7d2      	b.n	90029ed4 <_svfiprintf_r+0x9c>
90029f2e:	9b03      	ldr	r3, [sp, #12]
90029f30:	1d19      	adds	r1, r3, #4
90029f32:	681b      	ldr	r3, [r3, #0]
90029f34:	9103      	str	r1, [sp, #12]
90029f36:	2b00      	cmp	r3, #0
90029f38:	bfbb      	ittet	lt
90029f3a:	425b      	neglt	r3, r3
90029f3c:	f042 0202 	orrlt.w	r2, r2, #2
90029f40:	9307      	strge	r3, [sp, #28]
90029f42:	9307      	strlt	r3, [sp, #28]
90029f44:	bfb8      	it	lt
90029f46:	9204      	strlt	r2, [sp, #16]
90029f48:	7823      	ldrb	r3, [r4, #0]
90029f4a:	2b2e      	cmp	r3, #46	; 0x2e
90029f4c:	d10c      	bne.n	90029f68 <_svfiprintf_r+0x130>
90029f4e:	7863      	ldrb	r3, [r4, #1]
90029f50:	2b2a      	cmp	r3, #42	; 0x2a
90029f52:	d135      	bne.n	90029fc0 <_svfiprintf_r+0x188>
90029f54:	9b03      	ldr	r3, [sp, #12]
90029f56:	1d1a      	adds	r2, r3, #4
90029f58:	681b      	ldr	r3, [r3, #0]
90029f5a:	9203      	str	r2, [sp, #12]
90029f5c:	2b00      	cmp	r3, #0
90029f5e:	bfb8      	it	lt
90029f60:	f04f 33ff 	movlt.w	r3, #4294967295
90029f64:	3402      	adds	r4, #2
90029f66:	9305      	str	r3, [sp, #20]
90029f68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 9002a034 <_svfiprintf_r+0x1fc>
90029f6c:	7821      	ldrb	r1, [r4, #0]
90029f6e:	2203      	movs	r2, #3
90029f70:	4650      	mov	r0, sl
90029f72:	f7d6 f955 	bl	90000220 <memchr>
90029f76:	b140      	cbz	r0, 90029f8a <_svfiprintf_r+0x152>
90029f78:	2340      	movs	r3, #64	; 0x40
90029f7a:	eba0 000a 	sub.w	r0, r0, sl
90029f7e:	fa03 f000 	lsl.w	r0, r3, r0
90029f82:	9b04      	ldr	r3, [sp, #16]
90029f84:	4303      	orrs	r3, r0
90029f86:	3401      	adds	r4, #1
90029f88:	9304      	str	r3, [sp, #16]
90029f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
90029f8e:	4826      	ldr	r0, [pc, #152]	; (9002a028 <_svfiprintf_r+0x1f0>)
90029f90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
90029f94:	2206      	movs	r2, #6
90029f96:	f7d6 f943 	bl	90000220 <memchr>
90029f9a:	2800      	cmp	r0, #0
90029f9c:	d038      	beq.n	9002a010 <_svfiprintf_r+0x1d8>
90029f9e:	4b23      	ldr	r3, [pc, #140]	; (9002a02c <_svfiprintf_r+0x1f4>)
90029fa0:	bb1b      	cbnz	r3, 90029fea <_svfiprintf_r+0x1b2>
90029fa2:	9b03      	ldr	r3, [sp, #12]
90029fa4:	3307      	adds	r3, #7
90029fa6:	f023 0307 	bic.w	r3, r3, #7
90029faa:	3308      	adds	r3, #8
90029fac:	9303      	str	r3, [sp, #12]
90029fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
90029fb0:	4433      	add	r3, r6
90029fb2:	9309      	str	r3, [sp, #36]	; 0x24
90029fb4:	e767      	b.n	90029e86 <_svfiprintf_r+0x4e>
90029fb6:	fb0c 3202 	mla	r2, ip, r2, r3
90029fba:	460c      	mov	r4, r1
90029fbc:	2001      	movs	r0, #1
90029fbe:	e7a5      	b.n	90029f0c <_svfiprintf_r+0xd4>
90029fc0:	2300      	movs	r3, #0
90029fc2:	3401      	adds	r4, #1
90029fc4:	9305      	str	r3, [sp, #20]
90029fc6:	4619      	mov	r1, r3
90029fc8:	f04f 0c0a 	mov.w	ip, #10
90029fcc:	4620      	mov	r0, r4
90029fce:	f810 2b01 	ldrb.w	r2, [r0], #1
90029fd2:	3a30      	subs	r2, #48	; 0x30
90029fd4:	2a09      	cmp	r2, #9
90029fd6:	d903      	bls.n	90029fe0 <_svfiprintf_r+0x1a8>
90029fd8:	2b00      	cmp	r3, #0
90029fda:	d0c5      	beq.n	90029f68 <_svfiprintf_r+0x130>
90029fdc:	9105      	str	r1, [sp, #20]
90029fde:	e7c3      	b.n	90029f68 <_svfiprintf_r+0x130>
90029fe0:	fb0c 2101 	mla	r1, ip, r1, r2
90029fe4:	4604      	mov	r4, r0
90029fe6:	2301      	movs	r3, #1
90029fe8:	e7f0      	b.n	90029fcc <_svfiprintf_r+0x194>
90029fea:	ab03      	add	r3, sp, #12
90029fec:	9300      	str	r3, [sp, #0]
90029fee:	462a      	mov	r2, r5
90029ff0:	4b0f      	ldr	r3, [pc, #60]	; (9002a030 <_svfiprintf_r+0x1f8>)
90029ff2:	a904      	add	r1, sp, #16
90029ff4:	4638      	mov	r0, r7
90029ff6:	f3af 8000 	nop.w
90029ffa:	1c42      	adds	r2, r0, #1
90029ffc:	4606      	mov	r6, r0
90029ffe:	d1d6      	bne.n	90029fae <_svfiprintf_r+0x176>
9002a000:	89ab      	ldrh	r3, [r5, #12]
9002a002:	065b      	lsls	r3, r3, #25
9002a004:	f53f af2c 	bmi.w	90029e60 <_svfiprintf_r+0x28>
9002a008:	9809      	ldr	r0, [sp, #36]	; 0x24
9002a00a:	b01d      	add	sp, #116	; 0x74
9002a00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002a010:	ab03      	add	r3, sp, #12
9002a012:	9300      	str	r3, [sp, #0]
9002a014:	462a      	mov	r2, r5
9002a016:	4b06      	ldr	r3, [pc, #24]	; (9002a030 <_svfiprintf_r+0x1f8>)
9002a018:	a904      	add	r1, sp, #16
9002a01a:	4638      	mov	r0, r7
9002a01c:	f7ff f932 	bl	90029284 <_printf_i>
9002a020:	e7eb      	b.n	90029ffa <_svfiprintf_r+0x1c2>
9002a022:	bf00      	nop
9002a024:	90031368 	.word	0x90031368
9002a028:	90031372 	.word	0x90031372
9002a02c:	00000000 	.word	0x00000000
9002a030:	90029d81 	.word	0x90029d81
9002a034:	9003136e 	.word	0x9003136e

9002a038 <__sread>:
9002a038:	b510      	push	{r4, lr}
9002a03a:	460c      	mov	r4, r1
9002a03c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9002a040:	f000 f89c 	bl	9002a17c <_read_r>
9002a044:	2800      	cmp	r0, #0
9002a046:	bfab      	itete	ge
9002a048:	6d63      	ldrge	r3, [r4, #84]	; 0x54
9002a04a:	89a3      	ldrhlt	r3, [r4, #12]
9002a04c:	181b      	addge	r3, r3, r0
9002a04e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
9002a052:	bfac      	ite	ge
9002a054:	6563      	strge	r3, [r4, #84]	; 0x54
9002a056:	81a3      	strhlt	r3, [r4, #12]
9002a058:	bd10      	pop	{r4, pc}

9002a05a <__swrite>:
9002a05a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9002a05e:	461f      	mov	r7, r3
9002a060:	898b      	ldrh	r3, [r1, #12]
9002a062:	05db      	lsls	r3, r3, #23
9002a064:	4605      	mov	r5, r0
9002a066:	460c      	mov	r4, r1
9002a068:	4616      	mov	r6, r2
9002a06a:	d505      	bpl.n	9002a078 <__swrite+0x1e>
9002a06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9002a070:	2302      	movs	r3, #2
9002a072:	2200      	movs	r2, #0
9002a074:	f000 f868 	bl	9002a148 <_lseek_r>
9002a078:	89a3      	ldrh	r3, [r4, #12]
9002a07a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9002a07e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9002a082:	81a3      	strh	r3, [r4, #12]
9002a084:	4632      	mov	r2, r6
9002a086:	463b      	mov	r3, r7
9002a088:	4628      	mov	r0, r5
9002a08a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9002a08e:	f000 b817 	b.w	9002a0c0 <_write_r>

9002a092 <__sseek>:
9002a092:	b510      	push	{r4, lr}
9002a094:	460c      	mov	r4, r1
9002a096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9002a09a:	f000 f855 	bl	9002a148 <_lseek_r>
9002a09e:	1c43      	adds	r3, r0, #1
9002a0a0:	89a3      	ldrh	r3, [r4, #12]
9002a0a2:	bf15      	itete	ne
9002a0a4:	6560      	strne	r0, [r4, #84]	; 0x54
9002a0a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
9002a0aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
9002a0ae:	81a3      	strheq	r3, [r4, #12]
9002a0b0:	bf18      	it	ne
9002a0b2:	81a3      	strhne	r3, [r4, #12]
9002a0b4:	bd10      	pop	{r4, pc}

9002a0b6 <__sclose>:
9002a0b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9002a0ba:	f000 b813 	b.w	9002a0e4 <_close_r>
	...

9002a0c0 <_write_r>:
9002a0c0:	b538      	push	{r3, r4, r5, lr}
9002a0c2:	4d07      	ldr	r5, [pc, #28]	; (9002a0e0 <_write_r+0x20>)
9002a0c4:	4604      	mov	r4, r0
9002a0c6:	4608      	mov	r0, r1
9002a0c8:	4611      	mov	r1, r2
9002a0ca:	2200      	movs	r2, #0
9002a0cc:	602a      	str	r2, [r5, #0]
9002a0ce:	461a      	mov	r2, r3
9002a0d0:	f7d8 facd 	bl	9000266e <_write>
9002a0d4:	1c43      	adds	r3, r0, #1
9002a0d6:	d102      	bne.n	9002a0de <_write_r+0x1e>
9002a0d8:	682b      	ldr	r3, [r5, #0]
9002a0da:	b103      	cbz	r3, 9002a0de <_write_r+0x1e>
9002a0dc:	6023      	str	r3, [r4, #0]
9002a0de:	bd38      	pop	{r3, r4, r5, pc}
9002a0e0:	2002cb60 	.word	0x2002cb60

9002a0e4 <_close_r>:
9002a0e4:	b538      	push	{r3, r4, r5, lr}
9002a0e6:	4d06      	ldr	r5, [pc, #24]	; (9002a100 <_close_r+0x1c>)
9002a0e8:	2300      	movs	r3, #0
9002a0ea:	4604      	mov	r4, r0
9002a0ec:	4608      	mov	r0, r1
9002a0ee:	602b      	str	r3, [r5, #0]
9002a0f0:	f7d8 faca 	bl	90002688 <_close>
9002a0f4:	1c43      	adds	r3, r0, #1
9002a0f6:	d102      	bne.n	9002a0fe <_close_r+0x1a>
9002a0f8:	682b      	ldr	r3, [r5, #0]
9002a0fa:	b103      	cbz	r3, 9002a0fe <_close_r+0x1a>
9002a0fc:	6023      	str	r3, [r4, #0]
9002a0fe:	bd38      	pop	{r3, r4, r5, pc}
9002a100:	2002cb60 	.word	0x2002cb60

9002a104 <_fstat_r>:
9002a104:	b538      	push	{r3, r4, r5, lr}
9002a106:	4d07      	ldr	r5, [pc, #28]	; (9002a124 <_fstat_r+0x20>)
9002a108:	2300      	movs	r3, #0
9002a10a:	4604      	mov	r4, r0
9002a10c:	4608      	mov	r0, r1
9002a10e:	4611      	mov	r1, r2
9002a110:	602b      	str	r3, [r5, #0]
9002a112:	f7d8 fabc 	bl	9000268e <_fstat>
9002a116:	1c43      	adds	r3, r0, #1
9002a118:	d102      	bne.n	9002a120 <_fstat_r+0x1c>
9002a11a:	682b      	ldr	r3, [r5, #0]
9002a11c:	b103      	cbz	r3, 9002a120 <_fstat_r+0x1c>
9002a11e:	6023      	str	r3, [r4, #0]
9002a120:	bd38      	pop	{r3, r4, r5, pc}
9002a122:	bf00      	nop
9002a124:	2002cb60 	.word	0x2002cb60

9002a128 <_isatty_r>:
9002a128:	b538      	push	{r3, r4, r5, lr}
9002a12a:	4d06      	ldr	r5, [pc, #24]	; (9002a144 <_isatty_r+0x1c>)
9002a12c:	2300      	movs	r3, #0
9002a12e:	4604      	mov	r4, r0
9002a130:	4608      	mov	r0, r1
9002a132:	602b      	str	r3, [r5, #0]
9002a134:	f7d8 fab0 	bl	90002698 <_isatty>
9002a138:	1c43      	adds	r3, r0, #1
9002a13a:	d102      	bne.n	9002a142 <_isatty_r+0x1a>
9002a13c:	682b      	ldr	r3, [r5, #0]
9002a13e:	b103      	cbz	r3, 9002a142 <_isatty_r+0x1a>
9002a140:	6023      	str	r3, [r4, #0]
9002a142:	bd38      	pop	{r3, r4, r5, pc}
9002a144:	2002cb60 	.word	0x2002cb60

9002a148 <_lseek_r>:
9002a148:	b538      	push	{r3, r4, r5, lr}
9002a14a:	4d07      	ldr	r5, [pc, #28]	; (9002a168 <_lseek_r+0x20>)
9002a14c:	4604      	mov	r4, r0
9002a14e:	4608      	mov	r0, r1
9002a150:	4611      	mov	r1, r2
9002a152:	2200      	movs	r2, #0
9002a154:	602a      	str	r2, [r5, #0]
9002a156:	461a      	mov	r2, r3
9002a158:	f7d8 faa0 	bl	9000269c <_lseek>
9002a15c:	1c43      	adds	r3, r0, #1
9002a15e:	d102      	bne.n	9002a166 <_lseek_r+0x1e>
9002a160:	682b      	ldr	r3, [r5, #0]
9002a162:	b103      	cbz	r3, 9002a166 <_lseek_r+0x1e>
9002a164:	6023      	str	r3, [r4, #0]
9002a166:	bd38      	pop	{r3, r4, r5, pc}
9002a168:	2002cb60 	.word	0x2002cb60

9002a16c <_malloc_usable_size_r>:
9002a16c:	f851 3c04 	ldr.w	r3, [r1, #-4]
9002a170:	1f18      	subs	r0, r3, #4
9002a172:	2b00      	cmp	r3, #0
9002a174:	bfbc      	itt	lt
9002a176:	580b      	ldrlt	r3, [r1, r0]
9002a178:	18c0      	addlt	r0, r0, r3
9002a17a:	4770      	bx	lr

9002a17c <_read_r>:
9002a17c:	b538      	push	{r3, r4, r5, lr}
9002a17e:	4d07      	ldr	r5, [pc, #28]	; (9002a19c <_read_r+0x20>)
9002a180:	4604      	mov	r4, r0
9002a182:	4608      	mov	r0, r1
9002a184:	4611      	mov	r1, r2
9002a186:	2200      	movs	r2, #0
9002a188:	602a      	str	r2, [r5, #0]
9002a18a:	461a      	mov	r2, r3
9002a18c:	f7d8 fa62 	bl	90002654 <_read>
9002a190:	1c43      	adds	r3, r0, #1
9002a192:	d102      	bne.n	9002a19a <_read_r+0x1e>
9002a194:	682b      	ldr	r3, [r5, #0]
9002a196:	b103      	cbz	r3, 9002a19a <_read_r+0x1e>
9002a198:	6023      	str	r3, [r4, #0]
9002a19a:	bd38      	pop	{r3, r4, r5, pc}
9002a19c:	2002cb60 	.word	0x2002cb60

9002a1a0 <_init>:
9002a1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9002a1a2:	bf00      	nop
9002a1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
9002a1a6:	bc08      	pop	{r3}
9002a1a8:	469e      	mov	lr, r3
9002a1aa:	4770      	bx	lr

9002a1ac <_fini>:
9002a1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9002a1ae:	bf00      	nop
9002a1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
9002a1b2:	bc08      	pop	{r3}
9002a1b4:	469e      	mov	lr, r3
9002a1b6:	4770      	bx	lr
